
myquator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c2c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08007d3c  08007d3c  00008d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f60  08007f60  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007f60  08007f60  0000906c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007f60  08007f60  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f64  08007f64  00008f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007f68  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001324  2000006c  08007fd4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001390  08007fd4  00009390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124cb  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395d  00000000  00000000  0001b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001eec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfc  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005321  00000000  00000000  00020f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c50  00000000  00000000  00026225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009125d  00000000  00000000  0003de75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000cf118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d4168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d24 	.word	0x08007d24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08007d24 	.word	0x08007d24

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b18      	ldr	r3, [pc, #96]	@ (80001b8 <MX_DMA_Init+0x68>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a17      	ldr	r2, [pc, #92]	@ (80001b8 <MX_DMA_Init+0x68>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	@ (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200c      	movs	r0, #12
 8000174:	f000 fec3 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000178:	200c      	movs	r0, #12
 800017a:	f000 fedc 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200d      	movs	r0, #13
 8000184:	f000 febb 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000188:	200d      	movs	r0, #13
 800018a:	f000 fed4 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 feb3 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fecc 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 feab 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 fec4 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	4a06      	ldr	r2, [pc, #24]	@ (80001e4 <vApplicationGetIdleTaskMemory+0x28>)
 80001cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	4a05      	ldr	r2, [pc, #20]	@ (80001e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2280      	movs	r2, #128	@ 0x80
 80001d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	200000e0 	.word	0x200000e0

080001ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001f2:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <MX_FREERTOS_Init+0x30>)
 80001f4:	1d3c      	adds	r4, r7, #4
 80001f6:	461d      	mov	r5, r3
 80001f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000200:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f005 fbff 	bl	8005a0c <osThreadCreate>
 800020e:	4603      	mov	r3, r0
 8000210:	4a03      	ldr	r2, [pc, #12]	@ (8000220 <MX_FREERTOS_Init+0x34>)
 8000212:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000214:	bf00      	nop
 8000216:	3720      	adds	r7, #32
 8000218:	46bd      	mov	sp, r7
 800021a:	bdb0      	pop	{r4, r5, r7, pc}
 800021c:	08007d48 	.word	0x08007d48
 8000220:	20000088 	.word	0x20000088

08000224 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	//int p=-90,r=-90,y=-90;
	  for(;;)
	  {
		osDelay(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000230:	f005 fc38 	bl	8005aa4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	4806      	ldr	r0, [pc, #24]	@ (8000254 <StartDefaultTask+0x30>)
 800023a:	f001 fa8d 	bl	8001758 <HAL_GPIO_WritePin>
		osDelay(10);
 800023e:	200a      	movs	r0, #10
 8000240:	f005 fc30 	bl	8005aa4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2101      	movs	r1, #1
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <StartDefaultTask+0x30>)
 800024a:	f001 fa85 	bl	8001758 <HAL_GPIO_WritePin>
		osDelay(1000);
 800024e:	bf00      	nop
 8000250:	e7ec      	b.n	800022c <StartDefaultTask+0x8>
 8000252:	bf00      	nop
 8000254:	40010800 	.word	0x40010800

08000258 <MX_GPIO_Init>:
     PB10   ------> S_TIM2_CH3
     PB6   ------> S_TIM4_CH1
     PB7   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	@ 0x28
 800025c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026c:	4b51      	ldr	r3, [pc, #324]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a50      	ldr	r2, [pc, #320]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b4e      	ldr	r3, [pc, #312]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0310 	and.w	r3, r3, #16
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000284:	4b4b      	ldr	r3, [pc, #300]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a4a      	ldr	r2, [pc, #296]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b48      	ldr	r3, [pc, #288]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0320 	and.w	r3, r3, #32
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029c:	4b45      	ldr	r3, [pc, #276]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a44      	ldr	r2, [pc, #272]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b42      	ldr	r3, [pc, #264]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b4:	4b3f      	ldr	r3, [pc, #252]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a3e      	ldr	r2, [pc, #248]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b3c      	ldr	r3, [pc, #240]	@ (80003b4 <MX_GPIO_Init+0x15c>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0308 	and.w	r3, r3, #8
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CSN_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f240 1101 	movw	r1, #257	@ 0x101
 80002d2:	4839      	ldr	r0, [pc, #228]	@ (80003b8 <MX_GPIO_Init+0x160>)
 80002d4:	f001 fa40 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002de:	4837      	ldr	r0, [pc, #220]	@ (80003bc <MX_GPIO_Init+0x164>)
 80002e0:	f001 fa3a 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80002e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	4831      	ldr	r0, [pc, #196]	@ (80003c0 <MX_GPIO_Init+0x168>)
 80002fa:	f001 f8a9 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002fe:	2301      	movs	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2302      	movs	r3, #2
 800030c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4619      	mov	r1, r3
 8000314:	4828      	ldr	r0, [pc, #160]	@ (80003b8 <MX_GPIO_Init+0x160>)
 8000316:	f001 f89b 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : M4_Pin */
  GPIO_InitStruct.Pin = M4_Pin;
 800031a:	2302      	movs	r3, #2
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800031e:	2302      	movs	r3, #2
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M4_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4822      	ldr	r0, [pc, #136]	@ (80003b8 <MX_GPIO_Init+0x160>)
 800032e:	f001 f88f 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_Pin M2_Pin M1_Pin */
  GPIO_InitStruct.Pin = M3_Pin|M2_Pin|M1_Pin;
 8000332:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000338:	2302      	movs	r3, #2
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2302      	movs	r3, #2
 800033e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	481d      	ldr	r0, [pc, #116]	@ (80003bc <MX_GPIO_Init+0x164>)
 8000348:	f001 f882 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800034c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035a:	2303      	movs	r3, #3
 800035c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	4619      	mov	r1, r3
 8000364:	4815      	ldr	r0, [pc, #84]	@ (80003bc <MX_GPIO_Init+0x164>)
 8000366:	f001 f873 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800036a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800036e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2303      	movs	r3, #3
 800037a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <MX_GPIO_Init+0x160>)
 8000384:	f001 f864 	bl	8001450 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_GPIO_Init+0x16c>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	627b      	str	r3, [r7, #36]	@ 0x24
 800038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000394:	627b      	str	r3, [r7, #36]	@ 0x24
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800039c:	627b      	str	r3, [r7, #36]	@ 0x24
 800039e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80003a6:	4a07      	ldr	r2, [pc, #28]	@ (80003c4 <MX_GPIO_Init+0x16c>)
 80003a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003aa:	6053      	str	r3, [r2, #4]

}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	@ 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40011000 	.word	0x40011000
 80003c4:	40010000 	.word	0x40010000

080003c8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003ce:	4a13      	ldr	r2, [pc, #76]	@ (800041c <MX_I2C1_Init+0x54>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003d4:	4a12      	ldr	r2, [pc, #72]	@ (8000420 <MX_I2C1_Init+0x58>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_I2C1_Init+0x50>)
 8000406:	f001 f9bf 	bl	8001788 <HAL_I2C_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f94f 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200002e0 	.word	0x200002e0
 800041c:	40005400 	.word	0x40005400
 8000420:	000186a0 	.word	0x000186a0

08000424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	@ 0x28
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a4b      	ldr	r2, [pc, #300]	@ (800056c <HAL_I2C_MspInit+0x148>)
 8000440:	4293      	cmp	r3, r2
 8000442:	f040 808f 	bne.w	8000564 <HAL_I2C_MspInit+0x140>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b4a      	ldr	r3, [pc, #296]	@ (8000570 <HAL_I2C_MspInit+0x14c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a49      	ldr	r2, [pc, #292]	@ (8000570 <HAL_I2C_MspInit+0x14c>)
 800044c:	f043 0308 	orr.w	r3, r3, #8
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b47      	ldr	r3, [pc, #284]	@ (8000570 <HAL_I2C_MspInit+0x14c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0308 	and.w	r3, r3, #8
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800045e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000464:	2312      	movs	r3, #18
 8000466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	4840      	ldr	r0, [pc, #256]	@ (8000574 <HAL_I2C_MspInit+0x150>)
 8000474:	f000 ffec 	bl	8001450 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000478:	4b3f      	ldr	r3, [pc, #252]	@ (8000578 <HAL_I2C_MspInit+0x154>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	627b      	str	r3, [r7, #36]	@ 0x24
 800047e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000480:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000484:	627b      	str	r3, [r7, #36]	@ 0x24
 8000486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	627b      	str	r3, [r7, #36]	@ 0x24
 800048e:	4a3a      	ldr	r2, [pc, #232]	@ (8000578 <HAL_I2C_MspInit+0x154>)
 8000490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000492:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000494:	4b36      	ldr	r3, [pc, #216]	@ (8000570 <HAL_I2C_MspInit+0x14c>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	4a35      	ldr	r2, [pc, #212]	@ (8000570 <HAL_I2C_MspInit+0x14c>)
 800049a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800049e:	61d3      	str	r3, [r2, #28]
 80004a0:	4b33      	ldr	r3, [pc, #204]	@ (8000570 <HAL_I2C_MspInit+0x14c>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80004ac:	4b33      	ldr	r3, [pc, #204]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004ae:	4a34      	ldr	r2, [pc, #208]	@ (8000580 <HAL_I2C_MspInit+0x15c>)
 80004b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004b2:	4b32      	ldr	r3, [pc, #200]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004b4:	2210      	movs	r2, #16
 80004b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004b8:	4b30      	ldr	r3, [pc, #192]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004be:	4b2f      	ldr	r3, [pc, #188]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004c4:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004ca:	4b2c      	ldr	r3, [pc, #176]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80004d0:	4b2a      	ldr	r3, [pc, #168]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80004d6:	4b29      	ldr	r3, [pc, #164]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004d8:	2200      	movs	r2, #0
 80004da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80004dc:	4827      	ldr	r0, [pc, #156]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004de:	f000 fd45 	bl	8000f6c <HAL_DMA_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 80004e8:	f000 f8e3 	bl	80006b2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a23      	ldr	r2, [pc, #140]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80004f2:	4a22      	ldr	r2, [pc, #136]	@ (800057c <HAL_I2C_MspInit+0x158>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80004f8:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 80004fa:	4a23      	ldr	r2, [pc, #140]	@ (8000588 <HAL_I2C_MspInit+0x164>)
 80004fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004fe:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 800050c:	2280      	movs	r2, #128	@ 0x80
 800050e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000528:	4816      	ldr	r0, [pc, #88]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 800052a:	f000 fd1f 	bl	8000f6c <HAL_DMA_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8000534:	f000 f8bd 	bl	80006b2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a12      	ldr	r2, [pc, #72]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 800053c:	639a      	str	r2, [r3, #56]	@ 0x38
 800053e:	4a11      	ldr	r2, [pc, #68]	@ (8000584 <HAL_I2C_MspInit+0x160>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2105      	movs	r1, #5
 8000548:	201f      	movs	r0, #31
 800054a:	f000 fcd8 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800054e:	201f      	movs	r0, #31
 8000550:	f000 fcf1 	bl	8000f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2105      	movs	r1, #5
 8000558:	2020      	movs	r0, #32
 800055a:	f000 fcd0 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800055e:	2020      	movs	r0, #32
 8000560:	f000 fce9 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	@ 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40005400 	.word	0x40005400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010c00 	.word	0x40010c00
 8000578:	40010000 	.word	0x40010000
 800057c:	20000334 	.word	0x20000334
 8000580:	4002006c 	.word	0x4002006c
 8000584:	20000378 	.word	0x20000378
 8000588:	40020080 	.word	0x40020080

0800058c <Show_Log>:
#include "stdio.h"



void Show_Log()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    printf("\t\033[1;31;40m     ______  _____  __        ___    ____  \033[0m\r\n");
 8000590:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <Show_Log+0x28>)
 8000592:	f006 fd5b 	bl	800704c <puts>
    printf("\t\033[1;31;40m    /  _/  |/  / / / /  _   _|__ \\  / __ \ \033[0m\r\n");
 8000596:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <Show_Log+0x2c>)
 8000598:	f006 fd58 	bl	800704c <puts>
    printf("\t\033[1;31;40m    / // /|_/ / / / /  | | / /_/ / / / / / \033[0m\r\n");
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <Show_Log+0x30>)
 800059e:	f006 fd55 	bl	800704c <puts>
    printf("\t\033[1;31;40m  _/ // /  / / /_/ /   | |/ / __/_/ /_/ /  \033[0m\r\n");
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <Show_Log+0x34>)
 80005a4:	f006 fd52 	bl	800704c <puts>
    printf("\t\033[1;31;40m /___/_/  /_/\____ /    |___/____(_)____/   \033[0m\r\n");
 80005a8:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <Show_Log+0x38>)
 80005aa:	f006 fd4f 	bl	800704c <puts>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08007d64 	.word	0x08007d64
 80005b8:	08007da0 	.word	0x08007da0
 80005bc:	08007ddc 	.word	0x08007ddc
 80005c0:	08007e18 	.word	0x08007e18
 80005c4:	08007e54 	.word	0x08007e54

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fb3a 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82a 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f7ff fe40 	bl	8000258 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d8:	f7ff fdba 	bl	8000150 <MX_DMA_Init>
  MX_I2C1_Init();
 80005dc:	f7ff fef4 	bl	80003c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005e0:	f000 f86e 	bl	80006c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 fa94 	bl	8000b10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Show_Log();
 80005e8:	f7ff ffd0 	bl	800058c <Show_Log>
  //Driver_Init();
  NRF24L01_Init();
 80005ec:	f005 f8ba 	bl	8005764 <NRF24L01_Init>

  while(NRF24L01_Check())
 80005f0:	e002      	b.n	80005f8 <main+0x30>
  {
	  HAL_Delay(200);
 80005f2:	20c8      	movs	r0, #200	@ 0xc8
 80005f4:	f000 fb88 	bl	8000d08 <HAL_Delay>
  while(NRF24L01_Check())
 80005f8:	f005 f93c 	bl	8005874 <NRF24L01_Check>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <main+0x2a>
  }

  QMC5883_Init();
 8000602:	f005 f96b 	bl	80058dc <QMC5883_Init>
  //SPL06_Init();
  QMI8658_Init();
 8000606:	f005 f99f 	bl	8005948 <QMI8658_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800060a:	f7ff fdef 	bl	80001ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800060e:	f005 f9f6 	bl	80059fe <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(800);
 8000612:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000616:	f000 fb77 	bl	8000d08 <HAL_Delay>
	  printf("hello world!\r\n");
 800061a:	4802      	ldr	r0, [pc, #8]	@ (8000624 <main+0x5c>)
 800061c:	f006 fd16 	bl	800704c <puts>
	  HAL_Delay(800);
 8000620:	bf00      	nop
 8000622:	e7f6      	b.n	8000612 <main+0x4a>
 8000624:	08007e90 	.word	0x08007e90

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b090      	sub	sp, #64	@ 0x40
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2228      	movs	r2, #40	@ 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fde8 	bl	800720c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000666:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fddb 	bl	800422c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800067c:	f000 f819 	bl	80006b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f004 f848 	bl	8004730 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006a6:	f000 f804 	bl	80006b2 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	@ 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b6:	b672      	cpsid	i
}
 80006b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <Error_Handler+0x8>
	...

080006c0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f004 f99b 	bl	8004a4c <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f7ff ffc9 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200003bc 	.word	0x200003bc
 8000728:	40013000 	.word	0x40013000

0800072c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a41      	ldr	r2, [pc, #260]	@ (800084c <HAL_SPI_MspInit+0x120>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d17b      	bne.n	8000844 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074c:	4b40      	ldr	r3, [pc, #256]	@ (8000850 <HAL_SPI_MspInit+0x124>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a3f      	ldr	r2, [pc, #252]	@ (8000850 <HAL_SPI_MspInit+0x124>)
 8000752:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b3d      	ldr	r3, [pc, #244]	@ (8000850 <HAL_SPI_MspInit+0x124>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b3a      	ldr	r3, [pc, #232]	@ (8000850 <HAL_SPI_MspInit+0x124>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a39      	ldr	r2, [pc, #228]	@ (8000850 <HAL_SPI_MspInit+0x124>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <HAL_SPI_MspInit+0x124>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800077c:	23a0      	movs	r3, #160	@ 0xa0
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4831      	ldr	r0, [pc, #196]	@ (8000854 <HAL_SPI_MspInit+0x128>)
 8000790:	f000 fe5e 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	482b      	ldr	r0, [pc, #172]	@ (8000854 <HAL_SPI_MspInit+0x128>)
 80007a8:	f000 fe52 	bl	8001450 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80007ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007ae:	4a2b      	ldr	r2, [pc, #172]	@ (800085c <HAL_SPI_MspInit+0x130>)
 80007b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b2:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80007dc:	481e      	ldr	r0, [pc, #120]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007de:	f000 fbc5 	bl	8000f6c <HAL_DMA_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80007e8:	f7ff ff63 	bl	80006b2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007f2:	4a19      	ldr	r2, [pc, #100]	@ (8000858 <HAL_SPI_MspInit+0x12c>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007f8:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 80007fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000864 <HAL_SPI_MspInit+0x138>)
 80007fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 8000800:	2210      	movs	r2, #16
 8000802:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 800082a:	f000 fb9f 	bl	8000f6c <HAL_DMA_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000834:	f7ff ff3d 	bl	80006b2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 800083c:	649a      	str	r2, [r3, #72]	@ 0x48
 800083e:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <HAL_SPI_MspInit+0x134>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013000 	.word	0x40013000
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800
 8000858:	20000414 	.word	0x20000414
 800085c:	4002001c 	.word	0x4002001c
 8000860:	20000458 	.word	0x20000458
 8000864:	40020030 	.word	0x40020030

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <HAL_MspInit+0x68>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <HAL_MspInit+0x68>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_MspInit+0x68>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_MspInit+0x68>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <HAL_MspInit+0x68>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x68>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fb2a 	bl	8000efe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_MspInit+0x6c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_MspInit+0x6c>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f9de 	bl	8000cd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000914:	f005 fe50 	bl	80065b8 <xTaskGetSchedulerState>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d001      	beq.n	8000922 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800091e:	f006 f83b 	bl	8006998 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <DMA1_Channel2_IRQHandler+0x10>)
 800092e:	f000 fc4f 	bl	80011d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000414 	.word	0x20000414

0800093c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <DMA1_Channel3_IRQHandler+0x10>)
 8000942:	f000 fc45 	bl	80011d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000458 	.word	0x20000458

08000950 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000954:	4802      	ldr	r0, [pc, #8]	@ (8000960 <DMA1_Channel6_IRQHandler+0x10>)
 8000956:	f000 fc3b 	bl	80011d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000334 	.word	0x20000334

08000964 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <DMA1_Channel7_IRQHandler+0x10>)
 800096a:	f000 fc31 	bl	80011d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000378 	.word	0x20000378

08000978 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800097c:	4802      	ldr	r0, [pc, #8]	@ (8000988 <I2C1_EV_IRQHandler+0x10>)
 800097e:	f001 fb37 	bl	8001ff0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002e0 	.word	0x200002e0

0800098c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <I2C1_ER_IRQHandler+0x10>)
 8000992:	f001 fc9e 	bl	80022d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002e0 	.word	0x200002e0

080009a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
  }

  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e009      	b.n	8000a00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f879 	bl	8000aec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf1      	blt.n	80009ec <_write+0x12>
  }
  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_close>:

int _close(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a38:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f006 fc00 	bl	80072a8 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20005000 	.word	0x20005000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	2000049c 	.word	0x2000049c
 8000adc:	20001390 	.word	0x20001390

08000ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	2201      	movs	r2, #1
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <__io_putchar+0x20>)
 8000afe:	f004 fc20 	bl	8005342 <HAL_UART_Transmit>
  return ch;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200004a0 	.word	0x200004a0

08000b10 <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	2208      	movs	r2, #8
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f004 fbab 	bl	80052a2 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f7ff fdae 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200004a0 	.word	0x200004a0
 8000b60:	40004400 	.word	0x40004400

08000b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bec <HAL_UART_MspInit+0x88>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d12f      	bne.n	8000be4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	4a19      	ldr	r2, [pc, #100]	@ (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8e:	61d3      	str	r3, [r2, #28]
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	@ (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <HAL_UART_MspInit+0x90>)
 8000bc8:	f000 fc42 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <HAL_UART_MspInit+0x90>)
 8000be0:	f000 fc36 	bl	8001450 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ff72 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bfe:	490c      	ldr	r1, [pc, #48]	@ (8000c30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c00:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c14:	4c09      	ldr	r4, [pc, #36]	@ (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f006 fb47 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fccf 	bl	80005c8 <main>
  bx lr
 8000c2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c34:	08007f68 	.word	0x08007f68
  ldr r2, =_sbss
 8000c38:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c3c:	20001390 	.word	0x20001390

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_Init+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	@ (8000c6c <HAL_Init+0x28>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f947 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe02 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f95f 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f927 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200004e8 	.word	0x200004e8

08000cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	@ (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200004e8 	.word	0x200004e8

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffe0 	bl	8000cf4 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4906      	ldr	r1, [pc, #24]	@ (8000de8 <__NVIC_EnableIRQ+0x34>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff90 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff2d 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff42 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff35 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e043      	b.n	800100a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <HAL_DMA_Init+0xa8>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <HAL_DMA_Init+0xac>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <HAL_DMA_Init+0xb0>)
 8000f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000fb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	bffdfff8 	.word	0xbffdfff8
 8001018:	cccccccd 	.word	0xcccccccd
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_DMA_Start_IT+0x20>
 800103c:	2302      	movs	r3, #2
 800103e:	e04b      	b.n	80010d8 <HAL_DMA_Start_IT+0xb8>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d13a      	bne.n	80010ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 f9bc 	bl	80013f6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 020e 	orr.w	r2, r2, #14
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00f      	b.n	80010b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0204 	bic.w	r2, r2, #4
 80010a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 020a 	orr.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e005      	b.n	80010d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010d2:	2302      	movs	r3, #2
 80010d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d005      	beq.n	8001104 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2204      	movs	r2, #4
 80010fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e051      	b.n	80011a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020e 	bic.w	r2, r2, #14
 8001112:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a22      	ldr	r2, [pc, #136]	@ (80011b4 <HAL_DMA_Abort_IT+0xd4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d029      	beq.n	8001182 <HAL_DMA_Abort_IT+0xa2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <HAL_DMA_Abort_IT+0xd8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d022      	beq.n	800117e <HAL_DMA_Abort_IT+0x9e>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <HAL_DMA_Abort_IT+0xdc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01a      	beq.n	8001178 <HAL_DMA_Abort_IT+0x98>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a1e      	ldr	r2, [pc, #120]	@ (80011c0 <HAL_DMA_Abort_IT+0xe0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d012      	beq.n	8001172 <HAL_DMA_Abort_IT+0x92>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <HAL_DMA_Abort_IT+0xe4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00a      	beq.n	800116c <HAL_DMA_Abort_IT+0x8c>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1b      	ldr	r2, [pc, #108]	@ (80011c8 <HAL_DMA_Abort_IT+0xe8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d102      	bne.n	8001166 <HAL_DMA_Abort_IT+0x86>
 8001160:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001164:	e00e      	b.n	8001184 <HAL_DMA_Abort_IT+0xa4>
 8001166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800116a:	e00b      	b.n	8001184 <HAL_DMA_Abort_IT+0xa4>
 800116c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001170:	e008      	b.n	8001184 <HAL_DMA_Abort_IT+0xa4>
 8001172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001176:	e005      	b.n	8001184 <HAL_DMA_Abort_IT+0xa4>
 8001178:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117c:	e002      	b.n	8001184 <HAL_DMA_Abort_IT+0xa4>
 800117e:	2310      	movs	r3, #16
 8001180:	e000      	b.n	8001184 <HAL_DMA_Abort_IT+0xa4>
 8001182:	2301      	movs	r3, #1
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_DMA_Abort_IT+0xec>)
 8001186:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	4798      	blx	r3
    } 
  }
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020008 	.word	0x40020008
 80011b8:	4002001c 	.word	0x4002001c
 80011bc:	40020030 	.word	0x40020030
 80011c0:	40020044 	.word	0x40020044
 80011c4:	40020058 	.word	0x40020058
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	2204      	movs	r2, #4
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d04f      	beq.n	8001298 <HAL_DMA_IRQHandler+0xc8>
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d04a      	beq.n	8001298 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0204 	bic.w	r2, r2, #4
 800121e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a66      	ldr	r2, [pc, #408]	@ (80013c0 <HAL_DMA_IRQHandler+0x1f0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d029      	beq.n	800127e <HAL_DMA_IRQHandler+0xae>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a65      	ldr	r2, [pc, #404]	@ (80013c4 <HAL_DMA_IRQHandler+0x1f4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d022      	beq.n	800127a <HAL_DMA_IRQHandler+0xaa>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a63      	ldr	r2, [pc, #396]	@ (80013c8 <HAL_DMA_IRQHandler+0x1f8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01a      	beq.n	8001274 <HAL_DMA_IRQHandler+0xa4>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a62      	ldr	r2, [pc, #392]	@ (80013cc <HAL_DMA_IRQHandler+0x1fc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d012      	beq.n	800126e <HAL_DMA_IRQHandler+0x9e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a60      	ldr	r2, [pc, #384]	@ (80013d0 <HAL_DMA_IRQHandler+0x200>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x98>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a5f      	ldr	r2, [pc, #380]	@ (80013d4 <HAL_DMA_IRQHandler+0x204>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d102      	bne.n	8001262 <HAL_DMA_IRQHandler+0x92>
 800125c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001260:	e00e      	b.n	8001280 <HAL_DMA_IRQHandler+0xb0>
 8001262:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001266:	e00b      	b.n	8001280 <HAL_DMA_IRQHandler+0xb0>
 8001268:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800126c:	e008      	b.n	8001280 <HAL_DMA_IRQHandler+0xb0>
 800126e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001272:	e005      	b.n	8001280 <HAL_DMA_IRQHandler+0xb0>
 8001274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001278:	e002      	b.n	8001280 <HAL_DMA_IRQHandler+0xb0>
 800127a:	2340      	movs	r3, #64	@ 0x40
 800127c:	e000      	b.n	8001280 <HAL_DMA_IRQHandler+0xb0>
 800127e:	2304      	movs	r3, #4
 8001280:	4a55      	ldr	r2, [pc, #340]	@ (80013d8 <HAL_DMA_IRQHandler+0x208>)
 8001282:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8094 	beq.w	80013b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001296:	e08e      	b.n	80013b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	2202      	movs	r2, #2
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d056      	beq.n	8001356 <HAL_DMA_IRQHandler+0x186>
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d051      	beq.n	8001356 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10b      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 020a 	bic.w	r2, r2, #10
 80012ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <HAL_DMA_IRQHandler+0x1f0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d029      	beq.n	8001336 <HAL_DMA_IRQHandler+0x166>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a37      	ldr	r2, [pc, #220]	@ (80013c4 <HAL_DMA_IRQHandler+0x1f4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d022      	beq.n	8001332 <HAL_DMA_IRQHandler+0x162>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a35      	ldr	r2, [pc, #212]	@ (80013c8 <HAL_DMA_IRQHandler+0x1f8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01a      	beq.n	800132c <HAL_DMA_IRQHandler+0x15c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a34      	ldr	r2, [pc, #208]	@ (80013cc <HAL_DMA_IRQHandler+0x1fc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d012      	beq.n	8001326 <HAL_DMA_IRQHandler+0x156>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a32      	ldr	r2, [pc, #200]	@ (80013d0 <HAL_DMA_IRQHandler+0x200>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00a      	beq.n	8001320 <HAL_DMA_IRQHandler+0x150>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a31      	ldr	r2, [pc, #196]	@ (80013d4 <HAL_DMA_IRQHandler+0x204>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d102      	bne.n	800131a <HAL_DMA_IRQHandler+0x14a>
 8001314:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001318:	e00e      	b.n	8001338 <HAL_DMA_IRQHandler+0x168>
 800131a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800131e:	e00b      	b.n	8001338 <HAL_DMA_IRQHandler+0x168>
 8001320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001324:	e008      	b.n	8001338 <HAL_DMA_IRQHandler+0x168>
 8001326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132a:	e005      	b.n	8001338 <HAL_DMA_IRQHandler+0x168>
 800132c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001330:	e002      	b.n	8001338 <HAL_DMA_IRQHandler+0x168>
 8001332:	2320      	movs	r3, #32
 8001334:	e000      	b.n	8001338 <HAL_DMA_IRQHandler+0x168>
 8001336:	2302      	movs	r3, #2
 8001338:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <HAL_DMA_IRQHandler+0x208>)
 800133a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d034      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001354:	e02f      	b.n	80013b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	2208      	movs	r2, #8
 800135c:	409a      	lsls	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d028      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x1e8>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d023      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 020e 	bic.w	r2, r2, #14
 800137e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
    }
  }
  return;
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
}
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40020008 	.word	0x40020008
 80013c4:	4002001c 	.word	0x4002001c
 80013c8:	40020030 	.word	0x40020030
 80013cc:	40020044 	.word	0x40020044
 80013d0:	40020058 	.word	0x40020058
 80013d4:	4002006c 	.word	0x4002006c
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ea:	b2db      	uxtb	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d108      	bne.n	8001436 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001434:	e007      	b.n	8001446 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	60da      	str	r2, [r3, #12]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	@ 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e169      	b.n	8001738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8158 	bne.w	8001732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a9a      	ldr	r2, [pc, #616]	@ (80016f0 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a98      	ldr	r2, [pc, #608]	@ (80016f0 <HAL_GPIO_Init+0x2a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a98      	ldr	r2, [pc, #608]	@ (80016f4 <HAL_GPIO_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a96      	ldr	r2, [pc, #600]	@ (80016f4 <HAL_GPIO_Init+0x2a4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a96      	ldr	r2, [pc, #600]	@ (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a94      	ldr	r2, [pc, #592]	@ (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a94      	ldr	r2, [pc, #592]	@ (80016fc <HAL_GPIO_Init+0x2ac>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a92      	ldr	r2, [pc, #584]	@ (80016fc <HAL_GPIO_Init+0x2ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a92      	ldr	r2, [pc, #584]	@ (8001700 <HAL_GPIO_Init+0x2b0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a90      	ldr	r2, [pc, #576]	@ (8001700 <HAL_GPIO_Init+0x2b0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	@ (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a79      	ldr	r2, [pc, #484]	@ (8001704 <HAL_GPIO_Init+0x2b4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	@ 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80b1 	beq.w	8001732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <HAL_GPIO_Init+0x2b8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a48      	ldr	r2, [pc, #288]	@ (800170c <HAL_GPIO_Init+0x2bc>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a40      	ldr	r2, [pc, #256]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3f      	ldr	r2, [pc, #252]	@ (8001714 <HAL_GPIO_Init+0x2c4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3e      	ldr	r2, [pc, #248]	@ (8001718 <HAL_GPIO_Init+0x2c8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3d      	ldr	r2, [pc, #244]	@ (800171c <HAL_GPIO_Init+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e0>
 800162c:	2303      	movs	r3, #3
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001630:	2304      	movs	r3, #4
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 800163c:	2300      	movs	r3, #0
 800163e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164e:	492f      	ldr	r1, [pc, #188]	@ (800170c <HAL_GPIO_Init+0x2bc>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	492c      	ldr	r1, [pc, #176]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001676:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4928      	ldr	r1, [pc, #160]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	4922      	ldr	r1, [pc, #136]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	491e      	ldr	r1, [pc, #120]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4918      	ldr	r1, [pc, #96]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c6:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4914      	ldr	r1, [pc, #80]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d021      	beq.n	8001724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	490e      	ldr	r1, [pc, #56]	@ (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x2e2>
 80016ee:	bf00      	nop
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10310000 	.word	0x10310000
 80016f8:	10220000 	.word	0x10220000
 80016fc:	10210000 	.word	0x10210000
 8001700:	10120000 	.word	0x10120000
 8001704:	10110000 	.word	0x10110000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00
 8001718:	40011000 	.word	0x40011000
 800171c:	40011400 	.word	0x40011400
 8001720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_GPIO_Init+0x304>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	43db      	mvns	r3, r3
 800172c:	4909      	ldr	r1, [pc, #36]	@ (8001754 <HAL_GPIO_Init+0x304>)
 800172e:	4013      	ands	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	3301      	adds	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f ae8e 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	372c      	adds	r7, #44	@ 0x2c
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e12b      	b.n	80019f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe fe38 	bl	8000424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	@ 0x24
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017ec:	f003 f8e8 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a81      	ldr	r2, [pc, #516]	@ (80019fc <HAL_I2C_Init+0x274>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d807      	bhi.n	800180c <HAL_I2C_Init+0x84>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a80      	ldr	r2, [pc, #512]	@ (8001a00 <HAL_I2C_Init+0x278>)
 8001800:	4293      	cmp	r3, r2
 8001802:	bf94      	ite	ls
 8001804:	2301      	movls	r3, #1
 8001806:	2300      	movhi	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e006      	b.n	800181a <HAL_I2C_Init+0x92>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a04 <HAL_I2C_Init+0x27c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	bf94      	ite	ls
 8001814:	2301      	movls	r3, #1
 8001816:	2300      	movhi	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0e7      	b.n	80019f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a78      	ldr	r2, [pc, #480]	@ (8001a08 <HAL_I2C_Init+0x280>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a6a      	ldr	r2, [pc, #424]	@ (80019fc <HAL_I2C_Init+0x274>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d802      	bhi.n	800185c <HAL_I2C_Init+0xd4>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	e009      	b.n	8001870 <HAL_I2C_Init+0xe8>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	4a69      	ldr	r2, [pc, #420]	@ (8001a0c <HAL_I2C_Init+0x284>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	3301      	adds	r3, #1
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	430b      	orrs	r3, r1
 8001876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001882:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	495c      	ldr	r1, [pc, #368]	@ (80019fc <HAL_I2C_Init+0x274>)
 800188c:	428b      	cmp	r3, r1
 800188e:	d819      	bhi.n	80018c4 <HAL_I2C_Init+0x13c>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e59      	subs	r1, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fbb1 f3f3 	udiv	r3, r1, r3
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018a4:	400b      	ands	r3, r1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <HAL_I2C_Init+0x138>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1e59      	subs	r1, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018be:	e051      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e04f      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d111      	bne.n	80018f0 <HAL_I2C_Init+0x168>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	440b      	add	r3, r1
 80018da:	fbb0 f3f3 	udiv	r3, r0, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e012      	b.n	8001916 <HAL_I2C_Init+0x18e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Init+0x196>
 800191a:	2301      	movs	r3, #1
 800191c:	e022      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10e      	bne.n	8001944 <HAL_I2C_Init+0x1bc>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1e58      	subs	r0, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	440b      	add	r3, r1
 8001934:	fbb0 f3f3 	udiv	r3, r0, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001942:	e00f      	b.n	8001964 <HAL_I2C_Init+0x1dc>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1e58      	subs	r0, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	0099      	lsls	r1, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	fbb0 f3f3 	udiv	r3, r0, r3
 800195a:	3301      	adds	r3, #1
 800195c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	6809      	ldr	r1, [r1, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6911      	ldr	r1, [r2, #16]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68d2      	ldr	r2, [r2, #12]
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2220      	movs	r2, #32
 80019de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	000186a0 	.word	0x000186a0
 8001a00:	001e847f 	.word	0x001e847f
 8001a04:	003d08ff 	.word	0x003d08ff
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	10624dd3 	.word	0x10624dd3

08001a10 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	2b80      	cmp	r3, #128	@ 0x80
 8001a24:	d103      	bne.n	8001a2e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	817b      	strh	r3, [r7, #10]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	813b      	strh	r3, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a56:	f7ff f94d 	bl	8000cf4 <HAL_GetTick>
 8001a5a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	f040 812e 	bne.w	8001cc6 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a6a:	4b99      	ldr	r3, [pc, #612]	@ (8001cd0 <HAL_I2C_Mem_Write_DMA+0x298>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	08db      	lsrs	r3, r3, #3
 8001a70:	4a98      	ldr	r2, [pc, #608]	@ (8001cd4 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0a1a      	lsrs	r2, r3, #8
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009a      	lsls	r2, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d112      	bne.n	8001ab6 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f043 0220 	orr.w	r2, r3, #32
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e108      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d0df      	beq.n	8001a84 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_Mem_Write_DMA+0x9a>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e0fa      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d007      	beq.n	8001af8 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2221      	movs	r2, #33	@ 0x21
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2240      	movs	r2, #64	@ 0x40
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a68      	ldr	r2, [pc, #416]	@ (8001cd8 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001b3a:	897a      	ldrh	r2, [r7, #10]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001b40:	893a      	ldrh	r2, [r7, #8]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a1 	beq.w	8001c9e <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d022      	beq.n	8001baa <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b68:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b70:	4a5b      	ldr	r2, [pc, #364]	@ (8001ce0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b78:	2200      	movs	r2, #0
 8001b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b80:	2200      	movs	r2, #0
 8001b82:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3310      	adds	r3, #16
 8001b94:	461a      	mov	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9a:	f7ff fa41 	bl	8001020 <HAL_DMA_Start_IT>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001ba2:	7efb      	ldrb	r3, [r7, #27]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d166      	bne.n	8001c76 <HAL_I2C_Mem_Write_DMA+0x23e>
 8001ba8:	e013      	b.n	8001bd2 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07a      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001bd2:	88f8      	ldrh	r0, [r7, #6]
 8001bd4:	893a      	ldrh	r2, [r7, #8]
 8001bd6:	8979      	ldrh	r1, [r7, #10]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2323      	movs	r3, #35	@ 0x23
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4603      	mov	r3, r0
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f001 fe0a 	bl	80037fc <I2C_RequestMemoryWrite>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d022      	beq.n	8001c34 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa74 	bl	80010e0 <HAL_DMA_Abort_IT>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c12:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e049      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c60:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c70:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e028      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f043 0210 	orr.w	r2, r3, #16
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e014      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	14f8b589 	.word	0x14f8b589
 8001cd8:	ffff0000 	.word	0xffff0000
 8001cdc:	08003af9 	.word	0x08003af9
 8001ce0:	08003cb7 	.word	0x08003cb7

08001ce4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	817b      	strh	r3, [r7, #10]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	813b      	strh	r3, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cfe:	f7fe fff9 	bl	8000cf4 <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	f040 8168 	bne.w	8001fe6 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d16:	4b98      	ldr	r3, [pc, #608]	@ (8001f78 <HAL_I2C_Mem_Read_DMA+0x294>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	08db      	lsrs	r3, r3, #3
 8001d1c:	4a97      	ldr	r2, [pc, #604]	@ (8001f7c <HAL_I2C_Mem_Read_DMA+0x298>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a1a      	lsrs	r2, r3, #8
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d112      	bne.n	8001d62 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e142      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d0df      	beq.n	8001d30 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Mem_Read_DMA+0x9a>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e134      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d007      	beq.n	8001da4 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2222      	movs	r2, #34	@ 0x22
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a67      	ldr	r2, [pc, #412]	@ (8001f80 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001de6:	897a      	ldrh	r2, [r7, #10]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001dec:	893a      	ldrh	r2, [r7, #8]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001df2:	88fa      	ldrh	r2, [r7, #6]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80c2 	beq.w	8001f8c <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d024      	beq.n	8001e5a <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e14:	4a5b      	ldr	r2, [pc, #364]	@ (8001f84 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001f88 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	2200      	movs	r2, #0
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3310      	adds	r3, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	f7ff f8eb 	bl	8001020 <HAL_DMA_Start_IT>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001e50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d17b      	bne.n	8001f50 <HAL_I2C_Mem_Read_DMA+0x26c>
 8001e58:	e013      	b.n	8001e82 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0b2      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	893a      	ldrh	r2, [r7, #8]
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	2323      	movs	r3, #35	@ 0x23
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f001 fd48 	bl	8003928 <I2C_RequestMemoryRead>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d023      	beq.n	8001ee6 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f91c 	bl	80010e0 <HAL_DMA_Abort_IT>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec4:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e080      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d108      	bne.n	8001f00 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f3c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e048      	b.n	8001fe2 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f043 0210 	orr.w	r2, r3, #16
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e037      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	14f8b589 	.word	0x14f8b589
 8001f80:	ffff0000 	.word	0xffff0000
 8001f84:	08003af9 	.word	0x08003af9
 8001f88:	08003cb7 	.word	0x08003cb7
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001f8c:	88f8      	ldrh	r0, [r7, #6]
 8001f8e:	893a      	ldrh	r2, [r7, #8]
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2323      	movs	r3, #35	@ 0x23
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 fcc3 	bl	8003928 <I2C_RequestMemoryRead>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e01d      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3728      	adds	r7, #40	@ 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002010:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002018:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b10      	cmp	r3, #16
 800201e:	d003      	beq.n	8002028 <HAL_I2C_EV_IRQHandler+0x38>
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b40      	cmp	r3, #64	@ 0x40
 8002024:	f040 80c1 	bne.w	80021aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_I2C_EV_IRQHandler+0x6e>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002048:	d003      	beq.n	8002052 <HAL_I2C_EV_IRQHandler+0x62>
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002050:	d101      	bne.n	8002056 <HAL_I2C_EV_IRQHandler+0x66>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x68>
 8002056:	2300      	movs	r3, #0
 8002058:	2b01      	cmp	r3, #1
 800205a:	f000 8132 	beq.w	80022c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00c      	beq.n	8002082 <HAL_I2C_EV_IRQHandler+0x92>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	0a5b      	lsrs	r3, r3, #9
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f002 f8bf 	bl	80041f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fd99 	bl	8002bb2 <I2C_Master_SB>
 8002080:	e092      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08db      	lsrs	r3, r3, #3
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	0a5b      	lsrs	r3, r3, #9
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fe0e 	bl	8002cbc <I2C_Master_ADD10>
 80020a0:	e082      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	0a5b      	lsrs	r3, r3, #9
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fe27 	bl	8002d0e <I2C_Master_ADDR>
 80020c0:	e072      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d03b      	beq.n	8002146 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020dc:	f000 80f3 	beq.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	09db      	lsrs	r3, r3, #7
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <HAL_I2C_EV_IRQHandler+0x11c>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	0a9b      	lsrs	r3, r3, #10
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_I2C_EV_IRQHandler+0x11c>
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d103      	bne.n	800210c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f9f1 	bl	80024ec <I2C_MasterTransmit_TXE>
 800210a:	e04d      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80d6 	beq.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	0a5b      	lsrs	r3, r3, #9
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80cf 	beq.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002128:	7bbb      	ldrb	r3, [r7, #14]
 800212a:	2b21      	cmp	r3, #33	@ 0x21
 800212c:	d103      	bne.n	8002136 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa78 	bl	8002624 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002134:	e0c7      	b.n	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b40      	cmp	r3, #64	@ 0x40
 800213a:	f040 80c4 	bne.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fae6 	bl	8002710 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002144:	e0bf      	b.n	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002154:	f000 80b7 	beq.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00f      	beq.n	8002184 <HAL_I2C_EV_IRQHandler+0x194>
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	0a9b      	lsrs	r3, r3, #10
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_I2C_EV_IRQHandler+0x194>
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fb5f 	bl	8002840 <I2C_MasterReceive_RXNE>
 8002182:	e011      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 809a 	beq.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	0a5b      	lsrs	r3, r3, #9
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8093 	beq.w	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fc15 	bl	80029d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a6:	e08e      	b.n	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80021a8:	e08d      	b.n	80022c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e007      	b.n	80021cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x20e>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0a5b      	lsrs	r3, r3, #9
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00c      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80021f4:	69b9      	ldr	r1, [r7, #24]
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 ffe0 	bl	80031bc <I2C_Slave_ADDR>
 80021fc:	e066      	b.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x22e>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	0a5b      	lsrs	r3, r3, #9
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f001 f81a 	bl	8003250 <I2C_Slave_STOPF>
 800221c:	e056      	b.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	2b21      	cmp	r3, #33	@ 0x21
 8002222:	d002      	beq.n	800222a <HAL_I2C_EV_IRQHandler+0x23a>
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	2b29      	cmp	r3, #41	@ 0x29
 8002228:	d125      	bne.n	8002276 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	09db      	lsrs	r3, r3, #7
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00f      	beq.n	8002256 <HAL_I2C_EV_IRQHandler+0x266>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	0a9b      	lsrs	r3, r3, #10
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_I2C_EV_IRQHandler+0x266>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fef8 	bl	8003044 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002254:	e039      	b.n	80022ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d033      	beq.n	80022ca <HAL_I2C_EV_IRQHandler+0x2da>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	0a5b      	lsrs	r3, r3, #9
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d02d      	beq.n	80022ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 ff25 	bl	80030be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002274:	e029      	b.n	80022ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00f      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	0a9b      	lsrs	r3, r3, #10
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 ff2f 	bl	80030fe <I2C_SlaveReceive_RXNE>
 80022a0:	e014      	b.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	0a5b      	lsrs	r3, r3, #9
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 ff5d 	bl	800317a <I2C_SlaveReceive_BTF>
 80022c0:	e004      	b.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80022c2:	bf00      	nop
 80022c4:	e002      	b.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08a      	sub	sp, #40	@ 0x28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_I2C_ER_IRQHandler+0x5e>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800231e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0x88>
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002358:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	0a9b      	lsrs	r3, r3, #10
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d03f      	beq.n	80023e6 <HAL_I2C_ER_IRQHandler+0x114>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d039      	beq.n	80023e6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002372:	7efb      	ldrb	r3, [r7, #27]
 8002374:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002384:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800238c:	7ebb      	ldrb	r3, [r7, #26]
 800238e:	2b20      	cmp	r3, #32
 8002390:	d112      	bne.n	80023b8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10f      	bne.n	80023b8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b21      	cmp	r3, #33	@ 0x21
 800239c:	d008      	beq.n	80023b0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b29      	cmp	r3, #41	@ 0x29
 80023a2:	d005      	beq.n	80023b0 <HAL_I2C_ER_IRQHandler+0xde>
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b28      	cmp	r3, #40	@ 0x28
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b21      	cmp	r3, #33	@ 0x21
 80023ae:	d103      	bne.n	80023b8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f001 f87d 	bl	80034b0 <I2C_Slave_AF>
 80023b6:	e016      	b.n	80023e6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023ca:	7efb      	ldrb	r3, [r7, #27]
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d002      	beq.n	80023d6 <HAL_I2C_ER_IRQHandler+0x104>
 80023d0:	7efb      	ldrb	r3, [r7, #27]
 80023d2:	2b40      	cmp	r3, #64	@ 0x40
 80023d4:	d107      	bne.n	80023e6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	0adb      	lsrs	r3, r3, #11
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00e      	beq.n	8002410 <HAL_I2C_ER_IRQHandler+0x13e>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800240e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 f8b8 	bl	8003598 <I2C_ITError>
  }
}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	@ 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
 8002484:	4613      	mov	r3, r2
 8002486:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002502:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	d150      	bne.n	80025b4 <I2C_MasterTransmit_TXE+0xc8>
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b21      	cmp	r3, #33	@ 0x21
 8002516:	d14d      	bne.n	80025b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b08      	cmp	r3, #8
 800251c:	d01d      	beq.n	800255a <I2C_MasterTransmit_TXE+0x6e>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b20      	cmp	r3, #32
 8002522:	d01a      	beq.n	800255a <I2C_MasterTransmit_TXE+0x6e>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800252a:	d016      	beq.n	800255a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800253a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2211      	movs	r2, #17
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ff6c 	bl	8002430 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002558:	e060      	b.n	800261c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002568:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002578:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d107      	bne.n	80025a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff81 	bl	80024a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025a2:	e03b      	b.n	800261c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff3f 	bl	8002430 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025b2:	e033      	b.n	800261c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b21      	cmp	r3, #33	@ 0x21
 80025b8:	d005      	beq.n	80025c6 <I2C_MasterTransmit_TXE+0xda>
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d12d      	bne.n	800261c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b22      	cmp	r3, #34	@ 0x22
 80025c4:	d12a      	bne.n	800261c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80025e0:	e01c      	b.n	800261c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b40      	cmp	r3, #64	@ 0x40
 80025ec:	d103      	bne.n	80025f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f88e 	bl	8002710 <I2C_MemoryTransmit_TXE_BTF>
}
 80025f4:	e012      	b.n	800261c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800261a:	e7ff      	b.n	800261c <I2C_MasterTransmit_TXE+0x130>
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b21      	cmp	r3, #33	@ 0x21
 800263c:	d164      	bne.n	8002708 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800266c:	e04c      	b.n	8002708 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d01d      	beq.n	80026b0 <I2C_MasterTransmit_BTF+0x8c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b20      	cmp	r3, #32
 8002678:	d01a      	beq.n	80026b0 <I2C_MasterTransmit_BTF+0x8c>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002680:	d016      	beq.n	80026b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002690:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2211      	movs	r2, #17
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fec1 	bl	8002430 <HAL_I2C_MasterTxCpltCallback>
}
 80026ae:	e02b      	b.n	8002708 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b40      	cmp	r3, #64	@ 0x40
 80026e8:	d107      	bne.n	80026fa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fed6 	bl	80024a4 <HAL_I2C_MemTxCpltCallback>
}
 80026f8:	e006      	b.n	8002708 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fe94 	bl	8002430 <HAL_I2C_MasterTxCpltCallback>
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800271e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11d      	bne.n	8002764 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10b      	bne.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002734:	b2da      	uxtb	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002740:	1c9a      	adds	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002746:	e077      	b.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274c:	b29b      	uxth	r3, r3
 800274e:	121b      	asrs	r3, r3, #8
 8002750:	b2da      	uxtb	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002762:	e069      	b.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10b      	bne.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002782:	e059      	b.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002788:	2b02      	cmp	r3, #2
 800278a:	d152      	bne.n	8002832 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b22      	cmp	r3, #34	@ 0x22
 8002790:	d10d      	bne.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027a0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027ac:	e044      	b.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b21      	cmp	r3, #33	@ 0x21
 80027bc:	d112      	bne.n	80027e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027e2:	e029      	b.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d124      	bne.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b21      	cmp	r3, #33	@ 0x21
 80027f2:	d121      	bne.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002802:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002812:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fe3a 	bl	80024a4 <HAL_I2C_MemTxCpltCallback>
}
 8002830:	e002      	b.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff f8ec 	bl	8001a10 <I2C_Flush_DR>
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b22      	cmp	r3, #34	@ 0x22
 8002852:	f040 80b9 	bne.w	80029c8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d921      	bls.n	80028ae <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b03      	cmp	r3, #3
 8002898:	f040 8096 	bne.w	80029c8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028aa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80028ac:	e08c      	b.n	80029c8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d07f      	beq.n	80029b6 <I2C_MasterReceive_RXNE+0x176>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d002      	beq.n	80028c2 <I2C_MasterReceive_RXNE+0x82>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d179      	bne.n	80029b6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f001 fc38 	bl	8004138 <I2C_WaitOnSTOPRequestThroughIT>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d14c      	bne.n	8002968 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028dc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d10a      	bne.n	800293e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fdbd 	bl	80024b6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800293c:	e044      	b.n	80029c8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d002      	beq.n	8002952 <I2C_MasterReceive_RXNE+0x112>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b20      	cmp	r3, #32
 8002950:	d103      	bne.n	800295a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
 8002958:	e002      	b.n	8002960 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2212      	movs	r2, #18
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fd6e 	bl	8002442 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002966:	e02f      	b.n	80029c8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002976:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fd8a 	bl	80024c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029b4:	e008      	b.n	80029c8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c4:	605a      	str	r2, [r3, #4]
}
 80029c6:	e7ff      	b.n	80029c8 <I2C_MasterReceive_RXNE+0x188>
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d11b      	bne.n	8002a20 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a1e:	e0c4      	b.n	8002baa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d129      	bne.n	8002a7e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a38:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00a      	beq.n	8002a56 <I2C_MasterReceive_BTF+0x86>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d007      	beq.n	8002a56 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a7c:	e095      	b.n	8002baa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d17d      	bne.n	8002b84 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d002      	beq.n	8002a94 <I2C_MasterReceive_BTF+0xc4>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d108      	bne.n	8002aa6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e016      	b.n	8002ad4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d002      	beq.n	8002ab2 <I2C_MasterReceive_BTF+0xe2>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d108      	bne.n	8002ac4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e007      	b.n	8002ad4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d10a      	bne.n	8002b5a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fcaf 	bl	80024b6 <HAL_I2C_MemRxCpltCallback>
}
 8002b58:	e027      	b.n	8002baa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d002      	beq.n	8002b6e <I2C_MasterReceive_BTF+0x19e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d103      	bne.n	8002b76 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b74:	e002      	b.n	8002b7c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2212      	movs	r2, #18
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff fc60 	bl	8002442 <HAL_I2C_MasterRxCpltCallback>
}
 8002b82:	e012      	b.n	8002baa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b40      	cmp	r3, #64	@ 0x40
 8002bc4:	d117      	bne.n	8002bf6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bde:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002be0:	e067      	b.n	8002cb2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]
}
 8002bf4:	e05d      	b.n	8002cb2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bfe:	d133      	bne.n	8002c68 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b21      	cmp	r3, #33	@ 0x21
 8002c0a:	d109      	bne.n	8002c20 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c1c:	611a      	str	r2, [r3, #16]
 8002c1e:	e008      	b.n	8002c32 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <I2C_Master_SB+0x92>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d032      	beq.n	8002cb2 <I2C_Master_SB+0x100>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02d      	beq.n	8002cb2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c64:	605a      	str	r2, [r3, #4]
}
 8002c66:	e024      	b.n	8002cb2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10e      	bne.n	8002c8e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	11db      	asrs	r3, r3, #7
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f063 030f 	orn	r3, r3, #15
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]
}
 8002c8c:	e011      	b.n	8002cb2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d10d      	bne.n	8002cb2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	11db      	asrs	r3, r3, #7
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f003 0306 	and.w	r3, r3, #6
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f063 030e 	orn	r3, r3, #14
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <I2C_Master_ADD10+0x26>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <I2C_Master_ADD10+0x48>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d02:	605a      	str	r2, [r3, #4]
  }
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b091      	sub	sp, #68	@ 0x44
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b22      	cmp	r3, #34	@ 0x22
 8002d36:	f040 8174 	bne.w	8003022 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10f      	bne.n	8002d62 <I2C_Master_ADDR+0x54>
 8002d42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	d10b      	bne.n	8002d62 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	e16b      	b.n	800303a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11d      	bne.n	8002da6 <I2C_Master_ADDR+0x98>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d72:	d118      	bne.n	8002da6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d98:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002da4:	e149      	b.n	800303a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d113      	bne.n	8002dd8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db0:	2300      	movs	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e120      	b.n	800301a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 808a 	bne.w	8002ef8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dea:	d137      	bne.n	8002e5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0a:	d113      	bne.n	8002e34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	e0f2      	b.n	800301a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e0de      	b.n	800301a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d02e      	beq.n	8002ec0 <I2C_Master_ADDR+0x1b2>
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d02b      	beq.n	8002ec0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6a:	2b12      	cmp	r3, #18
 8002e6c:	d102      	bne.n	8002e74 <I2C_Master_ADDR+0x166>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d125      	bne.n	8002ec0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00e      	beq.n	8002e98 <I2C_Master_ADDR+0x18a>
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d00b      	beq.n	8002e98 <I2C_Master_ADDR+0x18a>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d008      	beq.n	8002e98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e007      	b.n	8002ea8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	e0ac      	b.n	800301a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ece:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e090      	b.n	800301a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d158      	bne.n	8002fb4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d021      	beq.n	8002f4c <I2C_Master_ADDR+0x23e>
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d01e      	beq.n	8002f4c <I2C_Master_ADDR+0x23e>
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d01b      	beq.n	8002f4c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e012      	b.n	8002f72 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f80:	d14b      	bne.n	800301a <I2C_Master_ADDR+0x30c>
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f88:	d00b      	beq.n	8002fa2 <I2C_Master_ADDR+0x294>
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d008      	beq.n	8002fa2 <I2C_Master_ADDR+0x294>
 8002f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d005      	beq.n	8002fa2 <I2C_Master_ADDR+0x294>
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d002      	beq.n	8002fa2 <I2C_Master_ADDR+0x294>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d13b      	bne.n	800301a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e032      	b.n	800301a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fc2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fd2:	d117      	bne.n	8003004 <I2C_Master_ADDR+0x2f6>
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fda:	d00b      	beq.n	8002ff4 <I2C_Master_ADDR+0x2e6>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d008      	beq.n	8002ff4 <I2C_Master_ADDR+0x2e6>
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d005      	beq.n	8002ff4 <I2C_Master_ADDR+0x2e6>
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d002      	beq.n	8002ff4 <I2C_Master_ADDR+0x2e6>
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d107      	bne.n	8003004 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003002:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003020:	e00b      	b.n	800303a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
}
 8003038:	e7ff      	b.n	800303a <I2C_Master_ADDR+0x32c>
 800303a:	bf00      	nop
 800303c:	3744      	adds	r7, #68	@ 0x44
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003052:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02b      	beq.n	80030b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d114      	bne.n	80030b6 <I2C_SlaveTransmit_TXE+0x72>
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b29      	cmp	r3, #41	@ 0x29
 8003090:	d111      	bne.n	80030b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2221      	movs	r2, #33	@ 0x21
 80030a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2228      	movs	r2, #40	@ 0x28
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff f9cf 	bl	8002454 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02c      	beq.n	8003172 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d114      	bne.n	8003172 <I2C_SlaveReceive_RXNE+0x74>
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b2a      	cmp	r3, #42	@ 0x2a
 800314c:	d111      	bne.n	8003172 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800315c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2222      	movs	r2, #34	@ 0x22
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2228      	movs	r2, #40	@ 0x28
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff f97a 	bl	8002466 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031d6:	2b28      	cmp	r3, #40	@ 0x28
 80031d8:	d127      	bne.n	800322a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	09db      	lsrs	r3, r3, #7
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	81bb      	strh	r3, [r7, #12]
 800320c:	e002      	b.n	8003214 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800321c:	89ba      	ldrh	r2, [r7, #12]
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff f928 	bl	8002478 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003228:	e00e      	b.n	8003248 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800326e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ac:	d172      	bne.n	8003394 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b22      	cmp	r3, #34	@ 0x22
 80032b2:	d002      	beq.n	80032ba <I2C_Slave_STOPF+0x6a>
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80032b8:	d135      	bne.n	8003326 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f043 0204 	orr.w	r2, r3, #4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe f872 	bl	80013dc <HAL_DMA_GetState>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d049      	beq.n	8003392 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003302:	4a69      	ldr	r2, [pc, #420]	@ (80034a8 <I2C_Slave_STOPF+0x258>)
 8003304:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fee8 	bl	80010e0 <HAL_DMA_Abort_IT>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03d      	beq.n	8003392 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003320:	4610      	mov	r0, r2
 8003322:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003324:	e035      	b.n	8003392 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003358:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe f83c 	bl	80013dc <HAL_DMA_GetState>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d014      	beq.n	8003394 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336e:	4a4e      	ldr	r2, [pc, #312]	@ (80034a8 <I2C_Slave_STOPF+0x258>)
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd feb2 	bl	80010e0 <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800338c:	4610      	mov	r0, r2
 800338e:	4798      	blx	r3
 8003390:	e000      	b.n	8003394 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003392:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d03e      	beq.n	800341c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d112      	bne.n	80033d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033dc:	2b40      	cmp	r3, #64	@ 0x40
 80033de:	d112      	bne.n	8003406 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f8b7 	bl	8003598 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800342a:	e039      	b.n	80034a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003430:	d109      	bne.n	8003446 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2228      	movs	r2, #40	@ 0x28
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff f810 	bl	8002466 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b28      	cmp	r3, #40	@ 0x28
 8003450:	d111      	bne.n	8003476 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a15      	ldr	r2, [pc, #84]	@ (80034ac <I2C_Slave_STOPF+0x25c>)
 8003456:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff f80f 	bl	8002492 <HAL_I2C_ListenCpltCallback>
}
 8003474:	e014      	b.n	80034a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	2b22      	cmp	r3, #34	@ 0x22
 800347c:	d002      	beq.n	8003484 <I2C_Slave_STOPF+0x234>
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b22      	cmp	r3, #34	@ 0x22
 8003482:	d10d      	bne.n	80034a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe ffe3 	bl	8002466 <HAL_I2C_SlaveRxCpltCallback>
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	08003d25 	.word	0x08003d25
 80034ac:	ffff0000 	.word	0xffff0000

080034b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d002      	beq.n	80034d2 <I2C_Slave_AF+0x22>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d129      	bne.n	8003526 <I2C_Slave_AF+0x76>
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b28      	cmp	r3, #40	@ 0x28
 80034d6:	d126      	bne.n	8003526 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a2e      	ldr	r2, [pc, #184]	@ (8003594 <I2C_Slave_AF+0xe4>)
 80034dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003506:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe ffb7 	bl	8002492 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003524:	e031      	b.n	800358a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b21      	cmp	r3, #33	@ 0x21
 800352a:	d129      	bne.n	8003580 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a19      	ldr	r2, [pc, #100]	@ (8003594 <I2C_Slave_AF+0xe4>)
 8003530:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2221      	movs	r2, #33	@ 0x21
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003556:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003560:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003570:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe fa4c 	bl	8001a10 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe ff6b 	bl	8002454 <HAL_I2C_SlaveTxCpltCallback>
}
 800357e:	e004      	b.n	800358a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003588:	615a      	str	r2, [r3, #20]
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	ffff0000 	.word	0xffff0000

08003598 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035b0:	7bbb      	ldrb	r3, [r7, #14]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d002      	beq.n	80035bc <I2C_ITError+0x24>
 80035b6:	7bbb      	ldrb	r3, [r7, #14]
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d10a      	bne.n	80035d2 <I2C_ITError+0x3a>
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b22      	cmp	r3, #34	@ 0x22
 80035c0:	d107      	bne.n	80035d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035d8:	2b28      	cmp	r3, #40	@ 0x28
 80035da:	d107      	bne.n	80035ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2228      	movs	r2, #40	@ 0x28
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80035ea:	e015      	b.n	8003618 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035fa:	d00a      	beq.n	8003612 <I2C_ITError+0x7a>
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b60      	cmp	r3, #96	@ 0x60
 8003600:	d007      	beq.n	8003612 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003626:	d162      	bne.n	80036ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003636:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d020      	beq.n	8003688 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	4a6a      	ldr	r2, [pc, #424]	@ (80037f4 <I2C_ITError+0x25c>)
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fd44 	bl	80010e0 <HAL_DMA_Abort_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8089 	beq.w	8003772 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003682:	4610      	mov	r0, r2
 8003684:	4798      	blx	r3
 8003686:	e074      	b.n	8003772 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	4a59      	ldr	r2, [pc, #356]	@ (80037f4 <I2C_ITError+0x25c>)
 800368e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fd23 	bl	80010e0 <HAL_DMA_Abort_IT>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d068      	beq.n	8003772 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d10b      	bne.n	80036c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036e8:	4610      	mov	r0, r2
 80036ea:	4798      	blx	r3
 80036ec:	e041      	b.n	8003772 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b60      	cmp	r3, #96	@ 0x60
 80036f8:	d125      	bne.n	8003746 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003712:	2b40      	cmp	r3, #64	@ 0x40
 8003714:	d10b      	bne.n	800372e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fecb 	bl	80024da <HAL_I2C_AbortCpltCallback>
 8003744:	e015      	b.n	8003772 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d10b      	bne.n	800376c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fe feab 	bl	80024c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d113      	bne.n	80037ec <I2C_ITError+0x254>
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b28      	cmp	r3, #40	@ 0x28
 80037c8:	d110      	bne.n	80037ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <I2C_ITError+0x260>)
 80037ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe fe53 	bl	8002492 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	08003d25 	.word	0x08003d25
 80037f8:	ffff0000 	.word	0xffff0000

080037fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	817b      	strh	r3, [r7, #10]
 800380e:	460b      	mov	r3, r1
 8003810:	813b      	strh	r3, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003824:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	2200      	movs	r2, #0
 800382e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fb1e 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800384c:	d103      	bne.n	8003856 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003854:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e05f      	b.n	800391a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003868:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	492d      	ldr	r1, [pc, #180]	@ (8003924 <I2C_RequestMemoryWrite+0x128>)
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fb79 	bl	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e04c      	b.n	800391a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003898:	6a39      	ldr	r1, [r7, #32]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fc04 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d107      	bne.n	80038be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e02b      	b.n	800391a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c8:	893b      	ldrh	r3, [r7, #8]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]
 80038d2:	e021      	b.n	8003918 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038d4:	893b      	ldrh	r3, [r7, #8]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b29b      	uxth	r3, r3
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fbde 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d107      	bne.n	800390a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003908:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e005      	b.n	800391a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800390e:	893b      	ldrh	r3, [r7, #8]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	00010002 	.word	0x00010002

08003928 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	461a      	mov	r2, r3
 8003936:	4603      	mov	r3, r0
 8003938:	817b      	strh	r3, [r7, #10]
 800393a:	460b      	mov	r3, r1
 800393c:	813b      	strh	r3, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003950:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2200      	movs	r2, #0
 800396a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa80 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003988:	d103      	bne.n	8003992 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0aa      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	4952      	ldr	r1, [pc, #328]	@ (8003af4 <I2C_RequestMemoryRead+0x1cc>)
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fadb 	bl	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e097      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d4:	6a39      	ldr	r1, [r7, #32]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fb66 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d107      	bne.n	80039fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e076      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a04:	893b      	ldrh	r3, [r7, #8]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	e021      	b.n	8003a54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a10:	893b      	ldrh	r3, [r7, #8]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fb40 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e050      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4a:	893b      	ldrh	r3, [r7, #8]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a56:	6a39      	ldr	r1, [r7, #32]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fb25 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d107      	bne.n	8003a7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e035      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f9e9 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00d      	beq.n	8003ac4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab6:	d103      	bne.n	8003ac0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e013      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ac4:	897b      	ldrh	r3, [r7, #10]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	6a3a      	ldr	r2, [r7, #32]
 8003ad8:	4906      	ldr	r1, [pc, #24]	@ (8003af4 <I2C_RequestMemoryRead+0x1cc>)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa44 	bl	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	00010002 	.word	0x00010002

08003af8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b14:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b38:	2200      	movs	r2, #0
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b48:	2200      	movs	r2, #0
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003b52:	2b21      	cmp	r3, #33	@ 0x21
 8003b54:	d007      	beq.n	8003b66 <I2C_DMAXferCplt+0x6e>
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003b5c:	2b22      	cmp	r3, #34	@ 0x22
 8003b5e:	d131      	bne.n	8003bc4 <I2C_DMAXferCplt+0xcc>
 8003b60:	7cbb      	ldrb	r3, [r7, #18]
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d12e      	bne.n	8003bc4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b74:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	2b29      	cmp	r3, #41	@ 0x29
 8003b80:	d10a      	bne.n	8003b98 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2221      	movs	r2, #33	@ 0x21
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2228      	movs	r2, #40	@ 0x28
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f7fe fc5f 	bl	8002454 <HAL_I2C_SlaveTxCpltCallback>
 8003b96:	e00c      	b.n	8003bb2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b9c:	d109      	bne.n	8003bb2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2222      	movs	r2, #34	@ 0x22
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2228      	movs	r2, #40	@ 0x28
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	f7fe fc5a 	bl	8002466 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003bc0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003bc2:	e074      	b.n	8003cae <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d06e      	beq.n	8003cae <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bf8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c00:	d009      	beq.n	8003c16 <I2C_DMAXferCplt+0x11e>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d006      	beq.n	8003c16 <I2C_DMAXferCplt+0x11e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c0e:	d002      	beq.n	8003c16 <I2C_DMAXferCplt+0x11e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d107      	bne.n	8003c26 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c34:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c44:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f7fe fc37 	bl	80024c8 <HAL_I2C_ErrorCallback>
}
 8003c5a:	e028      	b.n	8003cae <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d10a      	bne.n	8003c86 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003c7e:	6978      	ldr	r0, [r7, #20]
 8003c80:	f7fe fc19 	bl	80024b6 <HAL_I2C_MemRxCpltCallback>
}
 8003c84:	e013      	b.n	8003cae <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d002      	beq.n	8003c9a <I2C_DMAXferCplt+0x1a2>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d103      	bne.n	8003ca2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca0:	e002      	b.n	8003ca8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2212      	movs	r2, #18
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f7fe fbca 	bl	8002442 <HAL_I2C_MasterRxCpltCallback>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f043 0210 	orr.w	r2, r3, #16
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7fe fbd6 	bl	80024c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <I2C_DMAAbort+0x148>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	08db      	lsrs	r3, r3, #3
 8003d44:	4a4a      	ldr	r2, [pc, #296]	@ (8003e70 <I2C_DMAAbort+0x14c>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0a1a      	lsrs	r2, r3, #8
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00da      	lsls	r2, r3, #3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003d6a:	e00a      	b.n	8003d82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d80:	d0ea      	beq.n	8003d58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	2200      	movs	r2, #0
 8003da0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b60      	cmp	r3, #96	@ 0x60
 8003df2:	d10e      	bne.n	8003e12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2200      	movs	r2, #0
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f7fe fb65 	bl	80024da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e10:	e027      	b.n	8003e62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e18:	2b28      	cmp	r3, #40	@ 0x28
 8003e1a:	d117      	bne.n	8003e4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2228      	movs	r2, #40	@ 0x28
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e4a:	e007      	b.n	8003e5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e5c:	6978      	ldr	r0, [r7, #20]
 8003e5e:	f7fe fb33 	bl	80024c8 <HAL_I2C_ErrorCallback>
}
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	14f8b589 	.word	0x14f8b589

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e048      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d044      	beq.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fc ff31 	bl	8000cf4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d139      	bne.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10d      	bne.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	e00c      	b.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d116      	bne.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e023      	b.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10d      	bne.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	e00c      	b.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d093      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f76:	e071      	b.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f86:	d123      	bne.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e067      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d041      	beq.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fc fe8c 	bl	8000cf4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d136      	bne.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10c      	bne.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	43da      	mvns	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e00b      	b.n	800402a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	43da      	mvns	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e021      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10c      	bne.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	43da      	mvns	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e00b      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	f47f af6d 	bne.w	8003f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b4:	e034      	b.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f870 	bl	800419c <I2C_IsAcknowledgeFailed>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e034      	b.n	8004130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d028      	beq.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fc fe11 	bl	8000cf4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11d      	bne.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b80      	cmp	r3, #128	@ 0x80
 80040f0:	d016      	beq.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e007      	b.n	8004130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412a:	2b80      	cmp	r3, #128	@ 0x80
 800412c:	d1c3      	bne.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	0a1a      	lsrs	r2, r3, #8
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b01      	subs	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e008      	b.n	8004188 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004184:	d0e9      	beq.n	800415a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000000 	.word	0x20000000
 8004198:	14f8b589 	.word	0x14f8b589

0800419c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b2:	d11b      	bne.n	80041ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004208:	d103      	bne.n	8004212 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004210:	e007      	b.n	8004222 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800421a:	d102      	bne.n	8004222 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2208      	movs	r2, #8
 8004220:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e272      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8087 	beq.w	800435a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b92      	ldr	r3, [pc, #584]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00c      	beq.n	8004272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004258:	4b8f      	ldr	r3, [pc, #572]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d112      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
 8004264:	4b8c      	ldr	r3, [pc, #560]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004270:	d10b      	bne.n	800428a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004272:	4b89      	ldr	r3, [pc, #548]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06c      	beq.n	8004358 <HAL_RCC_OscConfig+0x12c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d168      	bne.n	8004358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e24c      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x76>
 8004294:	4b80      	ldr	r3, [pc, #512]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7f      	ldr	r2, [pc, #508]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e02e      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b78      	ldr	r3, [pc, #480]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a77      	ldr	r2, [pc, #476]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0xbc>
 80042ce:	4b72      	ldr	r3, [pc, #456]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a71      	ldr	r2, [pc, #452]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6f      	ldr	r3, [pc, #444]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6e      	ldr	r2, [pc, #440]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xd4>
 80042e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b68      	ldr	r3, [pc, #416]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a67      	ldr	r2, [pc, #412]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fc fcf4 	bl	8000cf4 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fc fcf0 	bl	8000cf4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	@ 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e200      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5d      	ldr	r3, [pc, #372]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xe4>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fc fce0 	bl	8000cf4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fc fcdc 	bl	8000cf4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	@ 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1ec      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b53      	ldr	r3, [pc, #332]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x10c>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004366:	4b4c      	ldr	r3, [pc, #304]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004372:	4b49      	ldr	r3, [pc, #292]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
 800437e:	4b46      	ldr	r3, [pc, #280]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b43      	ldr	r3, [pc, #268]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c0      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4939      	ldr	r1, [pc, #228]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	@ (800449c <HAL_RCC_OscConfig+0x270>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fc fc95 	bl	8000cf4 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fc fc91 	bl	8000cf4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a1      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4927      	ldr	r1, [pc, #156]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b26      	ldr	r3, [pc, #152]	@ (800449c <HAL_RCC_OscConfig+0x270>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fc fc74 	bl	8000cf4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fc fc70 	bl	8000cf4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e180      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03a      	beq.n	80044b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b17      	ldr	r3, [pc, #92]	@ (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fc fc54 	bl	8000cf4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fc fc50 	bl	8000cf4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e160      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <HAL_RCC_OscConfig+0x26c>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f000 face 	bl	8004a10 <RCC_Delay>
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	@ (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447c:	f7fc fc3a 	bl	8000cf4 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004484:	f7fc fc36 	bl	8000cf4 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e146      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	42420000 	.word	0x42420000
 80044a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b92      	ldr	r3, [pc, #584]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e9      	bne.n	8004484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a6 	beq.w	800460a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b8b      	ldr	r3, [pc, #556]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b88      	ldr	r3, [pc, #544]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4a87      	ldr	r2, [pc, #540]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	61d3      	str	r3, [r2, #28]
 80044da:	4b85      	ldr	r3, [pc, #532]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b82      	ldr	r3, [pc, #520]	@ (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b7f      	ldr	r3, [pc, #508]	@ (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7e      	ldr	r2, [pc, #504]	@ (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fc fbf7 	bl	8000cf4 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fc fbf3 	bl	8000cf4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	@ 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e103      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b75      	ldr	r3, [pc, #468]	@ (80046f4 <HAL_RCC_OscConfig+0x4c8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x312>
 8004530:	4b6f      	ldr	r3, [pc, #444]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a6e      	ldr	r2, [pc, #440]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6213      	str	r3, [r2, #32]
 800453c:	e02d      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x334>
 8004546:	4b6a      	ldr	r3, [pc, #424]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a69      	ldr	r2, [pc, #420]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	4b67      	ldr	r3, [pc, #412]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a66      	ldr	r2, [pc, #408]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x356>
 8004568:	4b61      	ldr	r3, [pc, #388]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a60      	ldr	r2, [pc, #384]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	4b5e      	ldr	r3, [pc, #376]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a5d      	ldr	r2, [pc, #372]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x36e>
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a5a      	ldr	r2, [pc, #360]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b58      	ldr	r3, [pc, #352]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a57      	ldr	r2, [pc, #348]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fc fba7 	bl	8000cf4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fc fba3 	bl	8000cf4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0b1      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b4b      	ldr	r3, [pc, #300]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x37e>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fc fb91 	bl	8000cf4 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fc fb8d 	bl	8000cf4 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e09b      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b40      	ldr	r3, [pc, #256]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b3c      	ldr	r3, [pc, #240]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4a3b      	ldr	r2, [pc, #236]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8087 	beq.w	8004722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d061      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d146      	bne.n	80046b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b33      	ldr	r3, [pc, #204]	@ (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fc fb61 	bl	8000cf4 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7fc fb5d 	bl	8000cf4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e06d      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800465e:	4b24      	ldr	r3, [pc, #144]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4921      	ldr	r1, [pc, #132]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	4b1f      	ldr	r3, [pc, #124]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a19      	ldr	r1, [r3, #32]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	430b      	orrs	r3, r1
 8004682:	491b      	ldr	r1, [pc, #108]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fc fb31 	bl	8000cf4 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fc fb2d 	bl	8000cf4 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e03d      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x46a>
 80046b4:	e035      	b.n	8004722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <HAL_RCC_OscConfig+0x4cc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fc fb1a 	bl	8000cf4 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fc fb16 	bl	8000cf4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e026      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x498>
 80046e2:	e01e      	b.n	8004722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e019      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_OscConfig+0x500>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	429a      	cmp	r2, r3
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d0      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b67      	ldr	r3, [pc, #412]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 0207 	bic.w	r2, r3, #7
 800475a:	4965      	ldr	r1, [pc, #404]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b63      	ldr	r3, [pc, #396]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800478c:	4b59      	ldr	r3, [pc, #356]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a58      	ldr	r2, [pc, #352]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a4:	4b53      	ldr	r3, [pc, #332]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a52      	ldr	r2, [pc, #328]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b50      	ldr	r3, [pc, #320]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	494d      	ldr	r1, [pc, #308]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d040      	beq.n	8004850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b47      	ldr	r3, [pc, #284]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b41      	ldr	r3, [pc, #260]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e073      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fe:	4b3d      	ldr	r3, [pc, #244]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06b      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b39      	ldr	r3, [pc, #228]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4936      	ldr	r1, [pc, #216]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004820:	f7fc fa68 	bl	8000cf4 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fc fa64 	bl	8000cf4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e053      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b2d      	ldr	r3, [pc, #180]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b27      	ldr	r3, [pc, #156]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d210      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b24      	ldr	r3, [pc, #144]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4922      	ldr	r1, [pc, #136]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e032      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4916      	ldr	r1, [pc, #88]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490e      	ldr	r1, [pc, #56]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f821 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490a      	ldr	r1, [pc, #40]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a09      	ldr	r2, [pc, #36]	@ (80048fc <HAL_RCC_ClockConfig+0x1cc>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_ClockConfig+0x1d0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc f9c6 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08007f00 	.word	0x08007f00
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000004 	.word	0x20000004

08004904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x94>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x30>
 800492e:	2b08      	cmp	r3, #8
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x36>
 8004932:	e027      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004936:	613b      	str	r3, [r7, #16]
      break;
 8004938:	e027      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	0c9b      	lsrs	r3, r3, #18
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	4a17      	ldr	r2, [pc, #92]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004952:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x94>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	0c5b      	lsrs	r3, r3, #17
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	4a11      	ldr	r2, [pc, #68]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a0d      	ldr	r2, [pc, #52]	@ (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004966:	fb03 f202 	mul.w	r2, r3, r2
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e004      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0c      	ldr	r2, [pc, #48]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	613b      	str	r3, [r7, #16]
      break;
 8004982:	e002      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCC_GetSysClockFreq+0x98>)
 8004986:	613b      	str	r3, [r7, #16]
      break;
 8004988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498a:	693b      	ldr	r3, [r7, #16]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	08007f18 	.word	0x08007f18
 80049a4:	08007f28 	.word	0x08007f28
 80049a8:	003d0900 	.word	0x003d0900

080049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b02      	ldr	r3, [pc, #8]	@ (80049bc <HAL_RCC_GetHCLKFreq+0x10>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	20000000 	.word	0x20000000

080049c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c4:	f7ff fff2 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4903      	ldr	r1, [pc, #12]	@ (80049e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	08007f10 	.word	0x08007f10

080049e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049ec:	f7ff ffde 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	0adb      	lsrs	r3, r3, #11
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4903      	ldr	r1, [pc, #12]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08007f10 	.word	0x08007f10

08004a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a18:	4b0a      	ldr	r3, [pc, #40]	@ (8004a44 <RCC_Delay+0x34>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a48 <RCC_Delay+0x38>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0a5b      	lsrs	r3, r3, #9
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a2c:	bf00      	nop
  }
  while (Delay --);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	60fa      	str	r2, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f9      	bne.n	8004a2c <RCC_Delay+0x1c>
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	20000000 	.word	0x20000000
 8004a48:	10624dd3 	.word	0x10624dd3

08004a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e076      	b.n	8004b4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
 8004a76:	e005      	b.n	8004a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fb fe44 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	ea42 0103 	orr.w	r1, r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	0c1a      	lsrs	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f002 0204 	and.w	r2, r2, #4
 8004b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b64:	f7fc f8c6 	bl	8000cf4 <HAL_GetTick>
 8004b68:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d001      	beq.n	8004b7e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e12a      	b.n	8004dd4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SPI_Transmit+0x36>
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e122      	b.n	8004dd4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_SPI_Transmit+0x48>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e11b      	b.n	8004dd4 <HAL_SPI_Transmit+0x280>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bea:	d10f      	bne.n	8004c0c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c16:	2b40      	cmp	r3, #64	@ 0x40
 8004c18:	d007      	beq.n	8004c2a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c32:	d152      	bne.n	8004cda <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Transmit+0xee>
 8004c3c:	8b7b      	ldrh	r3, [r7, #26]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d145      	bne.n	8004cce <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c66:	e032      	b.n	8004cce <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d112      	bne.n	8004c9c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c9a:	e018      	b.n	8004cce <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9c:	f7fc f82a 	bl	8000cf4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d803      	bhi.n	8004cb4 <HAL_SPI_Transmit+0x160>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_Transmit+0x166>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e082      	b.n	8004dd4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1c7      	bne.n	8004c68 <HAL_SPI_Transmit+0x114>
 8004cd8:	e053      	b.n	8004d82 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SPI_Transmit+0x194>
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d147      	bne.n	8004d78 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d0e:	e033      	b.n	8004d78 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d113      	bne.n	8004d46 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d44:	e018      	b.n	8004d78 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d46:	f7fb ffd5 	bl	8000cf4 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d803      	bhi.n	8004d5e <HAL_SPI_Transmit+0x20a>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d102      	bne.n	8004d64 <HAL_SPI_Transmit+0x210>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e02d      	b.n	8004dd4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1c6      	bne.n	8004d10 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa5a 	bl	8005240 <SPI_EndRxTxTransaction>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dea:	2301      	movs	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dee:	f7fb ff81 	bl	8000cf4 <HAL_GetTick>
 8004df2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dfa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d00c      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x4a>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e12:	d106      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x46>
 8004e1c:	7ffb      	ldrb	r3, [r7, #31]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d001      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
 8004e24:	e17f      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x5c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x5c>
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e174      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x6e>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e16d      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d003      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2205      	movs	r2, #5
 8004e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	887a      	ldrh	r2, [r7, #2]
 8004e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	887a      	ldrh	r2, [r7, #2]
 8004e7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	887a      	ldrh	r2, [r7, #2]
 8004e8e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d007      	beq.n	8004eba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ec2:	d17e      	bne.n	8004fc2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0xf6>
 8004ecc:	8afb      	ldrh	r3, [r7, #22]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d16c      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef6:	e059      	b.n	8004fac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d11b      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x162>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d016      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x162>
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d113      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	881a      	ldrh	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	1c9a      	adds	r2, r3, #2
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d119      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x1a4>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d014      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	b292      	uxth	r2, r2
 8004f62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	1c9a      	adds	r2, r3, #2
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f80:	f7fb feb8 	bl	8000cf4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d80d      	bhi.n	8004fac <HAL_SPI_TransmitReceive+0x1d0>
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d009      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0bc      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1a0      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x11c>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d19b      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x11c>
 8004fc0:	e082      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_SPI_TransmitReceive+0x1f4>
 8004fca:	8afb      	ldrh	r3, [r7, #22]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d171      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	7812      	ldrb	r2, [r2, #0]
 8004fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff6:	e05d      	b.n	80050b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d11c      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x264>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d017      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x264>
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	2b01      	cmp	r3, #1
 8005014:	d114      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d119      	bne.n	8005082 <HAL_SPI_TransmitReceive+0x2a6>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d014      	beq.n	8005082 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800507e:	2301      	movs	r3, #1
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005082:	f7fb fe37 	bl	8000cf4 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508e:	429a      	cmp	r2, r3
 8005090:	d803      	bhi.n	800509a <HAL_SPI_TransmitReceive+0x2be>
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x2c4>
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e038      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d19c      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x21c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d197      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f8b7 	bl	8005240 <SPI_EndRxTxTransaction>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e01d      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005124:	2300      	movs	r3, #0
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	@ 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005140:	f7fb fdd8 	bl	8000cf4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	4413      	add	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005150:	f7fb fdd0 	bl	8000cf4 <HAL_GetTick>
 8005154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005156:	4b39      	ldr	r3, [pc, #228]	@ (800523c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	015b      	lsls	r3, r3, #5
 800515c:	0d1b      	lsrs	r3, r3, #20
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005166:	e054      	b.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d050      	beq.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005170:	f7fb fdc0 	bl	8000cf4 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	429a      	cmp	r2, r3
 800517e:	d902      	bls.n	8005186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d13d      	bne.n	8005202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800519e:	d111      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a8:	d004      	beq.n	80051b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b2:	d107      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051cc:	d10f      	bne.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e017      	b.n	8005232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3b01      	subs	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	429a      	cmp	r2, r3
 800522e:	d19b      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000000 	.word	0x20000000

08005240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2201      	movs	r2, #1
 8005254:	2102      	movs	r1, #2
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff ff6a 	bl	8005130 <SPI_WaitFlagStateUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e013      	b.n	800529a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	2180      	movs	r1, #128	@ 0x80
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff ff57 	bl	8005130 <SPI_WaitFlagStateUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e000      	b.n	800529a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e042      	b.n	800533a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7fb fc4b 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2224      	movs	r2, #36	@ 0x24
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f972 	bl	80055d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800530a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800531a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08a      	sub	sp, #40	@ 0x28
 8005346:	af02      	add	r7, sp, #8
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b20      	cmp	r3, #32
 8005360:	d175      	bne.n	800544e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_UART_Transmit+0x2c>
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06e      	b.n	8005450 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2221      	movs	r2, #33	@ 0x21
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005380:	f7fb fcb8 	bl	8000cf4 <HAL_GetTick>
 8005384:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539a:	d108      	bne.n	80053ae <HAL_UART_Transmit+0x6c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	e003      	b.n	80053b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053b6:	e02e      	b.n	8005416 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	2180      	movs	r1, #128	@ 0x80
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f848 	bl	8005458 <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e03a      	b.n	8005450 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	3302      	adds	r3, #2
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e007      	b.n	8005408 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1cb      	bne.n	80053b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2200      	movs	r2, #0
 8005428:	2140      	movs	r1, #64	@ 0x40
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f814 	bl	8005458 <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e006      	b.n	8005450 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800544e:	2302      	movs	r3, #2
  }
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005468:	e03b      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d037      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fb fc3f 	bl	8000cf4 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <UART_WaitOnFlagUntilTimeout+0x30>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e03a      	b.n	8005502 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d023      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b80      	cmp	r3, #128	@ 0x80
 800549e:	d020      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d01d      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d116      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f81d 	bl	800550a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2208      	movs	r2, #8
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e00f      	b.n	8005502 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4013      	ands	r3, r2
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	bf0c      	ite	eq
 80054f2:	2301      	moveq	r3, #1
 80054f4:	2300      	movne	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d0b4      	beq.n	800546a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800550a:	b480      	push	{r7}
 800550c:	b095      	sub	sp, #84	@ 0x54
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005532:	643a      	str	r2, [r7, #64]	@ 0x40
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	61fb      	str	r3, [r7, #28]
   return(result);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800556c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	2b01      	cmp	r3, #1
 8005580:	d119      	bne.n	80055b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	60bb      	str	r3, [r7, #8]
   return(result);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f023 0310 	bic.w	r3, r3, #16
 8005598:	647b      	str	r3, [r7, #68]	@ 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a2:	61ba      	str	r2, [r7, #24]
 80055a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6979      	ldr	r1, [r7, #20]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	613b      	str	r3, [r7, #16]
   return(result);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e5      	bne.n	8005582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055c4:	bf00      	nop
 80055c6:	3754      	adds	r7, #84	@ 0x54
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
	...

080055d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800560a:	f023 030c 	bic.w	r3, r3, #12
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	430b      	orrs	r3, r1
 8005616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <UART_SetConfig+0x114>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d103      	bne.n	8005640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005638:	f7ff f9d6 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	e002      	b.n	8005646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7ff f9be 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009a      	lsls	r2, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	4a22      	ldr	r2, [pc, #136]	@ (80056e8 <UART_SetConfig+0x118>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	0119      	lsls	r1, r3, #4
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009a      	lsls	r2, r3, #2
 8005670:	441a      	add	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	fbb2 f2f3 	udiv	r2, r2, r3
 800567c:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <UART_SetConfig+0x118>)
 800567e:	fba3 0302 	umull	r0, r3, r3, r2
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	2064      	movs	r0, #100	@ 0x64
 8005686:	fb00 f303 	mul.w	r3, r0, r3
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	3332      	adds	r3, #50	@ 0x32
 8005690:	4a15      	ldr	r2, [pc, #84]	@ (80056e8 <UART_SetConfig+0x118>)
 8005692:	fba2 2303 	umull	r2, r3, r2, r3
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800569c:	4419      	add	r1, r3
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009a      	lsls	r2, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <UART_SetConfig+0x118>)
 80056b6:	fba3 0302 	umull	r0, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2064      	movs	r0, #100	@ 0x64
 80056be:	fb00 f303 	mul.w	r3, r0, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	3332      	adds	r3, #50	@ 0x32
 80056c8:	4a07      	ldr	r2, [pc, #28]	@ (80056e8 <UART_SetConfig+0x118>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	f003 020f 	and.w	r2, r3, #15
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	440a      	add	r2, r1
 80056da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40013800 	.word	0x40013800
 80056e8:	51eb851f 	.word	0x51eb851f

080056ec <i2c_WriteReg>:
#include "myiic.h"


void i2c_WriteReg(uint8_t dev,uint8_t reg,uint8_t val){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
 80056f6:	460b      	mov	r3, r1
 80056f8:	71bb      	strb	r3, [r7, #6]
 80056fa:	4613      	mov	r3, r2
 80056fc:	717b      	strb	r3, [r7, #5]
	uint8_t writeval = val;
 80056fe:	797b      	ldrb	r3, [r7, #5]
 8005700:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write_DMA(&hi2c1 ,dev, reg, 1 , &writeval , 1);
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	b299      	uxth	r1, r3
 8005706:	79bb      	ldrb	r3, [r7, #6]
 8005708:	b29a      	uxth	r2, r3
 800570a:	2301      	movs	r3, #1
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	f107 030f 	add.w	r3, r7, #15
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2301      	movs	r3, #1
 8005716:	4803      	ldr	r0, [pc, #12]	@ (8005724 <i2c_WriteReg+0x38>)
 8005718:	f7fc f98e 	bl	8001a38 <HAL_I2C_Mem_Write_DMA>
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	200002e0 	.word	0x200002e0

08005728 <i2c_ReadReg>:

uint8_t i2c_ReadReg(uint8_t dev,uint8_t val){
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af02      	add	r7, sp, #8
 800572e:	4603      	mov	r3, r0
 8005730:	460a      	mov	r2, r1
 8005732:	71fb      	strb	r3, [r7, #7]
 8005734:	4613      	mov	r3, r2
 8005736:	71bb      	strb	r3, [r7, #6]
	static uint8_t readval = 0;
	HAL_I2C_Mem_Read_DMA(&hi2c1 ,dev, val, 1 , &readval , 1);
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	b299      	uxth	r1, r3
 800573c:	79bb      	ldrb	r3, [r7, #6]
 800573e:	b29a      	uxth	r2, r3
 8005740:	2301      	movs	r3, #1
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <i2c_ReadReg+0x34>)
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2301      	movs	r3, #1
 800574a:	4805      	ldr	r0, [pc, #20]	@ (8005760 <i2c_ReadReg+0x38>)
 800574c:	f7fc faca 	bl	8001ce4 <HAL_I2C_Mem_Read_DMA>
	return readval;
 8005750:	4b02      	ldr	r3, [pc, #8]	@ (800575c <i2c_ReadReg+0x34>)
 8005752:	781b      	ldrb	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200004ec 	.word	0x200004ec
 8005760:	200002e0 	.word	0x200002e0

08005764 <NRF24L01_Init>:
const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址

//初始化24L01的IO口

void NRF24L01_Init()
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);  	//使能24L01
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800576e:	4805      	ldr	r0, [pc, #20]	@ (8005784 <NRF24L01_Init+0x20>)
 8005770:	f7fb fff2 	bl	8001758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);	  //SPI片选取消
 8005774:	2201      	movs	r2, #1
 8005776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800577a:	4803      	ldr	r0, [pc, #12]	@ (8005788 <NRF24L01_Init+0x24>)
 800577c:	f7fb ffec 	bl	8001758 <HAL_GPIO_WritePin>
}
 8005780:	bf00      	nop
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40010c00 	.word	0x40010c00
 8005788:	40010800 	.word	0x40010800

0800578c <NRF24L01_Write_Buf>:

/* USER CODE BEGIN 1 */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	4603      	mov	r3, r0
 8005794:	6039      	str	r1, [r7, #0]
 8005796:	71fb      	strb	r3, [r7, #7]
 8005798:	4613      	mov	r3, r2
 800579a:	71bb      	strb	r3, [r7, #6]
	uint8_t status,reg_read = reg,ctr;
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET); //使能SPI传输
 80057a0:	2200      	movs	r2, #0
 80057a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057a6:	480f      	ldr	r0, [pc, #60]	@ (80057e4 <NRF24L01_Write_Buf+0x58>)
 80057a8:	f7fb ffd6 	bl	8001758 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,&reg_read,&status,1,100);//发送寄存器值(位置),并读取状态值
 80057ac:	f107 020f 	add.w	r2, r7, #15
 80057b0:	f107 010e 	add.w	r1, r7, #14
 80057b4:	2364      	movs	r3, #100	@ 0x64
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	2301      	movs	r3, #1
 80057ba:	480b      	ldr	r0, [pc, #44]	@ (80057e8 <NRF24L01_Write_Buf+0x5c>)
 80057bc:	f7ff fb0e 	bl	8004ddc <HAL_SPI_TransmitReceive>
	//HAL_SPI_Transmit_DMA(&hspi1,pBuf,len);
	HAL_SPI_Transmit(&hspi1,pBuf,len,100);
 80057c0:	79bb      	ldrb	r3, [r7, #6]
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	2364      	movs	r3, #100	@ 0x64
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	4807      	ldr	r0, [pc, #28]	@ (80057e8 <NRF24L01_Write_Buf+0x5c>)
 80057ca:	f7ff f9c3 	bl	8004b54 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET); //关闭SPI传输
 80057ce:	2201      	movs	r2, #1
 80057d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057d4:	4803      	ldr	r0, [pc, #12]	@ (80057e4 <NRF24L01_Write_Buf+0x58>)
 80057d6:	f7fb ffbf 	bl	8001758 <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40010800 	.word	0x40010800
 80057e8:	200003bc 	.word	0x200003bc

080057ec <NRF24L01_Read_Buf>:
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	4603      	mov	r3, r0
 80057f4:	6039      	str	r1, [r7, #0]
 80057f6:	71fb      	strb	r3, [r7, #7]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71bb      	strb	r3, [r7, #6]
	uint8_t status,reg_read = reg,ctr = 0, bufftmp = 0,rw = 0xFF;
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	733b      	strb	r3, [r7, #12]
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
 8005804:	2300      	movs	r3, #0
 8005806:	73bb      	strb	r3, [r7, #14]
 8005808:	23ff      	movs	r3, #255	@ 0xff
 800580a:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET); //使能SPI传输
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005812:	4816      	ldr	r0, [pc, #88]	@ (800586c <NRF24L01_Read_Buf+0x80>)
 8005814:	f7fb ffa0 	bl	8001758 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,&reg_read,&status,1,100);
 8005818:	f107 020d 	add.w	r2, r7, #13
 800581c:	f107 010c 	add.w	r1, r7, #12
 8005820:	2364      	movs	r3, #100	@ 0x64
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2301      	movs	r3, #1
 8005826:	4812      	ldr	r0, [pc, #72]	@ (8005870 <NRF24L01_Read_Buf+0x84>)
 8005828:	f7ff fad8 	bl	8004ddc <HAL_SPI_TransmitReceive>
	for(ctr = 0;ctr < len; ctr++)
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	e00d      	b.n	800584e <NRF24L01_Read_Buf+0x62>
		HAL_SPI_TransmitReceive(&hspi1,&rw,&pBuf[ctr],1,100);
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	441a      	add	r2, r3
 8005838:	f107 010b 	add.w	r1, r7, #11
 800583c:	2364      	movs	r3, #100	@ 0x64
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2301      	movs	r3, #1
 8005842:	480b      	ldr	r0, [pc, #44]	@ (8005870 <NRF24L01_Read_Buf+0x84>)
 8005844:	f7ff faca 	bl	8004ddc <HAL_SPI_TransmitReceive>
	for(ctr = 0;ctr < len; ctr++)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	3301      	adds	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
 800584e:	7bfa      	ldrb	r2, [r7, #15]
 8005850:	79bb      	ldrb	r3, [r7, #6]
 8005852:	429a      	cmp	r2, r3
 8005854:	d3ed      	bcc.n	8005832 <NRF24L01_Read_Buf+0x46>

	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET); //关闭SPI传输
 8005856:	2201      	movs	r2, #1
 8005858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800585c:	4803      	ldr	r0, [pc, #12]	@ (800586c <NRF24L01_Read_Buf+0x80>)
 800585e:	f7fb ff7b 	bl	8001758 <HAL_GPIO_WritePin>
	return status;        //返回读到的状态值
 8005862:	7b7b      	ldrb	r3, [r7, #13]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40010800 	.word	0x40010800
 8005870:	200003bc 	.word	0x200003bc

08005874 <NRF24L01_Check>:
  	return reg_val;           //返回状态值
}
//检测24L01是否存在
//返回值:0，成功;1，失败
uint8_t NRF24L01_Check()
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 800587a:	4a17      	ldr	r2, [pc, #92]	@ (80058d8 <NRF24L01_Check+0x64>)
 800587c:	463b      	mov	r3, r7
 800587e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005882:	6018      	str	r0, [r3, #0]
 8005884:	3304      	adds	r3, #4
 8005886:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8005888:	463b      	mov	r3, r7
 800588a:	2205      	movs	r2, #5
 800588c:	4619      	mov	r1, r3
 800588e:	2030      	movs	r0, #48	@ 0x30
 8005890:	f7ff ff7c 	bl	800578c <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8005894:	463b      	mov	r3, r7
 8005896:	2205      	movs	r2, #5
 8005898:	4619      	mov	r1, r3
 800589a:	2010      	movs	r0, #16
 800589c:	f7ff ffa6 	bl	80057ec <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 80058a0:	2300      	movs	r3, #0
 80058a2:	71fb      	strb	r3, [r7, #7]
 80058a4:	e009      	b.n	80058ba <NRF24L01_Check+0x46>
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	3308      	adds	r3, #8
 80058aa:	443b      	add	r3, r7
 80058ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80058b0:	2ba5      	cmp	r3, #165	@ 0xa5
 80058b2:	d106      	bne.n	80058c2 <NRF24L01_Check+0x4e>
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	3301      	adds	r3, #1
 80058b8:	71fb      	strb	r3, [r7, #7]
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d9f2      	bls.n	80058a6 <NRF24L01_Check+0x32>
 80058c0:	e000      	b.n	80058c4 <NRF24L01_Check+0x50>
 80058c2:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d001      	beq.n	80058ce <NRF24L01_Check+0x5a>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <NRF24L01_Check+0x5c>
	return 0;		 //检测到24L01
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08007ea0 	.word	0x08007ea0

080058dc <QMC5883_Init>:
            int16_t AZ;
        }stData;
} uQMC5883_Data;

void QMC5883_Init()
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
    uint8_t uChipID = 0,ready =0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	71fb      	strb	r3, [r7, #7]
 80058e6:	2300      	movs	r3, #0
 80058e8:	71bb      	strb	r3, [r7, #6]
   
    // 1.Device Reset & check Device  -32768 and 32767
    //i2c_WriteReg(QMC5883_DEV,0x0A,0x80); //PowerReset
    //delay_ms(100);
    i2c_WriteReg(QMC5883_DEV,0x0B,0x01); //PowerReset
 80058ea:	2201      	movs	r2, #1
 80058ec:	210b      	movs	r1, #11
 80058ee:	201a      	movs	r0, #26
 80058f0:	f7ff fefc 	bl	80056ec <i2c_WriteReg>
    i2c_WriteReg(QMC5883_DEV,0x20,0x40); //PowerReset
 80058f4:	2240      	movs	r2, #64	@ 0x40
 80058f6:	2120      	movs	r1, #32
 80058f8:	201a      	movs	r0, #26
 80058fa:	f7ff fef7 	bl	80056ec <i2c_WriteReg>
    i2c_WriteReg(QMC5883_DEV,0x21,0x01); //PowerReset
 80058fe:	2201      	movs	r2, #1
 8005900:	2121      	movs	r1, #33	@ 0x21
 8005902:	201a      	movs	r0, #26
 8005904:	f7ff fef2 	bl	80056ec <i2c_WriteReg>
    //i2c_WriteReg(QMC5883_DEV,0x09,0x0d); // 512 OSR 2G ODR 200 
    i2c_WriteReg(QMC5883_DEV,0x09,0x89); //OSR 128 2G ODR 100
 8005908:	2289      	movs	r2, #137	@ 0x89
 800590a:	2109      	movs	r1, #9
 800590c:	201a      	movs	r0, #26
 800590e:	f7ff feed 	bl	80056ec <i2c_WriteReg>
    HAL_Delay(200);                           // wait stable
 8005912:	20c8      	movs	r0, #200	@ 0xc8
 8005914:	f7fb f9f8 	bl	8000d08 <HAL_Delay>
    while( uChipID!= 0xFF) 
 8005918:	e008      	b.n	800592c <QMC5883_Init+0x50>
    {   
        uChipID = i2c_ReadReg(QMC5883_DEV,0x0D); // Read ID
 800591a:	210d      	movs	r1, #13
 800591c:	201a      	movs	r0, #26
 800591e:	f7ff ff03 	bl	8005728 <i2c_ReadReg>
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(200);        // device check
 8005926:	20c8      	movs	r0, #200	@ 0xc8
 8005928:	f7fb f9ee 	bl	8000d08 <HAL_Delay>
    while( uChipID!= 0xFF) 
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	2bff      	cmp	r3, #255	@ 0xff
 8005930:	d1f3      	bne.n	800591a <QMC5883_Init+0x3e>
    }
    printf("QMC5883 check Pass!:deviceID = 0x%x \r\n",uChipID);
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	4619      	mov	r1, r3
 8005936:	4803      	ldr	r0, [pc, #12]	@ (8005944 <QMC5883_Init+0x68>)
 8005938:	f001 fb20 	bl	8006f7c <iprintf>
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	08007ea8 	.word	0x08007ea8

08005948 <QMI8658_Init>:
            int16_t GZ;
        }stData;
} uQMI8658_Data;

void QMI8658_Init()
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
    uint8_t uChipID = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	71fb      	strb	r3, [r7, #7]
    
    // 1.Device Reset & check Device
    i2c_WriteReg(QMI8658_DEV,CTRL9,0xA2); //PowerReset
 8005952:	22a2      	movs	r2, #162	@ 0xa2
 8005954:	210a      	movs	r1, #10
 8005956:	20d5      	movs	r0, #213	@ 0xd5
 8005958:	f7ff fec8 	bl	80056ec <i2c_WriteReg>
    HAL_Delay(200);                           // wait stable
 800595c:	20c8      	movs	r0, #200	@ 0xc8
 800595e:	f7fb f9d3 	bl	8000d08 <HAL_Delay>
    while(uChipID != 0x5) 
 8005962:	e008      	b.n	8005976 <QMI8658_Init+0x2e>
		{
    	HAL_Delay(200);        // device check
 8005964:	20c8      	movs	r0, #200	@ 0xc8
 8005966:	f7fb f9cf 	bl	8000d08 <HAL_Delay>
				uChipID = i2c_ReadReg(QMI8658_DEV,0x00); // Read ID
 800596a:	2100      	movs	r1, #0
 800596c:	20d5      	movs	r0, #213	@ 0xd5
 800596e:	f7ff fedb 	bl	8005728 <i2c_ReadReg>
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
    while(uChipID != 0x5) 
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	2b05      	cmp	r3, #5
 800597a:	d1f3      	bne.n	8005964 <QMI8658_Init+0x1c>
		}	
		
    printf("QMI8658 check Pass!:deviceID = 0x%x \r\n",uChipID);
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	4619      	mov	r1, r3
 8005980:	4812      	ldr	r0, [pc, #72]	@ (80059cc <QMI8658_Init+0x84>)
 8005982:	f001 fafb 	bl	8006f7c <iprintf>
    
    //2.Device Settings
    i2c_WriteReg(QMI8658_DEV,CTRL1,0x40); //��ַ������С��
 8005986:	2240      	movs	r2, #64	@ 0x40
 8005988:	2102      	movs	r1, #2
 800598a:	20d5      	movs	r0, #213	@ 0xd5
 800598c:	f7ff feae 	bl	80056ec <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL2,0x33); //���ü��ٶȼ� ����+-16g(2048)��������ODR==1kHZ
 8005990:	2233      	movs	r2, #51	@ 0x33
 8005992:	2103      	movs	r1, #3
 8005994:	20d5      	movs	r0, #213	@ 0xd5
 8005996:	f7ff fea9 	bl	80056ec <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL3,
 800599a:	2253      	movs	r2, #83	@ 0x53
 800599c:	2104      	movs	r1, #4
 800599e:	20d5      	movs	r0, #213	@ 0xd5
 80059a0:	f7ff fea4 	bl	80056ec <i2c_WriteReg>
    		0x53); //����������  ���̡�512 dps(64) ,��������940HZ
    //i2c_WriteReg(QMI8658_DEV,CTRL5,0x0); //��ʹ�õ�ͨ�˲���
    i2c_WriteReg(QMI8658_DEV,CTRL5,0x77); //ʹ�õ�ͨ�˲���  13.37% ��ODR
 80059a4:	2277      	movs	r2, #119	@ 0x77
 80059a6:	2106      	movs	r1, #6
 80059a8:	20d5      	movs	r0, #213	@ 0xd5
 80059aa:	f7ff fe9f 	bl	80056ec <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL6,0x0); //��ʹ��Motion on Demand
 80059ae:	2200      	movs	r2, #0
 80059b0:	2107      	movs	r1, #7
 80059b2:	20d5      	movs	r0, #213	@ 0xd5
 80059b4:	f7ff fe9a 	bl	80056ec <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL7,0x03); // ʹ�ܼ��ٶȼƺ�������
 80059b8:	2203      	movs	r2, #3
 80059ba:	2108      	movs	r1, #8
 80059bc:	20d5      	movs	r0, #213	@ 0xd5
 80059be:	f7ff fe95 	bl	80056ec <i2c_WriteReg>
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	08007ed0 	.word	0x08007ed0

080059d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e2:	2b84      	cmp	r3, #132	@ 0x84
 80059e4:	d005      	beq.n	80059f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	3303      	adds	r3, #3
 80059f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059f2:	68fb      	ldr	r3, [r7, #12]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a02:	f000 fadf 	bl	8005fc4 <vTaskStartScheduler>
  
  return osOK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0e:	b089      	sub	sp, #36	@ 0x24
 8005a10:	af04      	add	r7, sp, #16
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <osThreadCreate+0x54>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01c      	beq.n	8005a60 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685c      	ldr	r4, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691e      	ldr	r6, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ffc9 	bl	80059d0 <makeFreeRtosPriority>
 8005a3e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a48:	9202      	str	r2, [sp, #8]
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	9100      	str	r1, [sp, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	4632      	mov	r2, r6
 8005a52:	4629      	mov	r1, r5
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f8e8 	bl	8005c2a <xTaskCreateStatic>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e01c      	b.n	8005a9a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685c      	ldr	r4, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff ffab 	bl	80059d0 <makeFreeRtosPriority>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	f107 030c 	add.w	r3, r7, #12
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	9200      	str	r2, [sp, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4632      	mov	r2, r6
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f92d 	bl	8005cea <xTaskCreate>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d001      	beq.n	8005a9a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aa4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <osDelay+0x16>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	e000      	b.n	8005abc <osDelay+0x18>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fa4b 	bl	8005f58 <vTaskDelay>
  
  return osOK;
 8005ac2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f103 0208 	add.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 0208 	add.w	r2, r3, #8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f103 0208 	add.w	r2, r3, #8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d103      	bne.n	8005b88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e00c      	b.n	8005ba2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e002      	b.n	8005b96 <vListInsert+0x2e>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d2f6      	bcs.n	8005b90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6892      	ldr	r2, [r2, #8]
 8005bee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6852      	ldr	r2, [r2, #4]
 8005bf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d103      	bne.n	8005c0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	1e5a      	subs	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08e      	sub	sp, #56	@ 0x38
 8005c2e:	af04      	add	r7, sp, #16
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61fb      	str	r3, [r7, #28]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c74:	2354      	movs	r3, #84	@ 0x54
 8005c76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b54      	cmp	r3, #84	@ 0x54
 8005c7c:	d00b      	beq.n	8005c96 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	61bb      	str	r3, [r7, #24]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01e      	beq.n	8005cdc <xTaskCreateStatic+0xb2>
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01b      	beq.n	8005cdc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	f107 0314 	add.w	r3, r7, #20
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f850 	bl	8005d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cd6:	f000 f8d5 	bl	8005e84 <prvAddNewTaskToReadyList>
 8005cda:	e001      	b.n	8005ce0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ce0:	697b      	ldr	r3, [r7, #20]
	}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3728      	adds	r7, #40	@ 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b08c      	sub	sp, #48	@ 0x30
 8005cee:	af04      	add	r7, sp, #16
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	603b      	str	r3, [r7, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fe8e 	bl	8006a20 <pvPortMalloc>
 8005d04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00e      	beq.n	8005d2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d0c:	2054      	movs	r0, #84	@ 0x54
 8005d0e:	f000 fe87 	bl	8006a20 <pvPortMalloc>
 8005d12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d20:	e005      	b.n	8005d2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f000 ff4a 	bl	8006bbc <vPortFree>
 8005d28:	e001      	b.n	8005d2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d017      	beq.n	8005d64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9303      	str	r3, [sp, #12]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	9302      	str	r3, [sp, #8]
 8005d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f80e 	bl	8005d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d58:	69f8      	ldr	r0, [r7, #28]
 8005d5a:	f000 f893 	bl	8005e84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e002      	b.n	8005d6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f023 0307 	bic.w	r3, r3, #7
 8005d9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	617b      	str	r3, [r7, #20]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01f      	beq.n	8005e04 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e012      	b.n	8005df0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	7819      	ldrb	r1, [r3, #0]
 8005dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3334      	adds	r3, #52	@ 0x34
 8005dda:	460a      	mov	r2, r1
 8005ddc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d9e9      	bls.n	8005dca <prvInitialiseNewTask+0x56>
 8005df6:	e000      	b.n	8005dfa <prvInitialiseNewTask+0x86>
			{
				break;
 8005df8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e02:	e003      	b.n	8005e0c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d901      	bls.n	8005e16 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e12:	2306      	movs	r3, #6
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	2200      	movs	r2, #0
 8005e26:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fe6c 	bl	8005b0a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	3318      	adds	r3, #24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fe67 	bl	8005b0a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	f1c3 0207 	rsb	r2, r3, #7
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	2200      	movs	r2, #0
 8005e56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	69b8      	ldr	r0, [r7, #24]
 8005e66:	f000 fc2b 	bl	80066c0 <pxPortInitialiseStack>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e8c:	f000 fd06 	bl	800689c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e90:	4b2a      	ldr	r3, [pc, #168]	@ (8005f3c <prvAddNewTaskToReadyList+0xb8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a29      	ldr	r2, [pc, #164]	@ (8005f3c <prvAddNewTaskToReadyList+0xb8>)
 8005e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e9a:	4b29      	ldr	r3, [pc, #164]	@ (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ea2:	4a27      	ldr	r2, [pc, #156]	@ (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ea8:	4b24      	ldr	r3, [pc, #144]	@ (8005f3c <prvAddNewTaskToReadyList+0xb8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d110      	bne.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005eb0:	f000 fac4 	bl	800643c <prvInitialiseTaskLists>
 8005eb4:	e00d      	b.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eb6:	4b23      	ldr	r3, [pc, #140]	@ (8005f44 <prvAddNewTaskToReadyList+0xc0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ebe:	4b20      	ldr	r3, [pc, #128]	@ (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d802      	bhi.n	8005ed2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f48 <prvAddNewTaskToReadyList+0xc4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f48 <prvAddNewTaskToReadyList+0xc4>)
 8005eda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	4b19      	ldr	r3, [pc, #100]	@ (8005f4c <prvAddNewTaskToReadyList+0xc8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <prvAddNewTaskToReadyList+0xc8>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <prvAddNewTaskToReadyList+0xcc>)
 8005efc:	441a      	add	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7ff fe0c 	bl	8005b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f0a:	f000 fcf7 	bl	80068fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <prvAddNewTaskToReadyList+0xc0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <prvAddNewTaskToReadyList+0xbc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d207      	bcs.n	8005f34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f24:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <prvAddNewTaskToReadyList+0xd0>)
 8005f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f34:	bf00      	nop
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	200005f0 	.word	0x200005f0
 8005f40:	200004f0 	.word	0x200004f0
 8005f44:	200005fc 	.word	0x200005fc
 8005f48:	2000060c 	.word	0x2000060c
 8005f4c:	200005f8 	.word	0x200005f8
 8005f50:	200004f4 	.word	0x200004f4
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f6a:	4b14      	ldr	r3, [pc, #80]	@ (8005fbc <vTaskDelay+0x64>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <vTaskDelay+0x32>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f8a:	f000 f87d 	bl	8006088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb2f 	bl	80065f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f96:	f000 f885 	bl	80060a4 <xTaskResumeAll>
 8005f9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005fa2:	4b07      	ldr	r3, [pc, #28]	@ (8005fc0 <vTaskDelay+0x68>)
 8005fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000618 	.word	0x20000618
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fd2:	463a      	mov	r2, r7
 8005fd4:	1d39      	adds	r1, r7, #4
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fa f8ee 	bl	80001bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	9202      	str	r2, [sp, #8]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	460a      	mov	r2, r1
 8005ff2:	491f      	ldr	r1, [pc, #124]	@ (8006070 <vTaskStartScheduler+0xac>)
 8005ff4:	481f      	ldr	r0, [pc, #124]	@ (8006074 <vTaskStartScheduler+0xb0>)
 8005ff6:	f7ff fe18 	bl	8005c2a <xTaskCreateStatic>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8006078 <vTaskStartScheduler+0xb4>)
 8005ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006000:	4b1d      	ldr	r3, [pc, #116]	@ (8006078 <vTaskStartScheduler+0xb4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e001      	b.n	8006012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d116      	bne.n	8006046 <vTaskStartScheduler+0x82>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	613b      	str	r3, [r7, #16]
}
 800602a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800602c:	4b13      	ldr	r3, [pc, #76]	@ (800607c <vTaskStartScheduler+0xb8>)
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006034:	4b12      	ldr	r3, [pc, #72]	@ (8006080 <vTaskStartScheduler+0xbc>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800603a:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <vTaskStartScheduler+0xc0>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006040:	f000 fbba 	bl	80067b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006044:	e00f      	b.n	8006066 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d10b      	bne.n	8006066 <vTaskStartScheduler+0xa2>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60fb      	str	r3, [r7, #12]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <vTaskStartScheduler+0x9e>
}
 8006066:	bf00      	nop
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	08007ef8 	.word	0x08007ef8
 8006074:	0800640d 	.word	0x0800640d
 8006078:	20000614 	.word	0x20000614
 800607c:	20000610 	.word	0x20000610
 8006080:	200005fc 	.word	0x200005fc
 8006084:	200005f4 	.word	0x200005f4

08006088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800608c:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <vTaskSuspendAll+0x18>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	4a03      	ldr	r2, [pc, #12]	@ (80060a0 <vTaskSuspendAll+0x18>)
 8006094:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006096:	bf00      	nop
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20000618 	.word	0x20000618

080060a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060b2:	4b42      	ldr	r3, [pc, #264]	@ (80061bc <xTaskResumeAll+0x118>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	603b      	str	r3, [r7, #0]
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	e7fd      	b.n	80060ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060d2:	f000 fbe3 	bl	800689c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060d6:	4b39      	ldr	r3, [pc, #228]	@ (80061bc <xTaskResumeAll+0x118>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3b01      	subs	r3, #1
 80060dc:	4a37      	ldr	r2, [pc, #220]	@ (80061bc <xTaskResumeAll+0x118>)
 80060de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e0:	4b36      	ldr	r3, [pc, #216]	@ (80061bc <xTaskResumeAll+0x118>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d161      	bne.n	80061ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060e8:	4b35      	ldr	r3, [pc, #212]	@ (80061c0 <xTaskResumeAll+0x11c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d05d      	beq.n	80061ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060f0:	e02e      	b.n	8006150 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f2:	4b34      	ldr	r3, [pc, #208]	@ (80061c4 <xTaskResumeAll+0x120>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3318      	adds	r3, #24
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fd6a 	bl	8005bd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fd65 	bl	8005bd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	2201      	movs	r2, #1
 8006114:	409a      	lsls	r2, r3
 8006116:	4b2c      	ldr	r3, [pc, #176]	@ (80061c8 <xTaskResumeAll+0x124>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4313      	orrs	r3, r2
 800611c:	4a2a      	ldr	r2, [pc, #168]	@ (80061c8 <xTaskResumeAll+0x124>)
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4a27      	ldr	r2, [pc, #156]	@ (80061cc <xTaskResumeAll+0x128>)
 800612e:	441a      	add	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f7ff fcf3 	bl	8005b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006140:	4b23      	ldr	r3, [pc, #140]	@ (80061d0 <xTaskResumeAll+0x12c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800614a:	4b22      	ldr	r3, [pc, #136]	@ (80061d4 <xTaskResumeAll+0x130>)
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006150:	4b1c      	ldr	r3, [pc, #112]	@ (80061c4 <xTaskResumeAll+0x120>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1cc      	bne.n	80060f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800615e:	f000 fa0b 	bl	8006578 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006162:	4b1d      	ldr	r3, [pc, #116]	@ (80061d8 <xTaskResumeAll+0x134>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d010      	beq.n	8006190 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800616e:	f000 f837 	bl	80061e0 <xTaskIncrementTick>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006178:	4b16      	ldr	r3, [pc, #88]	@ (80061d4 <xTaskResumeAll+0x130>)
 800617a:	2201      	movs	r2, #1
 800617c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3b01      	subs	r3, #1
 8006182:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f1      	bne.n	800616e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800618a:	4b13      	ldr	r3, [pc, #76]	@ (80061d8 <xTaskResumeAll+0x134>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006190:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <xTaskResumeAll+0x130>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800619c:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <xTaskResumeAll+0x138>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061ac:	f000 fba6 	bl	80068fc <vPortExitCritical>

	return xAlreadyYielded;
 80061b0:	68bb      	ldr	r3, [r7, #8]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000618 	.word	0x20000618
 80061c0:	200005f0 	.word	0x200005f0
 80061c4:	200005b0 	.word	0x200005b0
 80061c8:	200005f8 	.word	0x200005f8
 80061cc:	200004f4 	.word	0x200004f4
 80061d0:	200004f0 	.word	0x200004f0
 80061d4:	20000604 	.word	0x20000604
 80061d8:	20000600 	.word	0x20000600
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006328 <xTaskIncrementTick+0x148>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 808f 	bne.w	8006312 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061f4:	4b4d      	ldr	r3, [pc, #308]	@ (800632c <xTaskIncrementTick+0x14c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061fc:	4a4b      	ldr	r2, [pc, #300]	@ (800632c <xTaskIncrementTick+0x14c>)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d121      	bne.n	800624c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006208:	4b49      	ldr	r3, [pc, #292]	@ (8006330 <xTaskIncrementTick+0x150>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	603b      	str	r3, [r7, #0]
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	e7fd      	b.n	8006226 <xTaskIncrementTick+0x46>
 800622a:	4b41      	ldr	r3, [pc, #260]	@ (8006330 <xTaskIncrementTick+0x150>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	4b40      	ldr	r3, [pc, #256]	@ (8006334 <xTaskIncrementTick+0x154>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3e      	ldr	r2, [pc, #248]	@ (8006330 <xTaskIncrementTick+0x150>)
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	4a3e      	ldr	r2, [pc, #248]	@ (8006334 <xTaskIncrementTick+0x154>)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b3e      	ldr	r3, [pc, #248]	@ (8006338 <xTaskIncrementTick+0x158>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a3c      	ldr	r2, [pc, #240]	@ (8006338 <xTaskIncrementTick+0x158>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	f000 f996 	bl	8006578 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800624c:	4b3b      	ldr	r3, [pc, #236]	@ (800633c <xTaskIncrementTick+0x15c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	429a      	cmp	r2, r3
 8006254:	d348      	bcc.n	80062e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006256:	4b36      	ldr	r3, [pc, #216]	@ (8006330 <xTaskIncrementTick+0x150>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006260:	4b36      	ldr	r3, [pc, #216]	@ (800633c <xTaskIncrementTick+0x15c>)
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	601a      	str	r2, [r3, #0]
					break;
 8006268:	e03e      	b.n	80062e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800626a:	4b31      	ldr	r3, [pc, #196]	@ (8006330 <xTaskIncrementTick+0x150>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	d203      	bcs.n	800628a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006282:	4a2e      	ldr	r2, [pc, #184]	@ (800633c <xTaskIncrementTick+0x15c>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006288:	e02e      	b.n	80062e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	3304      	adds	r3, #4
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fca2 	bl	8005bd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	3318      	adds	r3, #24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fc99 	bl	8005bd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	2201      	movs	r2, #1
 80062ac:	409a      	lsls	r2, r3
 80062ae:	4b24      	ldr	r3, [pc, #144]	@ (8006340 <xTaskIncrementTick+0x160>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	4a22      	ldr	r2, [pc, #136]	@ (8006340 <xTaskIncrementTick+0x160>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <xTaskIncrementTick+0x164>)
 80062c6:	441a      	add	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7ff fc27 	bl	8005b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006348 <xTaskIncrementTick+0x168>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3b9      	bcc.n	8006256 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e6:	e7b6      	b.n	8006256 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062e8:	4b17      	ldr	r3, [pc, #92]	@ (8006348 <xTaskIncrementTick+0x168>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ee:	4915      	ldr	r1, [pc, #84]	@ (8006344 <xTaskIncrementTick+0x164>)
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d901      	bls.n	8006304 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006304:	4b11      	ldr	r3, [pc, #68]	@ (800634c <xTaskIncrementTick+0x16c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e004      	b.n	800631c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006312:	4b0f      	ldr	r3, [pc, #60]	@ (8006350 <xTaskIncrementTick+0x170>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3301      	adds	r3, #1
 8006318:	4a0d      	ldr	r2, [pc, #52]	@ (8006350 <xTaskIncrementTick+0x170>)
 800631a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800631c:	697b      	ldr	r3, [r7, #20]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000618 	.word	0x20000618
 800632c:	200005f4 	.word	0x200005f4
 8006330:	200005a8 	.word	0x200005a8
 8006334:	200005ac 	.word	0x200005ac
 8006338:	20000608 	.word	0x20000608
 800633c:	20000610 	.word	0x20000610
 8006340:	200005f8 	.word	0x200005f8
 8006344:	200004f4 	.word	0x200004f4
 8006348:	200004f0 	.word	0x200004f0
 800634c:	20000604 	.word	0x20000604
 8006350:	20000600 	.word	0x20000600

08006354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <vTaskSwitchContext+0xa4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006362:	4b26      	ldr	r3, [pc, #152]	@ (80063fc <vTaskSwitchContext+0xa8>)
 8006364:	2201      	movs	r2, #1
 8006366:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006368:	e040      	b.n	80063ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <vTaskSwitchContext+0xa8>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006370:	4b23      	ldr	r3, [pc, #140]	@ (8006400 <vTaskSwitchContext+0xac>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	fab3 f383 	clz	r3, r3
 800637c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	f1c3 031f 	rsb	r3, r3, #31
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	491f      	ldr	r1, [pc, #124]	@ (8006404 <vTaskSwitchContext+0xb0>)
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	607b      	str	r3, [r7, #4]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <vTaskSwitchContext+0x5a>
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a11      	ldr	r2, [pc, #68]	@ (8006404 <vTaskSwitchContext+0xb0>)
 80063be:	4413      	add	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	605a      	str	r2, [r3, #4]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	3308      	adds	r3, #8
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d104      	bne.n	80063e2 <vTaskSwitchContext+0x8e>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4a07      	ldr	r2, [pc, #28]	@ (8006408 <vTaskSwitchContext+0xb4>)
 80063ea:	6013      	str	r3, [r2, #0]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000618 	.word	0x20000618
 80063fc:	20000604 	.word	0x20000604
 8006400:	200005f8 	.word	0x200005f8
 8006404:	200004f4 	.word	0x200004f4
 8006408:	200004f0 	.word	0x200004f0

0800640c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006414:	f000 f852 	bl	80064bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006418:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <prvIdleTask+0x28>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d9f9      	bls.n	8006414 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <prvIdleTask+0x2c>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006430:	e7f0      	b.n	8006414 <prvIdleTask+0x8>
 8006432:	bf00      	nop
 8006434:	200004f4 	.word	0x200004f4
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	e00c      	b.n	8006462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4a12      	ldr	r2, [pc, #72]	@ (800649c <prvInitialiseTaskLists+0x60>)
 8006454:	4413      	add	r3, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fb38 	bl	8005acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3301      	adds	r3, #1
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b06      	cmp	r3, #6
 8006466:	d9ef      	bls.n	8006448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006468:	480d      	ldr	r0, [pc, #52]	@ (80064a0 <prvInitialiseTaskLists+0x64>)
 800646a:	f7ff fb2f 	bl	8005acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800646e:	480d      	ldr	r0, [pc, #52]	@ (80064a4 <prvInitialiseTaskLists+0x68>)
 8006470:	f7ff fb2c 	bl	8005acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006474:	480c      	ldr	r0, [pc, #48]	@ (80064a8 <prvInitialiseTaskLists+0x6c>)
 8006476:	f7ff fb29 	bl	8005acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800647a:	480c      	ldr	r0, [pc, #48]	@ (80064ac <prvInitialiseTaskLists+0x70>)
 800647c:	f7ff fb26 	bl	8005acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006480:	480b      	ldr	r0, [pc, #44]	@ (80064b0 <prvInitialiseTaskLists+0x74>)
 8006482:	f7ff fb23 	bl	8005acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006486:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <prvInitialiseTaskLists+0x78>)
 8006488:	4a05      	ldr	r2, [pc, #20]	@ (80064a0 <prvInitialiseTaskLists+0x64>)
 800648a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800648c:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <prvInitialiseTaskLists+0x7c>)
 800648e:	4a05      	ldr	r2, [pc, #20]	@ (80064a4 <prvInitialiseTaskLists+0x68>)
 8006490:	601a      	str	r2, [r3, #0]
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200004f4 	.word	0x200004f4
 80064a0:	20000580 	.word	0x20000580
 80064a4:	20000594 	.word	0x20000594
 80064a8:	200005b0 	.word	0x200005b0
 80064ac:	200005c4 	.word	0x200005c4
 80064b0:	200005dc 	.word	0x200005dc
 80064b4:	200005a8 	.word	0x200005a8
 80064b8:	200005ac 	.word	0x200005ac

080064bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064c2:	e019      	b.n	80064f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064c4:	f000 f9ea 	bl	800689c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c8:	4b10      	ldr	r3, [pc, #64]	@ (800650c <prvCheckTasksWaitingTermination+0x50>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fb7f 	bl	8005bd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <prvCheckTasksWaitingTermination+0x54>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3b01      	subs	r3, #1
 80064e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006510 <prvCheckTasksWaitingTermination+0x54>)
 80064e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <prvCheckTasksWaitingTermination+0x58>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006514 <prvCheckTasksWaitingTermination+0x58>)
 80064ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064ee:	f000 fa05 	bl	80068fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f810 	bl	8006518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064f8:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <prvCheckTasksWaitingTermination+0x58>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e1      	bne.n	80064c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	200005c4 	.word	0x200005c4
 8006510:	200005f0 	.word	0x200005f0
 8006514:	200005d8 	.word	0x200005d8

08006518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fb44 	bl	8006bbc <vPortFree>
				vPortFree( pxTCB );
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fb41 	bl	8006bbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800653a:	e019      	b.n	8006570 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006542:	2b01      	cmp	r3, #1
 8006544:	d103      	bne.n	800654e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fb38 	bl	8006bbc <vPortFree>
	}
 800654c:	e010      	b.n	8006570 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006554:	2b02      	cmp	r3, #2
 8006556:	d00b      	beq.n	8006570 <prvDeleteTCB+0x58>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	60fb      	str	r3, [r7, #12]
}
 800656a:	bf00      	nop
 800656c:	bf00      	nop
 800656e:	e7fd      	b.n	800656c <prvDeleteTCB+0x54>
	}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800657e:	4b0c      	ldr	r3, [pc, #48]	@ (80065b0 <prvResetNextTaskUnblockTime+0x38>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006588:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <prvResetNextTaskUnblockTime+0x3c>)
 800658a:	f04f 32ff 	mov.w	r2, #4294967295
 800658e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006590:	e008      	b.n	80065a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006592:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <prvResetNextTaskUnblockTime+0x38>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4a04      	ldr	r2, [pc, #16]	@ (80065b4 <prvResetNextTaskUnblockTime+0x3c>)
 80065a2:	6013      	str	r3, [r2, #0]
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	200005a8 	.word	0x200005a8
 80065b4:	20000610 	.word	0x20000610

080065b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065be:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <xTaskGetSchedulerState+0x34>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065c6:	2301      	movs	r3, #1
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	e008      	b.n	80065de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065cc:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <xTaskGetSchedulerState+0x38>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065d4:	2302      	movs	r3, #2
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	e001      	b.n	80065de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065da:	2300      	movs	r3, #0
 80065dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065de:	687b      	ldr	r3, [r7, #4]
	}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	200005fc 	.word	0x200005fc
 80065f0:	20000618 	.word	0x20000618

080065f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065fe:	4b29      	ldr	r3, [pc, #164]	@ (80066a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006604:	4b28      	ldr	r3, [pc, #160]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fae4 	bl	8005bd8 <uxListRemove>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006616:	4b24      	ldr	r3, [pc, #144]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	2201      	movs	r2, #1
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43da      	mvns	r2, r3
 8006624:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4013      	ands	r3, r2
 800662a:	4a20      	ldr	r2, [pc, #128]	@ (80066ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800662c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d10a      	bne.n	800664c <prvAddCurrentTaskToDelayedList+0x58>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800663c:	4b1a      	ldr	r3, [pc, #104]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	481a      	ldr	r0, [pc, #104]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006646:	f7ff fa6c 	bl	8005b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800664a:	e026      	b.n	800669a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006654:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d209      	bcs.n	8006678 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006664:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b0f      	ldr	r3, [pc, #60]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7ff fa79 	bl	8005b68 <vListInsert>
}
 8006676:	e010      	b.n	800669a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006678:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7ff fa6f 	bl	8005b68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800668a:	4b0c      	ldr	r3, [pc, #48]	@ (80066bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d202      	bcs.n	800669a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006694:	4a09      	ldr	r2, [pc, #36]	@ (80066bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	200005f4 	.word	0x200005f4
 80066a8:	200004f0 	.word	0x200004f0
 80066ac:	200005f8 	.word	0x200005f8
 80066b0:	200005dc 	.word	0x200005dc
 80066b4:	200005ac 	.word	0x200005ac
 80066b8:	200005a8 	.word	0x200005a8
 80066bc:	20000610 	.word	0x20000610

080066c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b04      	subs	r3, #4
 80066d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b04      	subs	r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066f0:	4a08      	ldr	r2, [pc, #32]	@ (8006714 <pxPortInitialiseStack+0x54>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3b14      	subs	r3, #20
 80066fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b20      	subs	r3, #32
 8006706:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr
 8006714:	08006719 	.word	0x08006719

08006718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006722:	4b12      	ldr	r3, [pc, #72]	@ (800676c <prvTaskExitError+0x54>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d00b      	beq.n	8006744 <prvTaskExitError+0x2c>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <prvTaskExitError+0x28>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60bb      	str	r3, [r7, #8]
}
 8006756:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006758:	bf00      	nop
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0fc      	beq.n	800675a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr
 800676c:	2000000c 	.word	0x2000000c

08006770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006770:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <pxCurrentTCBConst2>)
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800677a:	f380 8809 	msr	PSP, r0
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	f04e 0e0d 	orr.w	lr, lr, #13
 800678e:	4770      	bx	lr

08006790 <pxCurrentTCBConst2>:
 8006790:	200004f0 	.word	0x200004f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006798:	4806      	ldr	r0, [pc, #24]	@ (80067b4 <prvPortStartFirstTask+0x1c>)
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f380 8808 	msr	MSP, r0
 80067a2:	b662      	cpsie	i
 80067a4:	b661      	cpsie	f
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	df00      	svc	0
 80067b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed08 	.word	0xe000ed08

080067b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067be:	4b32      	ldr	r3, [pc, #200]	@ (8006888 <xPortStartScheduler+0xd0>)
 80067c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	22ff      	movs	r2, #255	@ 0xff
 80067ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	4b2a      	ldr	r3, [pc, #168]	@ (800688c <xPortStartScheduler+0xd4>)
 80067e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006890 <xPortStartScheduler+0xd8>)
 80067e8:	2207      	movs	r2, #7
 80067ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ec:	e009      	b.n	8006802 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067ee:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <xPortStartScheduler+0xd8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	4a26      	ldr	r2, [pc, #152]	@ (8006890 <xPortStartScheduler+0xd8>)
 80067f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680a:	2b80      	cmp	r3, #128	@ 0x80
 800680c:	d0ef      	beq.n	80067ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800680e:	4b20      	ldr	r3, [pc, #128]	@ (8006890 <xPortStartScheduler+0xd8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1c3 0307 	rsb	r3, r3, #7
 8006816:	2b04      	cmp	r3, #4
 8006818:	d00b      	beq.n	8006832 <xPortStartScheduler+0x7a>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60bb      	str	r3, [r7, #8]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006832:	4b17      	ldr	r3, [pc, #92]	@ (8006890 <xPortStartScheduler+0xd8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	4a15      	ldr	r2, [pc, #84]	@ (8006890 <xPortStartScheduler+0xd8>)
 800683a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800683c:	4b14      	ldr	r3, [pc, #80]	@ (8006890 <xPortStartScheduler+0xd8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006844:	4a12      	ldr	r2, [pc, #72]	@ (8006890 <xPortStartScheduler+0xd8>)
 8006846:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	b2da      	uxtb	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006850:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <xPortStartScheduler+0xdc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a0f      	ldr	r2, [pc, #60]	@ (8006894 <xPortStartScheduler+0xdc>)
 8006856:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800685a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800685c:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <xPortStartScheduler+0xdc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0c      	ldr	r2, [pc, #48]	@ (8006894 <xPortStartScheduler+0xdc>)
 8006862:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006866:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006868:	f000 f8b8 	bl	80069dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800686c:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <xPortStartScheduler+0xe0>)
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006872:	f7ff ff91 	bl	8006798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006876:	f7ff fd6d 	bl	8006354 <vTaskSwitchContext>
	prvTaskExitError();
 800687a:	f7ff ff4d 	bl	8006718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000e400 	.word	0xe000e400
 800688c:	2000061c 	.word	0x2000061c
 8006890:	20000620 	.word	0x20000620
 8006894:	e000ed20 	.word	0xe000ed20
 8006898:	2000000c 	.word	0x2000000c

0800689c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	607b      	str	r3, [r7, #4]
}
 80068b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068b6:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <vPortEnterCritical+0x58>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3301      	adds	r3, #1
 80068bc:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <vPortEnterCritical+0x58>)
 80068be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068c0:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <vPortEnterCritical+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d110      	bne.n	80068ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <vPortEnterCritical+0x5c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <vPortEnterCritical+0x4e>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	603b      	str	r3, [r7, #0]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <vPortEnterCritical+0x4a>
	}
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	2000000c 	.word	0x2000000c
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006902:	4b12      	ldr	r3, [pc, #72]	@ (800694c <vPortExitCritical+0x50>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10b      	bne.n	8006922 <vPortExitCritical+0x26>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
 800691e:	bf00      	nop
 8006920:	e7fd      	b.n	800691e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006922:	4b0a      	ldr	r3, [pc, #40]	@ (800694c <vPortExitCritical+0x50>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	4a08      	ldr	r2, [pc, #32]	@ (800694c <vPortExitCritical+0x50>)
 800692a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800692c:	4b07      	ldr	r3, [pc, #28]	@ (800694c <vPortExitCritical+0x50>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <vPortExitCritical+0x44>
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800693e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	2000000c 	.word	0x2000000c

08006950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006950:	f3ef 8009 	mrs	r0, PSP
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <pxCurrentTCBConst>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006960:	6010      	str	r0, [r2, #0]
 8006962:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006966:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800696a:	f380 8811 	msr	BASEPRI, r0
 800696e:	f7ff fcf1 	bl	8006354 <vTaskSwitchContext>
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8811 	msr	BASEPRI, r0
 800697a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	6808      	ldr	r0, [r1, #0]
 8006982:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006986:	f380 8809 	msr	PSP, r0
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	4770      	bx	lr

08006990 <pxCurrentTCBConst>:
 8006990:	200004f0 	.word	0x200004f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
}
 80069b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069b2:	f7ff fc15 	bl	80061e0 <xTaskIncrementTick>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <xPortSysTickHandler+0x40>)
 80069be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	2300      	movs	r3, #0
 80069c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f383 8811 	msr	BASEPRI, r3
}
 80069ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069e0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <vPortSetupTimerInterrupt+0x30>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <vPortSetupTimerInterrupt+0x34>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069ec:	4b09      	ldr	r3, [pc, #36]	@ (8006a14 <vPortSetupTimerInterrupt+0x38>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a09      	ldr	r2, [pc, #36]	@ (8006a18 <vPortSetupTimerInterrupt+0x3c>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	099b      	lsrs	r3, r3, #6
 80069f8:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <vPortSetupTimerInterrupt+0x40>)
 80069fa:	3b01      	subs	r3, #1
 80069fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069fe:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <vPortSetupTimerInterrupt+0x30>)
 8006a00:	2207      	movs	r2, #7
 8006a02:	601a      	str	r2, [r3, #0]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	e000e010 	.word	0xe000e010
 8006a10:	e000e018 	.word	0xe000e018
 8006a14:	20000000 	.word	0x20000000
 8006a18:	10624dd3 	.word	0x10624dd3
 8006a1c:	e000e014 	.word	0xe000e014

08006a20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08a      	sub	sp, #40	@ 0x28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a2c:	f7ff fb2c 	bl	8006088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a30:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba4 <pvPortMalloc+0x184>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a38:	f000 f924 	bl	8006c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ba8 <pvPortMalloc+0x188>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 8095 	bne.w	8006b74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01e      	beq.n	8006a8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a50:	2208      	movs	r2, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4413      	add	r3, r2
 8006a56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d015      	beq.n	8006a8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f023 0307 	bic.w	r3, r3, #7
 8006a68:	3308      	adds	r3, #8
 8006a6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <pvPortMalloc+0x6e>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	617b      	str	r3, [r7, #20]
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	e7fd      	b.n	8006a8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d06f      	beq.n	8006b74 <pvPortMalloc+0x154>
 8006a94:	4b45      	ldr	r3, [pc, #276]	@ (8006bac <pvPortMalloc+0x18c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d86a      	bhi.n	8006b74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a9e:	4b44      	ldr	r3, [pc, #272]	@ (8006bb0 <pvPortMalloc+0x190>)
 8006aa0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006aa2:	4b43      	ldr	r3, [pc, #268]	@ (8006bb0 <pvPortMalloc+0x190>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aa8:	e004      	b.n	8006ab4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d903      	bls.n	8006ac6 <pvPortMalloc+0xa6>
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f1      	bne.n	8006aaa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ac6:	4b37      	ldr	r3, [pc, #220]	@ (8006ba4 <pvPortMalloc+0x184>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d051      	beq.n	8006b74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	4413      	add	r3, r2
 8006ad8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	1ad2      	subs	r2, r2, r3
 8006aea:	2308      	movs	r3, #8
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d920      	bls.n	8006b34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <pvPortMalloc+0xfc>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b2e:	69b8      	ldr	r0, [r7, #24]
 8006b30:	f000 f90a 	bl	8006d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b34:	4b1d      	ldr	r3, [pc, #116]	@ (8006bac <pvPortMalloc+0x18c>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bac <pvPortMalloc+0x18c>)
 8006b40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b42:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <pvPortMalloc+0x18c>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb4 <pvPortMalloc+0x194>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d203      	bcs.n	8006b56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b4e:	4b17      	ldr	r3, [pc, #92]	@ (8006bac <pvPortMalloc+0x18c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a18      	ldr	r2, [pc, #96]	@ (8006bb4 <pvPortMalloc+0x194>)
 8006b54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ba8 <pvPortMalloc+0x188>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b6a:	4b13      	ldr	r3, [pc, #76]	@ (8006bb8 <pvPortMalloc+0x198>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	4a11      	ldr	r2, [pc, #68]	@ (8006bb8 <pvPortMalloc+0x198>)
 8006b72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b74:	f7ff fa96 	bl	80060a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <pvPortMalloc+0x17a>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	60fb      	str	r3, [r7, #12]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <pvPortMalloc+0x176>
	return pvReturn;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3728      	adds	r7, #40	@ 0x28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	2000122c 	.word	0x2000122c
 8006ba8:	20001240 	.word	0x20001240
 8006bac:	20001230 	.word	0x20001230
 8006bb0:	20001224 	.word	0x20001224
 8006bb4:	20001234 	.word	0x20001234
 8006bb8:	20001238 	.word	0x20001238

08006bbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04f      	beq.n	8006c6e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bce:	2308      	movs	r3, #8
 8006bd0:	425b      	negs	r3, r3
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b25      	ldr	r3, [pc, #148]	@ (8006c78 <vPortFree+0xbc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <vPortFree+0x46>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00b      	beq.n	8006c22 <vPortFree+0x66>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	4b14      	ldr	r3, [pc, #80]	@ (8006c78 <vPortFree+0xbc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01e      	beq.n	8006c6e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11a      	bne.n	8006c6e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c78 <vPortFree+0xbc>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	43db      	mvns	r3, r3
 8006c42:	401a      	ands	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c48:	f7ff fa1e 	bl	8006088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	4b0a      	ldr	r3, [pc, #40]	@ (8006c7c <vPortFree+0xc0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <vPortFree+0xc0>)
 8006c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c5a:	6938      	ldr	r0, [r7, #16]
 8006c5c:	f000 f874 	bl	8006d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c60:	4b07      	ldr	r3, [pc, #28]	@ (8006c80 <vPortFree+0xc4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	4a06      	ldr	r2, [pc, #24]	@ (8006c80 <vPortFree+0xc4>)
 8006c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c6a:	f7ff fa1b 	bl	80060a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20001240 	.word	0x20001240
 8006c7c:	20001230 	.word	0x20001230
 8006c80:	2000123c 	.word	0x2000123c

08006c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c90:	4b27      	ldr	r3, [pc, #156]	@ (8006d30 <prvHeapInit+0xac>)
 8006c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3307      	adds	r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d30 <prvHeapInit+0xac>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d34 <prvHeapInit+0xb0>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006d34 <prvHeapInit+0xb0>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <prvHeapInit+0xb4>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	@ (8006d38 <prvHeapInit+0xb4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <prvHeapInit+0xb4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d04:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <prvHeapInit+0xb4>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <prvHeapInit+0xb8>)
 8006d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <prvHeapInit+0xbc>)
 8006d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d1c:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <prvHeapInit+0xc0>)
 8006d1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000624 	.word	0x20000624
 8006d34:	20001224 	.word	0x20001224
 8006d38:	2000122c 	.word	0x2000122c
 8006d3c:	20001234 	.word	0x20001234
 8006d40:	20001230 	.word	0x20001230
 8006d44:	20001240 	.word	0x20001240

08006d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d50:	4b27      	ldr	r3, [pc, #156]	@ (8006df0 <prvInsertBlockIntoFreeList+0xa8>)
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e002      	b.n	8006d5c <prvInsertBlockIntoFreeList+0x14>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d8f7      	bhi.n	8006d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d108      	bne.n	8006d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d118      	bne.n	8006dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b14      	ldr	r3, [pc, #80]	@ (8006df4 <prvInsertBlockIntoFreeList+0xac>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d00d      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <prvInsertBlockIntoFreeList+0xac>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e003      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d002      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	20001224 	.word	0x20001224
 8006df4:	2000122c 	.word	0x2000122c

08006df8 <std>:
 8006df8:	2300      	movs	r3, #0
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	6183      	str	r3, [r0, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	2208      	movs	r2, #8
 8006e14:	305c      	adds	r0, #92	@ 0x5c
 8006e16:	f000 f9f9 	bl	800720c <memset>
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <std+0x58>)
 8006e1c:	6224      	str	r4, [r4, #32]
 8006e1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e20:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <std+0x5c>)
 8006e22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <std+0x60>)
 8006e26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e28:	4b0c      	ldr	r3, [pc, #48]	@ (8006e5c <std+0x64>)
 8006e2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <std+0x68>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d006      	beq.n	8006e40 <std+0x48>
 8006e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e36:	4294      	cmp	r4, r2
 8006e38:	d002      	beq.n	8006e40 <std+0x48>
 8006e3a:	33d0      	adds	r3, #208	@ 0xd0
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d105      	bne.n	8006e4c <std+0x54>
 8006e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f000 ba58 	b.w	80072fc <__retarget_lock_init_recursive>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	bf00      	nop
 8006e50:	0800705d 	.word	0x0800705d
 8006e54:	0800707f 	.word	0x0800707f
 8006e58:	080070b7 	.word	0x080070b7
 8006e5c:	080070db 	.word	0x080070db
 8006e60:	20001244 	.word	0x20001244

08006e64 <stdio_exit_handler>:
 8006e64:	4a02      	ldr	r2, [pc, #8]	@ (8006e70 <stdio_exit_handler+0xc>)
 8006e66:	4903      	ldr	r1, [pc, #12]	@ (8006e74 <stdio_exit_handler+0x10>)
 8006e68:	4803      	ldr	r0, [pc, #12]	@ (8006e78 <stdio_exit_handler+0x14>)
 8006e6a:	f000 b869 	b.w	8006f40 <_fwalk_sglue>
 8006e6e:	bf00      	nop
 8006e70:	20000010 	.word	0x20000010
 8006e74:	08007b91 	.word	0x08007b91
 8006e78:	20000020 	.word	0x20000020

08006e7c <cleanup_stdio>:
 8006e7c:	6841      	ldr	r1, [r0, #4]
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <cleanup_stdio+0x34>)
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4299      	cmp	r1, r3
 8006e84:	4604      	mov	r4, r0
 8006e86:	d001      	beq.n	8006e8c <cleanup_stdio+0x10>
 8006e88:	f000 fe82 	bl	8007b90 <_fflush_r>
 8006e8c:	68a1      	ldr	r1, [r4, #8]
 8006e8e:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <cleanup_stdio+0x38>)
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d002      	beq.n	8006e9a <cleanup_stdio+0x1e>
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fe7b 	bl	8007b90 <_fflush_r>
 8006e9a:	68e1      	ldr	r1, [r4, #12]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <cleanup_stdio+0x3c>)
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d004      	beq.n	8006eac <cleanup_stdio+0x30>
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea8:	f000 be72 	b.w	8007b90 <_fflush_r>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	20001244 	.word	0x20001244
 8006eb4:	200012ac 	.word	0x200012ac
 8006eb8:	20001314 	.word	0x20001314

08006ebc <global_stdio_init.part.0>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <global_stdio_init.part.0+0x30>)
 8006ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8006ef0 <global_stdio_init.part.0+0x34>)
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <global_stdio_init.part.0+0x38>)
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	2104      	movs	r1, #4
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7ff ff94 	bl	8006df8 <std>
 8006ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	2109      	movs	r1, #9
 8006ed8:	f7ff ff8e 	bl	8006df8 <std>
 8006edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee6:	2112      	movs	r1, #18
 8006ee8:	f7ff bf86 	b.w	8006df8 <std>
 8006eec:	2000137c 	.word	0x2000137c
 8006ef0:	20001244 	.word	0x20001244
 8006ef4:	08006e65 	.word	0x08006e65

08006ef8 <__sfp_lock_acquire>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	@ (8006f00 <__sfp_lock_acquire+0x8>)
 8006efa:	f000 ba00 	b.w	80072fe <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	20001385 	.word	0x20001385

08006f04 <__sfp_lock_release>:
 8006f04:	4801      	ldr	r0, [pc, #4]	@ (8006f0c <__sfp_lock_release+0x8>)
 8006f06:	f000 b9fb 	b.w	8007300 <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	20001385 	.word	0x20001385

08006f10 <__sinit>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	f7ff fff0 	bl	8006ef8 <__sfp_lock_acquire>
 8006f18:	6a23      	ldr	r3, [r4, #32]
 8006f1a:	b11b      	cbz	r3, 8006f24 <__sinit+0x14>
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	f7ff bff0 	b.w	8006f04 <__sfp_lock_release>
 8006f24:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <__sinit+0x28>)
 8006f26:	6223      	str	r3, [r4, #32]
 8006f28:	4b04      	ldr	r3, [pc, #16]	@ (8006f3c <__sinit+0x2c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f5      	bne.n	8006f1c <__sinit+0xc>
 8006f30:	f7ff ffc4 	bl	8006ebc <global_stdio_init.part.0>
 8006f34:	e7f2      	b.n	8006f1c <__sinit+0xc>
 8006f36:	bf00      	nop
 8006f38:	08006e7d 	.word	0x08006e7d
 8006f3c:	2000137c 	.word	0x2000137c

08006f40 <_fwalk_sglue>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4607      	mov	r7, r0
 8006f46:	4688      	mov	r8, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f50:	f1b9 0901 	subs.w	r9, r9, #1
 8006f54:	d505      	bpl.n	8006f62 <_fwalk_sglue+0x22>
 8006f56:	6824      	ldr	r4, [r4, #0]
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	d1f7      	bne.n	8006f4c <_fwalk_sglue+0xc>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d907      	bls.n	8006f78 <_fwalk_sglue+0x38>
 8006f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	d003      	beq.n	8006f78 <_fwalk_sglue+0x38>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4638      	mov	r0, r7
 8006f74:	47c0      	blx	r8
 8006f76:	4306      	orrs	r6, r0
 8006f78:	3568      	adds	r5, #104	@ 0x68
 8006f7a:	e7e9      	b.n	8006f50 <_fwalk_sglue+0x10>

08006f7c <iprintf>:
 8006f7c:	b40f      	push	{r0, r1, r2, r3}
 8006f7e:	b507      	push	{r0, r1, r2, lr}
 8006f80:	4906      	ldr	r1, [pc, #24]	@ (8006f9c <iprintf+0x20>)
 8006f82:	ab04      	add	r3, sp, #16
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8a:	6881      	ldr	r1, [r0, #8]
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	f000 fad7 	bl	8007540 <_vfiprintf_r>
 8006f92:	b003      	add	sp, #12
 8006f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f98:	b004      	add	sp, #16
 8006f9a:	4770      	bx	lr
 8006f9c:	2000001c 	.word	0x2000001c

08006fa0 <_puts_r>:
 8006fa0:	6a03      	ldr	r3, [r0, #32]
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460e      	mov	r6, r1
 8006fa8:	6884      	ldr	r4, [r0, #8]
 8006faa:	b90b      	cbnz	r3, 8006fb0 <_puts_r+0x10>
 8006fac:	f7ff ffb0 	bl	8006f10 <__sinit>
 8006fb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	d405      	bmi.n	8006fc2 <_puts_r+0x22>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <_puts_r+0x22>
 8006fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fbe:	f000 f99e 	bl	80072fe <__retarget_lock_acquire_recursive>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	0719      	lsls	r1, r3, #28
 8006fc6:	d502      	bpl.n	8006fce <_puts_r+0x2e>
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d135      	bne.n	800703a <_puts_r+0x9a>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f000 f8c5 	bl	8007160 <__swsetup_r>
 8006fd6:	b380      	cbz	r0, 800703a <_puts_r+0x9a>
 8006fd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fde:	07da      	lsls	r2, r3, #31
 8006fe0:	d405      	bmi.n	8006fee <_puts_r+0x4e>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	059b      	lsls	r3, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_puts_r+0x4e>
 8006fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fea:	f000 f989 	bl	8007300 <__retarget_lock_release_recursive>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da04      	bge.n	8007000 <_puts_r+0x60>
 8006ff6:	69a2      	ldr	r2, [r4, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	dc17      	bgt.n	800702c <_puts_r+0x8c>
 8006ffc:	290a      	cmp	r1, #10
 8006ffe:	d015      	beq.n	800702c <_puts_r+0x8c>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	6022      	str	r2, [r4, #0]
 8007006:	7019      	strb	r1, [r3, #0]
 8007008:	68a3      	ldr	r3, [r4, #8]
 800700a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800700e:	3b01      	subs	r3, #1
 8007010:	60a3      	str	r3, [r4, #8]
 8007012:	2900      	cmp	r1, #0
 8007014:	d1ed      	bne.n	8006ff2 <_puts_r+0x52>
 8007016:	2b00      	cmp	r3, #0
 8007018:	da11      	bge.n	800703e <_puts_r+0x9e>
 800701a:	4622      	mov	r2, r4
 800701c:	210a      	movs	r1, #10
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f85f 	bl	80070e2 <__swbuf_r>
 8007024:	3001      	adds	r0, #1
 8007026:	d0d7      	beq.n	8006fd8 <_puts_r+0x38>
 8007028:	250a      	movs	r5, #10
 800702a:	e7d7      	b.n	8006fdc <_puts_r+0x3c>
 800702c:	4622      	mov	r2, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f857 	bl	80070e2 <__swbuf_r>
 8007034:	3001      	adds	r0, #1
 8007036:	d1e7      	bne.n	8007008 <_puts_r+0x68>
 8007038:	e7ce      	b.n	8006fd8 <_puts_r+0x38>
 800703a:	3e01      	subs	r6, #1
 800703c:	e7e4      	b.n	8007008 <_puts_r+0x68>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	220a      	movs	r2, #10
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e7ee      	b.n	8007028 <_puts_r+0x88>
	...

0800704c <puts>:
 800704c:	4b02      	ldr	r3, [pc, #8]	@ (8007058 <puts+0xc>)
 800704e:	4601      	mov	r1, r0
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f7ff bfa5 	b.w	8006fa0 <_puts_r>
 8007056:	bf00      	nop
 8007058:	2000001c 	.word	0x2000001c

0800705c <__sread>:
 800705c:	b510      	push	{r4, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 f8fc 	bl	8007260 <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	bfab      	itete	ge
 800706c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800706e:	89a3      	ldrhlt	r3, [r4, #12]
 8007070:	181b      	addge	r3, r3, r0
 8007072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007076:	bfac      	ite	ge
 8007078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800707a:	81a3      	strhlt	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__swrite>:
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	461f      	mov	r7, r3
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	4605      	mov	r5, r0
 8007088:	05db      	lsls	r3, r3, #23
 800708a:	460c      	mov	r4, r1
 800708c:	4616      	mov	r6, r2
 800708e:	d505      	bpl.n	800709c <__swrite+0x1e>
 8007090:	2302      	movs	r3, #2
 8007092:	2200      	movs	r2, #0
 8007094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007098:	f000 f8d0 	bl	800723c <_lseek_r>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	4632      	mov	r2, r6
 80070a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	4628      	mov	r0, r5
 80070a8:	463b      	mov	r3, r7
 80070aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f000 b8e7 	b.w	8007284 <_write_r>

080070b6 <__sseek>:
 80070b6:	b510      	push	{r4, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 f8bd 	bl	800723c <_lseek_r>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	bf15      	itete	ne
 80070c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070d2:	81a3      	strheq	r3, [r4, #12]
 80070d4:	bf18      	it	ne
 80070d6:	81a3      	strhne	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__sclose>:
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 b89d 	b.w	800721c <_close_r>

080070e2 <__swbuf_r>:
 80070e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e4:	460e      	mov	r6, r1
 80070e6:	4614      	mov	r4, r2
 80070e8:	4605      	mov	r5, r0
 80070ea:	b118      	cbz	r0, 80070f4 <__swbuf_r+0x12>
 80070ec:	6a03      	ldr	r3, [r0, #32]
 80070ee:	b90b      	cbnz	r3, 80070f4 <__swbuf_r+0x12>
 80070f0:	f7ff ff0e 	bl	8006f10 <__sinit>
 80070f4:	69a3      	ldr	r3, [r4, #24]
 80070f6:	60a3      	str	r3, [r4, #8]
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	071a      	lsls	r2, r3, #28
 80070fc:	d501      	bpl.n	8007102 <__swbuf_r+0x20>
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	b943      	cbnz	r3, 8007114 <__swbuf_r+0x32>
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f000 f82b 	bl	8007160 <__swsetup_r>
 800710a:	b118      	cbz	r0, 8007114 <__swbuf_r+0x32>
 800710c:	f04f 37ff 	mov.w	r7, #4294967295
 8007110:	4638      	mov	r0, r7
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	6922      	ldr	r2, [r4, #16]
 8007118:	b2f6      	uxtb	r6, r6
 800711a:	1a98      	subs	r0, r3, r2
 800711c:	6963      	ldr	r3, [r4, #20]
 800711e:	4637      	mov	r7, r6
 8007120:	4283      	cmp	r3, r0
 8007122:	dc05      	bgt.n	8007130 <__swbuf_r+0x4e>
 8007124:	4621      	mov	r1, r4
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fd32 	bl	8007b90 <_fflush_r>
 800712c:	2800      	cmp	r0, #0
 800712e:	d1ed      	bne.n	800710c <__swbuf_r+0x2a>
 8007130:	68a3      	ldr	r3, [r4, #8]
 8007132:	3b01      	subs	r3, #1
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	6022      	str	r2, [r4, #0]
 800713c:	701e      	strb	r6, [r3, #0]
 800713e:	6962      	ldr	r2, [r4, #20]
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	429a      	cmp	r2, r3
 8007144:	d004      	beq.n	8007150 <__swbuf_r+0x6e>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	07db      	lsls	r3, r3, #31
 800714a:	d5e1      	bpl.n	8007110 <__swbuf_r+0x2e>
 800714c:	2e0a      	cmp	r6, #10
 800714e:	d1df      	bne.n	8007110 <__swbuf_r+0x2e>
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 fd1c 	bl	8007b90 <_fflush_r>
 8007158:	2800      	cmp	r0, #0
 800715a:	d0d9      	beq.n	8007110 <__swbuf_r+0x2e>
 800715c:	e7d6      	b.n	800710c <__swbuf_r+0x2a>
	...

08007160 <__swsetup_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4b29      	ldr	r3, [pc, #164]	@ (8007208 <__swsetup_r+0xa8>)
 8007164:	4605      	mov	r5, r0
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	460c      	mov	r4, r1
 800716a:	b118      	cbz	r0, 8007174 <__swsetup_r+0x14>
 800716c:	6a03      	ldr	r3, [r0, #32]
 800716e:	b90b      	cbnz	r3, 8007174 <__swsetup_r+0x14>
 8007170:	f7ff fece 	bl	8006f10 <__sinit>
 8007174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007178:	0719      	lsls	r1, r3, #28
 800717a:	d422      	bmi.n	80071c2 <__swsetup_r+0x62>
 800717c:	06da      	lsls	r2, r3, #27
 800717e:	d407      	bmi.n	8007190 <__swsetup_r+0x30>
 8007180:	2209      	movs	r2, #9
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	e033      	b.n	80071f8 <__swsetup_r+0x98>
 8007190:	0758      	lsls	r0, r3, #29
 8007192:	d512      	bpl.n	80071ba <__swsetup_r+0x5a>
 8007194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007196:	b141      	cbz	r1, 80071aa <__swsetup_r+0x4a>
 8007198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800719c:	4299      	cmp	r1, r3
 800719e:	d002      	beq.n	80071a6 <__swsetup_r+0x46>
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f8af 	bl	8007304 <_free_r>
 80071a6:	2300      	movs	r3, #0
 80071a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	2300      	movs	r3, #0
 80071b4:	6063      	str	r3, [r4, #4]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f043 0308 	orr.w	r3, r3, #8
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	b94b      	cbnz	r3, 80071da <__swsetup_r+0x7a>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d0:	d003      	beq.n	80071da <__swsetup_r+0x7a>
 80071d2:	4621      	mov	r1, r4
 80071d4:	4628      	mov	r0, r5
 80071d6:	f000 fd28 	bl	8007c2a <__smakebuf_r>
 80071da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071de:	f013 0201 	ands.w	r2, r3, #1
 80071e2:	d00a      	beq.n	80071fa <__swsetup_r+0x9a>
 80071e4:	2200      	movs	r2, #0
 80071e6:	60a2      	str	r2, [r4, #8]
 80071e8:	6962      	ldr	r2, [r4, #20]
 80071ea:	4252      	negs	r2, r2
 80071ec:	61a2      	str	r2, [r4, #24]
 80071ee:	6922      	ldr	r2, [r4, #16]
 80071f0:	b942      	cbnz	r2, 8007204 <__swsetup_r+0xa4>
 80071f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071f6:	d1c5      	bne.n	8007184 <__swsetup_r+0x24>
 80071f8:	bd38      	pop	{r3, r4, r5, pc}
 80071fa:	0799      	lsls	r1, r3, #30
 80071fc:	bf58      	it	pl
 80071fe:	6962      	ldrpl	r2, [r4, #20]
 8007200:	60a2      	str	r2, [r4, #8]
 8007202:	e7f4      	b.n	80071ee <__swsetup_r+0x8e>
 8007204:	2000      	movs	r0, #0
 8007206:	e7f7      	b.n	80071f8 <__swsetup_r+0x98>
 8007208:	2000001c 	.word	0x2000001c

0800720c <memset>:
 800720c:	4603      	mov	r3, r0
 800720e:	4402      	add	r2, r0
 8007210:	4293      	cmp	r3, r2
 8007212:	d100      	bne.n	8007216 <memset+0xa>
 8007214:	4770      	bx	lr
 8007216:	f803 1b01 	strb.w	r1, [r3], #1
 800721a:	e7f9      	b.n	8007210 <memset+0x4>

0800721c <_close_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	2300      	movs	r3, #0
 8007220:	4d05      	ldr	r5, [pc, #20]	@ (8007238 <_close_r+0x1c>)
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7f9 fbf3 	bl	8000a12 <_close>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_close_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_close_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20001380 	.word	0x20001380

0800723c <_lseek_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	4611      	mov	r1, r2
 8007244:	2200      	movs	r2, #0
 8007246:	4d05      	ldr	r5, [pc, #20]	@ (800725c <_lseek_r+0x20>)
 8007248:	602a      	str	r2, [r5, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f7f9 fc05 	bl	8000a5a <_lseek>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_lseek_r+0x1e>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_lseek_r+0x1e>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	20001380 	.word	0x20001380

08007260 <_read_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	2200      	movs	r2, #0
 800726a:	4d05      	ldr	r5, [pc, #20]	@ (8007280 <_read_r+0x20>)
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f7f9 fb96 	bl	80009a0 <_read>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_read_r+0x1e>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_read_r+0x1e>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20001380 	.word	0x20001380

08007284 <_write_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	4611      	mov	r1, r2
 800728c:	2200      	movs	r2, #0
 800728e:	4d05      	ldr	r5, [pc, #20]	@ (80072a4 <_write_r+0x20>)
 8007290:	602a      	str	r2, [r5, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	f7f9 fba1 	bl	80009da <_write>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_write_r+0x1e>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_write_r+0x1e>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	20001380 	.word	0x20001380

080072a8 <__errno>:
 80072a8:	4b01      	ldr	r3, [pc, #4]	@ (80072b0 <__errno+0x8>)
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	2000001c 	.word	0x2000001c

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	2600      	movs	r6, #0
 80072b8:	4d0c      	ldr	r5, [pc, #48]	@ (80072ec <__libc_init_array+0x38>)
 80072ba:	4c0d      	ldr	r4, [pc, #52]	@ (80072f0 <__libc_init_array+0x3c>)
 80072bc:	1b64      	subs	r4, r4, r5
 80072be:	10a4      	asrs	r4, r4, #2
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	f000 fd2e 	bl	8007d24 <_init>
 80072c8:	2600      	movs	r6, #0
 80072ca:	4d0a      	ldr	r5, [pc, #40]	@ (80072f4 <__libc_init_array+0x40>)
 80072cc:	4c0a      	ldr	r4, [pc, #40]	@ (80072f8 <__libc_init_array+0x44>)
 80072ce:	1b64      	subs	r4, r4, r5
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	08007f60 	.word	0x08007f60
 80072f0:	08007f60 	.word	0x08007f60
 80072f4:	08007f60 	.word	0x08007f60
 80072f8:	08007f64 	.word	0x08007f64

080072fc <__retarget_lock_init_recursive>:
 80072fc:	4770      	bx	lr

080072fe <__retarget_lock_acquire_recursive>:
 80072fe:	4770      	bx	lr

08007300 <__retarget_lock_release_recursive>:
 8007300:	4770      	bx	lr
	...

08007304 <_free_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4605      	mov	r5, r0
 8007308:	2900      	cmp	r1, #0
 800730a:	d040      	beq.n	800738e <_free_r+0x8a>
 800730c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007310:	1f0c      	subs	r4, r1, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfb8      	it	lt
 8007316:	18e4      	addlt	r4, r4, r3
 8007318:	f000 f8de 	bl	80074d8 <__malloc_lock>
 800731c:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <_free_r+0x8c>)
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	b933      	cbnz	r3, 8007330 <_free_r+0x2c>
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	6014      	str	r4, [r2, #0]
 8007326:	4628      	mov	r0, r5
 8007328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800732c:	f000 b8da 	b.w	80074e4 <__malloc_unlock>
 8007330:	42a3      	cmp	r3, r4
 8007332:	d908      	bls.n	8007346 <_free_r+0x42>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	1821      	adds	r1, r4, r0
 8007338:	428b      	cmp	r3, r1
 800733a:	bf01      	itttt	eq
 800733c:	6819      	ldreq	r1, [r3, #0]
 800733e:	685b      	ldreq	r3, [r3, #4]
 8007340:	1809      	addeq	r1, r1, r0
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	e7ed      	b.n	8007322 <_free_r+0x1e>
 8007346:	461a      	mov	r2, r3
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b10b      	cbz	r3, 8007350 <_free_r+0x4c>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d9fa      	bls.n	8007346 <_free_r+0x42>
 8007350:	6811      	ldr	r1, [r2, #0]
 8007352:	1850      	adds	r0, r2, r1
 8007354:	42a0      	cmp	r0, r4
 8007356:	d10b      	bne.n	8007370 <_free_r+0x6c>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	4401      	add	r1, r0
 800735c:	1850      	adds	r0, r2, r1
 800735e:	4283      	cmp	r3, r0
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	d1e0      	bne.n	8007326 <_free_r+0x22>
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4408      	add	r0, r1
 800736a:	6010      	str	r0, [r2, #0]
 800736c:	6053      	str	r3, [r2, #4]
 800736e:	e7da      	b.n	8007326 <_free_r+0x22>
 8007370:	d902      	bls.n	8007378 <_free_r+0x74>
 8007372:	230c      	movs	r3, #12
 8007374:	602b      	str	r3, [r5, #0]
 8007376:	e7d6      	b.n	8007326 <_free_r+0x22>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	6063      	str	r3, [r4, #4]
 800738a:	6054      	str	r4, [r2, #4]
 800738c:	e7cb      	b.n	8007326 <_free_r+0x22>
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	2000138c 	.word	0x2000138c

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0f      	ldr	r6, [pc, #60]	@ (80073d4 <sbrk_aligned+0x40>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f000 fca2 	bl	8007ce8 <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 fc9d 	bl	8007ce8 <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <sbrk_aligned+0x26>
 80073b2:	f04f 34ff 	mov.w	r4, #4294967295
 80073b6:	4620      	mov	r0, r4
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0f8      	beq.n	80073b6 <sbrk_aligned+0x22>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 fc8e 	bl	8007ce8 <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1f2      	bne.n	80073b6 <sbrk_aligned+0x22>
 80073d0:	e7ef      	b.n	80073b2 <sbrk_aligned+0x1e>
 80073d2:	bf00      	nop
 80073d4:	20001388 	.word	0x20001388

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4606      	mov	r6, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d904      	bls.n	80073fe <_malloc_r+0x26>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d4 <_malloc_r+0xfc>
 8007402:	f000 f869 	bl	80074d8 <__malloc_lock>
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	461c      	mov	r4, r3
 800740c:	bb44      	cbnz	r4, 8007460 <_malloc_r+0x88>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbf 	bl	8007394 <sbrk_aligned>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	4604      	mov	r4, r0
 800741a:	d158      	bne.n	80074ce <_malloc_r+0xf6>
 800741c:	f8d8 4000 	ldr.w	r4, [r8]
 8007420:	4627      	mov	r7, r4
 8007422:	2f00      	cmp	r7, #0
 8007424:	d143      	bne.n	80074ae <_malloc_r+0xd6>
 8007426:	2c00      	cmp	r4, #0
 8007428:	d04b      	beq.n	80074c2 <_malloc_r+0xea>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	eb04 0903 	add.w	r9, r4, r3
 8007434:	f000 fc58 	bl	8007ce8 <_sbrk_r>
 8007438:	4581      	cmp	r9, r0
 800743a:	d142      	bne.n	80074c2 <_malloc_r+0xea>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	4630      	mov	r0, r6
 8007440:	1a6d      	subs	r5, r5, r1
 8007442:	4629      	mov	r1, r5
 8007444:	f7ff ffa6 	bl	8007394 <sbrk_aligned>
 8007448:	3001      	adds	r0, #1
 800744a:	d03a      	beq.n	80074c2 <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	442b      	add	r3, r5
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f8d8 3000 	ldr.w	r3, [r8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	bb62      	cbnz	r2, 80074b4 <_malloc_r+0xdc>
 800745a:	f8c8 7000 	str.w	r7, [r8]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xa8>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d420      	bmi.n	80074a8 <_malloc_r+0xd0>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xc2>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f82f 	bl	80074e4 <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	bf1c      	itt	ne
 8007494:	1a1b      	subne	r3, r3, r0
 8007496:	50a3      	strne	r3, [r4, r2]
 8007498:	e7af      	b.n	80073fa <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	f8c8 2000 	streq.w	r2, [r8]
 80074a4:	605a      	strne	r2, [r3, #4]
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0xa8>
 80074a8:	4623      	mov	r3, r4
 80074aa:	6864      	ldr	r4, [r4, #4]
 80074ac:	e7ae      	b.n	800740c <_malloc_r+0x34>
 80074ae:	463c      	mov	r4, r7
 80074b0:	687f      	ldr	r7, [r7, #4]
 80074b2:	e7b6      	b.n	8007422 <_malloc_r+0x4a>
 80074b4:	461a      	mov	r2, r3
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d1fb      	bne.n	80074b4 <_malloc_r+0xdc>
 80074bc:	2300      	movs	r3, #0
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa8>
 80074c2:	230c      	movs	r3, #12
 80074c4:	4630      	mov	r0, r6
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	f000 f80c 	bl	80074e4 <__malloc_unlock>
 80074cc:	e794      	b.n	80073f8 <_malloc_r+0x20>
 80074ce:	6005      	str	r5, [r0, #0]
 80074d0:	e7d6      	b.n	8007480 <_malloc_r+0xa8>
 80074d2:	bf00      	nop
 80074d4:	2000138c 	.word	0x2000138c

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff bf10 	b.w	80072fe <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	20001384 	.word	0x20001384

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	@ (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff bf0b 	b.w	8007300 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	20001384 	.word	0x20001384

080074f0 <__sfputc_r>:
 80074f0:	6893      	ldr	r3, [r2, #8]
 80074f2:	b410      	push	{r4}
 80074f4:	3b01      	subs	r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	6093      	str	r3, [r2, #8]
 80074fa:	da07      	bge.n	800750c <__sfputc_r+0x1c>
 80074fc:	6994      	ldr	r4, [r2, #24]
 80074fe:	42a3      	cmp	r3, r4
 8007500:	db01      	blt.n	8007506 <__sfputc_r+0x16>
 8007502:	290a      	cmp	r1, #10
 8007504:	d102      	bne.n	800750c <__sfputc_r+0x1c>
 8007506:	bc10      	pop	{r4}
 8007508:	f7ff bdeb 	b.w	80070e2 <__swbuf_r>
 800750c:	6813      	ldr	r3, [r2, #0]
 800750e:	1c58      	adds	r0, r3, #1
 8007510:	6010      	str	r0, [r2, #0]
 8007512:	7019      	strb	r1, [r3, #0]
 8007514:	4608      	mov	r0, r1
 8007516:	bc10      	pop	{r4}
 8007518:	4770      	bx	lr

0800751a <__sfputs_r>:
 800751a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751c:	4606      	mov	r6, r0
 800751e:	460f      	mov	r7, r1
 8007520:	4614      	mov	r4, r2
 8007522:	18d5      	adds	r5, r2, r3
 8007524:	42ac      	cmp	r4, r5
 8007526:	d101      	bne.n	800752c <__sfputs_r+0x12>
 8007528:	2000      	movs	r0, #0
 800752a:	e007      	b.n	800753c <__sfputs_r+0x22>
 800752c:	463a      	mov	r2, r7
 800752e:	4630      	mov	r0, r6
 8007530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007534:	f7ff ffdc 	bl	80074f0 <__sfputc_r>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d1f3      	bne.n	8007524 <__sfputs_r+0xa>
 800753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007540 <_vfiprintf_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	460d      	mov	r5, r1
 8007546:	4614      	mov	r4, r2
 8007548:	4698      	mov	r8, r3
 800754a:	4606      	mov	r6, r0
 800754c:	b09d      	sub	sp, #116	@ 0x74
 800754e:	b118      	cbz	r0, 8007558 <_vfiprintf_r+0x18>
 8007550:	6a03      	ldr	r3, [r0, #32]
 8007552:	b90b      	cbnz	r3, 8007558 <_vfiprintf_r+0x18>
 8007554:	f7ff fcdc 	bl	8006f10 <__sinit>
 8007558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800755a:	07d9      	lsls	r1, r3, #31
 800755c:	d405      	bmi.n	800756a <_vfiprintf_r+0x2a>
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	059a      	lsls	r2, r3, #22
 8007562:	d402      	bmi.n	800756a <_vfiprintf_r+0x2a>
 8007564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007566:	f7ff feca 	bl	80072fe <__retarget_lock_acquire_recursive>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	071b      	lsls	r3, r3, #28
 800756e:	d501      	bpl.n	8007574 <_vfiprintf_r+0x34>
 8007570:	692b      	ldr	r3, [r5, #16]
 8007572:	b99b      	cbnz	r3, 800759c <_vfiprintf_r+0x5c>
 8007574:	4629      	mov	r1, r5
 8007576:	4630      	mov	r0, r6
 8007578:	f7ff fdf2 	bl	8007160 <__swsetup_r>
 800757c:	b170      	cbz	r0, 800759c <_vfiprintf_r+0x5c>
 800757e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007580:	07dc      	lsls	r4, r3, #31
 8007582:	d504      	bpl.n	800758e <_vfiprintf_r+0x4e>
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	b01d      	add	sp, #116	@ 0x74
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	89ab      	ldrh	r3, [r5, #12]
 8007590:	0598      	lsls	r0, r3, #22
 8007592:	d4f7      	bmi.n	8007584 <_vfiprintf_r+0x44>
 8007594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007596:	f7ff feb3 	bl	8007300 <__retarget_lock_release_recursive>
 800759a:	e7f3      	b.n	8007584 <_vfiprintf_r+0x44>
 800759c:	2300      	movs	r3, #0
 800759e:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a0:	2320      	movs	r3, #32
 80075a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075a6:	2330      	movs	r3, #48	@ 0x30
 80075a8:	f04f 0901 	mov.w	r9, #1
 80075ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80075b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800775c <_vfiprintf_r+0x21c>
 80075b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075b8:	4623      	mov	r3, r4
 80075ba:	469a      	mov	sl, r3
 80075bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c0:	b10a      	cbz	r2, 80075c6 <_vfiprintf_r+0x86>
 80075c2:	2a25      	cmp	r2, #37	@ 0x25
 80075c4:	d1f9      	bne.n	80075ba <_vfiprintf_r+0x7a>
 80075c6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ca:	d00b      	beq.n	80075e4 <_vfiprintf_r+0xa4>
 80075cc:	465b      	mov	r3, fp
 80075ce:	4622      	mov	r2, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ffa1 	bl	800751a <__sfputs_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	f000 80a7 	beq.w	800772c <_vfiprintf_r+0x1ec>
 80075de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075e0:	445a      	add	r2, fp
 80075e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80075e4:	f89a 3000 	ldrb.w	r3, [sl]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 809f 	beq.w	800772c <_vfiprintf_r+0x1ec>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295
 80075f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f8:	f10a 0a01 	add.w	sl, sl, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007604:	931a      	str	r3, [sp, #104]	@ 0x68
 8007606:	4654      	mov	r4, sl
 8007608:	2205      	movs	r2, #5
 800760a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760e:	4853      	ldr	r0, [pc, #332]	@ (800775c <_vfiprintf_r+0x21c>)
 8007610:	f000 fb7a 	bl	8007d08 <memchr>
 8007614:	9a04      	ldr	r2, [sp, #16]
 8007616:	b9d8      	cbnz	r0, 8007650 <_vfiprintf_r+0x110>
 8007618:	06d1      	lsls	r1, r2, #27
 800761a:	bf44      	itt	mi
 800761c:	2320      	movmi	r3, #32
 800761e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007622:	0713      	lsls	r3, r2, #28
 8007624:	bf44      	itt	mi
 8007626:	232b      	movmi	r3, #43	@ 0x2b
 8007628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800762c:	f89a 3000 	ldrb.w	r3, [sl]
 8007630:	2b2a      	cmp	r3, #42	@ 0x2a
 8007632:	d015      	beq.n	8007660 <_vfiprintf_r+0x120>
 8007634:	4654      	mov	r4, sl
 8007636:	2000      	movs	r0, #0
 8007638:	f04f 0c0a 	mov.w	ip, #10
 800763c:	9a07      	ldr	r2, [sp, #28]
 800763e:	4621      	mov	r1, r4
 8007640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007644:	3b30      	subs	r3, #48	@ 0x30
 8007646:	2b09      	cmp	r3, #9
 8007648:	d94b      	bls.n	80076e2 <_vfiprintf_r+0x1a2>
 800764a:	b1b0      	cbz	r0, 800767a <_vfiprintf_r+0x13a>
 800764c:	9207      	str	r2, [sp, #28]
 800764e:	e014      	b.n	800767a <_vfiprintf_r+0x13a>
 8007650:	eba0 0308 	sub.w	r3, r0, r8
 8007654:	fa09 f303 	lsl.w	r3, r9, r3
 8007658:	4313      	orrs	r3, r2
 800765a:	46a2      	mov	sl, r4
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	e7d2      	b.n	8007606 <_vfiprintf_r+0xc6>
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	1d19      	adds	r1, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	9103      	str	r1, [sp, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfbb      	ittet	lt
 800766c:	425b      	neglt	r3, r3
 800766e:	f042 0202 	orrlt.w	r2, r2, #2
 8007672:	9307      	strge	r3, [sp, #28]
 8007674:	9307      	strlt	r3, [sp, #28]
 8007676:	bfb8      	it	lt
 8007678:	9204      	strlt	r2, [sp, #16]
 800767a:	7823      	ldrb	r3, [r4, #0]
 800767c:	2b2e      	cmp	r3, #46	@ 0x2e
 800767e:	d10a      	bne.n	8007696 <_vfiprintf_r+0x156>
 8007680:	7863      	ldrb	r3, [r4, #1]
 8007682:	2b2a      	cmp	r3, #42	@ 0x2a
 8007684:	d132      	bne.n	80076ec <_vfiprintf_r+0x1ac>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	3402      	adds	r4, #2
 800768a:	1d1a      	adds	r2, r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	9203      	str	r2, [sp, #12]
 8007690:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007760 <_vfiprintf_r+0x220>
 800769a:	2203      	movs	r2, #3
 800769c:	4650      	mov	r0, sl
 800769e:	7821      	ldrb	r1, [r4, #0]
 80076a0:	f000 fb32 	bl	8007d08 <memchr>
 80076a4:	b138      	cbz	r0, 80076b6 <_vfiprintf_r+0x176>
 80076a6:	2240      	movs	r2, #64	@ 0x40
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	eba0 000a 	sub.w	r0, r0, sl
 80076ae:	4082      	lsls	r2, r0
 80076b0:	4313      	orrs	r3, r2
 80076b2:	3401      	adds	r4, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ba:	2206      	movs	r2, #6
 80076bc:	4829      	ldr	r0, [pc, #164]	@ (8007764 <_vfiprintf_r+0x224>)
 80076be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076c2:	f000 fb21 	bl	8007d08 <memchr>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d03f      	beq.n	800774a <_vfiprintf_r+0x20a>
 80076ca:	4b27      	ldr	r3, [pc, #156]	@ (8007768 <_vfiprintf_r+0x228>)
 80076cc:	bb1b      	cbnz	r3, 8007716 <_vfiprintf_r+0x1d6>
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	3307      	adds	r3, #7
 80076d2:	f023 0307 	bic.w	r3, r3, #7
 80076d6:	3308      	adds	r3, #8
 80076d8:	9303      	str	r3, [sp, #12]
 80076da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076dc:	443b      	add	r3, r7
 80076de:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e0:	e76a      	b.n	80075b8 <_vfiprintf_r+0x78>
 80076e2:	460c      	mov	r4, r1
 80076e4:	2001      	movs	r0, #1
 80076e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ea:	e7a8      	b.n	800763e <_vfiprintf_r+0xfe>
 80076ec:	2300      	movs	r3, #0
 80076ee:	f04f 0c0a 	mov.w	ip, #10
 80076f2:	4619      	mov	r1, r3
 80076f4:	3401      	adds	r4, #1
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fe:	3a30      	subs	r2, #48	@ 0x30
 8007700:	2a09      	cmp	r2, #9
 8007702:	d903      	bls.n	800770c <_vfiprintf_r+0x1cc>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0c6      	beq.n	8007696 <_vfiprintf_r+0x156>
 8007708:	9105      	str	r1, [sp, #20]
 800770a:	e7c4      	b.n	8007696 <_vfiprintf_r+0x156>
 800770c:	4604      	mov	r4, r0
 800770e:	2301      	movs	r3, #1
 8007710:	fb0c 2101 	mla	r1, ip, r1, r2
 8007714:	e7f0      	b.n	80076f8 <_vfiprintf_r+0x1b8>
 8007716:	ab03      	add	r3, sp, #12
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	462a      	mov	r2, r5
 800771c:	4630      	mov	r0, r6
 800771e:	4b13      	ldr	r3, [pc, #76]	@ (800776c <_vfiprintf_r+0x22c>)
 8007720:	a904      	add	r1, sp, #16
 8007722:	f3af 8000 	nop.w
 8007726:	4607      	mov	r7, r0
 8007728:	1c78      	adds	r0, r7, #1
 800772a:	d1d6      	bne.n	80076da <_vfiprintf_r+0x19a>
 800772c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800772e:	07d9      	lsls	r1, r3, #31
 8007730:	d405      	bmi.n	800773e <_vfiprintf_r+0x1fe>
 8007732:	89ab      	ldrh	r3, [r5, #12]
 8007734:	059a      	lsls	r2, r3, #22
 8007736:	d402      	bmi.n	800773e <_vfiprintf_r+0x1fe>
 8007738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800773a:	f7ff fde1 	bl	8007300 <__retarget_lock_release_recursive>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	065b      	lsls	r3, r3, #25
 8007742:	f53f af1f 	bmi.w	8007584 <_vfiprintf_r+0x44>
 8007746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007748:	e71e      	b.n	8007588 <_vfiprintf_r+0x48>
 800774a:	ab03      	add	r3, sp, #12
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	462a      	mov	r2, r5
 8007750:	4630      	mov	r0, r6
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <_vfiprintf_r+0x22c>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	f000 f87d 	bl	8007854 <_printf_i>
 800775a:	e7e4      	b.n	8007726 <_vfiprintf_r+0x1e6>
 800775c:	08007f2a 	.word	0x08007f2a
 8007760:	08007f30 	.word	0x08007f30
 8007764:	08007f34 	.word	0x08007f34
 8007768:	00000000 	.word	0x00000000
 800776c:	0800751b 	.word	0x0800751b

08007770 <_printf_common>:
 8007770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	4616      	mov	r6, r2
 8007776:	4698      	mov	r8, r3
 8007778:	688a      	ldr	r2, [r1, #8]
 800777a:	690b      	ldr	r3, [r1, #16]
 800777c:	4607      	mov	r7, r0
 800777e:	4293      	cmp	r3, r2
 8007780:	bfb8      	it	lt
 8007782:	4613      	movlt	r3, r2
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800778a:	460c      	mov	r4, r1
 800778c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007790:	b10a      	cbz	r2, 8007796 <_printf_common+0x26>
 8007792:	3301      	adds	r3, #1
 8007794:	6033      	str	r3, [r6, #0]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	0699      	lsls	r1, r3, #26
 800779a:	bf42      	ittt	mi
 800779c:	6833      	ldrmi	r3, [r6, #0]
 800779e:	3302      	addmi	r3, #2
 80077a0:	6033      	strmi	r3, [r6, #0]
 80077a2:	6825      	ldr	r5, [r4, #0]
 80077a4:	f015 0506 	ands.w	r5, r5, #6
 80077a8:	d106      	bne.n	80077b8 <_printf_common+0x48>
 80077aa:	f104 0a19 	add.w	sl, r4, #25
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	6832      	ldr	r2, [r6, #0]
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	dc2b      	bgt.n	8007810 <_printf_common+0xa0>
 80077b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	3b00      	subs	r3, #0
 80077c0:	bf18      	it	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	0692      	lsls	r2, r2, #26
 80077c6:	d430      	bmi.n	800782a <_printf_common+0xba>
 80077c8:	4641      	mov	r1, r8
 80077ca:	4638      	mov	r0, r7
 80077cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077d0:	47c8      	blx	r9
 80077d2:	3001      	adds	r0, #1
 80077d4:	d023      	beq.n	800781e <_printf_common+0xae>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	6922      	ldr	r2, [r4, #16]
 80077da:	f003 0306 	and.w	r3, r3, #6
 80077de:	2b04      	cmp	r3, #4
 80077e0:	bf14      	ite	ne
 80077e2:	2500      	movne	r5, #0
 80077e4:	6833      	ldreq	r3, [r6, #0]
 80077e6:	f04f 0600 	mov.w	r6, #0
 80077ea:	bf08      	it	eq
 80077ec:	68e5      	ldreq	r5, [r4, #12]
 80077ee:	f104 041a 	add.w	r4, r4, #26
 80077f2:	bf08      	it	eq
 80077f4:	1aed      	subeq	r5, r5, r3
 80077f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80077fa:	bf08      	it	eq
 80077fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007800:	4293      	cmp	r3, r2
 8007802:	bfc4      	itt	gt
 8007804:	1a9b      	subgt	r3, r3, r2
 8007806:	18ed      	addgt	r5, r5, r3
 8007808:	42b5      	cmp	r5, r6
 800780a:	d11a      	bne.n	8007842 <_printf_common+0xd2>
 800780c:	2000      	movs	r0, #0
 800780e:	e008      	b.n	8007822 <_printf_common+0xb2>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4641      	mov	r1, r8
 8007816:	4638      	mov	r0, r7
 8007818:	47c8      	blx	r9
 800781a:	3001      	adds	r0, #1
 800781c:	d103      	bne.n	8007826 <_printf_common+0xb6>
 800781e:	f04f 30ff 	mov.w	r0, #4294967295
 8007822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007826:	3501      	adds	r5, #1
 8007828:	e7c1      	b.n	80077ae <_printf_common+0x3e>
 800782a:	2030      	movs	r0, #48	@ 0x30
 800782c:	18e1      	adds	r1, r4, r3
 800782e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007838:	4422      	add	r2, r4
 800783a:	3302      	adds	r3, #2
 800783c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007840:	e7c2      	b.n	80077c8 <_printf_common+0x58>
 8007842:	2301      	movs	r3, #1
 8007844:	4622      	mov	r2, r4
 8007846:	4641      	mov	r1, r8
 8007848:	4638      	mov	r0, r7
 800784a:	47c8      	blx	r9
 800784c:	3001      	adds	r0, #1
 800784e:	d0e6      	beq.n	800781e <_printf_common+0xae>
 8007850:	3601      	adds	r6, #1
 8007852:	e7d9      	b.n	8007808 <_printf_common+0x98>

08007854 <_printf_i>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	7e0f      	ldrb	r7, [r1, #24]
 800785a:	4691      	mov	r9, r2
 800785c:	2f78      	cmp	r7, #120	@ 0x78
 800785e:	4680      	mov	r8, r0
 8007860:	460c      	mov	r4, r1
 8007862:	469a      	mov	sl, r3
 8007864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800786a:	d807      	bhi.n	800787c <_printf_i+0x28>
 800786c:	2f62      	cmp	r7, #98	@ 0x62
 800786e:	d80a      	bhi.n	8007886 <_printf_i+0x32>
 8007870:	2f00      	cmp	r7, #0
 8007872:	f000 80d1 	beq.w	8007a18 <_printf_i+0x1c4>
 8007876:	2f58      	cmp	r7, #88	@ 0x58
 8007878:	f000 80b8 	beq.w	80079ec <_printf_i+0x198>
 800787c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007884:	e03a      	b.n	80078fc <_printf_i+0xa8>
 8007886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800788a:	2b15      	cmp	r3, #21
 800788c:	d8f6      	bhi.n	800787c <_printf_i+0x28>
 800788e:	a101      	add	r1, pc, #4	@ (adr r1, 8007894 <_printf_i+0x40>)
 8007890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007894:	080078ed 	.word	0x080078ed
 8007898:	08007901 	.word	0x08007901
 800789c:	0800787d 	.word	0x0800787d
 80078a0:	0800787d 	.word	0x0800787d
 80078a4:	0800787d 	.word	0x0800787d
 80078a8:	0800787d 	.word	0x0800787d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800787d 	.word	0x0800787d
 80078b4:	0800787d 	.word	0x0800787d
 80078b8:	0800787d 	.word	0x0800787d
 80078bc:	0800787d 	.word	0x0800787d
 80078c0:	080079ff 	.word	0x080079ff
 80078c4:	0800792b 	.word	0x0800792b
 80078c8:	080079b9 	.word	0x080079b9
 80078cc:	0800787d 	.word	0x0800787d
 80078d0:	0800787d 	.word	0x0800787d
 80078d4:	08007a21 	.word	0x08007a21
 80078d8:	0800787d 	.word	0x0800787d
 80078dc:	0800792b 	.word	0x0800792b
 80078e0:	0800787d 	.word	0x0800787d
 80078e4:	0800787d 	.word	0x0800787d
 80078e8:	080079c1 	.word	0x080079c1
 80078ec:	6833      	ldr	r3, [r6, #0]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6032      	str	r2, [r6, #0]
 80078f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078fc:	2301      	movs	r3, #1
 80078fe:	e09c      	b.n	8007a3a <_printf_i+0x1e6>
 8007900:	6833      	ldr	r3, [r6, #0]
 8007902:	6820      	ldr	r0, [r4, #0]
 8007904:	1d19      	adds	r1, r3, #4
 8007906:	6031      	str	r1, [r6, #0]
 8007908:	0606      	lsls	r6, r0, #24
 800790a:	d501      	bpl.n	8007910 <_printf_i+0xbc>
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	e003      	b.n	8007918 <_printf_i+0xc4>
 8007910:	0645      	lsls	r5, r0, #25
 8007912:	d5fb      	bpl.n	800790c <_printf_i+0xb8>
 8007914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007918:	2d00      	cmp	r5, #0
 800791a:	da03      	bge.n	8007924 <_printf_i+0xd0>
 800791c:	232d      	movs	r3, #45	@ 0x2d
 800791e:	426d      	negs	r5, r5
 8007920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007924:	230a      	movs	r3, #10
 8007926:	4858      	ldr	r0, [pc, #352]	@ (8007a88 <_printf_i+0x234>)
 8007928:	e011      	b.n	800794e <_printf_i+0xfa>
 800792a:	6821      	ldr	r1, [r4, #0]
 800792c:	6833      	ldr	r3, [r6, #0]
 800792e:	0608      	lsls	r0, r1, #24
 8007930:	f853 5b04 	ldr.w	r5, [r3], #4
 8007934:	d402      	bmi.n	800793c <_printf_i+0xe8>
 8007936:	0649      	lsls	r1, r1, #25
 8007938:	bf48      	it	mi
 800793a:	b2ad      	uxthmi	r5, r5
 800793c:	2f6f      	cmp	r7, #111	@ 0x6f
 800793e:	6033      	str	r3, [r6, #0]
 8007940:	bf14      	ite	ne
 8007942:	230a      	movne	r3, #10
 8007944:	2308      	moveq	r3, #8
 8007946:	4850      	ldr	r0, [pc, #320]	@ (8007a88 <_printf_i+0x234>)
 8007948:	2100      	movs	r1, #0
 800794a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800794e:	6866      	ldr	r6, [r4, #4]
 8007950:	2e00      	cmp	r6, #0
 8007952:	60a6      	str	r6, [r4, #8]
 8007954:	db05      	blt.n	8007962 <_printf_i+0x10e>
 8007956:	6821      	ldr	r1, [r4, #0]
 8007958:	432e      	orrs	r6, r5
 800795a:	f021 0104 	bic.w	r1, r1, #4
 800795e:	6021      	str	r1, [r4, #0]
 8007960:	d04b      	beq.n	80079fa <_printf_i+0x1a6>
 8007962:	4616      	mov	r6, r2
 8007964:	fbb5 f1f3 	udiv	r1, r5, r3
 8007968:	fb03 5711 	mls	r7, r3, r1, r5
 800796c:	5dc7      	ldrb	r7, [r0, r7]
 800796e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007972:	462f      	mov	r7, r5
 8007974:	42bb      	cmp	r3, r7
 8007976:	460d      	mov	r5, r1
 8007978:	d9f4      	bls.n	8007964 <_printf_i+0x110>
 800797a:	2b08      	cmp	r3, #8
 800797c:	d10b      	bne.n	8007996 <_printf_i+0x142>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	07df      	lsls	r7, r3, #31
 8007982:	d508      	bpl.n	8007996 <_printf_i+0x142>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	6861      	ldr	r1, [r4, #4]
 8007988:	4299      	cmp	r1, r3
 800798a:	bfde      	ittt	le
 800798c:	2330      	movle	r3, #48	@ 0x30
 800798e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007996:	1b92      	subs	r2, r2, r6
 8007998:	6122      	str	r2, [r4, #16]
 800799a:	464b      	mov	r3, r9
 800799c:	4621      	mov	r1, r4
 800799e:	4640      	mov	r0, r8
 80079a0:	f8cd a000 	str.w	sl, [sp]
 80079a4:	aa03      	add	r2, sp, #12
 80079a6:	f7ff fee3 	bl	8007770 <_printf_common>
 80079aa:	3001      	adds	r0, #1
 80079ac:	d14a      	bne.n	8007a44 <_printf_i+0x1f0>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	b004      	add	sp, #16
 80079b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	f043 0320 	orr.w	r3, r3, #32
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	2778      	movs	r7, #120	@ 0x78
 80079c2:	4832      	ldr	r0, [pc, #200]	@ (8007a8c <_printf_i+0x238>)
 80079c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	6831      	ldr	r1, [r6, #0]
 80079cc:	061f      	lsls	r7, r3, #24
 80079ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80079d2:	d402      	bmi.n	80079da <_printf_i+0x186>
 80079d4:	065f      	lsls	r7, r3, #25
 80079d6:	bf48      	it	mi
 80079d8:	b2ad      	uxthmi	r5, r5
 80079da:	6031      	str	r1, [r6, #0]
 80079dc:	07d9      	lsls	r1, r3, #31
 80079de:	bf44      	itt	mi
 80079e0:	f043 0320 	orrmi.w	r3, r3, #32
 80079e4:	6023      	strmi	r3, [r4, #0]
 80079e6:	b11d      	cbz	r5, 80079f0 <_printf_i+0x19c>
 80079e8:	2310      	movs	r3, #16
 80079ea:	e7ad      	b.n	8007948 <_printf_i+0xf4>
 80079ec:	4826      	ldr	r0, [pc, #152]	@ (8007a88 <_printf_i+0x234>)
 80079ee:	e7e9      	b.n	80079c4 <_printf_i+0x170>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	f023 0320 	bic.w	r3, r3, #32
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	e7f6      	b.n	80079e8 <_printf_i+0x194>
 80079fa:	4616      	mov	r6, r2
 80079fc:	e7bd      	b.n	800797a <_printf_i+0x126>
 80079fe:	6833      	ldr	r3, [r6, #0]
 8007a00:	6825      	ldr	r5, [r4, #0]
 8007a02:	1d18      	adds	r0, r3, #4
 8007a04:	6961      	ldr	r1, [r4, #20]
 8007a06:	6030      	str	r0, [r6, #0]
 8007a08:	062e      	lsls	r6, r5, #24
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	d501      	bpl.n	8007a12 <_printf_i+0x1be>
 8007a0e:	6019      	str	r1, [r3, #0]
 8007a10:	e002      	b.n	8007a18 <_printf_i+0x1c4>
 8007a12:	0668      	lsls	r0, r5, #25
 8007a14:	d5fb      	bpl.n	8007a0e <_printf_i+0x1ba>
 8007a16:	8019      	strh	r1, [r3, #0]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4616      	mov	r6, r2
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	e7bc      	b.n	800799a <_printf_i+0x146>
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	2100      	movs	r1, #0
 8007a24:	1d1a      	adds	r2, r3, #4
 8007a26:	6032      	str	r2, [r6, #0]
 8007a28:	681e      	ldr	r6, [r3, #0]
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 f96b 	bl	8007d08 <memchr>
 8007a32:	b108      	cbz	r0, 8007a38 <_printf_i+0x1e4>
 8007a34:	1b80      	subs	r0, r0, r6
 8007a36:	6060      	str	r0, [r4, #4]
 8007a38:	6863      	ldr	r3, [r4, #4]
 8007a3a:	6123      	str	r3, [r4, #16]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a42:	e7aa      	b.n	800799a <_printf_i+0x146>
 8007a44:	4632      	mov	r2, r6
 8007a46:	4649      	mov	r1, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	47d0      	blx	sl
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d0ad      	beq.n	80079ae <_printf_i+0x15a>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	079b      	lsls	r3, r3, #30
 8007a56:	d413      	bmi.n	8007a80 <_printf_i+0x22c>
 8007a58:	68e0      	ldr	r0, [r4, #12]
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	4298      	cmp	r0, r3
 8007a5e:	bfb8      	it	lt
 8007a60:	4618      	movlt	r0, r3
 8007a62:	e7a6      	b.n	80079b2 <_printf_i+0x15e>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4632      	mov	r2, r6
 8007a68:	4649      	mov	r1, r9
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	47d0      	blx	sl
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d09d      	beq.n	80079ae <_printf_i+0x15a>
 8007a72:	3501      	adds	r5, #1
 8007a74:	68e3      	ldr	r3, [r4, #12]
 8007a76:	9903      	ldr	r1, [sp, #12]
 8007a78:	1a5b      	subs	r3, r3, r1
 8007a7a:	42ab      	cmp	r3, r5
 8007a7c:	dcf2      	bgt.n	8007a64 <_printf_i+0x210>
 8007a7e:	e7eb      	b.n	8007a58 <_printf_i+0x204>
 8007a80:	2500      	movs	r5, #0
 8007a82:	f104 0619 	add.w	r6, r4, #25
 8007a86:	e7f5      	b.n	8007a74 <_printf_i+0x220>
 8007a88:	08007f3b 	.word	0x08007f3b
 8007a8c:	08007f4c 	.word	0x08007f4c

08007a90 <__sflush_r>:
 8007a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	0716      	lsls	r6, r2, #28
 8007a98:	4605      	mov	r5, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	d454      	bmi.n	8007b48 <__sflush_r+0xb8>
 8007a9e:	684b      	ldr	r3, [r1, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc02      	bgt.n	8007aaa <__sflush_r+0x1a>
 8007aa4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dd48      	ble.n	8007b3c <__sflush_r+0xac>
 8007aaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	d045      	beq.n	8007b3c <__sflush_r+0xac>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ab6:	682f      	ldr	r7, [r5, #0]
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	602b      	str	r3, [r5, #0]
 8007abc:	d030      	beq.n	8007b20 <__sflush_r+0x90>
 8007abe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	0759      	lsls	r1, r3, #29
 8007ac4:	d505      	bpl.n	8007ad2 <__sflush_r+0x42>
 8007ac6:	6863      	ldr	r3, [r4, #4]
 8007ac8:	1ad2      	subs	r2, r2, r3
 8007aca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007acc:	b10b      	cbz	r3, 8007ad2 <__sflush_r+0x42>
 8007ace:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ad8:	6a21      	ldr	r1, [r4, #32]
 8007ada:	47b0      	blx	r6
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	d106      	bne.n	8007af0 <__sflush_r+0x60>
 8007ae2:	6829      	ldr	r1, [r5, #0]
 8007ae4:	291d      	cmp	r1, #29
 8007ae6:	d82b      	bhi.n	8007b40 <__sflush_r+0xb0>
 8007ae8:	4a28      	ldr	r2, [pc, #160]	@ (8007b8c <__sflush_r+0xfc>)
 8007aea:	40ca      	lsrs	r2, r1
 8007aec:	07d6      	lsls	r6, r2, #31
 8007aee:	d527      	bpl.n	8007b40 <__sflush_r+0xb0>
 8007af0:	2200      	movs	r2, #0
 8007af2:	6062      	str	r2, [r4, #4]
 8007af4:	6922      	ldr	r2, [r4, #16]
 8007af6:	04d9      	lsls	r1, r3, #19
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	d504      	bpl.n	8007b06 <__sflush_r+0x76>
 8007afc:	1c42      	adds	r2, r0, #1
 8007afe:	d101      	bne.n	8007b04 <__sflush_r+0x74>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b903      	cbnz	r3, 8007b06 <__sflush_r+0x76>
 8007b04:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b08:	602f      	str	r7, [r5, #0]
 8007b0a:	b1b9      	cbz	r1, 8007b3c <__sflush_r+0xac>
 8007b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b10:	4299      	cmp	r1, r3
 8007b12:	d002      	beq.n	8007b1a <__sflush_r+0x8a>
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7ff fbf5 	bl	8007304 <_free_r>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b1e:	e00d      	b.n	8007b3c <__sflush_r+0xac>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	4602      	mov	r2, r0
 8007b28:	1c50      	adds	r0, r2, #1
 8007b2a:	d1c9      	bne.n	8007ac0 <__sflush_r+0x30>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0c6      	beq.n	8007ac0 <__sflush_r+0x30>
 8007b32:	2b1d      	cmp	r3, #29
 8007b34:	d001      	beq.n	8007b3a <__sflush_r+0xaa>
 8007b36:	2b16      	cmp	r3, #22
 8007b38:	d11d      	bne.n	8007b76 <__sflush_r+0xe6>
 8007b3a:	602f      	str	r7, [r5, #0]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e021      	b.n	8007b84 <__sflush_r+0xf4>
 8007b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b44:	b21b      	sxth	r3, r3
 8007b46:	e01a      	b.n	8007b7e <__sflush_r+0xee>
 8007b48:	690f      	ldr	r7, [r1, #16]
 8007b4a:	2f00      	cmp	r7, #0
 8007b4c:	d0f6      	beq.n	8007b3c <__sflush_r+0xac>
 8007b4e:	0793      	lsls	r3, r2, #30
 8007b50:	bf18      	it	ne
 8007b52:	2300      	movne	r3, #0
 8007b54:	680e      	ldr	r6, [r1, #0]
 8007b56:	bf08      	it	eq
 8007b58:	694b      	ldreq	r3, [r1, #20]
 8007b5a:	1bf6      	subs	r6, r6, r7
 8007b5c:	600f      	str	r7, [r1, #0]
 8007b5e:	608b      	str	r3, [r1, #8]
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	ddeb      	ble.n	8007b3c <__sflush_r+0xac>
 8007b64:	4633      	mov	r3, r6
 8007b66:	463a      	mov	r2, r7
 8007b68:	4628      	mov	r0, r5
 8007b6a:	6a21      	ldr	r1, [r4, #32]
 8007b6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007b70:	47e0      	blx	ip
 8007b72:	2800      	cmp	r0, #0
 8007b74:	dc07      	bgt.n	8007b86 <__sflush_r+0xf6>
 8007b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b86:	4407      	add	r7, r0
 8007b88:	1a36      	subs	r6, r6, r0
 8007b8a:	e7e9      	b.n	8007b60 <__sflush_r+0xd0>
 8007b8c:	20400001 	.word	0x20400001

08007b90 <_fflush_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	690b      	ldr	r3, [r1, #16]
 8007b94:	4605      	mov	r5, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	b913      	cbnz	r3, 8007ba0 <_fflush_r+0x10>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	b118      	cbz	r0, 8007baa <_fflush_r+0x1a>
 8007ba2:	6a03      	ldr	r3, [r0, #32]
 8007ba4:	b90b      	cbnz	r3, 8007baa <_fflush_r+0x1a>
 8007ba6:	f7ff f9b3 	bl	8006f10 <__sinit>
 8007baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0f3      	beq.n	8007b9a <_fflush_r+0xa>
 8007bb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bb4:	07d0      	lsls	r0, r2, #31
 8007bb6:	d404      	bmi.n	8007bc2 <_fflush_r+0x32>
 8007bb8:	0599      	lsls	r1, r3, #22
 8007bba:	d402      	bmi.n	8007bc2 <_fflush_r+0x32>
 8007bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bbe:	f7ff fb9e 	bl	80072fe <__retarget_lock_acquire_recursive>
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	f7ff ff63 	bl	8007a90 <__sflush_r>
 8007bca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bcc:	4605      	mov	r5, r0
 8007bce:	07da      	lsls	r2, r3, #31
 8007bd0:	d4e4      	bmi.n	8007b9c <_fflush_r+0xc>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	059b      	lsls	r3, r3, #22
 8007bd6:	d4e1      	bmi.n	8007b9c <_fflush_r+0xc>
 8007bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bda:	f7ff fb91 	bl	8007300 <__retarget_lock_release_recursive>
 8007bde:	e7dd      	b.n	8007b9c <_fflush_r+0xc>

08007be0 <__swhatbuf_r>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	460c      	mov	r4, r1
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	4615      	mov	r5, r2
 8007bea:	2900      	cmp	r1, #0
 8007bec:	461e      	mov	r6, r3
 8007bee:	b096      	sub	sp, #88	@ 0x58
 8007bf0:	da0c      	bge.n	8007c0c <__swhatbuf_r+0x2c>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bfa:	bf14      	ite	ne
 8007bfc:	2340      	movne	r3, #64	@ 0x40
 8007bfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c02:	2000      	movs	r0, #0
 8007c04:	6031      	str	r1, [r6, #0]
 8007c06:	602b      	str	r3, [r5, #0]
 8007c08:	b016      	add	sp, #88	@ 0x58
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	466a      	mov	r2, sp
 8007c0e:	f000 f849 	bl	8007ca4 <_fstat_r>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	dbed      	blt.n	8007bf2 <__swhatbuf_r+0x12>
 8007c16:	9901      	ldr	r1, [sp, #4]
 8007c18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c20:	4259      	negs	r1, r3
 8007c22:	4159      	adcs	r1, r3
 8007c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c28:	e7eb      	b.n	8007c02 <__swhatbuf_r+0x22>

08007c2a <__smakebuf_r>:
 8007c2a:	898b      	ldrh	r3, [r1, #12]
 8007c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c2e:	079d      	lsls	r5, r3, #30
 8007c30:	4606      	mov	r6, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	d507      	bpl.n	8007c46 <__smakebuf_r+0x1c>
 8007c36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	6123      	str	r3, [r4, #16]
 8007c3e:	2301      	movs	r3, #1
 8007c40:	6163      	str	r3, [r4, #20]
 8007c42:	b003      	add	sp, #12
 8007c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c46:	466a      	mov	r2, sp
 8007c48:	ab01      	add	r3, sp, #4
 8007c4a:	f7ff ffc9 	bl	8007be0 <__swhatbuf_r>
 8007c4e:	9f00      	ldr	r7, [sp, #0]
 8007c50:	4605      	mov	r5, r0
 8007c52:	4639      	mov	r1, r7
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff fbbf 	bl	80073d8 <_malloc_r>
 8007c5a:	b948      	cbnz	r0, 8007c70 <__smakebuf_r+0x46>
 8007c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c60:	059a      	lsls	r2, r3, #22
 8007c62:	d4ee      	bmi.n	8007c42 <__smakebuf_r+0x18>
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	e7e2      	b.n	8007c36 <__smakebuf_r+0xc>
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	9b01      	ldr	r3, [sp, #4]
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	b15b      	cbz	r3, 8007c9a <__smakebuf_r+0x70>
 8007c82:	4630      	mov	r0, r6
 8007c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c88:	f000 f81e 	bl	8007cc8 <_isatty_r>
 8007c8c:	b128      	cbz	r0, 8007c9a <__smakebuf_r+0x70>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	f023 0303 	bic.w	r3, r3, #3
 8007c94:	f043 0301 	orr.w	r3, r3, #1
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	431d      	orrs	r5, r3
 8007c9e:	81a5      	strh	r5, [r4, #12]
 8007ca0:	e7cf      	b.n	8007c42 <__smakebuf_r+0x18>
	...

08007ca4 <_fstat_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4d06      	ldr	r5, [pc, #24]	@ (8007cc4 <_fstat_r+0x20>)
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	f7f8 feb9 	bl	8000a28 <_fstat>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d102      	bne.n	8007cc0 <_fstat_r+0x1c>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	b103      	cbz	r3, 8007cc0 <_fstat_r+0x1c>
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20001380 	.word	0x20001380

08007cc8 <_isatty_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4d05      	ldr	r5, [pc, #20]	@ (8007ce4 <_isatty_r+0x1c>)
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7f8 feb7 	bl	8000a46 <_isatty>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_isatty_r+0x1a>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_isatty_r+0x1a>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	20001380 	.word	0x20001380

08007ce8 <_sbrk_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	2300      	movs	r3, #0
 8007cec:	4d05      	ldr	r5, [pc, #20]	@ (8007d04 <_sbrk_r+0x1c>)
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7f8 febe 	bl	8000a74 <_sbrk>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_sbrk_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_sbrk_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20001380 	.word	0x20001380

08007d08 <memchr>:
 8007d08:	4603      	mov	r3, r0
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	b2c9      	uxtb	r1, r1
 8007d0e:	4402      	add	r2, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	d101      	bne.n	8007d1a <memchr+0x12>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e003      	b.n	8007d22 <memchr+0x1a>
 8007d1a:	7804      	ldrb	r4, [r0, #0]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	428c      	cmp	r4, r1
 8007d20:	d1f6      	bne.n	8007d10 <memchr+0x8>
 8007d22:	bd10      	pop	{r4, pc}

08007d24 <_init>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr

08007d30 <_fini>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr
