
myquator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f25c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800f370  0800f370  00010370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd9c  0800fd9c  000111ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fd9c  0800fd9c  00010d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fda4  0800fda4  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fda4  0800fda4  00010da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fda8  0800fda8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800fdac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c78  200001ec  0800ff98  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e64  0800ff98  00011e64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fb7  00000000  00000000  00011215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d55  00000000  00000000  000241cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00027f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e62  00000000  00000000  00029200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b817  00000000  00000000  0002a062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193b9  00000000  00000000  00045879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091de2  00000000  00000000  0005ec32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0a14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e8  00000000  00000000  000f0a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f7040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f354 	.word	0x0800f354

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800f354 	.word	0x0800f354

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	2200      	movs	r2, #0
 800118c:	2300      	movs	r3, #0
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	f7ff fc13 	bl	80009bc <__aeabi_dcmplt>
 8001196:	b928      	cbnz	r0, 80011a4 <__aeabi_d2lz+0x1c>
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a0:	f000 b80a 	b.w	80011b8 <__aeabi_d2ulz>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011aa:	f000 f805 	bl	80011b8 <__aeabi_d2ulz>
 80011ae:	4240      	negs	r0, r0
 80011b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	bf00      	nop

080011b8 <__aeabi_d2ulz>:
 80011b8:	b5d0      	push	{r4, r6, r7, lr}
 80011ba:	2200      	movs	r2, #0
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <__aeabi_d2ulz+0x34>)
 80011be:	4606      	mov	r6, r0
 80011c0:	460f      	mov	r7, r1
 80011c2:	f7ff f989 	bl	80004d8 <__aeabi_dmul>
 80011c6:	f7ff fc5f 	bl	8000a88 <__aeabi_d2uiz>
 80011ca:	4604      	mov	r4, r0
 80011cc:	f7ff f90a 	bl	80003e4 <__aeabi_ui2d>
 80011d0:	2200      	movs	r2, #0
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <__aeabi_d2ulz+0x38>)
 80011d4:	f7ff f980 	bl	80004d8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4630      	mov	r0, r6
 80011de:	4639      	mov	r1, r7
 80011e0:	f7fe ffc2 	bl	8000168 <__aeabi_dsub>
 80011e4:	f7ff fc50 	bl	8000a88 <__aeabi_d2uiz>
 80011e8:	4621      	mov	r1, r4
 80011ea:	bdd0      	pop	{r4, r6, r7, pc}
 80011ec:	3df00000 	.word	0x3df00000
 80011f0:	41f00000 	.word	0x41f00000

080011f4 <lpf2pInit>:

/**
 * ���׵�ͨ�˲�
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	if (lpfData == NULL || cutoff_freq <= 0.0f) 
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00d      	beq.n	8001222 <lpf2pInit+0x2e>
 8001206:	f04f 0100 	mov.w	r1, #0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff62 	bl	80010d4 <__aeabi_fcmple>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <lpf2pInit+0x2e>
	{
		return;
	}

	lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f806 	bl	800122c <lpf2pSetCutoffFreq>
 8001220:	e000      	b.n	8001224 <lpf2pInit+0x30>
		return;
 8001222:	bf00      	nop
}
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <lpf2pSetCutoffFreq>:

/**
 * ���ö��׵�ͨ�˲�����Ƶ��
 */
void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	float fr = sample_freq/cutoff_freq;
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f7ff fe56 	bl	8000eec <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	61fb      	str	r3, [r7, #28]
	float ohm = tanf(M_PI_F/fr);
 8001244:	69f9      	ldr	r1, [r7, #28]
 8001246:	483e      	ldr	r0, [pc, #248]	@ (8001340 <lpf2pSetCutoffFreq+0x114>)
 8001248:	f7ff fe50 	bl	8000eec <__aeabi_fdiv>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f00c fbd0 	bl	800d9f4 <tanf>
 8001254:	61b8      	str	r0, [r7, #24]
	float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8001256:	493b      	ldr	r1, [pc, #236]	@ (8001344 <lpf2pSetCutoffFreq+0x118>)
 8001258:	69b8      	ldr	r0, [r7, #24]
 800125a:	f7ff fd93 	bl	8000d84 <__aeabi_fmul>
 800125e:	4603      	mov	r3, r0
 8001260:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fc85 	bl	8000b74 <__addsf3>
 800126a:	4603      	mov	r3, r0
 800126c:	461c      	mov	r4, r3
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	69b8      	ldr	r0, [r7, #24]
 8001272:	f7ff fd87 	bl	8000d84 <__aeabi_fmul>
 8001276:	4603      	mov	r3, r0
 8001278:	4619      	mov	r1, r3
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff fc7a 	bl	8000b74 <__addsf3>
 8001280:	4603      	mov	r3, r0
 8001282:	617b      	str	r3, [r7, #20]
	lpfData->b0 = ohm*ohm/c;
 8001284:	69b9      	ldr	r1, [r7, #24]
 8001286:	69b8      	ldr	r0, [r7, #24]
 8001288:	f7ff fd7c 	bl	8000d84 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	6979      	ldr	r1, [r7, #20]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fe2b 	bl	8000eec <__aeabi_fdiv>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	609a      	str	r2, [r3, #8]
	lpfData->b1 = 2.0f*lpfData->b0;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fc65 	bl	8000b74 <__addsf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	60da      	str	r2, [r3, #12]
	lpfData->b2 = lpfData->b0;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	611a      	str	r2, [r3, #16]
	lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	69b8      	ldr	r0, [r7, #24]
 80012be:	f7ff fd61 	bl	8000d84 <__aeabi_fmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fc51 	bl	8000b70 <__aeabi_fsub>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fc4e 	bl	8000b74 <__addsf3>
 80012d8:	4603      	mov	r3, r0
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe05 	bl	8000eec <__aeabi_fdiv>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]
	lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 80012ea:	4916      	ldr	r1, [pc, #88]	@ (8001344 <lpf2pSetCutoffFreq+0x118>)
 80012ec:	69b8      	ldr	r0, [r7, #24]
 80012ee:	f7ff fd49 	bl	8000d84 <__aeabi_fmul>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012fa:	f7ff fc39 	bl	8000b70 <__aeabi_fsub>
 80012fe:	4603      	mov	r3, r0
 8001300:	461c      	mov	r4, r3
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	69b8      	ldr	r0, [r7, #24]
 8001306:	f7ff fd3d 	bl	8000d84 <__aeabi_fmul>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff fc30 	bl	8000b74 <__addsf3>
 8001314:	4603      	mov	r3, r0
 8001316:	6979      	ldr	r1, [r7, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fde7 	bl	8000eec <__aeabi_fdiv>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	605a      	str	r2, [r3, #4]
	lpfData->delay_element_1 = 0.0f;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
	lpfData->delay_element_2 = 0.0f;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	bf00      	nop
 8001340:	40490fdb 	.word	0x40490fdb
 8001344:	3fb504f3 	.word	0x3fb504f3

08001348 <lpf2pApply>:

float lpf2pApply(lpf2pData* lpfData, float sample)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
	float delay_element_0 = sample - lpfData->delay_element_1 * lpfData->a1 - lpfData->delay_element_2 * lpfData->a2;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f7ff fd11 	bl	8000d84 <__aeabi_fmul>
 8001362:	4603      	mov	r3, r0
 8001364:	4619      	mov	r1, r3
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7ff fc02 	bl	8000b70 <__aeabi_fsub>
 800136c:	4603      	mov	r3, r0
 800136e:	461c      	mov	r4, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fd02 	bl	8000d84 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fbf3 	bl	8000b70 <__aeabi_fsub>
 800138a:	4603      	mov	r3, r0
 800138c:	60fb      	str	r3, [r7, #12]
	if (!isfinite(delay_element_0)) 
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8001394:	4920      	ldr	r1, [pc, #128]	@ (8001418 <lpf2pApply+0xd0>)
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff feba 	bl	8001110 <__aeabi_fcmpun>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <lpf2pApply+0x68>
 80013a2:	491d      	ldr	r1, [pc, #116]	@ (8001418 <lpf2pApply+0xd0>)
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff fea9 	bl	80010fc <__aeabi_fcmpgt>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <lpf2pApply+0x6c>
	{
		// don't allow bad values to propigate via the filter
		delay_element_0 = sample;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	60fb      	str	r3, [r7, #12]
	}

	float output = delay_element_0 * lpfData->b0 + lpfData->delay_element_1 * lpfData->b1 + lpfData->delay_element_2 * lpfData->b2;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fce2 	bl	8000d84 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461c      	mov	r4, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff fcd8 	bl	8000d84 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff fbcb 	bl	8000b74 <__addsf3>
 80013de:	4603      	mov	r3, r0
 80013e0:	461c      	mov	r4, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff fcc9 	bl	8000d84 <__aeabi_fmul>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fbbc 	bl	8000b74 <__addsf3>
 80013fc:	4603      	mov	r3, r0
 80013fe:	60bb      	str	r3, [r7, #8]

	lpfData->delay_element_2 = lpfData->delay_element_1;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
	lpfData->delay_element_1 = delay_element_0;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	615a      	str	r2, [r3, #20]
	return output;
 800140e:	68bb      	ldr	r3, [r7, #8]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	7f7fffff 	.word	0x7f7fffff

0800141c <invSqrt>:
};

// 快速开平方求倒
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8001424:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fcab 	bl	8000d84 <__aeabi_fmul>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	float y = x;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	105a      	asrs	r2, r3, #1
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <invSqrt+0x74>)
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc95 	bl	8000d84 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fc8e 	bl	8000d84 <__aeabi_fmul>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8001470:	f7ff fb7e 	bl	8000b70 <__aeabi_fsub>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fc81 	bl	8000d84 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	613b      	str	r3, [r7, #16]
	return y;
 8001486:	693b      	ldr	r3, [r7, #16]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	5f3759df 	.word	0x5f3759df

08001494 <Init_AccGryoFilter>:

void Init_AccGryoFilter(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 3; i++)// 初始化加速计和陀螺二阶低通滤波
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e01a      	b.n	80014da <Init_AccGryoFilter+0x46>
	{
		lpf2pInit(&gyroLpf[i], 1000, GYRO_LPF_CUTOFF_FREQ);
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <Init_AccGryoFilter+0x58>)
 80014b0:	4413      	add	r3, r2
 80014b2:	4a0f      	ldr	r2, [pc, #60]	@ (80014f0 <Init_AccGryoFilter+0x5c>)
 80014b4:	490f      	ldr	r1, [pc, #60]	@ (80014f4 <Init_AccGryoFilter+0x60>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe9c 	bl	80011f4 <lpf2pInit>
		lpf2pInit(&accLpf[i],  1000, ACCEL_LPF_CUTOFF_FREQ);
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <Init_AccGryoFilter+0x64>)
 80014c8:	4413      	add	r3, r2
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <Init_AccGryoFilter+0x68>)
 80014cc:	4909      	ldr	r1, [pc, #36]	@ (80014f4 <Init_AccGryoFilter+0x60>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fe90 	bl	80011f4 <lpf2pInit>
	for (i = 0; i < 3; i++)// 初始化加速计和陀螺二阶低通滤波
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	3301      	adds	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d9e1      	bls.n	80014a4 <Init_AccGryoFilter+0x10>
	}
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20001af8 	.word	0x20001af8
 80014f0:	42a00000 	.word	0x42a00000
 80014f4:	447a0000 	.word	0x447a0000
 80014f8:	20001aa4 	.word	0x20001aa4
 80014fc:	41f00000 	.word	0x41f00000

08001500 <GyroBufferInit>:

void GyroBufferInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
    gstGyroBiasBuffer.Filled = 0;
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <GyroBufferInit+0x18>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
    gstGyroBiasBuffer.header = gstGyroBiasBuffer.buffer;
 800150a:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <GyroBufferInit+0x18>)
 800150c:	4a03      	ldr	r2, [pc, #12]	@ (800151c <GyroBufferInit+0x1c>)
 800150e:	605a      	str	r2, [r3, #4]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000250 	.word	0x20000250
 800151c:	20000258 	.word	0x20000258

08001520 <imu_FillGyroBuffer>:

uint8_t imu_FillGyroBuffer(struct stGyro GyroRaw)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	463b      	mov	r3, r7
 8001528:	e883 0003 	stmia.w	r3, {r0, r1}
		//1、填充缓冲
		gstGyroBiasBuffer.header->gx =  GyroRaw.gx;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001534:	801a      	strh	r2, [r3, #0]
		gstGyroBiasBuffer.header->gy =  GyroRaw.gy;
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800153e:	805a      	strh	r2, [r3, #2]
		gstGyroBiasBuffer.header->gz =  GyroRaw.gz;
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001548:	809a      	strh	r2, [r3, #4]
		gstGyroBiasBuffer.header++;
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	3306      	adds	r3, #6
 8001550:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 8001552:	6053      	str	r3, [r2, #4]
		
		//2、边界判断
		if(gstGyroBiasBuffer.header >= &gstGyroBiasBuffer.buffer[LOOPBUFFER])
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <imu_FillGyroBuffer+0x5c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d305      	bcc.n	800156a <imu_FillGyroBuffer+0x4a>
		{
				gstGyroBiasBuffer.Filled = 1;
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
				gstGyroBiasBuffer.header = gstGyroBiasBuffer.buffer;
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 8001566:	4a06      	ldr	r2, [pc, #24]	@ (8001580 <imu_FillGyroBuffer+0x60>)
 8001568:	605a      	str	r2, [r3, #4]
		}
		return gstGyroBiasBuffer.Filled;
 800156a:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <imu_FillGyroBuffer+0x58>)
 800156c:	781b      	ldrb	r3, [r3, #0]
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000250 	.word	0x20000250
 800157c:	20001a58 	.word	0x20001a58
 8001580:	20000258 	.word	0x20000258

08001584 <imu_GetGyroBias>:

uint8_t imu_GetGyroBias(struct stGyro GyroRaw)
{ 
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	463b      	mov	r3, r7
 800158c:	e883 0003 	stmia.w	r3, {r0, r1}
		//1、fill buffer
		imu_FillGyroBuffer(GyroRaw);
 8001590:	463b      	mov	r3, r7
 8001592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001596:	f7ff ffc3 	bl	8001520 <imu_FillGyroBuffer>
		//2、find Gyro Bias
		if(!gstGyroBiasBuffer.FindBias)
 800159a:	4b9d      	ldr	r3, [pc, #628]	@ (8001810 <imu_GetGyroBias+0x28c>)
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 812f 	bne.w	8001802 <imu_GetGyroBias+0x27e>
		{
				if(gstGyroBiasBuffer.Filled)
 80015a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001810 <imu_GetGyroBias+0x28c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 812a 	beq.w	8001802 <imu_GetGyroBias+0x27e>
				{
						signed long gx=0,gy=0,gz=0,gx2=0,gy2=0,gz2=0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
						int i=0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
						for(i = 0 ; i < LOOPBUFFER ; i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e07a      	b.n	80016c6 <imu_GetGyroBias+0x142>
						{
                            gx += gstGyroBiasBuffer.buffer[i].gx;
 80015d0:	498f      	ldr	r1, [pc, #572]	@ (8001810 <imu_GetGyroBias+0x28c>)
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	440b      	add	r3, r1
 80015de:	3308      	adds	r3, #8
 80015e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e4:	461a      	mov	r2, r3
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	4413      	add	r3, r2
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
                            gy += gstGyroBiasBuffer.buffer[i].gy;
 80015ec:	4988      	ldr	r1, [pc, #544]	@ (8001810 <imu_GetGyroBias+0x28c>)
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	440b      	add	r3, r1
 80015fa:	330a      	adds	r3, #10
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	461a      	mov	r2, r3
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	4413      	add	r3, r2
 8001606:	623b      	str	r3, [r7, #32]
                            gz += gstGyroBiasBuffer.buffer[i].gz;
 8001608:	4981      	ldr	r1, [pc, #516]	@ (8001810 <imu_GetGyroBias+0x28c>)
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	440b      	add	r3, r1
 8001616:	330c      	adds	r3, #12
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	461a      	mov	r2, r3
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	61fb      	str	r3, [r7, #28]
                        
                            gx2+=gstGyroBiasBuffer.buffer[i].gx * gstGyroBiasBuffer.buffer[i].gx;
 8001624:	497a      	ldr	r1, [pc, #488]	@ (8001810 <imu_GetGyroBias+0x28c>)
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	440b      	add	r3, r1
 8001632:	3308      	adds	r3, #8
 8001634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001638:	4618      	mov	r0, r3
 800163a:	4975      	ldr	r1, [pc, #468]	@ (8001810 <imu_GetGyroBias+0x28c>)
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	3308      	adds	r3, #8
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	fb00 f303 	mul.w	r3, r0, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4413      	add	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
                            gy2+=gstGyroBiasBuffer.buffer[i].gy * gstGyroBiasBuffer.buffer[i].gy;
 8001658:	496d      	ldr	r1, [pc, #436]	@ (8001810 <imu_GetGyroBias+0x28c>)
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	440b      	add	r3, r1
 8001666:	330a      	adds	r3, #10
 8001668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166c:	4618      	mov	r0, r3
 800166e:	4968      	ldr	r1, [pc, #416]	@ (8001810 <imu_GetGyroBias+0x28c>)
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	440b      	add	r3, r1
 800167c:	330a      	adds	r3, #10
 800167e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001682:	fb00 f303 	mul.w	r3, r0, r3
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4413      	add	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
                            gz2+=gstGyroBiasBuffer.buffer[i].gz * gstGyroBiasBuffer.buffer[i].gz;
 800168c:	4960      	ldr	r1, [pc, #384]	@ (8001810 <imu_GetGyroBias+0x28c>)
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	440b      	add	r3, r1
 800169a:	330c      	adds	r3, #12
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	4618      	mov	r0, r3
 80016a2:	495b      	ldr	r1, [pc, #364]	@ (8001810 <imu_GetGyroBias+0x28c>)
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	440b      	add	r3, r1
 80016b0:	330c      	adds	r3, #12
 80016b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b6:	fb00 f303 	mul.w	r3, r0, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
						for(i = 0 ; i < LOOPBUFFER ; i++)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016cc:	db80      	blt.n	80015d0 <imu_GetGyroBias+0x4c>
						}
						
						gstGyroVar.x = (gx2 - ( signed long)(gx*gx)/LOOPBUFFER)/LOOPBUFFER;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	fb03 f303 	mul.w	r3, r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da01      	bge.n	80016dc <imu_GetGyroBias+0x158>
 80016d8:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80016dc:	129b      	asrs	r3, r3, #10
 80016de:	425b      	negs	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4413      	add	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da01      	bge.n	80016ee <imu_GetGyroBias+0x16a>
 80016ea:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80016ee:	129b      	asrs	r3, r3, #10
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff faf3 	bl	8000cdc <__aeabi_i2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a46      	ldr	r2, [pc, #280]	@ (8001814 <imu_GetGyroBias+0x290>)
 80016fa:	6013      	str	r3, [r2, #0]
						gstGyroVar.y = (gy2 - ( signed long)(gy*gy)/LOOPBUFFER)/LOOPBUFFER;
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	fb03 f303 	mul.w	r3, r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	da01      	bge.n	800170a <imu_GetGyroBias+0x186>
 8001706:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800170a:	129b      	asrs	r3, r3, #10
 800170c:	425b      	negs	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	4413      	add	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	da01      	bge.n	800171c <imu_GetGyroBias+0x198>
 8001718:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800171c:	129b      	asrs	r3, r3, #10
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fadc 	bl	8000cdc <__aeabi_i2f>
 8001724:	4603      	mov	r3, r0
 8001726:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <imu_GetGyroBias+0x290>)
 8001728:	6053      	str	r3, [r2, #4]
						gstGyroVar.z = (gz2 - ( signed long)(gz*gz)/LOOPBUFFER)/LOOPBUFFER;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fb03 f303 	mul.w	r3, r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	da01      	bge.n	8001738 <imu_GetGyroBias+0x1b4>
 8001734:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8001738:	129b      	asrs	r3, r3, #10
 800173a:	425b      	negs	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4413      	add	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	da01      	bge.n	800174a <imu_GetGyroBias+0x1c6>
 8001746:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800174a:	129b      	asrs	r3, r3, #10
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fac5 	bl	8000cdc <__aeabi_i2f>
 8001752:	4603      	mov	r3, r0
 8001754:	4a2f      	ldr	r2, [pc, #188]	@ (8001814 <imu_GetGyroBias+0x290>)
 8001756:	6093      	str	r3, [r2, #8]
						
						gstGyroMean.x = (float)gx/LOOPBUFFER;
 8001758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800175a:	f7ff fabf 	bl	8000cdc <__aeabi_i2f>
 800175e:	4603      	mov	r3, r0
 8001760:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fbc1 	bl	8000eec <__aeabi_fdiv>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <imu_GetGyroBias+0x294>)
 8001770:	601a      	str	r2, [r3, #0]
						gstGyroMean.y = (float)gy/LOOPBUFFER;
 8001772:	6a38      	ldr	r0, [r7, #32]
 8001774:	f7ff fab2 	bl	8000cdc <__aeabi_i2f>
 8001778:	4603      	mov	r3, r0
 800177a:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fbb4 	bl	8000eec <__aeabi_fdiv>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <imu_GetGyroBias+0x294>)
 800178a:	605a      	str	r2, [r3, #4]
						gstGyroMean.z = (float)gz/LOOPBUFFER;
 800178c:	69f8      	ldr	r0, [r7, #28]
 800178e:	f7ff faa5 	bl	8000cdc <__aeabi_i2f>
 8001792:	4603      	mov	r3, r0
 8001794:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fba7 	bl	8000eec <__aeabi_fdiv>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <imu_GetGyroBias+0x294>)
 80017a4:	609a      	str	r2, [r3, #8]
						
						if(gstGyroVar.x < VAR_THREHOLD_ZERO && gstGyroVar.y < VAR_THREHOLD_ZERO && gstGyroVar.z < VAR_THREHOLD_ZERO)
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <imu_GetGyroBias+0x290>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	491c      	ldr	r1, [pc, #112]	@ (800181c <imu_GetGyroBias+0x298>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc87 	bl	80010c0 <__aeabi_fcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d021      	beq.n	80017fc <imu_GetGyroBias+0x278>
 80017b8:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <imu_GetGyroBias+0x290>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4917      	ldr	r1, [pc, #92]	@ (800181c <imu_GetGyroBias+0x298>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fc7e 	bl	80010c0 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d018      	beq.n	80017fc <imu_GetGyroBias+0x278>
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <imu_GetGyroBias+0x290>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4913      	ldr	r1, [pc, #76]	@ (800181c <imu_GetGyroBias+0x298>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc75 	bl	80010c0 <__aeabi_fcmplt>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00f      	beq.n	80017fc <imu_GetGyroBias+0x278>
						{
								//3、bias founded!
								gstGyroBias.x = gstGyroMean.x;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <imu_GetGyroBias+0x294>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <imu_GetGyroBias+0x29c>)
 80017e2:	6013      	str	r3, [r2, #0]
								gstGyroBias.y = gstGyroMean.y;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <imu_GetGyroBias+0x294>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <imu_GetGyroBias+0x29c>)
 80017ea:	6053      	str	r3, [r2, #4]
								gstGyroBias.z = gstGyroMean.z;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <imu_GetGyroBias+0x294>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <imu_GetGyroBias+0x29c>)
 80017f2:	6093      	str	r3, [r2, #8]
								gstGyroBiasBuffer.FindBias = 1;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <imu_GetGyroBias+0x28c>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	705a      	strb	r2, [r3, #1]
 80017fa:	e002      	b.n	8001802 <imu_GetGyroBias+0x27e>
						}else {
								gstGyroBiasBuffer.Filled = 0;
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <imu_GetGyroBias+0x28c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
						}
				}
		}
		return gstGyroBiasBuffer.FindBias;
 8001802:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <imu_GetGyroBias+0x28c>)
 8001804:	785b      	ldrb	r3, [r3, #1]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000250 	.word	0x20000250
 8001814:	20000220 	.word	0x20000220
 8001818:	2000022c 	.word	0x2000022c
 800181c:	46ea6000 	.word	0x46ea6000
 8001820:	20000208 	.word	0x20000208

08001824 <applyAxis3fLpf>:

/*二阶低通滤波*/
static void applyAxis3fLpf(lpf2pData *data, struct stAxis * in)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    in->x = lpf2pApply(&data[0], in->x);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd87 	bl	8001348 <lpf2pApply>
 800183a:	4602      	mov	r2, r0
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	601a      	str	r2, [r3, #0]
    in->y = lpf2pApply(&data[1], in->y);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f103 021c 	add.w	r2, r3, #28
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7ff fd7b 	bl	8001348 <lpf2pApply>
 8001852:	4602      	mov	r2, r0
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	605a      	str	r2, [r3, #4]
    in->z = lpf2pApply(&data[2], in->z);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f7ff fd6f 	bl	8001348 <lpf2pApply>
 800186a:	4602      	mov	r2, r0
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <sensorsTask>:


void sensorsTask(void)
{
 8001878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800187c:	b08e      	sub	sp, #56	@ 0x38
 800187e:	af04      	add	r7, sp, #16
    long cnt=0;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    GyroBufferInit();
 8001884:	f7ff fe3c 	bl	8001500 <GyroBufferInit>
    Init_AccGryoFilter();
 8001888:	f7ff fe04 	bl	8001494 <Init_AccGryoFilter>

    QMI8658_Init();//初始化陀螺仪以及加速度计
 800188c:	f006 f9da 	bl	8007c44 <QMI8658_Init>
    QMC5883_Init();//初始化电子罗盘
 8001890:	f006 f9a4 	bl	8007bdc <QMC5883_Init>
    //SPL06_Init();//初始化气压计
	while(1)
	{
			//1、传感器获取原始数据
			QMI8658_dataGet();
 8001894:	f006 fa18 	bl	8007cc8 <QMI8658_dataGet>

			//2、获取传感器偏置
			uint8_t uGyroBiasFound = imu_GetGyroBias(gstSenSorRaw.GyroRaw);
 8001898:	4bbb      	ldr	r3, [pc, #748]	@ (8001b88 <sensorsTask+0x310>)
 800189a:	f8d3 2006 	ldr.w	r2, [r3, #6]
 800189e:	4611      	mov	r1, r2
 80018a0:	895a      	ldrh	r2, [r3, #10]
 80018a2:	2300      	movs	r3, #0
 80018a4:	f362 030f 	bfi	r3, r2, #0, #16
 80018a8:	4608      	mov	r0, r1
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff fe6a 	bl	8001584 <imu_GetGyroBias>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			//3、获取传感器实际测量值
			if(uGyroBiasFound)
 80018b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ea      	beq.n	8001894 <sensorsTask+0x1c>
			{
					static uint32_t accScaleCnt = 0;
					accScaleCalSum += sqrtf(powf(gstSenSorRaw.AccRaw.ax,2)+powf(gstSenSorRaw.AccRaw.ay,2)+powf(gstSenSorRaw.AccRaw.az,2));
 80018be:	4bb2      	ldr	r3, [pc, #712]	@ (8001b88 <sensorsTask+0x310>)
 80018c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fa09 	bl	8000cdc <__aeabi_i2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00c f825 	bl	800d920 <powf>
 80018d6:	4604      	mov	r4, r0
 80018d8:	4bab      	ldr	r3, [pc, #684]	@ (8001b88 <sensorsTask+0x310>)
 80018da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f9fc 	bl	8000cdc <__aeabi_i2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00c f818 	bl	800d920 <powf>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4619      	mov	r1, r3
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff f93d 	bl	8000b74 <__addsf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461c      	mov	r4, r3
 80018fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001b88 <sensorsTask+0x310>)
 8001900:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f9e9 	bl	8000cdc <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001910:	4618      	mov	r0, r3
 8001912:	f00c f805 	bl	800d920 <powf>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff f92a 	bl	8000b74 <__addsf3>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f00c f849 	bl	800d9ba <sqrtf>
 8001928:	4602      	mov	r2, r0
 800192a:	4b98      	ldr	r3, [pc, #608]	@ (8001b8c <sensorsTask+0x314>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff f91f 	bl	8000b74 <__addsf3>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b94      	ldr	r3, [pc, #592]	@ (8001b8c <sensorsTask+0x314>)
 800193c:	601a      	str	r2, [r3, #0]
					accScaleCnt++;
 800193e:	4b94      	ldr	r3, [pc, #592]	@ (8001b90 <sensorsTask+0x318>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a92      	ldr	r2, [pc, #584]	@ (8001b90 <sensorsTask+0x318>)
 8001946:	6013      	str	r3, [r2, #0]
					if(accScaleCnt >= ACC_SCALE_NUM)
 8001948:	4b91      	ldr	r3, [pc, #580]	@ (8001b90 <sensorsTask+0x318>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2bc7      	cmp	r3, #199	@ 0xc7
 800194e:	d910      	bls.n	8001972 <sensorsTask+0xfa>
					{
							gAccScale = accScaleCalSum / ACC_SCALE_NUM;
 8001950:	4b8e      	ldr	r3, [pc, #568]	@ (8001b8c <sensorsTask+0x314>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	498f      	ldr	r1, [pc, #572]	@ (8001b94 <sensorsTask+0x31c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fac8 	bl	8000eec <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b8d      	ldr	r3, [pc, #564]	@ (8001b98 <sensorsTask+0x320>)
 8001962:	601a      	str	r2, [r3, #0]
						  accScaleCnt = 0;
 8001964:	4b8a      	ldr	r3, [pc, #552]	@ (8001b90 <sensorsTask+0x318>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
							accScaleCalSum = 0;
 800196a:	4b88      	ldr	r3, [pc, #544]	@ (8001b8c <sensorsTask+0x314>)
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
					}

					//加速度 g
					gstSensor.Acc.x = -(gstSenSorRaw.AccRaw.ax)*9.8/2048/gAccScale;
 8001972:	4b85      	ldr	r3, [pc, #532]	@ (8001b88 <sensorsTask+0x310>)
 8001974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001978:	425b      	negs	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd42 	bl	8000404 <__aeabi_i2d>
 8001980:	a37d      	add	r3, pc, #500	@ (adr r3, 8001b78 <sensorsTask+0x300>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fda7 	bl	80004d8 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b81      	ldr	r3, [pc, #516]	@ (8001b9c <sensorsTask+0x324>)
 8001998:	f7fe fec8 	bl	800072c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	461d      	mov	r5, r3
 80019a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001b98 <sensorsTask+0x320>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fd3d 	bl	8000428 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe feb9 	bl	800072c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f881 	bl	8000ac8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a75      	ldr	r2, [pc, #468]	@ (8001ba0 <sensorsTask+0x328>)
 80019ca:	6013      	str	r3, [r2, #0]
					gstSensor.Acc.y =  (gstSenSorRaw.AccRaw.ay)*9.8/2048/gAccScale;
 80019cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001b88 <sensorsTask+0x310>)
 80019ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd16 	bl	8000404 <__aeabi_i2d>
 80019d8:	a367      	add	r3, pc, #412	@ (adr r3, 8001b78 <sensorsTask+0x300>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fd7b 	bl	80004d8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b6b      	ldr	r3, [pc, #428]	@ (8001b9c <sensorsTask+0x324>)
 80019f0:	f7fe fe9c 	bl	800072c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4614      	mov	r4, r2
 80019fa:	461d      	mov	r5, r3
 80019fc:	4b66      	ldr	r3, [pc, #408]	@ (8001b98 <sensorsTask+0x320>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd11 	bl	8000428 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fe8d 	bl	800072c <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f855 	bl	8000ac8 <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a5f      	ldr	r2, [pc, #380]	@ (8001ba0 <sensorsTask+0x328>)
 8001a22:	6053      	str	r3, [r2, #4]
					gstSensor.Acc.z =  (gstSenSorRaw.AccRaw.az)*9.8/2048/gAccScale;
 8001a24:	4b58      	ldr	r3, [pc, #352]	@ (8001b88 <sensorsTask+0x310>)
 8001a26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fcea 	bl	8000404 <__aeabi_i2d>
 8001a30:	a351      	add	r3, pc, #324	@ (adr r3, 8001b78 <sensorsTask+0x300>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fd4f 	bl	80004d8 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b55      	ldr	r3, [pc, #340]	@ (8001b9c <sensorsTask+0x324>)
 8001a48:	f7fe fe70 	bl	800072c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	461d      	mov	r5, r3
 8001a54:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <sensorsTask+0x320>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fce5 	bl	8000428 <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4620      	mov	r0, r4
 8001a64:	4629      	mov	r1, r5
 8001a66:	f7fe fe61 	bl	800072c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f829 	bl	8000ac8 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a49      	ldr	r2, [pc, #292]	@ (8001ba0 <sensorsTask+0x328>)
 8001a7a:	6093      	str	r3, [r2, #8]
					applyAxis3fLpf(gyroLpf, &gstSensor.Acc);
 8001a7c:	4948      	ldr	r1, [pc, #288]	@ (8001ba0 <sensorsTask+0x328>)
 8001a7e:	4849      	ldr	r0, [pc, #292]	@ (8001ba4 <sensorsTask+0x32c>)
 8001a80:	f7ff fed0 	bl	8001824 <applyAxis3fLpf>
					//弧度 rad
					gstSensor.Gyro.x = -(gstSenSorRaw.GyroRaw.gx - gstGyroMean.x)*0.000027;
 8001a84:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <sensorsTask+0x310>)
 8001a86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f926 	bl	8000cdc <__aeabi_i2f>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b45      	ldr	r3, [pc, #276]	@ (8001ba8 <sensorsTask+0x330>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7ff f869 	bl	8000b70 <__aeabi_fsub>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fcbf 	bl	8000428 <__aeabi_f2d>
 8001aaa:	a335      	add	r3, pc, #212	@ (adr r3, 8001b80 <sensorsTask+0x308>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fd12 	bl	80004d8 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f804 	bl	8000ac8 <__aeabi_d2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a37      	ldr	r2, [pc, #220]	@ (8001ba0 <sensorsTask+0x328>)
 8001ac4:	60d3      	str	r3, [r2, #12]
					gstSensor.Gyro.y =  (gstSenSorRaw.GyroRaw.gy - gstGyroMean.y)*0.000027;
 8001ac6:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <sensorsTask+0x310>)
 8001ac8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f905 	bl	8000cdc <__aeabi_i2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <sensorsTask+0x330>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7ff f848 	bl	8000b70 <__aeabi_fsub>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fca0 	bl	8000428 <__aeabi_f2d>
 8001ae8:	a325      	add	r3, pc, #148	@ (adr r3, 8001b80 <sensorsTask+0x308>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fcf3 	bl	80004d8 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7fe ffe5 	bl	8000ac8 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a27      	ldr	r2, [pc, #156]	@ (8001ba0 <sensorsTask+0x328>)
 8001b02:	6113      	str	r3, [r2, #16]
					gstSensor.Gyro.z =  (gstSenSorRaw.GyroRaw.gz - gstGyroMean.z)*0.000027;
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <sensorsTask+0x310>)
 8001b06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f8e6 	bl	8000cdc <__aeabi_i2f>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <sensorsTask+0x330>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f7ff f829 	bl	8000b70 <__aeabi_fsub>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fc81 	bl	8000428 <__aeabi_f2d>
 8001b26:	a316      	add	r3, pc, #88	@ (adr r3, 8001b80 <sensorsTask+0x308>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fcd4 	bl	80004d8 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe ffc6 	bl	8000ac8 <__aeabi_d2f>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ba0 <sensorsTask+0x328>)
 8001b40:	6153      	str	r3, [r2, #20]
					applyAxis3fLpf(gyroLpf, &gstSensor.Gyro);
 8001b42:	491a      	ldr	r1, [pc, #104]	@ (8001bac <sensorsTask+0x334>)
 8001b44:	4817      	ldr	r0, [pc, #92]	@ (8001ba4 <sensorsTask+0x32c>)
 8001b46:	f7ff fe6d 	bl	8001824 <applyAxis3fLpf>

			float normalize=0;
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
			struct stAxis stErrAxis;
			// 当传感器数值为有效值时才处理
			if((gstSensor.Acc.x!=0.0f) || (gstSensor.Acc.z!=0.0f) || (gstSensor.Acc.z!=0.0f))
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <sensorsTask+0x328>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff faa7 	bl	80010ac <__aeabi_fcmpeq>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d031      	beq.n	8001bc8 <sensorsTask+0x350>
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <sensorsTask+0x328>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fa9d 	bl	80010ac <__aeabi_fcmpeq>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	e01b      	b.n	8001bb0 <sensorsTask+0x338>
 8001b78:	9999999a 	.word	0x9999999a
 8001b7c:	40239999 	.word	0x40239999
 8001b80:	df3300de 	.word	0xdf3300de
 8001b84:	3efc4fc1 	.word	0x3efc4fc1
 8001b88:	20000214 	.word	0x20000214
 8001b8c:	20001a64 	.word	0x20001a64
 8001b90:	20001b4c 	.word	0x20001b4c
 8001b94:	43480000 	.word	0x43480000
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	40a00000 	.word	0x40a00000
 8001ba0:	20000238 	.word	0x20000238
 8001ba4:	20001af8 	.word	0x20001af8
 8001ba8:	2000022c 	.word	0x2000022c
 8001bac:	20000244 	.word	0x20000244
 8001bb0:	d00a      	beq.n	8001bc8 <sensorsTask+0x350>
 8001bb2:	4b91      	ldr	r3, [pc, #580]	@ (8001df8 <sensorsTask+0x580>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa76 	bl	80010ac <__aeabi_fcmpeq>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 813e 	bne.w	8001e44 <sensorsTask+0x5cc>
			{
					//单位化加速度值
					normalize = invSqrt(gstSensor.Acc.x * gstSensor.Acc.x + gstSensor.Acc.y * gstSensor.Acc.y + gstSensor.Acc.z * gstSensor.Acc.z);
 8001bc8:	4b8b      	ldr	r3, [pc, #556]	@ (8001df8 <sensorsTask+0x580>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a8a      	ldr	r2, [pc, #552]	@ (8001df8 <sensorsTask+0x580>)
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8d6 	bl	8000d84 <__aeabi_fmul>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461c      	mov	r4, r3
 8001bdc:	4b86      	ldr	r3, [pc, #536]	@ (8001df8 <sensorsTask+0x580>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a85      	ldr	r2, [pc, #532]	@ (8001df8 <sensorsTask+0x580>)
 8001be2:	6852      	ldr	r2, [r2, #4]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8cc 	bl	8000d84 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7fe ffbf 	bl	8000b74 <__addsf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001df8 <sensorsTask+0x580>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8001df8 <sensorsTask+0x580>)
 8001c00:	6892      	ldr	r2, [r2, #8]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f8bd 	bl	8000d84 <__aeabi_fmul>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f7fe ffb0 	bl	8000b74 <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fc00 	bl	800141c <invSqrt>
 8001c1c:	61f8      	str	r0, [r7, #28]
					gstSensor.Acc.x *= normalize;
 8001c1e:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <sensorsTask+0x580>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69f9      	ldr	r1, [r7, #28]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f8ad 	bl	8000d84 <__aeabi_fmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b72      	ldr	r3, [pc, #456]	@ (8001df8 <sensorsTask+0x580>)
 8001c30:	601a      	str	r2, [r3, #0]
					gstSensor.Acc.y *= normalize;
 8001c32:	4b71      	ldr	r3, [pc, #452]	@ (8001df8 <sensorsTask+0x580>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	69f9      	ldr	r1, [r7, #28]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f8a3 	bl	8000d84 <__aeabi_fmul>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b6d      	ldr	r3, [pc, #436]	@ (8001df8 <sensorsTask+0x580>)
 8001c44:	605a      	str	r2, [r3, #4]
					gstSensor.Acc.z *= normalize;
 8001c46:	4b6c      	ldr	r3, [pc, #432]	@ (8001df8 <sensorsTask+0x580>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	69f9      	ldr	r1, [r7, #28]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f899 	bl	8000d84 <__aeabi_fmul>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b68      	ldr	r3, [pc, #416]	@ (8001df8 <sensorsTask+0x580>)
 8001c58:	609a      	str	r2, [r3, #8]
				
					//向量叉乘运算
					stErrAxis.x = gstSensor.Acc.y * rMat[2][2] - gstSensor.Acc.z * rMat[2][1];
 8001c5a:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <sensorsTask+0x580>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a67      	ldr	r2, [pc, #412]	@ (8001dfc <sensorsTask+0x584>)
 8001c60:	6a12      	ldr	r2, [r2, #32]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f88d 	bl	8000d84 <__aeabi_fmul>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461c      	mov	r4, r3
 8001c6e:	4b62      	ldr	r3, [pc, #392]	@ (8001df8 <sensorsTask+0x580>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a62      	ldr	r2, [pc, #392]	@ (8001dfc <sensorsTask+0x584>)
 8001c74:	69d2      	ldr	r2, [r2, #28]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f883 	bl	8000d84 <__aeabi_fmul>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7fe ff74 	bl	8000b70 <__aeabi_fsub>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	603b      	str	r3, [r7, #0]
					stErrAxis.y = gstSensor.Acc.z * rMat[2][0] - gstSensor.Acc.x * rMat[2][2];
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001df8 <sensorsTask+0x580>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a5a      	ldr	r2, [pc, #360]	@ (8001dfc <sensorsTask+0x584>)
 8001c92:	6992      	ldr	r2, [r2, #24]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f874 	bl	8000d84 <__aeabi_fmul>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	4b55      	ldr	r3, [pc, #340]	@ (8001df8 <sensorsTask+0x580>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a55      	ldr	r2, [pc, #340]	@ (8001dfc <sensorsTask+0x584>)
 8001ca6:	6a12      	ldr	r2, [r2, #32]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f86a 	bl	8000d84 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7fe ff5b 	bl	8000b70 <__aeabi_fsub>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	607b      	str	r3, [r7, #4]
					stErrAxis.z = gstSensor.Acc.x * rMat[2][1] - gstSensor.Acc.y * rMat[2][0];
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001df8 <sensorsTask+0x580>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8001dfc <sensorsTask+0x584>)
 8001cc4:	69d2      	ldr	r2, [r2, #28]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f85b 	bl	8000d84 <__aeabi_fmul>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461c      	mov	r4, r3
 8001cd2:	4b49      	ldr	r3, [pc, #292]	@ (8001df8 <sensorsTask+0x580>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a49      	ldr	r2, [pc, #292]	@ (8001dfc <sensorsTask+0x584>)
 8001cd8:	6992      	ldr	r2, [r2, #24]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f851 	bl	8000d84 <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7fe ff42 	bl	8000b70 <__aeabi_fsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60bb      	str	r3, [r7, #8]
				
					//误差累计积分
					gstIntErrAxis.x += gKi * stErrAxis.x * gDeltaT;
 8001cf0:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <sensorsTask+0x588>)
 8001cf2:	681c      	ldr	r4, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4a43      	ldr	r2, [pc, #268]	@ (8001e04 <sensorsTask+0x58c>)
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f841 	bl	8000d84 <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <sensorsTask+0x590>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	f7ff f839 	bl	8000d84 <__aeabi_fmul>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7fe ff2c 	bl	8000b74 <__addsf3>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <sensorsTask+0x588>)
 8001d22:	601a      	str	r2, [r3, #0]
					gstIntErrAxis.y += gKi * stErrAxis.y * gDeltaT;
 8001d24:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <sensorsTask+0x588>)
 8001d26:	685c      	ldr	r4, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a36      	ldr	r2, [pc, #216]	@ (8001e04 <sensorsTask+0x58c>)
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f827 	bl	8000d84 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <sensorsTask+0x590>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f7ff f81f 	bl	8000d84 <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7fe ff12 	bl	8000b74 <__addsf3>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <sensorsTask+0x588>)
 8001d56:	605a      	str	r2, [r3, #4]
					gstIntErrAxis.z += gKi * stErrAxis.z * gDeltaT;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <sensorsTask+0x588>)
 8001d5a:	689c      	ldr	r4, [r3, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4a29      	ldr	r2, [pc, #164]	@ (8001e04 <sensorsTask+0x58c>)
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f80d 	bl	8000d84 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <sensorsTask+0x590>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7ff f805 	bl	8000d84 <__aeabi_fmul>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7fe fef8 	bl	8000b74 <__addsf3>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <sensorsTask+0x588>)
 8001d8a:	609a      	str	r2, [r3, #8]
				
					//用叉积误差来做PI修正陀螺零偏，即抵消陀螺读数中的偏移量
					gstSensor.Gyro.x += gKp * stErrAxis.x + gstIntErrAxis.x;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <sensorsTask+0x580>)
 8001d8e:	68dc      	ldr	r4, [r3, #12]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <sensorsTask+0x594>)
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fff3 	bl	8000d84 <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <sensorsTask+0x588>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f7fe fee3 	bl	8000b74 <__addsf3>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7fe fede 	bl	8000b74 <__addsf3>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <sensorsTask+0x580>)
 8001dbe:	60da      	str	r2, [r3, #12]
					gstSensor.Gyro.y += gKp * stErrAxis.y + gstIntErrAxis.y;
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <sensorsTask+0x580>)
 8001dc2:	691c      	ldr	r4, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <sensorsTask+0x594>)
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffd9 	bl	8000d84 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <sensorsTask+0x588>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f7fe fec9 	bl	8000b74 <__addsf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7fe fec4 	bl	8000b74 <__addsf3>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b01      	ldr	r3, [pc, #4]	@ (8001df8 <sensorsTask+0x580>)
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	e00c      	b.n	8001e10 <sensorsTask+0x598>
 8001df6:	bf00      	nop
 8001df8:	20000238 	.word	0x20000238
 8001dfc:	20001a68 	.word	0x20001a68
 8001e00:	20001a8c 	.word	0x20001a8c
 8001e04:	20000008 	.word	0x20000008
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	20000004 	.word	0x20000004
					gstSensor.Gyro.z += gKp * stErrAxis.z + gstIntErrAxis.z;
 8001e10:	4b94      	ldr	r3, [pc, #592]	@ (8002064 <sensorsTask+0x7ec>)
 8001e12:	695c      	ldr	r4, [r3, #20]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4a94      	ldr	r2, [pc, #592]	@ (8002068 <sensorsTask+0x7f0>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ffb1 	bl	8000d84 <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b91      	ldr	r3, [pc, #580]	@ (800206c <sensorsTask+0x7f4>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f7fe fea1 	bl	8000b74 <__addsf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4619      	mov	r1, r3
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7fe fe9c 	bl	8000b74 <__addsf3>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <sensorsTask+0x7ec>)
 8001e42:	615a      	str	r2, [r3, #20]
			}

			float q0Last = q0;
 8001e44:	4b8a      	ldr	r3, [pc, #552]	@ (8002070 <sensorsTask+0x7f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
			float q1Last = q1;
 8001e4a:	4b8a      	ldr	r3, [pc, #552]	@ (8002074 <sensorsTask+0x7fc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	617b      	str	r3, [r7, #20]
			float q2Last = q2;
 8001e50:	4b89      	ldr	r3, [pc, #548]	@ (8002078 <sensorsTask+0x800>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	613b      	str	r3, [r7, #16]
			float q3Last = q3;
 8001e56:	4b89      	ldr	r3, [pc, #548]	@ (800207c <sensorsTask+0x804>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]
			q0 += (-q1Last * gstSensor.Gyro.x - q2Last * gstSensor.Gyro.y - q3Last * gstSensor.Gyro.z) * gDeltaT/2;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001e62:	4a80      	ldr	r2, [pc, #512]	@ (8002064 <sensorsTask+0x7ec>)
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff8b 	bl	8000d84 <__aeabi_fmul>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461c      	mov	r4, r3
 8001e72:	4b7c      	ldr	r3, [pc, #496]	@ (8002064 <sensorsTask+0x7ec>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	6939      	ldr	r1, [r7, #16]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff83 	bl	8000d84 <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7fe fe74 	bl	8000b70 <__aeabi_fsub>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461c      	mov	r4, r3
 8001e8c:	4b75      	ldr	r3, [pc, #468]	@ (8002064 <sensorsTask+0x7ec>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe ff76 	bl	8000d84 <__aeabi_fmul>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7fe fe67 	bl	8000b70 <__aeabi_fsub>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b76      	ldr	r3, [pc, #472]	@ (8002080 <sensorsTask+0x808>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7fe ff69 	bl	8000d84 <__aeabi_fmul>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f817 	bl	8000eec <__aeabi_fdiv>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	@ (8002070 <sensorsTask+0x7f8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f7fe fe53 	bl	8000b74 <__addsf3>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b67      	ldr	r3, [pc, #412]	@ (8002070 <sensorsTask+0x7f8>)
 8001ed4:	601a      	str	r2, [r3, #0]
			q1 += ( q0Last * gstSensor.Gyro.x + q2Last * gstSensor.Gyro.z - q3Last * gstSensor.Gyro.y) * gDeltaT/2;
 8001ed6:	4b63      	ldr	r3, [pc, #396]	@ (8002064 <sensorsTask+0x7ec>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ff51 	bl	8000d84 <__aeabi_fmul>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8002064 <sensorsTask+0x7ec>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	6939      	ldr	r1, [r7, #16]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe ff49 	bl	8000d84 <__aeabi_fmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7fe fe3c 	bl	8000b74 <__addsf3>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461c      	mov	r4, r3
 8001f00:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <sensorsTask+0x7ec>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe ff3c 	bl	8000d84 <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7fe fe2d 	bl	8000b70 <__aeabi_fsub>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b59      	ldr	r3, [pc, #356]	@ (8002080 <sensorsTask+0x808>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f7fe ff2f 	bl	8000d84 <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ffdd 	bl	8000eec <__aeabi_fdiv>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b4f      	ldr	r3, [pc, #316]	@ (8002074 <sensorsTask+0x7fc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f7fe fe19 	bl	8000b74 <__addsf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b4b      	ldr	r3, [pc, #300]	@ (8002074 <sensorsTask+0x7fc>)
 8001f48:	601a      	str	r2, [r3, #0]
			q2 += ( q0Last * gstSensor.Gyro.y - q1Last * gstSensor.Gyro.z + q3Last * gstSensor.Gyro.x) * gDeltaT/2;
 8001f4a:	4b46      	ldr	r3, [pc, #280]	@ (8002064 <sensorsTask+0x7ec>)
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe ff17 	bl	8000d84 <__aeabi_fmul>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461c      	mov	r4, r3
 8001f5a:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <sensorsTask+0x7ec>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ff0f 	bl	8000d84 <__aeabi_fmul>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7fe fe00 	bl	8000b70 <__aeabi_fsub>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461c      	mov	r4, r3
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <sensorsTask+0x7ec>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe ff02 	bl	8000d84 <__aeabi_fmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4619      	mov	r1, r3
 8001f84:	4620      	mov	r0, r4
 8001f86:	f7fe fdf5 	bl	8000b74 <__addsf3>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <sensorsTask+0x808>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4610      	mov	r0, r2
 8001f96:	f7fe fef5 	bl	8000d84 <__aeabi_fmul>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe ffa3 	bl	8000eec <__aeabi_fdiv>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <sensorsTask+0x800>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe fddf 	bl	8000b74 <__addsf3>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <sensorsTask+0x800>)
 8001fbc:	601a      	str	r2, [r3, #0]
			q3 += ( q0Last * gstSensor.Gyro.z + q1Last * gstSensor.Gyro.y - q2Last * gstSensor.Gyro.x) * gDeltaT/2;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <sensorsTask+0x7ec>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fedd 	bl	8000d84 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461c      	mov	r4, r3
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <sensorsTask+0x7ec>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	6979      	ldr	r1, [r7, #20]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fed5 	bl	8000d84 <__aeabi_fmul>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7fe fdc8 	bl	8000b74 <__addsf3>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <sensorsTask+0x7ec>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fec8 	bl	8000d84 <__aeabi_fmul>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7fe fdb9 	bl	8000b70 <__aeabi_fsub>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <sensorsTask+0x808>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7fe febb 	bl	8000d84 <__aeabi_fmul>
 800200e:	4603      	mov	r3, r0
 8002010:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe ff69 	bl	8000eec <__aeabi_fdiv>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <sensorsTask+0x804>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f7fe fda5 	bl	8000b74 <__addsf3>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <sensorsTask+0x804>)
 8002030:	601a      	str	r2, [r3, #0]

			//单位化四元数
			normalize = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002032:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <sensorsTask+0x7f8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0e      	ldr	r2, [pc, #56]	@ (8002070 <sensorsTask+0x7f8>)
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fea1 	bl	8000d84 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	461c      	mov	r4, r3
 8002046:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <sensorsTask+0x7fc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <sensorsTask+0x7fc>)
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe97 	bl	8000d84 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe fd8a 	bl	8000b74 <__addsf3>
 8002060:	e010      	b.n	8002084 <sensorsTask+0x80c>
 8002062:	bf00      	nop
 8002064:	20000238 	.word	0x20000238
 8002068:	20000004 	.word	0x20000004
 800206c:	20001a8c 	.word	0x20001a8c
 8002070:	20000010 	.word	0x20000010
 8002074:	20001a98 	.word	0x20001a98
 8002078:	20001a9c 	.word	0x20001a9c
 800207c:	20001aa0 	.word	0x20001aa0
 8002080:	2000000c 	.word	0x2000000c
 8002084:	4603      	mov	r3, r0
 8002086:	461c      	mov	r4, r3
 8002088:	4b92      	ldr	r3, [pc, #584]	@ (80022d4 <sensorsTask+0xa5c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a91      	ldr	r2, [pc, #580]	@ (80022d4 <sensorsTask+0xa5c>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fe76 	bl	8000d84 <__aeabi_fmul>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f7fe fd69 	bl	8000b74 <__addsf3>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461c      	mov	r4, r3
 80020a6:	4b8c      	ldr	r3, [pc, #560]	@ (80022d8 <sensorsTask+0xa60>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a8b      	ldr	r2, [pc, #556]	@ (80022d8 <sensorsTask+0xa60>)
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fe67 	bl	8000d84 <__aeabi_fmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7fe fd5a 	bl	8000b74 <__addsf3>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f9aa 	bl	800141c <invSqrt>
 80020c8:	61f8      	str	r0, [r7, #28]
			q0 *= normalize;
 80020ca:	4b84      	ldr	r3, [pc, #528]	@ (80022dc <sensorsTask+0xa64>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69f9      	ldr	r1, [r7, #28]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fe57 	bl	8000d84 <__aeabi_fmul>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b80      	ldr	r3, [pc, #512]	@ (80022dc <sensorsTask+0xa64>)
 80020dc:	601a      	str	r2, [r3, #0]
			q1 *= normalize;
 80020de:	4b80      	ldr	r3, [pc, #512]	@ (80022e0 <sensorsTask+0xa68>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69f9      	ldr	r1, [r7, #28]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fe4d 	bl	8000d84 <__aeabi_fmul>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <sensorsTask+0xa68>)
 80020f0:	601a      	str	r2, [r3, #0]
			q2 *= normalize;
 80020f2:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <sensorsTask+0xa5c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69f9      	ldr	r1, [r7, #28]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fe43 	bl	8000d84 <__aeabi_fmul>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	4b74      	ldr	r3, [pc, #464]	@ (80022d4 <sensorsTask+0xa5c>)
 8002104:	601a      	str	r2, [r3, #0]
			q3 *= normalize;
 8002106:	4b74      	ldr	r3, [pc, #464]	@ (80022d8 <sensorsTask+0xa60>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69f9      	ldr	r1, [r7, #28]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fe39 	bl	8000d84 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	4b70      	ldr	r3, [pc, #448]	@ (80022d8 <sensorsTask+0xa60>)
 8002118:	601a      	str	r2, [r3, #0]

			//计算旋转矩阵
			rMat[0][0] = 1.0f - 2.0f * q2*q2 - 2.0f * q3*q3;
 800211a:	4b6e      	ldr	r3, [pc, #440]	@ (80022d4 <sensorsTask+0xa5c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fd27 	bl	8000b74 <__addsf3>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	4b6a      	ldr	r3, [pc, #424]	@ (80022d4 <sensorsTask+0xa5c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f7fe fe27 	bl	8000d84 <__aeabi_fmul>
 8002136:	4603      	mov	r3, r0
 8002138:	4619      	mov	r1, r3
 800213a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800213e:	f7fe fd17 	bl	8000b70 <__aeabi_fsub>
 8002142:	4603      	mov	r3, r0
 8002144:	461c      	mov	r4, r3
 8002146:	4b64      	ldr	r3, [pc, #400]	@ (80022d8 <sensorsTask+0xa60>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fd11 	bl	8000b74 <__addsf3>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	4b60      	ldr	r3, [pc, #384]	@ (80022d8 <sensorsTask+0xa60>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f7fe fe11 	bl	8000d84 <__aeabi_fmul>
 8002162:	4603      	mov	r3, r0
 8002164:	4619      	mov	r1, r3
 8002166:	4620      	mov	r0, r4
 8002168:	f7fe fd02 	bl	8000b70 <__aeabi_fsub>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b5c      	ldr	r3, [pc, #368]	@ (80022e4 <sensorsTask+0xa6c>)
 8002172:	601a      	str	r2, [r3, #0]
			rMat[0][1] = 2.0f * (q1*q2 + (-q0)*q3);
 8002174:	4b5a      	ldr	r3, [pc, #360]	@ (80022e0 <sensorsTask+0xa68>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <sensorsTask+0xa5c>)
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fe00 	bl	8000d84 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	461c      	mov	r4, r3
 8002188:	4b54      	ldr	r3, [pc, #336]	@ (80022dc <sensorsTask+0xa64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002190:	4a51      	ldr	r2, [pc, #324]	@ (80022d8 <sensorsTask+0xa60>)
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fdf4 	bl	8000d84 <__aeabi_fmul>
 800219c:	4603      	mov	r3, r0
 800219e:	4619      	mov	r1, r3
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7fe fce7 	bl	8000b74 <__addsf3>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fce2 	bl	8000b74 <__addsf3>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <sensorsTask+0xa6c>)
 80021b6:	605a      	str	r2, [r3, #4]
			rMat[0][2] = 2.0f * (q1*q3 - (-q0)*q2);
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <sensorsTask+0xa68>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a46      	ldr	r2, [pc, #280]	@ (80022d8 <sensorsTask+0xa60>)
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fdde 	bl	8000d84 <__aeabi_fmul>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461c      	mov	r4, r3
 80021cc:	4b43      	ldr	r3, [pc, #268]	@ (80022dc <sensorsTask+0xa64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a40      	ldr	r2, [pc, #256]	@ (80022d4 <sensorsTask+0xa5c>)
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fdd4 	bl	8000d84 <__aeabi_fmul>
 80021dc:	4603      	mov	r3, r0
 80021de:	4619      	mov	r1, r3
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fe fcc7 	bl	8000b74 <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4619      	mov	r1, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fcc2 	bl	8000b74 <__addsf3>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <sensorsTask+0xa6c>)
 80021f6:	609a      	str	r2, [r3, #8]

			rMat[1][0] = 2.0f * (q1*q2 - (-q0)*q3);
 80021f8:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <sensorsTask+0xa68>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a35      	ldr	r2, [pc, #212]	@ (80022d4 <sensorsTask+0xa5c>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fdbe 	bl	8000d84 <__aeabi_fmul>
 8002208:	4603      	mov	r3, r0
 800220a:	461c      	mov	r4, r3
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <sensorsTask+0xa64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <sensorsTask+0xa60>)
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fdb4 	bl	8000d84 <__aeabi_fmul>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	4620      	mov	r0, r4
 8002222:	f7fe fca7 	bl	8000b74 <__addsf3>
 8002226:	4603      	mov	r3, r0
 8002228:	4619      	mov	r1, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fca2 	bl	8000b74 <__addsf3>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <sensorsTask+0xa6c>)
 8002236:	60da      	str	r2, [r3, #12]
			rMat[1][1] = 1.0f - 2.0f * q1*q1 - 2.0f * q3*q3;
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <sensorsTask+0xa68>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fc98 	bl	8000b74 <__addsf3>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <sensorsTask+0xa68>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7fe fd98 	bl	8000d84 <__aeabi_fmul>
 8002254:	4603      	mov	r3, r0
 8002256:	4619      	mov	r1, r3
 8002258:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800225c:	f7fe fc88 	bl	8000b70 <__aeabi_fsub>
 8002260:	4603      	mov	r3, r0
 8002262:	461c      	mov	r4, r3
 8002264:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <sensorsTask+0xa60>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fc82 	bl	8000b74 <__addsf3>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <sensorsTask+0xa60>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7fe fd82 	bl	8000d84 <__aeabi_fmul>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	4620      	mov	r0, r4
 8002286:	f7fe fc73 	bl	8000b70 <__aeabi_fsub>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <sensorsTask+0xa6c>)
 8002290:	611a      	str	r2, [r3, #16]
			rMat[1][2] = 2.0f * (q2*q3 + (-q0)*q1);
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <sensorsTask+0xa5c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <sensorsTask+0xa60>)
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fd71 	bl	8000d84 <__aeabi_fmul>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461c      	mov	r4, r3
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <sensorsTask+0xa64>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <sensorsTask+0xa68>)
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd65 	bl	8000d84 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	4620      	mov	r0, r4
 80022c0:	f7fe fc58 	bl	8000b74 <__addsf3>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fc53 	bl	8000b74 <__addsf3>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	e009      	b.n	80022e8 <sensorsTask+0xa70>
 80022d4:	20001a9c 	.word	0x20001a9c
 80022d8:	20001aa0 	.word	0x20001aa0
 80022dc:	20000010 	.word	0x20000010
 80022e0:	20001a98 	.word	0x20001a98
 80022e4:	20001a68 	.word	0x20001a68
 80022e8:	4b61      	ldr	r3, [pc, #388]	@ (8002470 <sensorsTask+0xbf8>)
 80022ea:	615a      	str	r2, [r3, #20]

			rMat[2][0] = 2.0f * (q1*q3 + (-q0)*q2);
 80022ec:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <sensorsTask+0xbfc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a61      	ldr	r2, [pc, #388]	@ (8002478 <sensorsTask+0xc00>)
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fd44 	bl	8000d84 <__aeabi_fmul>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461c      	mov	r4, r3
 8002300:	4b5e      	ldr	r3, [pc, #376]	@ (800247c <sensorsTask+0xc04>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002308:	4a5d      	ldr	r2, [pc, #372]	@ (8002480 <sensorsTask+0xc08>)
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fd38 	bl	8000d84 <__aeabi_fmul>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	4620      	mov	r0, r4
 800231a:	f7fe fc2b 	bl	8000b74 <__addsf3>
 800231e:	4603      	mov	r3, r0
 8002320:	4619      	mov	r1, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fc26 	bl	8000b74 <__addsf3>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b50      	ldr	r3, [pc, #320]	@ (8002470 <sensorsTask+0xbf8>)
 800232e:	619a      	str	r2, [r3, #24]
			rMat[2][1] = 2.0f * (q2*q3 - (-q0)*q1);
 8002330:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <sensorsTask+0xc08>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a50      	ldr	r2, [pc, #320]	@ (8002478 <sensorsTask+0xc00>)
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fd22 	bl	8000d84 <__aeabi_fmul>
 8002340:	4603      	mov	r3, r0
 8002342:	461c      	mov	r4, r3
 8002344:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <sensorsTask+0xc04>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a4a      	ldr	r2, [pc, #296]	@ (8002474 <sensorsTask+0xbfc>)
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fd18 	bl	8000d84 <__aeabi_fmul>
 8002354:	4603      	mov	r3, r0
 8002356:	4619      	mov	r1, r3
 8002358:	4620      	mov	r0, r4
 800235a:	f7fe fc0b 	bl	8000b74 <__addsf3>
 800235e:	4603      	mov	r3, r0
 8002360:	4619      	mov	r1, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fc06 	bl	8000b74 <__addsf3>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b40      	ldr	r3, [pc, #256]	@ (8002470 <sensorsTask+0xbf8>)
 800236e:	61da      	str	r2, [r3, #28]
			rMat[2][2] = 1.0f - 2.0f * q1*q1 - 2.0f * q2*q2;
 8002370:	4b40      	ldr	r3, [pc, #256]	@ (8002474 <sensorsTask+0xbfc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fbfc 	bl	8000b74 <__addsf3>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <sensorsTask+0xbfc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f7fe fcfc 	bl	8000d84 <__aeabi_fmul>
 800238c:	4603      	mov	r3, r0
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002394:	f7fe fbec 	bl	8000b70 <__aeabi_fsub>
 8002398:	4603      	mov	r3, r0
 800239a:	461c      	mov	r4, r3
 800239c:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <sensorsTask+0xc08>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fbe6 	bl	8000b74 <__addsf3>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <sensorsTask+0xc08>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f7fe fce6 	bl	8000d84 <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4620      	mov	r0, r4
 80023be:	f7fe fbd7 	bl	8000b70 <__aeabi_fsub>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <sensorsTask+0xbf8>)
 80023c8:	621a      	str	r2, [r3, #32]

			//欧拉角
			gstStatus.pitch = -asinf(rMat[2][0]) * 57.29578f;
 80023ca:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <sensorsTask+0xbf8>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f00b fa84 	bl	800d8dc <asinf>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80023da:	492a      	ldr	r1, [pc, #168]	@ (8002484 <sensorsTask+0xc0c>)
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fcd1 	bl	8000d84 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <sensorsTask+0xc10>)
 80023e8:	601a      	str	r2, [r3, #0]
			gstStatus.roll = atan2f(rMat[2][1], rMat[2][2]) * 57.29578f;
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <sensorsTask+0xbf8>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a20      	ldr	r2, [pc, #128]	@ (8002470 <sensorsTask+0xbf8>)
 80023f0:	6a12      	ldr	r2, [r2, #32]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00b fa91 	bl	800d91c <atan2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4921      	ldr	r1, [pc, #132]	@ (8002484 <sensorsTask+0xc0c>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fcc0 	bl	8000d84 <__aeabi_fmul>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <sensorsTask+0xc10>)
 800240a:	605a      	str	r2, [r3, #4]
			gstStatus.yaw = atan2f(rMat[1][0], rMat[0][0]) * 57.29578f;
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <sensorsTask+0xbf8>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <sensorsTask+0xbf8>)
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f00b fa80 	bl	800d91c <atan2f>
 800241c:	4603      	mov	r3, r0
 800241e:	4919      	ldr	r1, [pc, #100]	@ (8002484 <sensorsTask+0xc0c>)
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fcaf 	bl	8000d84 <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <sensorsTask+0xc10>)
 800242c:	609a      	str	r2, [r3, #8]

			//cnt++;
			//if(cnt%500==0)
			printf("%f %f %f\r\n",gstStatus.pitch,gstStatus.roll,gstStatus.yaw);
 800242e:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <sensorsTask+0xc10>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd fff8 	bl	8000428 <__aeabi_f2d>
 8002438:	4680      	mov	r8, r0
 800243a:	4689      	mov	r9, r1
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <sensorsTask+0xc10>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fd fff1 	bl	8000428 <__aeabi_f2d>
 8002446:	4604      	mov	r4, r0
 8002448:	460d      	mov	r5, r1
 800244a:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <sensorsTask+0xc10>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fd ffea 	bl	8000428 <__aeabi_f2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800245c:	e9cd 4500 	strd	r4, r5, [sp]
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	4809      	ldr	r0, [pc, #36]	@ (800248c <sensorsTask+0xc14>)
 8002466:	f007 fd95 	bl	8009f94 <iprintf>
	{
 800246a:	f7ff ba13 	b.w	8001894 <sensorsTask+0x1c>
 800246e:	bf00      	nop
 8002470:	20001a68 	.word	0x20001a68
 8002474:	20001a98 	.word	0x20001a98
 8002478:	20001aa0 	.word	0x20001aa0
 800247c:	20000010 	.word	0x20000010
 8002480:	20001a9c 	.word	0x20001a9c
 8002484:	42652ee1 	.word	0x42652ee1
 8002488:	20001a58 	.word	0x20001a58
 800248c:	0800f370 	.word	0x0800f370

08002490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002496:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <MX_DMA_Init+0x68>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <MX_DMA_Init+0x68>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6153      	str	r3, [r2, #20]
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <MX_DMA_Init+0x68>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2105      	movs	r1, #5
 80024b2:	200c      	movs	r0, #12
 80024b4:	f000 fee3 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024b8:	200c      	movs	r0, #12
 80024ba:	f000 fefc 	bl	80032b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2105      	movs	r1, #5
 80024c2:	200d      	movs	r0, #13
 80024c4:	f000 fedb 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024c8:	200d      	movs	r0, #13
 80024ca:	f000 fef4 	bl	80032b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2105      	movs	r1, #5
 80024d2:	2010      	movs	r0, #16
 80024d4:	f000 fed3 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024d8:	2010      	movs	r0, #16
 80024da:	f000 feec 	bl	80032b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2105      	movs	r1, #5
 80024e2:	2011      	movs	r0, #17
 80024e4:	f000 fecb 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80024e8:	2011      	movs	r0, #17
 80024ea:	f000 fee4 	bl	80032b6 <HAL_NVIC_EnableIRQ>

}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000

080024fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a06      	ldr	r2, [pc, #24]	@ (8002524 <vApplicationGetIdleTaskMemory+0x28>)
 800250c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <vApplicationGetIdleTaskMemory+0x2c>)
 8002512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	@ 0x80
 8002518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	20001b54 	.word	0x20001b54
 8002528:	20001ba8 	.word	0x20001ba8

0800252c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800252c:	b5b0      	push	{r4, r5, r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <MX_FREERTOS_Init+0x30>)
 8002534:	1d3c      	adds	r4, r7, #4
 8002536:	461d      	mov	r5, r3
 8002538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800253a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f005 fc07 	bl	8007d5c <osThreadCreate>
 800254e:	4603      	mov	r3, r0
 8002550:	4a03      	ldr	r2, [pc, #12]	@ (8002560 <MX_FREERTOS_Init+0x34>)
 8002552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bdb0      	pop	{r4, r5, r7, pc}
 800255c:	0800f388 	.word	0x0800f388
 8002560:	20001b50 	.word	0x20001b50

08002564 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	//int p=-90,r=-90,y=-90;
    //1. init sensors..
    sensorsTask(); 
 800256c:	f7ff f984 	bl	8001878 <sensorsTask>

	  for(;;)
	  {
		osDelay(1000);
 8002570:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002574:	f005 fc3e 	bl	8007df4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8002578:	2201      	movs	r2, #1
 800257a:	2101      	movs	r1, #1
 800257c:	4806      	ldr	r0, [pc, #24]	@ (8002598 <StartDefaultTask+0x34>)
 800257e:	f001 fa1f 	bl	80039c0 <HAL_GPIO_WritePin>
		osDelay(10);
 8002582:	200a      	movs	r0, #10
 8002584:	f005 fc36 	bl	8007df4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2101      	movs	r1, #1
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <StartDefaultTask+0x34>)
 800258e:	f001 fa17 	bl	80039c0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8002592:	bf00      	nop
 8002594:	e7ec      	b.n	8002570 <StartDefaultTask+0xc>
 8002596:	bf00      	nop
 8002598:	40010800 	.word	0x40010800

0800259c <MX_GPIO_Init>:
     PB10   ------> S_TIM2_CH3
     PB6   ------> S_TIM4_CH1
     PB7   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	@ 0x28
 80025a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b0:	4b51      	ldr	r3, [pc, #324]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c8:	4b4b      	ldr	r3, [pc, #300]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a4a      	ldr	r2, [pc, #296]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025ce:	f043 0320 	orr.w	r3, r3, #32
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b48      	ldr	r3, [pc, #288]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e0:	4b45      	ldr	r3, [pc, #276]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a44      	ldr	r2, [pc, #272]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b42      	ldr	r3, [pc, #264]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	4b3f      	ldr	r3, [pc, #252]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a3e      	ldr	r2, [pc, #248]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <MX_GPIO_Init+0x15c>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CSN_Pin, GPIO_PIN_RESET);
 8002610:	2200      	movs	r2, #0
 8002612:	f240 1101 	movw	r1, #257	@ 0x101
 8002616:	4839      	ldr	r0, [pc, #228]	@ (80026fc <MX_GPIO_Init+0x160>)
 8002618:	f001 f9d2 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002622:	4837      	ldr	r0, [pc, #220]	@ (8002700 <MX_GPIO_Init+0x164>)
 8002624:	f001 f9cc 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8002628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800262c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	4831      	ldr	r0, [pc, #196]	@ (8002704 <MX_GPIO_Init+0x168>)
 800263e:	f001 f83b 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002642:	2301      	movs	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2302      	movs	r3, #2
 8002650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	4828      	ldr	r0, [pc, #160]	@ (80026fc <MX_GPIO_Init+0x160>)
 800265a:	f001 f82d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M4_Pin */
  GPIO_InitStruct.Pin = M4_Pin;
 800265e:	2302      	movs	r3, #2
 8002660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2302      	movs	r3, #2
 8002668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M4_GPIO_Port, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4822      	ldr	r0, [pc, #136]	@ (80026fc <MX_GPIO_Init+0x160>)
 8002672:	f001 f821 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_Pin M2_Pin M1_Pin */
  GPIO_InitStruct.Pin = M3_Pin|M2_Pin|M1_Pin;
 8002676:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800267a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2302      	movs	r3, #2
 8002682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	481d      	ldr	r0, [pc, #116]	@ (8002700 <MX_GPIO_Init+0x164>)
 800268c:	f001 f814 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8002690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002696:	2301      	movs	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4815      	ldr	r0, [pc, #84]	@ (8002700 <MX_GPIO_Init+0x164>)
 80026aa:	f001 f805 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 80026ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	480d      	ldr	r0, [pc, #52]	@ (80026fc <MX_GPIO_Init+0x160>)
 80026c8:	f000 fff6 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_GPIO_Init+0x16c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ea:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <MX_GPIO_Init+0x16c>)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	6053      	str	r3, [r2, #4]

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	@ 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010800 	.word	0x40010800
 8002700:	40010c00 	.word	0x40010c00
 8002704:	40011000 	.word	0x40011000
 8002708:	40010000 	.word	0x40010000

0800270c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <MX_I2C1_Init+0x50>)
 8002712:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <MX_I2C1_Init+0x54>)
 8002714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <MX_I2C1_Init+0x50>)
 8002718:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <MX_I2C1_Init+0x58>)
 800271a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800271c:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <MX_I2C1_Init+0x50>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MX_I2C1_Init+0x50>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <MX_I2C1_Init+0x50>)
 800272a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800272e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <MX_I2C1_Init+0x50>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <MX_I2C1_Init+0x50>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <MX_I2C1_Init+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <MX_I2C1_Init+0x50>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002748:	4804      	ldr	r0, [pc, #16]	@ (800275c <MX_I2C1_Init+0x50>)
 800274a:	f001 f951 	bl	80039f0 <HAL_I2C_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002754:	f000 f94b 	bl	80029ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20001da8 	.word	0x20001da8
 8002760:	40005400 	.word	0x40005400
 8002764:	000186a0 	.word	0x000186a0

08002768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4b      	ldr	r2, [pc, #300]	@ (80028b0 <HAL_I2C_MspInit+0x148>)
 8002784:	4293      	cmp	r3, r2
 8002786:	f040 808f 	bne.w	80028a8 <HAL_I2C_MspInit+0x140>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	4b4a      	ldr	r3, [pc, #296]	@ (80028b4 <HAL_I2C_MspInit+0x14c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4a49      	ldr	r2, [pc, #292]	@ (80028b4 <HAL_I2C_MspInit+0x14c>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6193      	str	r3, [r2, #24]
 8002796:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <HAL_I2C_MspInit+0x14c>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a8:	2312      	movs	r3, #18
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4840      	ldr	r0, [pc, #256]	@ (80028b8 <HAL_I2C_MspInit+0x150>)
 80027b8:	f000 ff7e 	bl	80036b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80027bc:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <HAL_I2C_MspInit+0x154>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d2:	4a3a      	ldr	r2, [pc, #232]	@ (80028bc <HAL_I2C_MspInit+0x154>)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_I2C_MspInit+0x14c>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4a35      	ldr	r2, [pc, #212]	@ (80028b4 <HAL_I2C_MspInit+0x14c>)
 80027de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027e2:	61d3      	str	r3, [r2, #28]
 80027e4:	4b33      	ldr	r3, [pc, #204]	@ (80028b4 <HAL_I2C_MspInit+0x14c>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80027f0:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 80027f2:	4a34      	ldr	r2, [pc, #208]	@ (80028c4 <HAL_I2C_MspInit+0x15c>)
 80027f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f6:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 80027f8:	2210      	movs	r2, #16
 80027fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fc:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002802:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 8002804:	2280      	movs	r2, #128	@ 0x80
 8002806:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002808:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002820:	4827      	ldr	r0, [pc, #156]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 8002822:	f000 fd63 	bl	80032ec <HAL_DMA_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 800282c:	f000 f8df 	bl	80029ee <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34
 8002836:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_I2C_MspInit+0x158>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800283c:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 800283e:	4a23      	ldr	r2, [pc, #140]	@ (80028cc <HAL_I2C_MspInit+0x164>)
 8002840:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002842:	4b21      	ldr	r3, [pc, #132]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002848:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002850:	2280      	movs	r2, #128	@ 0x80
 8002852:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002854:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285a:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800286c:	4816      	ldr	r0, [pc, #88]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 800286e:	f000 fd3d 	bl	80032ec <HAL_DMA_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8002878:	f000 f8b9 	bl	80029ee <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
 8002882:	4a11      	ldr	r2, [pc, #68]	@ (80028c8 <HAL_I2C_MspInit+0x160>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2105      	movs	r1, #5
 800288c:	201f      	movs	r0, #31
 800288e:	f000 fcf6 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002892:	201f      	movs	r0, #31
 8002894:	f000 fd0f 	bl	80032b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2105      	movs	r1, #5
 800289c:	2020      	movs	r0, #32
 800289e:	f000 fcee 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80028a2:	2020      	movs	r0, #32
 80028a4:	f000 fd07 	bl	80032b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	@ 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40005400 	.word	0x40005400
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010c00 	.word	0x40010c00
 80028bc:	40010000 	.word	0x40010000
 80028c0:	20001dfc 	.word	0x20001dfc
 80028c4:	4002006c 	.word	0x4002006c
 80028c8:	20001e40 	.word	0x20001e40
 80028cc:	40020080 	.word	0x40020080

080028d0 <Show_Log>:
#include "stdio.h"



void Show_Log()
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    printf("\t\033[1;31;40m     ______  _____  __        ___    ____  \033[0m\r\n");
 80028d4:	4808      	ldr	r0, [pc, #32]	@ (80028f8 <Show_Log+0x28>)
 80028d6:	f007 fbc5 	bl	800a064 <puts>
    printf("\t\033[1;31;40m    /  _/  |/  / / / /  _   _|__ \\  / __ \ \033[0m\r\n");
 80028da:	4808      	ldr	r0, [pc, #32]	@ (80028fc <Show_Log+0x2c>)
 80028dc:	f007 fbc2 	bl	800a064 <puts>
    printf("\t\033[1;31;40m    / // /|_/ / / / /  | | / /_/ / / / / / \033[0m\r\n");
 80028e0:	4807      	ldr	r0, [pc, #28]	@ (8002900 <Show_Log+0x30>)
 80028e2:	f007 fbbf 	bl	800a064 <puts>
    printf("\t\033[1;31;40m  _/ // /  / / /_/ /   | |/ / __/_/ /_/ /  \033[0m\r\n");
 80028e6:	4807      	ldr	r0, [pc, #28]	@ (8002904 <Show_Log+0x34>)
 80028e8:	f007 fbbc 	bl	800a064 <puts>
    printf("\t\033[1;31;40m /___/_/  /_/\____ /    |___/____(_)____/   \033[0m\r\n");
 80028ec:	4806      	ldr	r0, [pc, #24]	@ (8002908 <Show_Log+0x38>)
 80028ee:	f007 fbb9 	bl	800a064 <puts>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0800f3a4 	.word	0x0800f3a4
 80028fc:	0800f3e0 	.word	0x0800f3e0
 8002900:	0800f41c 	.word	0x0800f41c
 8002904:	0800f458 	.word	0x0800f458
 8002908:	0800f494 	.word	0x0800f494

0800290c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002910:	f000 fb58 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002914:	f000 f826 	bl	8002964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002918:	f7ff fe40 	bl	800259c <MX_GPIO_Init>
  MX_DMA_Init();
 800291c:	f7ff fdb8 	bl	8002490 <MX_DMA_Init>
  MX_I2C1_Init();
 8002920:	f7ff fef4 	bl	800270c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002924:	f000 f86a 	bl	80029fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002928:	f000 fab2 	bl	8002e90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Show_Log();
 800292c:	f7ff ffd0 	bl	80028d0 <Show_Log>
  //Driver_Init();
  NRF24L01_Init();
 8002930:	f005 f898 	bl	8007a64 <NRF24L01_Init>

  while(NRF24L01_Check())
 8002934:	e002      	b.n	800293c <main+0x30>
  {
	  HAL_Delay(200);
 8002936:	20c8      	movs	r0, #200	@ 0xc8
 8002938:	f000 fba6 	bl	8003088 <HAL_Delay>
  while(NRF24L01_Check())
 800293c:	f005 f91a 	bl	8007b74 <NRF24L01_Check>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f7      	bne.n	8002936 <main+0x2a>
  //SPL06_Init();
  //QMI8658_Init();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002946:	f7ff fdf1 	bl	800252c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800294a:	f005 fa00 	bl	8007d4e <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(800);
 800294e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002952:	f000 fb99 	bl	8003088 <HAL_Delay>
	  printf("hello world!\r\n");
 8002956:	4802      	ldr	r0, [pc, #8]	@ (8002960 <main+0x54>)
 8002958:	f007 fb84 	bl	800a064 <puts>
	  HAL_Delay(800);
 800295c:	bf00      	nop
 800295e:	e7f6      	b.n	800294e <main+0x42>
 8002960:	0800f4d0 	.word	0x0800f4d0

08002964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b090      	sub	sp, #64	@ 0x40
 8002968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296a:	f107 0318 	add.w	r3, r7, #24
 800296e:	2228      	movs	r2, #40	@ 0x28
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f007 fc78 	bl	800a268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002986:	2301      	movs	r3, #1
 8002988:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800298a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800298e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002994:	2301      	movs	r3, #1
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002998:	2302      	movs	r3, #2
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800299c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80029a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a8:	f107 0318 	add.w	r3, r7, #24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fd93 	bl	80064d8 <HAL_RCC_OscConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80029b8:	f000 f819 	bl	80029ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029bc:	230f      	movs	r3, #15
 80029be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c0:	2302      	movs	r3, #2
 80029c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2102      	movs	r1, #2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 f800 	bl	80069dc <HAL_RCC_ClockConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80029e2:	f000 f804 	bl	80029ee <Error_Handler>
  }
}
 80029e6:	bf00      	nop
 80029e8:	3740      	adds	r7, #64	@ 0x40
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f2:	b672      	cpsid	i
}
 80029f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f6:	bf00      	nop
 80029f8:	e7fd      	b.n	80029f6 <Error_Handler+0x8>
	...

080029fc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a00:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <MX_SPI1_Init+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a06:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0e:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a30:	2210      	movs	r2, #16
 8002a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a48:	220a      	movs	r2, #10
 8002a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a4c:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a4e:	f004 f953 	bl	8006cf8 <HAL_SPI_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a58:	f7ff ffc9 	bl	80029ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20001e84 	.word	0x20001e84
 8002a64:	40013000 	.word	0x40013000

08002a68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a41      	ldr	r2, [pc, #260]	@ (8002b88 <HAL_SPI_MspInit+0x120>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d17b      	bne.n	8002b80 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a88:	4b40      	ldr	r3, [pc, #256]	@ (8002b8c <HAL_SPI_MspInit+0x124>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b8c <HAL_SPI_MspInit+0x124>)
 8002a8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b3d      	ldr	r3, [pc, #244]	@ (8002b8c <HAL_SPI_MspInit+0x124>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8002b8c <HAL_SPI_MspInit+0x124>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a39      	ldr	r2, [pc, #228]	@ (8002b8c <HAL_SPI_MspInit+0x124>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b37      	ldr	r3, [pc, #220]	@ (8002b8c <HAL_SPI_MspInit+0x124>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ab8:	23a0      	movs	r3, #160	@ 0xa0
 8002aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4831      	ldr	r0, [pc, #196]	@ (8002b90 <HAL_SPI_MspInit+0x128>)
 8002acc:	f000 fdf4 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ad0:	2340      	movs	r3, #64	@ 0x40
 8002ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	482b      	ldr	r0, [pc, #172]	@ (8002b90 <HAL_SPI_MspInit+0x128>)
 8002ae4:	f000 fde8 	bl	80036b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002aea:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <HAL_SPI_MspInit+0x130>)
 8002aec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aee:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002afa:	4b26      	ldr	r3, [pc, #152]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002afc:	2280      	movs	r2, #128	@ 0x80
 8002afe:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b00:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b06:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b18:	481e      	ldr	r0, [pc, #120]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b1a:	f000 fbe7 	bl	80032ec <HAL_DMA_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8002b24:	f7ff ff63 	bl	80029ee <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b2e:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_SPI_MspInit+0x12c>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <HAL_SPI_MspInit+0x138>)
 8002b38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b3a:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b48:	2280      	movs	r2, #128	@ 0x80
 8002b4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b58:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b64:	480d      	ldr	r0, [pc, #52]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b66:	f000 fbc1 	bl	80032ec <HAL_DMA_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002b70:	f7ff ff3d 	bl	80029ee <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a09      	ldr	r2, [pc, #36]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b78:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <HAL_SPI_MspInit+0x134>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013000 	.word	0x40013000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010800 	.word	0x40010800
 8002b94:	20001edc 	.word	0x20001edc
 8002b98:	4002001c 	.word	0x4002001c
 8002b9c:	20001f20 	.word	0x20001f20
 8002ba0:	40020030 	.word	0x40020030

08002ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002baa:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <HAL_MspInit+0x68>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <HAL_MspInit+0x68>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6193      	str	r3, [r2, #24]
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_MspInit+0x68>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_MspInit+0x68>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a11      	ldr	r2, [pc, #68]	@ (8002c0c <HAL_MspInit+0x68>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	61d3      	str	r3, [r2, #28]
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_MspInit+0x68>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	210f      	movs	r1, #15
 8002bde:	f06f 0001 	mvn.w	r0, #1
 8002be2:	f000 fb4c 	bl	800327e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_MspInit+0x6c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <HAL_MspInit+0x6c>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40010000 	.word	0x40010000

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4c:	f000 fa00 	bl	8003050 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c50:	f005 fe5a 	bl	8008908 <xTaskGetSchedulerState>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c5a:	f006 f845 	bl	8008ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <DMA1_Channel2_IRQHandler+0x10>)
 8002c6a:	f000 fc11 	bl	8003490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20001edc 	.word	0x20001edc

08002c78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <DMA1_Channel3_IRQHandler+0x10>)
 8002c7e:	f000 fc07 	bl	8003490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20001f20 	.word	0x20001f20

08002c8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <DMA1_Channel6_IRQHandler+0x10>)
 8002c92:	f000 fbfd 	bl	8003490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20001dfc 	.word	0x20001dfc

08002ca0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <DMA1_Channel7_IRQHandler+0x10>)
 8002ca6:	f000 fbf3 	bl	8003490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20001e40 	.word	0x20001e40

08002cb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <I2C1_EV_IRQHandler+0x10>)
 8002cba:	f001 fb5f 	bl	800437c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20001da8 	.word	0x20001da8

08002cc8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	@ (8002cd8 <I2C1_ER_IRQHandler+0x10>)
 8002cce:	f001 fcc6 	bl	800465e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20001da8 	.word	0x20001da8

08002cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <_kill>:

int _kill(int pid, int sig)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf4:	f007 fb0a 	bl	800a30c <__errno>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2216      	movs	r2, #22
 8002cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_exit>:

void _exit (int status)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d12:	f04f 31ff 	mov.w	r1, #4294967295
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffe7 	bl	8002cea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <_exit+0x12>

08002d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e00a      	b.n	8002d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d32:	f3af 8000 	nop.w
 8002d36:	4601      	mov	r1, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbf0      	blt.n	8002d32 <_read+0x12>
  }

  return len;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e009      	b.n	8002d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f879 	bl	8002e6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf1      	blt.n	8002d6c <_write+0x12>
  }
  return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:

int _close(int file)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db8:	605a      	str	r2, [r3, #4]
  return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <_isatty>:

int _isatty(int file)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <_sbrk+0x5c>)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <_sbrk+0x60>)
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <_sbrk+0x64>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <_sbrk+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e16:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e24:	f007 fa72 	bl	800a30c <__errno>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e009      	b.n	8002e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e34:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <_sbrk+0x64>)
 8002e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20005000 	.word	0x20005000
 8002e54:	00000400 	.word	0x00000400
 8002e58:	20001f64 	.word	0x20001f64
 8002e5c:	20002e68 	.word	0x20002e68

08002e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002e74:	1d39      	adds	r1, r7, #4
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4803      	ldr	r0, [pc, #12]	@ (8002e8c <__io_putchar+0x20>)
 8002e7e:	f004 fbb6 	bl	80075ee <HAL_UART_Transmit>
  return ch;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20001f68 	.word	0x20001f68

08002e90 <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <MX_USART2_UART_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_USART2_UART_Init+0x4c>)
 8002ec8:	f004 fb41 	bl	800754e <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ed2:	f7ff fd8c 	bl	80029ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20001f68 	.word	0x20001f68
 8002ee0:	40004400 	.word	0x40004400

08002ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <HAL_UART_MspInit+0x88>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d12f      	bne.n	8002f64 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f04:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <HAL_UART_MspInit+0x8c>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a19      	ldr	r2, [pc, #100]	@ (8002f70 <HAL_UART_MspInit+0x8c>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0e:	61d3      	str	r3, [r2, #28]
 8002f10:	4b17      	ldr	r3, [pc, #92]	@ (8002f70 <HAL_UART_MspInit+0x8c>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <HAL_UART_MspInit+0x8c>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <HAL_UART_MspInit+0x8c>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6193      	str	r3, [r2, #24]
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <HAL_UART_MspInit+0x8c>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f34:	2304      	movs	r3, #4
 8002f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	4619      	mov	r1, r3
 8002f46:	480b      	ldr	r0, [pc, #44]	@ (8002f74 <HAL_UART_MspInit+0x90>)
 8002f48:	f000 fbb6 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4805      	ldr	r0, [pc, #20]	@ (8002f74 <HAL_UART_MspInit+0x90>)
 8002f60:	f000 fbaa 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f64:	bf00      	nop
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010800 	.word	0x40010800

08002f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f78:	f7ff ff72 	bl	8002e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f7c:	480b      	ldr	r0, [pc, #44]	@ (8002fac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f7e:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f80:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f94:	4c09      	ldr	r4, [pc, #36]	@ (8002fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f007 f9b9 	bl	800a318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fa6:	f7ff fcb1 	bl	800290c <main>
  bx lr
 8002faa:	4770      	bx	lr
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002fb4:	0800fdac 	.word	0x0800fdac
  ldr r2, =_sbss
 8002fb8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002fbc:	20002e64 	.word	0x20002e64

08002fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC1_2_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_Init+0x28>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a07      	ldr	r2, [pc, #28]	@ (8002fec <HAL_Init+0x28>)
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 f947 	bl	8003268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fda:	200f      	movs	r0, #15
 8002fdc:	f000 f808 	bl	8002ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe0:	f7ff fde0 	bl	8002ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff8:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_InitTick+0x54>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_InitTick+0x58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f95f 	bl	80032d2 <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00e      	b.n	800303c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d80a      	bhi.n	800303a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f000 f927 	bl	800327e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003030:	4a06      	ldr	r2, [pc, #24]	@ (800304c <HAL_InitTick+0x5c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000014 	.word	0x20000014
 8003048:	2000001c 	.word	0x2000001c
 800304c:	20000018 	.word	0x20000018

08003050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_IncTick+0x1c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_IncTick+0x20>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a03      	ldr	r2, [pc, #12]	@ (8003070 <HAL_IncTick+0x20>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	2000001c 	.word	0x2000001c
 8003070:	20001fb0 	.word	0x20001fb0

08003074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b02      	ldr	r3, [pc, #8]	@ (8003084 <HAL_GetTick+0x10>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	20001fb0 	.word	0x20001fb0

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff fff0 	bl	8003074 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffe0 	bl	8003074 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000001c 	.word	0x2000001c

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4906      	ldr	r1, [pc, #24]	@ (8003168 <__NVIC_EnableIRQ+0x34>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	@ (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	@ (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf28      	it	cs
 80031de:	2304      	movcs	r3, #4
 80031e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d902      	bls.n	80031f0 <NVIC_EncodePriority+0x30>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3b03      	subs	r3, #3
 80031ee:	e000      	b.n	80031f2 <NVIC_EncodePriority+0x32>
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43d9      	mvns	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	4313      	orrs	r3, r2
         );
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003234:	d301      	bcc.n	800323a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003236:	2301      	movs	r3, #1
 8003238:	e00f      	b.n	800325a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323a:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <SysTick_Config+0x40>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003242:	210f      	movs	r1, #15
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f7ff ff90 	bl	800316c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <SysTick_Config+0x40>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003252:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <SysTick_Config+0x40>)
 8003254:	2207      	movs	r2, #7
 8003256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	e000e010 	.word	0xe000e010

08003268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff2d 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003290:	f7ff ff42 	bl	8003118 <__NVIC_GetPriorityGrouping>
 8003294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7ff ff90 	bl	80031c0 <NVIC_EncodePriority>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff5f 	bl	800316c <__NVIC_SetPriority>
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff35 	bl	8003134 <__NVIC_EnableIRQ>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ffa2 	bl	8003224 <SysTick_Config>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e043      	b.n	800338a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <HAL_DMA_Init+0xa8>)
 800330a:	4413      	add	r3, r2
 800330c:	4a22      	ldr	r2, [pc, #136]	@ (8003398 <HAL_DMA_Init+0xac>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	009a      	lsls	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1f      	ldr	r2, [pc, #124]	@ (800339c <HAL_DMA_Init+0xb0>)
 800331e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003336:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800333a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	bffdfff8 	.word	0xbffdfff8
 8003398:	cccccccd 	.word	0xcccccccd
 800339c:	40020000 	.word	0x40020000

080033a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d005      	beq.n	80033c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2204      	movs	r2, #4
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e051      	b.n	8003468 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 020e 	bic.w	r2, r2, #14
 80033d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a22      	ldr	r2, [pc, #136]	@ (8003474 <HAL_DMA_Abort_IT+0xd4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d029      	beq.n	8003442 <HAL_DMA_Abort_IT+0xa2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a21      	ldr	r2, [pc, #132]	@ (8003478 <HAL_DMA_Abort_IT+0xd8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d022      	beq.n	800343e <HAL_DMA_Abort_IT+0x9e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <HAL_DMA_Abort_IT+0xdc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01a      	beq.n	8003438 <HAL_DMA_Abort_IT+0x98>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1e      	ldr	r2, [pc, #120]	@ (8003480 <HAL_DMA_Abort_IT+0xe0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d012      	beq.n	8003432 <HAL_DMA_Abort_IT+0x92>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1c      	ldr	r2, [pc, #112]	@ (8003484 <HAL_DMA_Abort_IT+0xe4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00a      	beq.n	800342c <HAL_DMA_Abort_IT+0x8c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <HAL_DMA_Abort_IT+0xe8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d102      	bne.n	8003426 <HAL_DMA_Abort_IT+0x86>
 8003420:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003424:	e00e      	b.n	8003444 <HAL_DMA_Abort_IT+0xa4>
 8003426:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800342a:	e00b      	b.n	8003444 <HAL_DMA_Abort_IT+0xa4>
 800342c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003430:	e008      	b.n	8003444 <HAL_DMA_Abort_IT+0xa4>
 8003432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003436:	e005      	b.n	8003444 <HAL_DMA_Abort_IT+0xa4>
 8003438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800343c:	e002      	b.n	8003444 <HAL_DMA_Abort_IT+0xa4>
 800343e:	2310      	movs	r3, #16
 8003440:	e000      	b.n	8003444 <HAL_DMA_Abort_IT+0xa4>
 8003442:	2301      	movs	r3, #1
 8003444:	4a11      	ldr	r2, [pc, #68]	@ (800348c <HAL_DMA_Abort_IT+0xec>)
 8003446:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
    } 
  }
  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40020008 	.word	0x40020008
 8003478:	4002001c 	.word	0x4002001c
 800347c:	40020030 	.word	0x40020030
 8003480:	40020044 	.word	0x40020044
 8003484:	40020058 	.word	0x40020058
 8003488:	4002006c 	.word	0x4002006c
 800348c:	40020000 	.word	0x40020000

08003490 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2204      	movs	r2, #4
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d04f      	beq.n	8003558 <HAL_DMA_IRQHandler+0xc8>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d04a      	beq.n	8003558 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a66      	ldr	r2, [pc, #408]	@ (8003680 <HAL_DMA_IRQHandler+0x1f0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d029      	beq.n	800353e <HAL_DMA_IRQHandler+0xae>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a65      	ldr	r2, [pc, #404]	@ (8003684 <HAL_DMA_IRQHandler+0x1f4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_IRQHandler+0xaa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a63      	ldr	r2, [pc, #396]	@ (8003688 <HAL_DMA_IRQHandler+0x1f8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01a      	beq.n	8003534 <HAL_DMA_IRQHandler+0xa4>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a62      	ldr	r2, [pc, #392]	@ (800368c <HAL_DMA_IRQHandler+0x1fc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d012      	beq.n	800352e <HAL_DMA_IRQHandler+0x9e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a60      	ldr	r2, [pc, #384]	@ (8003690 <HAL_DMA_IRQHandler+0x200>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x98>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5f      	ldr	r2, [pc, #380]	@ (8003694 <HAL_DMA_IRQHandler+0x204>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <HAL_DMA_IRQHandler+0x92>
 800351c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003520:	e00e      	b.n	8003540 <HAL_DMA_IRQHandler+0xb0>
 8003522:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003526:	e00b      	b.n	8003540 <HAL_DMA_IRQHandler+0xb0>
 8003528:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800352c:	e008      	b.n	8003540 <HAL_DMA_IRQHandler+0xb0>
 800352e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003532:	e005      	b.n	8003540 <HAL_DMA_IRQHandler+0xb0>
 8003534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003538:	e002      	b.n	8003540 <HAL_DMA_IRQHandler+0xb0>
 800353a:	2340      	movs	r3, #64	@ 0x40
 800353c:	e000      	b.n	8003540 <HAL_DMA_IRQHandler+0xb0>
 800353e:	2304      	movs	r3, #4
 8003540:	4a55      	ldr	r2, [pc, #340]	@ (8003698 <HAL_DMA_IRQHandler+0x208>)
 8003542:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8094 	beq.w	8003676 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003556:	e08e      	b.n	8003676 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	2202      	movs	r2, #2
 800355e:	409a      	lsls	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d056      	beq.n	8003616 <HAL_DMA_IRQHandler+0x186>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d051      	beq.n	8003616 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 020a 	bic.w	r2, r2, #10
 800358e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a38      	ldr	r2, [pc, #224]	@ (8003680 <HAL_DMA_IRQHandler+0x1f0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d029      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x166>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a37      	ldr	r2, [pc, #220]	@ (8003684 <HAL_DMA_IRQHandler+0x1f4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d022      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x162>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a35      	ldr	r2, [pc, #212]	@ (8003688 <HAL_DMA_IRQHandler+0x1f8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01a      	beq.n	80035ec <HAL_DMA_IRQHandler+0x15c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a34      	ldr	r2, [pc, #208]	@ (800368c <HAL_DMA_IRQHandler+0x1fc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d012      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x156>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a32      	ldr	r2, [pc, #200]	@ (8003690 <HAL_DMA_IRQHandler+0x200>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00a      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x150>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a31      	ldr	r2, [pc, #196]	@ (8003694 <HAL_DMA_IRQHandler+0x204>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <HAL_DMA_IRQHandler+0x14a>
 80035d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035d8:	e00e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x168>
 80035da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035de:	e00b      	b.n	80035f8 <HAL_DMA_IRQHandler+0x168>
 80035e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035e4:	e008      	b.n	80035f8 <HAL_DMA_IRQHandler+0x168>
 80035e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035ea:	e005      	b.n	80035f8 <HAL_DMA_IRQHandler+0x168>
 80035ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035f0:	e002      	b.n	80035f8 <HAL_DMA_IRQHandler+0x168>
 80035f2:	2320      	movs	r3, #32
 80035f4:	e000      	b.n	80035f8 <HAL_DMA_IRQHandler+0x168>
 80035f6:	2302      	movs	r3, #2
 80035f8:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <HAL_DMA_IRQHandler+0x208>)
 80035fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d034      	beq.n	8003676 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003614:	e02f      	b.n	8003676 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2208      	movs	r2, #8
 800361c:	409a      	lsls	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d028      	beq.n	8003678 <HAL_DMA_IRQHandler+0x1e8>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d023      	beq.n	8003678 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020e 	bic.w	r2, r2, #14
 800363e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
    }
  }
  return;
 8003676:	bf00      	nop
 8003678:	bf00      	nop
}
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40020008 	.word	0x40020008
 8003684:	4002001c 	.word	0x4002001c
 8003688:	40020030 	.word	0x40020030
 800368c:	40020044 	.word	0x40020044
 8003690:	40020058 	.word	0x40020058
 8003694:	4002006c 	.word	0x4002006c
 8003698:	40020000 	.word	0x40020000

0800369c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036aa:	b2db      	uxtb	r3, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b08b      	sub	sp, #44	@ 0x2c
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ca:	e169      	b.n	80039a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036cc:	2201      	movs	r2, #1
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 8158 	bne.w	800399a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a9a      	ldr	r2, [pc, #616]	@ (8003958 <HAL_GPIO_Init+0x2a0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d05e      	beq.n	80037b2 <HAL_GPIO_Init+0xfa>
 80036f4:	4a98      	ldr	r2, [pc, #608]	@ (8003958 <HAL_GPIO_Init+0x2a0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d875      	bhi.n	80037e6 <HAL_GPIO_Init+0x12e>
 80036fa:	4a98      	ldr	r2, [pc, #608]	@ (800395c <HAL_GPIO_Init+0x2a4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d058      	beq.n	80037b2 <HAL_GPIO_Init+0xfa>
 8003700:	4a96      	ldr	r2, [pc, #600]	@ (800395c <HAL_GPIO_Init+0x2a4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d86f      	bhi.n	80037e6 <HAL_GPIO_Init+0x12e>
 8003706:	4a96      	ldr	r2, [pc, #600]	@ (8003960 <HAL_GPIO_Init+0x2a8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d052      	beq.n	80037b2 <HAL_GPIO_Init+0xfa>
 800370c:	4a94      	ldr	r2, [pc, #592]	@ (8003960 <HAL_GPIO_Init+0x2a8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d869      	bhi.n	80037e6 <HAL_GPIO_Init+0x12e>
 8003712:	4a94      	ldr	r2, [pc, #592]	@ (8003964 <HAL_GPIO_Init+0x2ac>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d04c      	beq.n	80037b2 <HAL_GPIO_Init+0xfa>
 8003718:	4a92      	ldr	r2, [pc, #584]	@ (8003964 <HAL_GPIO_Init+0x2ac>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d863      	bhi.n	80037e6 <HAL_GPIO_Init+0x12e>
 800371e:	4a92      	ldr	r2, [pc, #584]	@ (8003968 <HAL_GPIO_Init+0x2b0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d046      	beq.n	80037b2 <HAL_GPIO_Init+0xfa>
 8003724:	4a90      	ldr	r2, [pc, #576]	@ (8003968 <HAL_GPIO_Init+0x2b0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d85d      	bhi.n	80037e6 <HAL_GPIO_Init+0x12e>
 800372a:	2b12      	cmp	r3, #18
 800372c:	d82a      	bhi.n	8003784 <HAL_GPIO_Init+0xcc>
 800372e:	2b12      	cmp	r3, #18
 8003730:	d859      	bhi.n	80037e6 <HAL_GPIO_Init+0x12e>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <HAL_GPIO_Init+0x80>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	080037b3 	.word	0x080037b3
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800379f 	.word	0x0800379f
 8003744:	080037e1 	.word	0x080037e1
 8003748:	080037e7 	.word	0x080037e7
 800374c:	080037e7 	.word	0x080037e7
 8003750:	080037e7 	.word	0x080037e7
 8003754:	080037e7 	.word	0x080037e7
 8003758:	080037e7 	.word	0x080037e7
 800375c:	080037e7 	.word	0x080037e7
 8003760:	080037e7 	.word	0x080037e7
 8003764:	080037e7 	.word	0x080037e7
 8003768:	080037e7 	.word	0x080037e7
 800376c:	080037e7 	.word	0x080037e7
 8003770:	080037e7 	.word	0x080037e7
 8003774:	080037e7 	.word	0x080037e7
 8003778:	080037e7 	.word	0x080037e7
 800377c:	08003795 	.word	0x08003795
 8003780:	080037a9 	.word	0x080037a9
 8003784:	4a79      	ldr	r2, [pc, #484]	@ (800396c <HAL_GPIO_Init+0x2b4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800378a:	e02c      	b.n	80037e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	623b      	str	r3, [r7, #32]
          break;
 8003792:	e029      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	3304      	adds	r3, #4
 800379a:	623b      	str	r3, [r7, #32]
          break;
 800379c:	e024      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	3308      	adds	r3, #8
 80037a4:	623b      	str	r3, [r7, #32]
          break;
 80037a6:	e01f      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	330c      	adds	r3, #12
 80037ae:	623b      	str	r3, [r7, #32]
          break;
 80037b0:	e01a      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037ba:	2304      	movs	r3, #4
 80037bc:	623b      	str	r3, [r7, #32]
          break;
 80037be:	e013      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c8:	2308      	movs	r3, #8
 80037ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	611a      	str	r2, [r3, #16]
          break;
 80037d2:	e009      	b.n	80037e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037d4:	2308      	movs	r3, #8
 80037d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	615a      	str	r2, [r3, #20]
          break;
 80037de:	e003      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
          break;
 80037e4:	e000      	b.n	80037e8 <HAL_GPIO_Init+0x130>
          break;
 80037e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2bff      	cmp	r3, #255	@ 0xff
 80037ec:	d801      	bhi.n	80037f2 <HAL_GPIO_Init+0x13a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	e001      	b.n	80037f6 <HAL_GPIO_Init+0x13e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2bff      	cmp	r3, #255	@ 0xff
 80037fc:	d802      	bhi.n	8003804 <HAL_GPIO_Init+0x14c>
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	e002      	b.n	800380a <HAL_GPIO_Init+0x152>
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	3b08      	subs	r3, #8
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	210f      	movs	r1, #15
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	431a      	orrs	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80b1 	beq.w	800399a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003838:	4b4d      	ldr	r3, [pc, #308]	@ (8003970 <HAL_GPIO_Init+0x2b8>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4a4c      	ldr	r2, [pc, #304]	@ (8003970 <HAL_GPIO_Init+0x2b8>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6193      	str	r3, [r2, #24]
 8003844:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <HAL_GPIO_Init+0x2b8>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003850:	4a48      	ldr	r2, [pc, #288]	@ (8003974 <HAL_GPIO_Init+0x2bc>)
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a40      	ldr	r2, [pc, #256]	@ (8003978 <HAL_GPIO_Init+0x2c0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_GPIO_Init+0x1ec>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3f      	ldr	r2, [pc, #252]	@ (800397c <HAL_GPIO_Init+0x2c4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00d      	beq.n	80038a0 <HAL_GPIO_Init+0x1e8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3e      	ldr	r2, [pc, #248]	@ (8003980 <HAL_GPIO_Init+0x2c8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <HAL_GPIO_Init+0x1e4>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3d      	ldr	r2, [pc, #244]	@ (8003984 <HAL_GPIO_Init+0x2cc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_GPIO_Init+0x1e0>
 8003894:	2303      	movs	r3, #3
 8003896:	e006      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 8003898:	2304      	movs	r3, #4
 800389a:	e004      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 800389c:	2302      	movs	r3, #2
 800389e:	e002      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 80038a4:	2300      	movs	r3, #0
 80038a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a8:	f002 0203 	and.w	r2, r2, #3
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	4093      	lsls	r3, r2
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038b6:	492f      	ldr	r1, [pc, #188]	@ (8003974 <HAL_GPIO_Init+0x2bc>)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d006      	beq.n	80038de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	492c      	ldr	r1, [pc, #176]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038de:	4b2a      	ldr	r3, [pc, #168]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	4928      	ldr	r1, [pc, #160]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d006      	beq.n	8003906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038f8:	4b23      	ldr	r3, [pc, #140]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4922      	ldr	r1, [pc, #136]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	60cb      	str	r3, [r1, #12]
 8003904:	e006      	b.n	8003914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	43db      	mvns	r3, r3
 800390e:	491e      	ldr	r1, [pc, #120]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 8003910:	4013      	ands	r3, r2
 8003912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003920:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4918      	ldr	r1, [pc, #96]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
 800392c:	e006      	b.n	800393c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800392e:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	43db      	mvns	r3, r3
 8003936:	4914      	ldr	r1, [pc, #80]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 8003938:	4013      	ands	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d021      	beq.n	800398c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003948:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	490e      	ldr	r1, [pc, #56]	@ (8003988 <HAL_GPIO_Init+0x2d0>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]
 8003954:	e021      	b.n	800399a <HAL_GPIO_Init+0x2e2>
 8003956:	bf00      	nop
 8003958:	10320000 	.word	0x10320000
 800395c:	10310000 	.word	0x10310000
 8003960:	10220000 	.word	0x10220000
 8003964:	10210000 	.word	0x10210000
 8003968:	10120000 	.word	0x10120000
 800396c:	10110000 	.word	0x10110000
 8003970:	40021000 	.word	0x40021000
 8003974:	40010000 	.word	0x40010000
 8003978:	40010800 	.word	0x40010800
 800397c:	40010c00 	.word	0x40010c00
 8003980:	40011000 	.word	0x40011000
 8003984:	40011400 	.word	0x40011400
 8003988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_GPIO_Init+0x304>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	43db      	mvns	r3, r3
 8003994:	4909      	ldr	r1, [pc, #36]	@ (80039bc <HAL_GPIO_Init+0x304>)
 8003996:	4013      	ands	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	3301      	adds	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f ae8e 	bne.w	80036cc <HAL_GPIO_Init+0x14>
  }
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	372c      	adds	r7, #44	@ 0x2c
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	40010400 	.word	0x40010400

080039c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039dc:	e003      	b.n	80039e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e12b      	b.n	8003c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fea6 	bl	8002768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	@ 0x24
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a54:	f003 f90a 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 8003a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4a81      	ldr	r2, [pc, #516]	@ (8003c64 <HAL_I2C_Init+0x274>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d807      	bhi.n	8003a74 <HAL_I2C_Init+0x84>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a80      	ldr	r2, [pc, #512]	@ (8003c68 <HAL_I2C_Init+0x278>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	bf94      	ite	ls
 8003a6c:	2301      	movls	r3, #1
 8003a6e:	2300      	movhi	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e006      	b.n	8003a82 <HAL_I2C_Init+0x92>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a7d      	ldr	r2, [pc, #500]	@ (8003c6c <HAL_I2C_Init+0x27c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	bf94      	ite	ls
 8003a7c:	2301      	movls	r3, #1
 8003a7e:	2300      	movhi	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e0e7      	b.n	8003c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a78      	ldr	r2, [pc, #480]	@ (8003c70 <HAL_I2C_Init+0x280>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0c9b      	lsrs	r3, r3, #18
 8003a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c64 <HAL_I2C_Init+0x274>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d802      	bhi.n	8003ac4 <HAL_I2C_Init+0xd4>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	e009      	b.n	8003ad8 <HAL_I2C_Init+0xe8>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	4a69      	ldr	r2, [pc, #420]	@ (8003c74 <HAL_I2C_Init+0x284>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003aea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	495c      	ldr	r1, [pc, #368]	@ (8003c64 <HAL_I2C_Init+0x274>)
 8003af4:	428b      	cmp	r3, r1
 8003af6:	d819      	bhi.n	8003b2c <HAL_I2C_Init+0x13c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1e59      	subs	r1, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b0c:	400b      	ands	r3, r1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_I2C_Init+0x138>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1e59      	subs	r1, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b26:	e051      	b.n	8003bcc <HAL_I2C_Init+0x1dc>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	e04f      	b.n	8003bcc <HAL_I2C_Init+0x1dc>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d111      	bne.n	8003b58 <HAL_I2C_Init+0x168>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	440b      	add	r3, r1
 8003b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e012      	b.n	8003b7e <HAL_I2C_Init+0x18e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1e58      	subs	r0, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	0099      	lsls	r1, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Init+0x196>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e022      	b.n	8003bcc <HAL_I2C_Init+0x1dc>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10e      	bne.n	8003bac <HAL_I2C_Init+0x1bc>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1e58      	subs	r0, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	440b      	add	r3, r1
 8003b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003baa:	e00f      	b.n	8003bcc <HAL_I2C_Init+0x1dc>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1e58      	subs	r0, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	0099      	lsls	r1, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	6809      	ldr	r1, [r1, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6911      	ldr	r1, [r2, #16]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68d2      	ldr	r2, [r2, #12]
 8003c06:	4311      	orrs	r1, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	000186a0 	.word	0x000186a0
 8003c68:	001e847f 	.word	0x001e847f
 8003c6c:	003d08ff 	.word	0x003d08ff
 8003c70:	431bde83 	.word	0x431bde83
 8003c74:	10624dd3 	.word	0x10624dd3

08003c78 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b80      	cmp	r3, #128	@ 0x80
 8003c8c:	d103      	bne.n	8003c96 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
  }
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	813b      	strh	r3, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cba:	f7ff f9db 	bl	8003074 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	f040 80d9 	bne.w	8003e80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2319      	movs	r3, #25
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	496d      	ldr	r1, [pc, #436]	@ (8003e8c <HAL_I2C_Mem_Write+0x1ec>)
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f002 f97b 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0cc      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2C_Mem_Write+0x56>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0c5      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1e2>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d007      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2221      	movs	r2, #33	@ 0x21
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e90 <HAL_I2C_Mem_Write+0x1f0>)
 8003d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d5e:	88f8      	ldrh	r0, [r7, #6]
 8003d60:	893a      	ldrh	r2, [r7, #8]
 8003d62:	8979      	ldrh	r1, [r7, #10]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f001 ff0a 	bl	8005b88 <I2C_RequestMemoryWrite>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d052      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e081      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f002 fa40 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d107      	bne.n	8003da6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06b      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11b      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x180>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d017      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1aa      	bne.n	8003d7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f002 fa33 	bl	8006298 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d107      	bne.n	8003e50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e016      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	00100002 	.word	0x00100002
 8003e90:	ffff0000 	.word	0xffff0000

08003e94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	817b      	strh	r3, [r7, #10]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	813b      	strh	r3, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb2:	f7ff f8df 	bl	8003074 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	f040 8250 	bne.w	8004366 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2319      	movs	r3, #25
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4982      	ldr	r1, [pc, #520]	@ (80040d8 <HAL_I2C_Mem_Read+0x244>)
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f002 f87f 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
 8003ede:	e243      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_I2C_Mem_Read+0x5a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e23c      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d007      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2222      	movs	r2, #34	@ 0x22
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2240      	movs	r2, #64	@ 0x40
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a62      	ldr	r2, [pc, #392]	@ (80040dc <HAL_I2C_Mem_Read+0x248>)
 8003f54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f56:	88f8      	ldrh	r0, [r7, #6]
 8003f58:	893a      	ldrh	r2, [r7, #8]
 8003f5a:	8979      	ldrh	r1, [r7, #10]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	4603      	mov	r3, r0
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f001 fea4 	bl	8005cb4 <I2C_RequestMemoryRead>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1f8      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e1cc      	b.n	8004340 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d11e      	bne.n	8003fec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fbe:	b672      	cpsid	i
}
 8003fc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe8:	b662      	cpsie	i
}
 8003fea:	e035      	b.n	8004058 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d11e      	bne.n	8004032 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004004:	b672      	cpsid	i
}
 8004006:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800402c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800402e:	b662      	cpsie	i
}
 8004030:	e012      	b.n	8004058 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004058:	e172      	b.n	8004340 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	2b03      	cmp	r3, #3
 8004060:	f200 811f 	bhi.w	80042a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	2b01      	cmp	r3, #1
 800406a:	d123      	bne.n	80040b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f002 f98b 	bl	800638c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e173      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040b2:	e145      	b.n	8004340 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d152      	bne.n	8004162 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	2200      	movs	r2, #0
 80040c4:	4906      	ldr	r1, [pc, #24]	@ (80040e0 <HAL_I2C_Mem_Read+0x24c>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f001 ff84 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e148      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
 80040d6:	bf00      	nop
 80040d8:	00100002 	.word	0x00100002
 80040dc:	ffff0000 	.word	0xffff0000
 80040e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040e4:	b672      	cpsid	i
}
 80040e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800412a:	b662      	cpsie	i
}
 800412c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004160:	e0ee      	b.n	8004340 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	2200      	movs	r2, #0
 800416a:	4981      	ldr	r1, [pc, #516]	@ (8004370 <HAL_I2C_Mem_Read+0x4dc>)
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f001 ff31 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0f5      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800418c:	b672      	cpsid	i
}
 800418e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004374 <HAL_I2C_Mem_Read+0x4e0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	08db      	lsrs	r3, r3, #3
 80041c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004378 <HAL_I2C_Mem_Read+0x4e4>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0a1a      	lsrs	r2, r3, #8
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00da      	lsls	r2, r3, #3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	3b01      	subs	r3, #1
 80041e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d118      	bne.n	800421a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800420a:	b662      	cpsie	i
}
 800420c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0a6      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d1d9      	bne.n	80041dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800426a:	b662      	cpsie	i
}
 800426c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042a0:	e04e      	b.n	8004340 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f002 f870 	bl	800638c <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e058      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d124      	bne.n	8004340 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d107      	bne.n	800430e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f ae88 	bne.w	800405a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	@ 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	00010004 	.word	0x00010004
 8004374:	20000014 	.word	0x20000014
 8004378:	14f8b589 	.word	0x14f8b589

0800437c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800439c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d003      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x38>
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b40      	cmp	r3, #64	@ 0x40
 80043b0:	f040 80c1 	bne.w	8004536 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10d      	bne.n	80043ea <HAL_I2C_EV_IRQHandler+0x6e>
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80043d4:	d003      	beq.n	80043de <HAL_I2C_EV_IRQHandler+0x62>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_EV_IRQHandler+0x66>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x68>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f000 8132 	beq.w	800464e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HAL_I2C_EV_IRQHandler+0x92>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	0a5b      	lsrs	r3, r3, #9
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f002 f84e 	bl	80064a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fd99 	bl	8004f3e <I2C_Master_SB>
 800440c:	e092      	b.n	8004534 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0xb2>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	0a5b      	lsrs	r3, r3, #9
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fe0e 	bl	8005048 <I2C_Master_ADD10>
 800442c:	e082      	b.n	8004534 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0xd2>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	0a5b      	lsrs	r3, r3, #9
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fe27 	bl	800509a <I2C_Master_ADDR>
 800444c:	e072      	b.n	8004534 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03b      	beq.n	80044d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004468:	f000 80f3 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	09db      	lsrs	r3, r3, #7
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00f      	beq.n	8004498 <HAL_I2C_EV_IRQHandler+0x11c>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	0a9b      	lsrs	r3, r3, #10
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <HAL_I2C_EV_IRQHandler+0x11c>
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f9f1 	bl	8004878 <I2C_MasterTransmit_TXE>
 8004496:	e04d      	b.n	8004534 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80d6 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	0a5b      	lsrs	r3, r3, #9
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80cf 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	2b21      	cmp	r3, #33	@ 0x21
 80044b8:	d103      	bne.n	80044c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa78 	bl	80049b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c0:	e0c7      	b.n	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	f040 80c4 	bne.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fae6 	bl	8004a9c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d0:	e0bf      	b.n	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e0:	f000 80b7 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00f      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x194>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	0a9b      	lsrs	r3, r3, #10
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x194>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d103      	bne.n	8004510 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fb5f 	bl	8004bcc <I2C_MasterReceive_RXNE>
 800450e:	e011      	b.n	8004534 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 809a 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	0a5b      	lsrs	r3, r3, #9
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8093 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fc15 	bl	8004d5c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004532:	e08e      	b.n	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004534:	e08d      	b.n	8004652 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e007      	b.n	8004558 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d012      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x20e>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	0a5b      	lsrs	r3, r3, #9
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00c      	beq.n	800458a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 ffe0 	bl	8005548 <I2C_Slave_ADDR>
 8004588:	e066      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x22e>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	0a5b      	lsrs	r3, r3, #9
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 f81a 	bl	80055dc <I2C_Slave_STOPF>
 80045a8:	e056      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	2b21      	cmp	r3, #33	@ 0x21
 80045ae:	d002      	beq.n	80045b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2b29      	cmp	r3, #41	@ 0x29
 80045b4:	d125      	bne.n	8004602 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	09db      	lsrs	r3, r3, #7
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00f      	beq.n	80045e2 <HAL_I2C_EV_IRQHandler+0x266>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	0a9b      	lsrs	r3, r3, #10
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_I2C_EV_IRQHandler+0x266>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fef8 	bl	80053d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e0:	e039      	b.n	8004656 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d033      	beq.n	8004656 <HAL_I2C_EV_IRQHandler+0x2da>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	0a5b      	lsrs	r3, r3, #9
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02d      	beq.n	8004656 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 ff25 	bl	800544a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004600:	e029      	b.n	8004656 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00f      	beq.n	800462e <HAL_I2C_EV_IRQHandler+0x2b2>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	0a9b      	lsrs	r3, r3, #10
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_I2C_EV_IRQHandler+0x2b2>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 ff2f 	bl	800548a <I2C_SlaveReceive_RXNE>
 800462c:	e014      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	0a5b      	lsrs	r3, r3, #9
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 ff5d 	bl	8005506 <I2C_SlaveReceive_BTF>
 800464c:	e004      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004656:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08a      	sub	sp, #40	@ 0x28
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004680:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_I2C_ER_IRQHandler+0x5e>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046aa:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	0a5b      	lsrs	r3, r3, #9
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <HAL_I2C_ER_IRQHandler+0x88>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	f043 0302 	orr.w	r3, r3, #2
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80046e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	0a9b      	lsrs	r3, r3, #10
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03f      	beq.n	8004772 <HAL_I2C_ER_IRQHandler+0x114>
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d039      	beq.n	8004772 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80046fe:	7efb      	ldrb	r3, [r7, #27]
 8004700:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004710:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004718:	7ebb      	ldrb	r3, [r7, #26]
 800471a:	2b20      	cmp	r3, #32
 800471c:	d112      	bne.n	8004744 <HAL_I2C_ER_IRQHandler+0xe6>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10f      	bne.n	8004744 <HAL_I2C_ER_IRQHandler+0xe6>
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	2b21      	cmp	r3, #33	@ 0x21
 8004728:	d008      	beq.n	800473c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b29      	cmp	r3, #41	@ 0x29
 800472e:	d005      	beq.n	800473c <HAL_I2C_ER_IRQHandler+0xde>
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	2b28      	cmp	r3, #40	@ 0x28
 8004734:	d106      	bne.n	8004744 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b21      	cmp	r3, #33	@ 0x21
 800473a:	d103      	bne.n	8004744 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f001 f87d 	bl	800583c <I2C_Slave_AF>
 8004742:	e016      	b.n	8004772 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800474c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	f043 0304 	orr.w	r3, r3, #4
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004756:	7efb      	ldrb	r3, [r7, #27]
 8004758:	2b10      	cmp	r3, #16
 800475a:	d002      	beq.n	8004762 <HAL_I2C_ER_IRQHandler+0x104>
 800475c:	7efb      	ldrb	r3, [r7, #27]
 800475e:	2b40      	cmp	r3, #64	@ 0x40
 8004760:	d107      	bne.n	8004772 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004770:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	0adb      	lsrs	r3, r3, #11
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x13e>
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800479a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f8b8 	bl	8005924 <I2C_ITError>
  }
}
 80047b4:	bf00      	nop
 80047b6:	3728      	adds	r7, #40	@ 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
 8004810:	4613      	mov	r3, r2
 8004812:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004886:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800488e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d150      	bne.n	8004940 <I2C_MasterTransmit_TXE+0xc8>
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b21      	cmp	r3, #33	@ 0x21
 80048a2:	d14d      	bne.n	8004940 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d01d      	beq.n	80048e6 <I2C_MasterTransmit_TXE+0x6e>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d01a      	beq.n	80048e6 <I2C_MasterTransmit_TXE+0x6e>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048b6:	d016      	beq.n	80048e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2211      	movs	r2, #17
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ff6c 	bl	80047bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048e4:	e060      	b.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004904:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d107      	bne.n	8004930 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff81 	bl	8004830 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800492e:	e03b      	b.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff3f 	bl	80047bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800493e:	e033      	b.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b21      	cmp	r3, #33	@ 0x21
 8004944:	d005      	beq.n	8004952 <I2C_MasterTransmit_TXE+0xda>
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d12d      	bne.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b22      	cmp	r3, #34	@ 0x22
 8004950:	d12a      	bne.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800496c:	e01c      	b.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d103      	bne.n	8004982 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f88e 	bl	8004a9c <I2C_MemoryTransmit_TXE_BTF>
}
 8004980:	e012      	b.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80049a6:	e7ff      	b.n	80049a8 <I2C_MasterTransmit_TXE+0x130>
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b21      	cmp	r3, #33	@ 0x21
 80049c8:	d164      	bne.n	8004a94 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049f8:	e04c      	b.n	8004a94 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d01d      	beq.n	8004a3c <I2C_MasterTransmit_BTF+0x8c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d01a      	beq.n	8004a3c <I2C_MasterTransmit_BTF+0x8c>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a0c:	d016      	beq.n	8004a3c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a1c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2211      	movs	r2, #17
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fec1 	bl	80047bc <HAL_I2C_MasterTxCpltCallback>
}
 8004a3a:	e02b      	b.n	8004a94 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a4a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a5a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b40      	cmp	r3, #64	@ 0x40
 8004a74:	d107      	bne.n	8004a86 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fed6 	bl	8004830 <HAL_I2C_MemTxCpltCallback>
}
 8004a84:	e006      	b.n	8004a94 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fe94 	bl	80047bc <HAL_I2C_MasterTxCpltCallback>
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11d      	bne.n	8004af0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10b      	bne.n	8004ad4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004ad2:	e077      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	121b      	asrs	r3, r3, #8
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004aee:	e069      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10b      	bne.n	8004b10 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b0e:	e059      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d152      	bne.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b22      	cmp	r3, #34	@ 0x22
 8004b1c:	d10d      	bne.n	8004b3a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b2c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b38:	e044      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b21      	cmp	r3, #33	@ 0x21
 8004b48:	d112      	bne.n	8004b70 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b6e:	e029      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d124      	bne.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b21      	cmp	r3, #33	@ 0x21
 8004b7e:	d121      	bne.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b8e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fe3a 	bl	8004830 <HAL_I2C_MemTxCpltCallback>
}
 8004bbc:	e002      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff f85a 	bl	8003c78 <I2C_Flush_DR>
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b22      	cmp	r3, #34	@ 0x22
 8004bde:	f040 80b9 	bne.w	8004d54 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d921      	bls.n	8004c3a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	f040 8096 	bne.w	8004d54 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c36:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004c38:	e08c      	b.n	8004d54 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d07f      	beq.n	8004d42 <I2C_MasterReceive_RXNE+0x176>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d002      	beq.n	8004c4e <I2C_MasterReceive_RXNE+0x82>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d179      	bne.n	8004d42 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f001 fb6a 	bl	8006328 <I2C_WaitOnSTOPRequestThroughIT>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d14c      	bne.n	8004cf4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d10a      	bne.n	8004cca <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fdbd 	bl	8004842 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cc8:	e044      	b.n	8004d54 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d002      	beq.n	8004cde <I2C_MasterReceive_RXNE+0x112>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d103      	bne.n	8004ce6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ce4:	e002      	b.n	8004cec <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2212      	movs	r2, #18
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fd6e 	bl	80047ce <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cf2:	e02f      	b.n	8004d54 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fd8a 	bl	8004854 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d40:	e008      	b.n	8004d54 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d50:	605a      	str	r2, [r3, #4]
}
 8004d52:	e7ff      	b.n	8004d54 <I2C_MasterReceive_RXNE+0x188>
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d11b      	bne.n	8004dac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d82:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004daa:	e0c4      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d129      	bne.n	8004e0a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d00a      	beq.n	8004de2 <I2C_MasterReceive_BTF+0x86>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d007      	beq.n	8004de2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e08:	e095      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d17d      	bne.n	8004f10 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d002      	beq.n	8004e20 <I2C_MasterReceive_BTF+0xc4>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d108      	bne.n	8004e32 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e016      	b.n	8004e60 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d002      	beq.n	8004e3e <I2C_MasterReceive_BTF+0xe2>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d108      	bne.n	8004e50 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e007      	b.n	8004e60 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004eba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b40      	cmp	r3, #64	@ 0x40
 8004ece:	d10a      	bne.n	8004ee6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fcaf 	bl	8004842 <HAL_I2C_MemRxCpltCallback>
}
 8004ee4:	e027      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d002      	beq.n	8004efa <I2C_MasterReceive_BTF+0x19e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d103      	bne.n	8004f02 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f00:	e002      	b.n	8004f08 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2212      	movs	r2, #18
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff fc60 	bl	80047ce <HAL_I2C_MasterRxCpltCallback>
}
 8004f0e:	e012      	b.n	8004f36 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d117      	bne.n	8004f82 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f6a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f6c:	e067      	b.n	800503e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	611a      	str	r2, [r3, #16]
}
 8004f80:	e05d      	b.n	800503e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f8a:	d133      	bne.n	8004ff4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b21      	cmp	r3, #33	@ 0x21
 8004f96:	d109      	bne.n	8004fac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e008      	b.n	8004fbe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <I2C_Master_SB+0x92>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d032      	beq.n	800503e <I2C_Master_SB+0x100>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02d      	beq.n	800503e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ff0:	605a      	str	r2, [r3, #4]
}
 8004ff2:	e024      	b.n	800503e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10e      	bne.n	800501a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005000:	b29b      	uxth	r3, r3
 8005002:	11db      	asrs	r3, r3, #7
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0306 	and.w	r3, r3, #6
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f063 030f 	orn	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]
}
 8005018:	e011      	b.n	800503e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501e:	2b01      	cmp	r3, #1
 8005020:	d10d      	bne.n	800503e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	b29b      	uxth	r3, r3
 8005028:	11db      	asrs	r3, r3, #7
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 0306 	and.w	r3, r3, #6
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f063 030e 	orn	r3, r3, #14
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <I2C_Master_ADD10+0x26>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <I2C_Master_ADD10+0x48>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800509a:	b480      	push	{r7}
 800509c:	b091      	sub	sp, #68	@ 0x44
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b22      	cmp	r3, #34	@ 0x22
 80050c2:	f040 8174 	bne.w	80053ae <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10f      	bne.n	80050ee <I2C_Master_ADDR+0x54>
 80050ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80050d2:	2b40      	cmp	r3, #64	@ 0x40
 80050d4:	d10b      	bne.n	80050ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	e16b      	b.n	80053c6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11d      	bne.n	8005132 <I2C_Master_ADDR+0x98>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050fe:	d118      	bne.n	8005132 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005124:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005130:	e149      	b.n	80053c6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d113      	bne.n	8005164 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513c:	2300      	movs	r3, #0
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e120      	b.n	80053a6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	f040 808a 	bne.w	8005284 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005176:	d137      	bne.n	80051e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005186:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005196:	d113      	bne.n	80051c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	e0f2      	b.n	80053a6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	623b      	str	r3, [r7, #32]
 80051d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e0de      	b.n	80053a6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80051e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d02e      	beq.n	800524c <I2C_Master_ADDR+0x1b2>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d02b      	beq.n	800524c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80051f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f6:	2b12      	cmp	r3, #18
 80051f8:	d102      	bne.n	8005200 <I2C_Master_ADDR+0x166>
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d125      	bne.n	800524c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005202:	2b04      	cmp	r3, #4
 8005204:	d00e      	beq.n	8005224 <I2C_Master_ADDR+0x18a>
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	2b02      	cmp	r3, #2
 800520a:	d00b      	beq.n	8005224 <I2C_Master_ADDR+0x18a>
 800520c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520e:	2b10      	cmp	r3, #16
 8005210:	d008      	beq.n	8005224 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e007      	b.n	8005234 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005232:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	e0ac      	b.n	80053a6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e090      	b.n	80053a6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d158      	bne.n	8005340 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2b04      	cmp	r3, #4
 8005292:	d021      	beq.n	80052d8 <I2C_Master_ADDR+0x23e>
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	2b02      	cmp	r3, #2
 8005298:	d01e      	beq.n	80052d8 <I2C_Master_ADDR+0x23e>
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	2b10      	cmp	r3, #16
 800529e:	d01b      	beq.n	80052d8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e012      	b.n	80052fe <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800530c:	d14b      	bne.n	80053a6 <I2C_Master_ADDR+0x30c>
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005314:	d00b      	beq.n	800532e <I2C_Master_ADDR+0x294>
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	2b01      	cmp	r3, #1
 800531a:	d008      	beq.n	800532e <I2C_Master_ADDR+0x294>
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	2b08      	cmp	r3, #8
 8005320:	d005      	beq.n	800532e <I2C_Master_ADDR+0x294>
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	2b10      	cmp	r3, #16
 8005326:	d002      	beq.n	800532e <I2C_Master_ADDR+0x294>
 8005328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532a:	2b20      	cmp	r3, #32
 800532c:	d13b      	bne.n	80053a6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	e032      	b.n	80053a6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800534e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800535e:	d117      	bne.n	8005390 <I2C_Master_ADDR+0x2f6>
 8005360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005362:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005366:	d00b      	beq.n	8005380 <I2C_Master_ADDR+0x2e6>
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	2b01      	cmp	r3, #1
 800536c:	d008      	beq.n	8005380 <I2C_Master_ADDR+0x2e6>
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	2b08      	cmp	r3, #8
 8005372:	d005      	beq.n	8005380 <I2C_Master_ADDR+0x2e6>
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	2b10      	cmp	r3, #16
 8005378:	d002      	beq.n	8005380 <I2C_Master_ADDR+0x2e6>
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	2b20      	cmp	r3, #32
 800537e:	d107      	bne.n	8005390 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800538e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053ac:	e00b      	b.n	80053c6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]
}
 80053c4:	e7ff      	b.n	80053c6 <I2C_Master_ADDR+0x32c>
 80053c6:	bf00      	nop
 80053c8:	3744      	adds	r7, #68	@ 0x44
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02b      	beq.n	8005442 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	781a      	ldrb	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d114      	bne.n	8005442 <I2C_SlaveTransmit_TXE+0x72>
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b29      	cmp	r3, #41	@ 0x29
 800541c:	d111      	bne.n	8005442 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2221      	movs	r2, #33	@ 0x21
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2228      	movs	r2, #40	@ 0x28
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff f9cf 	bl	80047e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d011      	beq.n	8005480 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005498:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d02c      	beq.n	80054fe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d114      	bne.n	80054fe <I2C_SlaveReceive_RXNE+0x74>
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054d8:	d111      	bne.n	80054fe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2222      	movs	r2, #34	@ 0x22
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2228      	movs	r2, #40	@ 0x28
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff f97a 	bl	80047f2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d012      	beq.n	800553e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005562:	2b28      	cmp	r3, #40	@ 0x28
 8005564:	d127      	bne.n	80055b6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005574:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	09db      	lsrs	r3, r3, #7
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	81bb      	strh	r3, [r7, #12]
 8005598:	e002      	b.n	80055a0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055a8:	89ba      	ldrh	r2, [r7, #12]
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff f928 	bl	8004804 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055b4:	e00e      	b.n	80055d4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80055fc:	2300      	movs	r3, #0
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005628:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005638:	d172      	bne.n	8005720 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b22      	cmp	r3, #34	@ 0x22
 800563e:	d002      	beq.n	8005646 <I2C_Slave_STOPF+0x6a>
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b2a      	cmp	r3, #42	@ 0x2a
 8005644:	d135      	bne.n	80056b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005678:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe f80c 	bl	800369c <HAL_DMA_GetState>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d049      	beq.n	800571e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	4a69      	ldr	r2, [pc, #420]	@ (8005834 <I2C_Slave_STOPF+0x258>)
 8005690:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd fe82 	bl	80033a0 <HAL_DMA_Abort_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d03d      	beq.n	800571e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056b0:	e035      	b.n	800571e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd ffd6 	bl	800369c <HAL_DMA_GetState>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d014      	beq.n	8005720 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005834 <I2C_Slave_STOPF+0x258>)
 80056fc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fe4c 	bl	80033a0 <HAL_DMA_Abort_IT>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
 800571c:	e000      	b.n	8005720 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800571e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d03e      	beq.n	80057a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d112      	bne.n	800575e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d112      	bne.n	8005792 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a0:	f043 0204 	orr.w	r2, r3, #4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8b7 	bl	8005924 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057b6:	e039      	b.n	800582c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80057bc:	d109      	bne.n	80057d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2228      	movs	r2, #40	@ 0x28
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff f810 	bl	80047f2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b28      	cmp	r3, #40	@ 0x28
 80057dc:	d111      	bne.n	8005802 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <I2C_Slave_STOPF+0x25c>)
 80057e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff f80f 	bl	800481e <HAL_I2C_ListenCpltCallback>
}
 8005800:	e014      	b.n	800582c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	2b22      	cmp	r3, #34	@ 0x22
 8005808:	d002      	beq.n	8005810 <I2C_Slave_STOPF+0x234>
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b22      	cmp	r3, #34	@ 0x22
 800580e:	d10d      	bne.n	800582c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe ffe3 	bl	80047f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	08005e85 	.word	0x08005e85
 8005838:	ffff0000 	.word	0xffff0000

0800583c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d002      	beq.n	800585e <I2C_Slave_AF+0x22>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b20      	cmp	r3, #32
 800585c:	d129      	bne.n	80058b2 <I2C_Slave_AF+0x76>
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b28      	cmp	r3, #40	@ 0x28
 8005862:	d126      	bne.n	80058b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2e      	ldr	r2, [pc, #184]	@ (8005920 <I2C_Slave_AF+0xe4>)
 8005868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005878:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005882:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fe ffb7 	bl	800481e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058b0:	e031      	b.n	8005916 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b21      	cmp	r3, #33	@ 0x21
 80058b6:	d129      	bne.n	800590c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a19      	ldr	r2, [pc, #100]	@ (8005920 <I2C_Slave_AF+0xe4>)
 80058bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2221      	movs	r2, #33	@ 0x21
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fe f9ba 	bl	8003c78 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fe ff6b 	bl	80047e0 <HAL_I2C_SlaveTxCpltCallback>
}
 800590a:	e004      	b.n	8005916 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005914:	615a      	str	r2, [r3, #20]
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	ffff0000 	.word	0xffff0000

08005924 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005932:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800593a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	2b10      	cmp	r3, #16
 8005940:	d002      	beq.n	8005948 <I2C_ITError+0x24>
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d10a      	bne.n	800595e <I2C_ITError+0x3a>
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b22      	cmp	r3, #34	@ 0x22
 800594c:	d107      	bne.n	800595e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800595c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005964:	2b28      	cmp	r3, #40	@ 0x28
 8005966:	d107      	bne.n	8005978 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2228      	movs	r2, #40	@ 0x28
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005976:	e015      	b.n	80059a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005986:	d00a      	beq.n	800599e <I2C_ITError+0x7a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b60      	cmp	r3, #96	@ 0x60
 800598c:	d007      	beq.n	800599e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b2:	d162      	bne.n	8005a7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d020      	beq.n	8005a14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005b80 <I2C_ITError+0x25c>)
 80059d8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fd fcde 	bl	80033a0 <HAL_DMA_Abort_IT>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8089 	beq.w	8005afe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4798      	blx	r3
 8005a12:	e074      	b.n	8005afe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	4a59      	ldr	r2, [pc, #356]	@ (8005b80 <I2C_ITError+0x25c>)
 8005a1a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd fcbd 	bl	80033a0 <HAL_DMA_Abort_IT>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d068      	beq.n	8005afe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d10b      	bne.n	8005a52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
 8005a78:	e041      	b.n	8005afe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b60      	cmp	r3, #96	@ 0x60
 8005a84:	d125      	bne.n	8005ad2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9e:	2b40      	cmp	r3, #64	@ 0x40
 8005aa0:	d10b      	bne.n	8005aba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fe fecb 	bl	8004866 <HAL_I2C_AbortCpltCallback>
 8005ad0:	e015      	b.n	8005afe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d10b      	bne.n	8005af8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7fe feab 	bl	8004854 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10e      	bne.n	8005b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d113      	bne.n	8005b78 <I2C_ITError+0x254>
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b28      	cmp	r3, #40	@ 0x28
 8005b54:	d110      	bne.n	8005b78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a0a      	ldr	r2, [pc, #40]	@ (8005b84 <I2C_ITError+0x260>)
 8005b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fe fe53 	bl	800481e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	08005e85 	.word	0x08005e85
 8005b84:	ffff0000 	.word	0xffff0000

08005b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fa08 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd8:	d103      	bne.n	8005be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e05f      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	492d      	ldr	r1, [pc, #180]	@ (8005cb0 <I2C_RequestMemoryWrite+0x128>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa63 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e04c      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 faee 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d107      	bne.n	8005c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e02b      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
 8005c5e:	e021      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fac8 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e005      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	00010002 	.word	0x00010002

08005cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f96a 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d14:	d103      	bne.n	8005d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0aa      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4952      	ldr	r1, [pc, #328]	@ (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f9c5 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e097      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fa50 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d107      	bne.n	8005d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e076      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]
 8005d9a:	e021      	b.n	8005de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dac:	6a39      	ldr	r1, [r7, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa2a 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d107      	bne.n	8005dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e050      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd6:	893b      	ldrh	r3, [r7, #8]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa0f 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d107      	bne.n	8005e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e035      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f8d3 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e42:	d103      	bne.n	8005e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e013      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e50:	897b      	ldrh	r3, [r7, #10]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	4906      	ldr	r1, [pc, #24]	@ (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f92e 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	00010002 	.word	0x00010002

08005e84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005fcc <I2C_DMAAbort+0x148>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8005fd0 <I2C_DMAAbort+0x14c>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0a1a      	lsrs	r2, r3, #8
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00da      	lsls	r2, r3, #3
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005eca:	e00a      	b.n	8005ee2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee0:	d0ea      	beq.n	8005eb8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eee:	2200      	movs	r2, #0
 8005ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efe:	2200      	movs	r2, #0
 8005f00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f24:	2200      	movs	r2, #0
 8005f26:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	2200      	movs	r2, #0
 8005f36:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d10e      	bne.n	8005f72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7fe fc7b 	bl	8004866 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f70:	e027      	b.n	8005fc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f78:	2b28      	cmp	r3, #40	@ 0x28
 8005f7a:	d117      	bne.n	8005fac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2228      	movs	r2, #40	@ 0x28
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005faa:	e007      	b.n	8005fbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fbc:	6978      	ldr	r0, [r7, #20]
 8005fbe:	f7fe fc49 	bl	8004854 <HAL_I2C_ErrorCallback>
}
 8005fc2:	bf00      	nop
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000014 	.word	0x20000014
 8005fd0:	14f8b589 	.word	0x14f8b589

08005fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe4:	e048      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d044      	beq.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fd f841 	bl	8003074 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d139      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10d      	bne.n	800602a <I2C_WaitOnFlagUntilTimeout+0x56>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	43da      	mvns	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	e00c      	b.n	8006044 <I2C_WaitOnFlagUntilTimeout+0x70>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	43da      	mvns	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e023      	b.n	80060c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10d      	bne.n	800609e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	43da      	mvns	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	e00c      	b.n	80060b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	43da      	mvns	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4013      	ands	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d093      	beq.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060d6:	e071      	b.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e6:	d123      	bne.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	f043 0204 	orr.w	r2, r3, #4
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e067      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d041      	beq.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006138:	f7fc ff9c 	bl	8003074 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d136      	bne.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10c      	bne.n	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e00b      	b.n	800618a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	43da      	mvns	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4013      	ands	r3, r2
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e021      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10c      	bne.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	43da      	mvns	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e00b      	b.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af6d 	bne.w	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006214:	e034      	b.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f915 	bl	8006446 <I2C_IsAcknowledgeFailed>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e034      	b.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d028      	beq.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622e:	f7fc ff21 	bl	8003074 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11d      	bne.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624e:	2b80      	cmp	r3, #128	@ 0x80
 8006250:	d016      	beq.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e007      	b.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b80      	cmp	r3, #128	@ 0x80
 800628c:	d1c3      	bne.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062a4:	e034      	b.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f8cd 	bl	8006446 <I2C_IsAcknowledgeFailed>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e034      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d028      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fc fed9 	bl	8003074 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d016      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e007      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b04      	cmp	r3, #4
 800631c:	d1c3      	bne.n	80062a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006334:	4b13      	ldr	r3, [pc, #76]	@ (8006384 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	4a13      	ldr	r2, [pc, #76]	@ (8006388 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	0a1a      	lsrs	r2, r3, #8
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b01      	subs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e008      	b.n	8006378 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006374:	d0e9      	beq.n	800634a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000014 	.word	0x20000014
 8006388:	14f8b589 	.word	0x14f8b589

0800638c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006398:	e049      	b.n	800642e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d119      	bne.n	80063dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0210 	mvn.w	r2, #16
 80063b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e030      	b.n	800643e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063dc:	f7fc fe4a 	bl	8003074 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d302      	bcc.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d11d      	bne.n	800642e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fc:	2b40      	cmp	r3, #64	@ 0x40
 80063fe:	d016      	beq.n	800642e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e007      	b.n	800643e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006438:	2b40      	cmp	r3, #64	@ 0x40
 800643a:	d1ae      	bne.n	800639a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645c:	d11b      	bne.n	8006496 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006466:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006482:	f043 0204 	orr.w	r2, r3, #4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80064b2:	d103      	bne.n	80064bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80064ba:	e007      	b.n	80064cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80064c4:	d102      	bne.n	80064cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2208      	movs	r2, #8
 80064ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
	...

080064d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e272      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8087 	beq.w	8006606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064f8:	4b92      	ldr	r3, [pc, #584]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b04      	cmp	r3, #4
 8006502:	d00c      	beq.n	800651e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006504:	4b8f      	ldr	r3, [pc, #572]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d112      	bne.n	8006536 <HAL_RCC_OscConfig+0x5e>
 8006510:	4b8c      	ldr	r3, [pc, #560]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d10b      	bne.n	8006536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651e:	4b89      	ldr	r3, [pc, #548]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06c      	beq.n	8006604 <HAL_RCC_OscConfig+0x12c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d168      	bne.n	8006604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e24c      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653e:	d106      	bne.n	800654e <HAL_RCC_OscConfig+0x76>
 8006540:	4b80      	ldr	r3, [pc, #512]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a7f      	ldr	r2, [pc, #508]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	e02e      	b.n	80065ac <HAL_RCC_OscConfig+0xd4>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10c      	bne.n	8006570 <HAL_RCC_OscConfig+0x98>
 8006556:	4b7b      	ldr	r3, [pc, #492]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7a      	ldr	r2, [pc, #488]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800655c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4b78      	ldr	r3, [pc, #480]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a77      	ldr	r2, [pc, #476]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e01d      	b.n	80065ac <HAL_RCC_OscConfig+0xd4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006578:	d10c      	bne.n	8006594 <HAL_RCC_OscConfig+0xbc>
 800657a:	4b72      	ldr	r3, [pc, #456]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a71      	ldr	r2, [pc, #452]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	4b6f      	ldr	r3, [pc, #444]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6e      	ldr	r2, [pc, #440]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800658c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e00b      	b.n	80065ac <HAL_RCC_OscConfig+0xd4>
 8006594:	4b6b      	ldr	r3, [pc, #428]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6a      	ldr	r2, [pc, #424]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800659a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	4b68      	ldr	r3, [pc, #416]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a67      	ldr	r2, [pc, #412]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80065a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d013      	beq.n	80065dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b4:	f7fc fd5e 	bl	8003074 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065bc:	f7fc fd5a 	bl	8003074 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b64      	cmp	r3, #100	@ 0x64
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e200      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0xe4>
 80065da:	e014      	b.n	8006606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065dc:	f7fc fd4a 	bl	8003074 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065e4:	f7fc fd46 	bl	8003074 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b64      	cmp	r3, #100	@ 0x64
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e1ec      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f6:	4b53      	ldr	r3, [pc, #332]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x10c>
 8006602:	e000      	b.n	8006606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d063      	beq.n	80066da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006612:	4b4c      	ldr	r3, [pc, #304]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f003 030c 	and.w	r3, r3, #12
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800661e:	4b49      	ldr	r3, [pc, #292]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f003 030c 	and.w	r3, r3, #12
 8006626:	2b08      	cmp	r3, #8
 8006628:	d11c      	bne.n	8006664 <HAL_RCC_OscConfig+0x18c>
 800662a:	4b46      	ldr	r3, [pc, #280]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d116      	bne.n	8006664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006636:	4b43      	ldr	r3, [pc, #268]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_RCC_OscConfig+0x176>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d001      	beq.n	800664e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e1c0      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664e:	4b3d      	ldr	r3, [pc, #244]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4939      	ldr	r1, [pc, #228]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800665e:	4313      	orrs	r3, r2
 8006660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006662:	e03a      	b.n	80066da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800666c:	4b36      	ldr	r3, [pc, #216]	@ (8006748 <HAL_RCC_OscConfig+0x270>)
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006672:	f7fc fcff 	bl	8003074 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800667a:	f7fc fcfb 	bl	8003074 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e1a1      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668c:	4b2d      	ldr	r3, [pc, #180]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006698:	4b2a      	ldr	r3, [pc, #168]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4927      	ldr	r1, [pc, #156]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	e015      	b.n	80066da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ae:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <HAL_RCC_OscConfig+0x270>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fc fcde 	bl	8003074 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066bc:	f7fc fcda 	bl	8003074 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e180      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d03a      	beq.n	800675c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d019      	beq.n	8006722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ee:	4b17      	ldr	r3, [pc, #92]	@ (800674c <HAL_RCC_OscConfig+0x274>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f4:	f7fc fcbe 	bl	8003074 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066fc:	f7fc fcba 	bl	8003074 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e160      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <HAL_RCC_OscConfig+0x26c>)
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800671a:	2001      	movs	r0, #1
 800671c:	f000 face 	bl	8006cbc <RCC_Delay>
 8006720:	e01c      	b.n	800675c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006722:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <HAL_RCC_OscConfig+0x274>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006728:	f7fc fca4 	bl	8003074 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800672e:	e00f      	b.n	8006750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006730:	f7fc fca0 	bl	8003074 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d908      	bls.n	8006750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e146      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
 8006742:	bf00      	nop
 8006744:	40021000 	.word	0x40021000
 8006748:	42420000 	.word	0x42420000
 800674c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006750:	4b92      	ldr	r3, [pc, #584]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e9      	bne.n	8006730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80a6 	beq.w	80068b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676e:	4b8b      	ldr	r3, [pc, #556]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677a:	4b88      	ldr	r3, [pc, #544]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	4a87      	ldr	r2, [pc, #540]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006784:	61d3      	str	r3, [r2, #28]
 8006786:	4b85      	ldr	r3, [pc, #532]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006796:	4b82      	ldr	r3, [pc, #520]	@ (80069a0 <HAL_RCC_OscConfig+0x4c8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d118      	bne.n	80067d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a2:	4b7f      	ldr	r3, [pc, #508]	@ (80069a0 <HAL_RCC_OscConfig+0x4c8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7e      	ldr	r2, [pc, #504]	@ (80069a0 <HAL_RCC_OscConfig+0x4c8>)
 80067a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ae:	f7fc fc61 	bl	8003074 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b6:	f7fc fc5d 	bl	8003074 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b64      	cmp	r3, #100	@ 0x64
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e103      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c8:	4b75      	ldr	r3, [pc, #468]	@ (80069a0 <HAL_RCC_OscConfig+0x4c8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0f0      	beq.n	80067b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d106      	bne.n	80067ea <HAL_RCC_OscConfig+0x312>
 80067dc:	4b6f      	ldr	r3, [pc, #444]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	4a6e      	ldr	r2, [pc, #440]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6213      	str	r3, [r2, #32]
 80067e8:	e02d      	b.n	8006846 <HAL_RCC_OscConfig+0x36e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10c      	bne.n	800680c <HAL_RCC_OscConfig+0x334>
 80067f2:	4b6a      	ldr	r3, [pc, #424]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	4a69      	ldr	r2, [pc, #420]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	6213      	str	r3, [r2, #32]
 80067fe:	4b67      	ldr	r3, [pc, #412]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	4a66      	ldr	r2, [pc, #408]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006804:	f023 0304 	bic.w	r3, r3, #4
 8006808:	6213      	str	r3, [r2, #32]
 800680a:	e01c      	b.n	8006846 <HAL_RCC_OscConfig+0x36e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b05      	cmp	r3, #5
 8006812:	d10c      	bne.n	800682e <HAL_RCC_OscConfig+0x356>
 8006814:	4b61      	ldr	r3, [pc, #388]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	4a60      	ldr	r2, [pc, #384]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800681a:	f043 0304 	orr.w	r3, r3, #4
 800681e:	6213      	str	r3, [r2, #32]
 8006820:	4b5e      	ldr	r3, [pc, #376]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	4a5d      	ldr	r2, [pc, #372]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	6213      	str	r3, [r2, #32]
 800682c:	e00b      	b.n	8006846 <HAL_RCC_OscConfig+0x36e>
 800682e:	4b5b      	ldr	r3, [pc, #364]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	4a5a      	ldr	r2, [pc, #360]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	6213      	str	r3, [r2, #32]
 800683a:	4b58      	ldr	r3, [pc, #352]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	4a57      	ldr	r2, [pc, #348]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006840:	f023 0304 	bic.w	r3, r3, #4
 8006844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d015      	beq.n	800687a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800684e:	f7fc fc11 	bl	8003074 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006854:	e00a      	b.n	800686c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006856:	f7fc fc0d 	bl	8003074 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e0b1      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800686c:	4b4b      	ldr	r3, [pc, #300]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ee      	beq.n	8006856 <HAL_RCC_OscConfig+0x37e>
 8006878:	e014      	b.n	80068a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800687a:	f7fc fbfb 	bl	8003074 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006880:	e00a      	b.n	8006898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006882:	f7fc fbf7 	bl	8003074 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e09b      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006898:	4b40      	ldr	r3, [pc, #256]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1ee      	bne.n	8006882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d105      	bne.n	80068b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068aa:	4b3c      	ldr	r3, [pc, #240]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	4a3b      	ldr	r2, [pc, #236]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80068b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8087 	beq.w	80069ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068c0:	4b36      	ldr	r3, [pc, #216]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 030c 	and.w	r3, r3, #12
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d061      	beq.n	8006990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d146      	bne.n	8006962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d4:	4b33      	ldr	r3, [pc, #204]	@ (80069a4 <HAL_RCC_OscConfig+0x4cc>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068da:	f7fc fbcb 	bl	8003074 <HAL_GetTick>
 80068de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e0:	e008      	b.n	80068f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e2:	f7fc fbc7 	bl	8003074 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e06d      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f4:	4b29      	ldr	r3, [pc, #164]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f0      	bne.n	80068e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006908:	d108      	bne.n	800691c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800690a:	4b24      	ldr	r3, [pc, #144]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4921      	ldr	r1, [pc, #132]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800691c:	4b1f      	ldr	r3, [pc, #124]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a19      	ldr	r1, [r3, #32]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	430b      	orrs	r3, r1
 800692e:	491b      	ldr	r1, [pc, #108]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006930:	4313      	orrs	r3, r2
 8006932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006934:	4b1b      	ldr	r3, [pc, #108]	@ (80069a4 <HAL_RCC_OscConfig+0x4cc>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693a:	f7fc fb9b 	bl	8003074 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006940:	e008      	b.n	8006954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006942:	f7fc fb97 	bl	8003074 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e03d      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006954:	4b11      	ldr	r3, [pc, #68]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <HAL_RCC_OscConfig+0x46a>
 8006960:	e035      	b.n	80069ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006962:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <HAL_RCC_OscConfig+0x4cc>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fc fb84 	bl	8003074 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006970:	f7fc fb80 	bl	8003074 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e026      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <HAL_RCC_OscConfig+0x4c4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f0      	bne.n	8006970 <HAL_RCC_OscConfig+0x498>
 800698e:	e01e      	b.n	80069ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e019      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
 800699c:	40021000 	.word	0x40021000
 80069a0:	40007000 	.word	0x40007000
 80069a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069a8:	4b0b      	ldr	r3, [pc, #44]	@ (80069d8 <HAL_RCC_OscConfig+0x500>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d106      	bne.n	80069ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d001      	beq.n	80069ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40021000 	.word	0x40021000

080069dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0d0      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069f0:	4b6a      	ldr	r3, [pc, #424]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d910      	bls.n	8006a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fe:	4b67      	ldr	r3, [pc, #412]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 0207 	bic.w	r2, r3, #7
 8006a06:	4965      	ldr	r1, [pc, #404]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0e:	4b63      	ldr	r3, [pc, #396]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0b8      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d020      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a38:	4b59      	ldr	r3, [pc, #356]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4a58      	ldr	r2, [pc, #352]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a50:	4b53      	ldr	r3, [pc, #332]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4a52      	ldr	r2, [pc, #328]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5c:	4b50      	ldr	r3, [pc, #320]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	494d      	ldr	r1, [pc, #308]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d040      	beq.n	8006afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d107      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	4b47      	ldr	r3, [pc, #284]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d115      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e07f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d107      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9a:	4b41      	ldr	r3, [pc, #260]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e073      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e06b      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aba:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	4936      	ldr	r1, [pc, #216]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006acc:	f7fc fad2 	bl	8003074 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad4:	f7fc face 	bl	8003074 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e053      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aea:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f003 020c 	and.w	r2, r3, #12
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d1eb      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006afc:	4b27      	ldr	r3, [pc, #156]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d210      	bcs.n	8006b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b24      	ldr	r3, [pc, #144]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 0207 	bic.w	r2, r3, #7
 8006b12:	4922      	ldr	r1, [pc, #136]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b20      	ldr	r3, [pc, #128]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e032      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b38:	4b19      	ldr	r3, [pc, #100]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4916      	ldr	r1, [pc, #88]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	490e      	ldr	r1, [pc, #56]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b6a:	f000 f821 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	490a      	ldr	r1, [pc, #40]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8006b7c:	5ccb      	ldrb	r3, [r1, r3]
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	4a09      	ldr	r2, [pc, #36]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8006b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b86:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <HAL_RCC_ClockConfig+0x1d0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fc fa30 	bl	8002ff0 <HAL_InitTick>

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40022000 	.word	0x40022000
 8006ba0:	40021000 	.word	0x40021000
 8006ba4:	0800f520 	.word	0x0800f520
 8006ba8:	20000014 	.word	0x20000014
 8006bac:	20000018 	.word	0x20000018

08006bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006bca:	4b1e      	ldr	r3, [pc, #120]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d002      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x30>
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d003      	beq.n	8006be6 <HAL_RCC_GetSysClockFreq+0x36>
 8006bde:	e027      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006be0:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8006be2:	613b      	str	r3, [r7, #16]
      break;
 8006be4:	e027      	b.n	8006c36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	0c9b      	lsrs	r3, r3, #18
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	4a17      	ldr	r2, [pc, #92]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006bf0:	5cd3      	ldrb	r3, [r2, r3]
 8006bf2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d010      	beq.n	8006c20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bfe:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	0c5b      	lsrs	r3, r3, #17
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	4a11      	ldr	r2, [pc, #68]	@ (8006c50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006c0a:	5cd3      	ldrb	r3, [r2, r3]
 8006c0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a0d      	ldr	r2, [pc, #52]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c12:	fb03 f202 	mul.w	r2, r3, r2
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e004      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a0c      	ldr	r2, [pc, #48]	@ (8006c54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	613b      	str	r3, [r7, #16]
      break;
 8006c2e:	e002      	b.n	8006c36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c30:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c32:	613b      	str	r3, [r7, #16]
      break;
 8006c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c36:	693b      	ldr	r3, [r7, #16]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
 8006c48:	007a1200 	.word	0x007a1200
 8006c4c:	0800f538 	.word	0x0800f538
 8006c50:	0800f548 	.word	0x0800f548
 8006c54:	003d0900 	.word	0x003d0900

08006c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c5c:	4b02      	ldr	r3, [pc, #8]	@ (8006c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr
 8006c68:	20000014 	.word	0x20000014

08006c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c70:	f7ff fff2 	bl	8006c58 <HAL_RCC_GetHCLKFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b05      	ldr	r3, [pc, #20]	@ (8006c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	4903      	ldr	r1, [pc, #12]	@ (8006c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c82:	5ccb      	ldrb	r3, [r1, r3]
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	0800f530 	.word	0x0800f530

08006c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c98:	f7ff ffde 	bl	8006c58 <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b05      	ldr	r3, [pc, #20]	@ (8006cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	0adb      	lsrs	r3, r3, #11
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4903      	ldr	r1, [pc, #12]	@ (8006cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	0800f530 	.word	0x0800f530

08006cbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <RCC_Delay+0x34>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf4 <RCC_Delay+0x38>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	0a5b      	lsrs	r3, r3, #9
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006cd8:	bf00      	nop
  }
  while (Delay --);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1e5a      	subs	r2, r3, #1
 8006cde:	60fa      	str	r2, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f9      	bne.n	8006cd8 <RCC_Delay+0x1c>
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr
 8006cf0:	20000014 	.word	0x20000014
 8006cf4:	10624dd3 	.word	0x10624dd3

08006cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e076      	b.n	8006df8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d1a:	d009      	beq.n	8006d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	61da      	str	r2, [r3, #28]
 8006d22:	e005      	b.n	8006d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb fe8c 	bl	8002a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db4:	ea42 0103 	orr.w	r1, r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	0c1a      	lsrs	r2, r3, #16
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f002 0204 	and.w	r2, r2, #4
 8006dd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69da      	ldr	r2, [r3, #28]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006de6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e10:	f7fc f930 	bl	8003074 <HAL_GetTick>
 8006e14:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d001      	beq.n	8006e2a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
 8006e28:	e12a      	b.n	8007080 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_SPI_Transmit+0x36>
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e122      	b.n	8007080 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_SPI_Transmit+0x48>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e11b      	b.n	8007080 <HAL_SPI_Transmit+0x280>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2203      	movs	r2, #3
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	88fa      	ldrh	r2, [r7, #6]
 8006e68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e96:	d10f      	bne.n	8006eb8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b40      	cmp	r3, #64	@ 0x40
 8006ec4:	d007      	beq.n	8006ed6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ed4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ede:	d152      	bne.n	8006f86 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_SPI_Transmit+0xee>
 8006ee8:	8b7b      	ldrh	r3, [r7, #26]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d145      	bne.n	8006f7a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	881a      	ldrh	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f12:	e032      	b.n	8006f7a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d112      	bne.n	8006f48 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	881a      	ldrh	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f32:	1c9a      	adds	r2, r3, #2
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f46:	e018      	b.n	8006f7a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f48:	f7fc f894 	bl	8003074 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d803      	bhi.n	8006f60 <HAL_SPI_Transmit+0x160>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d102      	bne.n	8006f66 <HAL_SPI_Transmit+0x166>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e082      	b.n	8007080 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1c7      	bne.n	8006f14 <HAL_SPI_Transmit+0x114>
 8006f84:	e053      	b.n	800702e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_SPI_Transmit+0x194>
 8006f8e:	8b7b      	ldrh	r3, [r7, #26]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d147      	bne.n	8007024 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fba:	e033      	b.n	8007024 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d113      	bne.n	8006ff2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ff0:	e018      	b.n	8007024 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff2:	f7fc f83f 	bl	8003074 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d803      	bhi.n	800700a <HAL_SPI_Transmit+0x20a>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d102      	bne.n	8007010 <HAL_SPI_Transmit+0x210>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e02d      	b.n	8007080 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1c6      	bne.n	8006fbc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fa5a 	bl	80074ec <SPI_EndRxTxTransaction>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
  }
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	@ 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007096:	2301      	movs	r3, #1
 8007098:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800709a:	f7fb ffeb 	bl	8003074 <HAL_GetTick>
 800709e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80070ae:	887b      	ldrh	r3, [r7, #2]
 80070b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070b2:	7ffb      	ldrb	r3, [r7, #31]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d00c      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x4a>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070be:	d106      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x46>
 80070c8:	7ffb      	ldrb	r3, [r7, #31]
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d001      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80070ce:	2302      	movs	r3, #2
 80070d0:	e17f      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x5c>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x5c>
 80070de:	887b      	ldrh	r3, [r7, #2]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e174      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x6e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e16d      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b04      	cmp	r3, #4
 8007108:	d003      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2205      	movs	r2, #5
 800710e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	887a      	ldrh	r2, [r7, #2]
 8007122:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	887a      	ldrh	r2, [r7, #2]
 8007128:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	887a      	ldrh	r2, [r7, #2]
 8007134:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	887a      	ldrh	r2, [r7, #2]
 800713a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007152:	2b40      	cmp	r3, #64	@ 0x40
 8007154:	d007      	beq.n	8007166 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716e:	d17e      	bne.n	800726e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_SPI_TransmitReceive+0xf6>
 8007178:	8afb      	ldrh	r3, [r7, #22]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d16c      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007182:	881a      	ldrh	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718e:	1c9a      	adds	r2, r3, #2
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a2:	e059      	b.n	8007258 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d11b      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x162>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d016      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x162>
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d113      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c6:	881a      	ldrh	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d119      	bne.n	800722c <HAL_SPI_TransmitReceive+0x1a4>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d014      	beq.n	800722c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720c:	b292      	uxth	r2, r2
 800720e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007228:	2301      	movs	r3, #1
 800722a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800722c:	f7fb ff22 	bl	8003074 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007238:	429a      	cmp	r2, r3
 800723a:	d80d      	bhi.n	8007258 <HAL_SPI_TransmitReceive+0x1d0>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d009      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e0bc      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1a0      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x11c>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d19b      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x11c>
 800726c:	e082      	b.n	8007374 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_SPI_TransmitReceive+0x1f4>
 8007276:	8afb      	ldrh	r3, [r7, #22]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d171      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a2:	e05d      	b.n	8007360 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d11c      	bne.n	80072ec <HAL_SPI_TransmitReceive+0x264>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d017      	beq.n	80072ec <HAL_SPI_TransmitReceive+0x264>
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d114      	bne.n	80072ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	330c      	adds	r3, #12
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d119      	bne.n	800732e <HAL_SPI_TransmitReceive+0x2a6>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d014      	beq.n	800732e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800732a:	2301      	movs	r3, #1
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800732e:	f7fb fea1 	bl	8003074 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733a:	429a      	cmp	r2, r3
 800733c:	d803      	bhi.n	8007346 <HAL_SPI_TransmitReceive+0x2be>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d102      	bne.n	800734c <HAL_SPI_TransmitReceive+0x2c4>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d109      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e038      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d19c      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x21c>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d197      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f8b7 	bl	80074ec <SPI_EndRxTxTransaction>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e01d      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e000      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3728      	adds	r7, #40	@ 0x28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073ec:	f7fb fe42 	bl	8003074 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4413      	add	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073fc:	f7fb fe3a 	bl	8003074 <HAL_GetTick>
 8007400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007402:	4b39      	ldr	r3, [pc, #228]	@ (80074e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	015b      	lsls	r3, r3, #5
 8007408:	0d1b      	lsrs	r3, r3, #20
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	e054      	b.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d050      	beq.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800741c:	f7fb fe2a 	bl	8003074 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	429a      	cmp	r2, r3
 800742a:	d902      	bls.n	8007432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d13d      	bne.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800744a:	d111      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007454:	d004      	beq.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745e:	d107      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007478:	d10f      	bne.n	800749a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e017      	b.n	80074de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d19b      	bne.n	8007414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000014 	.word	0x20000014

080074ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2201      	movs	r2, #1
 8007500:	2102      	movs	r1, #2
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff ff6a 	bl	80073dc <SPI_WaitFlagStateUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e013      	b.n	8007546 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2200      	movs	r2, #0
 8007526:	2180      	movs	r1, #128	@ 0x80
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff ff57 	bl	80073dc <SPI_WaitFlagStateUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e000      	b.n	8007546 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e042      	b.n	80075e6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7fb fcb5 	bl	8002ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2224      	movs	r2, #36	@ 0x24
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007590:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f972 	bl	800787c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b08a      	sub	sp, #40	@ 0x28
 80075f2:	af02      	add	r7, sp, #8
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b20      	cmp	r3, #32
 800760c:	d175      	bne.n	80076fa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_UART_Transmit+0x2c>
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e06e      	b.n	80076fc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2221      	movs	r2, #33	@ 0x21
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800762c:	f7fb fd22 	bl	8003074 <HAL_GetTick>
 8007630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	88fa      	ldrh	r2, [r7, #6]
 800763c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007646:	d108      	bne.n	800765a <HAL_UART_Transmit+0x6c>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	e003      	b.n	8007662 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007662:	e02e      	b.n	80076c2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2200      	movs	r2, #0
 800766c:	2180      	movs	r1, #128	@ 0x80
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 f848 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e03a      	b.n	80076fc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800769a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	3302      	adds	r3, #2
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e007      	b.n	80076b4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	3301      	adds	r3, #1
 80076b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1cb      	bne.n	8007664 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2140      	movs	r1, #64	@ 0x40
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f814 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e006      	b.n	80076fc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e000      	b.n	80076fc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80076fa:	2302      	movs	r3, #2
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007714:	e03b      	b.n	800778e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d037      	beq.n	800778e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7fb fca9 	bl	8003074 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	6a3a      	ldr	r2, [r7, #32]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <UART_WaitOnFlagUntilTimeout+0x30>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e03a      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d023      	beq.n	800778e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b80      	cmp	r3, #128	@ 0x80
 800774a:	d020      	beq.n	800778e <UART_WaitOnFlagUntilTimeout+0x8a>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b40      	cmp	r3, #64	@ 0x40
 8007750:	d01d      	beq.n	800778e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d116      	bne.n	800778e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f81d 	bl	80077b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2208      	movs	r2, #8
 8007780:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e00f      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4013      	ands	r3, r2
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	429a      	cmp	r2, r3
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d0b4      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b095      	sub	sp, #84	@ 0x54
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	330c      	adds	r3, #12
 80077dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077de:	643a      	str	r2, [r7, #64]	@ 0x40
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	61fb      	str	r3, [r7, #28]
   return(result);
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e5      	bne.n	80077f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782a:	2b01      	cmp	r3, #1
 800782c:	d119      	bne.n	8007862 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	330c      	adds	r3, #12
 8007834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	60bb      	str	r3, [r7, #8]
   return(result);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f023 0310 	bic.w	r3, r3, #16
 8007844:	647b      	str	r3, [r7, #68]	@ 0x44
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800784e:	61ba      	str	r2, [r7, #24]
 8007850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6979      	ldr	r1, [r7, #20]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	613b      	str	r3, [r7, #16]
   return(result);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007870:	bf00      	nop
 8007872:	3754      	adds	r7, #84	@ 0x54
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
	...

0800787c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80078b6:	f023 030c 	bic.w	r3, r3, #12
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	430b      	orrs	r3, r1
 80078c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2c      	ldr	r2, [pc, #176]	@ (8007990 <UART_SetConfig+0x114>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d103      	bne.n	80078ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80078e4:	f7ff f9d6 	bl	8006c94 <HAL_RCC_GetPCLK2Freq>
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	e002      	b.n	80078f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078ec:	f7ff f9be 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 80078f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009a      	lsls	r2, r3, #2
 80078fc:	441a      	add	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	fbb2 f3f3 	udiv	r3, r2, r3
 8007908:	4a22      	ldr	r2, [pc, #136]	@ (8007994 <UART_SetConfig+0x118>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	0119      	lsls	r1, r3, #4
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009a      	lsls	r2, r3, #2
 800791c:	441a      	add	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	fbb2 f2f3 	udiv	r2, r2, r3
 8007928:	4b1a      	ldr	r3, [pc, #104]	@ (8007994 <UART_SetConfig+0x118>)
 800792a:	fba3 0302 	umull	r0, r3, r3, r2
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	2064      	movs	r0, #100	@ 0x64
 8007932:	fb00 f303 	mul.w	r3, r0, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	3332      	adds	r3, #50	@ 0x32
 800793c:	4a15      	ldr	r2, [pc, #84]	@ (8007994 <UART_SetConfig+0x118>)
 800793e:	fba2 2303 	umull	r2, r3, r2, r3
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007948:	4419      	add	r1, r3
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009a      	lsls	r2, r3, #2
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007960:	4b0c      	ldr	r3, [pc, #48]	@ (8007994 <UART_SetConfig+0x118>)
 8007962:	fba3 0302 	umull	r0, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	2064      	movs	r0, #100	@ 0x64
 800796a:	fb00 f303 	mul.w	r3, r0, r3
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	3332      	adds	r3, #50	@ 0x32
 8007974:	4a07      	ldr	r2, [pc, #28]	@ (8007994 <UART_SetConfig+0x118>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	f003 020f 	and.w	r2, r3, #15
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	440a      	add	r2, r1
 8007986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40013800 	.word	0x40013800
 8007994:	51eb851f 	.word	0x51eb851f

08007998 <i2c_WriteReg>:
#include "myiic.h"


void i2c_WriteReg(uint8_t dev,uint8_t reg,uint8_t val){
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af04      	add	r7, sp, #16
 800799e:	4603      	mov	r3, r0
 80079a0:	71fb      	strb	r3, [r7, #7]
 80079a2:	460b      	mov	r3, r1
 80079a4:	71bb      	strb	r3, [r7, #6]
 80079a6:	4613      	mov	r3, r2
 80079a8:	717b      	strb	r3, [r7, #5]
	static uint8_t writeval;
	writeval = val;
 80079aa:	4a0b      	ldr	r2, [pc, #44]	@ (80079d8 <i2c_WriteReg+0x40>)
 80079ac:	797b      	ldrb	r3, [r7, #5]
 80079ae:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Mem_Write(&hi2c1 ,dev, reg ,I2C_MEMADD_SIZE_8BIT, &writeval ,1,0xffff);
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	b299      	uxth	r1, r3
 80079b4:	79bb      	ldrb	r3, [r7, #6]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079bc:	9302      	str	r3, [sp, #8]
 80079be:	2301      	movs	r3, #1
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <i2c_WriteReg+0x40>)
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	2301      	movs	r3, #1
 80079c8:	4804      	ldr	r0, [pc, #16]	@ (80079dc <i2c_WriteReg+0x44>)
 80079ca:	f7fc f969 	bl	8003ca0 <HAL_I2C_Mem_Write>

}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20001fb4 	.word	0x20001fb4
 80079dc:	20001da8 	.word	0x20001da8

080079e0 <i2c_ReadReg>:

uint8_t i2c_ReadReg(uint8_t dev,uint8_t val){
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	4603      	mov	r3, r0
 80079e8:	460a      	mov	r2, r1
 80079ea:	71fb      	strb	r3, [r7, #7]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71bb      	strb	r3, [r7, #6]
	static uint8_t readval ;
	HAL_I2C_Mem_Read(&hi2c1 ,dev, val, I2C_MEMADD_SIZE_8BIT , &readval , 1,0xffff);
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	b299      	uxth	r1, r3
 80079f4:	79bb      	ldrb	r3, [r7, #6]
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079fc:	9302      	str	r3, [sp, #8]
 80079fe:	2301      	movs	r3, #1
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <i2c_ReadReg+0x3c>)
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2301      	movs	r3, #1
 8007a08:	4805      	ldr	r0, [pc, #20]	@ (8007a20 <i2c_ReadReg+0x40>)
 8007a0a:	f7fc fa43 	bl	8003e94 <HAL_I2C_Mem_Read>
	return readval;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	@ (8007a1c <i2c_ReadReg+0x3c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20001fb5 	.word	0x20001fb5
 8007a20:	20001da8 	.word	0x20001da8

08007a24 <i2c_ReadMuti>:
void i2c_ReadMuti(uint8_t dev ,uint8_t len , uint8_t reg ,uint8_t  * Buffer){
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af04      	add	r7, sp, #16
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	71fb      	strb	r3, [r7, #7]
 8007a30:	460b      	mov	r3, r1
 8007a32:	71bb      	strb	r3, [r7, #6]
 8007a34:	4613      	mov	r3, r2
 8007a36:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1 ,dev, reg, I2C_MEMADD_SIZE_8BIT , Buffer , len,0xffff);
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	b299      	uxth	r1, r3
 8007a3c:	797b      	ldrb	r3, [r7, #5]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	79bb      	ldrb	r3, [r7, #6]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007a48:	9002      	str	r0, [sp, #8]
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2301      	movs	r3, #1
 8007a52:	4803      	ldr	r0, [pc, #12]	@ (8007a60 <i2c_ReadMuti+0x3c>)
 8007a54:	f7fc fa1e 	bl	8003e94 <HAL_I2C_Mem_Read>
	/*int i = 0;
	for(i = 0;i<len;i++)
	{
		Buffer[i] = i2c_ReadReg(dev,reg+i);
	}*/
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20001da8 	.word	0x20001da8

08007a64 <NRF24L01_Init>:
const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址

//初始化24L01的IO口

void NRF24L01_Init()
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);  	//使能24L01
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a6e:	4805      	ldr	r0, [pc, #20]	@ (8007a84 <NRF24L01_Init+0x20>)
 8007a70:	f7fb ffa6 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);	  //SPI片选取消
 8007a74:	2201      	movs	r2, #1
 8007a76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a7a:	4803      	ldr	r0, [pc, #12]	@ (8007a88 <NRF24L01_Init+0x24>)
 8007a7c:	f7fb ffa0 	bl	80039c0 <HAL_GPIO_WritePin>
}
 8007a80:	bf00      	nop
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40010c00 	.word	0x40010c00
 8007a88:	40010800 	.word	0x40010800

08007a8c <NRF24L01_Write_Buf>:

/* USER CODE BEGIN 1 */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71bb      	strb	r3, [r7, #6]
	uint8_t status,reg_read = reg,ctr;
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET); //使能SPI传输
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007aa6:	480f      	ldr	r0, [pc, #60]	@ (8007ae4 <NRF24L01_Write_Buf+0x58>)
 8007aa8:	f7fb ff8a 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,&reg_read,&status,1,100);//发送寄存器值(位置),并读取状态值
 8007aac:	f107 020f 	add.w	r2, r7, #15
 8007ab0:	f107 010e 	add.w	r1, r7, #14
 8007ab4:	2364      	movs	r3, #100	@ 0x64
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	480b      	ldr	r0, [pc, #44]	@ (8007ae8 <NRF24L01_Write_Buf+0x5c>)
 8007abc:	f7ff fae4 	bl	8007088 <HAL_SPI_TransmitReceive>
	//HAL_SPI_Transmit_DMA(&hspi1,pBuf,len);
	HAL_SPI_Transmit(&hspi1,pBuf,len,100);
 8007ac0:	79bb      	ldrb	r3, [r7, #6]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	2364      	movs	r3, #100	@ 0x64
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	4807      	ldr	r0, [pc, #28]	@ (8007ae8 <NRF24L01_Write_Buf+0x5c>)
 8007aca:	f7ff f999 	bl	8006e00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET); //关闭SPI传输
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ad4:	4803      	ldr	r0, [pc, #12]	@ (8007ae4 <NRF24L01_Write_Buf+0x58>)
 8007ad6:	f7fb ff73 	bl	80039c0 <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40010800 	.word	0x40010800
 8007ae8:	20001e84 	.word	0x20001e84

08007aec <NRF24L01_Read_Buf>:
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	4603      	mov	r3, r0
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
 8007af8:	4613      	mov	r3, r2
 8007afa:	71bb      	strb	r3, [r7, #6]
	uint8_t status,reg_read = reg,ctr = 0, bufftmp = 0,rw = 0xFF;
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	733b      	strb	r3, [r7, #12]
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
 8007b04:	2300      	movs	r3, #0
 8007b06:	73bb      	strb	r3, [r7, #14]
 8007b08:	23ff      	movs	r3, #255	@ 0xff
 8007b0a:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET); //使能SPI传输
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b12:	4816      	ldr	r0, [pc, #88]	@ (8007b6c <NRF24L01_Read_Buf+0x80>)
 8007b14:	f7fb ff54 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,&reg_read,&status,1,100);
 8007b18:	f107 020d 	add.w	r2, r7, #13
 8007b1c:	f107 010c 	add.w	r1, r7, #12
 8007b20:	2364      	movs	r3, #100	@ 0x64
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	2301      	movs	r3, #1
 8007b26:	4812      	ldr	r0, [pc, #72]	@ (8007b70 <NRF24L01_Read_Buf+0x84>)
 8007b28:	f7ff faae 	bl	8007088 <HAL_SPI_TransmitReceive>
	for(ctr = 0;ctr < len; ctr++)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
 8007b30:	e00d      	b.n	8007b4e <NRF24L01_Read_Buf+0x62>
		HAL_SPI_TransmitReceive(&hspi1,&rw,&pBuf[ctr],1,100);
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	441a      	add	r2, r3
 8007b38:	f107 010b 	add.w	r1, r7, #11
 8007b3c:	2364      	movs	r3, #100	@ 0x64
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2301      	movs	r3, #1
 8007b42:	480b      	ldr	r0, [pc, #44]	@ (8007b70 <NRF24L01_Read_Buf+0x84>)
 8007b44:	f7ff faa0 	bl	8007088 <HAL_SPI_TransmitReceive>
	for(ctr = 0;ctr < len; ctr++)
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	73fb      	strb	r3, [r7, #15]
 8007b4e:	7bfa      	ldrb	r2, [r7, #15]
 8007b50:	79bb      	ldrb	r3, [r7, #6]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d3ed      	bcc.n	8007b32 <NRF24L01_Read_Buf+0x46>

	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET); //关闭SPI传输
 8007b56:	2201      	movs	r2, #1
 8007b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b5c:	4803      	ldr	r0, [pc, #12]	@ (8007b6c <NRF24L01_Read_Buf+0x80>)
 8007b5e:	f7fb ff2f 	bl	80039c0 <HAL_GPIO_WritePin>
	return status;        //返回读到的状态值
 8007b62:	7b7b      	ldrb	r3, [r7, #13]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40010800 	.word	0x40010800
 8007b70:	20001e84 	.word	0x20001e84

08007b74 <NRF24L01_Check>:
  	return reg_val;           //返回状态值
}
//检测24L01是否存在
//返回值:0，成功;1，失败
uint8_t NRF24L01_Check()
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8007b7a:	4a17      	ldr	r2, [pc, #92]	@ (8007bd8 <NRF24L01_Check+0x64>)
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b82:	6018      	str	r0, [r3, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8007b88:	463b      	mov	r3, r7
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	2030      	movs	r0, #48	@ 0x30
 8007b90:	f7ff ff7c 	bl	8007a8c <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8007b94:	463b      	mov	r3, r7
 8007b96:	2205      	movs	r2, #5
 8007b98:	4619      	mov	r1, r3
 8007b9a:	2010      	movs	r0, #16
 8007b9c:	f7ff ffa6 	bl	8007aec <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	71fb      	strb	r3, [r7, #7]
 8007ba4:	e009      	b.n	8007bba <NRF24L01_Check+0x46>
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	3308      	adds	r3, #8
 8007baa:	443b      	add	r3, r7
 8007bac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007bb0:	2ba5      	cmp	r3, #165	@ 0xa5
 8007bb2:	d106      	bne.n	8007bc2 <NRF24L01_Check+0x4e>
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	71fb      	strb	r3, [r7, #7]
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d9f2      	bls.n	8007ba6 <NRF24L01_Check+0x32>
 8007bc0:	e000      	b.n	8007bc4 <NRF24L01_Check+0x50>
 8007bc2:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d001      	beq.n	8007bce <NRF24L01_Check+0x5a>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <NRF24L01_Check+0x5c>
	return 0;		 //检测到24L01
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	0800f4e0 	.word	0x0800f4e0

08007bdc <QMC5883_Init>:
            int16_t AZ;
        }stData;
} uQMC5883_Data;

void QMC5883_Init()
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
    uint8_t uChipID = 0,ready =0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	71fb      	strb	r3, [r7, #7]
 8007be6:	2300      	movs	r3, #0
 8007be8:	71bb      	strb	r3, [r7, #6]
   
    // 1.Device Reset & check Device  -32768 and 32767
    //i2c_WriteReg(QMC5883_DEV,0x0A,0x80); //PowerReset
    //delay_ms(100);
    i2c_WriteReg(QMC5883_DEV,0x0B,0x01); //PowerReset
 8007bea:	2201      	movs	r2, #1
 8007bec:	210b      	movs	r1, #11
 8007bee:	201a      	movs	r0, #26
 8007bf0:	f7ff fed2 	bl	8007998 <i2c_WriteReg>
    i2c_WriteReg(QMC5883_DEV,0x20,0x40); //PowerReset
 8007bf4:	2240      	movs	r2, #64	@ 0x40
 8007bf6:	2120      	movs	r1, #32
 8007bf8:	201a      	movs	r0, #26
 8007bfa:	f7ff fecd 	bl	8007998 <i2c_WriteReg>
    i2c_WriteReg(QMC5883_DEV,0x21,0x01); //PowerReset
 8007bfe:	2201      	movs	r2, #1
 8007c00:	2121      	movs	r1, #33	@ 0x21
 8007c02:	201a      	movs	r0, #26
 8007c04:	f7ff fec8 	bl	8007998 <i2c_WriteReg>
    //i2c_WriteReg(QMC5883_DEV,0x09,0x0d); // 512 OSR 2G ODR 200 
    i2c_WriteReg(QMC5883_DEV,0x09,0x89); //OSR 128 2G ODR 100
 8007c08:	2289      	movs	r2, #137	@ 0x89
 8007c0a:	2109      	movs	r1, #9
 8007c0c:	201a      	movs	r0, #26
 8007c0e:	f7ff fec3 	bl	8007998 <i2c_WriteReg>
    HAL_Delay(200);                           // wait stable
 8007c12:	20c8      	movs	r0, #200	@ 0xc8
 8007c14:	f7fb fa38 	bl	8003088 <HAL_Delay>
    while( uChipID!= 0xFF) 
 8007c18:	e008      	b.n	8007c2c <QMC5883_Init+0x50>
    {   
        uChipID = i2c_ReadReg(QMC5883_DEV,0x0D); // Read ID
 8007c1a:	210d      	movs	r1, #13
 8007c1c:	201a      	movs	r0, #26
 8007c1e:	f7ff fedf 	bl	80079e0 <i2c_ReadReg>
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(200);        // device check
 8007c26:	20c8      	movs	r0, #200	@ 0xc8
 8007c28:	f7fb fa2e 	bl	8003088 <HAL_Delay>
    while( uChipID!= 0xFF) 
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2bff      	cmp	r3, #255	@ 0xff
 8007c30:	d1f3      	bne.n	8007c1a <QMC5883_Init+0x3e>
    }
    printf("QMC5883 check Pass!\r\n");
 8007c32:	4803      	ldr	r0, [pc, #12]	@ (8007c40 <QMC5883_Init+0x64>)
 8007c34:	f002 fa16 	bl	800a064 <puts>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	0800f4e8 	.word	0x0800f4e8

08007c44 <QMI8658_Init>:
} uQMI8658_Data;



void QMI8658_Init()
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
    uint8_t uChipID = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	71fb      	strb	r3, [r7, #7]
    
    // 1.Device Reset & check Device
    i2c_WriteReg(QMI8658_DEV,CTRL9,0xA2); //PowerReset
 8007c4e:	22a2      	movs	r2, #162	@ 0xa2
 8007c50:	210a      	movs	r1, #10
 8007c52:	20d5      	movs	r0, #213	@ 0xd5
 8007c54:	f7ff fea0 	bl	8007998 <i2c_WriteReg>
    HAL_Delay(200);                           // wait stable
 8007c58:	20c8      	movs	r0, #200	@ 0xc8
 8007c5a:	f7fb fa15 	bl	8003088 <HAL_Delay>
    while(uChipID != 0x5) 
 8007c5e:	e008      	b.n	8007c72 <QMI8658_Init+0x2e>
	{
    	HAL_Delay(200);        // device check
 8007c60:	20c8      	movs	r0, #200	@ 0xc8
 8007c62:	f7fb fa11 	bl	8003088 <HAL_Delay>
		uChipID = i2c_ReadReg(QMI8658_DEV,0x00); // Read ID
 8007c66:	2100      	movs	r1, #0
 8007c68:	20d5      	movs	r0, #213	@ 0xd5
 8007c6a:	f7ff feb9 	bl	80079e0 <i2c_ReadReg>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	71fb      	strb	r3, [r7, #7]
    while(uChipID != 0x5) 
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d1f3      	bne.n	8007c60 <QMI8658_Init+0x1c>
	}
		
    printf("QMI8658 check Pass!\r\n");
 8007c78:	4812      	ldr	r0, [pc, #72]	@ (8007cc4 <QMI8658_Init+0x80>)
 8007c7a:	f002 f9f3 	bl	800a064 <puts>
    
    //2.Device Settings
    i2c_WriteReg(QMI8658_DEV,CTRL1,0x40); //��ַ������С��
 8007c7e:	2240      	movs	r2, #64	@ 0x40
 8007c80:	2102      	movs	r1, #2
 8007c82:	20d5      	movs	r0, #213	@ 0xd5
 8007c84:	f7ff fe88 	bl	8007998 <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL2,0x33); //���ü��ٶȼ� ����+-16g(2048)��������ODR==1kHZ
 8007c88:	2233      	movs	r2, #51	@ 0x33
 8007c8a:	2103      	movs	r1, #3
 8007c8c:	20d5      	movs	r0, #213	@ 0xd5
 8007c8e:	f7ff fe83 	bl	8007998 <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL3,0x53); //����������  ���̡�512 dps(64) ,��������940HZ
 8007c92:	2253      	movs	r2, #83	@ 0x53
 8007c94:	2104      	movs	r1, #4
 8007c96:	20d5      	movs	r0, #213	@ 0xd5
 8007c98:	f7ff fe7e 	bl	8007998 <i2c_WriteReg>
    //i2c_WriteReg(QMI8658_DEV,CTRL5,0x0); //��ʹ�õ�ͨ�˲���
    i2c_WriteReg(QMI8658_DEV,CTRL5,0x77); //ʹ�õ�ͨ�˲���  13.37% ��ODR
 8007c9c:	2277      	movs	r2, #119	@ 0x77
 8007c9e:	2106      	movs	r1, #6
 8007ca0:	20d5      	movs	r0, #213	@ 0xd5
 8007ca2:	f7ff fe79 	bl	8007998 <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL6,0x0); //��ʹ��Motion on Demand
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2107      	movs	r1, #7
 8007caa:	20d5      	movs	r0, #213	@ 0xd5
 8007cac:	f7ff fe74 	bl	8007998 <i2c_WriteReg>
    i2c_WriteReg(QMI8658_DEV,CTRL7,0x03); // ʹ�ܼ��ٶȼƺ�������
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	2108      	movs	r1, #8
 8007cb4:	20d5      	movs	r0, #213	@ 0xd5
 8007cb6:	f7ff fe6f 	bl	8007998 <i2c_WriteReg>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800f500 	.word	0x0800f500

08007cc8 <QMI8658_dataGet>:

void QMI8658_dataGet(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
    i2c_ReadMuti(QMI8658_DEV,12,AX_L,uQMI8658_Data.buffer);
 8007ccc:	4b12      	ldr	r3, [pc, #72]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007cce:	2235      	movs	r2, #53	@ 0x35
 8007cd0:	210c      	movs	r1, #12
 8007cd2:	20d5      	movs	r0, #213	@ 0xd5
 8007cd4:	f7ff fea6 	bl	8007a24 <i2c_ReadMuti>
    gstSenSorRaw.AccRaw.ax = uQMI8658_Data.stData.AX;
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007cda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007cde:	4b0f      	ldr	r3, [pc, #60]	@ (8007d1c <QMI8658_dataGet+0x54>)
 8007ce0:	801a      	strh	r2, [r3, #0]
	gstSenSorRaw.AccRaw.ay = uQMI8658_Data.stData.AY;
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007ce4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <QMI8658_dataGet+0x54>)
 8007cea:	805a      	strh	r2, [r3, #2]
	gstSenSorRaw.AccRaw.az = uQMI8658_Data.stData.AZ;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007cee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <QMI8658_dataGet+0x54>)
 8007cf4:	809a      	strh	r2, [r3, #4]
	gstSenSorRaw.GyroRaw.gx  = uQMI8658_Data.stData.GX;
 8007cf6:	4b08      	ldr	r3, [pc, #32]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007cf8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007cfc:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <QMI8658_dataGet+0x54>)
 8007cfe:	80da      	strh	r2, [r3, #6]
	gstSenSorRaw.GyroRaw.gy  = uQMI8658_Data.stData.GY;
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007d02:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8007d06:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <QMI8658_dataGet+0x54>)
 8007d08:	811a      	strh	r2, [r3, #8]
	gstSenSorRaw.GyroRaw.gz  = uQMI8658_Data.stData.GZ;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <QMI8658_dataGet+0x50>)
 8007d0c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8007d10:	4b02      	ldr	r3, [pc, #8]	@ (8007d1c <QMI8658_dataGet+0x54>)
 8007d12:	815a      	strh	r2, [r3, #10]
		#ifdef TEST_MODE	
		printf("[QMI8658]:AX=%d AY=%d AZ=%d GX=%d GY=%d GZ=%d \r\n", \
    (int16_t)uQMI8658_Data.stData.AX,(int16_t)uQMI8658_Data.stData.AY,(int16_t)uQMI8658_Data.stData.AZ,\
    (int16_t)uQMI8658_Data.stData.GX,(int16_t)uQMI8658_Data.stData.GY,(int16_t)uQMI8658_Data.stData.GZ  );
		#endif*/
}
 8007d14:	bf00      	nop
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20001fb8 	.word	0x20001fb8
 8007d1c:	20000214 	.word	0x20000214

08007d20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d32:	2b84      	cmp	r3, #132	@ 0x84
 8007d34:	d005      	beq.n	8007d42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3303      	adds	r3, #3
 8007d40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d42:	68fb      	ldr	r3, [r7, #12]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr

08007d4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d52:	f000 fadf 	bl	8008314 <vTaskStartScheduler>
  
  return osOK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5e:	b089      	sub	sp, #36	@ 0x24
 8007d60:	af04      	add	r7, sp, #16
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d020      	beq.n	8007db0 <osThreadCreate+0x54>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01c      	beq.n	8007db0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685c      	ldr	r4, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691e      	ldr	r6, [r3, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff ffc9 	bl	8007d20 <makeFreeRtosPriority>
 8007d8e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d98:	9202      	str	r2, [sp, #8]
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	9100      	str	r1, [sp, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	4632      	mov	r2, r6
 8007da2:	4629      	mov	r1, r5
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 f8e8 	bl	8007f7a <xTaskCreateStatic>
 8007daa:	4603      	mov	r3, r0
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e01c      	b.n	8007dea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685c      	ldr	r4, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dbc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff ffab 	bl	8007d20 <makeFreeRtosPriority>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	f107 030c 	add.w	r3, r7, #12
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	9200      	str	r2, [sp, #0]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 f92d 	bl	800803a <xTaskCreate>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d001      	beq.n	8007dea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e000      	b.n	8007dec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007df4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <osDelay+0x16>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	e000      	b.n	8007e0c <osDelay+0x18>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fa4b 	bl	80082a8 <vTaskDelay>
  
  return osOK;
 8007e12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f103 0208 	add.w	r2, r3, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f103 0208 	add.w	r2, r3, #8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f103 0208 	add.w	r2, r3, #8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr

08007e5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr

08007e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
}
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr

08007eb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ece:	d103      	bne.n	8007ed8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	e00c      	b.n	8007ef2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3308      	adds	r3, #8
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e002      	b.n	8007ee6 <vListInsert+0x2e>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d2f6      	bcs.n	8007ee0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr

08007f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6892      	ldr	r2, [r2, #8]
 8007f3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6852      	ldr	r2, [r2, #4]
 8007f48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d103      	bne.n	8007f5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	1e5a      	subs	r2, r3, #1
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr

08007f7a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b08e      	sub	sp, #56	@ 0x38
 8007f7e:	af04      	add	r7, sp, #16
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10b      	bne.n	8007fc4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	61fb      	str	r3, [r7, #28]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fc4:	2354      	movs	r3, #84	@ 0x54
 8007fc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2b54      	cmp	r3, #84	@ 0x54
 8007fcc:	d00b      	beq.n	8007fe6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	61bb      	str	r3, [r7, #24]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01e      	beq.n	800802c <xTaskCreateStatic+0xb2>
 8007fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01b      	beq.n	800802c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ffc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	2202      	movs	r2, #2
 8008002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008006:	2300      	movs	r3, #0
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	f107 0314 	add.w	r3, r7, #20
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f850 	bl	80080c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008024:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008026:	f000 f8d5 	bl	80081d4 <prvAddNewTaskToReadyList>
 800802a:	e001      	b.n	8008030 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008030:	697b      	ldr	r3, [r7, #20]
	}
 8008032:	4618      	mov	r0, r3
 8008034:	3728      	adds	r7, #40	@ 0x28
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800803a:	b580      	push	{r7, lr}
 800803c:	b08c      	sub	sp, #48	@ 0x30
 800803e:	af04      	add	r7, sp, #16
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	4613      	mov	r3, r2
 8008048:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fe8e 	bl	8008d70 <pvPortMalloc>
 8008054:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800805c:	2054      	movs	r0, #84	@ 0x54
 800805e:	f000 fe87 	bl	8008d70 <pvPortMalloc>
 8008062:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008070:	e005      	b.n	800807e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f000 ff4a 	bl	8008f0c <vPortFree>
 8008078:	e001      	b.n	800807e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d017      	beq.n	80080b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800808c:	88fa      	ldrh	r2, [r7, #6]
 800808e:	2300      	movs	r3, #0
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 f80e 	bl	80080c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080a8:	69f8      	ldr	r0, [r7, #28]
 80080aa:	f000 f893 	bl	80081d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080ae:	2301      	movs	r3, #1
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	e002      	b.n	80080ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080ba:	69bb      	ldr	r3, [r7, #24]
	}
 80080bc:	4618      	mov	r0, r3
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80080dc:	3b01      	subs	r3, #1
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00b      	beq.n	800810e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	617b      	str	r3, [r7, #20]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01f      	beq.n	8008154 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e012      	b.n	8008140 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	7819      	ldrb	r1, [r3, #0]
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	3334      	adds	r3, #52	@ 0x34
 800812a:	460a      	mov	r2, r1
 800812c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d006      	beq.n	8008148 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	3301      	adds	r3, #1
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2b0f      	cmp	r3, #15
 8008144:	d9e9      	bls.n	800811a <prvInitialiseNewTask+0x56>
 8008146:	e000      	b.n	800814a <prvInitialiseNewTask+0x86>
			{
				break;
 8008148:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008152:	e003      	b.n	800815c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800815c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815e:	2b06      	cmp	r3, #6
 8008160:	d901      	bls.n	8008166 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008162:	2306      	movs	r3, #6
 8008164:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800816a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008170:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2200      	movs	r2, #0
 8008176:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	3304      	adds	r3, #4
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fe6c 	bl	8007e5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	3318      	adds	r3, #24
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fe67 	bl	8007e5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	f1c3 0207 	rsb	r2, r3, #7
 8008198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	2200      	movs	r2, #0
 80081a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	69b8      	ldr	r0, [r7, #24]
 80081b6:	f000 fc2b 	bl	8008a10 <pxPortInitialiseStack>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081cc:	bf00      	nop
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081dc:	f000 fd06 	bl	8008bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081e0:	4b2a      	ldr	r3, [pc, #168]	@ (800828c <prvAddNewTaskToReadyList+0xb8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a29      	ldr	r2, [pc, #164]	@ (800828c <prvAddNewTaskToReadyList+0xb8>)
 80081e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ea:	4b29      	ldr	r3, [pc, #164]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081f2:	4a27      	ldr	r2, [pc, #156]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081f8:	4b24      	ldr	r3, [pc, #144]	@ (800828c <prvAddNewTaskToReadyList+0xb8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d110      	bne.n	8008222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008200:	f000 fac4 	bl	800878c <prvInitialiseTaskLists>
 8008204:	e00d      	b.n	8008222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008206:	4b23      	ldr	r3, [pc, #140]	@ (8008294 <prvAddNewTaskToReadyList+0xc0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800820e:	4b20      	ldr	r3, [pc, #128]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	429a      	cmp	r2, r3
 800821a:	d802      	bhi.n	8008222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800821c:	4a1c      	ldr	r2, [pc, #112]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008222:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <prvAddNewTaskToReadyList+0xc4>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	4a1b      	ldr	r2, [pc, #108]	@ (8008298 <prvAddNewTaskToReadyList+0xc4>)
 800822a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	2201      	movs	r2, #1
 8008232:	409a      	lsls	r2, r3
 8008234:	4b19      	ldr	r3, [pc, #100]	@ (800829c <prvAddNewTaskToReadyList+0xc8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4313      	orrs	r3, r2
 800823a:	4a18      	ldr	r2, [pc, #96]	@ (800829c <prvAddNewTaskToReadyList+0xc8>)
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4a15      	ldr	r2, [pc, #84]	@ (80082a0 <prvAddNewTaskToReadyList+0xcc>)
 800824c:	441a      	add	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7ff fe0c 	bl	8007e72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800825a:	f000 fcf7 	bl	8008c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <prvAddNewTaskToReadyList+0xc0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00e      	beq.n	8008284 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008266:	4b0a      	ldr	r3, [pc, #40]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	429a      	cmp	r2, r3
 8008272:	d207      	bcs.n	8008284 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008274:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <prvAddNewTaskToReadyList+0xd0>)
 8008276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200020c4 	.word	0x200020c4
 8008290:	20001fc4 	.word	0x20001fc4
 8008294:	200020d0 	.word	0x200020d0
 8008298:	200020e0 	.word	0x200020e0
 800829c:	200020cc 	.word	0x200020cc
 80082a0:	20001fc8 	.word	0x20001fc8
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082ba:	4b14      	ldr	r3, [pc, #80]	@ (800830c <vTaskDelay+0x64>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <vTaskDelay+0x32>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60bb      	str	r3, [r7, #8]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082da:	f000 f87d 	bl	80083d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082de:	2100      	movs	r1, #0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fb2f 	bl	8008944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082e6:	f000 f885 	bl	80083f4 <xTaskResumeAll>
 80082ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d107      	bne.n	8008302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082f2:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <vTaskDelay+0x68>)
 80082f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200020ec 	.word	0x200020ec
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08a      	sub	sp, #40	@ 0x28
 8008318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008322:	463a      	mov	r2, r7
 8008324:	1d39      	adds	r1, r7, #4
 8008326:	f107 0308 	add.w	r3, r7, #8
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa f8e6 	bl	80024fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	9202      	str	r2, [sp, #8]
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	2300      	movs	r3, #0
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	2300      	movs	r3, #0
 8008340:	460a      	mov	r2, r1
 8008342:	491f      	ldr	r1, [pc, #124]	@ (80083c0 <vTaskStartScheduler+0xac>)
 8008344:	481f      	ldr	r0, [pc, #124]	@ (80083c4 <vTaskStartScheduler+0xb0>)
 8008346:	f7ff fe18 	bl	8007f7a <xTaskCreateStatic>
 800834a:	4603      	mov	r3, r0
 800834c:	4a1e      	ldr	r2, [pc, #120]	@ (80083c8 <vTaskStartScheduler+0xb4>)
 800834e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008350:	4b1d      	ldr	r3, [pc, #116]	@ (80083c8 <vTaskStartScheduler+0xb4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008358:	2301      	movs	r3, #1
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	e001      	b.n	8008362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d116      	bne.n	8008396 <vTaskStartScheduler+0x82>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	613b      	str	r3, [r7, #16]
}
 800837a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800837c:	4b13      	ldr	r3, [pc, #76]	@ (80083cc <vTaskStartScheduler+0xb8>)
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008384:	4b12      	ldr	r3, [pc, #72]	@ (80083d0 <vTaskStartScheduler+0xbc>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800838a:	4b12      	ldr	r3, [pc, #72]	@ (80083d4 <vTaskStartScheduler+0xc0>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008390:	f000 fbba 	bl	8008b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008394:	e00f      	b.n	80083b6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839c:	d10b      	bne.n	80083b6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <vTaskStartScheduler+0x9e>
}
 80083b6:	bf00      	nop
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	0800f518 	.word	0x0800f518
 80083c4:	0800875d 	.word	0x0800875d
 80083c8:	200020e8 	.word	0x200020e8
 80083cc:	200020e4 	.word	0x200020e4
 80083d0:	200020d0 	.word	0x200020d0
 80083d4:	200020c8 	.word	0x200020c8

080083d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083dc:	4b04      	ldr	r3, [pc, #16]	@ (80083f0 <vTaskSuspendAll+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a03      	ldr	r2, [pc, #12]	@ (80083f0 <vTaskSuspendAll+0x18>)
 80083e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	200020ec 	.word	0x200020ec

080083f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008402:	4b42      	ldr	r3, [pc, #264]	@ (800850c <xTaskResumeAll+0x118>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <xTaskResumeAll+0x2e>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	603b      	str	r3, [r7, #0]
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	e7fd      	b.n	800841e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008422:	f000 fbe3 	bl	8008bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008426:	4b39      	ldr	r3, [pc, #228]	@ (800850c <xTaskResumeAll+0x118>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3b01      	subs	r3, #1
 800842c:	4a37      	ldr	r2, [pc, #220]	@ (800850c <xTaskResumeAll+0x118>)
 800842e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008430:	4b36      	ldr	r3, [pc, #216]	@ (800850c <xTaskResumeAll+0x118>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d161      	bne.n	80084fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008438:	4b35      	ldr	r3, [pc, #212]	@ (8008510 <xTaskResumeAll+0x11c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d05d      	beq.n	80084fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008440:	e02e      	b.n	80084a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008442:	4b34      	ldr	r3, [pc, #208]	@ (8008514 <xTaskResumeAll+0x120>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3318      	adds	r3, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fd6a 	bl	8007f28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fd65 	bl	8007f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	2201      	movs	r2, #1
 8008464:	409a      	lsls	r2, r3
 8008466:	4b2c      	ldr	r3, [pc, #176]	@ (8008518 <xTaskResumeAll+0x124>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4313      	orrs	r3, r2
 800846c:	4a2a      	ldr	r2, [pc, #168]	@ (8008518 <xTaskResumeAll+0x124>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4a27      	ldr	r2, [pc, #156]	@ (800851c <xTaskResumeAll+0x128>)
 800847e:	441a      	add	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3304      	adds	r3, #4
 8008484:	4619      	mov	r1, r3
 8008486:	4610      	mov	r0, r2
 8008488:	f7ff fcf3 	bl	8007e72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008490:	4b23      	ldr	r3, [pc, #140]	@ (8008520 <xTaskResumeAll+0x12c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800849a:	4b22      	ldr	r3, [pc, #136]	@ (8008524 <xTaskResumeAll+0x130>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008514 <xTaskResumeAll+0x120>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1cc      	bne.n	8008442 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084ae:	f000 fa0b 	bl	80088c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <xTaskResumeAll+0x134>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d010      	beq.n	80084e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084be:	f000 f837 	bl	8008530 <xTaskIncrementTick>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084c8:	4b16      	ldr	r3, [pc, #88]	@ (8008524 <xTaskResumeAll+0x130>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1f1      	bne.n	80084be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084da:	4b13      	ldr	r3, [pc, #76]	@ (8008528 <xTaskResumeAll+0x134>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084e0:	4b10      	ldr	r3, [pc, #64]	@ (8008524 <xTaskResumeAll+0x130>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ec:	4b0f      	ldr	r3, [pc, #60]	@ (800852c <xTaskResumeAll+0x138>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084fc:	f000 fba6 	bl	8008c4c <vPortExitCritical>

	return xAlreadyYielded;
 8008500:	68bb      	ldr	r3, [r7, #8]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200020ec 	.word	0x200020ec
 8008510:	200020c4 	.word	0x200020c4
 8008514:	20002084 	.word	0x20002084
 8008518:	200020cc 	.word	0x200020cc
 800851c:	20001fc8 	.word	0x20001fc8
 8008520:	20001fc4 	.word	0x20001fc4
 8008524:	200020d8 	.word	0x200020d8
 8008528:	200020d4 	.word	0x200020d4
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853a:	4b4f      	ldr	r3, [pc, #316]	@ (8008678 <xTaskIncrementTick+0x148>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 808f 	bne.w	8008662 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008544:	4b4d      	ldr	r3, [pc, #308]	@ (800867c <xTaskIncrementTick+0x14c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800854c:	4a4b      	ldr	r2, [pc, #300]	@ (800867c <xTaskIncrementTick+0x14c>)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d121      	bne.n	800859c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008558:	4b49      	ldr	r3, [pc, #292]	@ (8008680 <xTaskIncrementTick+0x150>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	603b      	str	r3, [r7, #0]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xTaskIncrementTick+0x46>
 800857a:	4b41      	ldr	r3, [pc, #260]	@ (8008680 <xTaskIncrementTick+0x150>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	4b40      	ldr	r3, [pc, #256]	@ (8008684 <xTaskIncrementTick+0x154>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a3e      	ldr	r2, [pc, #248]	@ (8008680 <xTaskIncrementTick+0x150>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4a3e      	ldr	r2, [pc, #248]	@ (8008684 <xTaskIncrementTick+0x154>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	4b3e      	ldr	r3, [pc, #248]	@ (8008688 <xTaskIncrementTick+0x158>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a3c      	ldr	r2, [pc, #240]	@ (8008688 <xTaskIncrementTick+0x158>)
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	f000 f996 	bl	80088c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800859c:	4b3b      	ldr	r3, [pc, #236]	@ (800868c <xTaskIncrementTick+0x15c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d348      	bcc.n	8008638 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a6:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <xTaskIncrementTick+0x150>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b0:	4b36      	ldr	r3, [pc, #216]	@ (800868c <xTaskIncrementTick+0x15c>)
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	601a      	str	r2, [r3, #0]
					break;
 80085b8:	e03e      	b.n	8008638 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ba:	4b31      	ldr	r3, [pc, #196]	@ (8008680 <xTaskIncrementTick+0x150>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085d2:	4a2e      	ldr	r2, [pc, #184]	@ (800868c <xTaskIncrementTick+0x15c>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d8:	e02e      	b.n	8008638 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	3304      	adds	r3, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fca2 	bl	8007f28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3318      	adds	r3, #24
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fc99 	bl	8007f28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	2201      	movs	r2, #1
 80085fc:	409a      	lsls	r2, r3
 80085fe:	4b24      	ldr	r3, [pc, #144]	@ (8008690 <xTaskIncrementTick+0x160>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	4a22      	ldr	r2, [pc, #136]	@ (8008690 <xTaskIncrementTick+0x160>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a1f      	ldr	r2, [pc, #124]	@ (8008694 <xTaskIncrementTick+0x164>)
 8008616:	441a      	add	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7ff fc27 	bl	8007e72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008628:	4b1b      	ldr	r3, [pc, #108]	@ (8008698 <xTaskIncrementTick+0x168>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d3b9      	bcc.n	80085a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008636:	e7b6      	b.n	80085a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008638:	4b17      	ldr	r3, [pc, #92]	@ (8008698 <xTaskIncrementTick+0x168>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863e:	4915      	ldr	r1, [pc, #84]	@ (8008694 <xTaskIncrementTick+0x164>)
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d901      	bls.n	8008654 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008654:	4b11      	ldr	r3, [pc, #68]	@ (800869c <xTaskIncrementTick+0x16c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	e004      	b.n	800866c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008662:	4b0f      	ldr	r3, [pc, #60]	@ (80086a0 <xTaskIncrementTick+0x170>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3301      	adds	r3, #1
 8008668:	4a0d      	ldr	r2, [pc, #52]	@ (80086a0 <xTaskIncrementTick+0x170>)
 800866a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800866c:	697b      	ldr	r3, [r7, #20]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200020ec 	.word	0x200020ec
 800867c:	200020c8 	.word	0x200020c8
 8008680:	2000207c 	.word	0x2000207c
 8008684:	20002080 	.word	0x20002080
 8008688:	200020dc 	.word	0x200020dc
 800868c:	200020e4 	.word	0x200020e4
 8008690:	200020cc 	.word	0x200020cc
 8008694:	20001fc8 	.word	0x20001fc8
 8008698:	20001fc4 	.word	0x20001fc4
 800869c:	200020d8 	.word	0x200020d8
 80086a0:	200020d4 	.word	0x200020d4

080086a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <vTaskSwitchContext+0xa4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086b2:	4b26      	ldr	r3, [pc, #152]	@ (800874c <vTaskSwitchContext+0xa8>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b8:	e040      	b.n	800873c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80086ba:	4b24      	ldr	r3, [pc, #144]	@ (800874c <vTaskSwitchContext+0xa8>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c0:	4b23      	ldr	r3, [pc, #140]	@ (8008750 <vTaskSwitchContext+0xac>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	fab3 f383 	clz	r3, r3
 80086cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	f1c3 031f 	rsb	r3, r3, #31
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	491f      	ldr	r1, [pc, #124]	@ (8008754 <vTaskSwitchContext+0xb0>)
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <vTaskSwitchContext+0x5e>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <vTaskSwitchContext+0x5a>
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4a11      	ldr	r2, [pc, #68]	@ (8008754 <vTaskSwitchContext+0xb0>)
 800870e:	4413      	add	r3, r2
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	605a      	str	r2, [r3, #4]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3308      	adds	r3, #8
 8008724:	429a      	cmp	r2, r3
 8008726:	d104      	bne.n	8008732 <vTaskSwitchContext+0x8e>
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a07      	ldr	r2, [pc, #28]	@ (8008758 <vTaskSwitchContext+0xb4>)
 800873a:	6013      	str	r3, [r2, #0]
}
 800873c:	bf00      	nop
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	200020ec 	.word	0x200020ec
 800874c:	200020d8 	.word	0x200020d8
 8008750:	200020cc 	.word	0x200020cc
 8008754:	20001fc8 	.word	0x20001fc8
 8008758:	20001fc4 	.word	0x20001fc4

0800875c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008764:	f000 f852 	bl	800880c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008768:	4b06      	ldr	r3, [pc, #24]	@ (8008784 <prvIdleTask+0x28>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d9f9      	bls.n	8008764 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008770:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <prvIdleTask+0x2c>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008780:	e7f0      	b.n	8008764 <prvIdleTask+0x8>
 8008782:	bf00      	nop
 8008784:	20001fc8 	.word	0x20001fc8
 8008788:	e000ed04 	.word	0xe000ed04

0800878c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	e00c      	b.n	80087b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a12      	ldr	r2, [pc, #72]	@ (80087ec <prvInitialiseTaskLists+0x60>)
 80087a4:	4413      	add	r3, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fb38 	bl	8007e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3301      	adds	r3, #1
 80087b0:	607b      	str	r3, [r7, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	d9ef      	bls.n	8008798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087b8:	480d      	ldr	r0, [pc, #52]	@ (80087f0 <prvInitialiseTaskLists+0x64>)
 80087ba:	f7ff fb2f 	bl	8007e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087be:	480d      	ldr	r0, [pc, #52]	@ (80087f4 <prvInitialiseTaskLists+0x68>)
 80087c0:	f7ff fb2c 	bl	8007e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087c4:	480c      	ldr	r0, [pc, #48]	@ (80087f8 <prvInitialiseTaskLists+0x6c>)
 80087c6:	f7ff fb29 	bl	8007e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087ca:	480c      	ldr	r0, [pc, #48]	@ (80087fc <prvInitialiseTaskLists+0x70>)
 80087cc:	f7ff fb26 	bl	8007e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087d0:	480b      	ldr	r0, [pc, #44]	@ (8008800 <prvInitialiseTaskLists+0x74>)
 80087d2:	f7ff fb23 	bl	8007e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <prvInitialiseTaskLists+0x78>)
 80087d8:	4a05      	ldr	r2, [pc, #20]	@ (80087f0 <prvInitialiseTaskLists+0x64>)
 80087da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <prvInitialiseTaskLists+0x7c>)
 80087de:	4a05      	ldr	r2, [pc, #20]	@ (80087f4 <prvInitialiseTaskLists+0x68>)
 80087e0:	601a      	str	r2, [r3, #0]
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20001fc8 	.word	0x20001fc8
 80087f0:	20002054 	.word	0x20002054
 80087f4:	20002068 	.word	0x20002068
 80087f8:	20002084 	.word	0x20002084
 80087fc:	20002098 	.word	0x20002098
 8008800:	200020b0 	.word	0x200020b0
 8008804:	2000207c 	.word	0x2000207c
 8008808:	20002080 	.word	0x20002080

0800880c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008812:	e019      	b.n	8008848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008814:	f000 f9ea 	bl	8008bec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008818:	4b10      	ldr	r3, [pc, #64]	@ (800885c <prvCheckTasksWaitingTermination+0x50>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3304      	adds	r3, #4
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fb7f 	bl	8007f28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800882a:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <prvCheckTasksWaitingTermination+0x54>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	4a0b      	ldr	r2, [pc, #44]	@ (8008860 <prvCheckTasksWaitingTermination+0x54>)
 8008832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008834:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <prvCheckTasksWaitingTermination+0x58>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3b01      	subs	r3, #1
 800883a:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <prvCheckTasksWaitingTermination+0x58>)
 800883c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800883e:	f000 fa05 	bl	8008c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f810 	bl	8008868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008848:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <prvCheckTasksWaitingTermination+0x58>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e1      	bne.n	8008814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20002098 	.word	0x20002098
 8008860:	200020c4 	.word	0x200020c4
 8008864:	200020ac 	.word	0x200020ac

08008868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008876:	2b00      	cmp	r3, #0
 8008878:	d108      	bne.n	800888c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fb44 	bl	8008f0c <vPortFree>
				vPortFree( pxTCB );
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb41 	bl	8008f0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800888a:	e019      	b.n	80088c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008892:	2b01      	cmp	r3, #1
 8008894:	d103      	bne.n	800889e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fb38 	bl	8008f0c <vPortFree>
	}
 800889c:	e010      	b.n	80088c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d00b      	beq.n	80088c0 <prvDeleteTCB+0x58>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	60fb      	str	r3, [r7, #12]
}
 80088ba:	bf00      	nop
 80088bc:	bf00      	nop
 80088be:	e7fd      	b.n	80088bc <prvDeleteTCB+0x54>
	}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008900 <prvResetNextTaskUnblockTime+0x38>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008904 <prvResetNextTaskUnblockTime+0x3c>)
 80088da:	f04f 32ff 	mov.w	r2, #4294967295
 80088de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088e0:	e008      	b.n	80088f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e2:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <prvResetNextTaskUnblockTime+0x38>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a04      	ldr	r2, [pc, #16]	@ (8008904 <prvResetNextTaskUnblockTime+0x3c>)
 80088f2:	6013      	str	r3, [r2, #0]
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	2000207c 	.word	0x2000207c
 8008904:	200020e4 	.word	0x200020e4

08008908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800890e:	4b0b      	ldr	r3, [pc, #44]	@ (800893c <xTaskGetSchedulerState+0x34>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008916:	2301      	movs	r3, #1
 8008918:	607b      	str	r3, [r7, #4]
 800891a:	e008      	b.n	800892e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891c:	4b08      	ldr	r3, [pc, #32]	@ (8008940 <xTaskGetSchedulerState+0x38>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d102      	bne.n	800892a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008924:	2302      	movs	r3, #2
 8008926:	607b      	str	r3, [r7, #4]
 8008928:	e001      	b.n	800892e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800892e:	687b      	ldr	r3, [r7, #4]
	}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	200020d0 	.word	0x200020d0
 8008940:	200020ec 	.word	0x200020ec

08008944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800894e:	4b29      	ldr	r3, [pc, #164]	@ (80089f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008954:	4b28      	ldr	r3, [pc, #160]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3304      	adds	r3, #4
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff fae4 	bl	8007f28 <uxListRemove>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008966:	4b24      	ldr	r3, [pc, #144]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	2201      	movs	r2, #1
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43da      	mvns	r2, r3
 8008974:	4b21      	ldr	r3, [pc, #132]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4013      	ands	r3, r2
 800897a:	4a20      	ldr	r2, [pc, #128]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800897c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d10a      	bne.n	800899c <prvAddCurrentTaskToDelayedList+0x58>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d007      	beq.n	800899c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898c:	4b1a      	ldr	r3, [pc, #104]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	481a      	ldr	r0, [pc, #104]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008996:	f7ff fa6c 	bl	8007e72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800899a:	e026      	b.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4413      	add	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089a4:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d209      	bcs.n	80089c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b4:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b0f      	ldr	r3, [pc, #60]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7ff fa79 	bl	8007eb8 <vListInsert>
}
 80089c6:	e010      	b.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4b0a      	ldr	r3, [pc, #40]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7ff fa6f 	bl	8007eb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089da:	4b0c      	ldr	r3, [pc, #48]	@ (8008a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d202      	bcs.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089e4:	4a09      	ldr	r2, [pc, #36]	@ (8008a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6013      	str	r3, [r2, #0]
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	200020c8 	.word	0x200020c8
 80089f8:	20001fc4 	.word	0x20001fc4
 80089fc:	200020cc 	.word	0x200020cc
 8008a00:	200020b0 	.word	0x200020b0
 8008a04:	20002080 	.word	0x20002080
 8008a08:	2000207c 	.word	0x2000207c
 8008a0c:	200020e4 	.word	0x200020e4

08008a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3b04      	subs	r3, #4
 8008a20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3b04      	subs	r3, #4
 8008a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f023 0201 	bic.w	r2, r3, #1
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a40:	4a08      	ldr	r2, [pc, #32]	@ (8008a64 <pxPortInitialiseStack+0x54>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3b14      	subs	r3, #20
 8008a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3b20      	subs	r3, #32
 8008a56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a58:	68fb      	ldr	r3, [r7, #12]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr
 8008a64:	08008a69 	.word	0x08008a69

08008a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <prvTaskExitError+0x54>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7a:	d00b      	beq.n	8008a94 <prvTaskExitError+0x2c>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60fb      	str	r3, [r7, #12]
}
 8008a8e:	bf00      	nop
 8008a90:	bf00      	nop
 8008a92:	e7fd      	b.n	8008a90 <prvTaskExitError+0x28>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	60bb      	str	r3, [r7, #8]
}
 8008aa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008aa8:	bf00      	nop
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0fc      	beq.n	8008aaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr
 8008abc:	20000020 	.word	0x20000020

08008ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ac0:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <pxCurrentTCBConst2>)
 8008ac2:	6819      	ldr	r1, [r3, #0]
 8008ac4:	6808      	ldr	r0, [r1, #0]
 8008ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008aca:	f380 8809 	msr	PSP, r0
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f04f 0000 	mov.w	r0, #0
 8008ad6:	f380 8811 	msr	BASEPRI, r0
 8008ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8008ade:	4770      	bx	lr

08008ae0 <pxCurrentTCBConst2>:
 8008ae0:	20001fc4 	.word	0x20001fc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop

08008ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ae8:	4806      	ldr	r0, [pc, #24]	@ (8008b04 <prvPortStartFirstTask+0x1c>)
 8008aea:	6800      	ldr	r0, [r0, #0]
 8008aec:	6800      	ldr	r0, [r0, #0]
 8008aee:	f380 8808 	msr	MSP, r0
 8008af2:	b662      	cpsie	i
 8008af4:	b661      	cpsie	f
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	df00      	svc	0
 8008b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b02:	bf00      	nop
 8008b04:	e000ed08 	.word	0xe000ed08

08008b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b0e:	4b32      	ldr	r3, [pc, #200]	@ (8008bd8 <xPortStartScheduler+0xd0>)
 8008b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	22ff      	movs	r2, #255	@ 0xff
 8008b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	4b2a      	ldr	r3, [pc, #168]	@ (8008bdc <xPortStartScheduler+0xd4>)
 8008b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b36:	4b2a      	ldr	r3, [pc, #168]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b38:	2207      	movs	r2, #7
 8008b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b3c:	e009      	b.n	8008b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008b3e:	4b28      	ldr	r3, [pc, #160]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	4a26      	ldr	r2, [pc, #152]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b5a:	2b80      	cmp	r3, #128	@ 0x80
 8008b5c:	d0ef      	beq.n	8008b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b5e:	4b20      	ldr	r3, [pc, #128]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f1c3 0307 	rsb	r3, r3, #7
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d00b      	beq.n	8008b82 <xPortStartScheduler+0x7a>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	60bb      	str	r3, [r7, #8]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b82:	4b17      	ldr	r3, [pc, #92]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	4a15      	ldr	r2, [pc, #84]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b8c:	4b14      	ldr	r3, [pc, #80]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b94:	4a12      	ldr	r2, [pc, #72]	@ (8008be0 <xPortStartScheduler+0xd8>)
 8008b96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ba0:	4b10      	ldr	r3, [pc, #64]	@ (8008be4 <xPortStartScheduler+0xdc>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8008be4 <xPortStartScheduler+0xdc>)
 8008ba6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008baa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bac:	4b0d      	ldr	r3, [pc, #52]	@ (8008be4 <xPortStartScheduler+0xdc>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008be4 <xPortStartScheduler+0xdc>)
 8008bb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008bb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bb8:	f000 f8b8 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <xPortStartScheduler+0xe0>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bc2:	f7ff ff91 	bl	8008ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bc6:	f7ff fd6d 	bl	80086a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008bca:	f7ff ff4d 	bl	8008a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	e000e400 	.word	0xe000e400
 8008bdc:	200020f0 	.word	0x200020f0
 8008be0:	200020f4 	.word	0x200020f4
 8008be4:	e000ed20 	.word	0xe000ed20
 8008be8:	20000020 	.word	0x20000020

08008bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	607b      	str	r3, [r7, #4]
}
 8008c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c06:	4b0f      	ldr	r3, [pc, #60]	@ (8008c44 <vPortEnterCritical+0x58>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008c44 <vPortEnterCritical+0x58>)
 8008c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c10:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <vPortEnterCritical+0x58>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d110      	bne.n	8008c3a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c18:	4b0b      	ldr	r3, [pc, #44]	@ (8008c48 <vPortEnterCritical+0x5c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <vPortEnterCritical+0x4e>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	603b      	str	r3, [r7, #0]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <vPortEnterCritical+0x4a>
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr
 8008c44:	20000020 	.word	0x20000020
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c52:	4b12      	ldr	r3, [pc, #72]	@ (8008c9c <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10b      	bne.n	8008c72 <vPortExitCritical+0x26>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	607b      	str	r3, [r7, #4]
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	e7fd      	b.n	8008c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c72:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	4a08      	ldr	r2, [pc, #32]	@ (8008c9c <vPortExitCritical+0x50>)
 8008c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c7c:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <vPortExitCritical+0x50>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d105      	bne.n	8008c90 <vPortExitCritical+0x44>
 8008c84:	2300      	movs	r3, #0
 8008c86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	20000020 	.word	0x20000020

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cb0:	6010      	str	r0, [r2, #0]
 8008cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008cb6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008cba:	f380 8811 	msr	BASEPRI, r0
 8008cbe:	f7ff fcf1 	bl	80086a4 <vTaskSwitchContext>
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8811 	msr	BASEPRI, r0
 8008cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008cce:	6819      	ldr	r1, [r3, #0]
 8008cd0:	6808      	ldr	r0, [r1, #0]
 8008cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cd6:	f380 8809 	msr	PSP, r0
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	4770      	bx	lr

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	20001fc4 	.word	0x20001fc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7ff fc15 	bl	8008530 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <vPortSetupTimerInterrupt+0x30>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a09      	ldr	r2, [pc, #36]	@ (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a08      	ldr	r2, [pc, #32]	@ (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b03      	ldr	r3, [pc, #12]	@ (8008d5c <vPortSetupTimerInterrupt+0x30>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr
 8008d5c:	e000e010 	.word	0xe000e010
 8008d60:	e000e018 	.word	0xe000e018
 8008d64:	20000014 	.word	0x20000014
 8008d68:	10624dd3 	.word	0x10624dd3
 8008d6c:	e000e014 	.word	0xe000e014

08008d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	@ 0x28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d7c:	f7ff fb2c 	bl	80083d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d80:	4b5c      	ldr	r3, [pc, #368]	@ (8008ef4 <pvPortMalloc+0x184>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d88:	f000 f924 	bl	8008fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8008ef8 <pvPortMalloc+0x188>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4013      	ands	r3, r2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f040 8095 	bne.w	8008ec4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01e      	beq.n	8008dde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008da0:	2208      	movs	r2, #8
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d015      	beq.n	8008dde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f023 0307 	bic.w	r3, r3, #7
 8008db8:	3308      	adds	r3, #8
 8008dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00b      	beq.n	8008dde <pvPortMalloc+0x6e>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	617b      	str	r3, [r7, #20]
}
 8008dd8:	bf00      	nop
 8008dda:	bf00      	nop
 8008ddc:	e7fd      	b.n	8008dda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d06f      	beq.n	8008ec4 <pvPortMalloc+0x154>
 8008de4:	4b45      	ldr	r3, [pc, #276]	@ (8008efc <pvPortMalloc+0x18c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d86a      	bhi.n	8008ec4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dee:	4b44      	ldr	r3, [pc, #272]	@ (8008f00 <pvPortMalloc+0x190>)
 8008df0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008df2:	4b43      	ldr	r3, [pc, #268]	@ (8008f00 <pvPortMalloc+0x190>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008df8:	e004      	b.n	8008e04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d903      	bls.n	8008e16 <pvPortMalloc+0xa6>
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f1      	bne.n	8008dfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e16:	4b37      	ldr	r3, [pc, #220]	@ (8008ef4 <pvPortMalloc+0x184>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d051      	beq.n	8008ec4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2208      	movs	r2, #8
 8008e26:	4413      	add	r3, r2
 8008e28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	1ad2      	subs	r2, r2, r3
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d920      	bls.n	8008e84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4413      	add	r3, r2
 8008e48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <pvPortMalloc+0xfc>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	613b      	str	r3, [r7, #16]
}
 8008e66:	bf00      	nop
 8008e68:	bf00      	nop
 8008e6a:	e7fd      	b.n	8008e68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	1ad2      	subs	r2, r2, r3
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e7e:	69b8      	ldr	r0, [r7, #24]
 8008e80:	f000 f90a 	bl	8009098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e84:	4b1d      	ldr	r3, [pc, #116]	@ (8008efc <pvPortMalloc+0x18c>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8008efc <pvPortMalloc+0x18c>)
 8008e90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e92:	4b1a      	ldr	r3, [pc, #104]	@ (8008efc <pvPortMalloc+0x18c>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b1b      	ldr	r3, [pc, #108]	@ (8008f04 <pvPortMalloc+0x194>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d203      	bcs.n	8008ea6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e9e:	4b17      	ldr	r3, [pc, #92]	@ (8008efc <pvPortMalloc+0x18c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a18      	ldr	r2, [pc, #96]	@ (8008f04 <pvPortMalloc+0x194>)
 8008ea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	4b13      	ldr	r3, [pc, #76]	@ (8008ef8 <pvPortMalloc+0x188>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eba:	4b13      	ldr	r3, [pc, #76]	@ (8008f08 <pvPortMalloc+0x198>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	4a11      	ldr	r2, [pc, #68]	@ (8008f08 <pvPortMalloc+0x198>)
 8008ec2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ec4:	f7ff fa96 	bl	80083f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f003 0307 	and.w	r3, r3, #7
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <pvPortMalloc+0x17a>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60fb      	str	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	e7fd      	b.n	8008ee6 <pvPortMalloc+0x176>
	return pvReturn;
 8008eea:	69fb      	ldr	r3, [r7, #28]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3728      	adds	r7, #40	@ 0x28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20002d00 	.word	0x20002d00
 8008ef8:	20002d14 	.word	0x20002d14
 8008efc:	20002d04 	.word	0x20002d04
 8008f00:	20002cf8 	.word	0x20002cf8
 8008f04:	20002d08 	.word	0x20002d08
 8008f08:	20002d0c 	.word	0x20002d0c

08008f0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d04f      	beq.n	8008fbe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f1e:	2308      	movs	r3, #8
 8008f20:	425b      	negs	r3, r3
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4413      	add	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b25      	ldr	r3, [pc, #148]	@ (8008fc8 <vPortFree+0xbc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <vPortFree+0x46>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	60fb      	str	r3, [r7, #12]
}
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	e7fd      	b.n	8008f4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <vPortFree+0x66>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	60bb      	str	r3, [r7, #8]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b14      	ldr	r3, [pc, #80]	@ (8008fc8 <vPortFree+0xbc>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01e      	beq.n	8008fbe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11a      	bne.n	8008fbe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc8 <vPortFree+0xbc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f98:	f7ff fa1e 	bl	80083d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <vPortFree+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4a09      	ldr	r2, [pc, #36]	@ (8008fcc <vPortFree+0xc0>)
 8008fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008faa:	6938      	ldr	r0, [r7, #16]
 8008fac:	f000 f874 	bl	8009098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fb0:	4b07      	ldr	r3, [pc, #28]	@ (8008fd0 <vPortFree+0xc4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4a06      	ldr	r2, [pc, #24]	@ (8008fd0 <vPortFree+0xc4>)
 8008fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008fba:	f7ff fa1b 	bl	80083f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fbe:	bf00      	nop
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20002d14 	.word	0x20002d14
 8008fcc:	20002d04 	.word	0x20002d04
 8008fd0:	20002d10 	.word	0x20002d10

08008fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fe0:	4b27      	ldr	r3, [pc, #156]	@ (8009080 <prvHeapInit+0xac>)
 8008fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00c      	beq.n	8009008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3307      	adds	r3, #7
 8008ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0307 	bic.w	r3, r3, #7
 8008ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	4a1f      	ldr	r2, [pc, #124]	@ (8009080 <prvHeapInit+0xac>)
 8009004:	4413      	add	r3, r2
 8009006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800900c:	4a1d      	ldr	r2, [pc, #116]	@ (8009084 <prvHeapInit+0xb0>)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009012:	4b1c      	ldr	r3, [pc, #112]	@ (8009084 <prvHeapInit+0xb0>)
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009020:	2208      	movs	r2, #8
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 0307 	bic.w	r3, r3, #7
 800902e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a15      	ldr	r2, [pc, #84]	@ (8009088 <prvHeapInit+0xb4>)
 8009034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009036:	4b14      	ldr	r3, [pc, #80]	@ (8009088 <prvHeapInit+0xb4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800903e:	4b12      	ldr	r3, [pc, #72]	@ (8009088 <prvHeapInit+0xb4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009054:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <prvHeapInit+0xb4>)
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	4a0a      	ldr	r2, [pc, #40]	@ (800908c <prvHeapInit+0xb8>)
 8009062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	4a09      	ldr	r2, [pc, #36]	@ (8009090 <prvHeapInit+0xbc>)
 800906a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800906c:	4b09      	ldr	r3, [pc, #36]	@ (8009094 <prvHeapInit+0xc0>)
 800906e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009072:	601a      	str	r2, [r3, #0]
}
 8009074:	bf00      	nop
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	200020f8 	.word	0x200020f8
 8009084:	20002cf8 	.word	0x20002cf8
 8009088:	20002d00 	.word	0x20002d00
 800908c:	20002d08 	.word	0x20002d08
 8009090:	20002d04 	.word	0x20002d04
 8009094:	20002d14 	.word	0x20002d14

08009098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090a0:	4b27      	ldr	r3, [pc, #156]	@ (8009140 <prvInsertBlockIntoFreeList+0xa8>)
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	e002      	b.n	80090ac <prvInsertBlockIntoFreeList+0x14>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d8f7      	bhi.n	80090a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4413      	add	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d108      	bne.n	80090da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	441a      	add	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	441a      	add	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d118      	bne.n	8009120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4b14      	ldr	r3, [pc, #80]	@ (8009144 <prvInsertBlockIntoFreeList+0xac>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d00d      	beq.n	8009116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	441a      	add	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e008      	b.n	8009128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009116:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <prvInsertBlockIntoFreeList+0xac>)
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	e003      	b.n	8009128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	429a      	cmp	r2, r3
 800912e:	d002      	beq.n	8009136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009136:	bf00      	nop
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr
 8009140:	20002cf8 	.word	0x20002cf8
 8009144:	20002d00 	.word	0x20002d00

08009148 <__cvt>:
 8009148:	2b00      	cmp	r3, #0
 800914a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914e:	461d      	mov	r5, r3
 8009150:	bfbb      	ittet	lt
 8009152:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009156:	461d      	movlt	r5, r3
 8009158:	2300      	movge	r3, #0
 800915a:	232d      	movlt	r3, #45	@ 0x2d
 800915c:	b088      	sub	sp, #32
 800915e:	4614      	mov	r4, r2
 8009160:	bfb8      	it	lt
 8009162:	4614      	movlt	r4, r2
 8009164:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009166:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009168:	7013      	strb	r3, [r2, #0]
 800916a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800916c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009170:	f023 0820 	bic.w	r8, r3, #32
 8009174:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009178:	d005      	beq.n	8009186 <__cvt+0x3e>
 800917a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800917e:	d100      	bne.n	8009182 <__cvt+0x3a>
 8009180:	3601      	adds	r6, #1
 8009182:	2302      	movs	r3, #2
 8009184:	e000      	b.n	8009188 <__cvt+0x40>
 8009186:	2303      	movs	r3, #3
 8009188:	aa07      	add	r2, sp, #28
 800918a:	9204      	str	r2, [sp, #16]
 800918c:	aa06      	add	r2, sp, #24
 800918e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009192:	e9cd 3600 	strd	r3, r6, [sp]
 8009196:	4622      	mov	r2, r4
 8009198:	462b      	mov	r3, r5
 800919a:	f001 f98d 	bl	800a4b8 <_dtoa_r>
 800919e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80091a2:	4607      	mov	r7, r0
 80091a4:	d119      	bne.n	80091da <__cvt+0x92>
 80091a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d50e      	bpl.n	80091ca <__cvt+0x82>
 80091ac:	eb00 0906 	add.w	r9, r0, r6
 80091b0:	2200      	movs	r2, #0
 80091b2:	2300      	movs	r3, #0
 80091b4:	4620      	mov	r0, r4
 80091b6:	4629      	mov	r1, r5
 80091b8:	f7f7 fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 80091bc:	b108      	cbz	r0, 80091c2 <__cvt+0x7a>
 80091be:	f8cd 901c 	str.w	r9, [sp, #28]
 80091c2:	2230      	movs	r2, #48	@ 0x30
 80091c4:	9b07      	ldr	r3, [sp, #28]
 80091c6:	454b      	cmp	r3, r9
 80091c8:	d31e      	bcc.n	8009208 <__cvt+0xc0>
 80091ca:	4638      	mov	r0, r7
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80091d0:	1bdb      	subs	r3, r3, r7
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	b008      	add	sp, #32
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091de:	eb00 0906 	add.w	r9, r0, r6
 80091e2:	d1e5      	bne.n	80091b0 <__cvt+0x68>
 80091e4:	7803      	ldrb	r3, [r0, #0]
 80091e6:	2b30      	cmp	r3, #48	@ 0x30
 80091e8:	d10a      	bne.n	8009200 <__cvt+0xb8>
 80091ea:	2200      	movs	r2, #0
 80091ec:	2300      	movs	r3, #0
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7f7 fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80091f6:	b918      	cbnz	r0, 8009200 <__cvt+0xb8>
 80091f8:	f1c6 0601 	rsb	r6, r6, #1
 80091fc:	f8ca 6000 	str.w	r6, [sl]
 8009200:	f8da 3000 	ldr.w	r3, [sl]
 8009204:	4499      	add	r9, r3
 8009206:	e7d3      	b.n	80091b0 <__cvt+0x68>
 8009208:	1c59      	adds	r1, r3, #1
 800920a:	9107      	str	r1, [sp, #28]
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	e7d9      	b.n	80091c4 <__cvt+0x7c>

08009210 <__exponent>:
 8009210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009212:	2900      	cmp	r1, #0
 8009214:	bfb6      	itet	lt
 8009216:	232d      	movlt	r3, #45	@ 0x2d
 8009218:	232b      	movge	r3, #43	@ 0x2b
 800921a:	4249      	neglt	r1, r1
 800921c:	2909      	cmp	r1, #9
 800921e:	7002      	strb	r2, [r0, #0]
 8009220:	7043      	strb	r3, [r0, #1]
 8009222:	dd29      	ble.n	8009278 <__exponent+0x68>
 8009224:	f10d 0307 	add.w	r3, sp, #7
 8009228:	461d      	mov	r5, r3
 800922a:	270a      	movs	r7, #10
 800922c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009230:	461a      	mov	r2, r3
 8009232:	fb07 1416 	mls	r4, r7, r6, r1
 8009236:	3430      	adds	r4, #48	@ 0x30
 8009238:	f802 4c01 	strb.w	r4, [r2, #-1]
 800923c:	460c      	mov	r4, r1
 800923e:	2c63      	cmp	r4, #99	@ 0x63
 8009240:	4631      	mov	r1, r6
 8009242:	f103 33ff 	add.w	r3, r3, #4294967295
 8009246:	dcf1      	bgt.n	800922c <__exponent+0x1c>
 8009248:	3130      	adds	r1, #48	@ 0x30
 800924a:	1e94      	subs	r4, r2, #2
 800924c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009250:	4623      	mov	r3, r4
 8009252:	1c41      	adds	r1, r0, #1
 8009254:	42ab      	cmp	r3, r5
 8009256:	d30a      	bcc.n	800926e <__exponent+0x5e>
 8009258:	f10d 0309 	add.w	r3, sp, #9
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	42ac      	cmp	r4, r5
 8009260:	bf88      	it	hi
 8009262:	2300      	movhi	r3, #0
 8009264:	3302      	adds	r3, #2
 8009266:	4403      	add	r3, r0
 8009268:	1a18      	subs	r0, r3, r0
 800926a:	b003      	add	sp, #12
 800926c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009272:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009276:	e7ed      	b.n	8009254 <__exponent+0x44>
 8009278:	2330      	movs	r3, #48	@ 0x30
 800927a:	3130      	adds	r1, #48	@ 0x30
 800927c:	7083      	strb	r3, [r0, #2]
 800927e:	70c1      	strb	r1, [r0, #3]
 8009280:	1d03      	adds	r3, r0, #4
 8009282:	e7f1      	b.n	8009268 <__exponent+0x58>

08009284 <_printf_float>:
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	b091      	sub	sp, #68	@ 0x44
 800928a:	460c      	mov	r4, r1
 800928c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009290:	4616      	mov	r6, r2
 8009292:	461f      	mov	r7, r3
 8009294:	4605      	mov	r5, r0
 8009296:	f000 ffef 	bl	800a278 <_localeconv_r>
 800929a:	6803      	ldr	r3, [r0, #0]
 800929c:	4618      	mov	r0, r3
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	f7f6 ff56 	bl	8000150 <strlen>
 80092a4:	2300      	movs	r3, #0
 80092a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80092a8:	f8d8 3000 	ldr.w	r3, [r8]
 80092ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80092ae:	3307      	adds	r3, #7
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	f103 0208 	add.w	r2, r3, #8
 80092b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80092bc:	f8d4 b000 	ldr.w	fp, [r4]
 80092c0:	f8c8 2000 	str.w	r2, [r8]
 80092c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80092cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092de:	4b9c      	ldr	r3, [pc, #624]	@ (8009550 <_printf_float+0x2cc>)
 80092e0:	f7f7 fb94 	bl	8000a0c <__aeabi_dcmpun>
 80092e4:	bb70      	cbnz	r0, 8009344 <_printf_float+0xc0>
 80092e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092ea:	f04f 32ff 	mov.w	r2, #4294967295
 80092ee:	4b98      	ldr	r3, [pc, #608]	@ (8009550 <_printf_float+0x2cc>)
 80092f0:	f7f7 fb6e 	bl	80009d0 <__aeabi_dcmple>
 80092f4:	bb30      	cbnz	r0, 8009344 <_printf_float+0xc0>
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f7 fb5d 	bl	80009bc <__aeabi_dcmplt>
 8009302:	b110      	cbz	r0, 800930a <_printf_float+0x86>
 8009304:	232d      	movs	r3, #45	@ 0x2d
 8009306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800930a:	4a92      	ldr	r2, [pc, #584]	@ (8009554 <_printf_float+0x2d0>)
 800930c:	4b92      	ldr	r3, [pc, #584]	@ (8009558 <_printf_float+0x2d4>)
 800930e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009312:	bf8c      	ite	hi
 8009314:	4690      	movhi	r8, r2
 8009316:	4698      	movls	r8, r3
 8009318:	2303      	movs	r3, #3
 800931a:	f04f 0900 	mov.w	r9, #0
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	f02b 0304 	bic.w	r3, fp, #4
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	4633      	mov	r3, r6
 8009328:	4621      	mov	r1, r4
 800932a:	4628      	mov	r0, r5
 800932c:	9700      	str	r7, [sp, #0]
 800932e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009330:	f000 f9d4 	bl	80096dc <_printf_common>
 8009334:	3001      	adds	r0, #1
 8009336:	f040 8090 	bne.w	800945a <_printf_float+0x1d6>
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	b011      	add	sp, #68	@ 0x44
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	4642      	mov	r2, r8
 8009346:	464b      	mov	r3, r9
 8009348:	4640      	mov	r0, r8
 800934a:	4649      	mov	r1, r9
 800934c:	f7f7 fb5e 	bl	8000a0c <__aeabi_dcmpun>
 8009350:	b148      	cbz	r0, 8009366 <_printf_float+0xe2>
 8009352:	464b      	mov	r3, r9
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfb8      	it	lt
 8009358:	232d      	movlt	r3, #45	@ 0x2d
 800935a:	4a80      	ldr	r2, [pc, #512]	@ (800955c <_printf_float+0x2d8>)
 800935c:	bfb8      	it	lt
 800935e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009362:	4b7f      	ldr	r3, [pc, #508]	@ (8009560 <_printf_float+0x2dc>)
 8009364:	e7d3      	b.n	800930e <_printf_float+0x8a>
 8009366:	6863      	ldr	r3, [r4, #4]
 8009368:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	d13f      	bne.n	80093f0 <_printf_float+0x16c>
 8009370:	2306      	movs	r3, #6
 8009372:	6063      	str	r3, [r4, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	9206      	str	r2, [sp, #24]
 800937e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009380:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009384:	aa0d      	add	r2, sp, #52	@ 0x34
 8009386:	9203      	str	r2, [sp, #12]
 8009388:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800938c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	4642      	mov	r2, r8
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4628      	mov	r0, r5
 8009398:	464b      	mov	r3, r9
 800939a:	910a      	str	r1, [sp, #40]	@ 0x28
 800939c:	f7ff fed4 	bl	8009148 <__cvt>
 80093a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093a2:	4680      	mov	r8, r0
 80093a4:	2947      	cmp	r1, #71	@ 0x47
 80093a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80093a8:	d128      	bne.n	80093fc <_printf_float+0x178>
 80093aa:	1cc8      	adds	r0, r1, #3
 80093ac:	db02      	blt.n	80093b4 <_printf_float+0x130>
 80093ae:	6863      	ldr	r3, [r4, #4]
 80093b0:	4299      	cmp	r1, r3
 80093b2:	dd40      	ble.n	8009436 <_printf_float+0x1b2>
 80093b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80093b8:	fa5f fa8a 	uxtb.w	sl, sl
 80093bc:	4652      	mov	r2, sl
 80093be:	3901      	subs	r1, #1
 80093c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80093c4:	910d      	str	r1, [sp, #52]	@ 0x34
 80093c6:	f7ff ff23 	bl	8009210 <__exponent>
 80093ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093cc:	4681      	mov	r9, r0
 80093ce:	1813      	adds	r3, r2, r0
 80093d0:	2a01      	cmp	r2, #1
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	dc02      	bgt.n	80093dc <_printf_float+0x158>
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	07d2      	lsls	r2, r2, #31
 80093da:	d501      	bpl.n	80093e0 <_printf_float+0x15c>
 80093dc:	3301      	adds	r3, #1
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d09e      	beq.n	8009326 <_printf_float+0xa2>
 80093e8:	232d      	movs	r3, #45	@ 0x2d
 80093ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093ee:	e79a      	b.n	8009326 <_printf_float+0xa2>
 80093f0:	2947      	cmp	r1, #71	@ 0x47
 80093f2:	d1bf      	bne.n	8009374 <_printf_float+0xf0>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1bd      	bne.n	8009374 <_printf_float+0xf0>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e7ba      	b.n	8009372 <_printf_float+0xee>
 80093fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009400:	d9dc      	bls.n	80093bc <_printf_float+0x138>
 8009402:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009406:	d118      	bne.n	800943a <_printf_float+0x1b6>
 8009408:	2900      	cmp	r1, #0
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	dd0b      	ble.n	8009426 <_printf_float+0x1a2>
 800940e:	6121      	str	r1, [r4, #16]
 8009410:	b913      	cbnz	r3, 8009418 <_printf_float+0x194>
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	07d0      	lsls	r0, r2, #31
 8009416:	d502      	bpl.n	800941e <_printf_float+0x19a>
 8009418:	3301      	adds	r3, #1
 800941a:	440b      	add	r3, r1
 800941c:	6123      	str	r3, [r4, #16]
 800941e:	f04f 0900 	mov.w	r9, #0
 8009422:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009424:	e7dc      	b.n	80093e0 <_printf_float+0x15c>
 8009426:	b913      	cbnz	r3, 800942e <_printf_float+0x1aa>
 8009428:	6822      	ldr	r2, [r4, #0]
 800942a:	07d2      	lsls	r2, r2, #31
 800942c:	d501      	bpl.n	8009432 <_printf_float+0x1ae>
 800942e:	3302      	adds	r3, #2
 8009430:	e7f4      	b.n	800941c <_printf_float+0x198>
 8009432:	2301      	movs	r3, #1
 8009434:	e7f2      	b.n	800941c <_printf_float+0x198>
 8009436:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800943a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800943c:	4299      	cmp	r1, r3
 800943e:	db05      	blt.n	800944c <_printf_float+0x1c8>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	6121      	str	r1, [r4, #16]
 8009444:	07d8      	lsls	r0, r3, #31
 8009446:	d5ea      	bpl.n	800941e <_printf_float+0x19a>
 8009448:	1c4b      	adds	r3, r1, #1
 800944a:	e7e7      	b.n	800941c <_printf_float+0x198>
 800944c:	2900      	cmp	r1, #0
 800944e:	bfcc      	ite	gt
 8009450:	2201      	movgt	r2, #1
 8009452:	f1c1 0202 	rsble	r2, r1, #2
 8009456:	4413      	add	r3, r2
 8009458:	e7e0      	b.n	800941c <_printf_float+0x198>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	055a      	lsls	r2, r3, #21
 800945e:	d407      	bmi.n	8009470 <_printf_float+0x1ec>
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	4642      	mov	r2, r8
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	d12b      	bne.n	80094c6 <_printf_float+0x242>
 800946e:	e764      	b.n	800933a <_printf_float+0xb6>
 8009470:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009474:	f240 80dc 	bls.w	8009630 <_printf_float+0x3ac>
 8009478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800947c:	2200      	movs	r2, #0
 800947e:	2300      	movs	r3, #0
 8009480:	f7f7 fa92 	bl	80009a8 <__aeabi_dcmpeq>
 8009484:	2800      	cmp	r0, #0
 8009486:	d033      	beq.n	80094f0 <_printf_float+0x26c>
 8009488:	2301      	movs	r3, #1
 800948a:	4631      	mov	r1, r6
 800948c:	4628      	mov	r0, r5
 800948e:	4a35      	ldr	r2, [pc, #212]	@ (8009564 <_printf_float+0x2e0>)
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	f43f af51 	beq.w	800933a <_printf_float+0xb6>
 8009498:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800949c:	4543      	cmp	r3, r8
 800949e:	db02      	blt.n	80094a6 <_printf_float+0x222>
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	07d8      	lsls	r0, r3, #31
 80094a4:	d50f      	bpl.n	80094c6 <_printf_float+0x242>
 80094a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f af42 	beq.w	800933a <_printf_float+0xb6>
 80094b6:	f04f 0900 	mov.w	r9, #0
 80094ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80094be:	f104 0a1a 	add.w	sl, r4, #26
 80094c2:	45c8      	cmp	r8, r9
 80094c4:	dc09      	bgt.n	80094da <_printf_float+0x256>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	079b      	lsls	r3, r3, #30
 80094ca:	f100 8102 	bmi.w	80096d2 <_printf_float+0x44e>
 80094ce:	68e0      	ldr	r0, [r4, #12]
 80094d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d2:	4298      	cmp	r0, r3
 80094d4:	bfb8      	it	lt
 80094d6:	4618      	movlt	r0, r3
 80094d8:	e731      	b.n	800933e <_printf_float+0xba>
 80094da:	2301      	movs	r3, #1
 80094dc:	4652      	mov	r2, sl
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	f43f af28 	beq.w	800933a <_printf_float+0xb6>
 80094ea:	f109 0901 	add.w	r9, r9, #1
 80094ee:	e7e8      	b.n	80094c2 <_printf_float+0x23e>
 80094f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dc38      	bgt.n	8009568 <_printf_float+0x2e4>
 80094f6:	2301      	movs	r3, #1
 80094f8:	4631      	mov	r1, r6
 80094fa:	4628      	mov	r0, r5
 80094fc:	4a19      	ldr	r2, [pc, #100]	@ (8009564 <_printf_float+0x2e0>)
 80094fe:	47b8      	blx	r7
 8009500:	3001      	adds	r0, #1
 8009502:	f43f af1a 	beq.w	800933a <_printf_float+0xb6>
 8009506:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800950a:	ea59 0303 	orrs.w	r3, r9, r3
 800950e:	d102      	bne.n	8009516 <_printf_float+0x292>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	07d9      	lsls	r1, r3, #31
 8009514:	d5d7      	bpl.n	80094c6 <_printf_float+0x242>
 8009516:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800951a:	4631      	mov	r1, r6
 800951c:	4628      	mov	r0, r5
 800951e:	47b8      	blx	r7
 8009520:	3001      	adds	r0, #1
 8009522:	f43f af0a 	beq.w	800933a <_printf_float+0xb6>
 8009526:	f04f 0a00 	mov.w	sl, #0
 800952a:	f104 0b1a 	add.w	fp, r4, #26
 800952e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009530:	425b      	negs	r3, r3
 8009532:	4553      	cmp	r3, sl
 8009534:	dc01      	bgt.n	800953a <_printf_float+0x2b6>
 8009536:	464b      	mov	r3, r9
 8009538:	e793      	b.n	8009462 <_printf_float+0x1de>
 800953a:	2301      	movs	r3, #1
 800953c:	465a      	mov	r2, fp
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	f43f aef8 	beq.w	800933a <_printf_float+0xb6>
 800954a:	f10a 0a01 	add.w	sl, sl, #1
 800954e:	e7ee      	b.n	800952e <_printf_float+0x2aa>
 8009550:	7fefffff 	.word	0x7fefffff
 8009554:	0800f54e 	.word	0x0800f54e
 8009558:	0800f54a 	.word	0x0800f54a
 800955c:	0800f556 	.word	0x0800f556
 8009560:	0800f552 	.word	0x0800f552
 8009564:	0800f55a 	.word	0x0800f55a
 8009568:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800956a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800956e:	4553      	cmp	r3, sl
 8009570:	bfa8      	it	ge
 8009572:	4653      	movge	r3, sl
 8009574:	2b00      	cmp	r3, #0
 8009576:	4699      	mov	r9, r3
 8009578:	dc36      	bgt.n	80095e8 <_printf_float+0x364>
 800957a:	f04f 0b00 	mov.w	fp, #0
 800957e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009582:	f104 021a 	add.w	r2, r4, #26
 8009586:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009588:	930a      	str	r3, [sp, #40]	@ 0x28
 800958a:	eba3 0309 	sub.w	r3, r3, r9
 800958e:	455b      	cmp	r3, fp
 8009590:	dc31      	bgt.n	80095f6 <_printf_float+0x372>
 8009592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009594:	459a      	cmp	sl, r3
 8009596:	dc3a      	bgt.n	800960e <_printf_float+0x38a>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	07da      	lsls	r2, r3, #31
 800959c:	d437      	bmi.n	800960e <_printf_float+0x38a>
 800959e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095a0:	ebaa 0903 	sub.w	r9, sl, r3
 80095a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095a6:	ebaa 0303 	sub.w	r3, sl, r3
 80095aa:	4599      	cmp	r9, r3
 80095ac:	bfa8      	it	ge
 80095ae:	4699      	movge	r9, r3
 80095b0:	f1b9 0f00 	cmp.w	r9, #0
 80095b4:	dc33      	bgt.n	800961e <_printf_float+0x39a>
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095be:	f104 0b1a 	add.w	fp, r4, #26
 80095c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095c4:	ebaa 0303 	sub.w	r3, sl, r3
 80095c8:	eba3 0309 	sub.w	r3, r3, r9
 80095cc:	4543      	cmp	r3, r8
 80095ce:	f77f af7a 	ble.w	80094c6 <_printf_float+0x242>
 80095d2:	2301      	movs	r3, #1
 80095d4:	465a      	mov	r2, fp
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	47b8      	blx	r7
 80095dc:	3001      	adds	r0, #1
 80095de:	f43f aeac 	beq.w	800933a <_printf_float+0xb6>
 80095e2:	f108 0801 	add.w	r8, r8, #1
 80095e6:	e7ec      	b.n	80095c2 <_printf_float+0x33e>
 80095e8:	4642      	mov	r2, r8
 80095ea:	4631      	mov	r1, r6
 80095ec:	4628      	mov	r0, r5
 80095ee:	47b8      	blx	r7
 80095f0:	3001      	adds	r0, #1
 80095f2:	d1c2      	bne.n	800957a <_printf_float+0x2f6>
 80095f4:	e6a1      	b.n	800933a <_printf_float+0xb6>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4631      	mov	r1, r6
 80095fa:	4628      	mov	r0, r5
 80095fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	f43f ae9a 	beq.w	800933a <_printf_float+0xb6>
 8009606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009608:	f10b 0b01 	add.w	fp, fp, #1
 800960c:	e7bb      	b.n	8009586 <_printf_float+0x302>
 800960e:	4631      	mov	r1, r6
 8009610:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d1c0      	bne.n	800959e <_printf_float+0x31a>
 800961c:	e68d      	b.n	800933a <_printf_float+0xb6>
 800961e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009620:	464b      	mov	r3, r9
 8009622:	4631      	mov	r1, r6
 8009624:	4628      	mov	r0, r5
 8009626:	4442      	add	r2, r8
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	d1c3      	bne.n	80095b6 <_printf_float+0x332>
 800962e:	e684      	b.n	800933a <_printf_float+0xb6>
 8009630:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009634:	f1ba 0f01 	cmp.w	sl, #1
 8009638:	dc01      	bgt.n	800963e <_printf_float+0x3ba>
 800963a:	07db      	lsls	r3, r3, #31
 800963c:	d536      	bpl.n	80096ac <_printf_float+0x428>
 800963e:	2301      	movs	r3, #1
 8009640:	4642      	mov	r2, r8
 8009642:	4631      	mov	r1, r6
 8009644:	4628      	mov	r0, r5
 8009646:	47b8      	blx	r7
 8009648:	3001      	adds	r0, #1
 800964a:	f43f ae76 	beq.w	800933a <_printf_float+0xb6>
 800964e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae6e 	beq.w	800933a <_printf_float+0xb6>
 800965e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009662:	2200      	movs	r2, #0
 8009664:	2300      	movs	r3, #0
 8009666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800966a:	f7f7 f99d 	bl	80009a8 <__aeabi_dcmpeq>
 800966e:	b9c0      	cbnz	r0, 80096a2 <_printf_float+0x41e>
 8009670:	4653      	mov	r3, sl
 8009672:	f108 0201 	add.w	r2, r8, #1
 8009676:	4631      	mov	r1, r6
 8009678:	4628      	mov	r0, r5
 800967a:	47b8      	blx	r7
 800967c:	3001      	adds	r0, #1
 800967e:	d10c      	bne.n	800969a <_printf_float+0x416>
 8009680:	e65b      	b.n	800933a <_printf_float+0xb6>
 8009682:	2301      	movs	r3, #1
 8009684:	465a      	mov	r2, fp
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f ae54 	beq.w	800933a <_printf_float+0xb6>
 8009692:	f108 0801 	add.w	r8, r8, #1
 8009696:	45d0      	cmp	r8, sl
 8009698:	dbf3      	blt.n	8009682 <_printf_float+0x3fe>
 800969a:	464b      	mov	r3, r9
 800969c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096a0:	e6e0      	b.n	8009464 <_printf_float+0x1e0>
 80096a2:	f04f 0800 	mov.w	r8, #0
 80096a6:	f104 0b1a 	add.w	fp, r4, #26
 80096aa:	e7f4      	b.n	8009696 <_printf_float+0x412>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4642      	mov	r2, r8
 80096b0:	e7e1      	b.n	8009676 <_printf_float+0x3f2>
 80096b2:	2301      	movs	r3, #1
 80096b4:	464a      	mov	r2, r9
 80096b6:	4631      	mov	r1, r6
 80096b8:	4628      	mov	r0, r5
 80096ba:	47b8      	blx	r7
 80096bc:	3001      	adds	r0, #1
 80096be:	f43f ae3c 	beq.w	800933a <_printf_float+0xb6>
 80096c2:	f108 0801 	add.w	r8, r8, #1
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096ca:	1a5b      	subs	r3, r3, r1
 80096cc:	4543      	cmp	r3, r8
 80096ce:	dcf0      	bgt.n	80096b2 <_printf_float+0x42e>
 80096d0:	e6fd      	b.n	80094ce <_printf_float+0x24a>
 80096d2:	f04f 0800 	mov.w	r8, #0
 80096d6:	f104 0919 	add.w	r9, r4, #25
 80096da:	e7f4      	b.n	80096c6 <_printf_float+0x442>

080096dc <_printf_common>:
 80096dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e0:	4616      	mov	r6, r2
 80096e2:	4698      	mov	r8, r3
 80096e4:	688a      	ldr	r2, [r1, #8]
 80096e6:	690b      	ldr	r3, [r1, #16]
 80096e8:	4607      	mov	r7, r0
 80096ea:	4293      	cmp	r3, r2
 80096ec:	bfb8      	it	lt
 80096ee:	4613      	movlt	r3, r2
 80096f0:	6033      	str	r3, [r6, #0]
 80096f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096f6:	460c      	mov	r4, r1
 80096f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096fc:	b10a      	cbz	r2, 8009702 <_printf_common+0x26>
 80096fe:	3301      	adds	r3, #1
 8009700:	6033      	str	r3, [r6, #0]
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	0699      	lsls	r1, r3, #26
 8009706:	bf42      	ittt	mi
 8009708:	6833      	ldrmi	r3, [r6, #0]
 800970a:	3302      	addmi	r3, #2
 800970c:	6033      	strmi	r3, [r6, #0]
 800970e:	6825      	ldr	r5, [r4, #0]
 8009710:	f015 0506 	ands.w	r5, r5, #6
 8009714:	d106      	bne.n	8009724 <_printf_common+0x48>
 8009716:	f104 0a19 	add.w	sl, r4, #25
 800971a:	68e3      	ldr	r3, [r4, #12]
 800971c:	6832      	ldr	r2, [r6, #0]
 800971e:	1a9b      	subs	r3, r3, r2
 8009720:	42ab      	cmp	r3, r5
 8009722:	dc2b      	bgt.n	800977c <_printf_common+0xa0>
 8009724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009728:	6822      	ldr	r2, [r4, #0]
 800972a:	3b00      	subs	r3, #0
 800972c:	bf18      	it	ne
 800972e:	2301      	movne	r3, #1
 8009730:	0692      	lsls	r2, r2, #26
 8009732:	d430      	bmi.n	8009796 <_printf_common+0xba>
 8009734:	4641      	mov	r1, r8
 8009736:	4638      	mov	r0, r7
 8009738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800973c:	47c8      	blx	r9
 800973e:	3001      	adds	r0, #1
 8009740:	d023      	beq.n	800978a <_printf_common+0xae>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	f003 0306 	and.w	r3, r3, #6
 800974a:	2b04      	cmp	r3, #4
 800974c:	bf14      	ite	ne
 800974e:	2500      	movne	r5, #0
 8009750:	6833      	ldreq	r3, [r6, #0]
 8009752:	f04f 0600 	mov.w	r6, #0
 8009756:	bf08      	it	eq
 8009758:	68e5      	ldreq	r5, [r4, #12]
 800975a:	f104 041a 	add.w	r4, r4, #26
 800975e:	bf08      	it	eq
 8009760:	1aed      	subeq	r5, r5, r3
 8009762:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009766:	bf08      	it	eq
 8009768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800976c:	4293      	cmp	r3, r2
 800976e:	bfc4      	itt	gt
 8009770:	1a9b      	subgt	r3, r3, r2
 8009772:	18ed      	addgt	r5, r5, r3
 8009774:	42b5      	cmp	r5, r6
 8009776:	d11a      	bne.n	80097ae <_printf_common+0xd2>
 8009778:	2000      	movs	r0, #0
 800977a:	e008      	b.n	800978e <_printf_common+0xb2>
 800977c:	2301      	movs	r3, #1
 800977e:	4652      	mov	r2, sl
 8009780:	4641      	mov	r1, r8
 8009782:	4638      	mov	r0, r7
 8009784:	47c8      	blx	r9
 8009786:	3001      	adds	r0, #1
 8009788:	d103      	bne.n	8009792 <_printf_common+0xb6>
 800978a:	f04f 30ff 	mov.w	r0, #4294967295
 800978e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009792:	3501      	adds	r5, #1
 8009794:	e7c1      	b.n	800971a <_printf_common+0x3e>
 8009796:	2030      	movs	r0, #48	@ 0x30
 8009798:	18e1      	adds	r1, r4, r3
 800979a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097a4:	4422      	add	r2, r4
 80097a6:	3302      	adds	r3, #2
 80097a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097ac:	e7c2      	b.n	8009734 <_printf_common+0x58>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4622      	mov	r2, r4
 80097b2:	4641      	mov	r1, r8
 80097b4:	4638      	mov	r0, r7
 80097b6:	47c8      	blx	r9
 80097b8:	3001      	adds	r0, #1
 80097ba:	d0e6      	beq.n	800978a <_printf_common+0xae>
 80097bc:	3601      	adds	r6, #1
 80097be:	e7d9      	b.n	8009774 <_printf_common+0x98>

080097c0 <_printf_i>:
 80097c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c4:	7e0f      	ldrb	r7, [r1, #24]
 80097c6:	4691      	mov	r9, r2
 80097c8:	2f78      	cmp	r7, #120	@ 0x78
 80097ca:	4680      	mov	r8, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	469a      	mov	sl, r3
 80097d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097d6:	d807      	bhi.n	80097e8 <_printf_i+0x28>
 80097d8:	2f62      	cmp	r7, #98	@ 0x62
 80097da:	d80a      	bhi.n	80097f2 <_printf_i+0x32>
 80097dc:	2f00      	cmp	r7, #0
 80097de:	f000 80d1 	beq.w	8009984 <_printf_i+0x1c4>
 80097e2:	2f58      	cmp	r7, #88	@ 0x58
 80097e4:	f000 80b8 	beq.w	8009958 <_printf_i+0x198>
 80097e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097f0:	e03a      	b.n	8009868 <_printf_i+0xa8>
 80097f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097f6:	2b15      	cmp	r3, #21
 80097f8:	d8f6      	bhi.n	80097e8 <_printf_i+0x28>
 80097fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009800 <_printf_i+0x40>)
 80097fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009800:	08009859 	.word	0x08009859
 8009804:	0800986d 	.word	0x0800986d
 8009808:	080097e9 	.word	0x080097e9
 800980c:	080097e9 	.word	0x080097e9
 8009810:	080097e9 	.word	0x080097e9
 8009814:	080097e9 	.word	0x080097e9
 8009818:	0800986d 	.word	0x0800986d
 800981c:	080097e9 	.word	0x080097e9
 8009820:	080097e9 	.word	0x080097e9
 8009824:	080097e9 	.word	0x080097e9
 8009828:	080097e9 	.word	0x080097e9
 800982c:	0800996b 	.word	0x0800996b
 8009830:	08009897 	.word	0x08009897
 8009834:	08009925 	.word	0x08009925
 8009838:	080097e9 	.word	0x080097e9
 800983c:	080097e9 	.word	0x080097e9
 8009840:	0800998d 	.word	0x0800998d
 8009844:	080097e9 	.word	0x080097e9
 8009848:	08009897 	.word	0x08009897
 800984c:	080097e9 	.word	0x080097e9
 8009850:	080097e9 	.word	0x080097e9
 8009854:	0800992d 	.word	0x0800992d
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	1d1a      	adds	r2, r3, #4
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6032      	str	r2, [r6, #0]
 8009860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009864:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009868:	2301      	movs	r3, #1
 800986a:	e09c      	b.n	80099a6 <_printf_i+0x1e6>
 800986c:	6833      	ldr	r3, [r6, #0]
 800986e:	6820      	ldr	r0, [r4, #0]
 8009870:	1d19      	adds	r1, r3, #4
 8009872:	6031      	str	r1, [r6, #0]
 8009874:	0606      	lsls	r6, r0, #24
 8009876:	d501      	bpl.n	800987c <_printf_i+0xbc>
 8009878:	681d      	ldr	r5, [r3, #0]
 800987a:	e003      	b.n	8009884 <_printf_i+0xc4>
 800987c:	0645      	lsls	r5, r0, #25
 800987e:	d5fb      	bpl.n	8009878 <_printf_i+0xb8>
 8009880:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009884:	2d00      	cmp	r5, #0
 8009886:	da03      	bge.n	8009890 <_printf_i+0xd0>
 8009888:	232d      	movs	r3, #45	@ 0x2d
 800988a:	426d      	negs	r5, r5
 800988c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009890:	230a      	movs	r3, #10
 8009892:	4858      	ldr	r0, [pc, #352]	@ (80099f4 <_printf_i+0x234>)
 8009894:	e011      	b.n	80098ba <_printf_i+0xfa>
 8009896:	6821      	ldr	r1, [r4, #0]
 8009898:	6833      	ldr	r3, [r6, #0]
 800989a:	0608      	lsls	r0, r1, #24
 800989c:	f853 5b04 	ldr.w	r5, [r3], #4
 80098a0:	d402      	bmi.n	80098a8 <_printf_i+0xe8>
 80098a2:	0649      	lsls	r1, r1, #25
 80098a4:	bf48      	it	mi
 80098a6:	b2ad      	uxthmi	r5, r5
 80098a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80098aa:	6033      	str	r3, [r6, #0]
 80098ac:	bf14      	ite	ne
 80098ae:	230a      	movne	r3, #10
 80098b0:	2308      	moveq	r3, #8
 80098b2:	4850      	ldr	r0, [pc, #320]	@ (80099f4 <_printf_i+0x234>)
 80098b4:	2100      	movs	r1, #0
 80098b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098ba:	6866      	ldr	r6, [r4, #4]
 80098bc:	2e00      	cmp	r6, #0
 80098be:	60a6      	str	r6, [r4, #8]
 80098c0:	db05      	blt.n	80098ce <_printf_i+0x10e>
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	432e      	orrs	r6, r5
 80098c6:	f021 0104 	bic.w	r1, r1, #4
 80098ca:	6021      	str	r1, [r4, #0]
 80098cc:	d04b      	beq.n	8009966 <_printf_i+0x1a6>
 80098ce:	4616      	mov	r6, r2
 80098d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80098d4:	fb03 5711 	mls	r7, r3, r1, r5
 80098d8:	5dc7      	ldrb	r7, [r0, r7]
 80098da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098de:	462f      	mov	r7, r5
 80098e0:	42bb      	cmp	r3, r7
 80098e2:	460d      	mov	r5, r1
 80098e4:	d9f4      	bls.n	80098d0 <_printf_i+0x110>
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	d10b      	bne.n	8009902 <_printf_i+0x142>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	07df      	lsls	r7, r3, #31
 80098ee:	d508      	bpl.n	8009902 <_printf_i+0x142>
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	6861      	ldr	r1, [r4, #4]
 80098f4:	4299      	cmp	r1, r3
 80098f6:	bfde      	ittt	le
 80098f8:	2330      	movle	r3, #48	@ 0x30
 80098fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009902:	1b92      	subs	r2, r2, r6
 8009904:	6122      	str	r2, [r4, #16]
 8009906:	464b      	mov	r3, r9
 8009908:	4621      	mov	r1, r4
 800990a:	4640      	mov	r0, r8
 800990c:	f8cd a000 	str.w	sl, [sp]
 8009910:	aa03      	add	r2, sp, #12
 8009912:	f7ff fee3 	bl	80096dc <_printf_common>
 8009916:	3001      	adds	r0, #1
 8009918:	d14a      	bne.n	80099b0 <_printf_i+0x1f0>
 800991a:	f04f 30ff 	mov.w	r0, #4294967295
 800991e:	b004      	add	sp, #16
 8009920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	f043 0320 	orr.w	r3, r3, #32
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	2778      	movs	r7, #120	@ 0x78
 800992e:	4832      	ldr	r0, [pc, #200]	@ (80099f8 <_printf_i+0x238>)
 8009930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	6831      	ldr	r1, [r6, #0]
 8009938:	061f      	lsls	r7, r3, #24
 800993a:	f851 5b04 	ldr.w	r5, [r1], #4
 800993e:	d402      	bmi.n	8009946 <_printf_i+0x186>
 8009940:	065f      	lsls	r7, r3, #25
 8009942:	bf48      	it	mi
 8009944:	b2ad      	uxthmi	r5, r5
 8009946:	6031      	str	r1, [r6, #0]
 8009948:	07d9      	lsls	r1, r3, #31
 800994a:	bf44      	itt	mi
 800994c:	f043 0320 	orrmi.w	r3, r3, #32
 8009950:	6023      	strmi	r3, [r4, #0]
 8009952:	b11d      	cbz	r5, 800995c <_printf_i+0x19c>
 8009954:	2310      	movs	r3, #16
 8009956:	e7ad      	b.n	80098b4 <_printf_i+0xf4>
 8009958:	4826      	ldr	r0, [pc, #152]	@ (80099f4 <_printf_i+0x234>)
 800995a:	e7e9      	b.n	8009930 <_printf_i+0x170>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	f023 0320 	bic.w	r3, r3, #32
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	e7f6      	b.n	8009954 <_printf_i+0x194>
 8009966:	4616      	mov	r6, r2
 8009968:	e7bd      	b.n	80098e6 <_printf_i+0x126>
 800996a:	6833      	ldr	r3, [r6, #0]
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1d18      	adds	r0, r3, #4
 8009970:	6961      	ldr	r1, [r4, #20]
 8009972:	6030      	str	r0, [r6, #0]
 8009974:	062e      	lsls	r6, r5, #24
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	d501      	bpl.n	800997e <_printf_i+0x1be>
 800997a:	6019      	str	r1, [r3, #0]
 800997c:	e002      	b.n	8009984 <_printf_i+0x1c4>
 800997e:	0668      	lsls	r0, r5, #25
 8009980:	d5fb      	bpl.n	800997a <_printf_i+0x1ba>
 8009982:	8019      	strh	r1, [r3, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	4616      	mov	r6, r2
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	e7bc      	b.n	8009906 <_printf_i+0x146>
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	2100      	movs	r1, #0
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	6032      	str	r2, [r6, #0]
 8009994:	681e      	ldr	r6, [r3, #0]
 8009996:	6862      	ldr	r2, [r4, #4]
 8009998:	4630      	mov	r0, r6
 800999a:	f000 fce4 	bl	800a366 <memchr>
 800999e:	b108      	cbz	r0, 80099a4 <_printf_i+0x1e4>
 80099a0:	1b80      	subs	r0, r0, r6
 80099a2:	6060      	str	r0, [r4, #4]
 80099a4:	6863      	ldr	r3, [r4, #4]
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	2300      	movs	r3, #0
 80099aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ae:	e7aa      	b.n	8009906 <_printf_i+0x146>
 80099b0:	4632      	mov	r2, r6
 80099b2:	4649      	mov	r1, r9
 80099b4:	4640      	mov	r0, r8
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	47d0      	blx	sl
 80099ba:	3001      	adds	r0, #1
 80099bc:	d0ad      	beq.n	800991a <_printf_i+0x15a>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	079b      	lsls	r3, r3, #30
 80099c2:	d413      	bmi.n	80099ec <_printf_i+0x22c>
 80099c4:	68e0      	ldr	r0, [r4, #12]
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	4298      	cmp	r0, r3
 80099ca:	bfb8      	it	lt
 80099cc:	4618      	movlt	r0, r3
 80099ce:	e7a6      	b.n	800991e <_printf_i+0x15e>
 80099d0:	2301      	movs	r3, #1
 80099d2:	4632      	mov	r2, r6
 80099d4:	4649      	mov	r1, r9
 80099d6:	4640      	mov	r0, r8
 80099d8:	47d0      	blx	sl
 80099da:	3001      	adds	r0, #1
 80099dc:	d09d      	beq.n	800991a <_printf_i+0x15a>
 80099de:	3501      	adds	r5, #1
 80099e0:	68e3      	ldr	r3, [r4, #12]
 80099e2:	9903      	ldr	r1, [sp, #12]
 80099e4:	1a5b      	subs	r3, r3, r1
 80099e6:	42ab      	cmp	r3, r5
 80099e8:	dcf2      	bgt.n	80099d0 <_printf_i+0x210>
 80099ea:	e7eb      	b.n	80099c4 <_printf_i+0x204>
 80099ec:	2500      	movs	r5, #0
 80099ee:	f104 0619 	add.w	r6, r4, #25
 80099f2:	e7f5      	b.n	80099e0 <_printf_i+0x220>
 80099f4:	0800f55c 	.word	0x0800f55c
 80099f8:	0800f56d 	.word	0x0800f56d

080099fc <_scanf_float>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	b087      	sub	sp, #28
 8009a02:	9303      	str	r3, [sp, #12]
 8009a04:	688b      	ldr	r3, [r1, #8]
 8009a06:	4691      	mov	r9, r2
 8009a08:	1e5a      	subs	r2, r3, #1
 8009a0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009a0e:	bf82      	ittt	hi
 8009a10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009a14:	eb03 0b05 	addhi.w	fp, r3, r5
 8009a18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009a1c:	460a      	mov	r2, r1
 8009a1e:	f04f 0500 	mov.w	r5, #0
 8009a22:	bf88      	it	hi
 8009a24:	608b      	strhi	r3, [r1, #8]
 8009a26:	680b      	ldr	r3, [r1, #0]
 8009a28:	4680      	mov	r8, r0
 8009a2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009a2e:	f842 3b1c 	str.w	r3, [r2], #28
 8009a32:	460c      	mov	r4, r1
 8009a34:	bf98      	it	ls
 8009a36:	f04f 0b00 	movls.w	fp, #0
 8009a3a:	4616      	mov	r6, r2
 8009a3c:	46aa      	mov	sl, r5
 8009a3e:	462f      	mov	r7, r5
 8009a40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a44:	9201      	str	r2, [sp, #4]
 8009a46:	9502      	str	r5, [sp, #8]
 8009a48:	68a2      	ldr	r2, [r4, #8]
 8009a4a:	b15a      	cbz	r2, 8009a64 <_scanf_float+0x68>
 8009a4c:	f8d9 3000 	ldr.w	r3, [r9]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b4e      	cmp	r3, #78	@ 0x4e
 8009a54:	d862      	bhi.n	8009b1c <_scanf_float+0x120>
 8009a56:	2b40      	cmp	r3, #64	@ 0x40
 8009a58:	d83a      	bhi.n	8009ad0 <_scanf_float+0xd4>
 8009a5a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009a5e:	b2c8      	uxtb	r0, r1
 8009a60:	280e      	cmp	r0, #14
 8009a62:	d938      	bls.n	8009ad6 <_scanf_float+0xda>
 8009a64:	b11f      	cbz	r7, 8009a6e <_scanf_float+0x72>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a72:	f1ba 0f01 	cmp.w	sl, #1
 8009a76:	f200 8114 	bhi.w	8009ca2 <_scanf_float+0x2a6>
 8009a7a:	9b01      	ldr	r3, [sp, #4]
 8009a7c:	429e      	cmp	r6, r3
 8009a7e:	f200 8105 	bhi.w	8009c8c <_scanf_float+0x290>
 8009a82:	2001      	movs	r0, #1
 8009a84:	b007      	add	sp, #28
 8009a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009a8e:	2a0d      	cmp	r2, #13
 8009a90:	d8e8      	bhi.n	8009a64 <_scanf_float+0x68>
 8009a92:	a101      	add	r1, pc, #4	@ (adr r1, 8009a98 <_scanf_float+0x9c>)
 8009a94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a98:	08009be1 	.word	0x08009be1
 8009a9c:	08009a65 	.word	0x08009a65
 8009aa0:	08009a65 	.word	0x08009a65
 8009aa4:	08009a65 	.word	0x08009a65
 8009aa8:	08009c3d 	.word	0x08009c3d
 8009aac:	08009c17 	.word	0x08009c17
 8009ab0:	08009a65 	.word	0x08009a65
 8009ab4:	08009a65 	.word	0x08009a65
 8009ab8:	08009bef 	.word	0x08009bef
 8009abc:	08009a65 	.word	0x08009a65
 8009ac0:	08009a65 	.word	0x08009a65
 8009ac4:	08009a65 	.word	0x08009a65
 8009ac8:	08009a65 	.word	0x08009a65
 8009acc:	08009bab 	.word	0x08009bab
 8009ad0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009ad4:	e7db      	b.n	8009a8e <_scanf_float+0x92>
 8009ad6:	290e      	cmp	r1, #14
 8009ad8:	d8c4      	bhi.n	8009a64 <_scanf_float+0x68>
 8009ada:	a001      	add	r0, pc, #4	@ (adr r0, 8009ae0 <_scanf_float+0xe4>)
 8009adc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ae0:	08009b9b 	.word	0x08009b9b
 8009ae4:	08009a65 	.word	0x08009a65
 8009ae8:	08009b9b 	.word	0x08009b9b
 8009aec:	08009c2b 	.word	0x08009c2b
 8009af0:	08009a65 	.word	0x08009a65
 8009af4:	08009b3d 	.word	0x08009b3d
 8009af8:	08009b81 	.word	0x08009b81
 8009afc:	08009b81 	.word	0x08009b81
 8009b00:	08009b81 	.word	0x08009b81
 8009b04:	08009b81 	.word	0x08009b81
 8009b08:	08009b81 	.word	0x08009b81
 8009b0c:	08009b81 	.word	0x08009b81
 8009b10:	08009b81 	.word	0x08009b81
 8009b14:	08009b81 	.word	0x08009b81
 8009b18:	08009b81 	.word	0x08009b81
 8009b1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009b1e:	d809      	bhi.n	8009b34 <_scanf_float+0x138>
 8009b20:	2b60      	cmp	r3, #96	@ 0x60
 8009b22:	d8b2      	bhi.n	8009a8a <_scanf_float+0x8e>
 8009b24:	2b54      	cmp	r3, #84	@ 0x54
 8009b26:	d07b      	beq.n	8009c20 <_scanf_float+0x224>
 8009b28:	2b59      	cmp	r3, #89	@ 0x59
 8009b2a:	d19b      	bne.n	8009a64 <_scanf_float+0x68>
 8009b2c:	2d07      	cmp	r5, #7
 8009b2e:	d199      	bne.n	8009a64 <_scanf_float+0x68>
 8009b30:	2508      	movs	r5, #8
 8009b32:	e02f      	b.n	8009b94 <_scanf_float+0x198>
 8009b34:	2b74      	cmp	r3, #116	@ 0x74
 8009b36:	d073      	beq.n	8009c20 <_scanf_float+0x224>
 8009b38:	2b79      	cmp	r3, #121	@ 0x79
 8009b3a:	e7f6      	b.n	8009b2a <_scanf_float+0x12e>
 8009b3c:	6821      	ldr	r1, [r4, #0]
 8009b3e:	05c8      	lsls	r0, r1, #23
 8009b40:	d51e      	bpl.n	8009b80 <_scanf_float+0x184>
 8009b42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009b46:	6021      	str	r1, [r4, #0]
 8009b48:	3701      	adds	r7, #1
 8009b4a:	f1bb 0f00 	cmp.w	fp, #0
 8009b4e:	d003      	beq.n	8009b58 <_scanf_float+0x15c>
 8009b50:	3201      	adds	r2, #1
 8009b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b56:	60a2      	str	r2, [r4, #8]
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	60a3      	str	r3, [r4, #8]
 8009b5e:	6923      	ldr	r3, [r4, #16]
 8009b60:	3301      	adds	r3, #1
 8009b62:	6123      	str	r3, [r4, #16]
 8009b64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f8c9 3004 	str.w	r3, [r9, #4]
 8009b70:	f340 8083 	ble.w	8009c7a <_scanf_float+0x27e>
 8009b74:	f8d9 3000 	ldr.w	r3, [r9]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	f8c9 3000 	str.w	r3, [r9]
 8009b7e:	e763      	b.n	8009a48 <_scanf_float+0x4c>
 8009b80:	eb1a 0105 	adds.w	r1, sl, r5
 8009b84:	f47f af6e 	bne.w	8009a64 <_scanf_float+0x68>
 8009b88:	460d      	mov	r5, r1
 8009b8a:	468a      	mov	sl, r1
 8009b8c:	6822      	ldr	r2, [r4, #0]
 8009b8e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	f806 3b01 	strb.w	r3, [r6], #1
 8009b98:	e7de      	b.n	8009b58 <_scanf_float+0x15c>
 8009b9a:	6822      	ldr	r2, [r4, #0]
 8009b9c:	0610      	lsls	r0, r2, #24
 8009b9e:	f57f af61 	bpl.w	8009a64 <_scanf_float+0x68>
 8009ba2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	e7f4      	b.n	8009b94 <_scanf_float+0x198>
 8009baa:	f1ba 0f00 	cmp.w	sl, #0
 8009bae:	d10c      	bne.n	8009bca <_scanf_float+0x1ce>
 8009bb0:	b977      	cbnz	r7, 8009bd0 <_scanf_float+0x1d4>
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009bb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009bbc:	d108      	bne.n	8009bd0 <_scanf_float+0x1d4>
 8009bbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009bc2:	f04f 0a01 	mov.w	sl, #1
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	e7e4      	b.n	8009b94 <_scanf_float+0x198>
 8009bca:	f1ba 0f02 	cmp.w	sl, #2
 8009bce:	d051      	beq.n	8009c74 <_scanf_float+0x278>
 8009bd0:	2d01      	cmp	r5, #1
 8009bd2:	d002      	beq.n	8009bda <_scanf_float+0x1de>
 8009bd4:	2d04      	cmp	r5, #4
 8009bd6:	f47f af45 	bne.w	8009a64 <_scanf_float+0x68>
 8009bda:	3501      	adds	r5, #1
 8009bdc:	b2ed      	uxtb	r5, r5
 8009bde:	e7d9      	b.n	8009b94 <_scanf_float+0x198>
 8009be0:	f1ba 0f01 	cmp.w	sl, #1
 8009be4:	f47f af3e 	bne.w	8009a64 <_scanf_float+0x68>
 8009be8:	f04f 0a02 	mov.w	sl, #2
 8009bec:	e7d2      	b.n	8009b94 <_scanf_float+0x198>
 8009bee:	b975      	cbnz	r5, 8009c0e <_scanf_float+0x212>
 8009bf0:	2f00      	cmp	r7, #0
 8009bf2:	f47f af38 	bne.w	8009a66 <_scanf_float+0x6a>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009bfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009c00:	f040 80ff 	bne.w	8009e02 <_scanf_float+0x406>
 8009c04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c08:	2501      	movs	r5, #1
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	e7c2      	b.n	8009b94 <_scanf_float+0x198>
 8009c0e:	2d03      	cmp	r5, #3
 8009c10:	d0e3      	beq.n	8009bda <_scanf_float+0x1de>
 8009c12:	2d05      	cmp	r5, #5
 8009c14:	e7df      	b.n	8009bd6 <_scanf_float+0x1da>
 8009c16:	2d02      	cmp	r5, #2
 8009c18:	f47f af24 	bne.w	8009a64 <_scanf_float+0x68>
 8009c1c:	2503      	movs	r5, #3
 8009c1e:	e7b9      	b.n	8009b94 <_scanf_float+0x198>
 8009c20:	2d06      	cmp	r5, #6
 8009c22:	f47f af1f 	bne.w	8009a64 <_scanf_float+0x68>
 8009c26:	2507      	movs	r5, #7
 8009c28:	e7b4      	b.n	8009b94 <_scanf_float+0x198>
 8009c2a:	6822      	ldr	r2, [r4, #0]
 8009c2c:	0591      	lsls	r1, r2, #22
 8009c2e:	f57f af19 	bpl.w	8009a64 <_scanf_float+0x68>
 8009c32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009c36:	6022      	str	r2, [r4, #0]
 8009c38:	9702      	str	r7, [sp, #8]
 8009c3a:	e7ab      	b.n	8009b94 <_scanf_float+0x198>
 8009c3c:	6822      	ldr	r2, [r4, #0]
 8009c3e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009c42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009c46:	d005      	beq.n	8009c54 <_scanf_float+0x258>
 8009c48:	0550      	lsls	r0, r2, #21
 8009c4a:	f57f af0b 	bpl.w	8009a64 <_scanf_float+0x68>
 8009c4e:	2f00      	cmp	r7, #0
 8009c50:	f000 80d7 	beq.w	8009e02 <_scanf_float+0x406>
 8009c54:	0591      	lsls	r1, r2, #22
 8009c56:	bf58      	it	pl
 8009c58:	9902      	ldrpl	r1, [sp, #8]
 8009c5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c5e:	bf58      	it	pl
 8009c60:	1a79      	subpl	r1, r7, r1
 8009c62:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009c66:	f04f 0700 	mov.w	r7, #0
 8009c6a:	bf58      	it	pl
 8009c6c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c70:	6022      	str	r2, [r4, #0]
 8009c72:	e78f      	b.n	8009b94 <_scanf_float+0x198>
 8009c74:	f04f 0a03 	mov.w	sl, #3
 8009c78:	e78c      	b.n	8009b94 <_scanf_float+0x198>
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009c82:	4798      	blx	r3
 8009c84:	2800      	cmp	r0, #0
 8009c86:	f43f aedf 	beq.w	8009a48 <_scanf_float+0x4c>
 8009c8a:	e6eb      	b.n	8009a64 <_scanf_float+0x68>
 8009c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c90:	464a      	mov	r2, r9
 8009c92:	4640      	mov	r0, r8
 8009c94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c98:	4798      	blx	r3
 8009c9a:	6923      	ldr	r3, [r4, #16]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	e6eb      	b.n	8009a7a <_scanf_float+0x7e>
 8009ca2:	1e6b      	subs	r3, r5, #1
 8009ca4:	2b06      	cmp	r3, #6
 8009ca6:	d824      	bhi.n	8009cf2 <_scanf_float+0x2f6>
 8009ca8:	2d02      	cmp	r5, #2
 8009caa:	d836      	bhi.n	8009d1a <_scanf_float+0x31e>
 8009cac:	9b01      	ldr	r3, [sp, #4]
 8009cae:	429e      	cmp	r6, r3
 8009cb0:	f67f aee7 	bls.w	8009a82 <_scanf_float+0x86>
 8009cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009cb8:	464a      	mov	r2, r9
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cc0:	4798      	blx	r3
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	6123      	str	r3, [r4, #16]
 8009cc8:	e7f0      	b.n	8009cac <_scanf_float+0x2b0>
 8009cca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009cce:	464a      	mov	r2, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009cd6:	4798      	blx	r3
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	6123      	str	r3, [r4, #16]
 8009cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ce2:	fa5f fa8a 	uxtb.w	sl, sl
 8009ce6:	f1ba 0f02 	cmp.w	sl, #2
 8009cea:	d1ee      	bne.n	8009cca <_scanf_float+0x2ce>
 8009cec:	3d03      	subs	r5, #3
 8009cee:	b2ed      	uxtb	r5, r5
 8009cf0:	1b76      	subs	r6, r6, r5
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	05da      	lsls	r2, r3, #23
 8009cf6:	d530      	bpl.n	8009d5a <_scanf_float+0x35e>
 8009cf8:	055b      	lsls	r3, r3, #21
 8009cfa:	d511      	bpl.n	8009d20 <_scanf_float+0x324>
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	429e      	cmp	r6, r3
 8009d00:	f67f aebf 	bls.w	8009a82 <_scanf_float+0x86>
 8009d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d08:	464a      	mov	r2, r9
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d10:	4798      	blx	r3
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	6123      	str	r3, [r4, #16]
 8009d18:	e7f0      	b.n	8009cfc <_scanf_float+0x300>
 8009d1a:	46aa      	mov	sl, r5
 8009d1c:	46b3      	mov	fp, r6
 8009d1e:	e7de      	b.n	8009cde <_scanf_float+0x2e2>
 8009d20:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	2965      	cmp	r1, #101	@ 0x65
 8009d28:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d2c:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	d00c      	beq.n	8009d4e <_scanf_float+0x352>
 8009d34:	2945      	cmp	r1, #69	@ 0x45
 8009d36:	d00a      	beq.n	8009d4e <_scanf_float+0x352>
 8009d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d3c:	464a      	mov	r2, r9
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4798      	blx	r3
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	1eb5      	subs	r5, r6, #2
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	464a      	mov	r2, r9
 8009d50:	4640      	mov	r0, r8
 8009d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d56:	4798      	blx	r3
 8009d58:	462e      	mov	r6, r5
 8009d5a:	6822      	ldr	r2, [r4, #0]
 8009d5c:	f012 0210 	ands.w	r2, r2, #16
 8009d60:	d001      	beq.n	8009d66 <_scanf_float+0x36a>
 8009d62:	2000      	movs	r0, #0
 8009d64:	e68e      	b.n	8009a84 <_scanf_float+0x88>
 8009d66:	7032      	strb	r2, [r6, #0]
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d72:	d125      	bne.n	8009dc0 <_scanf_float+0x3c4>
 8009d74:	9b02      	ldr	r3, [sp, #8]
 8009d76:	429f      	cmp	r7, r3
 8009d78:	d00a      	beq.n	8009d90 <_scanf_float+0x394>
 8009d7a:	1bda      	subs	r2, r3, r7
 8009d7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009d80:	429e      	cmp	r6, r3
 8009d82:	bf28      	it	cs
 8009d84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009d88:	4630      	mov	r0, r6
 8009d8a:	491f      	ldr	r1, [pc, #124]	@ (8009e08 <_scanf_float+0x40c>)
 8009d8c:	f000 f972 	bl	800a074 <siprintf>
 8009d90:	2200      	movs	r2, #0
 8009d92:	4640      	mov	r0, r8
 8009d94:	9901      	ldr	r1, [sp, #4]
 8009d96:	f002 fcfb 	bl	800c790 <_strtod_r>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	6825      	ldr	r5, [r4, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f015 0f02 	tst.w	r5, #2
 8009da4:	4606      	mov	r6, r0
 8009da6:	460f      	mov	r7, r1
 8009da8:	f103 0204 	add.w	r2, r3, #4
 8009dac:	d015      	beq.n	8009dda <_scanf_float+0x3de>
 8009dae:	9903      	ldr	r1, [sp, #12]
 8009db0:	600a      	str	r2, [r1, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	e9c3 6700 	strd	r6, r7, [r3]
 8009db8:	68e3      	ldr	r3, [r4, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	60e3      	str	r3, [r4, #12]
 8009dbe:	e7d0      	b.n	8009d62 <_scanf_float+0x366>
 8009dc0:	9b04      	ldr	r3, [sp, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0e4      	beq.n	8009d90 <_scanf_float+0x394>
 8009dc6:	9905      	ldr	r1, [sp, #20]
 8009dc8:	230a      	movs	r3, #10
 8009dca:	4640      	mov	r0, r8
 8009dcc:	3101      	adds	r1, #1
 8009dce:	f002 fd5f 	bl	800c890 <_strtol_r>
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	9e05      	ldr	r6, [sp, #20]
 8009dd6:	1ac2      	subs	r2, r0, r3
 8009dd8:	e7d0      	b.n	8009d7c <_scanf_float+0x380>
 8009dda:	076d      	lsls	r5, r5, #29
 8009ddc:	d4e7      	bmi.n	8009dae <_scanf_float+0x3b2>
 8009dde:	9d03      	ldr	r5, [sp, #12]
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	681d      	ldr	r5, [r3, #0]
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	f7f6 fe10 	bl	8000a0c <__aeabi_dcmpun>
 8009dec:	b120      	cbz	r0, 8009df8 <_scanf_float+0x3fc>
 8009dee:	4807      	ldr	r0, [pc, #28]	@ (8009e0c <_scanf_float+0x410>)
 8009df0:	f000 fad6 	bl	800a3a0 <nanf>
 8009df4:	6028      	str	r0, [r5, #0]
 8009df6:	e7df      	b.n	8009db8 <_scanf_float+0x3bc>
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fe64 	bl	8000ac8 <__aeabi_d2f>
 8009e00:	e7f8      	b.n	8009df4 <_scanf_float+0x3f8>
 8009e02:	2700      	movs	r7, #0
 8009e04:	e633      	b.n	8009a6e <_scanf_float+0x72>
 8009e06:	bf00      	nop
 8009e08:	0800f57e 	.word	0x0800f57e
 8009e0c:	0800f6bf 	.word	0x0800f6bf

08009e10 <std>:
 8009e10:	2300      	movs	r3, #0
 8009e12:	b510      	push	{r4, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	e9c0 3300 	strd	r3, r3, [r0]
 8009e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e1e:	6083      	str	r3, [r0, #8]
 8009e20:	8181      	strh	r1, [r0, #12]
 8009e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e24:	81c2      	strh	r2, [r0, #14]
 8009e26:	6183      	str	r3, [r0, #24]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	305c      	adds	r0, #92	@ 0x5c
 8009e2e:	f000 fa1b 	bl	800a268 <memset>
 8009e32:	4b0d      	ldr	r3, [pc, #52]	@ (8009e68 <std+0x58>)
 8009e34:	6224      	str	r4, [r4, #32]
 8009e36:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e38:	4b0c      	ldr	r3, [pc, #48]	@ (8009e6c <std+0x5c>)
 8009e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e70 <std+0x60>)
 8009e3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e40:	4b0c      	ldr	r3, [pc, #48]	@ (8009e74 <std+0x64>)
 8009e42:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e44:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <std+0x68>)
 8009e46:	429c      	cmp	r4, r3
 8009e48:	d006      	beq.n	8009e58 <std+0x48>
 8009e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e4e:	4294      	cmp	r4, r2
 8009e50:	d002      	beq.n	8009e58 <std+0x48>
 8009e52:	33d0      	adds	r3, #208	@ 0xd0
 8009e54:	429c      	cmp	r4, r3
 8009e56:	d105      	bne.n	8009e64 <std+0x54>
 8009e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e60:	f000 ba7e 	b.w	800a360 <__retarget_lock_init_recursive>
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	bf00      	nop
 8009e68:	0800a0b9 	.word	0x0800a0b9
 8009e6c:	0800a0db 	.word	0x0800a0db
 8009e70:	0800a113 	.word	0x0800a113
 8009e74:	0800a137 	.word	0x0800a137
 8009e78:	20002d18 	.word	0x20002d18

08009e7c <stdio_exit_handler>:
 8009e7c:	4a02      	ldr	r2, [pc, #8]	@ (8009e88 <stdio_exit_handler+0xc>)
 8009e7e:	4903      	ldr	r1, [pc, #12]	@ (8009e8c <stdio_exit_handler+0x10>)
 8009e80:	4803      	ldr	r0, [pc, #12]	@ (8009e90 <stdio_exit_handler+0x14>)
 8009e82:	f000 b869 	b.w	8009f58 <_fwalk_sglue>
 8009e86:	bf00      	nop
 8009e88:	20000024 	.word	0x20000024
 8009e8c:	0800cec5 	.word	0x0800cec5
 8009e90:	20000034 	.word	0x20000034

08009e94 <cleanup_stdio>:
 8009e94:	6841      	ldr	r1, [r0, #4]
 8009e96:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec8 <cleanup_stdio+0x34>)
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	d001      	beq.n	8009ea4 <cleanup_stdio+0x10>
 8009ea0:	f003 f810 	bl	800cec4 <_fflush_r>
 8009ea4:	68a1      	ldr	r1, [r4, #8]
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <cleanup_stdio+0x38>)
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <cleanup_stdio+0x1e>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f003 f809 	bl	800cec4 <_fflush_r>
 8009eb2:	68e1      	ldr	r1, [r4, #12]
 8009eb4:	4b06      	ldr	r3, [pc, #24]	@ (8009ed0 <cleanup_stdio+0x3c>)
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	d004      	beq.n	8009ec4 <cleanup_stdio+0x30>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec0:	f003 b800 	b.w	800cec4 <_fflush_r>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20002d18 	.word	0x20002d18
 8009ecc:	20002d80 	.word	0x20002d80
 8009ed0:	20002de8 	.word	0x20002de8

08009ed4 <global_stdio_init.part.0>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f04 <global_stdio_init.part.0+0x30>)
 8009ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8009f08 <global_stdio_init.part.0+0x34>)
 8009eda:	4a0c      	ldr	r2, [pc, #48]	@ (8009f0c <global_stdio_init.part.0+0x38>)
 8009edc:	4620      	mov	r0, r4
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7ff ff94 	bl	8009e10 <std>
 8009ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009eec:	2201      	movs	r2, #1
 8009eee:	2109      	movs	r1, #9
 8009ef0:	f7ff ff8e 	bl	8009e10 <std>
 8009ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ef8:	2202      	movs	r2, #2
 8009efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009efe:	2112      	movs	r1, #18
 8009f00:	f7ff bf86 	b.w	8009e10 <std>
 8009f04:	20002e50 	.word	0x20002e50
 8009f08:	20002d18 	.word	0x20002d18
 8009f0c:	08009e7d 	.word	0x08009e7d

08009f10 <__sfp_lock_acquire>:
 8009f10:	4801      	ldr	r0, [pc, #4]	@ (8009f18 <__sfp_lock_acquire+0x8>)
 8009f12:	f000 ba26 	b.w	800a362 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	20002e59 	.word	0x20002e59

08009f1c <__sfp_lock_release>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	@ (8009f24 <__sfp_lock_release+0x8>)
 8009f1e:	f000 ba21 	b.w	800a364 <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	20002e59 	.word	0x20002e59

08009f28 <__sinit>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	f7ff fff0 	bl	8009f10 <__sfp_lock_acquire>
 8009f30:	6a23      	ldr	r3, [r4, #32]
 8009f32:	b11b      	cbz	r3, 8009f3c <__sinit+0x14>
 8009f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f38:	f7ff bff0 	b.w	8009f1c <__sfp_lock_release>
 8009f3c:	4b04      	ldr	r3, [pc, #16]	@ (8009f50 <__sinit+0x28>)
 8009f3e:	6223      	str	r3, [r4, #32]
 8009f40:	4b04      	ldr	r3, [pc, #16]	@ (8009f54 <__sinit+0x2c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f5      	bne.n	8009f34 <__sinit+0xc>
 8009f48:	f7ff ffc4 	bl	8009ed4 <global_stdio_init.part.0>
 8009f4c:	e7f2      	b.n	8009f34 <__sinit+0xc>
 8009f4e:	bf00      	nop
 8009f50:	08009e95 	.word	0x08009e95
 8009f54:	20002e50 	.word	0x20002e50

08009f58 <_fwalk_sglue>:
 8009f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4688      	mov	r8, r1
 8009f60:	4614      	mov	r4, r2
 8009f62:	2600      	movs	r6, #0
 8009f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f68:	f1b9 0901 	subs.w	r9, r9, #1
 8009f6c:	d505      	bpl.n	8009f7a <_fwalk_sglue+0x22>
 8009f6e:	6824      	ldr	r4, [r4, #0]
 8009f70:	2c00      	cmp	r4, #0
 8009f72:	d1f7      	bne.n	8009f64 <_fwalk_sglue+0xc>
 8009f74:	4630      	mov	r0, r6
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d907      	bls.n	8009f90 <_fwalk_sglue+0x38>
 8009f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f84:	3301      	adds	r3, #1
 8009f86:	d003      	beq.n	8009f90 <_fwalk_sglue+0x38>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c0      	blx	r8
 8009f8e:	4306      	orrs	r6, r0
 8009f90:	3568      	adds	r5, #104	@ 0x68
 8009f92:	e7e9      	b.n	8009f68 <_fwalk_sglue+0x10>

08009f94 <iprintf>:
 8009f94:	b40f      	push	{r0, r1, r2, r3}
 8009f96:	b507      	push	{r0, r1, r2, lr}
 8009f98:	4906      	ldr	r1, [pc, #24]	@ (8009fb4 <iprintf+0x20>)
 8009f9a:	ab04      	add	r3, sp, #16
 8009f9c:	6808      	ldr	r0, [r1, #0]
 8009f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa2:	6881      	ldr	r1, [r0, #8]
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	f002 fdf5 	bl	800cb94 <_vfiprintf_r>
 8009faa:	b003      	add	sp, #12
 8009fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb0:	b004      	add	sp, #16
 8009fb2:	4770      	bx	lr
 8009fb4:	20000030 	.word	0x20000030

08009fb8 <_puts_r>:
 8009fb8:	6a03      	ldr	r3, [r0, #32]
 8009fba:	b570      	push	{r4, r5, r6, lr}
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	460e      	mov	r6, r1
 8009fc0:	6884      	ldr	r4, [r0, #8]
 8009fc2:	b90b      	cbnz	r3, 8009fc8 <_puts_r+0x10>
 8009fc4:	f7ff ffb0 	bl	8009f28 <__sinit>
 8009fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fca:	07db      	lsls	r3, r3, #31
 8009fcc:	d405      	bmi.n	8009fda <_puts_r+0x22>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	0598      	lsls	r0, r3, #22
 8009fd2:	d402      	bmi.n	8009fda <_puts_r+0x22>
 8009fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fd6:	f000 f9c4 	bl	800a362 <__retarget_lock_acquire_recursive>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	0719      	lsls	r1, r3, #28
 8009fde:	d502      	bpl.n	8009fe6 <_puts_r+0x2e>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d135      	bne.n	800a052 <_puts_r+0x9a>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f000 f8e7 	bl	800a1bc <__swsetup_r>
 8009fee:	b380      	cbz	r0, 800a052 <_puts_r+0x9a>
 8009ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8009ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ff6:	07da      	lsls	r2, r3, #31
 8009ff8:	d405      	bmi.n	800a006 <_puts_r+0x4e>
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	059b      	lsls	r3, r3, #22
 8009ffe:	d402      	bmi.n	800a006 <_puts_r+0x4e>
 800a000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a002:	f000 f9af 	bl	800a364 <__retarget_lock_release_recursive>
 800a006:	4628      	mov	r0, r5
 800a008:	bd70      	pop	{r4, r5, r6, pc}
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	da04      	bge.n	800a018 <_puts_r+0x60>
 800a00e:	69a2      	ldr	r2, [r4, #24]
 800a010:	429a      	cmp	r2, r3
 800a012:	dc17      	bgt.n	800a044 <_puts_r+0x8c>
 800a014:	290a      	cmp	r1, #10
 800a016:	d015      	beq.n	800a044 <_puts_r+0x8c>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	6022      	str	r2, [r4, #0]
 800a01e:	7019      	strb	r1, [r3, #0]
 800a020:	68a3      	ldr	r3, [r4, #8]
 800a022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a026:	3b01      	subs	r3, #1
 800a028:	60a3      	str	r3, [r4, #8]
 800a02a:	2900      	cmp	r1, #0
 800a02c:	d1ed      	bne.n	800a00a <_puts_r+0x52>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da11      	bge.n	800a056 <_puts_r+0x9e>
 800a032:	4622      	mov	r2, r4
 800a034:	210a      	movs	r1, #10
 800a036:	4628      	mov	r0, r5
 800a038:	f000 f881 	bl	800a13e <__swbuf_r>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d0d7      	beq.n	8009ff0 <_puts_r+0x38>
 800a040:	250a      	movs	r5, #10
 800a042:	e7d7      	b.n	8009ff4 <_puts_r+0x3c>
 800a044:	4622      	mov	r2, r4
 800a046:	4628      	mov	r0, r5
 800a048:	f000 f879 	bl	800a13e <__swbuf_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d1e7      	bne.n	800a020 <_puts_r+0x68>
 800a050:	e7ce      	b.n	8009ff0 <_puts_r+0x38>
 800a052:	3e01      	subs	r6, #1
 800a054:	e7e4      	b.n	800a020 <_puts_r+0x68>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	6022      	str	r2, [r4, #0]
 800a05c:	220a      	movs	r2, #10
 800a05e:	701a      	strb	r2, [r3, #0]
 800a060:	e7ee      	b.n	800a040 <_puts_r+0x88>
	...

0800a064 <puts>:
 800a064:	4b02      	ldr	r3, [pc, #8]	@ (800a070 <puts+0xc>)
 800a066:	4601      	mov	r1, r0
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	f7ff bfa5 	b.w	8009fb8 <_puts_r>
 800a06e:	bf00      	nop
 800a070:	20000030 	.word	0x20000030

0800a074 <siprintf>:
 800a074:	b40e      	push	{r1, r2, r3}
 800a076:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a07a:	b510      	push	{r4, lr}
 800a07c:	2400      	movs	r4, #0
 800a07e:	b09d      	sub	sp, #116	@ 0x74
 800a080:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a082:	9002      	str	r0, [sp, #8]
 800a084:	9006      	str	r0, [sp, #24]
 800a086:	9107      	str	r1, [sp, #28]
 800a088:	9104      	str	r1, [sp, #16]
 800a08a:	4809      	ldr	r0, [pc, #36]	@ (800a0b0 <siprintf+0x3c>)
 800a08c:	4909      	ldr	r1, [pc, #36]	@ (800a0b4 <siprintf+0x40>)
 800a08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a092:	9105      	str	r1, [sp, #20]
 800a094:	6800      	ldr	r0, [r0, #0]
 800a096:	a902      	add	r1, sp, #8
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a09c:	f002 fc56 	bl	800c94c <_svfiprintf_r>
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	701c      	strb	r4, [r3, #0]
 800a0a4:	b01d      	add	sp, #116	@ 0x74
 800a0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0aa:	b003      	add	sp, #12
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20000030 	.word	0x20000030
 800a0b4:	ffff0208 	.word	0xffff0208

0800a0b8 <__sread>:
 800a0b8:	b510      	push	{r4, lr}
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c0:	f000 f900 	bl	800a2c4 <_read_r>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	bfab      	itete	ge
 800a0c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a0cc:	181b      	addge	r3, r3, r0
 800a0ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0d2:	bfac      	ite	ge
 800a0d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0d6:	81a3      	strhlt	r3, [r4, #12]
 800a0d8:	bd10      	pop	{r4, pc}

0800a0da <__swrite>:
 800a0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0de:	461f      	mov	r7, r3
 800a0e0:	898b      	ldrh	r3, [r1, #12]
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	05db      	lsls	r3, r3, #23
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	4616      	mov	r6, r2
 800a0ea:	d505      	bpl.n	800a0f8 <__swrite+0x1e>
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f4:	f000 f8d4 	bl	800a2a0 <_lseek_r>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	4628      	mov	r0, r5
 800a104:	463b      	mov	r3, r7
 800a106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a10e:	f000 b8eb 	b.w	800a2e8 <_write_r>

0800a112 <__sseek>:
 800a112:	b510      	push	{r4, lr}
 800a114:	460c      	mov	r4, r1
 800a116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11a:	f000 f8c1 	bl	800a2a0 <_lseek_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	bf15      	itete	ne
 800a124:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a126:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a12a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a12e:	81a3      	strheq	r3, [r4, #12]
 800a130:	bf18      	it	ne
 800a132:	81a3      	strhne	r3, [r4, #12]
 800a134:	bd10      	pop	{r4, pc}

0800a136 <__sclose>:
 800a136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a13a:	f000 b8a1 	b.w	800a280 <_close_r>

0800a13e <__swbuf_r>:
 800a13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a140:	460e      	mov	r6, r1
 800a142:	4614      	mov	r4, r2
 800a144:	4605      	mov	r5, r0
 800a146:	b118      	cbz	r0, 800a150 <__swbuf_r+0x12>
 800a148:	6a03      	ldr	r3, [r0, #32]
 800a14a:	b90b      	cbnz	r3, 800a150 <__swbuf_r+0x12>
 800a14c:	f7ff feec 	bl	8009f28 <__sinit>
 800a150:	69a3      	ldr	r3, [r4, #24]
 800a152:	60a3      	str	r3, [r4, #8]
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	071a      	lsls	r2, r3, #28
 800a158:	d501      	bpl.n	800a15e <__swbuf_r+0x20>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	b943      	cbnz	r3, 800a170 <__swbuf_r+0x32>
 800a15e:	4621      	mov	r1, r4
 800a160:	4628      	mov	r0, r5
 800a162:	f000 f82b 	bl	800a1bc <__swsetup_r>
 800a166:	b118      	cbz	r0, 800a170 <__swbuf_r+0x32>
 800a168:	f04f 37ff 	mov.w	r7, #4294967295
 800a16c:	4638      	mov	r0, r7
 800a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	6922      	ldr	r2, [r4, #16]
 800a174:	b2f6      	uxtb	r6, r6
 800a176:	1a98      	subs	r0, r3, r2
 800a178:	6963      	ldr	r3, [r4, #20]
 800a17a:	4637      	mov	r7, r6
 800a17c:	4283      	cmp	r3, r0
 800a17e:	dc05      	bgt.n	800a18c <__swbuf_r+0x4e>
 800a180:	4621      	mov	r1, r4
 800a182:	4628      	mov	r0, r5
 800a184:	f002 fe9e 	bl	800cec4 <_fflush_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d1ed      	bne.n	800a168 <__swbuf_r+0x2a>
 800a18c:	68a3      	ldr	r3, [r4, #8]
 800a18e:	3b01      	subs	r3, #1
 800a190:	60a3      	str	r3, [r4, #8]
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	6022      	str	r2, [r4, #0]
 800a198:	701e      	strb	r6, [r3, #0]
 800a19a:	6962      	ldr	r2, [r4, #20]
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d004      	beq.n	800a1ac <__swbuf_r+0x6e>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	07db      	lsls	r3, r3, #31
 800a1a6:	d5e1      	bpl.n	800a16c <__swbuf_r+0x2e>
 800a1a8:	2e0a      	cmp	r6, #10
 800a1aa:	d1df      	bne.n	800a16c <__swbuf_r+0x2e>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f002 fe88 	bl	800cec4 <_fflush_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d0d9      	beq.n	800a16c <__swbuf_r+0x2e>
 800a1b8:	e7d6      	b.n	800a168 <__swbuf_r+0x2a>
	...

0800a1bc <__swsetup_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4b29      	ldr	r3, [pc, #164]	@ (800a264 <__swsetup_r+0xa8>)
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	b118      	cbz	r0, 800a1d0 <__swsetup_r+0x14>
 800a1c8:	6a03      	ldr	r3, [r0, #32]
 800a1ca:	b90b      	cbnz	r3, 800a1d0 <__swsetup_r+0x14>
 800a1cc:	f7ff feac 	bl	8009f28 <__sinit>
 800a1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d4:	0719      	lsls	r1, r3, #28
 800a1d6:	d422      	bmi.n	800a21e <__swsetup_r+0x62>
 800a1d8:	06da      	lsls	r2, r3, #27
 800a1da:	d407      	bmi.n	800a1ec <__swsetup_r+0x30>
 800a1dc:	2209      	movs	r2, #9
 800a1de:	602a      	str	r2, [r5, #0]
 800a1e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	e033      	b.n	800a254 <__swsetup_r+0x98>
 800a1ec:	0758      	lsls	r0, r3, #29
 800a1ee:	d512      	bpl.n	800a216 <__swsetup_r+0x5a>
 800a1f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1f2:	b141      	cbz	r1, 800a206 <__swsetup_r+0x4a>
 800a1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1f8:	4299      	cmp	r1, r3
 800a1fa:	d002      	beq.n	800a202 <__swsetup_r+0x46>
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f000 ff2f 	bl	800b060 <_free_r>
 800a202:	2300      	movs	r3, #0
 800a204:	6363      	str	r3, [r4, #52]	@ 0x34
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a20c:	81a3      	strh	r3, [r4, #12]
 800a20e:	2300      	movs	r3, #0
 800a210:	6063      	str	r3, [r4, #4]
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	f043 0308 	orr.w	r3, r3, #8
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	b94b      	cbnz	r3, 800a236 <__swsetup_r+0x7a>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a22c:	d003      	beq.n	800a236 <__swsetup_r+0x7a>
 800a22e:	4621      	mov	r1, r4
 800a230:	4628      	mov	r0, r5
 800a232:	f002 fe94 	bl	800cf5e <__smakebuf_r>
 800a236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23a:	f013 0201 	ands.w	r2, r3, #1
 800a23e:	d00a      	beq.n	800a256 <__swsetup_r+0x9a>
 800a240:	2200      	movs	r2, #0
 800a242:	60a2      	str	r2, [r4, #8]
 800a244:	6962      	ldr	r2, [r4, #20]
 800a246:	4252      	negs	r2, r2
 800a248:	61a2      	str	r2, [r4, #24]
 800a24a:	6922      	ldr	r2, [r4, #16]
 800a24c:	b942      	cbnz	r2, 800a260 <__swsetup_r+0xa4>
 800a24e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a252:	d1c5      	bne.n	800a1e0 <__swsetup_r+0x24>
 800a254:	bd38      	pop	{r3, r4, r5, pc}
 800a256:	0799      	lsls	r1, r3, #30
 800a258:	bf58      	it	pl
 800a25a:	6962      	ldrpl	r2, [r4, #20]
 800a25c:	60a2      	str	r2, [r4, #8]
 800a25e:	e7f4      	b.n	800a24a <__swsetup_r+0x8e>
 800a260:	2000      	movs	r0, #0
 800a262:	e7f7      	b.n	800a254 <__swsetup_r+0x98>
 800a264:	20000030 	.word	0x20000030

0800a268 <memset>:
 800a268:	4603      	mov	r3, r0
 800a26a:	4402      	add	r2, r0
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d100      	bne.n	800a272 <memset+0xa>
 800a270:	4770      	bx	lr
 800a272:	f803 1b01 	strb.w	r1, [r3], #1
 800a276:	e7f9      	b.n	800a26c <memset+0x4>

0800a278 <_localeconv_r>:
 800a278:	4800      	ldr	r0, [pc, #0]	@ (800a27c <_localeconv_r+0x4>)
 800a27a:	4770      	bx	lr
 800a27c:	20000170 	.word	0x20000170

0800a280 <_close_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	2300      	movs	r3, #0
 800a284:	4d05      	ldr	r5, [pc, #20]	@ (800a29c <_close_r+0x1c>)
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f8 fd81 	bl	8002d92 <_close>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_close_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_close_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	20002e54 	.word	0x20002e54

0800a2a0 <_lseek_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4d05      	ldr	r5, [pc, #20]	@ (800a2c0 <_lseek_r+0x20>)
 800a2ac:	602a      	str	r2, [r5, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f7f8 fd93 	bl	8002dda <_lseek>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_lseek_r+0x1e>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_lseek_r+0x1e>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20002e54 	.word	0x20002e54

0800a2c4 <_read_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4d05      	ldr	r5, [pc, #20]	@ (800a2e4 <_read_r+0x20>)
 800a2d0:	602a      	str	r2, [r5, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f7f8 fd24 	bl	8002d20 <_read>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_read_r+0x1e>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_read_r+0x1e>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	20002e54 	.word	0x20002e54

0800a2e8 <_write_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4d05      	ldr	r5, [pc, #20]	@ (800a308 <_write_r+0x20>)
 800a2f4:	602a      	str	r2, [r5, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7f8 fd2f 	bl	8002d5a <_write>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_write_r+0x1e>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_write_r+0x1e>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20002e54 	.word	0x20002e54

0800a30c <__errno>:
 800a30c:	4b01      	ldr	r3, [pc, #4]	@ (800a314 <__errno+0x8>)
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000030 	.word	0x20000030

0800a318 <__libc_init_array>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	2600      	movs	r6, #0
 800a31c:	4d0c      	ldr	r5, [pc, #48]	@ (800a350 <__libc_init_array+0x38>)
 800a31e:	4c0d      	ldr	r4, [pc, #52]	@ (800a354 <__libc_init_array+0x3c>)
 800a320:	1b64      	subs	r4, r4, r5
 800a322:	10a4      	asrs	r4, r4, #2
 800a324:	42a6      	cmp	r6, r4
 800a326:	d109      	bne.n	800a33c <__libc_init_array+0x24>
 800a328:	f005 f814 	bl	800f354 <_init>
 800a32c:	2600      	movs	r6, #0
 800a32e:	4d0a      	ldr	r5, [pc, #40]	@ (800a358 <__libc_init_array+0x40>)
 800a330:	4c0a      	ldr	r4, [pc, #40]	@ (800a35c <__libc_init_array+0x44>)
 800a332:	1b64      	subs	r4, r4, r5
 800a334:	10a4      	asrs	r4, r4, #2
 800a336:	42a6      	cmp	r6, r4
 800a338:	d105      	bne.n	800a346 <__libc_init_array+0x2e>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a340:	4798      	blx	r3
 800a342:	3601      	adds	r6, #1
 800a344:	e7ee      	b.n	800a324 <__libc_init_array+0xc>
 800a346:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34a:	4798      	blx	r3
 800a34c:	3601      	adds	r6, #1
 800a34e:	e7f2      	b.n	800a336 <__libc_init_array+0x1e>
 800a350:	0800fda4 	.word	0x0800fda4
 800a354:	0800fda4 	.word	0x0800fda4
 800a358:	0800fda4 	.word	0x0800fda4
 800a35c:	0800fda8 	.word	0x0800fda8

0800a360 <__retarget_lock_init_recursive>:
 800a360:	4770      	bx	lr

0800a362 <__retarget_lock_acquire_recursive>:
 800a362:	4770      	bx	lr

0800a364 <__retarget_lock_release_recursive>:
 800a364:	4770      	bx	lr

0800a366 <memchr>:
 800a366:	4603      	mov	r3, r0
 800a368:	b510      	push	{r4, lr}
 800a36a:	b2c9      	uxtb	r1, r1
 800a36c:	4402      	add	r2, r0
 800a36e:	4293      	cmp	r3, r2
 800a370:	4618      	mov	r0, r3
 800a372:	d101      	bne.n	800a378 <memchr+0x12>
 800a374:	2000      	movs	r0, #0
 800a376:	e003      	b.n	800a380 <memchr+0x1a>
 800a378:	7804      	ldrb	r4, [r0, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	428c      	cmp	r4, r1
 800a37e:	d1f6      	bne.n	800a36e <memchr+0x8>
 800a380:	bd10      	pop	{r4, pc}

0800a382 <memcpy>:
 800a382:	440a      	add	r2, r1
 800a384:	4291      	cmp	r1, r2
 800a386:	f100 33ff 	add.w	r3, r0, #4294967295
 800a38a:	d100      	bne.n	800a38e <memcpy+0xc>
 800a38c:	4770      	bx	lr
 800a38e:	b510      	push	{r4, lr}
 800a390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a394:	4291      	cmp	r1, r2
 800a396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a39a:	d1f9      	bne.n	800a390 <memcpy+0xe>
 800a39c:	bd10      	pop	{r4, pc}
	...

0800a3a0 <nanf>:
 800a3a0:	4800      	ldr	r0, [pc, #0]	@ (800a3a4 <nanf+0x4>)
 800a3a2:	4770      	bx	lr
 800a3a4:	7fc00000 	.word	0x7fc00000

0800a3a8 <quorem>:
 800a3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	6903      	ldr	r3, [r0, #16]
 800a3ae:	690c      	ldr	r4, [r1, #16]
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	42a3      	cmp	r3, r4
 800a3b4:	db7e      	blt.n	800a4b4 <quorem+0x10c>
 800a3b6:	3c01      	subs	r4, #1
 800a3b8:	00a3      	lsls	r3, r4, #2
 800a3ba:	f100 0514 	add.w	r5, r0, #20
 800a3be:	f101 0814 	add.w	r8, r1, #20
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3de:	d32e      	bcc.n	800a43e <quorem+0x96>
 800a3e0:	f04f 0a00 	mov.w	sl, #0
 800a3e4:	46c4      	mov	ip, r8
 800a3e6:	46ae      	mov	lr, r5
 800a3e8:	46d3      	mov	fp, sl
 800a3ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3ee:	b298      	uxth	r0, r3
 800a3f0:	fb06 a000 	mla	r0, r6, r0, sl
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	0c02      	lsrs	r2, r0, #16
 800a3f8:	fb06 2303 	mla	r3, r6, r3, r2
 800a3fc:	f8de 2000 	ldr.w	r2, [lr]
 800a400:	b280      	uxth	r0, r0
 800a402:	b292      	uxth	r2, r2
 800a404:	1a12      	subs	r2, r2, r0
 800a406:	445a      	add	r2, fp
 800a408:	f8de 0000 	ldr.w	r0, [lr]
 800a40c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a410:	b29b      	uxth	r3, r3
 800a412:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a416:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a41a:	b292      	uxth	r2, r2
 800a41c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a420:	45e1      	cmp	r9, ip
 800a422:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a426:	f84e 2b04 	str.w	r2, [lr], #4
 800a42a:	d2de      	bcs.n	800a3ea <quorem+0x42>
 800a42c:	9b00      	ldr	r3, [sp, #0]
 800a42e:	58eb      	ldr	r3, [r5, r3]
 800a430:	b92b      	cbnz	r3, 800a43e <quorem+0x96>
 800a432:	9b01      	ldr	r3, [sp, #4]
 800a434:	3b04      	subs	r3, #4
 800a436:	429d      	cmp	r5, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	d32f      	bcc.n	800a49c <quorem+0xf4>
 800a43c:	613c      	str	r4, [r7, #16]
 800a43e:	4638      	mov	r0, r7
 800a440:	f001 f9c8 	bl	800b7d4 <__mcmp>
 800a444:	2800      	cmp	r0, #0
 800a446:	db25      	blt.n	800a494 <quorem+0xec>
 800a448:	4629      	mov	r1, r5
 800a44a:	2000      	movs	r0, #0
 800a44c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a450:	f8d1 c000 	ldr.w	ip, [r1]
 800a454:	fa1f fe82 	uxth.w	lr, r2
 800a458:	fa1f f38c 	uxth.w	r3, ip
 800a45c:	eba3 030e 	sub.w	r3, r3, lr
 800a460:	4403      	add	r3, r0
 800a462:	0c12      	lsrs	r2, r2, #16
 800a464:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a468:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a472:	45c1      	cmp	r9, r8
 800a474:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a478:	f841 3b04 	str.w	r3, [r1], #4
 800a47c:	d2e6      	bcs.n	800a44c <quorem+0xa4>
 800a47e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a486:	b922      	cbnz	r2, 800a492 <quorem+0xea>
 800a488:	3b04      	subs	r3, #4
 800a48a:	429d      	cmp	r5, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	d30b      	bcc.n	800a4a8 <quorem+0x100>
 800a490:	613c      	str	r4, [r7, #16]
 800a492:	3601      	adds	r6, #1
 800a494:	4630      	mov	r0, r6
 800a496:	b003      	add	sp, #12
 800a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d1cb      	bne.n	800a43c <quorem+0x94>
 800a4a4:	3c01      	subs	r4, #1
 800a4a6:	e7c6      	b.n	800a436 <quorem+0x8e>
 800a4a8:	6812      	ldr	r2, [r2, #0]
 800a4aa:	3b04      	subs	r3, #4
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d1ef      	bne.n	800a490 <quorem+0xe8>
 800a4b0:	3c01      	subs	r4, #1
 800a4b2:	e7ea      	b.n	800a48a <quorem+0xe2>
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e7ee      	b.n	800a496 <quorem+0xee>

0800a4b8 <_dtoa_r>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4614      	mov	r4, r2
 800a4be:	461d      	mov	r5, r3
 800a4c0:	69c7      	ldr	r7, [r0, #28]
 800a4c2:	b097      	sub	sp, #92	@ 0x5c
 800a4c4:	4681      	mov	r9, r0
 800a4c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a4ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a4cc:	b97f      	cbnz	r7, 800a4ee <_dtoa_r+0x36>
 800a4ce:	2010      	movs	r0, #16
 800a4d0:	f000 fe0e 	bl	800b0f0 <malloc>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	f8c9 001c 	str.w	r0, [r9, #28]
 800a4da:	b920      	cbnz	r0, 800a4e6 <_dtoa_r+0x2e>
 800a4dc:	21ef      	movs	r1, #239	@ 0xef
 800a4de:	4bac      	ldr	r3, [pc, #688]	@ (800a790 <_dtoa_r+0x2d8>)
 800a4e0:	48ac      	ldr	r0, [pc, #688]	@ (800a794 <_dtoa_r+0x2dc>)
 800a4e2:	f002 fddd 	bl	800d0a0 <__assert_func>
 800a4e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a4ea:	6007      	str	r7, [r0, #0]
 800a4ec:	60c7      	str	r7, [r0, #12]
 800a4ee:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	b159      	cbz	r1, 800a50e <_dtoa_r+0x56>
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4093      	lsls	r3, r2
 800a4fc:	604a      	str	r2, [r1, #4]
 800a4fe:	608b      	str	r3, [r1, #8]
 800a500:	4648      	mov	r0, r9
 800a502:	f000 feeb 	bl	800b2dc <_Bfree>
 800a506:	2200      	movs	r2, #0
 800a508:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	1e2b      	subs	r3, r5, #0
 800a510:	bfaf      	iteee	ge
 800a512:	2300      	movge	r3, #0
 800a514:	2201      	movlt	r2, #1
 800a516:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a51a:	9307      	strlt	r3, [sp, #28]
 800a51c:	bfa8      	it	ge
 800a51e:	6033      	strge	r3, [r6, #0]
 800a520:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a524:	4b9c      	ldr	r3, [pc, #624]	@ (800a798 <_dtoa_r+0x2e0>)
 800a526:	bfb8      	it	lt
 800a528:	6032      	strlt	r2, [r6, #0]
 800a52a:	ea33 0308 	bics.w	r3, r3, r8
 800a52e:	d112      	bne.n	800a556 <_dtoa_r+0x9e>
 800a530:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a534:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a53c:	4323      	orrs	r3, r4
 800a53e:	f000 855e 	beq.w	800affe <_dtoa_r+0xb46>
 800a542:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a544:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a79c <_dtoa_r+0x2e4>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 8560 	beq.w	800b00e <_dtoa_r+0xb56>
 800a54e:	f10a 0303 	add.w	r3, sl, #3
 800a552:	f000 bd5a 	b.w	800b00a <_dtoa_r+0xb52>
 800a556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a55a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a55e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a562:	2200      	movs	r2, #0
 800a564:	2300      	movs	r3, #0
 800a566:	f7f6 fa1f 	bl	80009a8 <__aeabi_dcmpeq>
 800a56a:	4607      	mov	r7, r0
 800a56c:	b158      	cbz	r0, 800a586 <_dtoa_r+0xce>
 800a56e:	2301      	movs	r3, #1
 800a570:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a576:	b113      	cbz	r3, 800a57e <_dtoa_r+0xc6>
 800a578:	4b89      	ldr	r3, [pc, #548]	@ (800a7a0 <_dtoa_r+0x2e8>)
 800a57a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a7a4 <_dtoa_r+0x2ec>
 800a582:	f000 bd44 	b.w	800b00e <_dtoa_r+0xb56>
 800a586:	ab14      	add	r3, sp, #80	@ 0x50
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	ab15      	add	r3, sp, #84	@ 0x54
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	4648      	mov	r0, r9
 800a590:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a594:	f001 fa36 	bl	800ba04 <__d2b>
 800a598:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a59c:	9003      	str	r0, [sp, #12]
 800a59e:	2e00      	cmp	r6, #0
 800a5a0:	d078      	beq.n	800a694 <_dtoa_r+0x1dc>
 800a5a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5b8:	9712      	str	r7, [sp, #72]	@ 0x48
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4b7a      	ldr	r3, [pc, #488]	@ (800a7a8 <_dtoa_r+0x2f0>)
 800a5c0:	f7f5 fdd2 	bl	8000168 <__aeabi_dsub>
 800a5c4:	a36c      	add	r3, pc, #432	@ (adr r3, 800a778 <_dtoa_r+0x2c0>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f7f5 ff85 	bl	80004d8 <__aeabi_dmul>
 800a5ce:	a36c      	add	r3, pc, #432	@ (adr r3, 800a780 <_dtoa_r+0x2c8>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	f7f5 fdca 	bl	800016c <__adddf3>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	4630      	mov	r0, r6
 800a5dc:	460d      	mov	r5, r1
 800a5de:	f7f5 ff11 	bl	8000404 <__aeabi_i2d>
 800a5e2:	a369      	add	r3, pc, #420	@ (adr r3, 800a788 <_dtoa_r+0x2d0>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 ff76 	bl	80004d8 <__aeabi_dmul>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f5 fdba 	bl	800016c <__adddf3>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	f7f6 fa1c 	bl	8000a38 <__aeabi_d2iz>
 800a600:	2200      	movs	r2, #0
 800a602:	4607      	mov	r7, r0
 800a604:	2300      	movs	r3, #0
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 f9d7 	bl	80009bc <__aeabi_dcmplt>
 800a60e:	b140      	cbz	r0, 800a622 <_dtoa_r+0x16a>
 800a610:	4638      	mov	r0, r7
 800a612:	f7f5 fef7 	bl	8000404 <__aeabi_i2d>
 800a616:	4622      	mov	r2, r4
 800a618:	462b      	mov	r3, r5
 800a61a:	f7f6 f9c5 	bl	80009a8 <__aeabi_dcmpeq>
 800a61e:	b900      	cbnz	r0, 800a622 <_dtoa_r+0x16a>
 800a620:	3f01      	subs	r7, #1
 800a622:	2f16      	cmp	r7, #22
 800a624:	d854      	bhi.n	800a6d0 <_dtoa_r+0x218>
 800a626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a62a:	4b60      	ldr	r3, [pc, #384]	@ (800a7ac <_dtoa_r+0x2f4>)
 800a62c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f6 f9c2 	bl	80009bc <__aeabi_dcmplt>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d04b      	beq.n	800a6d4 <_dtoa_r+0x21c>
 800a63c:	2300      	movs	r3, #0
 800a63e:	3f01      	subs	r7, #1
 800a640:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	bf49      	itett	mi
 800a64a:	f1c3 0301 	rsbmi	r3, r3, #1
 800a64e:	2300      	movpl	r3, #0
 800a650:	9304      	strmi	r3, [sp, #16]
 800a652:	2300      	movmi	r3, #0
 800a654:	9209      	str	r2, [sp, #36]	@ 0x24
 800a656:	bf54      	ite	pl
 800a658:	9304      	strpl	r3, [sp, #16]
 800a65a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	db3b      	blt.n	800a6d8 <_dtoa_r+0x220>
 800a660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a662:	970e      	str	r7, [sp, #56]	@ 0x38
 800a664:	443b      	add	r3, r7
 800a666:	9309      	str	r3, [sp, #36]	@ 0x24
 800a668:	2300      	movs	r3, #0
 800a66a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a66c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a66e:	2b09      	cmp	r3, #9
 800a670:	d865      	bhi.n	800a73e <_dtoa_r+0x286>
 800a672:	2b05      	cmp	r3, #5
 800a674:	bfc4      	itt	gt
 800a676:	3b04      	subgt	r3, #4
 800a678:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a67a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a67c:	bfc8      	it	gt
 800a67e:	2400      	movgt	r4, #0
 800a680:	f1a3 0302 	sub.w	r3, r3, #2
 800a684:	bfd8      	it	le
 800a686:	2401      	movle	r4, #1
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d864      	bhi.n	800a756 <_dtoa_r+0x29e>
 800a68c:	e8df f003 	tbb	[pc, r3]
 800a690:	2c385553 	.word	0x2c385553
 800a694:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a698:	441e      	add	r6, r3
 800a69a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	bfc1      	itttt	gt
 800a6a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6a6:	fa08 f803 	lslgt.w	r8, r8, r3
 800a6aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6b2:	bfd6      	itet	le
 800a6b4:	f1c3 0320 	rsble	r3, r3, #32
 800a6b8:	ea48 0003 	orrgt.w	r0, r8, r3
 800a6bc:	fa04 f003 	lslle.w	r0, r4, r3
 800a6c0:	f7f5 fe90 	bl	80003e4 <__aeabi_ui2d>
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a6ca:	3e01      	subs	r6, #1
 800a6cc:	9212      	str	r2, [sp, #72]	@ 0x48
 800a6ce:	e774      	b.n	800a5ba <_dtoa_r+0x102>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e7b5      	b.n	800a640 <_dtoa_r+0x188>
 800a6d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a6d6:	e7b4      	b.n	800a642 <_dtoa_r+0x18a>
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	1bdb      	subs	r3, r3, r7
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	427b      	negs	r3, r7
 800a6e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6e6:	e7c1      	b.n	800a66c <_dtoa_r+0x1b4>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6ee:	eb07 0b03 	add.w	fp, r7, r3
 800a6f2:	f10b 0301 	add.w	r3, fp, #1
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	9308      	str	r3, [sp, #32]
 800a6fa:	bfb8      	it	lt
 800a6fc:	2301      	movlt	r3, #1
 800a6fe:	e006      	b.n	800a70e <_dtoa_r+0x256>
 800a700:	2301      	movs	r3, #1
 800a702:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a704:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd28      	ble.n	800a75c <_dtoa_r+0x2a4>
 800a70a:	469b      	mov	fp, r3
 800a70c:	9308      	str	r3, [sp, #32]
 800a70e:	2100      	movs	r1, #0
 800a710:	2204      	movs	r2, #4
 800a712:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a716:	f102 0514 	add.w	r5, r2, #20
 800a71a:	429d      	cmp	r5, r3
 800a71c:	d926      	bls.n	800a76c <_dtoa_r+0x2b4>
 800a71e:	6041      	str	r1, [r0, #4]
 800a720:	4648      	mov	r0, r9
 800a722:	f000 fd9b 	bl	800b25c <_Balloc>
 800a726:	4682      	mov	sl, r0
 800a728:	2800      	cmp	r0, #0
 800a72a:	d143      	bne.n	800a7b4 <_dtoa_r+0x2fc>
 800a72c:	4602      	mov	r2, r0
 800a72e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a732:	4b1f      	ldr	r3, [pc, #124]	@ (800a7b0 <_dtoa_r+0x2f8>)
 800a734:	e6d4      	b.n	800a4e0 <_dtoa_r+0x28>
 800a736:	2300      	movs	r3, #0
 800a738:	e7e3      	b.n	800a702 <_dtoa_r+0x24a>
 800a73a:	2300      	movs	r3, #0
 800a73c:	e7d5      	b.n	800a6ea <_dtoa_r+0x232>
 800a73e:	2401      	movs	r4, #1
 800a740:	2300      	movs	r3, #0
 800a742:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a744:	9320      	str	r3, [sp, #128]	@ 0x80
 800a746:	f04f 3bff 	mov.w	fp, #4294967295
 800a74a:	2200      	movs	r2, #0
 800a74c:	2312      	movs	r3, #18
 800a74e:	f8cd b020 	str.w	fp, [sp, #32]
 800a752:	9221      	str	r2, [sp, #132]	@ 0x84
 800a754:	e7db      	b.n	800a70e <_dtoa_r+0x256>
 800a756:	2301      	movs	r3, #1
 800a758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a75a:	e7f4      	b.n	800a746 <_dtoa_r+0x28e>
 800a75c:	f04f 0b01 	mov.w	fp, #1
 800a760:	465b      	mov	r3, fp
 800a762:	f8cd b020 	str.w	fp, [sp, #32]
 800a766:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a76a:	e7d0      	b.n	800a70e <_dtoa_r+0x256>
 800a76c:	3101      	adds	r1, #1
 800a76e:	0052      	lsls	r2, r2, #1
 800a770:	e7d1      	b.n	800a716 <_dtoa_r+0x25e>
 800a772:	bf00      	nop
 800a774:	f3af 8000 	nop.w
 800a778:	636f4361 	.word	0x636f4361
 800a77c:	3fd287a7 	.word	0x3fd287a7
 800a780:	8b60c8b3 	.word	0x8b60c8b3
 800a784:	3fc68a28 	.word	0x3fc68a28
 800a788:	509f79fb 	.word	0x509f79fb
 800a78c:	3fd34413 	.word	0x3fd34413
 800a790:	0800f590 	.word	0x0800f590
 800a794:	0800f5a7 	.word	0x0800f5a7
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	0800f58c 	.word	0x0800f58c
 800a7a0:	0800f55b 	.word	0x0800f55b
 800a7a4:	0800f55a 	.word	0x0800f55a
 800a7a8:	3ff80000 	.word	0x3ff80000
 800a7ac:	0800f758 	.word	0x0800f758
 800a7b0:	0800f5ff 	.word	0x0800f5ff
 800a7b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7b8:	6018      	str	r0, [r3, #0]
 800a7ba:	9b08      	ldr	r3, [sp, #32]
 800a7bc:	2b0e      	cmp	r3, #14
 800a7be:	f200 80a1 	bhi.w	800a904 <_dtoa_r+0x44c>
 800a7c2:	2c00      	cmp	r4, #0
 800a7c4:	f000 809e 	beq.w	800a904 <_dtoa_r+0x44c>
 800a7c8:	2f00      	cmp	r7, #0
 800a7ca:	dd33      	ble.n	800a834 <_dtoa_r+0x37c>
 800a7cc:	4b9c      	ldr	r3, [pc, #624]	@ (800aa40 <_dtoa_r+0x588>)
 800a7ce:	f007 020f 	and.w	r2, r7, #15
 800a7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d6:	05f8      	lsls	r0, r7, #23
 800a7d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a7e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a7e4:	d516      	bpl.n	800a814 <_dtoa_r+0x35c>
 800a7e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ea:	4b96      	ldr	r3, [pc, #600]	@ (800aa44 <_dtoa_r+0x58c>)
 800a7ec:	2603      	movs	r6, #3
 800a7ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7f2:	f7f5 ff9b 	bl	800072c <__aeabi_ddiv>
 800a7f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7fa:	f004 040f 	and.w	r4, r4, #15
 800a7fe:	4d91      	ldr	r5, [pc, #580]	@ (800aa44 <_dtoa_r+0x58c>)
 800a800:	b954      	cbnz	r4, 800a818 <_dtoa_r+0x360>
 800a802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a80a:	f7f5 ff8f 	bl	800072c <__aeabi_ddiv>
 800a80e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a812:	e028      	b.n	800a866 <_dtoa_r+0x3ae>
 800a814:	2602      	movs	r6, #2
 800a816:	e7f2      	b.n	800a7fe <_dtoa_r+0x346>
 800a818:	07e1      	lsls	r1, r4, #31
 800a81a:	d508      	bpl.n	800a82e <_dtoa_r+0x376>
 800a81c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a820:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a824:	f7f5 fe58 	bl	80004d8 <__aeabi_dmul>
 800a828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a82c:	3601      	adds	r6, #1
 800a82e:	1064      	asrs	r4, r4, #1
 800a830:	3508      	adds	r5, #8
 800a832:	e7e5      	b.n	800a800 <_dtoa_r+0x348>
 800a834:	f000 80af 	beq.w	800a996 <_dtoa_r+0x4de>
 800a838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a83c:	427c      	negs	r4, r7
 800a83e:	4b80      	ldr	r3, [pc, #512]	@ (800aa40 <_dtoa_r+0x588>)
 800a840:	f004 020f 	and.w	r2, r4, #15
 800a844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fe44 	bl	80004d8 <__aeabi_dmul>
 800a850:	2602      	movs	r6, #2
 800a852:	2300      	movs	r3, #0
 800a854:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a858:	4d7a      	ldr	r5, [pc, #488]	@ (800aa44 <_dtoa_r+0x58c>)
 800a85a:	1124      	asrs	r4, r4, #4
 800a85c:	2c00      	cmp	r4, #0
 800a85e:	f040 808f 	bne.w	800a980 <_dtoa_r+0x4c8>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d3      	bne.n	800a80e <_dtoa_r+0x356>
 800a866:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a86a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 8094 	beq.w	800a99a <_dtoa_r+0x4e2>
 800a872:	2200      	movs	r2, #0
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	4b73      	ldr	r3, [pc, #460]	@ (800aa48 <_dtoa_r+0x590>)
 800a87a:	f7f6 f89f 	bl	80009bc <__aeabi_dcmplt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	f000 808b 	beq.w	800a99a <_dtoa_r+0x4e2>
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 8087 	beq.w	800a99a <_dtoa_r+0x4e2>
 800a88c:	f1bb 0f00 	cmp.w	fp, #0
 800a890:	dd34      	ble.n	800a8fc <_dtoa_r+0x444>
 800a892:	4620      	mov	r0, r4
 800a894:	2200      	movs	r2, #0
 800a896:	4629      	mov	r1, r5
 800a898:	4b6c      	ldr	r3, [pc, #432]	@ (800aa4c <_dtoa_r+0x594>)
 800a89a:	f7f5 fe1d 	bl	80004d8 <__aeabi_dmul>
 800a89e:	465c      	mov	r4, fp
 800a8a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8a4:	f107 38ff 	add.w	r8, r7, #4294967295
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f7f5 fdaa 	bl	8000404 <__aeabi_i2d>
 800a8b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8b4:	f7f5 fe10 	bl	80004d8 <__aeabi_dmul>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4b65      	ldr	r3, [pc, #404]	@ (800aa50 <_dtoa_r+0x598>)
 800a8bc:	f7f5 fc56 	bl	800016c <__adddf3>
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	d16a      	bne.n	800a9a0 <_dtoa_r+0x4e8>
 800a8ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4b60      	ldr	r3, [pc, #384]	@ (800aa54 <_dtoa_r+0x59c>)
 800a8d2:	f7f5 fc49 	bl	8000168 <__aeabi_dsub>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8de:	462a      	mov	r2, r5
 800a8e0:	4633      	mov	r3, r6
 800a8e2:	f7f6 f889 	bl	80009f8 <__aeabi_dcmpgt>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f040 8298 	bne.w	800ae1c <_dtoa_r+0x964>
 800a8ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8f0:	462a      	mov	r2, r5
 800a8f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a8f6:	f7f6 f861 	bl	80009bc <__aeabi_dcmplt>
 800a8fa:	bb38      	cbnz	r0, 800a94c <_dtoa_r+0x494>
 800a8fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a900:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a904:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a906:	2b00      	cmp	r3, #0
 800a908:	f2c0 8157 	blt.w	800abba <_dtoa_r+0x702>
 800a90c:	2f0e      	cmp	r7, #14
 800a90e:	f300 8154 	bgt.w	800abba <_dtoa_r+0x702>
 800a912:	4b4b      	ldr	r3, [pc, #300]	@ (800aa40 <_dtoa_r+0x588>)
 800a914:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a91c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a920:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a922:	2b00      	cmp	r3, #0
 800a924:	f280 80e5 	bge.w	800aaf2 <_dtoa_r+0x63a>
 800a928:	9b08      	ldr	r3, [sp, #32]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f300 80e1 	bgt.w	800aaf2 <_dtoa_r+0x63a>
 800a930:	d10c      	bne.n	800a94c <_dtoa_r+0x494>
 800a932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a936:	2200      	movs	r2, #0
 800a938:	4b46      	ldr	r3, [pc, #280]	@ (800aa54 <_dtoa_r+0x59c>)
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a942:	f7f6 f84f 	bl	80009e4 <__aeabi_dcmpge>
 800a946:	2800      	cmp	r0, #0
 800a948:	f000 8266 	beq.w	800ae18 <_dtoa_r+0x960>
 800a94c:	2400      	movs	r4, #0
 800a94e:	4625      	mov	r5, r4
 800a950:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a952:	4656      	mov	r6, sl
 800a954:	ea6f 0803 	mvn.w	r8, r3
 800a958:	2700      	movs	r7, #0
 800a95a:	4621      	mov	r1, r4
 800a95c:	4648      	mov	r0, r9
 800a95e:	f000 fcbd 	bl	800b2dc <_Bfree>
 800a962:	2d00      	cmp	r5, #0
 800a964:	f000 80bd 	beq.w	800aae2 <_dtoa_r+0x62a>
 800a968:	b12f      	cbz	r7, 800a976 <_dtoa_r+0x4be>
 800a96a:	42af      	cmp	r7, r5
 800a96c:	d003      	beq.n	800a976 <_dtoa_r+0x4be>
 800a96e:	4639      	mov	r1, r7
 800a970:	4648      	mov	r0, r9
 800a972:	f000 fcb3 	bl	800b2dc <_Bfree>
 800a976:	4629      	mov	r1, r5
 800a978:	4648      	mov	r0, r9
 800a97a:	f000 fcaf 	bl	800b2dc <_Bfree>
 800a97e:	e0b0      	b.n	800aae2 <_dtoa_r+0x62a>
 800a980:	07e2      	lsls	r2, r4, #31
 800a982:	d505      	bpl.n	800a990 <_dtoa_r+0x4d8>
 800a984:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a988:	f7f5 fda6 	bl	80004d8 <__aeabi_dmul>
 800a98c:	2301      	movs	r3, #1
 800a98e:	3601      	adds	r6, #1
 800a990:	1064      	asrs	r4, r4, #1
 800a992:	3508      	adds	r5, #8
 800a994:	e762      	b.n	800a85c <_dtoa_r+0x3a4>
 800a996:	2602      	movs	r6, #2
 800a998:	e765      	b.n	800a866 <_dtoa_r+0x3ae>
 800a99a:	46b8      	mov	r8, r7
 800a99c:	9c08      	ldr	r4, [sp, #32]
 800a99e:	e784      	b.n	800a8aa <_dtoa_r+0x3f2>
 800a9a0:	4b27      	ldr	r3, [pc, #156]	@ (800aa40 <_dtoa_r+0x588>)
 800a9a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9ac:	4454      	add	r4, sl
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	d054      	beq.n	800aa5c <_dtoa_r+0x5a4>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	4928      	ldr	r1, [pc, #160]	@ (800aa58 <_dtoa_r+0x5a0>)
 800a9b6:	f7f5 feb9 	bl	800072c <__aeabi_ddiv>
 800a9ba:	4633      	mov	r3, r6
 800a9bc:	462a      	mov	r2, r5
 800a9be:	f7f5 fbd3 	bl	8000168 <__aeabi_dsub>
 800a9c2:	4656      	mov	r6, sl
 800a9c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9cc:	f7f6 f834 	bl	8000a38 <__aeabi_d2iz>
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	f7f5 fd17 	bl	8000404 <__aeabi_i2d>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9de:	f7f5 fbc3 	bl	8000168 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	3530      	adds	r5, #48	@ 0x30
 800a9e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a9ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9f0:	f806 5b01 	strb.w	r5, [r6], #1
 800a9f4:	f7f5 ffe2 	bl	80009bc <__aeabi_dcmplt>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d172      	bne.n	800aae2 <_dtoa_r+0x62a>
 800a9fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa00:	2000      	movs	r0, #0
 800aa02:	4911      	ldr	r1, [pc, #68]	@ (800aa48 <_dtoa_r+0x590>)
 800aa04:	f7f5 fbb0 	bl	8000168 <__aeabi_dsub>
 800aa08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa0c:	f7f5 ffd6 	bl	80009bc <__aeabi_dcmplt>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f040 80b4 	bne.w	800ab7e <_dtoa_r+0x6c6>
 800aa16:	42a6      	cmp	r6, r4
 800aa18:	f43f af70 	beq.w	800a8fc <_dtoa_r+0x444>
 800aa1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa20:	2200      	movs	r2, #0
 800aa22:	4b0a      	ldr	r3, [pc, #40]	@ (800aa4c <_dtoa_r+0x594>)
 800aa24:	f7f5 fd58 	bl	80004d8 <__aeabi_dmul>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa32:	4b06      	ldr	r3, [pc, #24]	@ (800aa4c <_dtoa_r+0x594>)
 800aa34:	f7f5 fd50 	bl	80004d8 <__aeabi_dmul>
 800aa38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa3c:	e7c4      	b.n	800a9c8 <_dtoa_r+0x510>
 800aa3e:	bf00      	nop
 800aa40:	0800f758 	.word	0x0800f758
 800aa44:	0800f730 	.word	0x0800f730
 800aa48:	3ff00000 	.word	0x3ff00000
 800aa4c:	40240000 	.word	0x40240000
 800aa50:	401c0000 	.word	0x401c0000
 800aa54:	40140000 	.word	0x40140000
 800aa58:	3fe00000 	.word	0x3fe00000
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f7f5 fd3a 	bl	80004d8 <__aeabi_dmul>
 800aa64:	4656      	mov	r6, sl
 800aa66:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa6a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aa6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa70:	f7f5 ffe2 	bl	8000a38 <__aeabi_d2iz>
 800aa74:	4605      	mov	r5, r0
 800aa76:	f7f5 fcc5 	bl	8000404 <__aeabi_i2d>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa82:	f7f5 fb71 	bl	8000168 <__aeabi_dsub>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	3530      	adds	r5, #48	@ 0x30
 800aa8c:	f806 5b01 	strb.w	r5, [r6], #1
 800aa90:	42a6      	cmp	r6, r4
 800aa92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa96:	f04f 0200 	mov.w	r2, #0
 800aa9a:	d124      	bne.n	800aae6 <_dtoa_r+0x62e>
 800aa9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aaa0:	4bae      	ldr	r3, [pc, #696]	@ (800ad5c <_dtoa_r+0x8a4>)
 800aaa2:	f7f5 fb63 	bl	800016c <__adddf3>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaae:	f7f5 ffa3 	bl	80009f8 <__aeabi_dcmpgt>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d163      	bne.n	800ab7e <_dtoa_r+0x6c6>
 800aab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aaba:	2000      	movs	r0, #0
 800aabc:	49a7      	ldr	r1, [pc, #668]	@ (800ad5c <_dtoa_r+0x8a4>)
 800aabe:	f7f5 fb53 	bl	8000168 <__aeabi_dsub>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaca:	f7f5 ff77 	bl	80009bc <__aeabi_dcmplt>
 800aace:	2800      	cmp	r0, #0
 800aad0:	f43f af14 	beq.w	800a8fc <_dtoa_r+0x444>
 800aad4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aad6:	1e73      	subs	r3, r6, #1
 800aad8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aada:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aade:	2b30      	cmp	r3, #48	@ 0x30
 800aae0:	d0f8      	beq.n	800aad4 <_dtoa_r+0x61c>
 800aae2:	4647      	mov	r7, r8
 800aae4:	e03b      	b.n	800ab5e <_dtoa_r+0x6a6>
 800aae6:	4b9e      	ldr	r3, [pc, #632]	@ (800ad60 <_dtoa_r+0x8a8>)
 800aae8:	f7f5 fcf6 	bl	80004d8 <__aeabi_dmul>
 800aaec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aaf0:	e7bc      	b.n	800aa6c <_dtoa_r+0x5b4>
 800aaf2:	4656      	mov	r6, sl
 800aaf4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800aaf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aafc:	4620      	mov	r0, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	f7f5 fe14 	bl	800072c <__aeabi_ddiv>
 800ab04:	f7f5 ff98 	bl	8000a38 <__aeabi_d2iz>
 800ab08:	4680      	mov	r8, r0
 800ab0a:	f7f5 fc7b 	bl	8000404 <__aeabi_i2d>
 800ab0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab12:	f7f5 fce1 	bl	80004d8 <__aeabi_dmul>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	f7f5 fb23 	bl	8000168 <__aeabi_dsub>
 800ab22:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab26:	9d08      	ldr	r5, [sp, #32]
 800ab28:	f806 4b01 	strb.w	r4, [r6], #1
 800ab2c:	eba6 040a 	sub.w	r4, r6, sl
 800ab30:	42a5      	cmp	r5, r4
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	d133      	bne.n	800aba0 <_dtoa_r+0x6e8>
 800ab38:	f7f5 fb18 	bl	800016c <__adddf3>
 800ab3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab40:	4604      	mov	r4, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	f7f5 ff58 	bl	80009f8 <__aeabi_dcmpgt>
 800ab48:	b9c0      	cbnz	r0, 800ab7c <_dtoa_r+0x6c4>
 800ab4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	4629      	mov	r1, r5
 800ab52:	f7f5 ff29 	bl	80009a8 <__aeabi_dcmpeq>
 800ab56:	b110      	cbz	r0, 800ab5e <_dtoa_r+0x6a6>
 800ab58:	f018 0f01 	tst.w	r8, #1
 800ab5c:	d10e      	bne.n	800ab7c <_dtoa_r+0x6c4>
 800ab5e:	4648      	mov	r0, r9
 800ab60:	9903      	ldr	r1, [sp, #12]
 800ab62:	f000 fbbb 	bl	800b2dc <_Bfree>
 800ab66:	2300      	movs	r3, #0
 800ab68:	7033      	strb	r3, [r6, #0]
 800ab6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ab6c:	3701      	adds	r7, #1
 800ab6e:	601f      	str	r7, [r3, #0]
 800ab70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 824b 	beq.w	800b00e <_dtoa_r+0xb56>
 800ab78:	601e      	str	r6, [r3, #0]
 800ab7a:	e248      	b.n	800b00e <_dtoa_r+0xb56>
 800ab7c:	46b8      	mov	r8, r7
 800ab7e:	4633      	mov	r3, r6
 800ab80:	461e      	mov	r6, r3
 800ab82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab86:	2a39      	cmp	r2, #57	@ 0x39
 800ab88:	d106      	bne.n	800ab98 <_dtoa_r+0x6e0>
 800ab8a:	459a      	cmp	sl, r3
 800ab8c:	d1f8      	bne.n	800ab80 <_dtoa_r+0x6c8>
 800ab8e:	2230      	movs	r2, #48	@ 0x30
 800ab90:	f108 0801 	add.w	r8, r8, #1
 800ab94:	f88a 2000 	strb.w	r2, [sl]
 800ab98:	781a      	ldrb	r2, [r3, #0]
 800ab9a:	3201      	adds	r2, #1
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	e7a0      	b.n	800aae2 <_dtoa_r+0x62a>
 800aba0:	2200      	movs	r2, #0
 800aba2:	4b6f      	ldr	r3, [pc, #444]	@ (800ad60 <_dtoa_r+0x8a8>)
 800aba4:	f7f5 fc98 	bl	80004d8 <__aeabi_dmul>
 800aba8:	2200      	movs	r2, #0
 800abaa:	2300      	movs	r3, #0
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	f7f5 fefa 	bl	80009a8 <__aeabi_dcmpeq>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d09f      	beq.n	800aaf8 <_dtoa_r+0x640>
 800abb8:	e7d1      	b.n	800ab5e <_dtoa_r+0x6a6>
 800abba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	f000 80ea 	beq.w	800ad96 <_dtoa_r+0x8de>
 800abc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800abc4:	2a01      	cmp	r2, #1
 800abc6:	f300 80cd 	bgt.w	800ad64 <_dtoa_r+0x8ac>
 800abca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800abcc:	2a00      	cmp	r2, #0
 800abce:	f000 80c1 	beq.w	800ad54 <_dtoa_r+0x89c>
 800abd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800abd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800abd8:	9e04      	ldr	r6, [sp, #16]
 800abda:	9a04      	ldr	r2, [sp, #16]
 800abdc:	2101      	movs	r1, #1
 800abde:	441a      	add	r2, r3
 800abe0:	9204      	str	r2, [sp, #16]
 800abe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abe4:	4648      	mov	r0, r9
 800abe6:	441a      	add	r2, r3
 800abe8:	9209      	str	r2, [sp, #36]	@ 0x24
 800abea:	f000 fc75 	bl	800b4d8 <__i2b>
 800abee:	4605      	mov	r5, r0
 800abf0:	b166      	cbz	r6, 800ac0c <_dtoa_r+0x754>
 800abf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	dd09      	ble.n	800ac0c <_dtoa_r+0x754>
 800abf8:	42b3      	cmp	r3, r6
 800abfa:	bfa8      	it	ge
 800abfc:	4633      	movge	r3, r6
 800abfe:	9a04      	ldr	r2, [sp, #16]
 800ac00:	1af6      	subs	r6, r6, r3
 800ac02:	1ad2      	subs	r2, r2, r3
 800ac04:	9204      	str	r2, [sp, #16]
 800ac06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac0e:	b30b      	cbz	r3, 800ac54 <_dtoa_r+0x79c>
 800ac10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 80c6 	beq.w	800ada4 <_dtoa_r+0x8ec>
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	f000 80c0 	beq.w	800ad9e <_dtoa_r+0x8e6>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4622      	mov	r2, r4
 800ac22:	4648      	mov	r0, r9
 800ac24:	f000 fd10 	bl	800b648 <__pow5mult>
 800ac28:	9a03      	ldr	r2, [sp, #12]
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	4648      	mov	r0, r9
 800ac30:	f000 fc68 	bl	800b504 <__multiply>
 800ac34:	9903      	ldr	r1, [sp, #12]
 800ac36:	4680      	mov	r8, r0
 800ac38:	4648      	mov	r0, r9
 800ac3a:	f000 fb4f 	bl	800b2dc <_Bfree>
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac40:	1b1b      	subs	r3, r3, r4
 800ac42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac44:	f000 80b1 	beq.w	800adaa <_dtoa_r+0x8f2>
 800ac48:	4641      	mov	r1, r8
 800ac4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac4c:	4648      	mov	r0, r9
 800ac4e:	f000 fcfb 	bl	800b648 <__pow5mult>
 800ac52:	9003      	str	r0, [sp, #12]
 800ac54:	2101      	movs	r1, #1
 800ac56:	4648      	mov	r0, r9
 800ac58:	f000 fc3e 	bl	800b4d8 <__i2b>
 800ac5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac5e:	4604      	mov	r4, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 81d8 	beq.w	800b016 <_dtoa_r+0xb5e>
 800ac66:	461a      	mov	r2, r3
 800ac68:	4601      	mov	r1, r0
 800ac6a:	4648      	mov	r0, r9
 800ac6c:	f000 fcec 	bl	800b648 <__pow5mult>
 800ac70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac72:	4604      	mov	r4, r0
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	f300 809f 	bgt.w	800adb8 <_dtoa_r+0x900>
 800ac7a:	9b06      	ldr	r3, [sp, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f040 8097 	bne.w	800adb0 <_dtoa_r+0x8f8>
 800ac82:	9b07      	ldr	r3, [sp, #28]
 800ac84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 8093 	bne.w	800adb4 <_dtoa_r+0x8fc>
 800ac8e:	9b07      	ldr	r3, [sp, #28]
 800ac90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac94:	0d1b      	lsrs	r3, r3, #20
 800ac96:	051b      	lsls	r3, r3, #20
 800ac98:	b133      	cbz	r3, 800aca8 <_dtoa_r+0x7f0>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca2:	3301      	adds	r3, #1
 800aca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca6:	2301      	movs	r3, #1
 800aca8:	930a      	str	r3, [sp, #40]	@ 0x28
 800acaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 81b8 	beq.w	800b022 <_dtoa_r+0xb6a>
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acb8:	6918      	ldr	r0, [r3, #16]
 800acba:	f000 fbc1 	bl	800b440 <__hi0bits>
 800acbe:	f1c0 0020 	rsb	r0, r0, #32
 800acc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc4:	4418      	add	r0, r3
 800acc6:	f010 001f 	ands.w	r0, r0, #31
 800acca:	f000 8082 	beq.w	800add2 <_dtoa_r+0x91a>
 800acce:	f1c0 0320 	rsb	r3, r0, #32
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	dd73      	ble.n	800adbe <_dtoa_r+0x906>
 800acd6:	9b04      	ldr	r3, [sp, #16]
 800acd8:	f1c0 001c 	rsb	r0, r0, #28
 800acdc:	4403      	add	r3, r0
 800acde:	9304      	str	r3, [sp, #16]
 800ace0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace2:	4406      	add	r6, r0
 800ace4:	4403      	add	r3, r0
 800ace6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace8:	9b04      	ldr	r3, [sp, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	dd05      	ble.n	800acfa <_dtoa_r+0x842>
 800acee:	461a      	mov	r2, r3
 800acf0:	4648      	mov	r0, r9
 800acf2:	9903      	ldr	r1, [sp, #12]
 800acf4:	f000 fd02 	bl	800b6fc <__lshift>
 800acf8:	9003      	str	r0, [sp, #12]
 800acfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dd05      	ble.n	800ad0c <_dtoa_r+0x854>
 800ad00:	4621      	mov	r1, r4
 800ad02:	461a      	mov	r2, r3
 800ad04:	4648      	mov	r0, r9
 800ad06:	f000 fcf9 	bl	800b6fc <__lshift>
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d061      	beq.n	800add6 <_dtoa_r+0x91e>
 800ad12:	4621      	mov	r1, r4
 800ad14:	9803      	ldr	r0, [sp, #12]
 800ad16:	f000 fd5d 	bl	800b7d4 <__mcmp>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	da5b      	bge.n	800add6 <_dtoa_r+0x91e>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4648      	mov	r0, r9
 800ad24:	9903      	ldr	r1, [sp, #12]
 800ad26:	f000 fafb 	bl	800b320 <__multadd>
 800ad2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad2c:	f107 38ff 	add.w	r8, r7, #4294967295
 800ad30:	9003      	str	r0, [sp, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 8177 	beq.w	800b026 <_dtoa_r+0xb6e>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4648      	mov	r0, r9
 800ad40:	f000 faee 	bl	800b320 <__multadd>
 800ad44:	f1bb 0f00 	cmp.w	fp, #0
 800ad48:	4605      	mov	r5, r0
 800ad4a:	dc6f      	bgt.n	800ae2c <_dtoa_r+0x974>
 800ad4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	dc49      	bgt.n	800ade6 <_dtoa_r+0x92e>
 800ad52:	e06b      	b.n	800ae2c <_dtoa_r+0x974>
 800ad54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad5a:	e73c      	b.n	800abd6 <_dtoa_r+0x71e>
 800ad5c:	3fe00000 	.word	0x3fe00000
 800ad60:	40240000 	.word	0x40240000
 800ad64:	9b08      	ldr	r3, [sp, #32]
 800ad66:	1e5c      	subs	r4, r3, #1
 800ad68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	db09      	blt.n	800ad82 <_dtoa_r+0x8ca>
 800ad6e:	1b1c      	subs	r4, r3, r4
 800ad70:	9b08      	ldr	r3, [sp, #32]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f6bf af30 	bge.w	800abd8 <_dtoa_r+0x720>
 800ad78:	9b04      	ldr	r3, [sp, #16]
 800ad7a:	9a08      	ldr	r2, [sp, #32]
 800ad7c:	1a9e      	subs	r6, r3, r2
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e72b      	b.n	800abda <_dtoa_r+0x722>
 800ad82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad86:	1ae3      	subs	r3, r4, r3
 800ad88:	441a      	add	r2, r3
 800ad8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad8c:	9e04      	ldr	r6, [sp, #16]
 800ad8e:	2400      	movs	r4, #0
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad94:	e721      	b.n	800abda <_dtoa_r+0x722>
 800ad96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad98:	9e04      	ldr	r6, [sp, #16]
 800ad9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad9c:	e728      	b.n	800abf0 <_dtoa_r+0x738>
 800ad9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ada2:	e751      	b.n	800ac48 <_dtoa_r+0x790>
 800ada4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ada6:	9903      	ldr	r1, [sp, #12]
 800ada8:	e750      	b.n	800ac4c <_dtoa_r+0x794>
 800adaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800adae:	e751      	b.n	800ac54 <_dtoa_r+0x79c>
 800adb0:	2300      	movs	r3, #0
 800adb2:	e779      	b.n	800aca8 <_dtoa_r+0x7f0>
 800adb4:	9b06      	ldr	r3, [sp, #24]
 800adb6:	e777      	b.n	800aca8 <_dtoa_r+0x7f0>
 800adb8:	2300      	movs	r3, #0
 800adba:	930a      	str	r3, [sp, #40]	@ 0x28
 800adbc:	e779      	b.n	800acb2 <_dtoa_r+0x7fa>
 800adbe:	d093      	beq.n	800ace8 <_dtoa_r+0x830>
 800adc0:	9a04      	ldr	r2, [sp, #16]
 800adc2:	331c      	adds	r3, #28
 800adc4:	441a      	add	r2, r3
 800adc6:	9204      	str	r2, [sp, #16]
 800adc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adca:	441e      	add	r6, r3
 800adcc:	441a      	add	r2, r3
 800adce:	9209      	str	r2, [sp, #36]	@ 0x24
 800add0:	e78a      	b.n	800ace8 <_dtoa_r+0x830>
 800add2:	4603      	mov	r3, r0
 800add4:	e7f4      	b.n	800adc0 <_dtoa_r+0x908>
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	46b8      	mov	r8, r7
 800adda:	2b00      	cmp	r3, #0
 800addc:	dc20      	bgt.n	800ae20 <_dtoa_r+0x968>
 800adde:	469b      	mov	fp, r3
 800ade0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	dd1e      	ble.n	800ae24 <_dtoa_r+0x96c>
 800ade6:	f1bb 0f00 	cmp.w	fp, #0
 800adea:	f47f adb1 	bne.w	800a950 <_dtoa_r+0x498>
 800adee:	4621      	mov	r1, r4
 800adf0:	465b      	mov	r3, fp
 800adf2:	2205      	movs	r2, #5
 800adf4:	4648      	mov	r0, r9
 800adf6:	f000 fa93 	bl	800b320 <__multadd>
 800adfa:	4601      	mov	r1, r0
 800adfc:	4604      	mov	r4, r0
 800adfe:	9803      	ldr	r0, [sp, #12]
 800ae00:	f000 fce8 	bl	800b7d4 <__mcmp>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	f77f ada3 	ble.w	800a950 <_dtoa_r+0x498>
 800ae0a:	4656      	mov	r6, sl
 800ae0c:	2331      	movs	r3, #49	@ 0x31
 800ae0e:	f108 0801 	add.w	r8, r8, #1
 800ae12:	f806 3b01 	strb.w	r3, [r6], #1
 800ae16:	e59f      	b.n	800a958 <_dtoa_r+0x4a0>
 800ae18:	46b8      	mov	r8, r7
 800ae1a:	9c08      	ldr	r4, [sp, #32]
 800ae1c:	4625      	mov	r5, r4
 800ae1e:	e7f4      	b.n	800ae0a <_dtoa_r+0x952>
 800ae20:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ae24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 8101 	beq.w	800b02e <_dtoa_r+0xb76>
 800ae2c:	2e00      	cmp	r6, #0
 800ae2e:	dd05      	ble.n	800ae3c <_dtoa_r+0x984>
 800ae30:	4629      	mov	r1, r5
 800ae32:	4632      	mov	r2, r6
 800ae34:	4648      	mov	r0, r9
 800ae36:	f000 fc61 	bl	800b6fc <__lshift>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d05c      	beq.n	800aefc <_dtoa_r+0xa44>
 800ae42:	4648      	mov	r0, r9
 800ae44:	6869      	ldr	r1, [r5, #4]
 800ae46:	f000 fa09 	bl	800b25c <_Balloc>
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	b928      	cbnz	r0, 800ae5a <_dtoa_r+0x9a2>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae54:	4b80      	ldr	r3, [pc, #512]	@ (800b058 <_dtoa_r+0xba0>)
 800ae56:	f7ff bb43 	b.w	800a4e0 <_dtoa_r+0x28>
 800ae5a:	692a      	ldr	r2, [r5, #16]
 800ae5c:	f105 010c 	add.w	r1, r5, #12
 800ae60:	3202      	adds	r2, #2
 800ae62:	0092      	lsls	r2, r2, #2
 800ae64:	300c      	adds	r0, #12
 800ae66:	f7ff fa8c 	bl	800a382 <memcpy>
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4648      	mov	r0, r9
 800ae70:	f000 fc44 	bl	800b6fc <__lshift>
 800ae74:	462f      	mov	r7, r5
 800ae76:	4605      	mov	r5, r0
 800ae78:	f10a 0301 	add.w	r3, sl, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	eb0a 030b 	add.w	r3, sl, fp
 800ae82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae84:	9b06      	ldr	r3, [sp, #24]
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae8c:	9b04      	ldr	r3, [sp, #16]
 800ae8e:	4621      	mov	r1, r4
 800ae90:	9803      	ldr	r0, [sp, #12]
 800ae92:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae96:	f7ff fa87 	bl	800a3a8 <quorem>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	3330      	adds	r3, #48	@ 0x30
 800aea0:	9006      	str	r0, [sp, #24]
 800aea2:	9803      	ldr	r0, [sp, #12]
 800aea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aea6:	f000 fc95 	bl	800b7d4 <__mcmp>
 800aeaa:	462a      	mov	r2, r5
 800aeac:	9008      	str	r0, [sp, #32]
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f000 fcab 	bl	800b80c <__mdiff>
 800aeb6:	68c2      	ldr	r2, [r0, #12]
 800aeb8:	4606      	mov	r6, r0
 800aeba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aebc:	bb02      	cbnz	r2, 800af00 <_dtoa_r+0xa48>
 800aebe:	4601      	mov	r1, r0
 800aec0:	9803      	ldr	r0, [sp, #12]
 800aec2:	f000 fc87 	bl	800b7d4 <__mcmp>
 800aec6:	4602      	mov	r2, r0
 800aec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeca:	4631      	mov	r1, r6
 800aecc:	4648      	mov	r0, r9
 800aece:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800aed2:	f000 fa03 	bl	800b2dc <_Bfree>
 800aed6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aeda:	9e04      	ldr	r6, [sp, #16]
 800aedc:	ea42 0103 	orr.w	r1, r2, r3
 800aee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee2:	4319      	orrs	r1, r3
 800aee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aee6:	d10d      	bne.n	800af04 <_dtoa_r+0xa4c>
 800aee8:	2b39      	cmp	r3, #57	@ 0x39
 800aeea:	d027      	beq.n	800af3c <_dtoa_r+0xa84>
 800aeec:	9a08      	ldr	r2, [sp, #32]
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	dd01      	ble.n	800aef6 <_dtoa_r+0xa3e>
 800aef2:	9b06      	ldr	r3, [sp, #24]
 800aef4:	3331      	adds	r3, #49	@ 0x31
 800aef6:	f88b 3000 	strb.w	r3, [fp]
 800aefa:	e52e      	b.n	800a95a <_dtoa_r+0x4a2>
 800aefc:	4628      	mov	r0, r5
 800aefe:	e7b9      	b.n	800ae74 <_dtoa_r+0x9bc>
 800af00:	2201      	movs	r2, #1
 800af02:	e7e2      	b.n	800aeca <_dtoa_r+0xa12>
 800af04:	9908      	ldr	r1, [sp, #32]
 800af06:	2900      	cmp	r1, #0
 800af08:	db04      	blt.n	800af14 <_dtoa_r+0xa5c>
 800af0a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800af0c:	4301      	orrs	r1, r0
 800af0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af10:	4301      	orrs	r1, r0
 800af12:	d120      	bne.n	800af56 <_dtoa_r+0xa9e>
 800af14:	2a00      	cmp	r2, #0
 800af16:	ddee      	ble.n	800aef6 <_dtoa_r+0xa3e>
 800af18:	2201      	movs	r2, #1
 800af1a:	9903      	ldr	r1, [sp, #12]
 800af1c:	4648      	mov	r0, r9
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f000 fbec 	bl	800b6fc <__lshift>
 800af24:	4621      	mov	r1, r4
 800af26:	9003      	str	r0, [sp, #12]
 800af28:	f000 fc54 	bl	800b7d4 <__mcmp>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	9b04      	ldr	r3, [sp, #16]
 800af30:	dc02      	bgt.n	800af38 <_dtoa_r+0xa80>
 800af32:	d1e0      	bne.n	800aef6 <_dtoa_r+0xa3e>
 800af34:	07da      	lsls	r2, r3, #31
 800af36:	d5de      	bpl.n	800aef6 <_dtoa_r+0xa3e>
 800af38:	2b39      	cmp	r3, #57	@ 0x39
 800af3a:	d1da      	bne.n	800aef2 <_dtoa_r+0xa3a>
 800af3c:	2339      	movs	r3, #57	@ 0x39
 800af3e:	f88b 3000 	strb.w	r3, [fp]
 800af42:	4633      	mov	r3, r6
 800af44:	461e      	mov	r6, r3
 800af46:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	2a39      	cmp	r2, #57	@ 0x39
 800af4e:	d04e      	beq.n	800afee <_dtoa_r+0xb36>
 800af50:	3201      	adds	r2, #1
 800af52:	701a      	strb	r2, [r3, #0]
 800af54:	e501      	b.n	800a95a <_dtoa_r+0x4a2>
 800af56:	2a00      	cmp	r2, #0
 800af58:	dd03      	ble.n	800af62 <_dtoa_r+0xaaa>
 800af5a:	2b39      	cmp	r3, #57	@ 0x39
 800af5c:	d0ee      	beq.n	800af3c <_dtoa_r+0xa84>
 800af5e:	3301      	adds	r3, #1
 800af60:	e7c9      	b.n	800aef6 <_dtoa_r+0xa3e>
 800af62:	9a04      	ldr	r2, [sp, #16]
 800af64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af66:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af6a:	428a      	cmp	r2, r1
 800af6c:	d028      	beq.n	800afc0 <_dtoa_r+0xb08>
 800af6e:	2300      	movs	r3, #0
 800af70:	220a      	movs	r2, #10
 800af72:	9903      	ldr	r1, [sp, #12]
 800af74:	4648      	mov	r0, r9
 800af76:	f000 f9d3 	bl	800b320 <__multadd>
 800af7a:	42af      	cmp	r7, r5
 800af7c:	9003      	str	r0, [sp, #12]
 800af7e:	f04f 0300 	mov.w	r3, #0
 800af82:	f04f 020a 	mov.w	r2, #10
 800af86:	4639      	mov	r1, r7
 800af88:	4648      	mov	r0, r9
 800af8a:	d107      	bne.n	800af9c <_dtoa_r+0xae4>
 800af8c:	f000 f9c8 	bl	800b320 <__multadd>
 800af90:	4607      	mov	r7, r0
 800af92:	4605      	mov	r5, r0
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	3301      	adds	r3, #1
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	e777      	b.n	800ae8c <_dtoa_r+0x9d4>
 800af9c:	f000 f9c0 	bl	800b320 <__multadd>
 800afa0:	4629      	mov	r1, r5
 800afa2:	4607      	mov	r7, r0
 800afa4:	2300      	movs	r3, #0
 800afa6:	220a      	movs	r2, #10
 800afa8:	4648      	mov	r0, r9
 800afaa:	f000 f9b9 	bl	800b320 <__multadd>
 800afae:	4605      	mov	r5, r0
 800afb0:	e7f0      	b.n	800af94 <_dtoa_r+0xadc>
 800afb2:	f1bb 0f00 	cmp.w	fp, #0
 800afb6:	bfcc      	ite	gt
 800afb8:	465e      	movgt	r6, fp
 800afba:	2601      	movle	r6, #1
 800afbc:	2700      	movs	r7, #0
 800afbe:	4456      	add	r6, sl
 800afc0:	2201      	movs	r2, #1
 800afc2:	9903      	ldr	r1, [sp, #12]
 800afc4:	4648      	mov	r0, r9
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	f000 fb98 	bl	800b6fc <__lshift>
 800afcc:	4621      	mov	r1, r4
 800afce:	9003      	str	r0, [sp, #12]
 800afd0:	f000 fc00 	bl	800b7d4 <__mcmp>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	dcb4      	bgt.n	800af42 <_dtoa_r+0xa8a>
 800afd8:	d102      	bne.n	800afe0 <_dtoa_r+0xb28>
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	07db      	lsls	r3, r3, #31
 800afde:	d4b0      	bmi.n	800af42 <_dtoa_r+0xa8a>
 800afe0:	4633      	mov	r3, r6
 800afe2:	461e      	mov	r6, r3
 800afe4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afe8:	2a30      	cmp	r2, #48	@ 0x30
 800afea:	d0fa      	beq.n	800afe2 <_dtoa_r+0xb2a>
 800afec:	e4b5      	b.n	800a95a <_dtoa_r+0x4a2>
 800afee:	459a      	cmp	sl, r3
 800aff0:	d1a8      	bne.n	800af44 <_dtoa_r+0xa8c>
 800aff2:	2331      	movs	r3, #49	@ 0x31
 800aff4:	f108 0801 	add.w	r8, r8, #1
 800aff8:	f88a 3000 	strb.w	r3, [sl]
 800affc:	e4ad      	b.n	800a95a <_dtoa_r+0x4a2>
 800affe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b000:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b05c <_dtoa_r+0xba4>
 800b004:	b11b      	cbz	r3, 800b00e <_dtoa_r+0xb56>
 800b006:	f10a 0308 	add.w	r3, sl, #8
 800b00a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	4650      	mov	r0, sl
 800b010:	b017      	add	sp, #92	@ 0x5c
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b018:	2b01      	cmp	r3, #1
 800b01a:	f77f ae2e 	ble.w	800ac7a <_dtoa_r+0x7c2>
 800b01e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b020:	930a      	str	r3, [sp, #40]	@ 0x28
 800b022:	2001      	movs	r0, #1
 800b024:	e64d      	b.n	800acc2 <_dtoa_r+0x80a>
 800b026:	f1bb 0f00 	cmp.w	fp, #0
 800b02a:	f77f aed9 	ble.w	800ade0 <_dtoa_r+0x928>
 800b02e:	4656      	mov	r6, sl
 800b030:	4621      	mov	r1, r4
 800b032:	9803      	ldr	r0, [sp, #12]
 800b034:	f7ff f9b8 	bl	800a3a8 <quorem>
 800b038:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b03c:	f806 3b01 	strb.w	r3, [r6], #1
 800b040:	eba6 020a 	sub.w	r2, r6, sl
 800b044:	4593      	cmp	fp, r2
 800b046:	ddb4      	ble.n	800afb2 <_dtoa_r+0xafa>
 800b048:	2300      	movs	r3, #0
 800b04a:	220a      	movs	r2, #10
 800b04c:	4648      	mov	r0, r9
 800b04e:	9903      	ldr	r1, [sp, #12]
 800b050:	f000 f966 	bl	800b320 <__multadd>
 800b054:	9003      	str	r0, [sp, #12]
 800b056:	e7eb      	b.n	800b030 <_dtoa_r+0xb78>
 800b058:	0800f5ff 	.word	0x0800f5ff
 800b05c:	0800f583 	.word	0x0800f583

0800b060 <_free_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4605      	mov	r5, r0
 800b064:	2900      	cmp	r1, #0
 800b066:	d040      	beq.n	800b0ea <_free_r+0x8a>
 800b068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b06c:	1f0c      	subs	r4, r1, #4
 800b06e:	2b00      	cmp	r3, #0
 800b070:	bfb8      	it	lt
 800b072:	18e4      	addlt	r4, r4, r3
 800b074:	f000 f8e6 	bl	800b244 <__malloc_lock>
 800b078:	4a1c      	ldr	r2, [pc, #112]	@ (800b0ec <_free_r+0x8c>)
 800b07a:	6813      	ldr	r3, [r2, #0]
 800b07c:	b933      	cbnz	r3, 800b08c <_free_r+0x2c>
 800b07e:	6063      	str	r3, [r4, #4]
 800b080:	6014      	str	r4, [r2, #0]
 800b082:	4628      	mov	r0, r5
 800b084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b088:	f000 b8e2 	b.w	800b250 <__malloc_unlock>
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	d908      	bls.n	800b0a2 <_free_r+0x42>
 800b090:	6820      	ldr	r0, [r4, #0]
 800b092:	1821      	adds	r1, r4, r0
 800b094:	428b      	cmp	r3, r1
 800b096:	bf01      	itttt	eq
 800b098:	6819      	ldreq	r1, [r3, #0]
 800b09a:	685b      	ldreq	r3, [r3, #4]
 800b09c:	1809      	addeq	r1, r1, r0
 800b09e:	6021      	streq	r1, [r4, #0]
 800b0a0:	e7ed      	b.n	800b07e <_free_r+0x1e>
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	b10b      	cbz	r3, 800b0ac <_free_r+0x4c>
 800b0a8:	42a3      	cmp	r3, r4
 800b0aa:	d9fa      	bls.n	800b0a2 <_free_r+0x42>
 800b0ac:	6811      	ldr	r1, [r2, #0]
 800b0ae:	1850      	adds	r0, r2, r1
 800b0b0:	42a0      	cmp	r0, r4
 800b0b2:	d10b      	bne.n	800b0cc <_free_r+0x6c>
 800b0b4:	6820      	ldr	r0, [r4, #0]
 800b0b6:	4401      	add	r1, r0
 800b0b8:	1850      	adds	r0, r2, r1
 800b0ba:	4283      	cmp	r3, r0
 800b0bc:	6011      	str	r1, [r2, #0]
 800b0be:	d1e0      	bne.n	800b082 <_free_r+0x22>
 800b0c0:	6818      	ldr	r0, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	4408      	add	r0, r1
 800b0c6:	6010      	str	r0, [r2, #0]
 800b0c8:	6053      	str	r3, [r2, #4]
 800b0ca:	e7da      	b.n	800b082 <_free_r+0x22>
 800b0cc:	d902      	bls.n	800b0d4 <_free_r+0x74>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	e7d6      	b.n	800b082 <_free_r+0x22>
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	1821      	adds	r1, r4, r0
 800b0d8:	428b      	cmp	r3, r1
 800b0da:	bf01      	itttt	eq
 800b0dc:	6819      	ldreq	r1, [r3, #0]
 800b0de:	685b      	ldreq	r3, [r3, #4]
 800b0e0:	1809      	addeq	r1, r1, r0
 800b0e2:	6021      	streq	r1, [r4, #0]
 800b0e4:	6063      	str	r3, [r4, #4]
 800b0e6:	6054      	str	r4, [r2, #4]
 800b0e8:	e7cb      	b.n	800b082 <_free_r+0x22>
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	20002e60 	.word	0x20002e60

0800b0f0 <malloc>:
 800b0f0:	4b02      	ldr	r3, [pc, #8]	@ (800b0fc <malloc+0xc>)
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	6818      	ldr	r0, [r3, #0]
 800b0f6:	f000 b825 	b.w	800b144 <_malloc_r>
 800b0fa:	bf00      	nop
 800b0fc:	20000030 	.word	0x20000030

0800b100 <sbrk_aligned>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	4e0f      	ldr	r6, [pc, #60]	@ (800b140 <sbrk_aligned+0x40>)
 800b104:	460c      	mov	r4, r1
 800b106:	6831      	ldr	r1, [r6, #0]
 800b108:	4605      	mov	r5, r0
 800b10a:	b911      	cbnz	r1, 800b112 <sbrk_aligned+0x12>
 800b10c:	f001 ffb2 	bl	800d074 <_sbrk_r>
 800b110:	6030      	str	r0, [r6, #0]
 800b112:	4621      	mov	r1, r4
 800b114:	4628      	mov	r0, r5
 800b116:	f001 ffad 	bl	800d074 <_sbrk_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	d103      	bne.n	800b126 <sbrk_aligned+0x26>
 800b11e:	f04f 34ff 	mov.w	r4, #4294967295
 800b122:	4620      	mov	r0, r4
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	1cc4      	adds	r4, r0, #3
 800b128:	f024 0403 	bic.w	r4, r4, #3
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	d0f8      	beq.n	800b122 <sbrk_aligned+0x22>
 800b130:	1a21      	subs	r1, r4, r0
 800b132:	4628      	mov	r0, r5
 800b134:	f001 ff9e 	bl	800d074 <_sbrk_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	d1f2      	bne.n	800b122 <sbrk_aligned+0x22>
 800b13c:	e7ef      	b.n	800b11e <sbrk_aligned+0x1e>
 800b13e:	bf00      	nop
 800b140:	20002e5c 	.word	0x20002e5c

0800b144 <_malloc_r>:
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b148:	1ccd      	adds	r5, r1, #3
 800b14a:	f025 0503 	bic.w	r5, r5, #3
 800b14e:	3508      	adds	r5, #8
 800b150:	2d0c      	cmp	r5, #12
 800b152:	bf38      	it	cc
 800b154:	250c      	movcc	r5, #12
 800b156:	2d00      	cmp	r5, #0
 800b158:	4606      	mov	r6, r0
 800b15a:	db01      	blt.n	800b160 <_malloc_r+0x1c>
 800b15c:	42a9      	cmp	r1, r5
 800b15e:	d904      	bls.n	800b16a <_malloc_r+0x26>
 800b160:	230c      	movs	r3, #12
 800b162:	6033      	str	r3, [r6, #0]
 800b164:	2000      	movs	r0, #0
 800b166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b16a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b240 <_malloc_r+0xfc>
 800b16e:	f000 f869 	bl	800b244 <__malloc_lock>
 800b172:	f8d8 3000 	ldr.w	r3, [r8]
 800b176:	461c      	mov	r4, r3
 800b178:	bb44      	cbnz	r4, 800b1cc <_malloc_r+0x88>
 800b17a:	4629      	mov	r1, r5
 800b17c:	4630      	mov	r0, r6
 800b17e:	f7ff ffbf 	bl	800b100 <sbrk_aligned>
 800b182:	1c43      	adds	r3, r0, #1
 800b184:	4604      	mov	r4, r0
 800b186:	d158      	bne.n	800b23a <_malloc_r+0xf6>
 800b188:	f8d8 4000 	ldr.w	r4, [r8]
 800b18c:	4627      	mov	r7, r4
 800b18e:	2f00      	cmp	r7, #0
 800b190:	d143      	bne.n	800b21a <_malloc_r+0xd6>
 800b192:	2c00      	cmp	r4, #0
 800b194:	d04b      	beq.n	800b22e <_malloc_r+0xea>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	4639      	mov	r1, r7
 800b19a:	4630      	mov	r0, r6
 800b19c:	eb04 0903 	add.w	r9, r4, r3
 800b1a0:	f001 ff68 	bl	800d074 <_sbrk_r>
 800b1a4:	4581      	cmp	r9, r0
 800b1a6:	d142      	bne.n	800b22e <_malloc_r+0xea>
 800b1a8:	6821      	ldr	r1, [r4, #0]
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	1a6d      	subs	r5, r5, r1
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7ff ffa6 	bl	800b100 <sbrk_aligned>
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d03a      	beq.n	800b22e <_malloc_r+0xea>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	442b      	add	r3, r5
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	bb62      	cbnz	r2, 800b220 <_malloc_r+0xdc>
 800b1c6:	f8c8 7000 	str.w	r7, [r8]
 800b1ca:	e00f      	b.n	800b1ec <_malloc_r+0xa8>
 800b1cc:	6822      	ldr	r2, [r4, #0]
 800b1ce:	1b52      	subs	r2, r2, r5
 800b1d0:	d420      	bmi.n	800b214 <_malloc_r+0xd0>
 800b1d2:	2a0b      	cmp	r2, #11
 800b1d4:	d917      	bls.n	800b206 <_malloc_r+0xc2>
 800b1d6:	1961      	adds	r1, r4, r5
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	6025      	str	r5, [r4, #0]
 800b1dc:	bf18      	it	ne
 800b1de:	6059      	strne	r1, [r3, #4]
 800b1e0:	6863      	ldr	r3, [r4, #4]
 800b1e2:	bf08      	it	eq
 800b1e4:	f8c8 1000 	streq.w	r1, [r8]
 800b1e8:	5162      	str	r2, [r4, r5]
 800b1ea:	604b      	str	r3, [r1, #4]
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f000 f82f 	bl	800b250 <__malloc_unlock>
 800b1f2:	f104 000b 	add.w	r0, r4, #11
 800b1f6:	1d23      	adds	r3, r4, #4
 800b1f8:	f020 0007 	bic.w	r0, r0, #7
 800b1fc:	1ac2      	subs	r2, r0, r3
 800b1fe:	bf1c      	itt	ne
 800b200:	1a1b      	subne	r3, r3, r0
 800b202:	50a3      	strne	r3, [r4, r2]
 800b204:	e7af      	b.n	800b166 <_malloc_r+0x22>
 800b206:	6862      	ldr	r2, [r4, #4]
 800b208:	42a3      	cmp	r3, r4
 800b20a:	bf0c      	ite	eq
 800b20c:	f8c8 2000 	streq.w	r2, [r8]
 800b210:	605a      	strne	r2, [r3, #4]
 800b212:	e7eb      	b.n	800b1ec <_malloc_r+0xa8>
 800b214:	4623      	mov	r3, r4
 800b216:	6864      	ldr	r4, [r4, #4]
 800b218:	e7ae      	b.n	800b178 <_malloc_r+0x34>
 800b21a:	463c      	mov	r4, r7
 800b21c:	687f      	ldr	r7, [r7, #4]
 800b21e:	e7b6      	b.n	800b18e <_malloc_r+0x4a>
 800b220:	461a      	mov	r2, r3
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	42a3      	cmp	r3, r4
 800b226:	d1fb      	bne.n	800b220 <_malloc_r+0xdc>
 800b228:	2300      	movs	r3, #0
 800b22a:	6053      	str	r3, [r2, #4]
 800b22c:	e7de      	b.n	800b1ec <_malloc_r+0xa8>
 800b22e:	230c      	movs	r3, #12
 800b230:	4630      	mov	r0, r6
 800b232:	6033      	str	r3, [r6, #0]
 800b234:	f000 f80c 	bl	800b250 <__malloc_unlock>
 800b238:	e794      	b.n	800b164 <_malloc_r+0x20>
 800b23a:	6005      	str	r5, [r0, #0]
 800b23c:	e7d6      	b.n	800b1ec <_malloc_r+0xa8>
 800b23e:	bf00      	nop
 800b240:	20002e60 	.word	0x20002e60

0800b244 <__malloc_lock>:
 800b244:	4801      	ldr	r0, [pc, #4]	@ (800b24c <__malloc_lock+0x8>)
 800b246:	f7ff b88c 	b.w	800a362 <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	20002e58 	.word	0x20002e58

0800b250 <__malloc_unlock>:
 800b250:	4801      	ldr	r0, [pc, #4]	@ (800b258 <__malloc_unlock+0x8>)
 800b252:	f7ff b887 	b.w	800a364 <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	20002e58 	.word	0x20002e58

0800b25c <_Balloc>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	69c6      	ldr	r6, [r0, #28]
 800b260:	4604      	mov	r4, r0
 800b262:	460d      	mov	r5, r1
 800b264:	b976      	cbnz	r6, 800b284 <_Balloc+0x28>
 800b266:	2010      	movs	r0, #16
 800b268:	f7ff ff42 	bl	800b0f0 <malloc>
 800b26c:	4602      	mov	r2, r0
 800b26e:	61e0      	str	r0, [r4, #28]
 800b270:	b920      	cbnz	r0, 800b27c <_Balloc+0x20>
 800b272:	216b      	movs	r1, #107	@ 0x6b
 800b274:	4b17      	ldr	r3, [pc, #92]	@ (800b2d4 <_Balloc+0x78>)
 800b276:	4818      	ldr	r0, [pc, #96]	@ (800b2d8 <_Balloc+0x7c>)
 800b278:	f001 ff12 	bl	800d0a0 <__assert_func>
 800b27c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b280:	6006      	str	r6, [r0, #0]
 800b282:	60c6      	str	r6, [r0, #12]
 800b284:	69e6      	ldr	r6, [r4, #28]
 800b286:	68f3      	ldr	r3, [r6, #12]
 800b288:	b183      	cbz	r3, 800b2ac <_Balloc+0x50>
 800b28a:	69e3      	ldr	r3, [r4, #28]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b292:	b9b8      	cbnz	r0, 800b2c4 <_Balloc+0x68>
 800b294:	2101      	movs	r1, #1
 800b296:	fa01 f605 	lsl.w	r6, r1, r5
 800b29a:	1d72      	adds	r2, r6, #5
 800b29c:	4620      	mov	r0, r4
 800b29e:	0092      	lsls	r2, r2, #2
 800b2a0:	f001 ff1c 	bl	800d0dc <_calloc_r>
 800b2a4:	b160      	cbz	r0, 800b2c0 <_Balloc+0x64>
 800b2a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2aa:	e00e      	b.n	800b2ca <_Balloc+0x6e>
 800b2ac:	2221      	movs	r2, #33	@ 0x21
 800b2ae:	2104      	movs	r1, #4
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f001 ff13 	bl	800d0dc <_calloc_r>
 800b2b6:	69e3      	ldr	r3, [r4, #28]
 800b2b8:	60f0      	str	r0, [r6, #12]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e4      	bne.n	800b28a <_Balloc+0x2e>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	6802      	ldr	r2, [r0, #0]
 800b2c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2d0:	e7f7      	b.n	800b2c2 <_Balloc+0x66>
 800b2d2:	bf00      	nop
 800b2d4:	0800f590 	.word	0x0800f590
 800b2d8:	0800f610 	.word	0x0800f610

0800b2dc <_Bfree>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	69c6      	ldr	r6, [r0, #28]
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	b976      	cbnz	r6, 800b304 <_Bfree+0x28>
 800b2e6:	2010      	movs	r0, #16
 800b2e8:	f7ff ff02 	bl	800b0f0 <malloc>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	61e8      	str	r0, [r5, #28]
 800b2f0:	b920      	cbnz	r0, 800b2fc <_Bfree+0x20>
 800b2f2:	218f      	movs	r1, #143	@ 0x8f
 800b2f4:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <_Bfree+0x3c>)
 800b2f6:	4809      	ldr	r0, [pc, #36]	@ (800b31c <_Bfree+0x40>)
 800b2f8:	f001 fed2 	bl	800d0a0 <__assert_func>
 800b2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b300:	6006      	str	r6, [r0, #0]
 800b302:	60c6      	str	r6, [r0, #12]
 800b304:	b13c      	cbz	r4, 800b316 <_Bfree+0x3a>
 800b306:	69eb      	ldr	r3, [r5, #28]
 800b308:	6862      	ldr	r2, [r4, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b310:	6021      	str	r1, [r4, #0]
 800b312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	0800f590 	.word	0x0800f590
 800b31c:	0800f610 	.word	0x0800f610

0800b320 <__multadd>:
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	4607      	mov	r7, r0
 800b326:	460c      	mov	r4, r1
 800b328:	461e      	mov	r6, r3
 800b32a:	2000      	movs	r0, #0
 800b32c:	690d      	ldr	r5, [r1, #16]
 800b32e:	f101 0c14 	add.w	ip, r1, #20
 800b332:	f8dc 3000 	ldr.w	r3, [ip]
 800b336:	3001      	adds	r0, #1
 800b338:	b299      	uxth	r1, r3
 800b33a:	fb02 6101 	mla	r1, r2, r1, r6
 800b33e:	0c1e      	lsrs	r6, r3, #16
 800b340:	0c0b      	lsrs	r3, r1, #16
 800b342:	fb02 3306 	mla	r3, r2, r6, r3
 800b346:	b289      	uxth	r1, r1
 800b348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b34c:	4285      	cmp	r5, r0
 800b34e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b352:	f84c 1b04 	str.w	r1, [ip], #4
 800b356:	dcec      	bgt.n	800b332 <__multadd+0x12>
 800b358:	b30e      	cbz	r6, 800b39e <__multadd+0x7e>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	dc19      	bgt.n	800b394 <__multadd+0x74>
 800b360:	6861      	ldr	r1, [r4, #4]
 800b362:	4638      	mov	r0, r7
 800b364:	3101      	adds	r1, #1
 800b366:	f7ff ff79 	bl	800b25c <_Balloc>
 800b36a:	4680      	mov	r8, r0
 800b36c:	b928      	cbnz	r0, 800b37a <__multadd+0x5a>
 800b36e:	4602      	mov	r2, r0
 800b370:	21ba      	movs	r1, #186	@ 0xba
 800b372:	4b0c      	ldr	r3, [pc, #48]	@ (800b3a4 <__multadd+0x84>)
 800b374:	480c      	ldr	r0, [pc, #48]	@ (800b3a8 <__multadd+0x88>)
 800b376:	f001 fe93 	bl	800d0a0 <__assert_func>
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	f104 010c 	add.w	r1, r4, #12
 800b380:	3202      	adds	r2, #2
 800b382:	0092      	lsls	r2, r2, #2
 800b384:	300c      	adds	r0, #12
 800b386:	f7fe fffc 	bl	800a382 <memcpy>
 800b38a:	4621      	mov	r1, r4
 800b38c:	4638      	mov	r0, r7
 800b38e:	f7ff ffa5 	bl	800b2dc <_Bfree>
 800b392:	4644      	mov	r4, r8
 800b394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b398:	3501      	adds	r5, #1
 800b39a:	615e      	str	r6, [r3, #20]
 800b39c:	6125      	str	r5, [r4, #16]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a4:	0800f5ff 	.word	0x0800f5ff
 800b3a8:	0800f610 	.word	0x0800f610

0800b3ac <__s2b>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4615      	mov	r5, r2
 800b3b2:	2209      	movs	r2, #9
 800b3b4:	461f      	mov	r7, r3
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3be:	4606      	mov	r6, r0
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	db09      	blt.n	800b3dc <__s2b+0x30>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff ff47 	bl	800b25c <_Balloc>
 800b3ce:	b940      	cbnz	r0, 800b3e2 <__s2b+0x36>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	21d3      	movs	r1, #211	@ 0xd3
 800b3d4:	4b18      	ldr	r3, [pc, #96]	@ (800b438 <__s2b+0x8c>)
 800b3d6:	4819      	ldr	r0, [pc, #100]	@ (800b43c <__s2b+0x90>)
 800b3d8:	f001 fe62 	bl	800d0a0 <__assert_func>
 800b3dc:	0052      	lsls	r2, r2, #1
 800b3de:	3101      	adds	r1, #1
 800b3e0:	e7f0      	b.n	800b3c4 <__s2b+0x18>
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	2d09      	cmp	r5, #9
 800b3e6:	6143      	str	r3, [r0, #20]
 800b3e8:	f04f 0301 	mov.w	r3, #1
 800b3ec:	6103      	str	r3, [r0, #16]
 800b3ee:	dd16      	ble.n	800b41e <__s2b+0x72>
 800b3f0:	f104 0909 	add.w	r9, r4, #9
 800b3f4:	46c8      	mov	r8, r9
 800b3f6:	442c      	add	r4, r5
 800b3f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3fc:	4601      	mov	r1, r0
 800b3fe:	220a      	movs	r2, #10
 800b400:	4630      	mov	r0, r6
 800b402:	3b30      	subs	r3, #48	@ 0x30
 800b404:	f7ff ff8c 	bl	800b320 <__multadd>
 800b408:	45a0      	cmp	r8, r4
 800b40a:	d1f5      	bne.n	800b3f8 <__s2b+0x4c>
 800b40c:	f1a5 0408 	sub.w	r4, r5, #8
 800b410:	444c      	add	r4, r9
 800b412:	1b2d      	subs	r5, r5, r4
 800b414:	1963      	adds	r3, r4, r5
 800b416:	42bb      	cmp	r3, r7
 800b418:	db04      	blt.n	800b424 <__s2b+0x78>
 800b41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b41e:	2509      	movs	r5, #9
 800b420:	340a      	adds	r4, #10
 800b422:	e7f6      	b.n	800b412 <__s2b+0x66>
 800b424:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b428:	4601      	mov	r1, r0
 800b42a:	220a      	movs	r2, #10
 800b42c:	4630      	mov	r0, r6
 800b42e:	3b30      	subs	r3, #48	@ 0x30
 800b430:	f7ff ff76 	bl	800b320 <__multadd>
 800b434:	e7ee      	b.n	800b414 <__s2b+0x68>
 800b436:	bf00      	nop
 800b438:	0800f5ff 	.word	0x0800f5ff
 800b43c:	0800f610 	.word	0x0800f610

0800b440 <__hi0bits>:
 800b440:	4603      	mov	r3, r0
 800b442:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b446:	bf3a      	itte	cc
 800b448:	0403      	lslcc	r3, r0, #16
 800b44a:	2010      	movcc	r0, #16
 800b44c:	2000      	movcs	r0, #0
 800b44e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b452:	bf3c      	itt	cc
 800b454:	021b      	lslcc	r3, r3, #8
 800b456:	3008      	addcc	r0, #8
 800b458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b45c:	bf3c      	itt	cc
 800b45e:	011b      	lslcc	r3, r3, #4
 800b460:	3004      	addcc	r0, #4
 800b462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b466:	bf3c      	itt	cc
 800b468:	009b      	lslcc	r3, r3, #2
 800b46a:	3002      	addcc	r0, #2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	db05      	blt.n	800b47c <__hi0bits+0x3c>
 800b470:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b474:	f100 0001 	add.w	r0, r0, #1
 800b478:	bf08      	it	eq
 800b47a:	2020      	moveq	r0, #32
 800b47c:	4770      	bx	lr

0800b47e <__lo0bits>:
 800b47e:	6803      	ldr	r3, [r0, #0]
 800b480:	4602      	mov	r2, r0
 800b482:	f013 0007 	ands.w	r0, r3, #7
 800b486:	d00b      	beq.n	800b4a0 <__lo0bits+0x22>
 800b488:	07d9      	lsls	r1, r3, #31
 800b48a:	d421      	bmi.n	800b4d0 <__lo0bits+0x52>
 800b48c:	0798      	lsls	r0, r3, #30
 800b48e:	bf49      	itett	mi
 800b490:	085b      	lsrmi	r3, r3, #1
 800b492:	089b      	lsrpl	r3, r3, #2
 800b494:	2001      	movmi	r0, #1
 800b496:	6013      	strmi	r3, [r2, #0]
 800b498:	bf5c      	itt	pl
 800b49a:	2002      	movpl	r0, #2
 800b49c:	6013      	strpl	r3, [r2, #0]
 800b49e:	4770      	bx	lr
 800b4a0:	b299      	uxth	r1, r3
 800b4a2:	b909      	cbnz	r1, 800b4a8 <__lo0bits+0x2a>
 800b4a4:	2010      	movs	r0, #16
 800b4a6:	0c1b      	lsrs	r3, r3, #16
 800b4a8:	b2d9      	uxtb	r1, r3
 800b4aa:	b909      	cbnz	r1, 800b4b0 <__lo0bits+0x32>
 800b4ac:	3008      	adds	r0, #8
 800b4ae:	0a1b      	lsrs	r3, r3, #8
 800b4b0:	0719      	lsls	r1, r3, #28
 800b4b2:	bf04      	itt	eq
 800b4b4:	091b      	lsreq	r3, r3, #4
 800b4b6:	3004      	addeq	r0, #4
 800b4b8:	0799      	lsls	r1, r3, #30
 800b4ba:	bf04      	itt	eq
 800b4bc:	089b      	lsreq	r3, r3, #2
 800b4be:	3002      	addeq	r0, #2
 800b4c0:	07d9      	lsls	r1, r3, #31
 800b4c2:	d403      	bmi.n	800b4cc <__lo0bits+0x4e>
 800b4c4:	085b      	lsrs	r3, r3, #1
 800b4c6:	f100 0001 	add.w	r0, r0, #1
 800b4ca:	d003      	beq.n	800b4d4 <__lo0bits+0x56>
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	4770      	bx	lr
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4770      	bx	lr
 800b4d4:	2020      	movs	r0, #32
 800b4d6:	4770      	bx	lr

0800b4d8 <__i2b>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	460c      	mov	r4, r1
 800b4dc:	2101      	movs	r1, #1
 800b4de:	f7ff febd 	bl	800b25c <_Balloc>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	b928      	cbnz	r0, 800b4f2 <__i2b+0x1a>
 800b4e6:	f240 1145 	movw	r1, #325	@ 0x145
 800b4ea:	4b04      	ldr	r3, [pc, #16]	@ (800b4fc <__i2b+0x24>)
 800b4ec:	4804      	ldr	r0, [pc, #16]	@ (800b500 <__i2b+0x28>)
 800b4ee:	f001 fdd7 	bl	800d0a0 <__assert_func>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	6144      	str	r4, [r0, #20]
 800b4f6:	6103      	str	r3, [r0, #16]
 800b4f8:	bd10      	pop	{r4, pc}
 800b4fa:	bf00      	nop
 800b4fc:	0800f5ff 	.word	0x0800f5ff
 800b500:	0800f610 	.word	0x0800f610

0800b504 <__multiply>:
 800b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b508:	4617      	mov	r7, r2
 800b50a:	690a      	ldr	r2, [r1, #16]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	4689      	mov	r9, r1
 800b510:	429a      	cmp	r2, r3
 800b512:	bfa2      	ittt	ge
 800b514:	463b      	movge	r3, r7
 800b516:	460f      	movge	r7, r1
 800b518:	4699      	movge	r9, r3
 800b51a:	693d      	ldr	r5, [r7, #16]
 800b51c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6879      	ldr	r1, [r7, #4]
 800b524:	eb05 060a 	add.w	r6, r5, sl
 800b528:	42b3      	cmp	r3, r6
 800b52a:	b085      	sub	sp, #20
 800b52c:	bfb8      	it	lt
 800b52e:	3101      	addlt	r1, #1
 800b530:	f7ff fe94 	bl	800b25c <_Balloc>
 800b534:	b930      	cbnz	r0, 800b544 <__multiply+0x40>
 800b536:	4602      	mov	r2, r0
 800b538:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b53c:	4b40      	ldr	r3, [pc, #256]	@ (800b640 <__multiply+0x13c>)
 800b53e:	4841      	ldr	r0, [pc, #260]	@ (800b644 <__multiply+0x140>)
 800b540:	f001 fdae 	bl	800d0a0 <__assert_func>
 800b544:	f100 0414 	add.w	r4, r0, #20
 800b548:	4623      	mov	r3, r4
 800b54a:	2200      	movs	r2, #0
 800b54c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b550:	4573      	cmp	r3, lr
 800b552:	d320      	bcc.n	800b596 <__multiply+0x92>
 800b554:	f107 0814 	add.w	r8, r7, #20
 800b558:	f109 0114 	add.w	r1, r9, #20
 800b55c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b560:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	1beb      	subs	r3, r5, r7
 800b568:	3b15      	subs	r3, #21
 800b56a:	f023 0303 	bic.w	r3, r3, #3
 800b56e:	3304      	adds	r3, #4
 800b570:	3715      	adds	r7, #21
 800b572:	42bd      	cmp	r5, r7
 800b574:	bf38      	it	cc
 800b576:	2304      	movcc	r3, #4
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	9b02      	ldr	r3, [sp, #8]
 800b57c:	9103      	str	r1, [sp, #12]
 800b57e:	428b      	cmp	r3, r1
 800b580:	d80c      	bhi.n	800b59c <__multiply+0x98>
 800b582:	2e00      	cmp	r6, #0
 800b584:	dd03      	ble.n	800b58e <__multiply+0x8a>
 800b586:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d055      	beq.n	800b63a <__multiply+0x136>
 800b58e:	6106      	str	r6, [r0, #16]
 800b590:	b005      	add	sp, #20
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	f843 2b04 	str.w	r2, [r3], #4
 800b59a:	e7d9      	b.n	800b550 <__multiply+0x4c>
 800b59c:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5a0:	f1ba 0f00 	cmp.w	sl, #0
 800b5a4:	d01f      	beq.n	800b5e6 <__multiply+0xe2>
 800b5a6:	46c4      	mov	ip, r8
 800b5a8:	46a1      	mov	r9, r4
 800b5aa:	2700      	movs	r7, #0
 800b5ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5b0:	f8d9 3000 	ldr.w	r3, [r9]
 800b5b4:	fa1f fb82 	uxth.w	fp, r2
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5be:	443b      	add	r3, r7
 800b5c0:	f8d9 7000 	ldr.w	r7, [r9]
 800b5c4:	0c12      	lsrs	r2, r2, #16
 800b5c6:	0c3f      	lsrs	r7, r7, #16
 800b5c8:	fb0a 7202 	mla	r2, sl, r2, r7
 800b5cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5d6:	4565      	cmp	r5, ip
 800b5d8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b5dc:	f849 3b04 	str.w	r3, [r9], #4
 800b5e0:	d8e4      	bhi.n	800b5ac <__multiply+0xa8>
 800b5e2:	9b01      	ldr	r3, [sp, #4]
 800b5e4:	50e7      	str	r7, [r4, r3]
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	3104      	adds	r1, #4
 800b5ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b5ee:	f1b9 0f00 	cmp.w	r9, #0
 800b5f2:	d020      	beq.n	800b636 <__multiply+0x132>
 800b5f4:	4647      	mov	r7, r8
 800b5f6:	46a4      	mov	ip, r4
 800b5f8:	f04f 0a00 	mov.w	sl, #0
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	f8b7 b000 	ldrh.w	fp, [r7]
 800b602:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b606:	b29b      	uxth	r3, r3
 800b608:	fb09 220b 	mla	r2, r9, fp, r2
 800b60c:	4452      	add	r2, sl
 800b60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b612:	f84c 3b04 	str.w	r3, [ip], #4
 800b616:	f857 3b04 	ldr.w	r3, [r7], #4
 800b61a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b61e:	f8bc 3000 	ldrh.w	r3, [ip]
 800b622:	42bd      	cmp	r5, r7
 800b624:	fb09 330a 	mla	r3, r9, sl, r3
 800b628:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b62c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b630:	d8e5      	bhi.n	800b5fe <__multiply+0xfa>
 800b632:	9a01      	ldr	r2, [sp, #4]
 800b634:	50a3      	str	r3, [r4, r2]
 800b636:	3404      	adds	r4, #4
 800b638:	e79f      	b.n	800b57a <__multiply+0x76>
 800b63a:	3e01      	subs	r6, #1
 800b63c:	e7a1      	b.n	800b582 <__multiply+0x7e>
 800b63e:	bf00      	nop
 800b640:	0800f5ff 	.word	0x0800f5ff
 800b644:	0800f610 	.word	0x0800f610

0800b648 <__pow5mult>:
 800b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	4615      	mov	r5, r2
 800b64e:	f012 0203 	ands.w	r2, r2, #3
 800b652:	4607      	mov	r7, r0
 800b654:	460e      	mov	r6, r1
 800b656:	d007      	beq.n	800b668 <__pow5mult+0x20>
 800b658:	4c25      	ldr	r4, [pc, #148]	@ (800b6f0 <__pow5mult+0xa8>)
 800b65a:	3a01      	subs	r2, #1
 800b65c:	2300      	movs	r3, #0
 800b65e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b662:	f7ff fe5d 	bl	800b320 <__multadd>
 800b666:	4606      	mov	r6, r0
 800b668:	10ad      	asrs	r5, r5, #2
 800b66a:	d03d      	beq.n	800b6e8 <__pow5mult+0xa0>
 800b66c:	69fc      	ldr	r4, [r7, #28]
 800b66e:	b97c      	cbnz	r4, 800b690 <__pow5mult+0x48>
 800b670:	2010      	movs	r0, #16
 800b672:	f7ff fd3d 	bl	800b0f0 <malloc>
 800b676:	4602      	mov	r2, r0
 800b678:	61f8      	str	r0, [r7, #28]
 800b67a:	b928      	cbnz	r0, 800b688 <__pow5mult+0x40>
 800b67c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b680:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f4 <__pow5mult+0xac>)
 800b682:	481d      	ldr	r0, [pc, #116]	@ (800b6f8 <__pow5mult+0xb0>)
 800b684:	f001 fd0c 	bl	800d0a0 <__assert_func>
 800b688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b68c:	6004      	str	r4, [r0, #0]
 800b68e:	60c4      	str	r4, [r0, #12]
 800b690:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b698:	b94c      	cbnz	r4, 800b6ae <__pow5mult+0x66>
 800b69a:	f240 2171 	movw	r1, #625	@ 0x271
 800b69e:	4638      	mov	r0, r7
 800b6a0:	f7ff ff1a 	bl	800b4d8 <__i2b>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6ac:	6003      	str	r3, [r0, #0]
 800b6ae:	f04f 0900 	mov.w	r9, #0
 800b6b2:	07eb      	lsls	r3, r5, #31
 800b6b4:	d50a      	bpl.n	800b6cc <__pow5mult+0x84>
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f7ff ff22 	bl	800b504 <__multiply>
 800b6c0:	4680      	mov	r8, r0
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7ff fe09 	bl	800b2dc <_Bfree>
 800b6ca:	4646      	mov	r6, r8
 800b6cc:	106d      	asrs	r5, r5, #1
 800b6ce:	d00b      	beq.n	800b6e8 <__pow5mult+0xa0>
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	b938      	cbnz	r0, 800b6e4 <__pow5mult+0x9c>
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff ff13 	bl	800b504 <__multiply>
 800b6de:	6020      	str	r0, [r4, #0]
 800b6e0:	f8c0 9000 	str.w	r9, [r0]
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	e7e4      	b.n	800b6b2 <__pow5mult+0x6a>
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800f720 	.word	0x0800f720
 800b6f4:	0800f590 	.word	0x0800f590
 800b6f8:	0800f610 	.word	0x0800f610

0800b6fc <__lshift>:
 800b6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b700:	460c      	mov	r4, r1
 800b702:	4607      	mov	r7, r0
 800b704:	4691      	mov	r9, r2
 800b706:	6923      	ldr	r3, [r4, #16]
 800b708:	6849      	ldr	r1, [r1, #4]
 800b70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b70e:	68a3      	ldr	r3, [r4, #8]
 800b710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b714:	f108 0601 	add.w	r6, r8, #1
 800b718:	42b3      	cmp	r3, r6
 800b71a:	db0b      	blt.n	800b734 <__lshift+0x38>
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff fd9d 	bl	800b25c <_Balloc>
 800b722:	4605      	mov	r5, r0
 800b724:	b948      	cbnz	r0, 800b73a <__lshift+0x3e>
 800b726:	4602      	mov	r2, r0
 800b728:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b72c:	4b27      	ldr	r3, [pc, #156]	@ (800b7cc <__lshift+0xd0>)
 800b72e:	4828      	ldr	r0, [pc, #160]	@ (800b7d0 <__lshift+0xd4>)
 800b730:	f001 fcb6 	bl	800d0a0 <__assert_func>
 800b734:	3101      	adds	r1, #1
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	e7ee      	b.n	800b718 <__lshift+0x1c>
 800b73a:	2300      	movs	r3, #0
 800b73c:	f100 0114 	add.w	r1, r0, #20
 800b740:	f100 0210 	add.w	r2, r0, #16
 800b744:	4618      	mov	r0, r3
 800b746:	4553      	cmp	r3, sl
 800b748:	db33      	blt.n	800b7b2 <__lshift+0xb6>
 800b74a:	6920      	ldr	r0, [r4, #16]
 800b74c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b750:	f104 0314 	add.w	r3, r4, #20
 800b754:	f019 091f 	ands.w	r9, r9, #31
 800b758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b75c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b760:	d02b      	beq.n	800b7ba <__lshift+0xbe>
 800b762:	468a      	mov	sl, r1
 800b764:	2200      	movs	r2, #0
 800b766:	f1c9 0e20 	rsb	lr, r9, #32
 800b76a:	6818      	ldr	r0, [r3, #0]
 800b76c:	fa00 f009 	lsl.w	r0, r0, r9
 800b770:	4310      	orrs	r0, r2
 800b772:	f84a 0b04 	str.w	r0, [sl], #4
 800b776:	f853 2b04 	ldr.w	r2, [r3], #4
 800b77a:	459c      	cmp	ip, r3
 800b77c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b780:	d8f3      	bhi.n	800b76a <__lshift+0x6e>
 800b782:	ebac 0304 	sub.w	r3, ip, r4
 800b786:	3b15      	subs	r3, #21
 800b788:	f023 0303 	bic.w	r3, r3, #3
 800b78c:	3304      	adds	r3, #4
 800b78e:	f104 0015 	add.w	r0, r4, #21
 800b792:	4560      	cmp	r0, ip
 800b794:	bf88      	it	hi
 800b796:	2304      	movhi	r3, #4
 800b798:	50ca      	str	r2, [r1, r3]
 800b79a:	b10a      	cbz	r2, 800b7a0 <__lshift+0xa4>
 800b79c:	f108 0602 	add.w	r6, r8, #2
 800b7a0:	3e01      	subs	r6, #1
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	612e      	str	r6, [r5, #16]
 800b7a8:	f7ff fd98 	bl	800b2dc <_Bfree>
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	e7c5      	b.n	800b746 <__lshift+0x4a>
 800b7ba:	3904      	subs	r1, #4
 800b7bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c0:	459c      	cmp	ip, r3
 800b7c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7c6:	d8f9      	bhi.n	800b7bc <__lshift+0xc0>
 800b7c8:	e7ea      	b.n	800b7a0 <__lshift+0xa4>
 800b7ca:	bf00      	nop
 800b7cc:	0800f5ff 	.word	0x0800f5ff
 800b7d0:	0800f610 	.word	0x0800f610

0800b7d4 <__mcmp>:
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	690a      	ldr	r2, [r1, #16]
 800b7d8:	6900      	ldr	r0, [r0, #16]
 800b7da:	b530      	push	{r4, r5, lr}
 800b7dc:	1a80      	subs	r0, r0, r2
 800b7de:	d10e      	bne.n	800b7fe <__mcmp+0x2a>
 800b7e0:	3314      	adds	r3, #20
 800b7e2:	3114      	adds	r1, #20
 800b7e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b7e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b7ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7f4:	4295      	cmp	r5, r2
 800b7f6:	d003      	beq.n	800b800 <__mcmp+0x2c>
 800b7f8:	d205      	bcs.n	800b806 <__mcmp+0x32>
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fe:	bd30      	pop	{r4, r5, pc}
 800b800:	42a3      	cmp	r3, r4
 800b802:	d3f3      	bcc.n	800b7ec <__mcmp+0x18>
 800b804:	e7fb      	b.n	800b7fe <__mcmp+0x2a>
 800b806:	2001      	movs	r0, #1
 800b808:	e7f9      	b.n	800b7fe <__mcmp+0x2a>
	...

0800b80c <__mdiff>:
 800b80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	4689      	mov	r9, r1
 800b812:	4606      	mov	r6, r0
 800b814:	4611      	mov	r1, r2
 800b816:	4648      	mov	r0, r9
 800b818:	4614      	mov	r4, r2
 800b81a:	f7ff ffdb 	bl	800b7d4 <__mcmp>
 800b81e:	1e05      	subs	r5, r0, #0
 800b820:	d112      	bne.n	800b848 <__mdiff+0x3c>
 800b822:	4629      	mov	r1, r5
 800b824:	4630      	mov	r0, r6
 800b826:	f7ff fd19 	bl	800b25c <_Balloc>
 800b82a:	4602      	mov	r2, r0
 800b82c:	b928      	cbnz	r0, 800b83a <__mdiff+0x2e>
 800b82e:	f240 2137 	movw	r1, #567	@ 0x237
 800b832:	4b3e      	ldr	r3, [pc, #248]	@ (800b92c <__mdiff+0x120>)
 800b834:	483e      	ldr	r0, [pc, #248]	@ (800b930 <__mdiff+0x124>)
 800b836:	f001 fc33 	bl	800d0a0 <__assert_func>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b840:	4610      	mov	r0, r2
 800b842:	b003      	add	sp, #12
 800b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b848:	bfbc      	itt	lt
 800b84a:	464b      	movlt	r3, r9
 800b84c:	46a1      	movlt	r9, r4
 800b84e:	4630      	mov	r0, r6
 800b850:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b854:	bfba      	itte	lt
 800b856:	461c      	movlt	r4, r3
 800b858:	2501      	movlt	r5, #1
 800b85a:	2500      	movge	r5, #0
 800b85c:	f7ff fcfe 	bl	800b25c <_Balloc>
 800b860:	4602      	mov	r2, r0
 800b862:	b918      	cbnz	r0, 800b86c <__mdiff+0x60>
 800b864:	f240 2145 	movw	r1, #581	@ 0x245
 800b868:	4b30      	ldr	r3, [pc, #192]	@ (800b92c <__mdiff+0x120>)
 800b86a:	e7e3      	b.n	800b834 <__mdiff+0x28>
 800b86c:	f100 0b14 	add.w	fp, r0, #20
 800b870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b874:	f109 0310 	add.w	r3, r9, #16
 800b878:	60c5      	str	r5, [r0, #12]
 800b87a:	f04f 0c00 	mov.w	ip, #0
 800b87e:	f109 0514 	add.w	r5, r9, #20
 800b882:	46d9      	mov	r9, fp
 800b884:	6926      	ldr	r6, [r4, #16]
 800b886:	f104 0e14 	add.w	lr, r4, #20
 800b88a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b88e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b892:	9301      	str	r3, [sp, #4]
 800b894:	9b01      	ldr	r3, [sp, #4]
 800b896:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b89a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b89e:	b281      	uxth	r1, r0
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	fa1f f38a 	uxth.w	r3, sl
 800b8a6:	1a5b      	subs	r3, r3, r1
 800b8a8:	0c00      	lsrs	r0, r0, #16
 800b8aa:	4463      	add	r3, ip
 800b8ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8b0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b8ba:	4576      	cmp	r6, lr
 800b8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8c0:	f849 3b04 	str.w	r3, [r9], #4
 800b8c4:	d8e6      	bhi.n	800b894 <__mdiff+0x88>
 800b8c6:	1b33      	subs	r3, r6, r4
 800b8c8:	3b15      	subs	r3, #21
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	3415      	adds	r4, #21
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	42a6      	cmp	r6, r4
 800b8d4:	bf38      	it	cc
 800b8d6:	2304      	movcc	r3, #4
 800b8d8:	441d      	add	r5, r3
 800b8da:	445b      	add	r3, fp
 800b8dc:	461e      	mov	r6, r3
 800b8de:	462c      	mov	r4, r5
 800b8e0:	4544      	cmp	r4, r8
 800b8e2:	d30e      	bcc.n	800b902 <__mdiff+0xf6>
 800b8e4:	f108 0103 	add.w	r1, r8, #3
 800b8e8:	1b49      	subs	r1, r1, r5
 800b8ea:	f021 0103 	bic.w	r1, r1, #3
 800b8ee:	3d03      	subs	r5, #3
 800b8f0:	45a8      	cmp	r8, r5
 800b8f2:	bf38      	it	cc
 800b8f4:	2100      	movcc	r1, #0
 800b8f6:	440b      	add	r3, r1
 800b8f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8fc:	b199      	cbz	r1, 800b926 <__mdiff+0x11a>
 800b8fe:	6117      	str	r7, [r2, #16]
 800b900:	e79e      	b.n	800b840 <__mdiff+0x34>
 800b902:	46e6      	mov	lr, ip
 800b904:	f854 1b04 	ldr.w	r1, [r4], #4
 800b908:	fa1f fc81 	uxth.w	ip, r1
 800b90c:	44f4      	add	ip, lr
 800b90e:	0c08      	lsrs	r0, r1, #16
 800b910:	4471      	add	r1, lr
 800b912:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b916:	b289      	uxth	r1, r1
 800b918:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b91c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b920:	f846 1b04 	str.w	r1, [r6], #4
 800b924:	e7dc      	b.n	800b8e0 <__mdiff+0xd4>
 800b926:	3f01      	subs	r7, #1
 800b928:	e7e6      	b.n	800b8f8 <__mdiff+0xec>
 800b92a:	bf00      	nop
 800b92c:	0800f5ff 	.word	0x0800f5ff
 800b930:	0800f610 	.word	0x0800f610

0800b934 <__ulp>:
 800b934:	4b0e      	ldr	r3, [pc, #56]	@ (800b970 <__ulp+0x3c>)
 800b936:	400b      	ands	r3, r1
 800b938:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dc08      	bgt.n	800b952 <__ulp+0x1e>
 800b940:	425b      	negs	r3, r3
 800b942:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b946:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b94a:	da04      	bge.n	800b956 <__ulp+0x22>
 800b94c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b950:	4113      	asrs	r3, r2
 800b952:	2200      	movs	r2, #0
 800b954:	e008      	b.n	800b968 <__ulp+0x34>
 800b956:	f1a2 0314 	sub.w	r3, r2, #20
 800b95a:	2b1e      	cmp	r3, #30
 800b95c:	bfd6      	itet	le
 800b95e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b962:	2201      	movgt	r2, #1
 800b964:	40da      	lsrle	r2, r3
 800b966:	2300      	movs	r3, #0
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	7ff00000 	.word	0x7ff00000

0800b974 <__b2d>:
 800b974:	6902      	ldr	r2, [r0, #16]
 800b976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b978:	f100 0614 	add.w	r6, r0, #20
 800b97c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b980:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b984:	4f1e      	ldr	r7, [pc, #120]	@ (800ba00 <__b2d+0x8c>)
 800b986:	4620      	mov	r0, r4
 800b988:	f7ff fd5a 	bl	800b440 <__hi0bits>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f1c0 0020 	rsb	r0, r0, #32
 800b992:	2b0a      	cmp	r3, #10
 800b994:	f1a2 0504 	sub.w	r5, r2, #4
 800b998:	6008      	str	r0, [r1, #0]
 800b99a:	dc12      	bgt.n	800b9c2 <__b2d+0x4e>
 800b99c:	42ae      	cmp	r6, r5
 800b99e:	bf2c      	ite	cs
 800b9a0:	2200      	movcs	r2, #0
 800b9a2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b9a6:	f1c3 0c0b 	rsb	ip, r3, #11
 800b9aa:	3315      	adds	r3, #21
 800b9ac:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b9b0:	fa04 f303 	lsl.w	r3, r4, r3
 800b9b4:	fa22 f20c 	lsr.w	r2, r2, ip
 800b9b8:	ea4e 0107 	orr.w	r1, lr, r7
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	4610      	mov	r0, r2
 800b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9c2:	42ae      	cmp	r6, r5
 800b9c4:	bf36      	itet	cc
 800b9c6:	f1a2 0508 	subcc.w	r5, r2, #8
 800b9ca:	2200      	movcs	r2, #0
 800b9cc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b9d0:	3b0b      	subs	r3, #11
 800b9d2:	d012      	beq.n	800b9fa <__b2d+0x86>
 800b9d4:	f1c3 0720 	rsb	r7, r3, #32
 800b9d8:	fa22 f107 	lsr.w	r1, r2, r7
 800b9dc:	409c      	lsls	r4, r3
 800b9de:	430c      	orrs	r4, r1
 800b9e0:	42b5      	cmp	r5, r6
 800b9e2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b9e6:	bf94      	ite	ls
 800b9e8:	2400      	movls	r4, #0
 800b9ea:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b9ee:	409a      	lsls	r2, r3
 800b9f0:	40fc      	lsrs	r4, r7
 800b9f2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b9f6:	4322      	orrs	r2, r4
 800b9f8:	e7e1      	b.n	800b9be <__b2d+0x4a>
 800b9fa:	ea44 0107 	orr.w	r1, r4, r7
 800b9fe:	e7de      	b.n	800b9be <__b2d+0x4a>
 800ba00:	3ff00000 	.word	0x3ff00000

0800ba04 <__d2b>:
 800ba04:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ba08:	2101      	movs	r1, #1
 800ba0a:	4690      	mov	r8, r2
 800ba0c:	4699      	mov	r9, r3
 800ba0e:	9e08      	ldr	r6, [sp, #32]
 800ba10:	f7ff fc24 	bl	800b25c <_Balloc>
 800ba14:	4604      	mov	r4, r0
 800ba16:	b930      	cbnz	r0, 800ba26 <__d2b+0x22>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba1e:	4b23      	ldr	r3, [pc, #140]	@ (800baac <__d2b+0xa8>)
 800ba20:	4823      	ldr	r0, [pc, #140]	@ (800bab0 <__d2b+0xac>)
 800ba22:	f001 fb3d 	bl	800d0a0 <__assert_func>
 800ba26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba2e:	b10d      	cbz	r5, 800ba34 <__d2b+0x30>
 800ba30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	f1b8 0300 	subs.w	r3, r8, #0
 800ba3a:	d024      	beq.n	800ba86 <__d2b+0x82>
 800ba3c:	4668      	mov	r0, sp
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	f7ff fd1d 	bl	800b47e <__lo0bits>
 800ba44:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba48:	b1d8      	cbz	r0, 800ba82 <__d2b+0x7e>
 800ba4a:	f1c0 0320 	rsb	r3, r0, #32
 800ba4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba52:	430b      	orrs	r3, r1
 800ba54:	40c2      	lsrs	r2, r0
 800ba56:	6163      	str	r3, [r4, #20]
 800ba58:	9201      	str	r2, [sp, #4]
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	bf0c      	ite	eq
 800ba60:	2201      	moveq	r2, #1
 800ba62:	2202      	movne	r2, #2
 800ba64:	61a3      	str	r3, [r4, #24]
 800ba66:	6122      	str	r2, [r4, #16]
 800ba68:	b1ad      	cbz	r5, 800ba96 <__d2b+0x92>
 800ba6a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba6e:	4405      	add	r5, r0
 800ba70:	6035      	str	r5, [r6, #0]
 800ba72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba78:	6018      	str	r0, [r3, #0]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	b002      	add	sp, #8
 800ba7e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ba82:	6161      	str	r1, [r4, #20]
 800ba84:	e7e9      	b.n	800ba5a <__d2b+0x56>
 800ba86:	a801      	add	r0, sp, #4
 800ba88:	f7ff fcf9 	bl	800b47e <__lo0bits>
 800ba8c:	9b01      	ldr	r3, [sp, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	6163      	str	r3, [r4, #20]
 800ba92:	3020      	adds	r0, #32
 800ba94:	e7e7      	b.n	800ba66 <__d2b+0x62>
 800ba96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba9e:	6030      	str	r0, [r6, #0]
 800baa0:	6918      	ldr	r0, [r3, #16]
 800baa2:	f7ff fccd 	bl	800b440 <__hi0bits>
 800baa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baaa:	e7e4      	b.n	800ba76 <__d2b+0x72>
 800baac:	0800f5ff 	.word	0x0800f5ff
 800bab0:	0800f610 	.word	0x0800f610

0800bab4 <__ratio>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	b085      	sub	sp, #20
 800baba:	e9cd 1000 	strd	r1, r0, [sp]
 800babe:	a902      	add	r1, sp, #8
 800bac0:	f7ff ff58 	bl	800b974 <__b2d>
 800bac4:	468b      	mov	fp, r1
 800bac6:	4606      	mov	r6, r0
 800bac8:	460f      	mov	r7, r1
 800baca:	9800      	ldr	r0, [sp, #0]
 800bacc:	a903      	add	r1, sp, #12
 800bace:	f7ff ff51 	bl	800b974 <__b2d>
 800bad2:	460d      	mov	r5, r1
 800bad4:	9b01      	ldr	r3, [sp, #4]
 800bad6:	4689      	mov	r9, r1
 800bad8:	6919      	ldr	r1, [r3, #16]
 800bada:	9b00      	ldr	r3, [sp, #0]
 800badc:	4604      	mov	r4, r0
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	4630      	mov	r0, r6
 800bae2:	1ac9      	subs	r1, r1, r3
 800bae4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bae8:	1a9b      	subs	r3, r3, r2
 800baea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfcd      	iteet	gt
 800baf2:	463a      	movgt	r2, r7
 800baf4:	462a      	movle	r2, r5
 800baf6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bafa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bafe:	bfd8      	it	le
 800bb00:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bb04:	464b      	mov	r3, r9
 800bb06:	4622      	mov	r2, r4
 800bb08:	4659      	mov	r1, fp
 800bb0a:	f7f4 fe0f 	bl	800072c <__aeabi_ddiv>
 800bb0e:	b005      	add	sp, #20
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb14 <__copybits>:
 800bb14:	3901      	subs	r1, #1
 800bb16:	b570      	push	{r4, r5, r6, lr}
 800bb18:	1149      	asrs	r1, r1, #5
 800bb1a:	6914      	ldr	r4, [r2, #16]
 800bb1c:	3101      	adds	r1, #1
 800bb1e:	f102 0314 	add.w	r3, r2, #20
 800bb22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb2a:	1f05      	subs	r5, r0, #4
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	d30c      	bcc.n	800bb4a <__copybits+0x36>
 800bb30:	1aa3      	subs	r3, r4, r2
 800bb32:	3b11      	subs	r3, #17
 800bb34:	f023 0303 	bic.w	r3, r3, #3
 800bb38:	3211      	adds	r2, #17
 800bb3a:	42a2      	cmp	r2, r4
 800bb3c:	bf88      	it	hi
 800bb3e:	2300      	movhi	r3, #0
 800bb40:	4418      	add	r0, r3
 800bb42:	2300      	movs	r3, #0
 800bb44:	4288      	cmp	r0, r1
 800bb46:	d305      	bcc.n	800bb54 <__copybits+0x40>
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
 800bb4a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb4e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb52:	e7eb      	b.n	800bb2c <__copybits+0x18>
 800bb54:	f840 3b04 	str.w	r3, [r0], #4
 800bb58:	e7f4      	b.n	800bb44 <__copybits+0x30>

0800bb5a <__any_on>:
 800bb5a:	f100 0214 	add.w	r2, r0, #20
 800bb5e:	6900      	ldr	r0, [r0, #16]
 800bb60:	114b      	asrs	r3, r1, #5
 800bb62:	4298      	cmp	r0, r3
 800bb64:	b510      	push	{r4, lr}
 800bb66:	db11      	blt.n	800bb8c <__any_on+0x32>
 800bb68:	dd0a      	ble.n	800bb80 <__any_on+0x26>
 800bb6a:	f011 011f 	ands.w	r1, r1, #31
 800bb6e:	d007      	beq.n	800bb80 <__any_on+0x26>
 800bb70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb74:	fa24 f001 	lsr.w	r0, r4, r1
 800bb78:	fa00 f101 	lsl.w	r1, r0, r1
 800bb7c:	428c      	cmp	r4, r1
 800bb7e:	d10b      	bne.n	800bb98 <__any_on+0x3e>
 800bb80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d803      	bhi.n	800bb90 <__any_on+0x36>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	bd10      	pop	{r4, pc}
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	e7f7      	b.n	800bb80 <__any_on+0x26>
 800bb90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb94:	2900      	cmp	r1, #0
 800bb96:	d0f5      	beq.n	800bb84 <__any_on+0x2a>
 800bb98:	2001      	movs	r0, #1
 800bb9a:	e7f6      	b.n	800bb8a <__any_on+0x30>

0800bb9c <sulp>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	460f      	mov	r7, r1
 800bba2:	4690      	mov	r8, r2
 800bba4:	f7ff fec6 	bl	800b934 <__ulp>
 800bba8:	4604      	mov	r4, r0
 800bbaa:	460d      	mov	r5, r1
 800bbac:	f1b8 0f00 	cmp.w	r8, #0
 800bbb0:	d011      	beq.n	800bbd6 <sulp+0x3a>
 800bbb2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bbb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	dd0b      	ble.n	800bbd6 <sulp+0x3a>
 800bbbe:	2400      	movs	r4, #0
 800bbc0:	051b      	lsls	r3, r3, #20
 800bbc2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bbc6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bbca:	4622      	mov	r2, r4
 800bbcc:	462b      	mov	r3, r5
 800bbce:	f7f4 fc83 	bl	80004d8 <__aeabi_dmul>
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	460d      	mov	r5, r1
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bbe0 <_strtod_l>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	b09f      	sub	sp, #124	@ 0x7c
 800bbe6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bbe8:	2200      	movs	r2, #0
 800bbea:	460c      	mov	r4, r1
 800bbec:	921a      	str	r2, [sp, #104]	@ 0x68
 800bbee:	f04f 0a00 	mov.w	sl, #0
 800bbf2:	f04f 0b00 	mov.w	fp, #0
 800bbf6:	460a      	mov	r2, r1
 800bbf8:	9005      	str	r0, [sp, #20]
 800bbfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800bbfc:	7811      	ldrb	r1, [r2, #0]
 800bbfe:	292b      	cmp	r1, #43	@ 0x2b
 800bc00:	d048      	beq.n	800bc94 <_strtod_l+0xb4>
 800bc02:	d836      	bhi.n	800bc72 <_strtod_l+0x92>
 800bc04:	290d      	cmp	r1, #13
 800bc06:	d830      	bhi.n	800bc6a <_strtod_l+0x8a>
 800bc08:	2908      	cmp	r1, #8
 800bc0a:	d830      	bhi.n	800bc6e <_strtod_l+0x8e>
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d039      	beq.n	800bc84 <_strtod_l+0xa4>
 800bc10:	2200      	movs	r2, #0
 800bc12:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bc16:	782a      	ldrb	r2, [r5, #0]
 800bc18:	2a30      	cmp	r2, #48	@ 0x30
 800bc1a:	f040 80b0 	bne.w	800bd7e <_strtod_l+0x19e>
 800bc1e:	786a      	ldrb	r2, [r5, #1]
 800bc20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc24:	2a58      	cmp	r2, #88	@ 0x58
 800bc26:	d16c      	bne.n	800bd02 <_strtod_l+0x122>
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc2c:	4a8f      	ldr	r2, [pc, #572]	@ (800be6c <_strtod_l+0x28c>)
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	ab1a      	add	r3, sp, #104	@ 0x68
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	9805      	ldr	r0, [sp, #20]
 800bc36:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bc38:	a919      	add	r1, sp, #100	@ 0x64
 800bc3a:	f001 facb 	bl	800d1d4 <__gethex>
 800bc3e:	f010 060f 	ands.w	r6, r0, #15
 800bc42:	4604      	mov	r4, r0
 800bc44:	d005      	beq.n	800bc52 <_strtod_l+0x72>
 800bc46:	2e06      	cmp	r6, #6
 800bc48:	d126      	bne.n	800bc98 <_strtod_l+0xb8>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	3501      	adds	r5, #1
 800bc4e:	9519      	str	r5, [sp, #100]	@ 0x64
 800bc50:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 8582 	bne.w	800c75e <_strtod_l+0xb7e>
 800bc5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc5c:	b1bb      	cbz	r3, 800bc8e <_strtod_l+0xae>
 800bc5e:	4650      	mov	r0, sl
 800bc60:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800bc64:	b01f      	add	sp, #124	@ 0x7c
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	2920      	cmp	r1, #32
 800bc6c:	d1d0      	bne.n	800bc10 <_strtod_l+0x30>
 800bc6e:	3201      	adds	r2, #1
 800bc70:	e7c3      	b.n	800bbfa <_strtod_l+0x1a>
 800bc72:	292d      	cmp	r1, #45	@ 0x2d
 800bc74:	d1cc      	bne.n	800bc10 <_strtod_l+0x30>
 800bc76:	2101      	movs	r1, #1
 800bc78:	910e      	str	r1, [sp, #56]	@ 0x38
 800bc7a:	1c51      	adds	r1, r2, #1
 800bc7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bc7e:	7852      	ldrb	r2, [r2, #1]
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	d1c7      	bne.n	800bc14 <_strtod_l+0x34>
 800bc84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc86:	9419      	str	r4, [sp, #100]	@ 0x64
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f040 8566 	bne.w	800c75a <_strtod_l+0xb7a>
 800bc8e:	4650      	mov	r0, sl
 800bc90:	4659      	mov	r1, fp
 800bc92:	e7e7      	b.n	800bc64 <_strtod_l+0x84>
 800bc94:	2100      	movs	r1, #0
 800bc96:	e7ef      	b.n	800bc78 <_strtod_l+0x98>
 800bc98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc9a:	b13a      	cbz	r2, 800bcac <_strtod_l+0xcc>
 800bc9c:	2135      	movs	r1, #53	@ 0x35
 800bc9e:	a81c      	add	r0, sp, #112	@ 0x70
 800bca0:	f7ff ff38 	bl	800bb14 <__copybits>
 800bca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bca6:	9805      	ldr	r0, [sp, #20]
 800bca8:	f7ff fb18 	bl	800b2dc <_Bfree>
 800bcac:	3e01      	subs	r6, #1
 800bcae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bcb0:	2e04      	cmp	r6, #4
 800bcb2:	d806      	bhi.n	800bcc2 <_strtod_l+0xe2>
 800bcb4:	e8df f006 	tbb	[pc, r6]
 800bcb8:	201d0314 	.word	0x201d0314
 800bcbc:	14          	.byte	0x14
 800bcbd:	00          	.byte	0x00
 800bcbe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bcc2:	05e1      	lsls	r1, r4, #23
 800bcc4:	bf48      	it	mi
 800bcc6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bcca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcce:	0d1b      	lsrs	r3, r3, #20
 800bcd0:	051b      	lsls	r3, r3, #20
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1bd      	bne.n	800bc52 <_strtod_l+0x72>
 800bcd6:	f7fe fb19 	bl	800a30c <__errno>
 800bcda:	2322      	movs	r3, #34	@ 0x22
 800bcdc:	6003      	str	r3, [r0, #0]
 800bcde:	e7b8      	b.n	800bc52 <_strtod_l+0x72>
 800bce0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bce4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bce8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bcec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bcf0:	e7e7      	b.n	800bcc2 <_strtod_l+0xe2>
 800bcf2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800be70 <_strtod_l+0x290>
 800bcf6:	e7e4      	b.n	800bcc2 <_strtod_l+0xe2>
 800bcf8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bcfc:	f04f 3aff 	mov.w	sl, #4294967295
 800bd00:	e7df      	b.n	800bcc2 <_strtod_l+0xe2>
 800bd02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	2b30      	cmp	r3, #48	@ 0x30
 800bd0c:	d0f9      	beq.n	800bd02 <_strtod_l+0x122>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d09f      	beq.n	800bc52 <_strtod_l+0x72>
 800bd12:	2301      	movs	r3, #1
 800bd14:	2700      	movs	r7, #0
 800bd16:	220a      	movs	r2, #10
 800bd18:	46b9      	mov	r9, r7
 800bd1a:	9308      	str	r3, [sp, #32]
 800bd1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd1e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800bd20:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd22:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bd24:	7805      	ldrb	r5, [r0, #0]
 800bd26:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bd2a:	b2d9      	uxtb	r1, r3
 800bd2c:	2909      	cmp	r1, #9
 800bd2e:	d928      	bls.n	800bd82 <_strtod_l+0x1a2>
 800bd30:	2201      	movs	r2, #1
 800bd32:	4950      	ldr	r1, [pc, #320]	@ (800be74 <_strtod_l+0x294>)
 800bd34:	f001 f969 	bl	800d00a <strncmp>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d032      	beq.n	800bda2 <_strtod_l+0x1c2>
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	462a      	mov	r2, r5
 800bd40:	4603      	mov	r3, r0
 800bd42:	464d      	mov	r5, r9
 800bd44:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd46:	2a65      	cmp	r2, #101	@ 0x65
 800bd48:	d001      	beq.n	800bd4e <_strtod_l+0x16e>
 800bd4a:	2a45      	cmp	r2, #69	@ 0x45
 800bd4c:	d114      	bne.n	800bd78 <_strtod_l+0x198>
 800bd4e:	b91d      	cbnz	r5, 800bd58 <_strtod_l+0x178>
 800bd50:	9a08      	ldr	r2, [sp, #32]
 800bd52:	4302      	orrs	r2, r0
 800bd54:	d096      	beq.n	800bc84 <_strtod_l+0xa4>
 800bd56:	2500      	movs	r5, #0
 800bd58:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bd5a:	1c62      	adds	r2, r4, #1
 800bd5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd5e:	7862      	ldrb	r2, [r4, #1]
 800bd60:	2a2b      	cmp	r2, #43	@ 0x2b
 800bd62:	d07a      	beq.n	800be5a <_strtod_l+0x27a>
 800bd64:	2a2d      	cmp	r2, #45	@ 0x2d
 800bd66:	d07e      	beq.n	800be66 <_strtod_l+0x286>
 800bd68:	f04f 0c00 	mov.w	ip, #0
 800bd6c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bd70:	2909      	cmp	r1, #9
 800bd72:	f240 8085 	bls.w	800be80 <_strtod_l+0x2a0>
 800bd76:	9419      	str	r4, [sp, #100]	@ 0x64
 800bd78:	f04f 0800 	mov.w	r8, #0
 800bd7c:	e0a5      	b.n	800beca <_strtod_l+0x2ea>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e7c8      	b.n	800bd14 <_strtod_l+0x134>
 800bd82:	f1b9 0f08 	cmp.w	r9, #8
 800bd86:	bfd8      	it	le
 800bd88:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800bd8a:	f100 0001 	add.w	r0, r0, #1
 800bd8e:	bfd6      	itet	le
 800bd90:	fb02 3301 	mlale	r3, r2, r1, r3
 800bd94:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bd98:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800bd9a:	f109 0901 	add.w	r9, r9, #1
 800bd9e:	9019      	str	r0, [sp, #100]	@ 0x64
 800bda0:	e7bf      	b.n	800bd22 <_strtod_l+0x142>
 800bda2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	9219      	str	r2, [sp, #100]	@ 0x64
 800bda8:	785a      	ldrb	r2, [r3, #1]
 800bdaa:	f1b9 0f00 	cmp.w	r9, #0
 800bdae:	d03b      	beq.n	800be28 <_strtod_l+0x248>
 800bdb0:	464d      	mov	r5, r9
 800bdb2:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdb4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bdb8:	2b09      	cmp	r3, #9
 800bdba:	d912      	bls.n	800bde2 <_strtod_l+0x202>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e7c2      	b.n	800bd46 <_strtod_l+0x166>
 800bdc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	9219      	str	r2, [sp, #100]	@ 0x64
 800bdc8:	785a      	ldrb	r2, [r3, #1]
 800bdca:	2a30      	cmp	r2, #48	@ 0x30
 800bdcc:	d0f8      	beq.n	800bdc0 <_strtod_l+0x1e0>
 800bdce:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bdd2:	2b08      	cmp	r3, #8
 800bdd4:	f200 84c8 	bhi.w	800c768 <_strtod_l+0xb88>
 800bdd8:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdda:	2000      	movs	r0, #0
 800bddc:	4605      	mov	r5, r0
 800bdde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bde0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bde2:	3a30      	subs	r2, #48	@ 0x30
 800bde4:	f100 0301 	add.w	r3, r0, #1
 800bde8:	d018      	beq.n	800be1c <_strtod_l+0x23c>
 800bdea:	462e      	mov	r6, r5
 800bdec:	f04f 0e0a 	mov.w	lr, #10
 800bdf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdf2:	4419      	add	r1, r3
 800bdf4:	910a      	str	r1, [sp, #40]	@ 0x28
 800bdf6:	1c71      	adds	r1, r6, #1
 800bdf8:	eba1 0c05 	sub.w	ip, r1, r5
 800bdfc:	4563      	cmp	r3, ip
 800bdfe:	dc15      	bgt.n	800be2c <_strtod_l+0x24c>
 800be00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800be04:	182b      	adds	r3, r5, r0
 800be06:	2b08      	cmp	r3, #8
 800be08:	f105 0501 	add.w	r5, r5, #1
 800be0c:	4405      	add	r5, r0
 800be0e:	dc1a      	bgt.n	800be46 <_strtod_l+0x266>
 800be10:	230a      	movs	r3, #10
 800be12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be14:	fb03 2301 	mla	r3, r3, r1, r2
 800be18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be1a:	2300      	movs	r3, #0
 800be1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800be1e:	4618      	mov	r0, r3
 800be20:	1c51      	adds	r1, r2, #1
 800be22:	9119      	str	r1, [sp, #100]	@ 0x64
 800be24:	7852      	ldrb	r2, [r2, #1]
 800be26:	e7c5      	b.n	800bdb4 <_strtod_l+0x1d4>
 800be28:	4648      	mov	r0, r9
 800be2a:	e7ce      	b.n	800bdca <_strtod_l+0x1ea>
 800be2c:	2e08      	cmp	r6, #8
 800be2e:	dc05      	bgt.n	800be3c <_strtod_l+0x25c>
 800be30:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800be32:	fb0e f606 	mul.w	r6, lr, r6
 800be36:	960b      	str	r6, [sp, #44]	@ 0x2c
 800be38:	460e      	mov	r6, r1
 800be3a:	e7dc      	b.n	800bdf6 <_strtod_l+0x216>
 800be3c:	2910      	cmp	r1, #16
 800be3e:	bfd8      	it	le
 800be40:	fb0e f707 	mulle.w	r7, lr, r7
 800be44:	e7f8      	b.n	800be38 <_strtod_l+0x258>
 800be46:	2b0f      	cmp	r3, #15
 800be48:	bfdc      	itt	le
 800be4a:	230a      	movle	r3, #10
 800be4c:	fb03 2707 	mlale	r7, r3, r7, r2
 800be50:	e7e3      	b.n	800be1a <_strtod_l+0x23a>
 800be52:	2300      	movs	r3, #0
 800be54:	930a      	str	r3, [sp, #40]	@ 0x28
 800be56:	2301      	movs	r3, #1
 800be58:	e77a      	b.n	800bd50 <_strtod_l+0x170>
 800be5a:	f04f 0c00 	mov.w	ip, #0
 800be5e:	1ca2      	adds	r2, r4, #2
 800be60:	9219      	str	r2, [sp, #100]	@ 0x64
 800be62:	78a2      	ldrb	r2, [r4, #2]
 800be64:	e782      	b.n	800bd6c <_strtod_l+0x18c>
 800be66:	f04f 0c01 	mov.w	ip, #1
 800be6a:	e7f8      	b.n	800be5e <_strtod_l+0x27e>
 800be6c:	0800f834 	.word	0x0800f834
 800be70:	7ff00000 	.word	0x7ff00000
 800be74:	0800f669 	.word	0x0800f669
 800be78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800be7a:	1c51      	adds	r1, r2, #1
 800be7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800be7e:	7852      	ldrb	r2, [r2, #1]
 800be80:	2a30      	cmp	r2, #48	@ 0x30
 800be82:	d0f9      	beq.n	800be78 <_strtod_l+0x298>
 800be84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800be88:	2908      	cmp	r1, #8
 800be8a:	f63f af75 	bhi.w	800bd78 <_strtod_l+0x198>
 800be8e:	f04f 080a 	mov.w	r8, #10
 800be92:	3a30      	subs	r2, #48	@ 0x30
 800be94:	9209      	str	r2, [sp, #36]	@ 0x24
 800be96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800be98:	920f      	str	r2, [sp, #60]	@ 0x3c
 800be9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800be9c:	1c56      	adds	r6, r2, #1
 800be9e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bea0:	7852      	ldrb	r2, [r2, #1]
 800bea2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bea6:	f1be 0f09 	cmp.w	lr, #9
 800beaa:	d939      	bls.n	800bf20 <_strtod_l+0x340>
 800beac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800beae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800beb2:	1a76      	subs	r6, r6, r1
 800beb4:	2e08      	cmp	r6, #8
 800beb6:	dc03      	bgt.n	800bec0 <_strtod_l+0x2e0>
 800beb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800beba:	4588      	cmp	r8, r1
 800bebc:	bfa8      	it	ge
 800bebe:	4688      	movge	r8, r1
 800bec0:	f1bc 0f00 	cmp.w	ip, #0
 800bec4:	d001      	beq.n	800beca <_strtod_l+0x2ea>
 800bec6:	f1c8 0800 	rsb	r8, r8, #0
 800beca:	2d00      	cmp	r5, #0
 800becc:	d14e      	bne.n	800bf6c <_strtod_l+0x38c>
 800bece:	9908      	ldr	r1, [sp, #32]
 800bed0:	4308      	orrs	r0, r1
 800bed2:	f47f aebe 	bne.w	800bc52 <_strtod_l+0x72>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f47f aed4 	bne.w	800bc84 <_strtod_l+0xa4>
 800bedc:	2a69      	cmp	r2, #105	@ 0x69
 800bede:	d028      	beq.n	800bf32 <_strtod_l+0x352>
 800bee0:	dc25      	bgt.n	800bf2e <_strtod_l+0x34e>
 800bee2:	2a49      	cmp	r2, #73	@ 0x49
 800bee4:	d025      	beq.n	800bf32 <_strtod_l+0x352>
 800bee6:	2a4e      	cmp	r2, #78	@ 0x4e
 800bee8:	f47f aecc 	bne.w	800bc84 <_strtod_l+0xa4>
 800beec:	4999      	ldr	r1, [pc, #612]	@ (800c154 <_strtod_l+0x574>)
 800beee:	a819      	add	r0, sp, #100	@ 0x64
 800bef0:	f001 fb92 	bl	800d618 <__match>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	f43f aec5 	beq.w	800bc84 <_strtod_l+0xa4>
 800befa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b28      	cmp	r3, #40	@ 0x28
 800bf00:	d12e      	bne.n	800bf60 <_strtod_l+0x380>
 800bf02:	4995      	ldr	r1, [pc, #596]	@ (800c158 <_strtod_l+0x578>)
 800bf04:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf06:	a819      	add	r0, sp, #100	@ 0x64
 800bf08:	f001 fb9a 	bl	800d640 <__hexnan>
 800bf0c:	2805      	cmp	r0, #5
 800bf0e:	d127      	bne.n	800bf60 <_strtod_l+0x380>
 800bf10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bf16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bf1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bf1e:	e698      	b.n	800bc52 <_strtod_l+0x72>
 800bf20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf22:	fb08 2101 	mla	r1, r8, r1, r2
 800bf26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bf2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf2c:	e7b5      	b.n	800be9a <_strtod_l+0x2ba>
 800bf2e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bf30:	e7da      	b.n	800bee8 <_strtod_l+0x308>
 800bf32:	498a      	ldr	r1, [pc, #552]	@ (800c15c <_strtod_l+0x57c>)
 800bf34:	a819      	add	r0, sp, #100	@ 0x64
 800bf36:	f001 fb6f 	bl	800d618 <__match>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	f43f aea2 	beq.w	800bc84 <_strtod_l+0xa4>
 800bf40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf42:	4987      	ldr	r1, [pc, #540]	@ (800c160 <_strtod_l+0x580>)
 800bf44:	3b01      	subs	r3, #1
 800bf46:	a819      	add	r0, sp, #100	@ 0x64
 800bf48:	9319      	str	r3, [sp, #100]	@ 0x64
 800bf4a:	f001 fb65 	bl	800d618 <__match>
 800bf4e:	b910      	cbnz	r0, 800bf56 <_strtod_l+0x376>
 800bf50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf52:	3301      	adds	r3, #1
 800bf54:	9319      	str	r3, [sp, #100]	@ 0x64
 800bf56:	f04f 0a00 	mov.w	sl, #0
 800bf5a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800c164 <_strtod_l+0x584>
 800bf5e:	e678      	b.n	800bc52 <_strtod_l+0x72>
 800bf60:	4881      	ldr	r0, [pc, #516]	@ (800c168 <_strtod_l+0x588>)
 800bf62:	f001 f897 	bl	800d094 <nan>
 800bf66:	4682      	mov	sl, r0
 800bf68:	468b      	mov	fp, r1
 800bf6a:	e672      	b.n	800bc52 <_strtod_l+0x72>
 800bf6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6e:	f1b9 0f00 	cmp.w	r9, #0
 800bf72:	bf08      	it	eq
 800bf74:	46a9      	moveq	r9, r5
 800bf76:	eba8 0303 	sub.w	r3, r8, r3
 800bf7a:	2d10      	cmp	r5, #16
 800bf7c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bf7e:	462c      	mov	r4, r5
 800bf80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf82:	bfa8      	it	ge
 800bf84:	2410      	movge	r4, #16
 800bf86:	f7f4 fa2d 	bl	80003e4 <__aeabi_ui2d>
 800bf8a:	2d09      	cmp	r5, #9
 800bf8c:	4682      	mov	sl, r0
 800bf8e:	468b      	mov	fp, r1
 800bf90:	dc11      	bgt.n	800bfb6 <_strtod_l+0x3d6>
 800bf92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f43f ae5c 	beq.w	800bc52 <_strtod_l+0x72>
 800bf9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9c:	dd76      	ble.n	800c08c <_strtod_l+0x4ac>
 800bf9e:	2b16      	cmp	r3, #22
 800bfa0:	dc5d      	bgt.n	800c05e <_strtod_l+0x47e>
 800bfa2:	4972      	ldr	r1, [pc, #456]	@ (800c16c <_strtod_l+0x58c>)
 800bfa4:	4652      	mov	r2, sl
 800bfa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bfaa:	465b      	mov	r3, fp
 800bfac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb0:	f7f4 fa92 	bl	80004d8 <__aeabi_dmul>
 800bfb4:	e7d7      	b.n	800bf66 <_strtod_l+0x386>
 800bfb6:	4b6d      	ldr	r3, [pc, #436]	@ (800c16c <_strtod_l+0x58c>)
 800bfb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bfc0:	f7f4 fa8a 	bl	80004d8 <__aeabi_dmul>
 800bfc4:	4682      	mov	sl, r0
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	468b      	mov	fp, r1
 800bfca:	f7f4 fa0b 	bl	80003e4 <__aeabi_ui2d>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	f7f4 f8c9 	bl	800016c <__adddf3>
 800bfda:	2d0f      	cmp	r5, #15
 800bfdc:	4682      	mov	sl, r0
 800bfde:	468b      	mov	fp, r1
 800bfe0:	ddd7      	ble.n	800bf92 <_strtod_l+0x3b2>
 800bfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe4:	1b2c      	subs	r4, r5, r4
 800bfe6:	441c      	add	r4, r3
 800bfe8:	2c00      	cmp	r4, #0
 800bfea:	f340 8093 	ble.w	800c114 <_strtod_l+0x534>
 800bfee:	f014 030f 	ands.w	r3, r4, #15
 800bff2:	d00a      	beq.n	800c00a <_strtod_l+0x42a>
 800bff4:	495d      	ldr	r1, [pc, #372]	@ (800c16c <_strtod_l+0x58c>)
 800bff6:	4652      	mov	r2, sl
 800bff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c000:	465b      	mov	r3, fp
 800c002:	f7f4 fa69 	bl	80004d8 <__aeabi_dmul>
 800c006:	4682      	mov	sl, r0
 800c008:	468b      	mov	fp, r1
 800c00a:	f034 040f 	bics.w	r4, r4, #15
 800c00e:	d073      	beq.n	800c0f8 <_strtod_l+0x518>
 800c010:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c014:	dd49      	ble.n	800c0aa <_strtod_l+0x4ca>
 800c016:	2400      	movs	r4, #0
 800c018:	46a0      	mov	r8, r4
 800c01a:	46a1      	mov	r9, r4
 800c01c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c01e:	2322      	movs	r3, #34	@ 0x22
 800c020:	f04f 0a00 	mov.w	sl, #0
 800c024:	9a05      	ldr	r2, [sp, #20]
 800c026:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800c164 <_strtod_l+0x584>
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f43f ae0f 	beq.w	800bc52 <_strtod_l+0x72>
 800c034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c036:	9805      	ldr	r0, [sp, #20]
 800c038:	f7ff f950 	bl	800b2dc <_Bfree>
 800c03c:	4649      	mov	r1, r9
 800c03e:	9805      	ldr	r0, [sp, #20]
 800c040:	f7ff f94c 	bl	800b2dc <_Bfree>
 800c044:	4641      	mov	r1, r8
 800c046:	9805      	ldr	r0, [sp, #20]
 800c048:	f7ff f948 	bl	800b2dc <_Bfree>
 800c04c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c04e:	9805      	ldr	r0, [sp, #20]
 800c050:	f7ff f944 	bl	800b2dc <_Bfree>
 800c054:	4621      	mov	r1, r4
 800c056:	9805      	ldr	r0, [sp, #20]
 800c058:	f7ff f940 	bl	800b2dc <_Bfree>
 800c05c:	e5f9      	b.n	800bc52 <_strtod_l+0x72>
 800c05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c060:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c064:	4293      	cmp	r3, r2
 800c066:	dbbc      	blt.n	800bfe2 <_strtod_l+0x402>
 800c068:	4c40      	ldr	r4, [pc, #256]	@ (800c16c <_strtod_l+0x58c>)
 800c06a:	f1c5 050f 	rsb	r5, r5, #15
 800c06e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c072:	4652      	mov	r2, sl
 800c074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c078:	465b      	mov	r3, fp
 800c07a:	f7f4 fa2d 	bl	80004d8 <__aeabi_dmul>
 800c07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c080:	1b5d      	subs	r5, r3, r5
 800c082:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c086:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c08a:	e791      	b.n	800bfb0 <_strtod_l+0x3d0>
 800c08c:	3316      	adds	r3, #22
 800c08e:	dba8      	blt.n	800bfe2 <_strtod_l+0x402>
 800c090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c092:	4650      	mov	r0, sl
 800c094:	eba3 0808 	sub.w	r8, r3, r8
 800c098:	4b34      	ldr	r3, [pc, #208]	@ (800c16c <_strtod_l+0x58c>)
 800c09a:	4659      	mov	r1, fp
 800c09c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c0a0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c0a4:	f7f4 fb42 	bl	800072c <__aeabi_ddiv>
 800c0a8:	e75d      	b.n	800bf66 <_strtod_l+0x386>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	4650      	mov	r0, sl
 800c0ae:	4659      	mov	r1, fp
 800c0b0:	461e      	mov	r6, r3
 800c0b2:	4f2f      	ldr	r7, [pc, #188]	@ (800c170 <_strtod_l+0x590>)
 800c0b4:	1124      	asrs	r4, r4, #4
 800c0b6:	2c01      	cmp	r4, #1
 800c0b8:	dc21      	bgt.n	800c0fe <_strtod_l+0x51e>
 800c0ba:	b10b      	cbz	r3, 800c0c0 <_strtod_l+0x4e0>
 800c0bc:	4682      	mov	sl, r0
 800c0be:	468b      	mov	fp, r1
 800c0c0:	492b      	ldr	r1, [pc, #172]	@ (800c170 <_strtod_l+0x590>)
 800c0c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c0c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c0ca:	4652      	mov	r2, sl
 800c0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d0:	465b      	mov	r3, fp
 800c0d2:	f7f4 fa01 	bl	80004d8 <__aeabi_dmul>
 800c0d6:	4b23      	ldr	r3, [pc, #140]	@ (800c164 <_strtod_l+0x584>)
 800c0d8:	460a      	mov	r2, r1
 800c0da:	400b      	ands	r3, r1
 800c0dc:	4925      	ldr	r1, [pc, #148]	@ (800c174 <_strtod_l+0x594>)
 800c0de:	4682      	mov	sl, r0
 800c0e0:	428b      	cmp	r3, r1
 800c0e2:	d898      	bhi.n	800c016 <_strtod_l+0x436>
 800c0e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf86      	itte	hi
 800c0ec:	f04f 3aff 	movhi.w	sl, #4294967295
 800c0f0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800c178 <_strtod_l+0x598>
 800c0f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	9308      	str	r3, [sp, #32]
 800c0fc:	e076      	b.n	800c1ec <_strtod_l+0x60c>
 800c0fe:	07e2      	lsls	r2, r4, #31
 800c100:	d504      	bpl.n	800c10c <_strtod_l+0x52c>
 800c102:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c106:	f7f4 f9e7 	bl	80004d8 <__aeabi_dmul>
 800c10a:	2301      	movs	r3, #1
 800c10c:	3601      	adds	r6, #1
 800c10e:	1064      	asrs	r4, r4, #1
 800c110:	3708      	adds	r7, #8
 800c112:	e7d0      	b.n	800c0b6 <_strtod_l+0x4d6>
 800c114:	d0f0      	beq.n	800c0f8 <_strtod_l+0x518>
 800c116:	4264      	negs	r4, r4
 800c118:	f014 020f 	ands.w	r2, r4, #15
 800c11c:	d00a      	beq.n	800c134 <_strtod_l+0x554>
 800c11e:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <_strtod_l+0x58c>)
 800c120:	4650      	mov	r0, sl
 800c122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c126:	4659      	mov	r1, fp
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	f7f4 fafe 	bl	800072c <__aeabi_ddiv>
 800c130:	4682      	mov	sl, r0
 800c132:	468b      	mov	fp, r1
 800c134:	1124      	asrs	r4, r4, #4
 800c136:	d0df      	beq.n	800c0f8 <_strtod_l+0x518>
 800c138:	2c1f      	cmp	r4, #31
 800c13a:	dd1f      	ble.n	800c17c <_strtod_l+0x59c>
 800c13c:	2400      	movs	r4, #0
 800c13e:	46a0      	mov	r8, r4
 800c140:	46a1      	mov	r9, r4
 800c142:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c144:	2322      	movs	r3, #34	@ 0x22
 800c146:	9a05      	ldr	r2, [sp, #20]
 800c148:	f04f 0a00 	mov.w	sl, #0
 800c14c:	f04f 0b00 	mov.w	fp, #0
 800c150:	6013      	str	r3, [r2, #0]
 800c152:	e76b      	b.n	800c02c <_strtod_l+0x44c>
 800c154:	0800f557 	.word	0x0800f557
 800c158:	0800f820 	.word	0x0800f820
 800c15c:	0800f54f 	.word	0x0800f54f
 800c160:	0800f586 	.word	0x0800f586
 800c164:	7ff00000 	.word	0x7ff00000
 800c168:	0800f6bf 	.word	0x0800f6bf
 800c16c:	0800f758 	.word	0x0800f758
 800c170:	0800f730 	.word	0x0800f730
 800c174:	7ca00000 	.word	0x7ca00000
 800c178:	7fefffff 	.word	0x7fefffff
 800c17c:	f014 0310 	ands.w	r3, r4, #16
 800c180:	bf18      	it	ne
 800c182:	236a      	movne	r3, #106	@ 0x6a
 800c184:	4650      	mov	r0, sl
 800c186:	9308      	str	r3, [sp, #32]
 800c188:	4659      	mov	r1, fp
 800c18a:	2300      	movs	r3, #0
 800c18c:	4e77      	ldr	r6, [pc, #476]	@ (800c36c <_strtod_l+0x78c>)
 800c18e:	07e7      	lsls	r7, r4, #31
 800c190:	d504      	bpl.n	800c19c <_strtod_l+0x5bc>
 800c192:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c196:	f7f4 f99f 	bl	80004d8 <__aeabi_dmul>
 800c19a:	2301      	movs	r3, #1
 800c19c:	1064      	asrs	r4, r4, #1
 800c19e:	f106 0608 	add.w	r6, r6, #8
 800c1a2:	d1f4      	bne.n	800c18e <_strtod_l+0x5ae>
 800c1a4:	b10b      	cbz	r3, 800c1aa <_strtod_l+0x5ca>
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	468b      	mov	fp, r1
 800c1aa:	9b08      	ldr	r3, [sp, #32]
 800c1ac:	b1b3      	cbz	r3, 800c1dc <_strtod_l+0x5fc>
 800c1ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c1b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	4659      	mov	r1, fp
 800c1ba:	dd0f      	ble.n	800c1dc <_strtod_l+0x5fc>
 800c1bc:	2b1f      	cmp	r3, #31
 800c1be:	dd58      	ble.n	800c272 <_strtod_l+0x692>
 800c1c0:	2b34      	cmp	r3, #52	@ 0x34
 800c1c2:	bfd8      	it	le
 800c1c4:	f04f 33ff 	movle.w	r3, #4294967295
 800c1c8:	f04f 0a00 	mov.w	sl, #0
 800c1cc:	bfcf      	iteee	gt
 800c1ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c1d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c1d6:	4093      	lslle	r3, r2
 800c1d8:	ea03 0b01 	andle.w	fp, r3, r1
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	f7f4 fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d1a7      	bne.n	800c13c <_strtod_l+0x55c>
 800c1ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ee:	464a      	mov	r2, r9
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c1f4:	462b      	mov	r3, r5
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	f7ff f8d8 	bl	800b3ac <__s2b>
 800c1fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f43f af09 	beq.w	800c016 <_strtod_l+0x436>
 800c204:	2400      	movs	r4, #0
 800c206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20a:	2a00      	cmp	r2, #0
 800c20c:	eba3 0308 	sub.w	r3, r3, r8
 800c210:	bfa8      	it	ge
 800c212:	2300      	movge	r3, #0
 800c214:	46a0      	mov	r8, r4
 800c216:	9312      	str	r3, [sp, #72]	@ 0x48
 800c218:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c21c:	9316      	str	r3, [sp, #88]	@ 0x58
 800c21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c220:	9805      	ldr	r0, [sp, #20]
 800c222:	6859      	ldr	r1, [r3, #4]
 800c224:	f7ff f81a 	bl	800b25c <_Balloc>
 800c228:	4681      	mov	r9, r0
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f43f aef7 	beq.w	800c01e <_strtod_l+0x43e>
 800c230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c232:	300c      	adds	r0, #12
 800c234:	691a      	ldr	r2, [r3, #16]
 800c236:	f103 010c 	add.w	r1, r3, #12
 800c23a:	3202      	adds	r2, #2
 800c23c:	0092      	lsls	r2, r2, #2
 800c23e:	f7fe f8a0 	bl	800a382 <memcpy>
 800c242:	ab1c      	add	r3, sp, #112	@ 0x70
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	4652      	mov	r2, sl
 800c24c:	465b      	mov	r3, fp
 800c24e:	9805      	ldr	r0, [sp, #20]
 800c250:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c254:	f7ff fbd6 	bl	800ba04 <__d2b>
 800c258:	901a      	str	r0, [sp, #104]	@ 0x68
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f43f aedf 	beq.w	800c01e <_strtod_l+0x43e>
 800c260:	2101      	movs	r1, #1
 800c262:	9805      	ldr	r0, [sp, #20]
 800c264:	f7ff f938 	bl	800b4d8 <__i2b>
 800c268:	4680      	mov	r8, r0
 800c26a:	b948      	cbnz	r0, 800c280 <_strtod_l+0x6a0>
 800c26c:	f04f 0800 	mov.w	r8, #0
 800c270:	e6d5      	b.n	800c01e <_strtod_l+0x43e>
 800c272:	f04f 32ff 	mov.w	r2, #4294967295
 800c276:	fa02 f303 	lsl.w	r3, r2, r3
 800c27a:	ea03 0a0a 	and.w	sl, r3, sl
 800c27e:	e7ad      	b.n	800c1dc <_strtod_l+0x5fc>
 800c280:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c282:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c284:	2d00      	cmp	r5, #0
 800c286:	bfab      	itete	ge
 800c288:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c28a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c28c:	18ef      	addge	r7, r5, r3
 800c28e:	1b5e      	sublt	r6, r3, r5
 800c290:	9b08      	ldr	r3, [sp, #32]
 800c292:	bfa8      	it	ge
 800c294:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c296:	eba5 0503 	sub.w	r5, r5, r3
 800c29a:	4415      	add	r5, r2
 800c29c:	4b34      	ldr	r3, [pc, #208]	@ (800c370 <_strtod_l+0x790>)
 800c29e:	f105 35ff 	add.w	r5, r5, #4294967295
 800c2a2:	bfb8      	it	lt
 800c2a4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c2a6:	429d      	cmp	r5, r3
 800c2a8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c2ac:	da50      	bge.n	800c350 <_strtod_l+0x770>
 800c2ae:	1b5b      	subs	r3, r3, r5
 800c2b0:	2b1f      	cmp	r3, #31
 800c2b2:	f04f 0101 	mov.w	r1, #1
 800c2b6:	eba2 0203 	sub.w	r2, r2, r3
 800c2ba:	dc3d      	bgt.n	800c338 <_strtod_l+0x758>
 800c2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2c6:	18bd      	adds	r5, r7, r2
 800c2c8:	9b08      	ldr	r3, [sp, #32]
 800c2ca:	42af      	cmp	r7, r5
 800c2cc:	4416      	add	r6, r2
 800c2ce:	441e      	add	r6, r3
 800c2d0:	463b      	mov	r3, r7
 800c2d2:	bfa8      	it	ge
 800c2d4:	462b      	movge	r3, r5
 800c2d6:	42b3      	cmp	r3, r6
 800c2d8:	bfa8      	it	ge
 800c2da:	4633      	movge	r3, r6
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfc2      	ittt	gt
 800c2e0:	1aed      	subgt	r5, r5, r3
 800c2e2:	1af6      	subgt	r6, r6, r3
 800c2e4:	1aff      	subgt	r7, r7, r3
 800c2e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dd16      	ble.n	800c31a <_strtod_l+0x73a>
 800c2ec:	4641      	mov	r1, r8
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	9805      	ldr	r0, [sp, #20]
 800c2f2:	f7ff f9a9 	bl	800b648 <__pow5mult>
 800c2f6:	4680      	mov	r8, r0
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d0b7      	beq.n	800c26c <_strtod_l+0x68c>
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c300:	9805      	ldr	r0, [sp, #20]
 800c302:	f7ff f8ff 	bl	800b504 <__multiply>
 800c306:	900a      	str	r0, [sp, #40]	@ 0x28
 800c308:	2800      	cmp	r0, #0
 800c30a:	f43f ae88 	beq.w	800c01e <_strtod_l+0x43e>
 800c30e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c310:	9805      	ldr	r0, [sp, #20]
 800c312:	f7fe ffe3 	bl	800b2dc <_Bfree>
 800c316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c318:	931a      	str	r3, [sp, #104]	@ 0x68
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	dc1d      	bgt.n	800c35a <_strtod_l+0x77a>
 800c31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	dd27      	ble.n	800c374 <_strtod_l+0x794>
 800c324:	4649      	mov	r1, r9
 800c326:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c328:	9805      	ldr	r0, [sp, #20]
 800c32a:	f7ff f98d 	bl	800b648 <__pow5mult>
 800c32e:	4681      	mov	r9, r0
 800c330:	bb00      	cbnz	r0, 800c374 <_strtod_l+0x794>
 800c332:	f04f 0900 	mov.w	r9, #0
 800c336:	e672      	b.n	800c01e <_strtod_l+0x43e>
 800c338:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c33c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c340:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c344:	35e2      	adds	r5, #226	@ 0xe2
 800c346:	fa01 f305 	lsl.w	r3, r1, r5
 800c34a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c34c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c34e:	e7ba      	b.n	800c2c6 <_strtod_l+0x6e6>
 800c350:	2300      	movs	r3, #0
 800c352:	9310      	str	r3, [sp, #64]	@ 0x40
 800c354:	2301      	movs	r3, #1
 800c356:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c358:	e7b5      	b.n	800c2c6 <_strtod_l+0x6e6>
 800c35a:	462a      	mov	r2, r5
 800c35c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c35e:	9805      	ldr	r0, [sp, #20]
 800c360:	f7ff f9cc 	bl	800b6fc <__lshift>
 800c364:	901a      	str	r0, [sp, #104]	@ 0x68
 800c366:	2800      	cmp	r0, #0
 800c368:	d1d9      	bne.n	800c31e <_strtod_l+0x73e>
 800c36a:	e658      	b.n	800c01e <_strtod_l+0x43e>
 800c36c:	0800f848 	.word	0x0800f848
 800c370:	fffffc02 	.word	0xfffffc02
 800c374:	2e00      	cmp	r6, #0
 800c376:	dd07      	ble.n	800c388 <_strtod_l+0x7a8>
 800c378:	4649      	mov	r1, r9
 800c37a:	4632      	mov	r2, r6
 800c37c:	9805      	ldr	r0, [sp, #20]
 800c37e:	f7ff f9bd 	bl	800b6fc <__lshift>
 800c382:	4681      	mov	r9, r0
 800c384:	2800      	cmp	r0, #0
 800c386:	d0d4      	beq.n	800c332 <_strtod_l+0x752>
 800c388:	2f00      	cmp	r7, #0
 800c38a:	dd08      	ble.n	800c39e <_strtod_l+0x7be>
 800c38c:	4641      	mov	r1, r8
 800c38e:	463a      	mov	r2, r7
 800c390:	9805      	ldr	r0, [sp, #20]
 800c392:	f7ff f9b3 	bl	800b6fc <__lshift>
 800c396:	4680      	mov	r8, r0
 800c398:	2800      	cmp	r0, #0
 800c39a:	f43f ae40 	beq.w	800c01e <_strtod_l+0x43e>
 800c39e:	464a      	mov	r2, r9
 800c3a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3a2:	9805      	ldr	r0, [sp, #20]
 800c3a4:	f7ff fa32 	bl	800b80c <__mdiff>
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	f43f ae37 	beq.w	800c01e <_strtod_l+0x43e>
 800c3b0:	68c3      	ldr	r3, [r0, #12]
 800c3b2:	4641      	mov	r1, r8
 800c3b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60c3      	str	r3, [r0, #12]
 800c3ba:	f7ff fa0b 	bl	800b7d4 <__mcmp>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	da3d      	bge.n	800c43e <_strtod_l+0x85e>
 800c3c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3c4:	ea53 030a 	orrs.w	r3, r3, sl
 800c3c8:	d163      	bne.n	800c492 <_strtod_l+0x8b2>
 800c3ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d15f      	bne.n	800c492 <_strtod_l+0x8b2>
 800c3d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3d6:	0d1b      	lsrs	r3, r3, #20
 800c3d8:	051b      	lsls	r3, r3, #20
 800c3da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c3de:	d958      	bls.n	800c492 <_strtod_l+0x8b2>
 800c3e0:	6963      	ldr	r3, [r4, #20]
 800c3e2:	b913      	cbnz	r3, 800c3ea <_strtod_l+0x80a>
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	dd53      	ble.n	800c492 <_strtod_l+0x8b2>
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	9805      	ldr	r0, [sp, #20]
 800c3f0:	f7ff f984 	bl	800b6fc <__lshift>
 800c3f4:	4641      	mov	r1, r8
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	f7ff f9ec 	bl	800b7d4 <__mcmp>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	dd48      	ble.n	800c492 <_strtod_l+0x8b2>
 800c400:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c404:	9a08      	ldr	r2, [sp, #32]
 800c406:	0d1b      	lsrs	r3, r3, #20
 800c408:	051b      	lsls	r3, r3, #20
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	d062      	beq.n	800c4d4 <_strtod_l+0x8f4>
 800c40e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c412:	d85f      	bhi.n	800c4d4 <_strtod_l+0x8f4>
 800c414:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c418:	f67f ae94 	bls.w	800c144 <_strtod_l+0x564>
 800c41c:	4650      	mov	r0, sl
 800c41e:	4659      	mov	r1, fp
 800c420:	4ba3      	ldr	r3, [pc, #652]	@ (800c6b0 <_strtod_l+0xad0>)
 800c422:	2200      	movs	r2, #0
 800c424:	f7f4 f858 	bl	80004d8 <__aeabi_dmul>
 800c428:	4ba2      	ldr	r3, [pc, #648]	@ (800c6b4 <_strtod_l+0xad4>)
 800c42a:	4682      	mov	sl, r0
 800c42c:	400b      	ands	r3, r1
 800c42e:	468b      	mov	fp, r1
 800c430:	2b00      	cmp	r3, #0
 800c432:	f47f adff 	bne.w	800c034 <_strtod_l+0x454>
 800c436:	2322      	movs	r3, #34	@ 0x22
 800c438:	9a05      	ldr	r2, [sp, #20]
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	e5fa      	b.n	800c034 <_strtod_l+0x454>
 800c43e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c442:	d165      	bne.n	800c510 <_strtod_l+0x930>
 800c444:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c44a:	b35a      	cbz	r2, 800c4a4 <_strtod_l+0x8c4>
 800c44c:	4a9a      	ldr	r2, [pc, #616]	@ (800c6b8 <_strtod_l+0xad8>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d12b      	bne.n	800c4aa <_strtod_l+0x8ca>
 800c452:	9b08      	ldr	r3, [sp, #32]
 800c454:	4651      	mov	r1, sl
 800c456:	b303      	cbz	r3, 800c49a <_strtod_l+0x8ba>
 800c458:	465a      	mov	r2, fp
 800c45a:	4b96      	ldr	r3, [pc, #600]	@ (800c6b4 <_strtod_l+0xad4>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c462:	f04f 32ff 	mov.w	r2, #4294967295
 800c466:	d81b      	bhi.n	800c4a0 <_strtod_l+0x8c0>
 800c468:	0d1b      	lsrs	r3, r3, #20
 800c46a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c46e:	fa02 f303 	lsl.w	r3, r2, r3
 800c472:	4299      	cmp	r1, r3
 800c474:	d119      	bne.n	800c4aa <_strtod_l+0x8ca>
 800c476:	4b91      	ldr	r3, [pc, #580]	@ (800c6bc <_strtod_l+0xadc>)
 800c478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d102      	bne.n	800c484 <_strtod_l+0x8a4>
 800c47e:	3101      	adds	r1, #1
 800c480:	f43f adcd 	beq.w	800c01e <_strtod_l+0x43e>
 800c484:	f04f 0a00 	mov.w	sl, #0
 800c488:	4b8a      	ldr	r3, [pc, #552]	@ (800c6b4 <_strtod_l+0xad4>)
 800c48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c48c:	401a      	ands	r2, r3
 800c48e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1c1      	bne.n	800c41c <_strtod_l+0x83c>
 800c498:	e5cc      	b.n	800c034 <_strtod_l+0x454>
 800c49a:	f04f 33ff 	mov.w	r3, #4294967295
 800c49e:	e7e8      	b.n	800c472 <_strtod_l+0x892>
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	e7e6      	b.n	800c472 <_strtod_l+0x892>
 800c4a4:	ea53 030a 	orrs.w	r3, r3, sl
 800c4a8:	d0aa      	beq.n	800c400 <_strtod_l+0x820>
 800c4aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4ac:	b1db      	cbz	r3, 800c4e6 <_strtod_l+0x906>
 800c4ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4b0:	4213      	tst	r3, r2
 800c4b2:	d0ee      	beq.n	800c492 <_strtod_l+0x8b2>
 800c4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	4659      	mov	r1, fp
 800c4ba:	9a08      	ldr	r2, [sp, #32]
 800c4bc:	b1bb      	cbz	r3, 800c4ee <_strtod_l+0x90e>
 800c4be:	f7ff fb6d 	bl	800bb9c <sulp>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4ca:	f7f3 fe4f 	bl	800016c <__adddf3>
 800c4ce:	4682      	mov	sl, r0
 800c4d0:	468b      	mov	fp, r1
 800c4d2:	e7de      	b.n	800c492 <_strtod_l+0x8b2>
 800c4d4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c4d8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c4dc:	f04f 3aff 	mov.w	sl, #4294967295
 800c4e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c4e4:	e7d5      	b.n	800c492 <_strtod_l+0x8b2>
 800c4e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c4e8:	ea13 0f0a 	tst.w	r3, sl
 800c4ec:	e7e1      	b.n	800c4b2 <_strtod_l+0x8d2>
 800c4ee:	f7ff fb55 	bl	800bb9c <sulp>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4fa:	f7f3 fe35 	bl	8000168 <__aeabi_dsub>
 800c4fe:	2200      	movs	r2, #0
 800c500:	2300      	movs	r3, #0
 800c502:	4682      	mov	sl, r0
 800c504:	468b      	mov	fp, r1
 800c506:	f7f4 fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d0c1      	beq.n	800c492 <_strtod_l+0x8b2>
 800c50e:	e619      	b.n	800c144 <_strtod_l+0x564>
 800c510:	4641      	mov	r1, r8
 800c512:	4620      	mov	r0, r4
 800c514:	f7ff face 	bl	800bab4 <__ratio>
 800c518:	2200      	movs	r2, #0
 800c51a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c51e:	4606      	mov	r6, r0
 800c520:	460f      	mov	r7, r1
 800c522:	f7f4 fa55 	bl	80009d0 <__aeabi_dcmple>
 800c526:	2800      	cmp	r0, #0
 800c528:	d06d      	beq.n	800c606 <_strtod_l+0xa26>
 800c52a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d178      	bne.n	800c622 <_strtod_l+0xa42>
 800c530:	f1ba 0f00 	cmp.w	sl, #0
 800c534:	d156      	bne.n	800c5e4 <_strtod_l+0xa04>
 800c536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d158      	bne.n	800c5f2 <_strtod_l+0xa12>
 800c540:	2200      	movs	r2, #0
 800c542:	4630      	mov	r0, r6
 800c544:	4639      	mov	r1, r7
 800c546:	4b5e      	ldr	r3, [pc, #376]	@ (800c6c0 <_strtod_l+0xae0>)
 800c548:	f7f4 fa38 	bl	80009bc <__aeabi_dcmplt>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d157      	bne.n	800c600 <_strtod_l+0xa20>
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	2200      	movs	r2, #0
 800c556:	4b5b      	ldr	r3, [pc, #364]	@ (800c6c4 <_strtod_l+0xae4>)
 800c558:	f7f3 ffbe 	bl	80004d8 <__aeabi_dmul>
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c564:	9606      	str	r6, [sp, #24]
 800c566:	9307      	str	r3, [sp, #28]
 800c568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c56c:	4d51      	ldr	r5, [pc, #324]	@ (800c6b4 <_strtod_l+0xad4>)
 800c56e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c574:	401d      	ands	r5, r3
 800c576:	4b54      	ldr	r3, [pc, #336]	@ (800c6c8 <_strtod_l+0xae8>)
 800c578:	429d      	cmp	r5, r3
 800c57a:	f040 80ab 	bne.w	800c6d4 <_strtod_l+0xaf4>
 800c57e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c580:	4650      	mov	r0, sl
 800c582:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c586:	4659      	mov	r1, fp
 800c588:	f7ff f9d4 	bl	800b934 <__ulp>
 800c58c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c590:	f7f3 ffa2 	bl	80004d8 <__aeabi_dmul>
 800c594:	4652      	mov	r2, sl
 800c596:	465b      	mov	r3, fp
 800c598:	f7f3 fde8 	bl	800016c <__adddf3>
 800c59c:	460b      	mov	r3, r1
 800c59e:	4945      	ldr	r1, [pc, #276]	@ (800c6b4 <_strtod_l+0xad4>)
 800c5a0:	4a4a      	ldr	r2, [pc, #296]	@ (800c6cc <_strtod_l+0xaec>)
 800c5a2:	4019      	ands	r1, r3
 800c5a4:	4291      	cmp	r1, r2
 800c5a6:	4682      	mov	sl, r0
 800c5a8:	d942      	bls.n	800c630 <_strtod_l+0xa50>
 800c5aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c5ac:	4b43      	ldr	r3, [pc, #268]	@ (800c6bc <_strtod_l+0xadc>)
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d103      	bne.n	800c5ba <_strtod_l+0x9da>
 800c5b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	f43f ad32 	beq.w	800c01e <_strtod_l+0x43e>
 800c5ba:	f04f 3aff 	mov.w	sl, #4294967295
 800c5be:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800c6bc <_strtod_l+0xadc>
 800c5c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5c4:	9805      	ldr	r0, [sp, #20]
 800c5c6:	f7fe fe89 	bl	800b2dc <_Bfree>
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	9805      	ldr	r0, [sp, #20]
 800c5ce:	f7fe fe85 	bl	800b2dc <_Bfree>
 800c5d2:	4641      	mov	r1, r8
 800c5d4:	9805      	ldr	r0, [sp, #20]
 800c5d6:	f7fe fe81 	bl	800b2dc <_Bfree>
 800c5da:	4621      	mov	r1, r4
 800c5dc:	9805      	ldr	r0, [sp, #20]
 800c5de:	f7fe fe7d 	bl	800b2dc <_Bfree>
 800c5e2:	e61c      	b.n	800c21e <_strtod_l+0x63e>
 800c5e4:	f1ba 0f01 	cmp.w	sl, #1
 800c5e8:	d103      	bne.n	800c5f2 <_strtod_l+0xa12>
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f43f ada9 	beq.w	800c144 <_strtod_l+0x564>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	4b36      	ldr	r3, [pc, #216]	@ (800c6d0 <_strtod_l+0xaf0>)
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c5fc:	4f30      	ldr	r7, [pc, #192]	@ (800c6c0 <_strtod_l+0xae0>)
 800c5fe:	e7b3      	b.n	800c568 <_strtod_l+0x988>
 800c600:	2600      	movs	r6, #0
 800c602:	4f30      	ldr	r7, [pc, #192]	@ (800c6c4 <_strtod_l+0xae4>)
 800c604:	e7ac      	b.n	800c560 <_strtod_l+0x980>
 800c606:	4630      	mov	r0, r6
 800c608:	4639      	mov	r1, r7
 800c60a:	4b2e      	ldr	r3, [pc, #184]	@ (800c6c4 <_strtod_l+0xae4>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	f7f3 ff63 	bl	80004d8 <__aeabi_dmul>
 800c612:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0a1      	beq.n	800c560 <_strtod_l+0x980>
 800c61c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c620:	e7a2      	b.n	800c568 <_strtod_l+0x988>
 800c622:	2200      	movs	r2, #0
 800c624:	4b26      	ldr	r3, [pc, #152]	@ (800c6c0 <_strtod_l+0xae0>)
 800c626:	4616      	mov	r6, r2
 800c628:	461f      	mov	r7, r3
 800c62a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c62e:	e79b      	b.n	800c568 <_strtod_l+0x988>
 800c630:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c634:	9b08      	ldr	r3, [sp, #32]
 800c636:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1c1      	bne.n	800c5c2 <_strtod_l+0x9e2>
 800c63e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c642:	0d1b      	lsrs	r3, r3, #20
 800c644:	051b      	lsls	r3, r3, #20
 800c646:	429d      	cmp	r5, r3
 800c648:	d1bb      	bne.n	800c5c2 <_strtod_l+0x9e2>
 800c64a:	4630      	mov	r0, r6
 800c64c:	4639      	mov	r1, r7
 800c64e:	f7f4 fd9b 	bl	8001188 <__aeabi_d2lz>
 800c652:	f7f3 ff13 	bl	800047c <__aeabi_l2d>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4630      	mov	r0, r6
 800c65c:	4639      	mov	r1, r7
 800c65e:	f7f3 fd83 	bl	8000168 <__aeabi_dsub>
 800c662:	460b      	mov	r3, r1
 800c664:	4602      	mov	r2, r0
 800c666:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c66a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c66e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c670:	ea46 060a 	orr.w	r6, r6, sl
 800c674:	431e      	orrs	r6, r3
 800c676:	d06a      	beq.n	800c74e <_strtod_l+0xb6e>
 800c678:	a309      	add	r3, pc, #36	@ (adr r3, 800c6a0 <_strtod_l+0xac0>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	f7f4 f99d 	bl	80009bc <__aeabi_dcmplt>
 800c682:	2800      	cmp	r0, #0
 800c684:	f47f acd6 	bne.w	800c034 <_strtod_l+0x454>
 800c688:	a307      	add	r3, pc, #28	@ (adr r3, 800c6a8 <_strtod_l+0xac8>)
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c692:	f7f4 f9b1 	bl	80009f8 <__aeabi_dcmpgt>
 800c696:	2800      	cmp	r0, #0
 800c698:	d093      	beq.n	800c5c2 <_strtod_l+0x9e2>
 800c69a:	e4cb      	b.n	800c034 <_strtod_l+0x454>
 800c69c:	f3af 8000 	nop.w
 800c6a0:	94a03595 	.word	0x94a03595
 800c6a4:	3fdfffff 	.word	0x3fdfffff
 800c6a8:	35afe535 	.word	0x35afe535
 800c6ac:	3fe00000 	.word	0x3fe00000
 800c6b0:	39500000 	.word	0x39500000
 800c6b4:	7ff00000 	.word	0x7ff00000
 800c6b8:	000fffff 	.word	0x000fffff
 800c6bc:	7fefffff 	.word	0x7fefffff
 800c6c0:	3ff00000 	.word	0x3ff00000
 800c6c4:	3fe00000 	.word	0x3fe00000
 800c6c8:	7fe00000 	.word	0x7fe00000
 800c6cc:	7c9fffff 	.word	0x7c9fffff
 800c6d0:	bff00000 	.word	0xbff00000
 800c6d4:	9b08      	ldr	r3, [sp, #32]
 800c6d6:	b323      	cbz	r3, 800c722 <_strtod_l+0xb42>
 800c6d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c6dc:	d821      	bhi.n	800c722 <_strtod_l+0xb42>
 800c6de:	a328      	add	r3, pc, #160	@ (adr r3, 800c780 <_strtod_l+0xba0>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	f7f4 f972 	bl	80009d0 <__aeabi_dcmple>
 800c6ec:	b1a0      	cbz	r0, 800c718 <_strtod_l+0xb38>
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7f4 f9c9 	bl	8000a88 <__aeabi_d2uiz>
 800c6f6:	2801      	cmp	r0, #1
 800c6f8:	bf38      	it	cc
 800c6fa:	2001      	movcc	r0, #1
 800c6fc:	f7f3 fe72 	bl	80003e4 <__aeabi_ui2d>
 800c700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c702:	4606      	mov	r6, r0
 800c704:	460f      	mov	r7, r1
 800c706:	b9fb      	cbnz	r3, 800c748 <_strtod_l+0xb68>
 800c708:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c70c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c70e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c710:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c714:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c718:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c71a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c71e:	1b5b      	subs	r3, r3, r5
 800c720:	9311      	str	r3, [sp, #68]	@ 0x44
 800c722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c726:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c72a:	f7ff f903 	bl	800b934 <__ulp>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4650      	mov	r0, sl
 800c734:	4659      	mov	r1, fp
 800c736:	f7f3 fecf 	bl	80004d8 <__aeabi_dmul>
 800c73a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c73e:	f7f3 fd15 	bl	800016c <__adddf3>
 800c742:	4682      	mov	sl, r0
 800c744:	468b      	mov	fp, r1
 800c746:	e775      	b.n	800c634 <_strtod_l+0xa54>
 800c748:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c74c:	e7e0      	b.n	800c710 <_strtod_l+0xb30>
 800c74e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c788 <_strtod_l+0xba8>)
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	f7f4 f932 	bl	80009bc <__aeabi_dcmplt>
 800c758:	e79d      	b.n	800c696 <_strtod_l+0xab6>
 800c75a:	2300      	movs	r3, #0
 800c75c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c75e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c760:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c762:	6013      	str	r3, [r2, #0]
 800c764:	f7ff ba79 	b.w	800bc5a <_strtod_l+0x7a>
 800c768:	2a65      	cmp	r2, #101	@ 0x65
 800c76a:	f43f ab72 	beq.w	800be52 <_strtod_l+0x272>
 800c76e:	2a45      	cmp	r2, #69	@ 0x45
 800c770:	f43f ab6f 	beq.w	800be52 <_strtod_l+0x272>
 800c774:	2301      	movs	r3, #1
 800c776:	f7ff bbaa 	b.w	800bece <_strtod_l+0x2ee>
 800c77a:	bf00      	nop
 800c77c:	f3af 8000 	nop.w
 800c780:	ffc00000 	.word	0xffc00000
 800c784:	41dfffff 	.word	0x41dfffff
 800c788:	94a03595 	.word	0x94a03595
 800c78c:	3fcfffff 	.word	0x3fcfffff

0800c790 <_strtod_r>:
 800c790:	4b01      	ldr	r3, [pc, #4]	@ (800c798 <_strtod_r+0x8>)
 800c792:	f7ff ba25 	b.w	800bbe0 <_strtod_l>
 800c796:	bf00      	nop
 800c798:	20000080 	.word	0x20000080

0800c79c <_strtol_l.isra.0>:
 800c79c:	2b24      	cmp	r3, #36	@ 0x24
 800c79e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a2:	4686      	mov	lr, r0
 800c7a4:	4690      	mov	r8, r2
 800c7a6:	d801      	bhi.n	800c7ac <_strtol_l.isra.0+0x10>
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d106      	bne.n	800c7ba <_strtol_l.isra.0+0x1e>
 800c7ac:	f7fd fdae 	bl	800a30c <__errno>
 800c7b0:	2316      	movs	r3, #22
 800c7b2:	6003      	str	r3, [r0, #0]
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	4833      	ldr	r0, [pc, #204]	@ (800c88c <_strtol_l.isra.0+0xf0>)
 800c7be:	462a      	mov	r2, r5
 800c7c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7c4:	5d06      	ldrb	r6, [r0, r4]
 800c7c6:	f016 0608 	ands.w	r6, r6, #8
 800c7ca:	d1f8      	bne.n	800c7be <_strtol_l.isra.0+0x22>
 800c7cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c7ce:	d110      	bne.n	800c7f2 <_strtol_l.isra.0+0x56>
 800c7d0:	2601      	movs	r6, #1
 800c7d2:	782c      	ldrb	r4, [r5, #0]
 800c7d4:	1c95      	adds	r5, r2, #2
 800c7d6:	f033 0210 	bics.w	r2, r3, #16
 800c7da:	d115      	bne.n	800c808 <_strtol_l.isra.0+0x6c>
 800c7dc:	2c30      	cmp	r4, #48	@ 0x30
 800c7de:	d10d      	bne.n	800c7fc <_strtol_l.isra.0+0x60>
 800c7e0:	782a      	ldrb	r2, [r5, #0]
 800c7e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c7e6:	2a58      	cmp	r2, #88	@ 0x58
 800c7e8:	d108      	bne.n	800c7fc <_strtol_l.isra.0+0x60>
 800c7ea:	786c      	ldrb	r4, [r5, #1]
 800c7ec:	3502      	adds	r5, #2
 800c7ee:	2310      	movs	r3, #16
 800c7f0:	e00a      	b.n	800c808 <_strtol_l.isra.0+0x6c>
 800c7f2:	2c2b      	cmp	r4, #43	@ 0x2b
 800c7f4:	bf04      	itt	eq
 800c7f6:	782c      	ldrbeq	r4, [r5, #0]
 800c7f8:	1c95      	addeq	r5, r2, #2
 800c7fa:	e7ec      	b.n	800c7d6 <_strtol_l.isra.0+0x3a>
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1f6      	bne.n	800c7ee <_strtol_l.isra.0+0x52>
 800c800:	2c30      	cmp	r4, #48	@ 0x30
 800c802:	bf14      	ite	ne
 800c804:	230a      	movne	r3, #10
 800c806:	2308      	moveq	r3, #8
 800c808:	2200      	movs	r2, #0
 800c80a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c80e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c812:	fbbc f9f3 	udiv	r9, ip, r3
 800c816:	4610      	mov	r0, r2
 800c818:	fb03 ca19 	mls	sl, r3, r9, ip
 800c81c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c820:	2f09      	cmp	r7, #9
 800c822:	d80f      	bhi.n	800c844 <_strtol_l.isra.0+0xa8>
 800c824:	463c      	mov	r4, r7
 800c826:	42a3      	cmp	r3, r4
 800c828:	dd1b      	ble.n	800c862 <_strtol_l.isra.0+0xc6>
 800c82a:	1c57      	adds	r7, r2, #1
 800c82c:	d007      	beq.n	800c83e <_strtol_l.isra.0+0xa2>
 800c82e:	4581      	cmp	r9, r0
 800c830:	d314      	bcc.n	800c85c <_strtol_l.isra.0+0xc0>
 800c832:	d101      	bne.n	800c838 <_strtol_l.isra.0+0x9c>
 800c834:	45a2      	cmp	sl, r4
 800c836:	db11      	blt.n	800c85c <_strtol_l.isra.0+0xc0>
 800c838:	2201      	movs	r2, #1
 800c83a:	fb00 4003 	mla	r0, r0, r3, r4
 800c83e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c842:	e7eb      	b.n	800c81c <_strtol_l.isra.0+0x80>
 800c844:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c848:	2f19      	cmp	r7, #25
 800c84a:	d801      	bhi.n	800c850 <_strtol_l.isra.0+0xb4>
 800c84c:	3c37      	subs	r4, #55	@ 0x37
 800c84e:	e7ea      	b.n	800c826 <_strtol_l.isra.0+0x8a>
 800c850:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c854:	2f19      	cmp	r7, #25
 800c856:	d804      	bhi.n	800c862 <_strtol_l.isra.0+0xc6>
 800c858:	3c57      	subs	r4, #87	@ 0x57
 800c85a:	e7e4      	b.n	800c826 <_strtol_l.isra.0+0x8a>
 800c85c:	f04f 32ff 	mov.w	r2, #4294967295
 800c860:	e7ed      	b.n	800c83e <_strtol_l.isra.0+0xa2>
 800c862:	1c53      	adds	r3, r2, #1
 800c864:	d108      	bne.n	800c878 <_strtol_l.isra.0+0xdc>
 800c866:	2322      	movs	r3, #34	@ 0x22
 800c868:	4660      	mov	r0, ip
 800c86a:	f8ce 3000 	str.w	r3, [lr]
 800c86e:	f1b8 0f00 	cmp.w	r8, #0
 800c872:	d0a0      	beq.n	800c7b6 <_strtol_l.isra.0+0x1a>
 800c874:	1e69      	subs	r1, r5, #1
 800c876:	e006      	b.n	800c886 <_strtol_l.isra.0+0xea>
 800c878:	b106      	cbz	r6, 800c87c <_strtol_l.isra.0+0xe0>
 800c87a:	4240      	negs	r0, r0
 800c87c:	f1b8 0f00 	cmp.w	r8, #0
 800c880:	d099      	beq.n	800c7b6 <_strtol_l.isra.0+0x1a>
 800c882:	2a00      	cmp	r2, #0
 800c884:	d1f6      	bne.n	800c874 <_strtol_l.isra.0+0xd8>
 800c886:	f8c8 1000 	str.w	r1, [r8]
 800c88a:	e794      	b.n	800c7b6 <_strtol_l.isra.0+0x1a>
 800c88c:	0800f871 	.word	0x0800f871

0800c890 <_strtol_r>:
 800c890:	f7ff bf84 	b.w	800c79c <_strtol_l.isra.0>

0800c894 <__ssputs_r>:
 800c894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	461f      	mov	r7, r3
 800c89a:	688e      	ldr	r6, [r1, #8]
 800c89c:	4682      	mov	sl, r0
 800c89e:	42be      	cmp	r6, r7
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	4690      	mov	r8, r2
 800c8a4:	680b      	ldr	r3, [r1, #0]
 800c8a6:	d82d      	bhi.n	800c904 <__ssputs_r+0x70>
 800c8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8b0:	d026      	beq.n	800c900 <__ssputs_r+0x6c>
 800c8b2:	6965      	ldr	r5, [r4, #20]
 800c8b4:	6909      	ldr	r1, [r1, #16]
 800c8b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ba:	eba3 0901 	sub.w	r9, r3, r1
 800c8be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8c2:	1c7b      	adds	r3, r7, #1
 800c8c4:	444b      	add	r3, r9
 800c8c6:	106d      	asrs	r5, r5, #1
 800c8c8:	429d      	cmp	r5, r3
 800c8ca:	bf38      	it	cc
 800c8cc:	461d      	movcc	r5, r3
 800c8ce:	0553      	lsls	r3, r2, #21
 800c8d0:	d527      	bpl.n	800c922 <__ssputs_r+0x8e>
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7fe fc36 	bl	800b144 <_malloc_r>
 800c8d8:	4606      	mov	r6, r0
 800c8da:	b360      	cbz	r0, 800c936 <__ssputs_r+0xa2>
 800c8dc:	464a      	mov	r2, r9
 800c8de:	6921      	ldr	r1, [r4, #16]
 800c8e0:	f7fd fd4f 	bl	800a382 <memcpy>
 800c8e4:	89a3      	ldrh	r3, [r4, #12]
 800c8e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ee:	81a3      	strh	r3, [r4, #12]
 800c8f0:	6126      	str	r6, [r4, #16]
 800c8f2:	444e      	add	r6, r9
 800c8f4:	6026      	str	r6, [r4, #0]
 800c8f6:	463e      	mov	r6, r7
 800c8f8:	6165      	str	r5, [r4, #20]
 800c8fa:	eba5 0509 	sub.w	r5, r5, r9
 800c8fe:	60a5      	str	r5, [r4, #8]
 800c900:	42be      	cmp	r6, r7
 800c902:	d900      	bls.n	800c906 <__ssputs_r+0x72>
 800c904:	463e      	mov	r6, r7
 800c906:	4632      	mov	r2, r6
 800c908:	4641      	mov	r1, r8
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	f000 fb63 	bl	800cfd6 <memmove>
 800c910:	2000      	movs	r0, #0
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	1b9b      	subs	r3, r3, r6
 800c916:	60a3      	str	r3, [r4, #8]
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	4433      	add	r3, r6
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c922:	462a      	mov	r2, r5
 800c924:	f000 ff39 	bl	800d79a <_realloc_r>
 800c928:	4606      	mov	r6, r0
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d1e0      	bne.n	800c8f0 <__ssputs_r+0x5c>
 800c92e:	4650      	mov	r0, sl
 800c930:	6921      	ldr	r1, [r4, #16]
 800c932:	f7fe fb95 	bl	800b060 <_free_r>
 800c936:	230c      	movs	r3, #12
 800c938:	f8ca 3000 	str.w	r3, [sl]
 800c93c:	89a3      	ldrh	r3, [r4, #12]
 800c93e:	f04f 30ff 	mov.w	r0, #4294967295
 800c942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c946:	81a3      	strh	r3, [r4, #12]
 800c948:	e7e9      	b.n	800c91e <__ssputs_r+0x8a>
	...

0800c94c <_svfiprintf_r>:
 800c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	4698      	mov	r8, r3
 800c952:	898b      	ldrh	r3, [r1, #12]
 800c954:	4607      	mov	r7, r0
 800c956:	061b      	lsls	r3, r3, #24
 800c958:	460d      	mov	r5, r1
 800c95a:	4614      	mov	r4, r2
 800c95c:	b09d      	sub	sp, #116	@ 0x74
 800c95e:	d510      	bpl.n	800c982 <_svfiprintf_r+0x36>
 800c960:	690b      	ldr	r3, [r1, #16]
 800c962:	b973      	cbnz	r3, 800c982 <_svfiprintf_r+0x36>
 800c964:	2140      	movs	r1, #64	@ 0x40
 800c966:	f7fe fbed 	bl	800b144 <_malloc_r>
 800c96a:	6028      	str	r0, [r5, #0]
 800c96c:	6128      	str	r0, [r5, #16]
 800c96e:	b930      	cbnz	r0, 800c97e <_svfiprintf_r+0x32>
 800c970:	230c      	movs	r3, #12
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	b01d      	add	sp, #116	@ 0x74
 800c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97e:	2340      	movs	r3, #64	@ 0x40
 800c980:	616b      	str	r3, [r5, #20]
 800c982:	2300      	movs	r3, #0
 800c984:	9309      	str	r3, [sp, #36]	@ 0x24
 800c986:	2320      	movs	r3, #32
 800c988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c98c:	2330      	movs	r3, #48	@ 0x30
 800c98e:	f04f 0901 	mov.w	r9, #1
 800c992:	f8cd 800c 	str.w	r8, [sp, #12]
 800c996:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cb30 <_svfiprintf_r+0x1e4>
 800c99a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c99e:	4623      	mov	r3, r4
 800c9a0:	469a      	mov	sl, r3
 800c9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9a6:	b10a      	cbz	r2, 800c9ac <_svfiprintf_r+0x60>
 800c9a8:	2a25      	cmp	r2, #37	@ 0x25
 800c9aa:	d1f9      	bne.n	800c9a0 <_svfiprintf_r+0x54>
 800c9ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b0:	d00b      	beq.n	800c9ca <_svfiprintf_r+0x7e>
 800c9b2:	465b      	mov	r3, fp
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	f7ff ff6b 	bl	800c894 <__ssputs_r>
 800c9be:	3001      	adds	r0, #1
 800c9c0:	f000 80a7 	beq.w	800cb12 <_svfiprintf_r+0x1c6>
 800c9c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9c6:	445a      	add	r2, fp
 800c9c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 809f 	beq.w	800cb12 <_svfiprintf_r+0x1c6>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9de:	f10a 0a01 	add.w	sl, sl, #1
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	9307      	str	r3, [sp, #28]
 800c9e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9ec:	4654      	mov	r4, sl
 800c9ee:	2205      	movs	r2, #5
 800c9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f4:	484e      	ldr	r0, [pc, #312]	@ (800cb30 <_svfiprintf_r+0x1e4>)
 800c9f6:	f7fd fcb6 	bl	800a366 <memchr>
 800c9fa:	9a04      	ldr	r2, [sp, #16]
 800c9fc:	b9d8      	cbnz	r0, 800ca36 <_svfiprintf_r+0xea>
 800c9fe:	06d0      	lsls	r0, r2, #27
 800ca00:	bf44      	itt	mi
 800ca02:	2320      	movmi	r3, #32
 800ca04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca08:	0711      	lsls	r1, r2, #28
 800ca0a:	bf44      	itt	mi
 800ca0c:	232b      	movmi	r3, #43	@ 0x2b
 800ca0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca12:	f89a 3000 	ldrb.w	r3, [sl]
 800ca16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca18:	d015      	beq.n	800ca46 <_svfiprintf_r+0xfa>
 800ca1a:	4654      	mov	r4, sl
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	f04f 0c0a 	mov.w	ip, #10
 800ca22:	9a07      	ldr	r2, [sp, #28]
 800ca24:	4621      	mov	r1, r4
 800ca26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca2a:	3b30      	subs	r3, #48	@ 0x30
 800ca2c:	2b09      	cmp	r3, #9
 800ca2e:	d94b      	bls.n	800cac8 <_svfiprintf_r+0x17c>
 800ca30:	b1b0      	cbz	r0, 800ca60 <_svfiprintf_r+0x114>
 800ca32:	9207      	str	r2, [sp, #28]
 800ca34:	e014      	b.n	800ca60 <_svfiprintf_r+0x114>
 800ca36:	eba0 0308 	sub.w	r3, r0, r8
 800ca3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	46a2      	mov	sl, r4
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	e7d2      	b.n	800c9ec <_svfiprintf_r+0xa0>
 800ca46:	9b03      	ldr	r3, [sp, #12]
 800ca48:	1d19      	adds	r1, r3, #4
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	9103      	str	r1, [sp, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bfbb      	ittet	lt
 800ca52:	425b      	neglt	r3, r3
 800ca54:	f042 0202 	orrlt.w	r2, r2, #2
 800ca58:	9307      	strge	r3, [sp, #28]
 800ca5a:	9307      	strlt	r3, [sp, #28]
 800ca5c:	bfb8      	it	lt
 800ca5e:	9204      	strlt	r2, [sp, #16]
 800ca60:	7823      	ldrb	r3, [r4, #0]
 800ca62:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca64:	d10a      	bne.n	800ca7c <_svfiprintf_r+0x130>
 800ca66:	7863      	ldrb	r3, [r4, #1]
 800ca68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca6a:	d132      	bne.n	800cad2 <_svfiprintf_r+0x186>
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	3402      	adds	r4, #2
 800ca70:	1d1a      	adds	r2, r3, #4
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	9203      	str	r2, [sp, #12]
 800ca76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca7a:	9305      	str	r3, [sp, #20]
 800ca7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cb34 <_svfiprintf_r+0x1e8>
 800ca80:	2203      	movs	r2, #3
 800ca82:	4650      	mov	r0, sl
 800ca84:	7821      	ldrb	r1, [r4, #0]
 800ca86:	f7fd fc6e 	bl	800a366 <memchr>
 800ca8a:	b138      	cbz	r0, 800ca9c <_svfiprintf_r+0x150>
 800ca8c:	2240      	movs	r2, #64	@ 0x40
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	eba0 000a 	sub.w	r0, r0, sl
 800ca94:	4082      	lsls	r2, r0
 800ca96:	4313      	orrs	r3, r2
 800ca98:	3401      	adds	r4, #1
 800ca9a:	9304      	str	r3, [sp, #16]
 800ca9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa0:	2206      	movs	r2, #6
 800caa2:	4825      	ldr	r0, [pc, #148]	@ (800cb38 <_svfiprintf_r+0x1ec>)
 800caa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caa8:	f7fd fc5d 	bl	800a366 <memchr>
 800caac:	2800      	cmp	r0, #0
 800caae:	d036      	beq.n	800cb1e <_svfiprintf_r+0x1d2>
 800cab0:	4b22      	ldr	r3, [pc, #136]	@ (800cb3c <_svfiprintf_r+0x1f0>)
 800cab2:	bb1b      	cbnz	r3, 800cafc <_svfiprintf_r+0x1b0>
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	3307      	adds	r3, #7
 800cab8:	f023 0307 	bic.w	r3, r3, #7
 800cabc:	3308      	adds	r3, #8
 800cabe:	9303      	str	r3, [sp, #12]
 800cac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac2:	4433      	add	r3, r6
 800cac4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cac6:	e76a      	b.n	800c99e <_svfiprintf_r+0x52>
 800cac8:	460c      	mov	r4, r1
 800caca:	2001      	movs	r0, #1
 800cacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad0:	e7a8      	b.n	800ca24 <_svfiprintf_r+0xd8>
 800cad2:	2300      	movs	r3, #0
 800cad4:	f04f 0c0a 	mov.w	ip, #10
 800cad8:	4619      	mov	r1, r3
 800cada:	3401      	adds	r4, #1
 800cadc:	9305      	str	r3, [sp, #20]
 800cade:	4620      	mov	r0, r4
 800cae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae4:	3a30      	subs	r2, #48	@ 0x30
 800cae6:	2a09      	cmp	r2, #9
 800cae8:	d903      	bls.n	800caf2 <_svfiprintf_r+0x1a6>
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0c6      	beq.n	800ca7c <_svfiprintf_r+0x130>
 800caee:	9105      	str	r1, [sp, #20]
 800caf0:	e7c4      	b.n	800ca7c <_svfiprintf_r+0x130>
 800caf2:	4604      	mov	r4, r0
 800caf4:	2301      	movs	r3, #1
 800caf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cafa:	e7f0      	b.n	800cade <_svfiprintf_r+0x192>
 800cafc:	ab03      	add	r3, sp, #12
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	462a      	mov	r2, r5
 800cb02:	4638      	mov	r0, r7
 800cb04:	4b0e      	ldr	r3, [pc, #56]	@ (800cb40 <_svfiprintf_r+0x1f4>)
 800cb06:	a904      	add	r1, sp, #16
 800cb08:	f7fc fbbc 	bl	8009284 <_printf_float>
 800cb0c:	1c42      	adds	r2, r0, #1
 800cb0e:	4606      	mov	r6, r0
 800cb10:	d1d6      	bne.n	800cac0 <_svfiprintf_r+0x174>
 800cb12:	89ab      	ldrh	r3, [r5, #12]
 800cb14:	065b      	lsls	r3, r3, #25
 800cb16:	f53f af2d 	bmi.w	800c974 <_svfiprintf_r+0x28>
 800cb1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb1c:	e72c      	b.n	800c978 <_svfiprintf_r+0x2c>
 800cb1e:	ab03      	add	r3, sp, #12
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	462a      	mov	r2, r5
 800cb24:	4638      	mov	r0, r7
 800cb26:	4b06      	ldr	r3, [pc, #24]	@ (800cb40 <_svfiprintf_r+0x1f4>)
 800cb28:	a904      	add	r1, sp, #16
 800cb2a:	f7fc fe49 	bl	80097c0 <_printf_i>
 800cb2e:	e7ed      	b.n	800cb0c <_svfiprintf_r+0x1c0>
 800cb30:	0800f66b 	.word	0x0800f66b
 800cb34:	0800f671 	.word	0x0800f671
 800cb38:	0800f675 	.word	0x0800f675
 800cb3c:	08009285 	.word	0x08009285
 800cb40:	0800c895 	.word	0x0800c895

0800cb44 <__sfputc_r>:
 800cb44:	6893      	ldr	r3, [r2, #8]
 800cb46:	b410      	push	{r4}
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	6093      	str	r3, [r2, #8]
 800cb4e:	da07      	bge.n	800cb60 <__sfputc_r+0x1c>
 800cb50:	6994      	ldr	r4, [r2, #24]
 800cb52:	42a3      	cmp	r3, r4
 800cb54:	db01      	blt.n	800cb5a <__sfputc_r+0x16>
 800cb56:	290a      	cmp	r1, #10
 800cb58:	d102      	bne.n	800cb60 <__sfputc_r+0x1c>
 800cb5a:	bc10      	pop	{r4}
 800cb5c:	f7fd baef 	b.w	800a13e <__swbuf_r>
 800cb60:	6813      	ldr	r3, [r2, #0]
 800cb62:	1c58      	adds	r0, r3, #1
 800cb64:	6010      	str	r0, [r2, #0]
 800cb66:	7019      	strb	r1, [r3, #0]
 800cb68:	4608      	mov	r0, r1
 800cb6a:	bc10      	pop	{r4}
 800cb6c:	4770      	bx	lr

0800cb6e <__sfputs_r>:
 800cb6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb70:	4606      	mov	r6, r0
 800cb72:	460f      	mov	r7, r1
 800cb74:	4614      	mov	r4, r2
 800cb76:	18d5      	adds	r5, r2, r3
 800cb78:	42ac      	cmp	r4, r5
 800cb7a:	d101      	bne.n	800cb80 <__sfputs_r+0x12>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	e007      	b.n	800cb90 <__sfputs_r+0x22>
 800cb80:	463a      	mov	r2, r7
 800cb82:	4630      	mov	r0, r6
 800cb84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb88:	f7ff ffdc 	bl	800cb44 <__sfputc_r>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d1f3      	bne.n	800cb78 <__sfputs_r+0xa>
 800cb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb94 <_vfiprintf_r>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	460d      	mov	r5, r1
 800cb9a:	4614      	mov	r4, r2
 800cb9c:	4698      	mov	r8, r3
 800cb9e:	4606      	mov	r6, r0
 800cba0:	b09d      	sub	sp, #116	@ 0x74
 800cba2:	b118      	cbz	r0, 800cbac <_vfiprintf_r+0x18>
 800cba4:	6a03      	ldr	r3, [r0, #32]
 800cba6:	b90b      	cbnz	r3, 800cbac <_vfiprintf_r+0x18>
 800cba8:	f7fd f9be 	bl	8009f28 <__sinit>
 800cbac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbae:	07d9      	lsls	r1, r3, #31
 800cbb0:	d405      	bmi.n	800cbbe <_vfiprintf_r+0x2a>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	059a      	lsls	r2, r3, #22
 800cbb6:	d402      	bmi.n	800cbbe <_vfiprintf_r+0x2a>
 800cbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbba:	f7fd fbd2 	bl	800a362 <__retarget_lock_acquire_recursive>
 800cbbe:	89ab      	ldrh	r3, [r5, #12]
 800cbc0:	071b      	lsls	r3, r3, #28
 800cbc2:	d501      	bpl.n	800cbc8 <_vfiprintf_r+0x34>
 800cbc4:	692b      	ldr	r3, [r5, #16]
 800cbc6:	b99b      	cbnz	r3, 800cbf0 <_vfiprintf_r+0x5c>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7fd faf6 	bl	800a1bc <__swsetup_r>
 800cbd0:	b170      	cbz	r0, 800cbf0 <_vfiprintf_r+0x5c>
 800cbd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbd4:	07dc      	lsls	r4, r3, #31
 800cbd6:	d504      	bpl.n	800cbe2 <_vfiprintf_r+0x4e>
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	b01d      	add	sp, #116	@ 0x74
 800cbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe2:	89ab      	ldrh	r3, [r5, #12]
 800cbe4:	0598      	lsls	r0, r3, #22
 800cbe6:	d4f7      	bmi.n	800cbd8 <_vfiprintf_r+0x44>
 800cbe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbea:	f7fd fbbb 	bl	800a364 <__retarget_lock_release_recursive>
 800cbee:	e7f3      	b.n	800cbd8 <_vfiprintf_r+0x44>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf4:	2320      	movs	r3, #32
 800cbf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbfa:	2330      	movs	r3, #48	@ 0x30
 800cbfc:	f04f 0901 	mov.w	r9, #1
 800cc00:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cdb0 <_vfiprintf_r+0x21c>
 800cc08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc0c:	4623      	mov	r3, r4
 800cc0e:	469a      	mov	sl, r3
 800cc10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc14:	b10a      	cbz	r2, 800cc1a <_vfiprintf_r+0x86>
 800cc16:	2a25      	cmp	r2, #37	@ 0x25
 800cc18:	d1f9      	bne.n	800cc0e <_vfiprintf_r+0x7a>
 800cc1a:	ebba 0b04 	subs.w	fp, sl, r4
 800cc1e:	d00b      	beq.n	800cc38 <_vfiprintf_r+0xa4>
 800cc20:	465b      	mov	r3, fp
 800cc22:	4622      	mov	r2, r4
 800cc24:	4629      	mov	r1, r5
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff ffa1 	bl	800cb6e <__sfputs_r>
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	f000 80a7 	beq.w	800cd80 <_vfiprintf_r+0x1ec>
 800cc32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc34:	445a      	add	r2, fp
 800cc36:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc38:	f89a 3000 	ldrb.w	r3, [sl]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f000 809f 	beq.w	800cd80 <_vfiprintf_r+0x1ec>
 800cc42:	2300      	movs	r3, #0
 800cc44:	f04f 32ff 	mov.w	r2, #4294967295
 800cc48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc4c:	f10a 0a01 	add.w	sl, sl, #1
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	9307      	str	r3, [sp, #28]
 800cc54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc58:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc5a:	4654      	mov	r4, sl
 800cc5c:	2205      	movs	r2, #5
 800cc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc62:	4853      	ldr	r0, [pc, #332]	@ (800cdb0 <_vfiprintf_r+0x21c>)
 800cc64:	f7fd fb7f 	bl	800a366 <memchr>
 800cc68:	9a04      	ldr	r2, [sp, #16]
 800cc6a:	b9d8      	cbnz	r0, 800cca4 <_vfiprintf_r+0x110>
 800cc6c:	06d1      	lsls	r1, r2, #27
 800cc6e:	bf44      	itt	mi
 800cc70:	2320      	movmi	r3, #32
 800cc72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc76:	0713      	lsls	r3, r2, #28
 800cc78:	bf44      	itt	mi
 800cc7a:	232b      	movmi	r3, #43	@ 0x2b
 800cc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc80:	f89a 3000 	ldrb.w	r3, [sl]
 800cc84:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc86:	d015      	beq.n	800ccb4 <_vfiprintf_r+0x120>
 800cc88:	4654      	mov	r4, sl
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	f04f 0c0a 	mov.w	ip, #10
 800cc90:	9a07      	ldr	r2, [sp, #28]
 800cc92:	4621      	mov	r1, r4
 800cc94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc98:	3b30      	subs	r3, #48	@ 0x30
 800cc9a:	2b09      	cmp	r3, #9
 800cc9c:	d94b      	bls.n	800cd36 <_vfiprintf_r+0x1a2>
 800cc9e:	b1b0      	cbz	r0, 800ccce <_vfiprintf_r+0x13a>
 800cca0:	9207      	str	r2, [sp, #28]
 800cca2:	e014      	b.n	800ccce <_vfiprintf_r+0x13a>
 800cca4:	eba0 0308 	sub.w	r3, r0, r8
 800cca8:	fa09 f303 	lsl.w	r3, r9, r3
 800ccac:	4313      	orrs	r3, r2
 800ccae:	46a2      	mov	sl, r4
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	e7d2      	b.n	800cc5a <_vfiprintf_r+0xc6>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	1d19      	adds	r1, r3, #4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	9103      	str	r1, [sp, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	bfbb      	ittet	lt
 800ccc0:	425b      	neglt	r3, r3
 800ccc2:	f042 0202 	orrlt.w	r2, r2, #2
 800ccc6:	9307      	strge	r3, [sp, #28]
 800ccc8:	9307      	strlt	r3, [sp, #28]
 800ccca:	bfb8      	it	lt
 800cccc:	9204      	strlt	r2, [sp, #16]
 800ccce:	7823      	ldrb	r3, [r4, #0]
 800ccd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccd2:	d10a      	bne.n	800ccea <_vfiprintf_r+0x156>
 800ccd4:	7863      	ldrb	r3, [r4, #1]
 800ccd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccd8:	d132      	bne.n	800cd40 <_vfiprintf_r+0x1ac>
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	3402      	adds	r4, #2
 800ccde:	1d1a      	adds	r2, r3, #4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	9203      	str	r2, [sp, #12]
 800cce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cce8:	9305      	str	r3, [sp, #20]
 800ccea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cdb4 <_vfiprintf_r+0x220>
 800ccee:	2203      	movs	r2, #3
 800ccf0:	4650      	mov	r0, sl
 800ccf2:	7821      	ldrb	r1, [r4, #0]
 800ccf4:	f7fd fb37 	bl	800a366 <memchr>
 800ccf8:	b138      	cbz	r0, 800cd0a <_vfiprintf_r+0x176>
 800ccfa:	2240      	movs	r2, #64	@ 0x40
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	eba0 000a 	sub.w	r0, r0, sl
 800cd02:	4082      	lsls	r2, r0
 800cd04:	4313      	orrs	r3, r2
 800cd06:	3401      	adds	r4, #1
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0e:	2206      	movs	r2, #6
 800cd10:	4829      	ldr	r0, [pc, #164]	@ (800cdb8 <_vfiprintf_r+0x224>)
 800cd12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd16:	f7fd fb26 	bl	800a366 <memchr>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d03f      	beq.n	800cd9e <_vfiprintf_r+0x20a>
 800cd1e:	4b27      	ldr	r3, [pc, #156]	@ (800cdbc <_vfiprintf_r+0x228>)
 800cd20:	bb1b      	cbnz	r3, 800cd6a <_vfiprintf_r+0x1d6>
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	3307      	adds	r3, #7
 800cd26:	f023 0307 	bic.w	r3, r3, #7
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	9303      	str	r3, [sp, #12]
 800cd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd30:	443b      	add	r3, r7
 800cd32:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd34:	e76a      	b.n	800cc0c <_vfiprintf_r+0x78>
 800cd36:	460c      	mov	r4, r1
 800cd38:	2001      	movs	r0, #1
 800cd3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd3e:	e7a8      	b.n	800cc92 <_vfiprintf_r+0xfe>
 800cd40:	2300      	movs	r3, #0
 800cd42:	f04f 0c0a 	mov.w	ip, #10
 800cd46:	4619      	mov	r1, r3
 800cd48:	3401      	adds	r4, #1
 800cd4a:	9305      	str	r3, [sp, #20]
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd52:	3a30      	subs	r2, #48	@ 0x30
 800cd54:	2a09      	cmp	r2, #9
 800cd56:	d903      	bls.n	800cd60 <_vfiprintf_r+0x1cc>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0c6      	beq.n	800ccea <_vfiprintf_r+0x156>
 800cd5c:	9105      	str	r1, [sp, #20]
 800cd5e:	e7c4      	b.n	800ccea <_vfiprintf_r+0x156>
 800cd60:	4604      	mov	r4, r0
 800cd62:	2301      	movs	r3, #1
 800cd64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd68:	e7f0      	b.n	800cd4c <_vfiprintf_r+0x1b8>
 800cd6a:	ab03      	add	r3, sp, #12
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	462a      	mov	r2, r5
 800cd70:	4630      	mov	r0, r6
 800cd72:	4b13      	ldr	r3, [pc, #76]	@ (800cdc0 <_vfiprintf_r+0x22c>)
 800cd74:	a904      	add	r1, sp, #16
 800cd76:	f7fc fa85 	bl	8009284 <_printf_float>
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	1c78      	adds	r0, r7, #1
 800cd7e:	d1d6      	bne.n	800cd2e <_vfiprintf_r+0x19a>
 800cd80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd82:	07d9      	lsls	r1, r3, #31
 800cd84:	d405      	bmi.n	800cd92 <_vfiprintf_r+0x1fe>
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	059a      	lsls	r2, r3, #22
 800cd8a:	d402      	bmi.n	800cd92 <_vfiprintf_r+0x1fe>
 800cd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd8e:	f7fd fae9 	bl	800a364 <__retarget_lock_release_recursive>
 800cd92:	89ab      	ldrh	r3, [r5, #12]
 800cd94:	065b      	lsls	r3, r3, #25
 800cd96:	f53f af1f 	bmi.w	800cbd8 <_vfiprintf_r+0x44>
 800cd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd9c:	e71e      	b.n	800cbdc <_vfiprintf_r+0x48>
 800cd9e:	ab03      	add	r3, sp, #12
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	462a      	mov	r2, r5
 800cda4:	4630      	mov	r0, r6
 800cda6:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <_vfiprintf_r+0x22c>)
 800cda8:	a904      	add	r1, sp, #16
 800cdaa:	f7fc fd09 	bl	80097c0 <_printf_i>
 800cdae:	e7e4      	b.n	800cd7a <_vfiprintf_r+0x1e6>
 800cdb0:	0800f66b 	.word	0x0800f66b
 800cdb4:	0800f671 	.word	0x0800f671
 800cdb8:	0800f675 	.word	0x0800f675
 800cdbc:	08009285 	.word	0x08009285
 800cdc0:	0800cb6f 	.word	0x0800cb6f

0800cdc4 <__sflush_r>:
 800cdc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	0716      	lsls	r6, r2, #28
 800cdcc:	4605      	mov	r5, r0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	d454      	bmi.n	800ce7c <__sflush_r+0xb8>
 800cdd2:	684b      	ldr	r3, [r1, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	dc02      	bgt.n	800cdde <__sflush_r+0x1a>
 800cdd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	dd48      	ble.n	800ce70 <__sflush_r+0xac>
 800cdde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cde0:	2e00      	cmp	r6, #0
 800cde2:	d045      	beq.n	800ce70 <__sflush_r+0xac>
 800cde4:	2300      	movs	r3, #0
 800cde6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cdea:	682f      	ldr	r7, [r5, #0]
 800cdec:	6a21      	ldr	r1, [r4, #32]
 800cdee:	602b      	str	r3, [r5, #0]
 800cdf0:	d030      	beq.n	800ce54 <__sflush_r+0x90>
 800cdf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	0759      	lsls	r1, r3, #29
 800cdf8:	d505      	bpl.n	800ce06 <__sflush_r+0x42>
 800cdfa:	6863      	ldr	r3, [r4, #4]
 800cdfc:	1ad2      	subs	r2, r2, r3
 800cdfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce00:	b10b      	cbz	r3, 800ce06 <__sflush_r+0x42>
 800ce02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce04:	1ad2      	subs	r2, r2, r3
 800ce06:	2300      	movs	r3, #0
 800ce08:	4628      	mov	r0, r5
 800ce0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce0c:	6a21      	ldr	r1, [r4, #32]
 800ce0e:	47b0      	blx	r6
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	89a3      	ldrh	r3, [r4, #12]
 800ce14:	d106      	bne.n	800ce24 <__sflush_r+0x60>
 800ce16:	6829      	ldr	r1, [r5, #0]
 800ce18:	291d      	cmp	r1, #29
 800ce1a:	d82b      	bhi.n	800ce74 <__sflush_r+0xb0>
 800ce1c:	4a28      	ldr	r2, [pc, #160]	@ (800cec0 <__sflush_r+0xfc>)
 800ce1e:	40ca      	lsrs	r2, r1
 800ce20:	07d6      	lsls	r6, r2, #31
 800ce22:	d527      	bpl.n	800ce74 <__sflush_r+0xb0>
 800ce24:	2200      	movs	r2, #0
 800ce26:	6062      	str	r2, [r4, #4]
 800ce28:	6922      	ldr	r2, [r4, #16]
 800ce2a:	04d9      	lsls	r1, r3, #19
 800ce2c:	6022      	str	r2, [r4, #0]
 800ce2e:	d504      	bpl.n	800ce3a <__sflush_r+0x76>
 800ce30:	1c42      	adds	r2, r0, #1
 800ce32:	d101      	bne.n	800ce38 <__sflush_r+0x74>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b903      	cbnz	r3, 800ce3a <__sflush_r+0x76>
 800ce38:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce3c:	602f      	str	r7, [r5, #0]
 800ce3e:	b1b9      	cbz	r1, 800ce70 <__sflush_r+0xac>
 800ce40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce44:	4299      	cmp	r1, r3
 800ce46:	d002      	beq.n	800ce4e <__sflush_r+0x8a>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f7fe f909 	bl	800b060 <_free_r>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce52:	e00d      	b.n	800ce70 <__sflush_r+0xac>
 800ce54:	2301      	movs	r3, #1
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b0      	blx	r6
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	1c50      	adds	r0, r2, #1
 800ce5e:	d1c9      	bne.n	800cdf4 <__sflush_r+0x30>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0c6      	beq.n	800cdf4 <__sflush_r+0x30>
 800ce66:	2b1d      	cmp	r3, #29
 800ce68:	d001      	beq.n	800ce6e <__sflush_r+0xaa>
 800ce6a:	2b16      	cmp	r3, #22
 800ce6c:	d11d      	bne.n	800ceaa <__sflush_r+0xe6>
 800ce6e:	602f      	str	r7, [r5, #0]
 800ce70:	2000      	movs	r0, #0
 800ce72:	e021      	b.n	800ceb8 <__sflush_r+0xf4>
 800ce74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce78:	b21b      	sxth	r3, r3
 800ce7a:	e01a      	b.n	800ceb2 <__sflush_r+0xee>
 800ce7c:	690f      	ldr	r7, [r1, #16]
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	d0f6      	beq.n	800ce70 <__sflush_r+0xac>
 800ce82:	0793      	lsls	r3, r2, #30
 800ce84:	bf18      	it	ne
 800ce86:	2300      	movne	r3, #0
 800ce88:	680e      	ldr	r6, [r1, #0]
 800ce8a:	bf08      	it	eq
 800ce8c:	694b      	ldreq	r3, [r1, #20]
 800ce8e:	1bf6      	subs	r6, r6, r7
 800ce90:	600f      	str	r7, [r1, #0]
 800ce92:	608b      	str	r3, [r1, #8]
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	ddeb      	ble.n	800ce70 <__sflush_r+0xac>
 800ce98:	4633      	mov	r3, r6
 800ce9a:	463a      	mov	r2, r7
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	6a21      	ldr	r1, [r4, #32]
 800cea0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cea4:	47e0      	blx	ip
 800cea6:	2800      	cmp	r0, #0
 800cea8:	dc07      	bgt.n	800ceba <__sflush_r+0xf6>
 800ceaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceba:	4407      	add	r7, r0
 800cebc:	1a36      	subs	r6, r6, r0
 800cebe:	e7e9      	b.n	800ce94 <__sflush_r+0xd0>
 800cec0:	20400001 	.word	0x20400001

0800cec4 <_fflush_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	690b      	ldr	r3, [r1, #16]
 800cec8:	4605      	mov	r5, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	b913      	cbnz	r3, 800ced4 <_fflush_r+0x10>
 800cece:	2500      	movs	r5, #0
 800ced0:	4628      	mov	r0, r5
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	b118      	cbz	r0, 800cede <_fflush_r+0x1a>
 800ced6:	6a03      	ldr	r3, [r0, #32]
 800ced8:	b90b      	cbnz	r3, 800cede <_fflush_r+0x1a>
 800ceda:	f7fd f825 	bl	8009f28 <__sinit>
 800cede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0f3      	beq.n	800cece <_fflush_r+0xa>
 800cee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cee8:	07d0      	lsls	r0, r2, #31
 800ceea:	d404      	bmi.n	800cef6 <_fflush_r+0x32>
 800ceec:	0599      	lsls	r1, r3, #22
 800ceee:	d402      	bmi.n	800cef6 <_fflush_r+0x32>
 800cef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cef2:	f7fd fa36 	bl	800a362 <__retarget_lock_acquire_recursive>
 800cef6:	4628      	mov	r0, r5
 800cef8:	4621      	mov	r1, r4
 800cefa:	f7ff ff63 	bl	800cdc4 <__sflush_r>
 800cefe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf00:	4605      	mov	r5, r0
 800cf02:	07da      	lsls	r2, r3, #31
 800cf04:	d4e4      	bmi.n	800ced0 <_fflush_r+0xc>
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	059b      	lsls	r3, r3, #22
 800cf0a:	d4e1      	bmi.n	800ced0 <_fflush_r+0xc>
 800cf0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf0e:	f7fd fa29 	bl	800a364 <__retarget_lock_release_recursive>
 800cf12:	e7dd      	b.n	800ced0 <_fflush_r+0xc>

0800cf14 <__swhatbuf_r>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	460c      	mov	r4, r1
 800cf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1c:	4615      	mov	r5, r2
 800cf1e:	2900      	cmp	r1, #0
 800cf20:	461e      	mov	r6, r3
 800cf22:	b096      	sub	sp, #88	@ 0x58
 800cf24:	da0c      	bge.n	800cf40 <__swhatbuf_r+0x2c>
 800cf26:	89a3      	ldrh	r3, [r4, #12]
 800cf28:	2100      	movs	r1, #0
 800cf2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf2e:	bf14      	ite	ne
 800cf30:	2340      	movne	r3, #64	@ 0x40
 800cf32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf36:	2000      	movs	r0, #0
 800cf38:	6031      	str	r1, [r6, #0]
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	b016      	add	sp, #88	@ 0x58
 800cf3e:	bd70      	pop	{r4, r5, r6, pc}
 800cf40:	466a      	mov	r2, sp
 800cf42:	f000 f875 	bl	800d030 <_fstat_r>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	dbed      	blt.n	800cf26 <__swhatbuf_r+0x12>
 800cf4a:	9901      	ldr	r1, [sp, #4]
 800cf4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf54:	4259      	negs	r1, r3
 800cf56:	4159      	adcs	r1, r3
 800cf58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf5c:	e7eb      	b.n	800cf36 <__swhatbuf_r+0x22>

0800cf5e <__smakebuf_r>:
 800cf5e:	898b      	ldrh	r3, [r1, #12]
 800cf60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf62:	079d      	lsls	r5, r3, #30
 800cf64:	4606      	mov	r6, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	d507      	bpl.n	800cf7a <__smakebuf_r+0x1c>
 800cf6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	2301      	movs	r3, #1
 800cf74:	6163      	str	r3, [r4, #20]
 800cf76:	b003      	add	sp, #12
 800cf78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf7a:	466a      	mov	r2, sp
 800cf7c:	ab01      	add	r3, sp, #4
 800cf7e:	f7ff ffc9 	bl	800cf14 <__swhatbuf_r>
 800cf82:	9f00      	ldr	r7, [sp, #0]
 800cf84:	4605      	mov	r5, r0
 800cf86:	4639      	mov	r1, r7
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7fe f8db 	bl	800b144 <_malloc_r>
 800cf8e:	b948      	cbnz	r0, 800cfa4 <__smakebuf_r+0x46>
 800cf90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf94:	059a      	lsls	r2, r3, #22
 800cf96:	d4ee      	bmi.n	800cf76 <__smakebuf_r+0x18>
 800cf98:	f023 0303 	bic.w	r3, r3, #3
 800cf9c:	f043 0302 	orr.w	r3, r3, #2
 800cfa0:	81a3      	strh	r3, [r4, #12]
 800cfa2:	e7e2      	b.n	800cf6a <__smakebuf_r+0xc>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cfaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	9b01      	ldr	r3, [sp, #4]
 800cfb2:	6020      	str	r0, [r4, #0]
 800cfb4:	b15b      	cbz	r3, 800cfce <__smakebuf_r+0x70>
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfbc:	f000 f84a 	bl	800d054 <_isatty_r>
 800cfc0:	b128      	cbz	r0, 800cfce <__smakebuf_r+0x70>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f023 0303 	bic.w	r3, r3, #3
 800cfc8:	f043 0301 	orr.w	r3, r3, #1
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	89a3      	ldrh	r3, [r4, #12]
 800cfd0:	431d      	orrs	r5, r3
 800cfd2:	81a5      	strh	r5, [r4, #12]
 800cfd4:	e7cf      	b.n	800cf76 <__smakebuf_r+0x18>

0800cfd6 <memmove>:
 800cfd6:	4288      	cmp	r0, r1
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	eb01 0402 	add.w	r4, r1, r2
 800cfde:	d902      	bls.n	800cfe6 <memmove+0x10>
 800cfe0:	4284      	cmp	r4, r0
 800cfe2:	4623      	mov	r3, r4
 800cfe4:	d807      	bhi.n	800cff6 <memmove+0x20>
 800cfe6:	1e43      	subs	r3, r0, #1
 800cfe8:	42a1      	cmp	r1, r4
 800cfea:	d008      	beq.n	800cffe <memmove+0x28>
 800cfec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cff0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cff4:	e7f8      	b.n	800cfe8 <memmove+0x12>
 800cff6:	4601      	mov	r1, r0
 800cff8:	4402      	add	r2, r0
 800cffa:	428a      	cmp	r2, r1
 800cffc:	d100      	bne.n	800d000 <memmove+0x2a>
 800cffe:	bd10      	pop	{r4, pc}
 800d000:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d004:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d008:	e7f7      	b.n	800cffa <memmove+0x24>

0800d00a <strncmp>:
 800d00a:	b510      	push	{r4, lr}
 800d00c:	b16a      	cbz	r2, 800d02a <strncmp+0x20>
 800d00e:	3901      	subs	r1, #1
 800d010:	1884      	adds	r4, r0, r2
 800d012:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d016:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d103      	bne.n	800d026 <strncmp+0x1c>
 800d01e:	42a0      	cmp	r0, r4
 800d020:	d001      	beq.n	800d026 <strncmp+0x1c>
 800d022:	2a00      	cmp	r2, #0
 800d024:	d1f5      	bne.n	800d012 <strncmp+0x8>
 800d026:	1ad0      	subs	r0, r2, r3
 800d028:	bd10      	pop	{r4, pc}
 800d02a:	4610      	mov	r0, r2
 800d02c:	e7fc      	b.n	800d028 <strncmp+0x1e>
	...

0800d030 <_fstat_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	2300      	movs	r3, #0
 800d034:	4d06      	ldr	r5, [pc, #24]	@ (800d050 <_fstat_r+0x20>)
 800d036:	4604      	mov	r4, r0
 800d038:	4608      	mov	r0, r1
 800d03a:	4611      	mov	r1, r2
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	f7f5 feb3 	bl	8002da8 <_fstat>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	d102      	bne.n	800d04c <_fstat_r+0x1c>
 800d046:	682b      	ldr	r3, [r5, #0]
 800d048:	b103      	cbz	r3, 800d04c <_fstat_r+0x1c>
 800d04a:	6023      	str	r3, [r4, #0]
 800d04c:	bd38      	pop	{r3, r4, r5, pc}
 800d04e:	bf00      	nop
 800d050:	20002e54 	.word	0x20002e54

0800d054 <_isatty_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	2300      	movs	r3, #0
 800d058:	4d05      	ldr	r5, [pc, #20]	@ (800d070 <_isatty_r+0x1c>)
 800d05a:	4604      	mov	r4, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	602b      	str	r3, [r5, #0]
 800d060:	f7f5 feb1 	bl	8002dc6 <_isatty>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	d102      	bne.n	800d06e <_isatty_r+0x1a>
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	b103      	cbz	r3, 800d06e <_isatty_r+0x1a>
 800d06c:	6023      	str	r3, [r4, #0]
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	20002e54 	.word	0x20002e54

0800d074 <_sbrk_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	2300      	movs	r3, #0
 800d078:	4d05      	ldr	r5, [pc, #20]	@ (800d090 <_sbrk_r+0x1c>)
 800d07a:	4604      	mov	r4, r0
 800d07c:	4608      	mov	r0, r1
 800d07e:	602b      	str	r3, [r5, #0]
 800d080:	f7f5 feb8 	bl	8002df4 <_sbrk>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_sbrk_r+0x1a>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_sbrk_r+0x1a>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	20002e54 	.word	0x20002e54

0800d094 <nan>:
 800d094:	2000      	movs	r0, #0
 800d096:	4901      	ldr	r1, [pc, #4]	@ (800d09c <nan+0x8>)
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	7ff80000 	.word	0x7ff80000

0800d0a0 <__assert_func>:
 800d0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0a2:	4614      	mov	r4, r2
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	4b09      	ldr	r3, [pc, #36]	@ (800d0cc <__assert_func+0x2c>)
 800d0a8:	4605      	mov	r5, r0
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68d8      	ldr	r0, [r3, #12]
 800d0ae:	b14c      	cbz	r4, 800d0c4 <__assert_func+0x24>
 800d0b0:	4b07      	ldr	r3, [pc, #28]	@ (800d0d0 <__assert_func+0x30>)
 800d0b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0b6:	9100      	str	r1, [sp, #0]
 800d0b8:	462b      	mov	r3, r5
 800d0ba:	4906      	ldr	r1, [pc, #24]	@ (800d0d4 <__assert_func+0x34>)
 800d0bc:	f000 fba8 	bl	800d810 <fiprintf>
 800d0c0:	f000 fbb8 	bl	800d834 <abort>
 800d0c4:	4b04      	ldr	r3, [pc, #16]	@ (800d0d8 <__assert_func+0x38>)
 800d0c6:	461c      	mov	r4, r3
 800d0c8:	e7f3      	b.n	800d0b2 <__assert_func+0x12>
 800d0ca:	bf00      	nop
 800d0cc:	20000030 	.word	0x20000030
 800d0d0:	0800f684 	.word	0x0800f684
 800d0d4:	0800f691 	.word	0x0800f691
 800d0d8:	0800f6bf 	.word	0x0800f6bf

0800d0dc <_calloc_r>:
 800d0dc:	b570      	push	{r4, r5, r6, lr}
 800d0de:	fba1 5402 	umull	r5, r4, r1, r2
 800d0e2:	b934      	cbnz	r4, 800d0f2 <_calloc_r+0x16>
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	f7fe f82d 	bl	800b144 <_malloc_r>
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	b928      	cbnz	r0, 800d0fa <_calloc_r+0x1e>
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	bd70      	pop	{r4, r5, r6, pc}
 800d0f2:	220c      	movs	r2, #12
 800d0f4:	2600      	movs	r6, #0
 800d0f6:	6002      	str	r2, [r0, #0]
 800d0f8:	e7f9      	b.n	800d0ee <_calloc_r+0x12>
 800d0fa:	462a      	mov	r2, r5
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	f7fd f8b3 	bl	800a268 <memset>
 800d102:	e7f4      	b.n	800d0ee <_calloc_r+0x12>

0800d104 <rshift>:
 800d104:	6903      	ldr	r3, [r0, #16]
 800d106:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d10a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d10e:	f100 0414 	add.w	r4, r0, #20
 800d112:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d116:	dd46      	ble.n	800d1a6 <rshift+0xa2>
 800d118:	f011 011f 	ands.w	r1, r1, #31
 800d11c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d120:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d124:	d10c      	bne.n	800d140 <rshift+0x3c>
 800d126:	4629      	mov	r1, r5
 800d128:	f100 0710 	add.w	r7, r0, #16
 800d12c:	42b1      	cmp	r1, r6
 800d12e:	d335      	bcc.n	800d19c <rshift+0x98>
 800d130:	1a9b      	subs	r3, r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	1eea      	subs	r2, r5, #3
 800d136:	4296      	cmp	r6, r2
 800d138:	bf38      	it	cc
 800d13a:	2300      	movcc	r3, #0
 800d13c:	4423      	add	r3, r4
 800d13e:	e015      	b.n	800d16c <rshift+0x68>
 800d140:	46a1      	mov	r9, r4
 800d142:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d146:	f1c1 0820 	rsb	r8, r1, #32
 800d14a:	40cf      	lsrs	r7, r1
 800d14c:	f105 0e04 	add.w	lr, r5, #4
 800d150:	4576      	cmp	r6, lr
 800d152:	46f4      	mov	ip, lr
 800d154:	d816      	bhi.n	800d184 <rshift+0x80>
 800d156:	1a9a      	subs	r2, r3, r2
 800d158:	0092      	lsls	r2, r2, #2
 800d15a:	3a04      	subs	r2, #4
 800d15c:	3501      	adds	r5, #1
 800d15e:	42ae      	cmp	r6, r5
 800d160:	bf38      	it	cc
 800d162:	2200      	movcc	r2, #0
 800d164:	18a3      	adds	r3, r4, r2
 800d166:	50a7      	str	r7, [r4, r2]
 800d168:	b107      	cbz	r7, 800d16c <rshift+0x68>
 800d16a:	3304      	adds	r3, #4
 800d16c:	42a3      	cmp	r3, r4
 800d16e:	eba3 0204 	sub.w	r2, r3, r4
 800d172:	bf08      	it	eq
 800d174:	2300      	moveq	r3, #0
 800d176:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d17a:	6102      	str	r2, [r0, #16]
 800d17c:	bf08      	it	eq
 800d17e:	6143      	streq	r3, [r0, #20]
 800d180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d184:	f8dc c000 	ldr.w	ip, [ip]
 800d188:	fa0c fc08 	lsl.w	ip, ip, r8
 800d18c:	ea4c 0707 	orr.w	r7, ip, r7
 800d190:	f849 7b04 	str.w	r7, [r9], #4
 800d194:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d198:	40cf      	lsrs	r7, r1
 800d19a:	e7d9      	b.n	800d150 <rshift+0x4c>
 800d19c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800d1a4:	e7c2      	b.n	800d12c <rshift+0x28>
 800d1a6:	4623      	mov	r3, r4
 800d1a8:	e7e0      	b.n	800d16c <rshift+0x68>

0800d1aa <__hexdig_fun>:
 800d1aa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d1ae:	2b09      	cmp	r3, #9
 800d1b0:	d802      	bhi.n	800d1b8 <__hexdig_fun+0xe>
 800d1b2:	3820      	subs	r0, #32
 800d1b4:	b2c0      	uxtb	r0, r0
 800d1b6:	4770      	bx	lr
 800d1b8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d1bc:	2b05      	cmp	r3, #5
 800d1be:	d801      	bhi.n	800d1c4 <__hexdig_fun+0x1a>
 800d1c0:	3847      	subs	r0, #71	@ 0x47
 800d1c2:	e7f7      	b.n	800d1b4 <__hexdig_fun+0xa>
 800d1c4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d1c8:	2b05      	cmp	r3, #5
 800d1ca:	d801      	bhi.n	800d1d0 <__hexdig_fun+0x26>
 800d1cc:	3827      	subs	r0, #39	@ 0x27
 800d1ce:	e7f1      	b.n	800d1b4 <__hexdig_fun+0xa>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	4770      	bx	lr

0800d1d4 <__gethex>:
 800d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	468a      	mov	sl, r1
 800d1da:	4690      	mov	r8, r2
 800d1dc:	b085      	sub	sp, #20
 800d1de:	9302      	str	r3, [sp, #8]
 800d1e0:	680b      	ldr	r3, [r1, #0]
 800d1e2:	9001      	str	r0, [sp, #4]
 800d1e4:	1c9c      	adds	r4, r3, #2
 800d1e6:	46a1      	mov	r9, r4
 800d1e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d1ec:	2830      	cmp	r0, #48	@ 0x30
 800d1ee:	d0fa      	beq.n	800d1e6 <__gethex+0x12>
 800d1f0:	eba9 0303 	sub.w	r3, r9, r3
 800d1f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d1f8:	f7ff ffd7 	bl	800d1aa <__hexdig_fun>
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d168      	bne.n	800d2d4 <__gethex+0x100>
 800d202:	2201      	movs	r2, #1
 800d204:	4648      	mov	r0, r9
 800d206:	499f      	ldr	r1, [pc, #636]	@ (800d484 <__gethex+0x2b0>)
 800d208:	f7ff feff 	bl	800d00a <strncmp>
 800d20c:	4607      	mov	r7, r0
 800d20e:	2800      	cmp	r0, #0
 800d210:	d167      	bne.n	800d2e2 <__gethex+0x10e>
 800d212:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d216:	4626      	mov	r6, r4
 800d218:	f7ff ffc7 	bl	800d1aa <__hexdig_fun>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d062      	beq.n	800d2e6 <__gethex+0x112>
 800d220:	4623      	mov	r3, r4
 800d222:	7818      	ldrb	r0, [r3, #0]
 800d224:	4699      	mov	r9, r3
 800d226:	2830      	cmp	r0, #48	@ 0x30
 800d228:	f103 0301 	add.w	r3, r3, #1
 800d22c:	d0f9      	beq.n	800d222 <__gethex+0x4e>
 800d22e:	f7ff ffbc 	bl	800d1aa <__hexdig_fun>
 800d232:	fab0 f580 	clz	r5, r0
 800d236:	f04f 0b01 	mov.w	fp, #1
 800d23a:	096d      	lsrs	r5, r5, #5
 800d23c:	464a      	mov	r2, r9
 800d23e:	4616      	mov	r6, r2
 800d240:	7830      	ldrb	r0, [r6, #0]
 800d242:	3201      	adds	r2, #1
 800d244:	f7ff ffb1 	bl	800d1aa <__hexdig_fun>
 800d248:	2800      	cmp	r0, #0
 800d24a:	d1f8      	bne.n	800d23e <__gethex+0x6a>
 800d24c:	2201      	movs	r2, #1
 800d24e:	4630      	mov	r0, r6
 800d250:	498c      	ldr	r1, [pc, #560]	@ (800d484 <__gethex+0x2b0>)
 800d252:	f7ff feda 	bl	800d00a <strncmp>
 800d256:	2800      	cmp	r0, #0
 800d258:	d13f      	bne.n	800d2da <__gethex+0x106>
 800d25a:	b944      	cbnz	r4, 800d26e <__gethex+0x9a>
 800d25c:	1c74      	adds	r4, r6, #1
 800d25e:	4622      	mov	r2, r4
 800d260:	4616      	mov	r6, r2
 800d262:	7830      	ldrb	r0, [r6, #0]
 800d264:	3201      	adds	r2, #1
 800d266:	f7ff ffa0 	bl	800d1aa <__hexdig_fun>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d1f8      	bne.n	800d260 <__gethex+0x8c>
 800d26e:	1ba4      	subs	r4, r4, r6
 800d270:	00a7      	lsls	r7, r4, #2
 800d272:	7833      	ldrb	r3, [r6, #0]
 800d274:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d278:	2b50      	cmp	r3, #80	@ 0x50
 800d27a:	d13e      	bne.n	800d2fa <__gethex+0x126>
 800d27c:	7873      	ldrb	r3, [r6, #1]
 800d27e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d280:	d033      	beq.n	800d2ea <__gethex+0x116>
 800d282:	2b2d      	cmp	r3, #45	@ 0x2d
 800d284:	d034      	beq.n	800d2f0 <__gethex+0x11c>
 800d286:	2400      	movs	r4, #0
 800d288:	1c71      	adds	r1, r6, #1
 800d28a:	7808      	ldrb	r0, [r1, #0]
 800d28c:	f7ff ff8d 	bl	800d1aa <__hexdig_fun>
 800d290:	1e43      	subs	r3, r0, #1
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b18      	cmp	r3, #24
 800d296:	d830      	bhi.n	800d2fa <__gethex+0x126>
 800d298:	f1a0 0210 	sub.w	r2, r0, #16
 800d29c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2a0:	f7ff ff83 	bl	800d1aa <__hexdig_fun>
 800d2a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800d2a8:	fa5f fc8c 	uxtb.w	ip, ip
 800d2ac:	f1bc 0f18 	cmp.w	ip, #24
 800d2b0:	f04f 030a 	mov.w	r3, #10
 800d2b4:	d91e      	bls.n	800d2f4 <__gethex+0x120>
 800d2b6:	b104      	cbz	r4, 800d2ba <__gethex+0xe6>
 800d2b8:	4252      	negs	r2, r2
 800d2ba:	4417      	add	r7, r2
 800d2bc:	f8ca 1000 	str.w	r1, [sl]
 800d2c0:	b1ed      	cbz	r5, 800d2fe <__gethex+0x12a>
 800d2c2:	f1bb 0f00 	cmp.w	fp, #0
 800d2c6:	bf0c      	ite	eq
 800d2c8:	2506      	moveq	r5, #6
 800d2ca:	2500      	movne	r5, #0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	b005      	add	sp, #20
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	2500      	movs	r5, #0
 800d2d6:	462c      	mov	r4, r5
 800d2d8:	e7b0      	b.n	800d23c <__gethex+0x68>
 800d2da:	2c00      	cmp	r4, #0
 800d2dc:	d1c7      	bne.n	800d26e <__gethex+0x9a>
 800d2de:	4627      	mov	r7, r4
 800d2e0:	e7c7      	b.n	800d272 <__gethex+0x9e>
 800d2e2:	464e      	mov	r6, r9
 800d2e4:	462f      	mov	r7, r5
 800d2e6:	2501      	movs	r5, #1
 800d2e8:	e7c3      	b.n	800d272 <__gethex+0x9e>
 800d2ea:	2400      	movs	r4, #0
 800d2ec:	1cb1      	adds	r1, r6, #2
 800d2ee:	e7cc      	b.n	800d28a <__gethex+0xb6>
 800d2f0:	2401      	movs	r4, #1
 800d2f2:	e7fb      	b.n	800d2ec <__gethex+0x118>
 800d2f4:	fb03 0002 	mla	r0, r3, r2, r0
 800d2f8:	e7ce      	b.n	800d298 <__gethex+0xc4>
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	e7de      	b.n	800d2bc <__gethex+0xe8>
 800d2fe:	4629      	mov	r1, r5
 800d300:	eba6 0309 	sub.w	r3, r6, r9
 800d304:	3b01      	subs	r3, #1
 800d306:	2b07      	cmp	r3, #7
 800d308:	dc0a      	bgt.n	800d320 <__gethex+0x14c>
 800d30a:	9801      	ldr	r0, [sp, #4]
 800d30c:	f7fd ffa6 	bl	800b25c <_Balloc>
 800d310:	4604      	mov	r4, r0
 800d312:	b940      	cbnz	r0, 800d326 <__gethex+0x152>
 800d314:	4602      	mov	r2, r0
 800d316:	21e4      	movs	r1, #228	@ 0xe4
 800d318:	4b5b      	ldr	r3, [pc, #364]	@ (800d488 <__gethex+0x2b4>)
 800d31a:	485c      	ldr	r0, [pc, #368]	@ (800d48c <__gethex+0x2b8>)
 800d31c:	f7ff fec0 	bl	800d0a0 <__assert_func>
 800d320:	3101      	adds	r1, #1
 800d322:	105b      	asrs	r3, r3, #1
 800d324:	e7ef      	b.n	800d306 <__gethex+0x132>
 800d326:	2300      	movs	r3, #0
 800d328:	f100 0a14 	add.w	sl, r0, #20
 800d32c:	4655      	mov	r5, sl
 800d32e:	469b      	mov	fp, r3
 800d330:	45b1      	cmp	r9, r6
 800d332:	d337      	bcc.n	800d3a4 <__gethex+0x1d0>
 800d334:	f845 bb04 	str.w	fp, [r5], #4
 800d338:	eba5 050a 	sub.w	r5, r5, sl
 800d33c:	10ad      	asrs	r5, r5, #2
 800d33e:	6125      	str	r5, [r4, #16]
 800d340:	4658      	mov	r0, fp
 800d342:	f7fe f87d 	bl	800b440 <__hi0bits>
 800d346:	016d      	lsls	r5, r5, #5
 800d348:	f8d8 6000 	ldr.w	r6, [r8]
 800d34c:	1a2d      	subs	r5, r5, r0
 800d34e:	42b5      	cmp	r5, r6
 800d350:	dd54      	ble.n	800d3fc <__gethex+0x228>
 800d352:	1bad      	subs	r5, r5, r6
 800d354:	4629      	mov	r1, r5
 800d356:	4620      	mov	r0, r4
 800d358:	f7fe fbff 	bl	800bb5a <__any_on>
 800d35c:	4681      	mov	r9, r0
 800d35e:	b178      	cbz	r0, 800d380 <__gethex+0x1ac>
 800d360:	f04f 0901 	mov.w	r9, #1
 800d364:	1e6b      	subs	r3, r5, #1
 800d366:	1159      	asrs	r1, r3, #5
 800d368:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d36c:	f003 021f 	and.w	r2, r3, #31
 800d370:	fa09 f202 	lsl.w	r2, r9, r2
 800d374:	420a      	tst	r2, r1
 800d376:	d003      	beq.n	800d380 <__gethex+0x1ac>
 800d378:	454b      	cmp	r3, r9
 800d37a:	dc36      	bgt.n	800d3ea <__gethex+0x216>
 800d37c:	f04f 0902 	mov.w	r9, #2
 800d380:	4629      	mov	r1, r5
 800d382:	4620      	mov	r0, r4
 800d384:	f7ff febe 	bl	800d104 <rshift>
 800d388:	442f      	add	r7, r5
 800d38a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d38e:	42bb      	cmp	r3, r7
 800d390:	da42      	bge.n	800d418 <__gethex+0x244>
 800d392:	4621      	mov	r1, r4
 800d394:	9801      	ldr	r0, [sp, #4]
 800d396:	f7fd ffa1 	bl	800b2dc <_Bfree>
 800d39a:	2300      	movs	r3, #0
 800d39c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d39e:	25a3      	movs	r5, #163	@ 0xa3
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	e793      	b.n	800d2cc <__gethex+0xf8>
 800d3a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d3a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d3aa:	d012      	beq.n	800d3d2 <__gethex+0x1fe>
 800d3ac:	2b20      	cmp	r3, #32
 800d3ae:	d104      	bne.n	800d3ba <__gethex+0x1e6>
 800d3b0:	f845 bb04 	str.w	fp, [r5], #4
 800d3b4:	f04f 0b00 	mov.w	fp, #0
 800d3b8:	465b      	mov	r3, fp
 800d3ba:	7830      	ldrb	r0, [r6, #0]
 800d3bc:	9303      	str	r3, [sp, #12]
 800d3be:	f7ff fef4 	bl	800d1aa <__hexdig_fun>
 800d3c2:	9b03      	ldr	r3, [sp, #12]
 800d3c4:	f000 000f 	and.w	r0, r0, #15
 800d3c8:	4098      	lsls	r0, r3
 800d3ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	e7ae      	b.n	800d330 <__gethex+0x15c>
 800d3d2:	45b1      	cmp	r9, r6
 800d3d4:	d8ea      	bhi.n	800d3ac <__gethex+0x1d8>
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	4630      	mov	r0, r6
 800d3da:	492a      	ldr	r1, [pc, #168]	@ (800d484 <__gethex+0x2b0>)
 800d3dc:	9303      	str	r3, [sp, #12]
 800d3de:	f7ff fe14 	bl	800d00a <strncmp>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d1e1      	bne.n	800d3ac <__gethex+0x1d8>
 800d3e8:	e7a2      	b.n	800d330 <__gethex+0x15c>
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	1ea9      	subs	r1, r5, #2
 800d3ee:	f7fe fbb4 	bl	800bb5a <__any_on>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d0c2      	beq.n	800d37c <__gethex+0x1a8>
 800d3f6:	f04f 0903 	mov.w	r9, #3
 800d3fa:	e7c1      	b.n	800d380 <__gethex+0x1ac>
 800d3fc:	da09      	bge.n	800d412 <__gethex+0x23e>
 800d3fe:	1b75      	subs	r5, r6, r5
 800d400:	4621      	mov	r1, r4
 800d402:	462a      	mov	r2, r5
 800d404:	9801      	ldr	r0, [sp, #4]
 800d406:	f7fe f979 	bl	800b6fc <__lshift>
 800d40a:	4604      	mov	r4, r0
 800d40c:	1b7f      	subs	r7, r7, r5
 800d40e:	f100 0a14 	add.w	sl, r0, #20
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	e7b8      	b.n	800d38a <__gethex+0x1b6>
 800d418:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d41c:	42bd      	cmp	r5, r7
 800d41e:	dd6f      	ble.n	800d500 <__gethex+0x32c>
 800d420:	1bed      	subs	r5, r5, r7
 800d422:	42ae      	cmp	r6, r5
 800d424:	dc34      	bgt.n	800d490 <__gethex+0x2bc>
 800d426:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d022      	beq.n	800d474 <__gethex+0x2a0>
 800d42e:	2b03      	cmp	r3, #3
 800d430:	d024      	beq.n	800d47c <__gethex+0x2a8>
 800d432:	2b01      	cmp	r3, #1
 800d434:	d115      	bne.n	800d462 <__gethex+0x28e>
 800d436:	42ae      	cmp	r6, r5
 800d438:	d113      	bne.n	800d462 <__gethex+0x28e>
 800d43a:	2e01      	cmp	r6, #1
 800d43c:	d10b      	bne.n	800d456 <__gethex+0x282>
 800d43e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d442:	9a02      	ldr	r2, [sp, #8]
 800d444:	2562      	movs	r5, #98	@ 0x62
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	2301      	movs	r3, #1
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	f8ca 3000 	str.w	r3, [sl]
 800d450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d452:	601c      	str	r4, [r3, #0]
 800d454:	e73a      	b.n	800d2cc <__gethex+0xf8>
 800d456:	4620      	mov	r0, r4
 800d458:	1e71      	subs	r1, r6, #1
 800d45a:	f7fe fb7e 	bl	800bb5a <__any_on>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d1ed      	bne.n	800d43e <__gethex+0x26a>
 800d462:	4621      	mov	r1, r4
 800d464:	9801      	ldr	r0, [sp, #4]
 800d466:	f7fd ff39 	bl	800b2dc <_Bfree>
 800d46a:	2300      	movs	r3, #0
 800d46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d46e:	2550      	movs	r5, #80	@ 0x50
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	e72b      	b.n	800d2cc <__gethex+0xf8>
 800d474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1f3      	bne.n	800d462 <__gethex+0x28e>
 800d47a:	e7e0      	b.n	800d43e <__gethex+0x26a>
 800d47c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1dd      	bne.n	800d43e <__gethex+0x26a>
 800d482:	e7ee      	b.n	800d462 <__gethex+0x28e>
 800d484:	0800f669 	.word	0x0800f669
 800d488:	0800f5ff 	.word	0x0800f5ff
 800d48c:	0800f6c0 	.word	0x0800f6c0
 800d490:	1e6f      	subs	r7, r5, #1
 800d492:	f1b9 0f00 	cmp.w	r9, #0
 800d496:	d130      	bne.n	800d4fa <__gethex+0x326>
 800d498:	b127      	cbz	r7, 800d4a4 <__gethex+0x2d0>
 800d49a:	4639      	mov	r1, r7
 800d49c:	4620      	mov	r0, r4
 800d49e:	f7fe fb5c 	bl	800bb5a <__any_on>
 800d4a2:	4681      	mov	r9, r0
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	1b76      	subs	r6, r6, r5
 800d4aa:	2502      	movs	r5, #2
 800d4ac:	117a      	asrs	r2, r7, #5
 800d4ae:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d4b2:	f007 071f 	and.w	r7, r7, #31
 800d4b6:	40bb      	lsls	r3, r7
 800d4b8:	4213      	tst	r3, r2
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	bf18      	it	ne
 800d4be:	f049 0902 	orrne.w	r9, r9, #2
 800d4c2:	f7ff fe1f 	bl	800d104 <rshift>
 800d4c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d4ca:	f1b9 0f00 	cmp.w	r9, #0
 800d4ce:	d047      	beq.n	800d560 <__gethex+0x38c>
 800d4d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d015      	beq.n	800d504 <__gethex+0x330>
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d017      	beq.n	800d50c <__gethex+0x338>
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d109      	bne.n	800d4f4 <__gethex+0x320>
 800d4e0:	f019 0f02 	tst.w	r9, #2
 800d4e4:	d006      	beq.n	800d4f4 <__gethex+0x320>
 800d4e6:	f8da 3000 	ldr.w	r3, [sl]
 800d4ea:	ea49 0903 	orr.w	r9, r9, r3
 800d4ee:	f019 0f01 	tst.w	r9, #1
 800d4f2:	d10e      	bne.n	800d512 <__gethex+0x33e>
 800d4f4:	f045 0510 	orr.w	r5, r5, #16
 800d4f8:	e032      	b.n	800d560 <__gethex+0x38c>
 800d4fa:	f04f 0901 	mov.w	r9, #1
 800d4fe:	e7d1      	b.n	800d4a4 <__gethex+0x2d0>
 800d500:	2501      	movs	r5, #1
 800d502:	e7e2      	b.n	800d4ca <__gethex+0x2f6>
 800d504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d506:	f1c3 0301 	rsb	r3, r3, #1
 800d50a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d50c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0f0      	beq.n	800d4f4 <__gethex+0x320>
 800d512:	f04f 0c00 	mov.w	ip, #0
 800d516:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d51a:	f104 0314 	add.w	r3, r4, #20
 800d51e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d522:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d526:	4618      	mov	r0, r3
 800d528:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d530:	d01b      	beq.n	800d56a <__gethex+0x396>
 800d532:	3201      	adds	r2, #1
 800d534:	6002      	str	r2, [r0, #0]
 800d536:	2d02      	cmp	r5, #2
 800d538:	f104 0314 	add.w	r3, r4, #20
 800d53c:	d13c      	bne.n	800d5b8 <__gethex+0x3e4>
 800d53e:	f8d8 2000 	ldr.w	r2, [r8]
 800d542:	3a01      	subs	r2, #1
 800d544:	42b2      	cmp	r2, r6
 800d546:	d109      	bne.n	800d55c <__gethex+0x388>
 800d548:	2201      	movs	r2, #1
 800d54a:	1171      	asrs	r1, r6, #5
 800d54c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d550:	f006 061f 	and.w	r6, r6, #31
 800d554:	fa02 f606 	lsl.w	r6, r2, r6
 800d558:	421e      	tst	r6, r3
 800d55a:	d13a      	bne.n	800d5d2 <__gethex+0x3fe>
 800d55c:	f045 0520 	orr.w	r5, r5, #32
 800d560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d562:	601c      	str	r4, [r3, #0]
 800d564:	9b02      	ldr	r3, [sp, #8]
 800d566:	601f      	str	r7, [r3, #0]
 800d568:	e6b0      	b.n	800d2cc <__gethex+0xf8>
 800d56a:	4299      	cmp	r1, r3
 800d56c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d570:	d8d9      	bhi.n	800d526 <__gethex+0x352>
 800d572:	68a3      	ldr	r3, [r4, #8]
 800d574:	459b      	cmp	fp, r3
 800d576:	db17      	blt.n	800d5a8 <__gethex+0x3d4>
 800d578:	6861      	ldr	r1, [r4, #4]
 800d57a:	9801      	ldr	r0, [sp, #4]
 800d57c:	3101      	adds	r1, #1
 800d57e:	f7fd fe6d 	bl	800b25c <_Balloc>
 800d582:	4681      	mov	r9, r0
 800d584:	b918      	cbnz	r0, 800d58e <__gethex+0x3ba>
 800d586:	4602      	mov	r2, r0
 800d588:	2184      	movs	r1, #132	@ 0x84
 800d58a:	4b19      	ldr	r3, [pc, #100]	@ (800d5f0 <__gethex+0x41c>)
 800d58c:	e6c5      	b.n	800d31a <__gethex+0x146>
 800d58e:	6922      	ldr	r2, [r4, #16]
 800d590:	f104 010c 	add.w	r1, r4, #12
 800d594:	3202      	adds	r2, #2
 800d596:	0092      	lsls	r2, r2, #2
 800d598:	300c      	adds	r0, #12
 800d59a:	f7fc fef2 	bl	800a382 <memcpy>
 800d59e:	4621      	mov	r1, r4
 800d5a0:	9801      	ldr	r0, [sp, #4]
 800d5a2:	f7fd fe9b 	bl	800b2dc <_Bfree>
 800d5a6:	464c      	mov	r4, r9
 800d5a8:	6923      	ldr	r3, [r4, #16]
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	6122      	str	r2, [r4, #16]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d5b4:	615a      	str	r2, [r3, #20]
 800d5b6:	e7be      	b.n	800d536 <__gethex+0x362>
 800d5b8:	6922      	ldr	r2, [r4, #16]
 800d5ba:	455a      	cmp	r2, fp
 800d5bc:	dd0b      	ble.n	800d5d6 <__gethex+0x402>
 800d5be:	2101      	movs	r1, #1
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f7ff fd9f 	bl	800d104 <rshift>
 800d5c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5ca:	3701      	adds	r7, #1
 800d5cc:	42bb      	cmp	r3, r7
 800d5ce:	f6ff aee0 	blt.w	800d392 <__gethex+0x1be>
 800d5d2:	2501      	movs	r5, #1
 800d5d4:	e7c2      	b.n	800d55c <__gethex+0x388>
 800d5d6:	f016 061f 	ands.w	r6, r6, #31
 800d5da:	d0fa      	beq.n	800d5d2 <__gethex+0x3fe>
 800d5dc:	4453      	add	r3, sl
 800d5de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d5e2:	f7fd ff2d 	bl	800b440 <__hi0bits>
 800d5e6:	f1c6 0620 	rsb	r6, r6, #32
 800d5ea:	42b0      	cmp	r0, r6
 800d5ec:	dbe7      	blt.n	800d5be <__gethex+0x3ea>
 800d5ee:	e7f0      	b.n	800d5d2 <__gethex+0x3fe>
 800d5f0:	0800f5ff 	.word	0x0800f5ff

0800d5f4 <L_shift>:
 800d5f4:	f1c2 0208 	rsb	r2, r2, #8
 800d5f8:	0092      	lsls	r2, r2, #2
 800d5fa:	b570      	push	{r4, r5, r6, lr}
 800d5fc:	f1c2 0620 	rsb	r6, r2, #32
 800d600:	6843      	ldr	r3, [r0, #4]
 800d602:	6804      	ldr	r4, [r0, #0]
 800d604:	fa03 f506 	lsl.w	r5, r3, r6
 800d608:	432c      	orrs	r4, r5
 800d60a:	40d3      	lsrs	r3, r2
 800d60c:	6004      	str	r4, [r0, #0]
 800d60e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d612:	4288      	cmp	r0, r1
 800d614:	d3f4      	bcc.n	800d600 <L_shift+0xc>
 800d616:	bd70      	pop	{r4, r5, r6, pc}

0800d618 <__match>:
 800d618:	b530      	push	{r4, r5, lr}
 800d61a:	6803      	ldr	r3, [r0, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d622:	b914      	cbnz	r4, 800d62a <__match+0x12>
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	2001      	movs	r0, #1
 800d628:	bd30      	pop	{r4, r5, pc}
 800d62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d62e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d632:	2d19      	cmp	r5, #25
 800d634:	bf98      	it	ls
 800d636:	3220      	addls	r2, #32
 800d638:	42a2      	cmp	r2, r4
 800d63a:	d0f0      	beq.n	800d61e <__match+0x6>
 800d63c:	2000      	movs	r0, #0
 800d63e:	e7f3      	b.n	800d628 <__match+0x10>

0800d640 <__hexnan>:
 800d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	2500      	movs	r5, #0
 800d646:	680b      	ldr	r3, [r1, #0]
 800d648:	4682      	mov	sl, r0
 800d64a:	115e      	asrs	r6, r3, #5
 800d64c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d650:	f013 031f 	ands.w	r3, r3, #31
 800d654:	bf18      	it	ne
 800d656:	3604      	addne	r6, #4
 800d658:	1f37      	subs	r7, r6, #4
 800d65a:	4690      	mov	r8, r2
 800d65c:	46b9      	mov	r9, r7
 800d65e:	463c      	mov	r4, r7
 800d660:	46ab      	mov	fp, r5
 800d662:	b087      	sub	sp, #28
 800d664:	6801      	ldr	r1, [r0, #0]
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	f846 5c04 	str.w	r5, [r6, #-4]
 800d66c:	9502      	str	r5, [sp, #8]
 800d66e:	784a      	ldrb	r2, [r1, #1]
 800d670:	1c4b      	adds	r3, r1, #1
 800d672:	9303      	str	r3, [sp, #12]
 800d674:	b342      	cbz	r2, 800d6c8 <__hexnan+0x88>
 800d676:	4610      	mov	r0, r2
 800d678:	9105      	str	r1, [sp, #20]
 800d67a:	9204      	str	r2, [sp, #16]
 800d67c:	f7ff fd95 	bl	800d1aa <__hexdig_fun>
 800d680:	2800      	cmp	r0, #0
 800d682:	d151      	bne.n	800d728 <__hexnan+0xe8>
 800d684:	9a04      	ldr	r2, [sp, #16]
 800d686:	9905      	ldr	r1, [sp, #20]
 800d688:	2a20      	cmp	r2, #32
 800d68a:	d818      	bhi.n	800d6be <__hexnan+0x7e>
 800d68c:	9b02      	ldr	r3, [sp, #8]
 800d68e:	459b      	cmp	fp, r3
 800d690:	dd13      	ble.n	800d6ba <__hexnan+0x7a>
 800d692:	454c      	cmp	r4, r9
 800d694:	d206      	bcs.n	800d6a4 <__hexnan+0x64>
 800d696:	2d07      	cmp	r5, #7
 800d698:	dc04      	bgt.n	800d6a4 <__hexnan+0x64>
 800d69a:	462a      	mov	r2, r5
 800d69c:	4649      	mov	r1, r9
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f7ff ffa8 	bl	800d5f4 <L_shift>
 800d6a4:	4544      	cmp	r4, r8
 800d6a6:	d952      	bls.n	800d74e <__hexnan+0x10e>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f1a4 0904 	sub.w	r9, r4, #4
 800d6ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6b2:	461d      	mov	r5, r3
 800d6b4:	464c      	mov	r4, r9
 800d6b6:	f8cd b008 	str.w	fp, [sp, #8]
 800d6ba:	9903      	ldr	r1, [sp, #12]
 800d6bc:	e7d7      	b.n	800d66e <__hexnan+0x2e>
 800d6be:	2a29      	cmp	r2, #41	@ 0x29
 800d6c0:	d157      	bne.n	800d772 <__hexnan+0x132>
 800d6c2:	3102      	adds	r1, #2
 800d6c4:	f8ca 1000 	str.w	r1, [sl]
 800d6c8:	f1bb 0f00 	cmp.w	fp, #0
 800d6cc:	d051      	beq.n	800d772 <__hexnan+0x132>
 800d6ce:	454c      	cmp	r4, r9
 800d6d0:	d206      	bcs.n	800d6e0 <__hexnan+0xa0>
 800d6d2:	2d07      	cmp	r5, #7
 800d6d4:	dc04      	bgt.n	800d6e0 <__hexnan+0xa0>
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	4649      	mov	r1, r9
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7ff ff8a 	bl	800d5f4 <L_shift>
 800d6e0:	4544      	cmp	r4, r8
 800d6e2:	d936      	bls.n	800d752 <__hexnan+0x112>
 800d6e4:	4623      	mov	r3, r4
 800d6e6:	f1a8 0204 	sub.w	r2, r8, #4
 800d6ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6ee:	429f      	cmp	r7, r3
 800d6f0:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6f4:	d2f9      	bcs.n	800d6ea <__hexnan+0xaa>
 800d6f6:	1b3b      	subs	r3, r7, r4
 800d6f8:	f023 0303 	bic.w	r3, r3, #3
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	3401      	adds	r4, #1
 800d700:	3e03      	subs	r6, #3
 800d702:	42b4      	cmp	r4, r6
 800d704:	bf88      	it	hi
 800d706:	2304      	movhi	r3, #4
 800d708:	2200      	movs	r2, #0
 800d70a:	4443      	add	r3, r8
 800d70c:	f843 2b04 	str.w	r2, [r3], #4
 800d710:	429f      	cmp	r7, r3
 800d712:	d2fb      	bcs.n	800d70c <__hexnan+0xcc>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	b91b      	cbnz	r3, 800d720 <__hexnan+0xe0>
 800d718:	4547      	cmp	r7, r8
 800d71a:	d128      	bne.n	800d76e <__hexnan+0x12e>
 800d71c:	2301      	movs	r3, #1
 800d71e:	603b      	str	r3, [r7, #0]
 800d720:	2005      	movs	r0, #5
 800d722:	b007      	add	sp, #28
 800d724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d728:	3501      	adds	r5, #1
 800d72a:	2d08      	cmp	r5, #8
 800d72c:	f10b 0b01 	add.w	fp, fp, #1
 800d730:	dd06      	ble.n	800d740 <__hexnan+0x100>
 800d732:	4544      	cmp	r4, r8
 800d734:	d9c1      	bls.n	800d6ba <__hexnan+0x7a>
 800d736:	2300      	movs	r3, #0
 800d738:	2501      	movs	r5, #1
 800d73a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d73e:	3c04      	subs	r4, #4
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	f000 000f 	and.w	r0, r0, #15
 800d746:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d74a:	6020      	str	r0, [r4, #0]
 800d74c:	e7b5      	b.n	800d6ba <__hexnan+0x7a>
 800d74e:	2508      	movs	r5, #8
 800d750:	e7b3      	b.n	800d6ba <__hexnan+0x7a>
 800d752:	9b01      	ldr	r3, [sp, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0dd      	beq.n	800d714 <__hexnan+0xd4>
 800d758:	f04f 32ff 	mov.w	r2, #4294967295
 800d75c:	f1c3 0320 	rsb	r3, r3, #32
 800d760:	40da      	lsrs	r2, r3
 800d762:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d766:	4013      	ands	r3, r2
 800d768:	f846 3c04 	str.w	r3, [r6, #-4]
 800d76c:	e7d2      	b.n	800d714 <__hexnan+0xd4>
 800d76e:	3f04      	subs	r7, #4
 800d770:	e7d0      	b.n	800d714 <__hexnan+0xd4>
 800d772:	2004      	movs	r0, #4
 800d774:	e7d5      	b.n	800d722 <__hexnan+0xe2>

0800d776 <__ascii_mbtowc>:
 800d776:	b082      	sub	sp, #8
 800d778:	b901      	cbnz	r1, 800d77c <__ascii_mbtowc+0x6>
 800d77a:	a901      	add	r1, sp, #4
 800d77c:	b142      	cbz	r2, 800d790 <__ascii_mbtowc+0x1a>
 800d77e:	b14b      	cbz	r3, 800d794 <__ascii_mbtowc+0x1e>
 800d780:	7813      	ldrb	r3, [r2, #0]
 800d782:	600b      	str	r3, [r1, #0]
 800d784:	7812      	ldrb	r2, [r2, #0]
 800d786:	1e10      	subs	r0, r2, #0
 800d788:	bf18      	it	ne
 800d78a:	2001      	movne	r0, #1
 800d78c:	b002      	add	sp, #8
 800d78e:	4770      	bx	lr
 800d790:	4610      	mov	r0, r2
 800d792:	e7fb      	b.n	800d78c <__ascii_mbtowc+0x16>
 800d794:	f06f 0001 	mvn.w	r0, #1
 800d798:	e7f8      	b.n	800d78c <__ascii_mbtowc+0x16>

0800d79a <_realloc_r>:
 800d79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d79e:	4607      	mov	r7, r0
 800d7a0:	4614      	mov	r4, r2
 800d7a2:	460d      	mov	r5, r1
 800d7a4:	b921      	cbnz	r1, 800d7b0 <_realloc_r+0x16>
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ac:	f7fd bcca 	b.w	800b144 <_malloc_r>
 800d7b0:	b92a      	cbnz	r2, 800d7be <_realloc_r+0x24>
 800d7b2:	f7fd fc55 	bl	800b060 <_free_r>
 800d7b6:	4625      	mov	r5, r4
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7be:	f000 f840 	bl	800d842 <_malloc_usable_size_r>
 800d7c2:	4284      	cmp	r4, r0
 800d7c4:	4606      	mov	r6, r0
 800d7c6:	d802      	bhi.n	800d7ce <_realloc_r+0x34>
 800d7c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7cc:	d8f4      	bhi.n	800d7b8 <_realloc_r+0x1e>
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7fd fcb7 	bl	800b144 <_malloc_r>
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	b908      	cbnz	r0, 800d7de <_realloc_r+0x44>
 800d7da:	4645      	mov	r5, r8
 800d7dc:	e7ec      	b.n	800d7b8 <_realloc_r+0x1e>
 800d7de:	42b4      	cmp	r4, r6
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	bf28      	it	cs
 800d7e6:	4632      	movcs	r2, r6
 800d7e8:	f7fc fdcb 	bl	800a382 <memcpy>
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	f7fd fc36 	bl	800b060 <_free_r>
 800d7f4:	e7f1      	b.n	800d7da <_realloc_r+0x40>

0800d7f6 <__ascii_wctomb>:
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	4608      	mov	r0, r1
 800d7fa:	b141      	cbz	r1, 800d80e <__ascii_wctomb+0x18>
 800d7fc:	2aff      	cmp	r2, #255	@ 0xff
 800d7fe:	d904      	bls.n	800d80a <__ascii_wctomb+0x14>
 800d800:	228a      	movs	r2, #138	@ 0x8a
 800d802:	f04f 30ff 	mov.w	r0, #4294967295
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	4770      	bx	lr
 800d80a:	2001      	movs	r0, #1
 800d80c:	700a      	strb	r2, [r1, #0]
 800d80e:	4770      	bx	lr

0800d810 <fiprintf>:
 800d810:	b40e      	push	{r1, r2, r3}
 800d812:	b503      	push	{r0, r1, lr}
 800d814:	4601      	mov	r1, r0
 800d816:	ab03      	add	r3, sp, #12
 800d818:	4805      	ldr	r0, [pc, #20]	@ (800d830 <fiprintf+0x20>)
 800d81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d81e:	6800      	ldr	r0, [r0, #0]
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	f7ff f9b7 	bl	800cb94 <_vfiprintf_r>
 800d826:	b002      	add	sp, #8
 800d828:	f85d eb04 	ldr.w	lr, [sp], #4
 800d82c:	b003      	add	sp, #12
 800d82e:	4770      	bx	lr
 800d830:	20000030 	.word	0x20000030

0800d834 <abort>:
 800d834:	2006      	movs	r0, #6
 800d836:	b508      	push	{r3, lr}
 800d838:	f000 f834 	bl	800d8a4 <raise>
 800d83c:	2001      	movs	r0, #1
 800d83e:	f7f5 fa64 	bl	8002d0a <_exit>

0800d842 <_malloc_usable_size_r>:
 800d842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d846:	1f18      	subs	r0, r3, #4
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bfbc      	itt	lt
 800d84c:	580b      	ldrlt	r3, [r1, r0]
 800d84e:	18c0      	addlt	r0, r0, r3
 800d850:	4770      	bx	lr

0800d852 <_raise_r>:
 800d852:	291f      	cmp	r1, #31
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4605      	mov	r5, r0
 800d858:	460c      	mov	r4, r1
 800d85a:	d904      	bls.n	800d866 <_raise_r+0x14>
 800d85c:	2316      	movs	r3, #22
 800d85e:	6003      	str	r3, [r0, #0]
 800d860:	f04f 30ff 	mov.w	r0, #4294967295
 800d864:	bd38      	pop	{r3, r4, r5, pc}
 800d866:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d868:	b112      	cbz	r2, 800d870 <_raise_r+0x1e>
 800d86a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d86e:	b94b      	cbnz	r3, 800d884 <_raise_r+0x32>
 800d870:	4628      	mov	r0, r5
 800d872:	f000 f831 	bl	800d8d8 <_getpid_r>
 800d876:	4622      	mov	r2, r4
 800d878:	4601      	mov	r1, r0
 800d87a:	4628      	mov	r0, r5
 800d87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d880:	f000 b818 	b.w	800d8b4 <_kill_r>
 800d884:	2b01      	cmp	r3, #1
 800d886:	d00a      	beq.n	800d89e <_raise_r+0x4c>
 800d888:	1c59      	adds	r1, r3, #1
 800d88a:	d103      	bne.n	800d894 <_raise_r+0x42>
 800d88c:	2316      	movs	r3, #22
 800d88e:	6003      	str	r3, [r0, #0]
 800d890:	2001      	movs	r0, #1
 800d892:	e7e7      	b.n	800d864 <_raise_r+0x12>
 800d894:	2100      	movs	r1, #0
 800d896:	4620      	mov	r0, r4
 800d898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d89c:	4798      	blx	r3
 800d89e:	2000      	movs	r0, #0
 800d8a0:	e7e0      	b.n	800d864 <_raise_r+0x12>
	...

0800d8a4 <raise>:
 800d8a4:	4b02      	ldr	r3, [pc, #8]	@ (800d8b0 <raise+0xc>)
 800d8a6:	4601      	mov	r1, r0
 800d8a8:	6818      	ldr	r0, [r3, #0]
 800d8aa:	f7ff bfd2 	b.w	800d852 <_raise_r>
 800d8ae:	bf00      	nop
 800d8b0:	20000030 	.word	0x20000030

0800d8b4 <_kill_r>:
 800d8b4:	b538      	push	{r3, r4, r5, lr}
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	4d06      	ldr	r5, [pc, #24]	@ (800d8d4 <_kill_r+0x20>)
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	4608      	mov	r0, r1
 800d8be:	4611      	mov	r1, r2
 800d8c0:	602b      	str	r3, [r5, #0]
 800d8c2:	f7f5 fa12 	bl	8002cea <_kill>
 800d8c6:	1c43      	adds	r3, r0, #1
 800d8c8:	d102      	bne.n	800d8d0 <_kill_r+0x1c>
 800d8ca:	682b      	ldr	r3, [r5, #0]
 800d8cc:	b103      	cbz	r3, 800d8d0 <_kill_r+0x1c>
 800d8ce:	6023      	str	r3, [r4, #0]
 800d8d0:	bd38      	pop	{r3, r4, r5, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20002e54 	.word	0x20002e54

0800d8d8 <_getpid_r>:
 800d8d8:	f7f5 ba00 	b.w	8002cdc <_getpid>

0800d8dc <asinf>:
 800d8dc:	b538      	push	{r3, r4, r5, lr}
 800d8de:	4604      	mov	r4, r0
 800d8e0:	f000 fa52 	bl	800dd88 <__ieee754_asinf>
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f7f3 fc11 	bl	8001110 <__aeabi_fcmpun>
 800d8ee:	b980      	cbnz	r0, 800d912 <asinf+0x36>
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f000 f87c 	bl	800d9ee <fabsf>
 800d8f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d8fa:	f7f3 fbff 	bl	80010fc <__aeabi_fcmpgt>
 800d8fe:	b140      	cbz	r0, 800d912 <asinf+0x36>
 800d900:	f7fc fd04 	bl	800a30c <__errno>
 800d904:	2321      	movs	r3, #33	@ 0x21
 800d906:	6003      	str	r3, [r0, #0]
 800d908:	4803      	ldr	r0, [pc, #12]	@ (800d918 <asinf+0x3c>)
 800d90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d90e:	f7fc bd47 	b.w	800a3a0 <nanf>
 800d912:	4628      	mov	r0, r5
 800d914:	bd38      	pop	{r3, r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	0800f6bf 	.word	0x0800f6bf

0800d91c <atan2f>:
 800d91c:	f000 bb76 	b.w	800e00c <__ieee754_atan2f>

0800d920 <powf>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	460c      	mov	r4, r1
 800d924:	4606      	mov	r6, r0
 800d926:	f000 fbf9 	bl	800e11c <__ieee754_powf>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4605      	mov	r5, r0
 800d92e:	4620      	mov	r0, r4
 800d930:	f7f3 fbee 	bl	8001110 <__aeabi_fcmpun>
 800d934:	bb68      	cbnz	r0, 800d992 <powf+0x72>
 800d936:	2100      	movs	r1, #0
 800d938:	4630      	mov	r0, r6
 800d93a:	f7f3 fbb7 	bl	80010ac <__aeabi_fcmpeq>
 800d93e:	b190      	cbz	r0, 800d966 <powf+0x46>
 800d940:	2100      	movs	r1, #0
 800d942:	4620      	mov	r0, r4
 800d944:	f7f3 fbb2 	bl	80010ac <__aeabi_fcmpeq>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d133      	bne.n	800d9b4 <powf+0x94>
 800d94c:	4620      	mov	r0, r4
 800d94e:	f000 f877 	bl	800da40 <finitef>
 800d952:	b1f0      	cbz	r0, 800d992 <powf+0x72>
 800d954:	2100      	movs	r1, #0
 800d956:	4620      	mov	r0, r4
 800d958:	f7f3 fbb2 	bl	80010c0 <__aeabi_fcmplt>
 800d95c:	b1c8      	cbz	r0, 800d992 <powf+0x72>
 800d95e:	f7fc fcd5 	bl	800a30c <__errno>
 800d962:	2322      	movs	r3, #34	@ 0x22
 800d964:	e014      	b.n	800d990 <powf+0x70>
 800d966:	4628      	mov	r0, r5
 800d968:	f000 f86a 	bl	800da40 <finitef>
 800d96c:	b998      	cbnz	r0, 800d996 <powf+0x76>
 800d96e:	4630      	mov	r0, r6
 800d970:	f000 f866 	bl	800da40 <finitef>
 800d974:	b178      	cbz	r0, 800d996 <powf+0x76>
 800d976:	4620      	mov	r0, r4
 800d978:	f000 f862 	bl	800da40 <finitef>
 800d97c:	b158      	cbz	r0, 800d996 <powf+0x76>
 800d97e:	4629      	mov	r1, r5
 800d980:	4628      	mov	r0, r5
 800d982:	f7f3 fbc5 	bl	8001110 <__aeabi_fcmpun>
 800d986:	2800      	cmp	r0, #0
 800d988:	d0e9      	beq.n	800d95e <powf+0x3e>
 800d98a:	f7fc fcbf 	bl	800a30c <__errno>
 800d98e:	2321      	movs	r3, #33	@ 0x21
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	4628      	mov	r0, r5
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	2100      	movs	r1, #0
 800d998:	4628      	mov	r0, r5
 800d99a:	f7f3 fb87 	bl	80010ac <__aeabi_fcmpeq>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d0f7      	beq.n	800d992 <powf+0x72>
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f000 f84c 	bl	800da40 <finitef>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d0f2      	beq.n	800d992 <powf+0x72>
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f000 f847 	bl	800da40 <finitef>
 800d9b2:	e7d3      	b.n	800d95c <powf+0x3c>
 800d9b4:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800d9b8:	e7eb      	b.n	800d992 <powf+0x72>

0800d9ba <sqrtf>:
 800d9ba:	b538      	push	{r3, r4, r5, lr}
 800d9bc:	4605      	mov	r5, r0
 800d9be:	f000 f847 	bl	800da50 <__ieee754_sqrtf>
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f7f3 fba2 	bl	8001110 <__aeabi_fcmpun>
 800d9cc:	b968      	cbnz	r0, 800d9ea <sqrtf+0x30>
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	f7f3 fb75 	bl	80010c0 <__aeabi_fcmplt>
 800d9d6:	b140      	cbz	r0, 800d9ea <sqrtf+0x30>
 800d9d8:	f7fc fc98 	bl	800a30c <__errno>
 800d9dc:	2321      	movs	r3, #33	@ 0x21
 800d9de:	2100      	movs	r1, #0
 800d9e0:	6003      	str	r3, [r0, #0]
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	f7f3 fa82 	bl	8000eec <__aeabi_fdiv>
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	bd38      	pop	{r3, r4, r5, pc}

0800d9ee <fabsf>:
 800d9ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d9f2:	4770      	bx	lr

0800d9f4 <tanf>:
 800d9f4:	b507      	push	{r0, r1, r2, lr}
 800d9f6:	4a11      	ldr	r2, [pc, #68]	@ (800da3c <tanf+0x48>)
 800d9f8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	4601      	mov	r1, r0
 800da00:	d806      	bhi.n	800da10 <tanf+0x1c>
 800da02:	2201      	movs	r2, #1
 800da04:	2100      	movs	r1, #0
 800da06:	b003      	add	sp, #12
 800da08:	f85d eb04 	ldr.w	lr, [sp], #4
 800da0c:	f000 b890 	b.w	800db30 <__kernel_tanf>
 800da10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800da14:	d304      	bcc.n	800da20 <tanf+0x2c>
 800da16:	f7f3 f8ab 	bl	8000b70 <__aeabi_fsub>
 800da1a:	b003      	add	sp, #12
 800da1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800da20:	4669      	mov	r1, sp
 800da22:	f000 fedb 	bl	800e7dc <__ieee754_rem_pio2f>
 800da26:	0042      	lsls	r2, r0, #1
 800da28:	f002 0202 	and.w	r2, r2, #2
 800da2c:	9901      	ldr	r1, [sp, #4]
 800da2e:	9800      	ldr	r0, [sp, #0]
 800da30:	f1c2 0201 	rsb	r2, r2, #1
 800da34:	f000 f87c 	bl	800db30 <__kernel_tanf>
 800da38:	e7ef      	b.n	800da1a <tanf+0x26>
 800da3a:	bf00      	nop
 800da3c:	3f490fda 	.word	0x3f490fda

0800da40 <finitef>:
 800da40:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800da44:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800da48:	bfac      	ite	ge
 800da4a:	2000      	movge	r0, #0
 800da4c:	2001      	movlt	r0, #1
 800da4e:	4770      	bx	lr

0800da50 <__ieee754_sqrtf>:
 800da50:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800da54:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	4603      	mov	r3, r0
 800da5e:	4604      	mov	r4, r0
 800da60:	d30a      	bcc.n	800da78 <__ieee754_sqrtf+0x28>
 800da62:	4601      	mov	r1, r0
 800da64:	f7f3 f98e 	bl	8000d84 <__aeabi_fmul>
 800da68:	4601      	mov	r1, r0
 800da6a:	4620      	mov	r0, r4
 800da6c:	f7f3 f882 	bl	8000b74 <__addsf3>
 800da70:	4604      	mov	r4, r0
 800da72:	4620      	mov	r0, r4
 800da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da78:	2a00      	cmp	r2, #0
 800da7a:	d0fa      	beq.n	800da72 <__ieee754_sqrtf+0x22>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	da06      	bge.n	800da8e <__ieee754_sqrtf+0x3e>
 800da80:	4601      	mov	r1, r0
 800da82:	f7f3 f875 	bl	8000b70 <__aeabi_fsub>
 800da86:	4601      	mov	r1, r0
 800da88:	f7f3 fa30 	bl	8000eec <__aeabi_fdiv>
 800da8c:	e7f0      	b.n	800da70 <__ieee754_sqrtf+0x20>
 800da8e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800da92:	d03c      	beq.n	800db0e <__ieee754_sqrtf+0xbe>
 800da94:	15c2      	asrs	r2, r0, #23
 800da96:	2400      	movs	r4, #0
 800da98:	2019      	movs	r0, #25
 800da9a:	4626      	mov	r6, r4
 800da9c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800daa0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800daa4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800daa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800daac:	07d2      	lsls	r2, r2, #31
 800daae:	bf58      	it	pl
 800dab0:	005b      	lslpl	r3, r3, #1
 800dab2:	106d      	asrs	r5, r5, #1
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	1872      	adds	r2, r6, r1
 800dab8:	429a      	cmp	r2, r3
 800daba:	bfcf      	iteee	gt
 800dabc:	461a      	movgt	r2, r3
 800dabe:	1856      	addle	r6, r2, r1
 800dac0:	1864      	addle	r4, r4, r1
 800dac2:	1a9a      	suble	r2, r3, r2
 800dac4:	3801      	subs	r0, #1
 800dac6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800daca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dace:	d1f2      	bne.n	800dab6 <__ieee754_sqrtf+0x66>
 800dad0:	b1ba      	cbz	r2, 800db02 <__ieee754_sqrtf+0xb2>
 800dad2:	4e15      	ldr	r6, [pc, #84]	@ (800db28 <__ieee754_sqrtf+0xd8>)
 800dad4:	4f15      	ldr	r7, [pc, #84]	@ (800db2c <__ieee754_sqrtf+0xdc>)
 800dad6:	6830      	ldr	r0, [r6, #0]
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	f7f3 f849 	bl	8000b70 <__aeabi_fsub>
 800dade:	f8d6 8000 	ldr.w	r8, [r6]
 800dae2:	4601      	mov	r1, r0
 800dae4:	4640      	mov	r0, r8
 800dae6:	f7f3 faf5 	bl	80010d4 <__aeabi_fcmple>
 800daea:	b150      	cbz	r0, 800db02 <__ieee754_sqrtf+0xb2>
 800daec:	6830      	ldr	r0, [r6, #0]
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	f7f3 f840 	bl	8000b74 <__addsf3>
 800daf4:	6836      	ldr	r6, [r6, #0]
 800daf6:	4601      	mov	r1, r0
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7f3 fae1 	bl	80010c0 <__aeabi_fcmplt>
 800dafe:	b170      	cbz	r0, 800db1e <__ieee754_sqrtf+0xce>
 800db00:	3402      	adds	r4, #2
 800db02:	1064      	asrs	r4, r4, #1
 800db04:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800db08:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800db0c:	e7b1      	b.n	800da72 <__ieee754_sqrtf+0x22>
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	0218      	lsls	r0, r3, #8
 800db12:	460a      	mov	r2, r1
 800db14:	f101 0101 	add.w	r1, r1, #1
 800db18:	d5f9      	bpl.n	800db0e <__ieee754_sqrtf+0xbe>
 800db1a:	4252      	negs	r2, r2
 800db1c:	e7bb      	b.n	800da96 <__ieee754_sqrtf+0x46>
 800db1e:	3401      	adds	r4, #1
 800db20:	f024 0401 	bic.w	r4, r4, #1
 800db24:	e7ed      	b.n	800db02 <__ieee754_sqrtf+0xb2>
 800db26:	bf00      	nop
 800db28:	0800f978 	.word	0x0800f978
 800db2c:	0800f974 	.word	0x0800f974

0800db30 <__kernel_tanf>:
 800db30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 800db38:	f1b9 5f46 	cmp.w	r9, #830472192	@ 0x31800000
 800db3c:	4683      	mov	fp, r0
 800db3e:	460d      	mov	r5, r1
 800db40:	4617      	mov	r7, r2
 800db42:	4606      	mov	r6, r0
 800db44:	d218      	bcs.n	800db78 <__kernel_tanf+0x48>
 800db46:	f7f3 faf9 	bl	800113c <__aeabi_f2iz>
 800db4a:	bb68      	cbnz	r0, 800dba8 <__kernel_tanf+0x78>
 800db4c:	1c7a      	adds	r2, r7, #1
 800db4e:	ea52 0209 	orrs.w	r2, r2, r9
 800db52:	d10c      	bne.n	800db6e <__kernel_tanf+0x3e>
 800db54:	4658      	mov	r0, fp
 800db56:	f7ff ff4a 	bl	800d9ee <fabsf>
 800db5a:	4601      	mov	r1, r0
 800db5c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800db60:	f7f3 f9c4 	bl	8000eec <__aeabi_fdiv>
 800db64:	4683      	mov	fp, r0
 800db66:	4658      	mov	r0, fp
 800db68:	b003      	add	sp, #12
 800db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6e:	2f01      	cmp	r7, #1
 800db70:	d0f9      	beq.n	800db66 <__kernel_tanf+0x36>
 800db72:	4659      	mov	r1, fp
 800db74:	4872      	ldr	r0, [pc, #456]	@ (800dd40 <__kernel_tanf+0x210>)
 800db76:	e7f3      	b.n	800db60 <__kernel_tanf+0x30>
 800db78:	4a72      	ldr	r2, [pc, #456]	@ (800dd44 <__kernel_tanf+0x214>)
 800db7a:	4591      	cmp	r9, r2
 800db7c:	d314      	bcc.n	800dba8 <__kernel_tanf+0x78>
 800db7e:	2800      	cmp	r0, #0
 800db80:	bfbe      	ittt	lt
 800db82:	f100 4300 	addlt.w	r3, r0, #2147483648	@ 0x80000000
 800db86:	469b      	movlt	fp, r3
 800db88:	f101 4500 	addlt.w	r5, r1, #2147483648	@ 0x80000000
 800db8c:	486e      	ldr	r0, [pc, #440]	@ (800dd48 <__kernel_tanf+0x218>)
 800db8e:	4659      	mov	r1, fp
 800db90:	f7f2 ffee 	bl	8000b70 <__aeabi_fsub>
 800db94:	4604      	mov	r4, r0
 800db96:	4629      	mov	r1, r5
 800db98:	486c      	ldr	r0, [pc, #432]	@ (800dd4c <__kernel_tanf+0x21c>)
 800db9a:	f7f2 ffe9 	bl	8000b70 <__aeabi_fsub>
 800db9e:	4621      	mov	r1, r4
 800dba0:	f7f2 ffe8 	bl	8000b74 <__addsf3>
 800dba4:	2500      	movs	r5, #0
 800dba6:	4683      	mov	fp, r0
 800dba8:	4659      	mov	r1, fp
 800dbaa:	4658      	mov	r0, fp
 800dbac:	f7f3 f8ea 	bl	8000d84 <__aeabi_fmul>
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	4680      	mov	r8, r0
 800dbb4:	f7f3 f8e6 	bl	8000d84 <__aeabi_fmul>
 800dbb8:	4641      	mov	r1, r8
 800dbba:	4604      	mov	r4, r0
 800dbbc:	4658      	mov	r0, fp
 800dbbe:	f7f3 f8e1 	bl	8000d84 <__aeabi_fmul>
 800dbc2:	4963      	ldr	r1, [pc, #396]	@ (800dd50 <__kernel_tanf+0x220>)
 800dbc4:	4682      	mov	sl, r0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f7f3 f8dc 	bl	8000d84 <__aeabi_fmul>
 800dbcc:	4961      	ldr	r1, [pc, #388]	@ (800dd54 <__kernel_tanf+0x224>)
 800dbce:	f7f2 ffd1 	bl	8000b74 <__addsf3>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	f7f3 f8d6 	bl	8000d84 <__aeabi_fmul>
 800dbd8:	495f      	ldr	r1, [pc, #380]	@ (800dd58 <__kernel_tanf+0x228>)
 800dbda:	f7f2 ffcb 	bl	8000b74 <__addsf3>
 800dbde:	4621      	mov	r1, r4
 800dbe0:	f7f3 f8d0 	bl	8000d84 <__aeabi_fmul>
 800dbe4:	495d      	ldr	r1, [pc, #372]	@ (800dd5c <__kernel_tanf+0x22c>)
 800dbe6:	f7f2 ffc5 	bl	8000b74 <__addsf3>
 800dbea:	4621      	mov	r1, r4
 800dbec:	f7f3 f8ca 	bl	8000d84 <__aeabi_fmul>
 800dbf0:	495b      	ldr	r1, [pc, #364]	@ (800dd60 <__kernel_tanf+0x230>)
 800dbf2:	f7f2 ffbf 	bl	8000b74 <__addsf3>
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	f7f3 f8c4 	bl	8000d84 <__aeabi_fmul>
 800dbfc:	4959      	ldr	r1, [pc, #356]	@ (800dd64 <__kernel_tanf+0x234>)
 800dbfe:	f7f2 ffb9 	bl	8000b74 <__addsf3>
 800dc02:	4641      	mov	r1, r8
 800dc04:	f7f3 f8be 	bl	8000d84 <__aeabi_fmul>
 800dc08:	4957      	ldr	r1, [pc, #348]	@ (800dd68 <__kernel_tanf+0x238>)
 800dc0a:	9001      	str	r0, [sp, #4]
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f7f3 f8b9 	bl	8000d84 <__aeabi_fmul>
 800dc12:	4956      	ldr	r1, [pc, #344]	@ (800dd6c <__kernel_tanf+0x23c>)
 800dc14:	f7f2 ffae 	bl	8000b74 <__addsf3>
 800dc18:	4621      	mov	r1, r4
 800dc1a:	f7f3 f8b3 	bl	8000d84 <__aeabi_fmul>
 800dc1e:	4954      	ldr	r1, [pc, #336]	@ (800dd70 <__kernel_tanf+0x240>)
 800dc20:	f7f2 ffa8 	bl	8000b74 <__addsf3>
 800dc24:	4621      	mov	r1, r4
 800dc26:	f7f3 f8ad 	bl	8000d84 <__aeabi_fmul>
 800dc2a:	4952      	ldr	r1, [pc, #328]	@ (800dd74 <__kernel_tanf+0x244>)
 800dc2c:	f7f2 ffa2 	bl	8000b74 <__addsf3>
 800dc30:	4621      	mov	r1, r4
 800dc32:	f7f3 f8a7 	bl	8000d84 <__aeabi_fmul>
 800dc36:	4950      	ldr	r1, [pc, #320]	@ (800dd78 <__kernel_tanf+0x248>)
 800dc38:	f7f2 ff9c 	bl	8000b74 <__addsf3>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	f7f3 f8a1 	bl	8000d84 <__aeabi_fmul>
 800dc42:	494e      	ldr	r1, [pc, #312]	@ (800dd7c <__kernel_tanf+0x24c>)
 800dc44:	f7f2 ff96 	bl	8000b74 <__addsf3>
 800dc48:	4601      	mov	r1, r0
 800dc4a:	9801      	ldr	r0, [sp, #4]
 800dc4c:	f7f2 ff92 	bl	8000b74 <__addsf3>
 800dc50:	4651      	mov	r1, sl
 800dc52:	f7f3 f897 	bl	8000d84 <__aeabi_fmul>
 800dc56:	4629      	mov	r1, r5
 800dc58:	f7f2 ff8c 	bl	8000b74 <__addsf3>
 800dc5c:	4641      	mov	r1, r8
 800dc5e:	f7f3 f891 	bl	8000d84 <__aeabi_fmul>
 800dc62:	4629      	mov	r1, r5
 800dc64:	f7f2 ff86 	bl	8000b74 <__addsf3>
 800dc68:	4604      	mov	r4, r0
 800dc6a:	4945      	ldr	r1, [pc, #276]	@ (800dd80 <__kernel_tanf+0x250>)
 800dc6c:	4650      	mov	r0, sl
 800dc6e:	f7f3 f889 	bl	8000d84 <__aeabi_fmul>
 800dc72:	4621      	mov	r1, r4
 800dc74:	f7f2 ff7e 	bl	8000b74 <__addsf3>
 800dc78:	4601      	mov	r1, r0
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	4658      	mov	r0, fp
 800dc7e:	f7f2 ff79 	bl	8000b74 <__addsf3>
 800dc82:	4a30      	ldr	r2, [pc, #192]	@ (800dd44 <__kernel_tanf+0x214>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4591      	cmp	r9, r2
 800dc88:	d32b      	bcc.n	800dce2 <__kernel_tanf+0x1b2>
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	f7f3 f826 	bl	8000cdc <__aeabi_i2f>
 800dc90:	4621      	mov	r1, r4
 800dc92:	4607      	mov	r7, r0
 800dc94:	4620      	mov	r0, r4
 800dc96:	f7f3 f875 	bl	8000d84 <__aeabi_fmul>
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	4680      	mov	r8, r0
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f7f2 ff68 	bl	8000b74 <__addsf3>
 800dca4:	4601      	mov	r1, r0
 800dca6:	4640      	mov	r0, r8
 800dca8:	f7f3 f920 	bl	8000eec <__aeabi_fdiv>
 800dcac:	4629      	mov	r1, r5
 800dcae:	f7f2 ff5f 	bl	8000b70 <__aeabi_fsub>
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	4658      	mov	r0, fp
 800dcb6:	f7f2 ff5b 	bl	8000b70 <__aeabi_fsub>
 800dcba:	4601      	mov	r1, r0
 800dcbc:	f7f2 ff5a 	bl	8000b74 <__addsf3>
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	f7f2 ff54 	bl	8000b70 <__aeabi_fsub>
 800dcc8:	17b6      	asrs	r6, r6, #30
 800dcca:	f006 0602 	and.w	r6, r6, #2
 800dcce:	4604      	mov	r4, r0
 800dcd0:	f1c6 0001 	rsb	r0, r6, #1
 800dcd4:	f7f3 f802 	bl	8000cdc <__aeabi_i2f>
 800dcd8:	4601      	mov	r1, r0
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f7f3 f852 	bl	8000d84 <__aeabi_fmul>
 800dce0:	e740      	b.n	800db64 <__kernel_tanf+0x34>
 800dce2:	2f01      	cmp	r7, #1
 800dce4:	d029      	beq.n	800dd3a <__kernel_tanf+0x20a>
 800dce6:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 800dd84 <__kernel_tanf+0x254>
 800dcea:	4601      	mov	r1, r0
 800dcec:	ea08 0700 	and.w	r7, r8, r0
 800dcf0:	4813      	ldr	r0, [pc, #76]	@ (800dd40 <__kernel_tanf+0x210>)
 800dcf2:	f7f3 f8fb 	bl	8000eec <__aeabi_fdiv>
 800dcf6:	4659      	mov	r1, fp
 800dcf8:	ea08 0800 	and.w	r8, r8, r0
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	4638      	mov	r0, r7
 800dd00:	f7f2 ff36 	bl	8000b70 <__aeabi_fsub>
 800dd04:	4601      	mov	r1, r0
 800dd06:	4628      	mov	r0, r5
 800dd08:	f7f2 ff32 	bl	8000b70 <__aeabi_fsub>
 800dd0c:	4641      	mov	r1, r8
 800dd0e:	f7f3 f839 	bl	8000d84 <__aeabi_fmul>
 800dd12:	4641      	mov	r1, r8
 800dd14:	4605      	mov	r5, r0
 800dd16:	4638      	mov	r0, r7
 800dd18:	f7f3 f834 	bl	8000d84 <__aeabi_fmul>
 800dd1c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800dd20:	f7f2 ff28 	bl	8000b74 <__addsf3>
 800dd24:	4601      	mov	r1, r0
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7f2 ff24 	bl	8000b74 <__addsf3>
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	f7f3 f829 	bl	8000d84 <__aeabi_fmul>
 800dd32:	4641      	mov	r1, r8
 800dd34:	f7f2 ff1e 	bl	8000b74 <__addsf3>
 800dd38:	e714      	b.n	800db64 <__kernel_tanf+0x34>
 800dd3a:	4683      	mov	fp, r0
 800dd3c:	e713      	b.n	800db66 <__kernel_tanf+0x36>
 800dd3e:	bf00      	nop
 800dd40:	bf800000 	.word	0xbf800000
 800dd44:	3f2ca140 	.word	0x3f2ca140
 800dd48:	3f490fda 	.word	0x3f490fda
 800dd4c:	33222168 	.word	0x33222168
 800dd50:	37d95384 	.word	0x37d95384
 800dd54:	3895c07a 	.word	0x3895c07a
 800dd58:	398137b9 	.word	0x398137b9
 800dd5c:	3abede48 	.word	0x3abede48
 800dd60:	3c11371f 	.word	0x3c11371f
 800dd64:	3d5d0dd1 	.word	0x3d5d0dd1
 800dd68:	b79bae5f 	.word	0xb79bae5f
 800dd6c:	38a3f445 	.word	0x38a3f445
 800dd70:	3a1a26c8 	.word	0x3a1a26c8
 800dd74:	3b6b6916 	.word	0x3b6b6916
 800dd78:	3cb327a4 	.word	0x3cb327a4
 800dd7c:	3e088889 	.word	0x3e088889
 800dd80:	3eaaaaab 	.word	0x3eaaaaab
 800dd84:	fffff000 	.word	0xfffff000

0800dd88 <__ieee754_asinf>:
 800dd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd8c:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800dd90:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800dd94:	4604      	mov	r4, r0
 800dd96:	4605      	mov	r5, r0
 800dd98:	d10c      	bne.n	800ddb4 <__ieee754_asinf+0x2c>
 800dd9a:	498c      	ldr	r1, [pc, #560]	@ (800dfcc <__ieee754_asinf+0x244>)
 800dd9c:	f7f2 fff2 	bl	8000d84 <__aeabi_fmul>
 800dda0:	498b      	ldr	r1, [pc, #556]	@ (800dfd0 <__ieee754_asinf+0x248>)
 800dda2:	4605      	mov	r5, r0
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7f2 ffed 	bl	8000d84 <__aeabi_fmul>
 800ddaa:	4601      	mov	r1, r0
 800ddac:	4628      	mov	r0, r5
 800ddae:	f7f2 fee1 	bl	8000b74 <__addsf3>
 800ddb2:	e006      	b.n	800ddc2 <__ieee754_asinf+0x3a>
 800ddb4:	d909      	bls.n	800ddca <__ieee754_asinf+0x42>
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	f7f2 feda 	bl	8000b70 <__aeabi_fsub>
 800ddbc:	4601      	mov	r1, r0
 800ddbe:	f7f3 f895 	bl	8000eec <__aeabi_fdiv>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddca:	f1b6 5f7c 	cmp.w	r6, #1056964608	@ 0x3f000000
 800ddce:	d20b      	bcs.n	800dde8 <__ieee754_asinf+0x60>
 800ddd0:	f1b6 5f48 	cmp.w	r6, #838860800	@ 0x32000000
 800ddd4:	d273      	bcs.n	800debe <__ieee754_asinf+0x136>
 800ddd6:	497f      	ldr	r1, [pc, #508]	@ (800dfd4 <__ieee754_asinf+0x24c>)
 800ddd8:	f7f2 fecc 	bl	8000b74 <__addsf3>
 800dddc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800dde0:	f7f3 f98c 	bl	80010fc <__aeabi_fcmpgt>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d1ed      	bne.n	800ddc4 <__ieee754_asinf+0x3c>
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7ff fe00 	bl	800d9ee <fabsf>
 800ddee:	4601      	mov	r1, r0
 800ddf0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ddf4:	f7f2 febc 	bl	8000b70 <__aeabi_fsub>
 800ddf8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ddfc:	f7f2 ffc2 	bl	8000d84 <__aeabi_fmul>
 800de00:	4607      	mov	r7, r0
 800de02:	4975      	ldr	r1, [pc, #468]	@ (800dfd8 <__ieee754_asinf+0x250>)
 800de04:	f7f2 ffbe 	bl	8000d84 <__aeabi_fmul>
 800de08:	4974      	ldr	r1, [pc, #464]	@ (800dfdc <__ieee754_asinf+0x254>)
 800de0a:	f7f2 feb3 	bl	8000b74 <__addsf3>
 800de0e:	4639      	mov	r1, r7
 800de10:	f7f2 ffb8 	bl	8000d84 <__aeabi_fmul>
 800de14:	4972      	ldr	r1, [pc, #456]	@ (800dfe0 <__ieee754_asinf+0x258>)
 800de16:	f7f2 feab 	bl	8000b70 <__aeabi_fsub>
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 ffb2 	bl	8000d84 <__aeabi_fmul>
 800de20:	4970      	ldr	r1, [pc, #448]	@ (800dfe4 <__ieee754_asinf+0x25c>)
 800de22:	f7f2 fea7 	bl	8000b74 <__addsf3>
 800de26:	4639      	mov	r1, r7
 800de28:	f7f2 ffac 	bl	8000d84 <__aeabi_fmul>
 800de2c:	496e      	ldr	r1, [pc, #440]	@ (800dfe8 <__ieee754_asinf+0x260>)
 800de2e:	f7f2 fe9f 	bl	8000b70 <__aeabi_fsub>
 800de32:	4639      	mov	r1, r7
 800de34:	f7f2 ffa6 	bl	8000d84 <__aeabi_fmul>
 800de38:	496c      	ldr	r1, [pc, #432]	@ (800dfec <__ieee754_asinf+0x264>)
 800de3a:	f7f2 fe9b 	bl	8000b74 <__addsf3>
 800de3e:	4639      	mov	r1, r7
 800de40:	f7f2 ffa0 	bl	8000d84 <__aeabi_fmul>
 800de44:	496a      	ldr	r1, [pc, #424]	@ (800dff0 <__ieee754_asinf+0x268>)
 800de46:	4681      	mov	r9, r0
 800de48:	4638      	mov	r0, r7
 800de4a:	f7f2 ff9b 	bl	8000d84 <__aeabi_fmul>
 800de4e:	4969      	ldr	r1, [pc, #420]	@ (800dff4 <__ieee754_asinf+0x26c>)
 800de50:	f7f2 fe8e 	bl	8000b70 <__aeabi_fsub>
 800de54:	4639      	mov	r1, r7
 800de56:	f7f2 ff95 	bl	8000d84 <__aeabi_fmul>
 800de5a:	4967      	ldr	r1, [pc, #412]	@ (800dff8 <__ieee754_asinf+0x270>)
 800de5c:	f7f2 fe8a 	bl	8000b74 <__addsf3>
 800de60:	4639      	mov	r1, r7
 800de62:	f7f2 ff8f 	bl	8000d84 <__aeabi_fmul>
 800de66:	4965      	ldr	r1, [pc, #404]	@ (800dffc <__ieee754_asinf+0x274>)
 800de68:	f7f2 fe82 	bl	8000b70 <__aeabi_fsub>
 800de6c:	4639      	mov	r1, r7
 800de6e:	f7f2 ff89 	bl	8000d84 <__aeabi_fmul>
 800de72:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800de76:	f7f2 fe7d 	bl	8000b74 <__addsf3>
 800de7a:	4682      	mov	sl, r0
 800de7c:	4638      	mov	r0, r7
 800de7e:	f7ff fde7 	bl	800da50 <__ieee754_sqrtf>
 800de82:	4b5f      	ldr	r3, [pc, #380]	@ (800e000 <__ieee754_asinf+0x278>)
 800de84:	4680      	mov	r8, r0
 800de86:	429e      	cmp	r6, r3
 800de88:	d963      	bls.n	800df52 <__ieee754_asinf+0x1ca>
 800de8a:	4651      	mov	r1, sl
 800de8c:	4648      	mov	r0, r9
 800de8e:	f7f3 f82d 	bl	8000eec <__aeabi_fdiv>
 800de92:	4641      	mov	r1, r8
 800de94:	f7f2 ff76 	bl	8000d84 <__aeabi_fmul>
 800de98:	4641      	mov	r1, r8
 800de9a:	f7f2 fe6b 	bl	8000b74 <__addsf3>
 800de9e:	4601      	mov	r1, r0
 800dea0:	f7f2 fe68 	bl	8000b74 <__addsf3>
 800dea4:	4957      	ldr	r1, [pc, #348]	@ (800e004 <__ieee754_asinf+0x27c>)
 800dea6:	f7f2 fe65 	bl	8000b74 <__addsf3>
 800deaa:	4601      	mov	r1, r0
 800deac:	4847      	ldr	r0, [pc, #284]	@ (800dfcc <__ieee754_asinf+0x244>)
 800deae:	f7f2 fe5f 	bl	8000b70 <__aeabi_fsub>
 800deb2:	2d00      	cmp	r5, #0
 800deb4:	4604      	mov	r4, r0
 800deb6:	bfd8      	it	le
 800deb8:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 800debc:	e782      	b.n	800ddc4 <__ieee754_asinf+0x3c>
 800debe:	4601      	mov	r1, r0
 800dec0:	f7f2 ff60 	bl	8000d84 <__aeabi_fmul>
 800dec4:	4605      	mov	r5, r0
 800dec6:	4944      	ldr	r1, [pc, #272]	@ (800dfd8 <__ieee754_asinf+0x250>)
 800dec8:	f7f2 ff5c 	bl	8000d84 <__aeabi_fmul>
 800decc:	4943      	ldr	r1, [pc, #268]	@ (800dfdc <__ieee754_asinf+0x254>)
 800dece:	f7f2 fe51 	bl	8000b74 <__addsf3>
 800ded2:	4629      	mov	r1, r5
 800ded4:	f7f2 ff56 	bl	8000d84 <__aeabi_fmul>
 800ded8:	4941      	ldr	r1, [pc, #260]	@ (800dfe0 <__ieee754_asinf+0x258>)
 800deda:	f7f2 fe49 	bl	8000b70 <__aeabi_fsub>
 800dede:	4629      	mov	r1, r5
 800dee0:	f7f2 ff50 	bl	8000d84 <__aeabi_fmul>
 800dee4:	493f      	ldr	r1, [pc, #252]	@ (800dfe4 <__ieee754_asinf+0x25c>)
 800dee6:	f7f2 fe45 	bl	8000b74 <__addsf3>
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 ff4a 	bl	8000d84 <__aeabi_fmul>
 800def0:	493d      	ldr	r1, [pc, #244]	@ (800dfe8 <__ieee754_asinf+0x260>)
 800def2:	f7f2 fe3d 	bl	8000b70 <__aeabi_fsub>
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 ff44 	bl	8000d84 <__aeabi_fmul>
 800defc:	493b      	ldr	r1, [pc, #236]	@ (800dfec <__ieee754_asinf+0x264>)
 800defe:	f7f2 fe39 	bl	8000b74 <__addsf3>
 800df02:	4629      	mov	r1, r5
 800df04:	f7f2 ff3e 	bl	8000d84 <__aeabi_fmul>
 800df08:	4939      	ldr	r1, [pc, #228]	@ (800dff0 <__ieee754_asinf+0x268>)
 800df0a:	4606      	mov	r6, r0
 800df0c:	4628      	mov	r0, r5
 800df0e:	f7f2 ff39 	bl	8000d84 <__aeabi_fmul>
 800df12:	4938      	ldr	r1, [pc, #224]	@ (800dff4 <__ieee754_asinf+0x26c>)
 800df14:	f7f2 fe2c 	bl	8000b70 <__aeabi_fsub>
 800df18:	4629      	mov	r1, r5
 800df1a:	f7f2 ff33 	bl	8000d84 <__aeabi_fmul>
 800df1e:	4936      	ldr	r1, [pc, #216]	@ (800dff8 <__ieee754_asinf+0x270>)
 800df20:	f7f2 fe28 	bl	8000b74 <__addsf3>
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 ff2d 	bl	8000d84 <__aeabi_fmul>
 800df2a:	4934      	ldr	r1, [pc, #208]	@ (800dffc <__ieee754_asinf+0x274>)
 800df2c:	f7f2 fe20 	bl	8000b70 <__aeabi_fsub>
 800df30:	4629      	mov	r1, r5
 800df32:	f7f2 ff27 	bl	8000d84 <__aeabi_fmul>
 800df36:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800df3a:	f7f2 fe1b 	bl	8000b74 <__addsf3>
 800df3e:	4601      	mov	r1, r0
 800df40:	4630      	mov	r0, r6
 800df42:	f7f2 ffd3 	bl	8000eec <__aeabi_fdiv>
 800df46:	4621      	mov	r1, r4
 800df48:	f7f2 ff1c 	bl	8000d84 <__aeabi_fmul>
 800df4c:	4601      	mov	r1, r0
 800df4e:	4620      	mov	r0, r4
 800df50:	e72d      	b.n	800ddae <__ieee754_asinf+0x26>
 800df52:	4601      	mov	r1, r0
 800df54:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800df58:	f7f2 fe0c 	bl	8000b74 <__addsf3>
 800df5c:	4651      	mov	r1, sl
 800df5e:	4604      	mov	r4, r0
 800df60:	4648      	mov	r0, r9
 800df62:	f7f2 ffc3 	bl	8000eec <__aeabi_fdiv>
 800df66:	4601      	mov	r1, r0
 800df68:	4620      	mov	r0, r4
 800df6a:	f7f2 ff0b 	bl	8000d84 <__aeabi_fmul>
 800df6e:	f026 060f 	bic.w	r6, r6, #15
 800df72:	4681      	mov	r9, r0
 800df74:	4631      	mov	r1, r6
 800df76:	4630      	mov	r0, r6
 800df78:	f7f2 ff04 	bl	8000d84 <__aeabi_fmul>
 800df7c:	4601      	mov	r1, r0
 800df7e:	4638      	mov	r0, r7
 800df80:	f7f2 fdf6 	bl	8000b70 <__aeabi_fsub>
 800df84:	4631      	mov	r1, r6
 800df86:	4604      	mov	r4, r0
 800df88:	4640      	mov	r0, r8
 800df8a:	f7f2 fdf3 	bl	8000b74 <__addsf3>
 800df8e:	4601      	mov	r1, r0
 800df90:	4620      	mov	r0, r4
 800df92:	f7f2 ffab 	bl	8000eec <__aeabi_fdiv>
 800df96:	4601      	mov	r1, r0
 800df98:	f7f2 fdec 	bl	8000b74 <__addsf3>
 800df9c:	4601      	mov	r1, r0
 800df9e:	480c      	ldr	r0, [pc, #48]	@ (800dfd0 <__ieee754_asinf+0x248>)
 800dfa0:	f7f2 fde6 	bl	8000b70 <__aeabi_fsub>
 800dfa4:	4601      	mov	r1, r0
 800dfa6:	4648      	mov	r0, r9
 800dfa8:	f7f2 fde2 	bl	8000b70 <__aeabi_fsub>
 800dfac:	4631      	mov	r1, r6
 800dfae:	4604      	mov	r4, r0
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f7f2 fddf 	bl	8000b74 <__addsf3>
 800dfb6:	4601      	mov	r1, r0
 800dfb8:	4813      	ldr	r0, [pc, #76]	@ (800e008 <__ieee754_asinf+0x280>)
 800dfba:	f7f2 fdd9 	bl	8000b70 <__aeabi_fsub>
 800dfbe:	4601      	mov	r1, r0
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7f2 fdd5 	bl	8000b70 <__aeabi_fsub>
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	480f      	ldr	r0, [pc, #60]	@ (800e008 <__ieee754_asinf+0x280>)
 800dfca:	e770      	b.n	800deae <__ieee754_asinf+0x126>
 800dfcc:	3fc90fdb 	.word	0x3fc90fdb
 800dfd0:	b33bbd2e 	.word	0xb33bbd2e
 800dfd4:	7149f2ca 	.word	0x7149f2ca
 800dfd8:	3811ef08 	.word	0x3811ef08
 800dfdc:	3a4f7f04 	.word	0x3a4f7f04
 800dfe0:	3d241146 	.word	0x3d241146
 800dfe4:	3e4e0aa8 	.word	0x3e4e0aa8
 800dfe8:	3ea6b090 	.word	0x3ea6b090
 800dfec:	3e2aaaab 	.word	0x3e2aaaab
 800dff0:	3d9dc62e 	.word	0x3d9dc62e
 800dff4:	3f303361 	.word	0x3f303361
 800dff8:	4001572d 	.word	0x4001572d
 800dffc:	4019d139 	.word	0x4019d139
 800e000:	3f799999 	.word	0x3f799999
 800e004:	333bbd2e 	.word	0x333bbd2e
 800e008:	3f490fdb 	.word	0x3f490fdb

0800e00c <__ieee754_atan2f>:
 800e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e012:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e016:	4603      	mov	r3, r0
 800e018:	d805      	bhi.n	800e026 <__ieee754_atan2f+0x1a>
 800e01a:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800e01e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e022:	4607      	mov	r7, r0
 800e024:	d904      	bls.n	800e030 <__ieee754_atan2f+0x24>
 800e026:	4618      	mov	r0, r3
 800e028:	f7f2 fda4 	bl	8000b74 <__addsf3>
 800e02c:	4603      	mov	r3, r0
 800e02e:	e010      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e030:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e034:	d103      	bne.n	800e03e <__ieee754_atan2f+0x32>
 800e036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e03a:	f000 bd35 	b.w	800eaa8 <atanf>
 800e03e:	178c      	asrs	r4, r1, #30
 800e040:	f004 0402 	and.w	r4, r4, #2
 800e044:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e048:	b92a      	cbnz	r2, 800e056 <__ieee754_atan2f+0x4a>
 800e04a:	2c02      	cmp	r4, #2
 800e04c:	d04b      	beq.n	800e0e6 <__ieee754_atan2f+0xda>
 800e04e:	2c03      	cmp	r4, #3
 800e050:	d04b      	beq.n	800e0ea <__ieee754_atan2f+0xde>
 800e052:	4618      	mov	r0, r3
 800e054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e056:	b91e      	cbnz	r6, 800e060 <__ieee754_atan2f+0x54>
 800e058:	2f00      	cmp	r7, #0
 800e05a:	db4c      	blt.n	800e0f6 <__ieee754_atan2f+0xea>
 800e05c:	4b27      	ldr	r3, [pc, #156]	@ (800e0fc <__ieee754_atan2f+0xf0>)
 800e05e:	e7f8      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e060:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800e064:	d10e      	bne.n	800e084 <__ieee754_atan2f+0x78>
 800e066:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e06a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e06e:	d105      	bne.n	800e07c <__ieee754_atan2f+0x70>
 800e070:	2c02      	cmp	r4, #2
 800e072:	d83c      	bhi.n	800e0ee <__ieee754_atan2f+0xe2>
 800e074:	4b22      	ldr	r3, [pc, #136]	@ (800e100 <__ieee754_atan2f+0xf4>)
 800e076:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e07a:	e7ea      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e07c:	2c02      	cmp	r4, #2
 800e07e:	d838      	bhi.n	800e0f2 <__ieee754_atan2f+0xe6>
 800e080:	4b20      	ldr	r3, [pc, #128]	@ (800e104 <__ieee754_atan2f+0xf8>)
 800e082:	e7f8      	b.n	800e076 <__ieee754_atan2f+0x6a>
 800e084:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e088:	d0e6      	beq.n	800e058 <__ieee754_atan2f+0x4c>
 800e08a:	1b92      	subs	r2, r2, r6
 800e08c:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800e090:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800e094:	da17      	bge.n	800e0c6 <__ieee754_atan2f+0xba>
 800e096:	2900      	cmp	r1, #0
 800e098:	da01      	bge.n	800e09e <__ieee754_atan2f+0x92>
 800e09a:	303c      	adds	r0, #60	@ 0x3c
 800e09c:	db15      	blt.n	800e0ca <__ieee754_atan2f+0xbe>
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f2 ff24 	bl	8000eec <__aeabi_fdiv>
 800e0a4:	f7ff fca3 	bl	800d9ee <fabsf>
 800e0a8:	f000 fcfe 	bl	800eaa8 <atanf>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2c01      	cmp	r4, #1
 800e0b0:	d00d      	beq.n	800e0ce <__ieee754_atan2f+0xc2>
 800e0b2:	2c02      	cmp	r4, #2
 800e0b4:	d00e      	beq.n	800e0d4 <__ieee754_atan2f+0xc8>
 800e0b6:	2c00      	cmp	r4, #0
 800e0b8:	d0cb      	beq.n	800e052 <__ieee754_atan2f+0x46>
 800e0ba:	4913      	ldr	r1, [pc, #76]	@ (800e108 <__ieee754_atan2f+0xfc>)
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7f2 fd59 	bl	8000b74 <__addsf3>
 800e0c2:	4912      	ldr	r1, [pc, #72]	@ (800e10c <__ieee754_atan2f+0x100>)
 800e0c4:	e00c      	b.n	800e0e0 <__ieee754_atan2f+0xd4>
 800e0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e0fc <__ieee754_atan2f+0xf0>)
 800e0c8:	e7f1      	b.n	800e0ae <__ieee754_atan2f+0xa2>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e7ef      	b.n	800e0ae <__ieee754_atan2f+0xa2>
 800e0ce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e0d2:	e7be      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e0d4:	490c      	ldr	r1, [pc, #48]	@ (800e108 <__ieee754_atan2f+0xfc>)
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7f2 fd4c 	bl	8000b74 <__addsf3>
 800e0dc:	4601      	mov	r1, r0
 800e0de:	480b      	ldr	r0, [pc, #44]	@ (800e10c <__ieee754_atan2f+0x100>)
 800e0e0:	f7f2 fd46 	bl	8000b70 <__aeabi_fsub>
 800e0e4:	e7a2      	b.n	800e02c <__ieee754_atan2f+0x20>
 800e0e6:	4b09      	ldr	r3, [pc, #36]	@ (800e10c <__ieee754_atan2f+0x100>)
 800e0e8:	e7b3      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e0ea:	4b09      	ldr	r3, [pc, #36]	@ (800e110 <__ieee754_atan2f+0x104>)
 800e0ec:	e7b1      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e0ee:	4b09      	ldr	r3, [pc, #36]	@ (800e114 <__ieee754_atan2f+0x108>)
 800e0f0:	e7af      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e7ad      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e0f6:	4b08      	ldr	r3, [pc, #32]	@ (800e118 <__ieee754_atan2f+0x10c>)
 800e0f8:	e7ab      	b.n	800e052 <__ieee754_atan2f+0x46>
 800e0fa:	bf00      	nop
 800e0fc:	3fc90fdb 	.word	0x3fc90fdb
 800e100:	0800f988 	.word	0x0800f988
 800e104:	0800f97c 	.word	0x0800f97c
 800e108:	33bbbd2e 	.word	0x33bbbd2e
 800e10c:	40490fdb 	.word	0x40490fdb
 800e110:	c0490fdb 	.word	0xc0490fdb
 800e114:	3f490fdb 	.word	0x3f490fdb
 800e118:	bfc90fdb 	.word	0xbfc90fdb

0800e11c <__ieee754_powf>:
 800e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e120:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800e124:	4681      	mov	r9, r0
 800e126:	460f      	mov	r7, r1
 800e128:	4606      	mov	r6, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b087      	sub	sp, #28
 800e12e:	d10c      	bne.n	800e14a <__ieee754_powf+0x2e>
 800e130:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800e134:	0076      	lsls	r6, r6, #1
 800e136:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e13a:	f240 8310 	bls.w	800e75e <__ieee754_powf+0x642>
 800e13e:	4639      	mov	r1, r7
 800e140:	4648      	mov	r0, r9
 800e142:	f7f2 fd17 	bl	8000b74 <__addsf3>
 800e146:	4601      	mov	r1, r0
 800e148:	e043      	b.n	800e1d2 <__ieee754_powf+0xb6>
 800e14a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800e14e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e152:	d802      	bhi.n	800e15a <__ieee754_powf+0x3e>
 800e154:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800e158:	d908      	bls.n	800e16c <__ieee754_powf+0x50>
 800e15a:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e15e:	d1ee      	bne.n	800e13e <__ieee754_powf+0x22>
 800e160:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e164:	0064      	lsls	r4, r4, #1
 800e166:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e16a:	e7e6      	b.n	800e13a <__ieee754_powf+0x1e>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	da1f      	bge.n	800e1b0 <__ieee754_powf+0x94>
 800e170:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800e174:	f080 82f8 	bcs.w	800e768 <__ieee754_powf+0x64c>
 800e178:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800e17c:	d32f      	bcc.n	800e1de <__ieee754_powf+0xc2>
 800e17e:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800e182:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e186:	fa4b f503 	asr.w	r5, fp, r3
 800e18a:	fa05 f303 	lsl.w	r3, r5, r3
 800e18e:	455b      	cmp	r3, fp
 800e190:	d123      	bne.n	800e1da <__ieee754_powf+0xbe>
 800e192:	f005 0501 	and.w	r5, r5, #1
 800e196:	f1c5 0502 	rsb	r5, r5, #2
 800e19a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800e19e:	d11f      	bne.n	800e1e0 <__ieee754_powf+0xc4>
 800e1a0:	2c00      	cmp	r4, #0
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	da15      	bge.n	800e1d2 <__ieee754_powf+0xb6>
 800e1a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e1aa:	f7f2 fe9f 	bl	8000eec <__aeabi_fdiv>
 800e1ae:	e7ca      	b.n	800e146 <__ieee754_powf+0x2a>
 800e1b0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800e1b4:	d111      	bne.n	800e1da <__ieee754_powf+0xbe>
 800e1b6:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e1ba:	f000 82d0 	beq.w	800e75e <__ieee754_powf+0x642>
 800e1be:	d904      	bls.n	800e1ca <__ieee754_powf+0xae>
 800e1c0:	2c00      	cmp	r4, #0
 800e1c2:	f280 82cf 	bge.w	800e764 <__ieee754_powf+0x648>
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	e003      	b.n	800e1d2 <__ieee754_powf+0xb6>
 800e1ca:	2c00      	cmp	r4, #0
 800e1cc:	dafb      	bge.n	800e1c6 <__ieee754_powf+0xaa>
 800e1ce:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800e1d2:	4608      	mov	r0, r1
 800e1d4:	b007      	add	sp, #28
 800e1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1da:	2500      	movs	r5, #0
 800e1dc:	e7dd      	b.n	800e19a <__ieee754_powf+0x7e>
 800e1de:	2500      	movs	r5, #0
 800e1e0:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e1e4:	d104      	bne.n	800e1f0 <__ieee754_powf+0xd4>
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	4648      	mov	r0, r9
 800e1ea:	f7f2 fdcb 	bl	8000d84 <__aeabi_fmul>
 800e1ee:	e7aa      	b.n	800e146 <__ieee754_powf+0x2a>
 800e1f0:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e1f4:	f040 82bd 	bne.w	800e772 <__ieee754_powf+0x656>
 800e1f8:	2e00      	cmp	r6, #0
 800e1fa:	f2c0 82ba 	blt.w	800e772 <__ieee754_powf+0x656>
 800e1fe:	4648      	mov	r0, r9
 800e200:	b007      	add	sp, #28
 800e202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e206:	f7ff bc23 	b.w	800da50 <__ieee754_sqrtf>
 800e20a:	2d01      	cmp	r5, #1
 800e20c:	d1e1      	bne.n	800e1d2 <__ieee754_powf+0xb6>
 800e20e:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800e212:	e798      	b.n	800e146 <__ieee754_powf+0x2a>
 800e214:	0ff3      	lsrs	r3, r6, #31
 800e216:	3b01      	subs	r3, #1
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	432b      	orrs	r3, r5
 800e21c:	d101      	bne.n	800e222 <__ieee754_powf+0x106>
 800e21e:	4649      	mov	r1, r9
 800e220:	e2c5      	b.n	800e7ae <__ieee754_powf+0x692>
 800e222:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800e226:	f240 809b 	bls.w	800e360 <__ieee754_powf+0x244>
 800e22a:	4b46      	ldr	r3, [pc, #280]	@ (800e344 <__ieee754_powf+0x228>)
 800e22c:	4598      	cmp	r8, r3
 800e22e:	d807      	bhi.n	800e240 <__ieee754_powf+0x124>
 800e230:	2c00      	cmp	r4, #0
 800e232:	da0a      	bge.n	800e24a <__ieee754_powf+0x12e>
 800e234:	2000      	movs	r0, #0
 800e236:	b007      	add	sp, #28
 800e238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	f000 bda5 	b.w	800ed8a <__math_oflowf>
 800e240:	4b41      	ldr	r3, [pc, #260]	@ (800e348 <__ieee754_powf+0x22c>)
 800e242:	4598      	cmp	r8, r3
 800e244:	d907      	bls.n	800e256 <__ieee754_powf+0x13a>
 800e246:	2c00      	cmp	r4, #0
 800e248:	dcf4      	bgt.n	800e234 <__ieee754_powf+0x118>
 800e24a:	2000      	movs	r0, #0
 800e24c:	b007      	add	sp, #28
 800e24e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e252:	f000 bd96 	b.w	800ed82 <__math_uflowf>
 800e256:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e25a:	f7f2 fc89 	bl	8000b70 <__aeabi_fsub>
 800e25e:	493b      	ldr	r1, [pc, #236]	@ (800e34c <__ieee754_powf+0x230>)
 800e260:	4606      	mov	r6, r0
 800e262:	f7f2 fd8f 	bl	8000d84 <__aeabi_fmul>
 800e266:	493a      	ldr	r1, [pc, #232]	@ (800e350 <__ieee754_powf+0x234>)
 800e268:	4680      	mov	r8, r0
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7f2 fd8a 	bl	8000d84 <__aeabi_fmul>
 800e270:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800e274:	4681      	mov	r9, r0
 800e276:	4630      	mov	r0, r6
 800e278:	f7f2 fd84 	bl	8000d84 <__aeabi_fmul>
 800e27c:	4601      	mov	r1, r0
 800e27e:	4835      	ldr	r0, [pc, #212]	@ (800e354 <__ieee754_powf+0x238>)
 800e280:	f7f2 fc76 	bl	8000b70 <__aeabi_fsub>
 800e284:	4631      	mov	r1, r6
 800e286:	f7f2 fd7d 	bl	8000d84 <__aeabi_fmul>
 800e28a:	4601      	mov	r1, r0
 800e28c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800e290:	f7f2 fc6e 	bl	8000b70 <__aeabi_fsub>
 800e294:	4631      	mov	r1, r6
 800e296:	4682      	mov	sl, r0
 800e298:	4630      	mov	r0, r6
 800e29a:	f7f2 fd73 	bl	8000d84 <__aeabi_fmul>
 800e29e:	4601      	mov	r1, r0
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	f7f2 fd6f 	bl	8000d84 <__aeabi_fmul>
 800e2a6:	492c      	ldr	r1, [pc, #176]	@ (800e358 <__ieee754_powf+0x23c>)
 800e2a8:	f7f2 fd6c 	bl	8000d84 <__aeabi_fmul>
 800e2ac:	4601      	mov	r1, r0
 800e2ae:	4648      	mov	r0, r9
 800e2b0:	f7f2 fc5e 	bl	8000b70 <__aeabi_fsub>
 800e2b4:	4601      	mov	r1, r0
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	f7f2 fc5b 	bl	8000b74 <__addsf3>
 800e2be:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800e2c2:	f02b 0b0f 	bic.w	fp, fp, #15
 800e2c6:	4641      	mov	r1, r8
 800e2c8:	4658      	mov	r0, fp
 800e2ca:	f7f2 fc51 	bl	8000b70 <__aeabi_fsub>
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f7f2 fc4d 	bl	8000b70 <__aeabi_fsub>
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	3d01      	subs	r5, #1
 800e2da:	f36f 040b 	bfc	r4, #0, #12
 800e2de:	431d      	orrs	r5, r3
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	bf14      	ite	ne
 800e2e8:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800e2ec:	4d1b      	ldreq	r5, [pc, #108]	@ (800e35c <__ieee754_powf+0x240>)
 800e2ee:	f7f2 fc3f 	bl	8000b70 <__aeabi_fsub>
 800e2f2:	4659      	mov	r1, fp
 800e2f4:	f7f2 fd46 	bl	8000d84 <__aeabi_fmul>
 800e2f8:	4639      	mov	r1, r7
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7f2 fd41 	bl	8000d84 <__aeabi_fmul>
 800e302:	4601      	mov	r1, r0
 800e304:	4640      	mov	r0, r8
 800e306:	f7f2 fc35 	bl	8000b74 <__addsf3>
 800e30a:	4621      	mov	r1, r4
 800e30c:	4606      	mov	r6, r0
 800e30e:	4658      	mov	r0, fp
 800e310:	f7f2 fd38 	bl	8000d84 <__aeabi_fmul>
 800e314:	4601      	mov	r1, r0
 800e316:	4607      	mov	r7, r0
 800e318:	4630      	mov	r0, r6
 800e31a:	f7f2 fc2b 	bl	8000b74 <__addsf3>
 800e31e:	2800      	cmp	r0, #0
 800e320:	4604      	mov	r4, r0
 800e322:	4680      	mov	r8, r0
 800e324:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e328:	f340 813f 	ble.w	800e5aa <__ieee754_powf+0x48e>
 800e32c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e330:	f240 8128 	bls.w	800e584 <__ieee754_powf+0x468>
 800e334:	2100      	movs	r1, #0
 800e336:	4628      	mov	r0, r5
 800e338:	f7f2 fec2 	bl	80010c0 <__aeabi_fcmplt>
 800e33c:	3800      	subs	r0, #0
 800e33e:	bf18      	it	ne
 800e340:	2001      	movne	r0, #1
 800e342:	e778      	b.n	800e236 <__ieee754_powf+0x11a>
 800e344:	3f7ffff3 	.word	0x3f7ffff3
 800e348:	3f800007 	.word	0x3f800007
 800e34c:	3fb8aa00 	.word	0x3fb8aa00
 800e350:	36eca570 	.word	0x36eca570
 800e354:	3eaaaaab 	.word	0x3eaaaaab
 800e358:	3fb8aa3b 	.word	0x3fb8aa3b
 800e35c:	bf800000 	.word	0xbf800000
 800e360:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e364:	f040 810a 	bne.w	800e57c <__ieee754_powf+0x460>
 800e368:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800e36c:	f7f2 fd0a 	bl	8000d84 <__aeabi_fmul>
 800e370:	f06f 0217 	mvn.w	r2, #23
 800e374:	4682      	mov	sl, r0
 800e376:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800e37a:	3b7f      	subs	r3, #127	@ 0x7f
 800e37c:	441a      	add	r2, r3
 800e37e:	4b95      	ldr	r3, [pc, #596]	@ (800e5d4 <__ieee754_powf+0x4b8>)
 800e380:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800e384:	459a      	cmp	sl, r3
 800e386:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800e38a:	dd06      	ble.n	800e39a <__ieee754_powf+0x27e>
 800e38c:	4b92      	ldr	r3, [pc, #584]	@ (800e5d8 <__ieee754_powf+0x4bc>)
 800e38e:	459a      	cmp	sl, r3
 800e390:	f340 80f6 	ble.w	800e580 <__ieee754_powf+0x464>
 800e394:	3201      	adds	r2, #1
 800e396:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800e39a:	2300      	movs	r3, #0
 800e39c:	9301      	str	r3, [sp, #4]
 800e39e:	9205      	str	r2, [sp, #20]
 800e3a0:	4b8e      	ldr	r3, [pc, #568]	@ (800e5dc <__ieee754_powf+0x4c0>)
 800e3a2:	9a01      	ldr	r2, [sp, #4]
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800e3aa:	46b2      	mov	sl, r6
 800e3ac:	4659      	mov	r1, fp
 800e3ae:	f7f2 fbdf 	bl	8000b70 <__aeabi_fsub>
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4681      	mov	r9, r0
 800e3b6:	4658      	mov	r0, fp
 800e3b8:	f7f2 fbdc 	bl	8000b74 <__addsf3>
 800e3bc:	4601      	mov	r1, r0
 800e3be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e3c2:	f7f2 fd93 	bl	8000eec <__aeabi_fdiv>
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	9004      	str	r0, [sp, #16]
 800e3ca:	4648      	mov	r0, r9
 800e3cc:	f7f2 fcda 	bl	8000d84 <__aeabi_fmul>
 800e3d0:	9002      	str	r0, [sp, #8]
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	1076      	asrs	r6, r6, #1
 800e3d6:	f36f 030b 	bfc	r3, #0, #12
 800e3da:	4698      	mov	r8, r3
 800e3dc:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800e3e6:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	4640      	mov	r0, r8
 800e3ee:	f7f2 fcc9 	bl	8000d84 <__aeabi_fmul>
 800e3f2:	4601      	mov	r1, r0
 800e3f4:	4648      	mov	r0, r9
 800e3f6:	f7f2 fbbb 	bl	8000b70 <__aeabi_fsub>
 800e3fa:	4659      	mov	r1, fp
 800e3fc:	4681      	mov	r9, r0
 800e3fe:	4630      	mov	r0, r6
 800e400:	f7f2 fbb6 	bl	8000b70 <__aeabi_fsub>
 800e404:	4601      	mov	r1, r0
 800e406:	4650      	mov	r0, sl
 800e408:	f7f2 fbb2 	bl	8000b70 <__aeabi_fsub>
 800e40c:	4641      	mov	r1, r8
 800e40e:	f7f2 fcb9 	bl	8000d84 <__aeabi_fmul>
 800e412:	4601      	mov	r1, r0
 800e414:	4648      	mov	r0, r9
 800e416:	f7f2 fbab 	bl	8000b70 <__aeabi_fsub>
 800e41a:	9b04      	ldr	r3, [sp, #16]
 800e41c:	4619      	mov	r1, r3
 800e41e:	f7f2 fcb1 	bl	8000d84 <__aeabi_fmul>
 800e422:	9902      	ldr	r1, [sp, #8]
 800e424:	4683      	mov	fp, r0
 800e426:	4608      	mov	r0, r1
 800e428:	f7f2 fcac 	bl	8000d84 <__aeabi_fmul>
 800e42c:	4606      	mov	r6, r0
 800e42e:	496c      	ldr	r1, [pc, #432]	@ (800e5e0 <__ieee754_powf+0x4c4>)
 800e430:	f7f2 fca8 	bl	8000d84 <__aeabi_fmul>
 800e434:	496b      	ldr	r1, [pc, #428]	@ (800e5e4 <__ieee754_powf+0x4c8>)
 800e436:	f7f2 fb9d 	bl	8000b74 <__addsf3>
 800e43a:	4631      	mov	r1, r6
 800e43c:	f7f2 fca2 	bl	8000d84 <__aeabi_fmul>
 800e440:	4969      	ldr	r1, [pc, #420]	@ (800e5e8 <__ieee754_powf+0x4cc>)
 800e442:	f7f2 fb97 	bl	8000b74 <__addsf3>
 800e446:	4631      	mov	r1, r6
 800e448:	f7f2 fc9c 	bl	8000d84 <__aeabi_fmul>
 800e44c:	4967      	ldr	r1, [pc, #412]	@ (800e5ec <__ieee754_powf+0x4d0>)
 800e44e:	f7f2 fb91 	bl	8000b74 <__addsf3>
 800e452:	4631      	mov	r1, r6
 800e454:	f7f2 fc96 	bl	8000d84 <__aeabi_fmul>
 800e458:	4965      	ldr	r1, [pc, #404]	@ (800e5f0 <__ieee754_powf+0x4d4>)
 800e45a:	f7f2 fb8b 	bl	8000b74 <__addsf3>
 800e45e:	4631      	mov	r1, r6
 800e460:	f7f2 fc90 	bl	8000d84 <__aeabi_fmul>
 800e464:	4963      	ldr	r1, [pc, #396]	@ (800e5f4 <__ieee754_powf+0x4d8>)
 800e466:	f7f2 fb85 	bl	8000b74 <__addsf3>
 800e46a:	4631      	mov	r1, r6
 800e46c:	4681      	mov	r9, r0
 800e46e:	4630      	mov	r0, r6
 800e470:	f7f2 fc88 	bl	8000d84 <__aeabi_fmul>
 800e474:	4601      	mov	r1, r0
 800e476:	4648      	mov	r0, r9
 800e478:	f7f2 fc84 	bl	8000d84 <__aeabi_fmul>
 800e47c:	4606      	mov	r6, r0
 800e47e:	4641      	mov	r1, r8
 800e480:	9802      	ldr	r0, [sp, #8]
 800e482:	f7f2 fb77 	bl	8000b74 <__addsf3>
 800e486:	4659      	mov	r1, fp
 800e488:	f7f2 fc7c 	bl	8000d84 <__aeabi_fmul>
 800e48c:	4631      	mov	r1, r6
 800e48e:	f7f2 fb71 	bl	8000b74 <__addsf3>
 800e492:	4641      	mov	r1, r8
 800e494:	4681      	mov	r9, r0
 800e496:	4640      	mov	r0, r8
 800e498:	f7f2 fc74 	bl	8000d84 <__aeabi_fmul>
 800e49c:	4956      	ldr	r1, [pc, #344]	@ (800e5f8 <__ieee754_powf+0x4dc>)
 800e49e:	4682      	mov	sl, r0
 800e4a0:	f7f2 fb68 	bl	8000b74 <__addsf3>
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	f7f2 fb65 	bl	8000b74 <__addsf3>
 800e4aa:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800e4ae:	f026 060f 	bic.w	r6, r6, #15
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	f7f2 fc65 	bl	8000d84 <__aeabi_fmul>
 800e4ba:	494f      	ldr	r1, [pc, #316]	@ (800e5f8 <__ieee754_powf+0x4dc>)
 800e4bc:	4680      	mov	r8, r0
 800e4be:	4630      	mov	r0, r6
 800e4c0:	f7f2 fb56 	bl	8000b70 <__aeabi_fsub>
 800e4c4:	4651      	mov	r1, sl
 800e4c6:	f7f2 fb53 	bl	8000b70 <__aeabi_fsub>
 800e4ca:	4601      	mov	r1, r0
 800e4cc:	4648      	mov	r0, r9
 800e4ce:	f7f2 fb4f 	bl	8000b70 <__aeabi_fsub>
 800e4d2:	9902      	ldr	r1, [sp, #8]
 800e4d4:	f7f2 fc56 	bl	8000d84 <__aeabi_fmul>
 800e4d8:	4631      	mov	r1, r6
 800e4da:	4681      	mov	r9, r0
 800e4dc:	4658      	mov	r0, fp
 800e4de:	f7f2 fc51 	bl	8000d84 <__aeabi_fmul>
 800e4e2:	4601      	mov	r1, r0
 800e4e4:	4648      	mov	r0, r9
 800e4e6:	f7f2 fb45 	bl	8000b74 <__addsf3>
 800e4ea:	4682      	mov	sl, r0
 800e4ec:	4601      	mov	r1, r0
 800e4ee:	4640      	mov	r0, r8
 800e4f0:	f7f2 fb40 	bl	8000b74 <__addsf3>
 800e4f4:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800e4f8:	f026 060f 	bic.w	r6, r6, #15
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	493f      	ldr	r1, [pc, #252]	@ (800e5fc <__ieee754_powf+0x4e0>)
 800e500:	f7f2 fc40 	bl	8000d84 <__aeabi_fmul>
 800e504:	4641      	mov	r1, r8
 800e506:	4681      	mov	r9, r0
 800e508:	4630      	mov	r0, r6
 800e50a:	f7f2 fb31 	bl	8000b70 <__aeabi_fsub>
 800e50e:	4601      	mov	r1, r0
 800e510:	4650      	mov	r0, sl
 800e512:	f7f2 fb2d 	bl	8000b70 <__aeabi_fsub>
 800e516:	493a      	ldr	r1, [pc, #232]	@ (800e600 <__ieee754_powf+0x4e4>)
 800e518:	f7f2 fc34 	bl	8000d84 <__aeabi_fmul>
 800e51c:	4939      	ldr	r1, [pc, #228]	@ (800e604 <__ieee754_powf+0x4e8>)
 800e51e:	4680      	mov	r8, r0
 800e520:	4630      	mov	r0, r6
 800e522:	f7f2 fc2f 	bl	8000d84 <__aeabi_fmul>
 800e526:	4601      	mov	r1, r0
 800e528:	4640      	mov	r0, r8
 800e52a:	f7f2 fb23 	bl	8000b74 <__addsf3>
 800e52e:	4b36      	ldr	r3, [pc, #216]	@ (800e608 <__ieee754_powf+0x4ec>)
 800e530:	9a01      	ldr	r2, [sp, #4]
 800e532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e536:	f7f2 fb1d 	bl	8000b74 <__addsf3>
 800e53a:	9a05      	ldr	r2, [sp, #20]
 800e53c:	4606      	mov	r6, r0
 800e53e:	4610      	mov	r0, r2
 800e540:	f7f2 fbcc 	bl	8000cdc <__aeabi_i2f>
 800e544:	4680      	mov	r8, r0
 800e546:	4b31      	ldr	r3, [pc, #196]	@ (800e60c <__ieee754_powf+0x4f0>)
 800e548:	9a01      	ldr	r2, [sp, #4]
 800e54a:	4631      	mov	r1, r6
 800e54c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800e550:	4648      	mov	r0, r9
 800e552:	f7f2 fb0f 	bl	8000b74 <__addsf3>
 800e556:	4651      	mov	r1, sl
 800e558:	f7f2 fb0c 	bl	8000b74 <__addsf3>
 800e55c:	4641      	mov	r1, r8
 800e55e:	f7f2 fb09 	bl	8000b74 <__addsf3>
 800e562:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800e566:	f02b 0b0f 	bic.w	fp, fp, #15
 800e56a:	4641      	mov	r1, r8
 800e56c:	4658      	mov	r0, fp
 800e56e:	f7f2 faff 	bl	8000b70 <__aeabi_fsub>
 800e572:	4651      	mov	r1, sl
 800e574:	f7f2 fafc 	bl	8000b70 <__aeabi_fsub>
 800e578:	4649      	mov	r1, r9
 800e57a:	e6a6      	b.n	800e2ca <__ieee754_powf+0x1ae>
 800e57c:	2200      	movs	r2, #0
 800e57e:	e6fa      	b.n	800e376 <__ieee754_powf+0x25a>
 800e580:	2301      	movs	r3, #1
 800e582:	e70b      	b.n	800e39c <__ieee754_powf+0x280>
 800e584:	d148      	bne.n	800e618 <__ieee754_powf+0x4fc>
 800e586:	4922      	ldr	r1, [pc, #136]	@ (800e610 <__ieee754_powf+0x4f4>)
 800e588:	4630      	mov	r0, r6
 800e58a:	f7f2 faf3 	bl	8000b74 <__addsf3>
 800e58e:	4639      	mov	r1, r7
 800e590:	4681      	mov	r9, r0
 800e592:	4620      	mov	r0, r4
 800e594:	f7f2 faec 	bl	8000b70 <__aeabi_fsub>
 800e598:	4601      	mov	r1, r0
 800e59a:	4648      	mov	r0, r9
 800e59c:	f7f2 fdae 	bl	80010fc <__aeabi_fcmpgt>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	f47f aec7 	bne.w	800e334 <__ieee754_powf+0x218>
 800e5a6:	2386      	movs	r3, #134	@ 0x86
 800e5a8:	e03b      	b.n	800e622 <__ieee754_powf+0x506>
 800e5aa:	4a1a      	ldr	r2, [pc, #104]	@ (800e614 <__ieee754_powf+0x4f8>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d907      	bls.n	800e5c0 <__ieee754_powf+0x4a4>
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	f7f2 fd84 	bl	80010c0 <__aeabi_fcmplt>
 800e5b8:	3800      	subs	r0, #0
 800e5ba:	bf18      	it	ne
 800e5bc:	2001      	movne	r0, #1
 800e5be:	e645      	b.n	800e24c <__ieee754_powf+0x130>
 800e5c0:	d12a      	bne.n	800e618 <__ieee754_powf+0x4fc>
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	f7f2 fad4 	bl	8000b70 <__aeabi_fsub>
 800e5c8:	4631      	mov	r1, r6
 800e5ca:	f7f2 fd8d 	bl	80010e8 <__aeabi_fcmpge>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d0e9      	beq.n	800e5a6 <__ieee754_powf+0x48a>
 800e5d2:	e7ed      	b.n	800e5b0 <__ieee754_powf+0x494>
 800e5d4:	001cc471 	.word	0x001cc471
 800e5d8:	005db3d6 	.word	0x005db3d6
 800e5dc:	0800f9a4 	.word	0x0800f9a4
 800e5e0:	3e53f142 	.word	0x3e53f142
 800e5e4:	3e6c3255 	.word	0x3e6c3255
 800e5e8:	3e8ba305 	.word	0x3e8ba305
 800e5ec:	3eaaaaab 	.word	0x3eaaaaab
 800e5f0:	3edb6db7 	.word	0x3edb6db7
 800e5f4:	3f19999a 	.word	0x3f19999a
 800e5f8:	40400000 	.word	0x40400000
 800e5fc:	3f763800 	.word	0x3f763800
 800e600:	3f76384f 	.word	0x3f76384f
 800e604:	369dc3a0 	.word	0x369dc3a0
 800e608:	0800f994 	.word	0x0800f994
 800e60c:	0800f99c 	.word	0x0800f99c
 800e610:	3338aa3c 	.word	0x3338aa3c
 800e614:	43160000 	.word	0x43160000
 800e618:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e61c:	f240 809b 	bls.w	800e756 <__ieee754_powf+0x63a>
 800e620:	15db      	asrs	r3, r3, #23
 800e622:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800e626:	3b7e      	subs	r3, #126	@ 0x7e
 800e628:	411c      	asrs	r4, r3
 800e62a:	4444      	add	r4, r8
 800e62c:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800e630:	4961      	ldr	r1, [pc, #388]	@ (800e7b8 <__ieee754_powf+0x69c>)
 800e632:	3b7f      	subs	r3, #127	@ 0x7f
 800e634:	4119      	asrs	r1, r3
 800e636:	4021      	ands	r1, r4
 800e638:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e63c:	f1c3 0317 	rsb	r3, r3, #23
 800e640:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800e644:	4638      	mov	r0, r7
 800e646:	411c      	asrs	r4, r3
 800e648:	f1b8 0f00 	cmp.w	r8, #0
 800e64c:	bfb8      	it	lt
 800e64e:	4264      	neglt	r4, r4
 800e650:	f7f2 fa8e 	bl	8000b70 <__aeabi_fsub>
 800e654:	4607      	mov	r7, r0
 800e656:	4631      	mov	r1, r6
 800e658:	4638      	mov	r0, r7
 800e65a:	f7f2 fa8b 	bl	8000b74 <__addsf3>
 800e65e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800e662:	f028 080f 	bic.w	r8, r8, #15
 800e666:	4640      	mov	r0, r8
 800e668:	4954      	ldr	r1, [pc, #336]	@ (800e7bc <__ieee754_powf+0x6a0>)
 800e66a:	f7f2 fb8b 	bl	8000d84 <__aeabi_fmul>
 800e66e:	4639      	mov	r1, r7
 800e670:	4681      	mov	r9, r0
 800e672:	4640      	mov	r0, r8
 800e674:	f7f2 fa7c 	bl	8000b70 <__aeabi_fsub>
 800e678:	4601      	mov	r1, r0
 800e67a:	4630      	mov	r0, r6
 800e67c:	f7f2 fa78 	bl	8000b70 <__aeabi_fsub>
 800e680:	494f      	ldr	r1, [pc, #316]	@ (800e7c0 <__ieee754_powf+0x6a4>)
 800e682:	f7f2 fb7f 	bl	8000d84 <__aeabi_fmul>
 800e686:	494f      	ldr	r1, [pc, #316]	@ (800e7c4 <__ieee754_powf+0x6a8>)
 800e688:	4606      	mov	r6, r0
 800e68a:	4640      	mov	r0, r8
 800e68c:	f7f2 fb7a 	bl	8000d84 <__aeabi_fmul>
 800e690:	4601      	mov	r1, r0
 800e692:	4630      	mov	r0, r6
 800e694:	f7f2 fa6e 	bl	8000b74 <__addsf3>
 800e698:	4607      	mov	r7, r0
 800e69a:	4601      	mov	r1, r0
 800e69c:	4648      	mov	r0, r9
 800e69e:	f7f2 fa69 	bl	8000b74 <__addsf3>
 800e6a2:	4649      	mov	r1, r9
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	f7f2 fa63 	bl	8000b70 <__aeabi_fsub>
 800e6aa:	4601      	mov	r1, r0
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	f7f2 fa5f 	bl	8000b70 <__aeabi_fsub>
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f7f2 fb64 	bl	8000d84 <__aeabi_fmul>
 800e6bc:	4607      	mov	r7, r0
 800e6be:	4942      	ldr	r1, [pc, #264]	@ (800e7c8 <__ieee754_powf+0x6ac>)
 800e6c0:	f7f2 fb60 	bl	8000d84 <__aeabi_fmul>
 800e6c4:	4941      	ldr	r1, [pc, #260]	@ (800e7cc <__ieee754_powf+0x6b0>)
 800e6c6:	f7f2 fa53 	bl	8000b70 <__aeabi_fsub>
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	f7f2 fb5a 	bl	8000d84 <__aeabi_fmul>
 800e6d0:	493f      	ldr	r1, [pc, #252]	@ (800e7d0 <__ieee754_powf+0x6b4>)
 800e6d2:	f7f2 fa4f 	bl	8000b74 <__addsf3>
 800e6d6:	4639      	mov	r1, r7
 800e6d8:	f7f2 fb54 	bl	8000d84 <__aeabi_fmul>
 800e6dc:	493d      	ldr	r1, [pc, #244]	@ (800e7d4 <__ieee754_powf+0x6b8>)
 800e6de:	f7f2 fa47 	bl	8000b70 <__aeabi_fsub>
 800e6e2:	4639      	mov	r1, r7
 800e6e4:	f7f2 fb4e 	bl	8000d84 <__aeabi_fmul>
 800e6e8:	493b      	ldr	r1, [pc, #236]	@ (800e7d8 <__ieee754_powf+0x6bc>)
 800e6ea:	f7f2 fa43 	bl	8000b74 <__addsf3>
 800e6ee:	4639      	mov	r1, r7
 800e6f0:	f7f2 fb48 	bl	8000d84 <__aeabi_fmul>
 800e6f4:	4601      	mov	r1, r0
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f7f2 fa3a 	bl	8000b70 <__aeabi_fsub>
 800e6fc:	4607      	mov	r7, r0
 800e6fe:	4601      	mov	r1, r0
 800e700:	4630      	mov	r0, r6
 800e702:	f7f2 fb3f 	bl	8000d84 <__aeabi_fmul>
 800e706:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e70a:	4681      	mov	r9, r0
 800e70c:	4638      	mov	r0, r7
 800e70e:	f7f2 fa2f 	bl	8000b70 <__aeabi_fsub>
 800e712:	4601      	mov	r1, r0
 800e714:	4648      	mov	r0, r9
 800e716:	f7f2 fbe9 	bl	8000eec <__aeabi_fdiv>
 800e71a:	4641      	mov	r1, r8
 800e71c:	4607      	mov	r7, r0
 800e71e:	4630      	mov	r0, r6
 800e720:	f7f2 fb30 	bl	8000d84 <__aeabi_fmul>
 800e724:	4641      	mov	r1, r8
 800e726:	f7f2 fa25 	bl	8000b74 <__addsf3>
 800e72a:	4601      	mov	r1, r0
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7f2 fa1f 	bl	8000b70 <__aeabi_fsub>
 800e732:	4631      	mov	r1, r6
 800e734:	f7f2 fa1c 	bl	8000b70 <__aeabi_fsub>
 800e738:	4601      	mov	r1, r0
 800e73a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e73e:	f7f2 fa17 	bl	8000b70 <__aeabi_fsub>
 800e742:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800e746:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e74a:	da06      	bge.n	800e75a <__ieee754_powf+0x63e>
 800e74c:	4621      	mov	r1, r4
 800e74e:	f000 fab7 	bl	800ecc0 <scalbnf>
 800e752:	4629      	mov	r1, r5
 800e754:	e549      	b.n	800e1ea <__ieee754_powf+0xce>
 800e756:	2400      	movs	r4, #0
 800e758:	e77d      	b.n	800e656 <__ieee754_powf+0x53a>
 800e75a:	4618      	mov	r0, r3
 800e75c:	e7f9      	b.n	800e752 <__ieee754_powf+0x636>
 800e75e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e762:	e536      	b.n	800e1d2 <__ieee754_powf+0xb6>
 800e764:	4639      	mov	r1, r7
 800e766:	e534      	b.n	800e1d2 <__ieee754_powf+0xb6>
 800e768:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800e76c:	f43f ad23 	beq.w	800e1b6 <__ieee754_powf+0x9a>
 800e770:	2502      	movs	r5, #2
 800e772:	4648      	mov	r0, r9
 800e774:	f7ff f93b 	bl	800d9ee <fabsf>
 800e778:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e77c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e780:	46c2      	mov	sl, r8
 800e782:	4601      	mov	r1, r0
 800e784:	d003      	beq.n	800e78e <__ieee754_powf+0x672>
 800e786:	f1b8 0f00 	cmp.w	r8, #0
 800e78a:	f47f ad43 	bne.w	800e214 <__ieee754_powf+0xf8>
 800e78e:	2c00      	cmp	r4, #0
 800e790:	da04      	bge.n	800e79c <__ieee754_powf+0x680>
 800e792:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e796:	f7f2 fba9 	bl	8000eec <__aeabi_fdiv>
 800e79a:	4601      	mov	r1, r0
 800e79c:	2e00      	cmp	r6, #0
 800e79e:	f6bf ad18 	bge.w	800e1d2 <__ieee754_powf+0xb6>
 800e7a2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e7a6:	ea58 0805 	orrs.w	r8, r8, r5
 800e7aa:	f47f ad2e 	bne.w	800e20a <__ieee754_powf+0xee>
 800e7ae:	4608      	mov	r0, r1
 800e7b0:	f7f2 f9de 	bl	8000b70 <__aeabi_fsub>
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	e4f8      	b.n	800e1aa <__ieee754_powf+0x8e>
 800e7b8:	ff800000 	.word	0xff800000
 800e7bc:	3f317200 	.word	0x3f317200
 800e7c0:	3f317218 	.word	0x3f317218
 800e7c4:	35bfbe8c 	.word	0x35bfbe8c
 800e7c8:	3331bb4c 	.word	0x3331bb4c
 800e7cc:	35ddea0e 	.word	0x35ddea0e
 800e7d0:	388ab355 	.word	0x388ab355
 800e7d4:	3b360b61 	.word	0x3b360b61
 800e7d8:	3e2aaaab 	.word	0x3e2aaaab

0800e7dc <__ieee754_rem_pio2f>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	4aa4      	ldr	r2, [pc, #656]	@ (800ea74 <__ieee754_rem_pio2f+0x298>)
 800e7e2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800e7e6:	4590      	cmp	r8, r2
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	4682      	mov	sl, r0
 800e7ec:	b087      	sub	sp, #28
 800e7ee:	d804      	bhi.n	800e7fa <__ieee754_rem_pio2f+0x1e>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	6008      	str	r0, [r1, #0]
 800e7f4:	604b      	str	r3, [r1, #4]
 800e7f6:	2500      	movs	r5, #0
 800e7f8:	e01d      	b.n	800e836 <__ieee754_rem_pio2f+0x5a>
 800e7fa:	4a9f      	ldr	r2, [pc, #636]	@ (800ea78 <__ieee754_rem_pio2f+0x29c>)
 800e7fc:	4590      	cmp	r8, r2
 800e7fe:	d84f      	bhi.n	800e8a0 <__ieee754_rem_pio2f+0xc4>
 800e800:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800e804:	2800      	cmp	r0, #0
 800e806:	499d      	ldr	r1, [pc, #628]	@ (800ea7c <__ieee754_rem_pio2f+0x2a0>)
 800e808:	4f9d      	ldr	r7, [pc, #628]	@ (800ea80 <__ieee754_rem_pio2f+0x2a4>)
 800e80a:	f025 050f 	bic.w	r5, r5, #15
 800e80e:	dd24      	ble.n	800e85a <__ieee754_rem_pio2f+0x7e>
 800e810:	f7f2 f9ae 	bl	8000b70 <__aeabi_fsub>
 800e814:	42bd      	cmp	r5, r7
 800e816:	4606      	mov	r6, r0
 800e818:	d011      	beq.n	800e83e <__ieee754_rem_pio2f+0x62>
 800e81a:	499a      	ldr	r1, [pc, #616]	@ (800ea84 <__ieee754_rem_pio2f+0x2a8>)
 800e81c:	f7f2 f9a8 	bl	8000b70 <__aeabi_fsub>
 800e820:	4601      	mov	r1, r0
 800e822:	4605      	mov	r5, r0
 800e824:	4630      	mov	r0, r6
 800e826:	f7f2 f9a3 	bl	8000b70 <__aeabi_fsub>
 800e82a:	4996      	ldr	r1, [pc, #600]	@ (800ea84 <__ieee754_rem_pio2f+0x2a8>)
 800e82c:	f7f2 f9a0 	bl	8000b70 <__aeabi_fsub>
 800e830:	6025      	str	r5, [r4, #0]
 800e832:	2501      	movs	r5, #1
 800e834:	6060      	str	r0, [r4, #4]
 800e836:	4628      	mov	r0, r5
 800e838:	b007      	add	sp, #28
 800e83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83e:	4992      	ldr	r1, [pc, #584]	@ (800ea88 <__ieee754_rem_pio2f+0x2ac>)
 800e840:	f7f2 f996 	bl	8000b70 <__aeabi_fsub>
 800e844:	4991      	ldr	r1, [pc, #580]	@ (800ea8c <__ieee754_rem_pio2f+0x2b0>)
 800e846:	4606      	mov	r6, r0
 800e848:	f7f2 f992 	bl	8000b70 <__aeabi_fsub>
 800e84c:	4601      	mov	r1, r0
 800e84e:	4605      	mov	r5, r0
 800e850:	4630      	mov	r0, r6
 800e852:	f7f2 f98d 	bl	8000b70 <__aeabi_fsub>
 800e856:	498d      	ldr	r1, [pc, #564]	@ (800ea8c <__ieee754_rem_pio2f+0x2b0>)
 800e858:	e7e8      	b.n	800e82c <__ieee754_rem_pio2f+0x50>
 800e85a:	f7f2 f98b 	bl	8000b74 <__addsf3>
 800e85e:	42bd      	cmp	r5, r7
 800e860:	4606      	mov	r6, r0
 800e862:	d00f      	beq.n	800e884 <__ieee754_rem_pio2f+0xa8>
 800e864:	4987      	ldr	r1, [pc, #540]	@ (800ea84 <__ieee754_rem_pio2f+0x2a8>)
 800e866:	f7f2 f985 	bl	8000b74 <__addsf3>
 800e86a:	4601      	mov	r1, r0
 800e86c:	4605      	mov	r5, r0
 800e86e:	4630      	mov	r0, r6
 800e870:	f7f2 f97e 	bl	8000b70 <__aeabi_fsub>
 800e874:	4983      	ldr	r1, [pc, #524]	@ (800ea84 <__ieee754_rem_pio2f+0x2a8>)
 800e876:	f7f2 f97d 	bl	8000b74 <__addsf3>
 800e87a:	6025      	str	r5, [r4, #0]
 800e87c:	6060      	str	r0, [r4, #4]
 800e87e:	f04f 35ff 	mov.w	r5, #4294967295
 800e882:	e7d8      	b.n	800e836 <__ieee754_rem_pio2f+0x5a>
 800e884:	4980      	ldr	r1, [pc, #512]	@ (800ea88 <__ieee754_rem_pio2f+0x2ac>)
 800e886:	f7f2 f975 	bl	8000b74 <__addsf3>
 800e88a:	4980      	ldr	r1, [pc, #512]	@ (800ea8c <__ieee754_rem_pio2f+0x2b0>)
 800e88c:	4606      	mov	r6, r0
 800e88e:	f7f2 f971 	bl	8000b74 <__addsf3>
 800e892:	4601      	mov	r1, r0
 800e894:	4605      	mov	r5, r0
 800e896:	4630      	mov	r0, r6
 800e898:	f7f2 f96a 	bl	8000b70 <__aeabi_fsub>
 800e89c:	497b      	ldr	r1, [pc, #492]	@ (800ea8c <__ieee754_rem_pio2f+0x2b0>)
 800e89e:	e7ea      	b.n	800e876 <__ieee754_rem_pio2f+0x9a>
 800e8a0:	4a7b      	ldr	r2, [pc, #492]	@ (800ea90 <__ieee754_rem_pio2f+0x2b4>)
 800e8a2:	4590      	cmp	r8, r2
 800e8a4:	f200 8095 	bhi.w	800e9d2 <__ieee754_rem_pio2f+0x1f6>
 800e8a8:	f7ff f8a1 	bl	800d9ee <fabsf>
 800e8ac:	4979      	ldr	r1, [pc, #484]	@ (800ea94 <__ieee754_rem_pio2f+0x2b8>)
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	f7f2 fa68 	bl	8000d84 <__aeabi_fmul>
 800e8b4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e8b8:	f7f2 f95c 	bl	8000b74 <__addsf3>
 800e8bc:	f7f2 fc3e 	bl	800113c <__aeabi_f2iz>
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	f7f2 fa0b 	bl	8000cdc <__aeabi_i2f>
 800e8c6:	496d      	ldr	r1, [pc, #436]	@ (800ea7c <__ieee754_rem_pio2f+0x2a0>)
 800e8c8:	4681      	mov	r9, r0
 800e8ca:	f7f2 fa5b 	bl	8000d84 <__aeabi_fmul>
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f7f2 f94d 	bl	8000b70 <__aeabi_fsub>
 800e8d6:	496b      	ldr	r1, [pc, #428]	@ (800ea84 <__ieee754_rem_pio2f+0x2a8>)
 800e8d8:	4607      	mov	r7, r0
 800e8da:	4648      	mov	r0, r9
 800e8dc:	f7f2 fa52 	bl	8000d84 <__aeabi_fmul>
 800e8e0:	2d1f      	cmp	r5, #31
 800e8e2:	4606      	mov	r6, r0
 800e8e4:	dc0e      	bgt.n	800e904 <__ieee754_rem_pio2f+0x128>
 800e8e6:	4a6c      	ldr	r2, [pc, #432]	@ (800ea98 <__ieee754_rem_pio2f+0x2bc>)
 800e8e8:	1e69      	subs	r1, r5, #1
 800e8ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e8ee:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800e8f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d004      	beq.n	800e904 <__ieee754_rem_pio2f+0x128>
 800e8fa:	4631      	mov	r1, r6
 800e8fc:	4638      	mov	r0, r7
 800e8fe:	f7f2 f937 	bl	8000b70 <__aeabi_fsub>
 800e902:	e00b      	b.n	800e91c <__ieee754_rem_pio2f+0x140>
 800e904:	4631      	mov	r1, r6
 800e906:	4638      	mov	r0, r7
 800e908:	f7f2 f932 	bl	8000b70 <__aeabi_fsub>
 800e90c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e910:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800e914:	2b08      	cmp	r3, #8
 800e916:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800e91a:	dc01      	bgt.n	800e920 <__ieee754_rem_pio2f+0x144>
 800e91c:	6020      	str	r0, [r4, #0]
 800e91e:	e026      	b.n	800e96e <__ieee754_rem_pio2f+0x192>
 800e920:	4959      	ldr	r1, [pc, #356]	@ (800ea88 <__ieee754_rem_pio2f+0x2ac>)
 800e922:	4648      	mov	r0, r9
 800e924:	f7f2 fa2e 	bl	8000d84 <__aeabi_fmul>
 800e928:	4606      	mov	r6, r0
 800e92a:	4601      	mov	r1, r0
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7f2 f91f 	bl	8000b70 <__aeabi_fsub>
 800e932:	4601      	mov	r1, r0
 800e934:	4680      	mov	r8, r0
 800e936:	4638      	mov	r0, r7
 800e938:	f7f2 f91a 	bl	8000b70 <__aeabi_fsub>
 800e93c:	4631      	mov	r1, r6
 800e93e:	f7f2 f917 	bl	8000b70 <__aeabi_fsub>
 800e942:	4606      	mov	r6, r0
 800e944:	4951      	ldr	r1, [pc, #324]	@ (800ea8c <__ieee754_rem_pio2f+0x2b0>)
 800e946:	4648      	mov	r0, r9
 800e948:	f7f2 fa1c 	bl	8000d84 <__aeabi_fmul>
 800e94c:	4631      	mov	r1, r6
 800e94e:	f7f2 f90f 	bl	8000b70 <__aeabi_fsub>
 800e952:	4601      	mov	r1, r0
 800e954:	4606      	mov	r6, r0
 800e956:	4640      	mov	r0, r8
 800e958:	f7f2 f90a 	bl	8000b70 <__aeabi_fsub>
 800e95c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e960:	ebab 0b03 	sub.w	fp, fp, r3
 800e964:	f1bb 0f19 	cmp.w	fp, #25
 800e968:	dc18      	bgt.n	800e99c <__ieee754_rem_pio2f+0x1c0>
 800e96a:	4647      	mov	r7, r8
 800e96c:	6020      	str	r0, [r4, #0]
 800e96e:	f8d4 8000 	ldr.w	r8, [r4]
 800e972:	4638      	mov	r0, r7
 800e974:	4641      	mov	r1, r8
 800e976:	f7f2 f8fb 	bl	8000b70 <__aeabi_fsub>
 800e97a:	4631      	mov	r1, r6
 800e97c:	f7f2 f8f8 	bl	8000b70 <__aeabi_fsub>
 800e980:	f1ba 0f00 	cmp.w	sl, #0
 800e984:	6060      	str	r0, [r4, #4]
 800e986:	f6bf af56 	bge.w	800e836 <__ieee754_rem_pio2f+0x5a>
 800e98a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800e98e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800e992:	f8c4 8000 	str.w	r8, [r4]
 800e996:	6060      	str	r0, [r4, #4]
 800e998:	426d      	negs	r5, r5
 800e99a:	e74c      	b.n	800e836 <__ieee754_rem_pio2f+0x5a>
 800e99c:	493f      	ldr	r1, [pc, #252]	@ (800ea9c <__ieee754_rem_pio2f+0x2c0>)
 800e99e:	4648      	mov	r0, r9
 800e9a0:	f7f2 f9f0 	bl	8000d84 <__aeabi_fmul>
 800e9a4:	4606      	mov	r6, r0
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	4640      	mov	r0, r8
 800e9aa:	f7f2 f8e1 	bl	8000b70 <__aeabi_fsub>
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	f7f2 f8dc 	bl	8000b70 <__aeabi_fsub>
 800e9b8:	4631      	mov	r1, r6
 800e9ba:	f7f2 f8d9 	bl	8000b70 <__aeabi_fsub>
 800e9be:	4606      	mov	r6, r0
 800e9c0:	4937      	ldr	r1, [pc, #220]	@ (800eaa0 <__ieee754_rem_pio2f+0x2c4>)
 800e9c2:	4648      	mov	r0, r9
 800e9c4:	f7f2 f9de 	bl	8000d84 <__aeabi_fmul>
 800e9c8:	4631      	mov	r1, r6
 800e9ca:	f7f2 f8d1 	bl	8000b70 <__aeabi_fsub>
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	e793      	b.n	800e8fa <__ieee754_rem_pio2f+0x11e>
 800e9d2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e9d6:	d305      	bcc.n	800e9e4 <__ieee754_rem_pio2f+0x208>
 800e9d8:	4601      	mov	r1, r0
 800e9da:	f7f2 f8c9 	bl	8000b70 <__aeabi_fsub>
 800e9de:	6060      	str	r0, [r4, #4]
 800e9e0:	6020      	str	r0, [r4, #0]
 800e9e2:	e708      	b.n	800e7f6 <__ieee754_rem_pio2f+0x1a>
 800e9e4:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800e9e8:	3e86      	subs	r6, #134	@ 0x86
 800e9ea:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	f7f2 fba4 	bl	800113c <__aeabi_f2iz>
 800e9f4:	f7f2 f972 	bl	8000cdc <__aeabi_i2f>
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	9003      	str	r0, [sp, #12]
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	f7f2 f8b7 	bl	8000b70 <__aeabi_fsub>
 800ea02:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ea06:	f7f2 f9bd 	bl	8000d84 <__aeabi_fmul>
 800ea0a:	4607      	mov	r7, r0
 800ea0c:	f7f2 fb96 	bl	800113c <__aeabi_f2iz>
 800ea10:	f7f2 f964 	bl	8000cdc <__aeabi_i2f>
 800ea14:	4601      	mov	r1, r0
 800ea16:	9004      	str	r0, [sp, #16]
 800ea18:	4605      	mov	r5, r0
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	f7f2 f8a8 	bl	8000b70 <__aeabi_fsub>
 800ea20:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ea24:	f7f2 f9ae 	bl	8000d84 <__aeabi_fmul>
 800ea28:	2100      	movs	r1, #0
 800ea2a:	9005      	str	r0, [sp, #20]
 800ea2c:	f7f2 fb3e 	bl	80010ac <__aeabi_fcmpeq>
 800ea30:	b1f0      	cbz	r0, 800ea70 <__ieee754_rem_pio2f+0x294>
 800ea32:	2100      	movs	r1, #0
 800ea34:	4628      	mov	r0, r5
 800ea36:	f7f2 fb39 	bl	80010ac <__aeabi_fcmpeq>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	bf14      	ite	ne
 800ea3e:	2301      	movne	r3, #1
 800ea40:	2302      	moveq	r3, #2
 800ea42:	4a18      	ldr	r2, [pc, #96]	@ (800eaa4 <__ieee754_rem_pio2f+0x2c8>)
 800ea44:	4621      	mov	r1, r4
 800ea46:	9201      	str	r2, [sp, #4]
 800ea48:	2202      	movs	r2, #2
 800ea4a:	a803      	add	r0, sp, #12
 800ea4c:	9200      	str	r2, [sp, #0]
 800ea4e:	4632      	mov	r2, r6
 800ea50:	f000 f9a0 	bl	800ed94 <__kernel_rem_pio2f>
 800ea54:	f1ba 0f00 	cmp.w	sl, #0
 800ea58:	4605      	mov	r5, r0
 800ea5a:	f6bf aeec 	bge.w	800e836 <__ieee754_rem_pio2f+0x5a>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	6863      	ldr	r3, [r4, #4]
 800ea68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ea6c:	6063      	str	r3, [r4, #4]
 800ea6e:	e793      	b.n	800e998 <__ieee754_rem_pio2f+0x1bc>
 800ea70:	2303      	movs	r3, #3
 800ea72:	e7e6      	b.n	800ea42 <__ieee754_rem_pio2f+0x266>
 800ea74:	3f490fd8 	.word	0x3f490fd8
 800ea78:	4016cbe3 	.word	0x4016cbe3
 800ea7c:	3fc90f80 	.word	0x3fc90f80
 800ea80:	3fc90fd0 	.word	0x3fc90fd0
 800ea84:	37354443 	.word	0x37354443
 800ea88:	37354400 	.word	0x37354400
 800ea8c:	2e85a308 	.word	0x2e85a308
 800ea90:	43490f80 	.word	0x43490f80
 800ea94:	3f22f984 	.word	0x3f22f984
 800ea98:	0800f9ac 	.word	0x0800f9ac
 800ea9c:	2e85a300 	.word	0x2e85a300
 800eaa0:	248d3132 	.word	0x248d3132
 800eaa4:	0800fa2c 	.word	0x0800fa2c

0800eaa8 <atanf>:
 800eaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaac:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800eab0:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800eab4:	4604      	mov	r4, r0
 800eab6:	4680      	mov	r8, r0
 800eab8:	d30e      	bcc.n	800ead8 <atanf+0x30>
 800eaba:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800eabe:	d904      	bls.n	800eaca <atanf+0x22>
 800eac0:	4601      	mov	r1, r0
 800eac2:	f7f2 f857 	bl	8000b74 <__addsf3>
 800eac6:	4604      	mov	r4, r0
 800eac8:	e003      	b.n	800ead2 <atanf+0x2a>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	f340 80ce 	ble.w	800ec6c <atanf+0x1c4>
 800ead0:	4c67      	ldr	r4, [pc, #412]	@ (800ec70 <atanf+0x1c8>)
 800ead2:	4620      	mov	r0, r4
 800ead4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead8:	4b66      	ldr	r3, [pc, #408]	@ (800ec74 <atanf+0x1cc>)
 800eada:	429d      	cmp	r5, r3
 800eadc:	d80e      	bhi.n	800eafc <atanf+0x54>
 800eade:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800eae2:	d208      	bcs.n	800eaf6 <atanf+0x4e>
 800eae4:	4964      	ldr	r1, [pc, #400]	@ (800ec78 <atanf+0x1d0>)
 800eae6:	f7f2 f845 	bl	8000b74 <__addsf3>
 800eaea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800eaee:	f7f2 fb05 	bl	80010fc <__aeabi_fcmpgt>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d1ed      	bne.n	800ead2 <atanf+0x2a>
 800eaf6:	f04f 36ff 	mov.w	r6, #4294967295
 800eafa:	e01c      	b.n	800eb36 <atanf+0x8e>
 800eafc:	f7fe ff77 	bl	800d9ee <fabsf>
 800eb00:	4b5e      	ldr	r3, [pc, #376]	@ (800ec7c <atanf+0x1d4>)
 800eb02:	4604      	mov	r4, r0
 800eb04:	429d      	cmp	r5, r3
 800eb06:	d87c      	bhi.n	800ec02 <atanf+0x15a>
 800eb08:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800eb0c:	429d      	cmp	r5, r3
 800eb0e:	d867      	bhi.n	800ebe0 <atanf+0x138>
 800eb10:	4601      	mov	r1, r0
 800eb12:	f7f2 f82f 	bl	8000b74 <__addsf3>
 800eb16:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800eb1a:	f7f2 f829 	bl	8000b70 <__aeabi_fsub>
 800eb1e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800eb22:	4605      	mov	r5, r0
 800eb24:	4620      	mov	r0, r4
 800eb26:	f7f2 f825 	bl	8000b74 <__addsf3>
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f7f2 f9dd 	bl	8000eec <__aeabi_fdiv>
 800eb32:	2600      	movs	r6, #0
 800eb34:	4604      	mov	r4, r0
 800eb36:	4621      	mov	r1, r4
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f7f2 f923 	bl	8000d84 <__aeabi_fmul>
 800eb3e:	4601      	mov	r1, r0
 800eb40:	4607      	mov	r7, r0
 800eb42:	f7f2 f91f 	bl	8000d84 <__aeabi_fmul>
 800eb46:	4605      	mov	r5, r0
 800eb48:	494d      	ldr	r1, [pc, #308]	@ (800ec80 <atanf+0x1d8>)
 800eb4a:	f7f2 f91b 	bl	8000d84 <__aeabi_fmul>
 800eb4e:	494d      	ldr	r1, [pc, #308]	@ (800ec84 <atanf+0x1dc>)
 800eb50:	f7f2 f810 	bl	8000b74 <__addsf3>
 800eb54:	4629      	mov	r1, r5
 800eb56:	f7f2 f915 	bl	8000d84 <__aeabi_fmul>
 800eb5a:	494b      	ldr	r1, [pc, #300]	@ (800ec88 <atanf+0x1e0>)
 800eb5c:	f7f2 f80a 	bl	8000b74 <__addsf3>
 800eb60:	4629      	mov	r1, r5
 800eb62:	f7f2 f90f 	bl	8000d84 <__aeabi_fmul>
 800eb66:	4949      	ldr	r1, [pc, #292]	@ (800ec8c <atanf+0x1e4>)
 800eb68:	f7f2 f804 	bl	8000b74 <__addsf3>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	f7f2 f909 	bl	8000d84 <__aeabi_fmul>
 800eb72:	4947      	ldr	r1, [pc, #284]	@ (800ec90 <atanf+0x1e8>)
 800eb74:	f7f1 fffe 	bl	8000b74 <__addsf3>
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7f2 f903 	bl	8000d84 <__aeabi_fmul>
 800eb7e:	4945      	ldr	r1, [pc, #276]	@ (800ec94 <atanf+0x1ec>)
 800eb80:	f7f1 fff8 	bl	8000b74 <__addsf3>
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f2 f8fd 	bl	8000d84 <__aeabi_fmul>
 800eb8a:	4943      	ldr	r1, [pc, #268]	@ (800ec98 <atanf+0x1f0>)
 800eb8c:	4607      	mov	r7, r0
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f7f2 f8f8 	bl	8000d84 <__aeabi_fmul>
 800eb94:	4941      	ldr	r1, [pc, #260]	@ (800ec9c <atanf+0x1f4>)
 800eb96:	f7f1 ffeb 	bl	8000b70 <__aeabi_fsub>
 800eb9a:	4629      	mov	r1, r5
 800eb9c:	f7f2 f8f2 	bl	8000d84 <__aeabi_fmul>
 800eba0:	493f      	ldr	r1, [pc, #252]	@ (800eca0 <atanf+0x1f8>)
 800eba2:	f7f1 ffe5 	bl	8000b70 <__aeabi_fsub>
 800eba6:	4629      	mov	r1, r5
 800eba8:	f7f2 f8ec 	bl	8000d84 <__aeabi_fmul>
 800ebac:	493d      	ldr	r1, [pc, #244]	@ (800eca4 <atanf+0x1fc>)
 800ebae:	f7f1 ffdf 	bl	8000b70 <__aeabi_fsub>
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f7f2 f8e6 	bl	8000d84 <__aeabi_fmul>
 800ebb8:	493b      	ldr	r1, [pc, #236]	@ (800eca8 <atanf+0x200>)
 800ebba:	f7f1 ffd9 	bl	8000b70 <__aeabi_fsub>
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	f7f2 f8e0 	bl	8000d84 <__aeabi_fmul>
 800ebc4:	4601      	mov	r1, r0
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	f7f1 ffd4 	bl	8000b74 <__addsf3>
 800ebcc:	4621      	mov	r1, r4
 800ebce:	f7f2 f8d9 	bl	8000d84 <__aeabi_fmul>
 800ebd2:	1c73      	adds	r3, r6, #1
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	d133      	bne.n	800ec40 <atanf+0x198>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f7f1 ffc9 	bl	8000b70 <__aeabi_fsub>
 800ebde:	e772      	b.n	800eac6 <atanf+0x1e>
 800ebe0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ebe4:	f7f1 ffc4 	bl	8000b70 <__aeabi_fsub>
 800ebe8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ebec:	4605      	mov	r5, r0
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7f1 ffc0 	bl	8000b74 <__addsf3>
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f7f2 f978 	bl	8000eec <__aeabi_fdiv>
 800ebfc:	2601      	movs	r6, #1
 800ebfe:	4604      	mov	r4, r0
 800ec00:	e799      	b.n	800eb36 <atanf+0x8e>
 800ec02:	4b2a      	ldr	r3, [pc, #168]	@ (800ecac <atanf+0x204>)
 800ec04:	429d      	cmp	r5, r3
 800ec06:	d814      	bhi.n	800ec32 <atanf+0x18a>
 800ec08:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ec0c:	f7f1 ffb0 	bl	8000b70 <__aeabi_fsub>
 800ec10:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800ec14:	4605      	mov	r5, r0
 800ec16:	4620      	mov	r0, r4
 800ec18:	f7f2 f8b4 	bl	8000d84 <__aeabi_fmul>
 800ec1c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ec20:	f7f1 ffa8 	bl	8000b74 <__addsf3>
 800ec24:	4601      	mov	r1, r0
 800ec26:	4628      	mov	r0, r5
 800ec28:	f7f2 f960 	bl	8000eec <__aeabi_fdiv>
 800ec2c:	2602      	movs	r6, #2
 800ec2e:	4604      	mov	r4, r0
 800ec30:	e781      	b.n	800eb36 <atanf+0x8e>
 800ec32:	4601      	mov	r1, r0
 800ec34:	481e      	ldr	r0, [pc, #120]	@ (800ecb0 <atanf+0x208>)
 800ec36:	f7f2 f959 	bl	8000eec <__aeabi_fdiv>
 800ec3a:	2603      	movs	r6, #3
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	e77a      	b.n	800eb36 <atanf+0x8e>
 800ec40:	4b1c      	ldr	r3, [pc, #112]	@ (800ecb4 <atanf+0x20c>)
 800ec42:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ec46:	f7f1 ff93 	bl	8000b70 <__aeabi_fsub>
 800ec4a:	4621      	mov	r1, r4
 800ec4c:	f7f1 ff90 	bl	8000b70 <__aeabi_fsub>
 800ec50:	4b19      	ldr	r3, [pc, #100]	@ (800ecb8 <atanf+0x210>)
 800ec52:	4601      	mov	r1, r0
 800ec54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ec58:	f7f1 ff8a 	bl	8000b70 <__aeabi_fsub>
 800ec5c:	f1b8 0f00 	cmp.w	r8, #0
 800ec60:	4604      	mov	r4, r0
 800ec62:	f6bf af36 	bge.w	800ead2 <atanf+0x2a>
 800ec66:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800ec6a:	e732      	b.n	800ead2 <atanf+0x2a>
 800ec6c:	4c13      	ldr	r4, [pc, #76]	@ (800ecbc <atanf+0x214>)
 800ec6e:	e730      	b.n	800ead2 <atanf+0x2a>
 800ec70:	3fc90fdb 	.word	0x3fc90fdb
 800ec74:	3edfffff 	.word	0x3edfffff
 800ec78:	7149f2ca 	.word	0x7149f2ca
 800ec7c:	3f97ffff 	.word	0x3f97ffff
 800ec80:	3c8569d7 	.word	0x3c8569d7
 800ec84:	3d4bda59 	.word	0x3d4bda59
 800ec88:	3d886b35 	.word	0x3d886b35
 800ec8c:	3dba2e6e 	.word	0x3dba2e6e
 800ec90:	3e124925 	.word	0x3e124925
 800ec94:	3eaaaaab 	.word	0x3eaaaaab
 800ec98:	bd15a221 	.word	0xbd15a221
 800ec9c:	3d6ef16b 	.word	0x3d6ef16b
 800eca0:	3d9d8795 	.word	0x3d9d8795
 800eca4:	3de38e38 	.word	0x3de38e38
 800eca8:	3e4ccccd 	.word	0x3e4ccccd
 800ecac:	401bffff 	.word	0x401bffff
 800ecb0:	bf800000 	.word	0xbf800000
 800ecb4:	0800fd44 	.word	0x0800fd44
 800ecb8:	0800fd54 	.word	0x0800fd54
 800ecbc:	bfc90fdb 	.word	0xbfc90fdb

0800ecc0 <scalbnf>:
 800ecc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	460d      	mov	r5, r1
 800ecca:	4604      	mov	r4, r0
 800eccc:	d02e      	beq.n	800ed2c <scalbnf+0x6c>
 800ecce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ecd2:	d304      	bcc.n	800ecde <scalbnf+0x1e>
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	f7f1 ff4d 	bl	8000b74 <__addsf3>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	e026      	b.n	800ed2c <scalbnf+0x6c>
 800ecde:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800ece2:	d118      	bne.n	800ed16 <scalbnf+0x56>
 800ece4:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800ece8:	f7f2 f84c 	bl	8000d84 <__aeabi_fmul>
 800ecec:	4a17      	ldr	r2, [pc, #92]	@ (800ed4c <scalbnf+0x8c>)
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4295      	cmp	r5, r2
 800ecf2:	db0c      	blt.n	800ed0e <scalbnf+0x4e>
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ecfa:	3a19      	subs	r2, #25
 800ecfc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ed00:	428d      	cmp	r5, r1
 800ed02:	dd0a      	ble.n	800ed1a <scalbnf+0x5a>
 800ed04:	4912      	ldr	r1, [pc, #72]	@ (800ed50 <scalbnf+0x90>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	f361 001e 	bfi	r0, r1, #0, #31
 800ed0c:	e000      	b.n	800ed10 <scalbnf+0x50>
 800ed0e:	4911      	ldr	r1, [pc, #68]	@ (800ed54 <scalbnf+0x94>)
 800ed10:	f7f2 f838 	bl	8000d84 <__aeabi_fmul>
 800ed14:	e7e1      	b.n	800ecda <scalbnf+0x1a>
 800ed16:	0dd2      	lsrs	r2, r2, #23
 800ed18:	e7f0      	b.n	800ecfc <scalbnf+0x3c>
 800ed1a:	1951      	adds	r1, r2, r5
 800ed1c:	29fe      	cmp	r1, #254	@ 0xfe
 800ed1e:	dcf1      	bgt.n	800ed04 <scalbnf+0x44>
 800ed20:	2900      	cmp	r1, #0
 800ed22:	dd05      	ble.n	800ed30 <scalbnf+0x70>
 800ed24:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ed28:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	bd38      	pop	{r3, r4, r5, pc}
 800ed30:	f111 0f16 	cmn.w	r1, #22
 800ed34:	da01      	bge.n	800ed3a <scalbnf+0x7a>
 800ed36:	4907      	ldr	r1, [pc, #28]	@ (800ed54 <scalbnf+0x94>)
 800ed38:	e7e5      	b.n	800ed06 <scalbnf+0x46>
 800ed3a:	f101 0019 	add.w	r0, r1, #25
 800ed3e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ed42:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800ed46:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800ed4a:	e7e1      	b.n	800ed10 <scalbnf+0x50>
 800ed4c:	ffff3cb0 	.word	0xffff3cb0
 800ed50:	7149f2ca 	.word	0x7149f2ca
 800ed54:	0da24260 	.word	0x0da24260

0800ed58 <with_errnof>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	460d      	mov	r5, r1
 800ed5e:	f7fb fad5 	bl	800a30c <__errno>
 800ed62:	6005      	str	r5, [r0, #0]
 800ed64:	4620      	mov	r0, r4
 800ed66:	bd38      	pop	{r3, r4, r5, pc}

0800ed68 <xflowf>:
 800ed68:	b508      	push	{r3, lr}
 800ed6a:	b140      	cbz	r0, 800ed7e <xflowf+0x16>
 800ed6c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800ed70:	f7f2 f808 	bl	8000d84 <__aeabi_fmul>
 800ed74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ed78:	2122      	movs	r1, #34	@ 0x22
 800ed7a:	f7ff bfed 	b.w	800ed58 <with_errnof>
 800ed7e:	4608      	mov	r0, r1
 800ed80:	e7f6      	b.n	800ed70 <xflowf+0x8>

0800ed82 <__math_uflowf>:
 800ed82:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800ed86:	f7ff bfef 	b.w	800ed68 <xflowf>

0800ed8a <__math_oflowf>:
 800ed8a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800ed8e:	f7ff bfeb 	b.w	800ed68 <xflowf>
	...

0800ed94 <__kernel_rem_pio2f>:
 800ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed98:	b0db      	sub	sp, #364	@ 0x16c
 800ed9a:	9202      	str	r2, [sp, #8]
 800ed9c:	9304      	str	r3, [sp, #16]
 800ed9e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800eda0:	4bac      	ldr	r3, [pc, #688]	@ (800f054 <__kernel_rem_pio2f+0x2c0>)
 800eda2:	9005      	str	r0, [sp, #20]
 800eda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda8:	9100      	str	r1, [sp, #0]
 800edaa:	9301      	str	r3, [sp, #4]
 800edac:	9b04      	ldr	r3, [sp, #16]
 800edae:	3b01      	subs	r3, #1
 800edb0:	9303      	str	r3, [sp, #12]
 800edb2:	9b02      	ldr	r3, [sp, #8]
 800edb4:	1d1a      	adds	r2, r3, #4
 800edb6:	f2c0 8099 	blt.w	800eeec <__kernel_rem_pio2f+0x158>
 800edba:	1edc      	subs	r4, r3, #3
 800edbc:	bf48      	it	mi
 800edbe:	1d1c      	addmi	r4, r3, #4
 800edc0:	10e4      	asrs	r4, r4, #3
 800edc2:	2500      	movs	r5, #0
 800edc4:	f04f 0b00 	mov.w	fp, #0
 800edc8:	1c67      	adds	r7, r4, #1
 800edca:	00fb      	lsls	r3, r7, #3
 800edcc:	9306      	str	r3, [sp, #24]
 800edce:	9b02      	ldr	r3, [sp, #8]
 800edd0:	9a03      	ldr	r2, [sp, #12]
 800edd2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800edd6:	9b01      	ldr	r3, [sp, #4]
 800edd8:	eba4 0802 	sub.w	r8, r4, r2
 800eddc:	eb03 0902 	add.w	r9, r3, r2
 800ede0:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800ede2:	ae1e      	add	r6, sp, #120	@ 0x78
 800ede4:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800ede8:	454d      	cmp	r5, r9
 800edea:	f340 8081 	ble.w	800eef0 <__kernel_rem_pio2f+0x15c>
 800edee:	9a04      	ldr	r2, [sp, #16]
 800edf0:	ab1e      	add	r3, sp, #120	@ 0x78
 800edf2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800edf6:	f04f 0900 	mov.w	r9, #0
 800edfa:	2300      	movs	r3, #0
 800edfc:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800ee00:	9a01      	ldr	r2, [sp, #4]
 800ee02:	4591      	cmp	r9, r2
 800ee04:	f340 809a 	ble.w	800ef3c <__kernel_rem_pio2f+0x1a8>
 800ee08:	4613      	mov	r3, r2
 800ee0a:	aa0a      	add	r2, sp, #40	@ 0x28
 800ee0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee10:	9308      	str	r3, [sp, #32]
 800ee12:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800ee14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee18:	9c01      	ldr	r4, [sp, #4]
 800ee1a:	9307      	str	r3, [sp, #28]
 800ee1c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800ee20:	4646      	mov	r6, r8
 800ee22:	4625      	mov	r5, r4
 800ee24:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800ee28:	ab5a      	add	r3, sp, #360	@ 0x168
 800ee2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee2e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800ee32:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800ee36:	2d00      	cmp	r5, #0
 800ee38:	f300 8085 	bgt.w	800ef46 <__kernel_rem_pio2f+0x1b2>
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	4658      	mov	r0, fp
 800ee40:	f7ff ff3e 	bl	800ecc0 <scalbnf>
 800ee44:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800ee48:	4605      	mov	r5, r0
 800ee4a:	f7f1 ff9b 	bl	8000d84 <__aeabi_fmul>
 800ee4e:	f000 fa3f 	bl	800f2d0 <floorf>
 800ee52:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800ee56:	f7f1 ff95 	bl	8000d84 <__aeabi_fmul>
 800ee5a:	4601      	mov	r1, r0
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7f1 fe87 	bl	8000b70 <__aeabi_fsub>
 800ee62:	4605      	mov	r5, r0
 800ee64:	f7f2 f96a 	bl	800113c <__aeabi_f2iz>
 800ee68:	4606      	mov	r6, r0
 800ee6a:	f7f1 ff37 	bl	8000cdc <__aeabi_i2f>
 800ee6e:	4601      	mov	r1, r0
 800ee70:	4628      	mov	r0, r5
 800ee72:	f7f1 fe7d 	bl	8000b70 <__aeabi_fsub>
 800ee76:	2f00      	cmp	r7, #0
 800ee78:	4681      	mov	r9, r0
 800ee7a:	f340 8081 	ble.w	800ef80 <__kernel_rem_pio2f+0x1ec>
 800ee7e:	1e62      	subs	r2, r4, #1
 800ee80:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee82:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ee86:	f1c7 0108 	rsb	r1, r7, #8
 800ee8a:	fa45 f301 	asr.w	r3, r5, r1
 800ee8e:	441e      	add	r6, r3
 800ee90:	408b      	lsls	r3, r1
 800ee92:	1aed      	subs	r5, r5, r3
 800ee94:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ee9a:	f1c7 0307 	rsb	r3, r7, #7
 800ee9e:	411d      	asrs	r5, r3
 800eea0:	2d00      	cmp	r5, #0
 800eea2:	dd7a      	ble.n	800ef9a <__kernel_rem_pio2f+0x206>
 800eea4:	2200      	movs	r2, #0
 800eea6:	4692      	mov	sl, r2
 800eea8:	3601      	adds	r6, #1
 800eeaa:	4294      	cmp	r4, r2
 800eeac:	f300 80aa 	bgt.w	800f004 <__kernel_rem_pio2f+0x270>
 800eeb0:	2f00      	cmp	r7, #0
 800eeb2:	dd05      	ble.n	800eec0 <__kernel_rem_pio2f+0x12c>
 800eeb4:	2f01      	cmp	r7, #1
 800eeb6:	f000 80b6 	beq.w	800f026 <__kernel_rem_pio2f+0x292>
 800eeba:	2f02      	cmp	r7, #2
 800eebc:	f000 80bd 	beq.w	800f03a <__kernel_rem_pio2f+0x2a6>
 800eec0:	2d02      	cmp	r5, #2
 800eec2:	d16a      	bne.n	800ef9a <__kernel_rem_pio2f+0x206>
 800eec4:	4649      	mov	r1, r9
 800eec6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800eeca:	f7f1 fe51 	bl	8000b70 <__aeabi_fsub>
 800eece:	4681      	mov	r9, r0
 800eed0:	f1ba 0f00 	cmp.w	sl, #0
 800eed4:	d061      	beq.n	800ef9a <__kernel_rem_pio2f+0x206>
 800eed6:	4639      	mov	r1, r7
 800eed8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800eedc:	f7ff fef0 	bl	800ecc0 <scalbnf>
 800eee0:	4601      	mov	r1, r0
 800eee2:	4648      	mov	r0, r9
 800eee4:	f7f1 fe44 	bl	8000b70 <__aeabi_fsub>
 800eee8:	4681      	mov	r9, r0
 800eeea:	e056      	b.n	800ef9a <__kernel_rem_pio2f+0x206>
 800eeec:	2400      	movs	r4, #0
 800eeee:	e768      	b.n	800edc2 <__kernel_rem_pio2f+0x2e>
 800eef0:	eb18 0f05 	cmn.w	r8, r5
 800eef4:	d407      	bmi.n	800ef06 <__kernel_rem_pio2f+0x172>
 800eef6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800eefa:	f7f1 feef 	bl	8000cdc <__aeabi_i2f>
 800eefe:	f846 0b04 	str.w	r0, [r6], #4
 800ef02:	3501      	adds	r5, #1
 800ef04:	e770      	b.n	800ede8 <__kernel_rem_pio2f+0x54>
 800ef06:	4658      	mov	r0, fp
 800ef08:	e7f9      	b.n	800eefe <__kernel_rem_pio2f+0x16a>
 800ef0a:	9307      	str	r3, [sp, #28]
 800ef0c:	9b05      	ldr	r3, [sp, #20]
 800ef0e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800ef12:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ef16:	f7f1 ff35 	bl	8000d84 <__aeabi_fmul>
 800ef1a:	4601      	mov	r1, r0
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f7f1 fe29 	bl	8000b74 <__addsf3>
 800ef22:	4606      	mov	r6, r0
 800ef24:	9b07      	ldr	r3, [sp, #28]
 800ef26:	f108 0801 	add.w	r8, r8, #1
 800ef2a:	9a03      	ldr	r2, [sp, #12]
 800ef2c:	4590      	cmp	r8, r2
 800ef2e:	ddec      	ble.n	800ef0a <__kernel_rem_pio2f+0x176>
 800ef30:	f84a 6b04 	str.w	r6, [sl], #4
 800ef34:	f109 0901 	add.w	r9, r9, #1
 800ef38:	3504      	adds	r5, #4
 800ef3a:	e761      	b.n	800ee00 <__kernel_rem_pio2f+0x6c>
 800ef3c:	46ab      	mov	fp, r5
 800ef3e:	461e      	mov	r6, r3
 800ef40:	f04f 0800 	mov.w	r8, #0
 800ef44:	e7f1      	b.n	800ef2a <__kernel_rem_pio2f+0x196>
 800ef46:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800ef4a:	4658      	mov	r0, fp
 800ef4c:	f7f1 ff1a 	bl	8000d84 <__aeabi_fmul>
 800ef50:	f7f2 f8f4 	bl	800113c <__aeabi_f2iz>
 800ef54:	f7f1 fec2 	bl	8000cdc <__aeabi_i2f>
 800ef58:	4649      	mov	r1, r9
 800ef5a:	9009      	str	r0, [sp, #36]	@ 0x24
 800ef5c:	f7f1 ff12 	bl	8000d84 <__aeabi_fmul>
 800ef60:	4601      	mov	r1, r0
 800ef62:	4658      	mov	r0, fp
 800ef64:	f7f1 fe04 	bl	8000b70 <__aeabi_fsub>
 800ef68:	f7f2 f8e8 	bl	800113c <__aeabi_f2iz>
 800ef6c:	3d01      	subs	r5, #1
 800ef6e:	f846 0b04 	str.w	r0, [r6], #4
 800ef72:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800ef76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef78:	f7f1 fdfc 	bl	8000b74 <__addsf3>
 800ef7c:	4683      	mov	fp, r0
 800ef7e:	e75a      	b.n	800ee36 <__kernel_rem_pio2f+0xa2>
 800ef80:	d105      	bne.n	800ef8e <__kernel_rem_pio2f+0x1fa>
 800ef82:	1e63      	subs	r3, r4, #1
 800ef84:	aa0a      	add	r2, sp, #40	@ 0x28
 800ef86:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800ef8a:	11ed      	asrs	r5, r5, #7
 800ef8c:	e788      	b.n	800eea0 <__kernel_rem_pio2f+0x10c>
 800ef8e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ef92:	f7f2 f8a9 	bl	80010e8 <__aeabi_fcmpge>
 800ef96:	4605      	mov	r5, r0
 800ef98:	bb90      	cbnz	r0, 800f000 <__kernel_rem_pio2f+0x26c>
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	4648      	mov	r0, r9
 800ef9e:	f7f2 f885 	bl	80010ac <__aeabi_fcmpeq>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	f000 8090 	beq.w	800f0c8 <__kernel_rem_pio2f+0x334>
 800efa8:	2200      	movs	r2, #0
 800efaa:	1e63      	subs	r3, r4, #1
 800efac:	9901      	ldr	r1, [sp, #4]
 800efae:	428b      	cmp	r3, r1
 800efb0:	da4a      	bge.n	800f048 <__kernel_rem_pio2f+0x2b4>
 800efb2:	2a00      	cmp	r2, #0
 800efb4:	d076      	beq.n	800f0a4 <__kernel_rem_pio2f+0x310>
 800efb6:	3c01      	subs	r4, #1
 800efb8:	ab0a      	add	r3, sp, #40	@ 0x28
 800efba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800efbe:	3f08      	subs	r7, #8
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d0f8      	beq.n	800efb6 <__kernel_rem_pio2f+0x222>
 800efc4:	4639      	mov	r1, r7
 800efc6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800efca:	f7ff fe79 	bl	800ecc0 <scalbnf>
 800efce:	46a2      	mov	sl, r4
 800efd0:	4607      	mov	r7, r0
 800efd2:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800efd6:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800efda:	f1ba 0f00 	cmp.w	sl, #0
 800efde:	f280 80a1 	bge.w	800f124 <__kernel_rem_pio2f+0x390>
 800efe2:	4627      	mov	r7, r4
 800efe4:	2200      	movs	r2, #0
 800efe6:	2f00      	cmp	r7, #0
 800efe8:	f2c0 80cb 	blt.w	800f182 <__kernel_rem_pio2f+0x3ee>
 800efec:	a946      	add	r1, sp, #280	@ 0x118
 800efee:	4690      	mov	r8, r2
 800eff0:	f04f 0a00 	mov.w	sl, #0
 800eff4:	4b18      	ldr	r3, [pc, #96]	@ (800f058 <__kernel_rem_pio2f+0x2c4>)
 800eff6:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800effa:	eba4 0907 	sub.w	r9, r4, r7
 800effe:	e0b4      	b.n	800f16a <__kernel_rem_pio2f+0x3d6>
 800f000:	2502      	movs	r5, #2
 800f002:	e74f      	b.n	800eea4 <__kernel_rem_pio2f+0x110>
 800f004:	f858 3b04 	ldr.w	r3, [r8], #4
 800f008:	f1ba 0f00 	cmp.w	sl, #0
 800f00c:	d108      	bne.n	800f020 <__kernel_rem_pio2f+0x28c>
 800f00e:	b123      	cbz	r3, 800f01a <__kernel_rem_pio2f+0x286>
 800f010:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800f014:	f848 3c04 	str.w	r3, [r8, #-4]
 800f018:	2301      	movs	r3, #1
 800f01a:	469a      	mov	sl, r3
 800f01c:	3201      	adds	r2, #1
 800f01e:	e744      	b.n	800eeaa <__kernel_rem_pio2f+0x116>
 800f020:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800f024:	e7f6      	b.n	800f014 <__kernel_rem_pio2f+0x280>
 800f026:	1e62      	subs	r2, r4, #1
 800f028:	ab0a      	add	r3, sp, #40	@ 0x28
 800f02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f032:	a90a      	add	r1, sp, #40	@ 0x28
 800f034:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f038:	e742      	b.n	800eec0 <__kernel_rem_pio2f+0x12c>
 800f03a:	1e62      	subs	r2, r4, #1
 800f03c:	ab0a      	add	r3, sp, #40	@ 0x28
 800f03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f046:	e7f4      	b.n	800f032 <__kernel_rem_pio2f+0x29e>
 800f048:	a90a      	add	r1, sp, #40	@ 0x28
 800f04a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f04e:	3b01      	subs	r3, #1
 800f050:	430a      	orrs	r2, r1
 800f052:	e7ab      	b.n	800efac <__kernel_rem_pio2f+0x218>
 800f054:	0800fd90 	.word	0x0800fd90
 800f058:	0800fd64 	.word	0x0800fd64
 800f05c:	3301      	adds	r3, #1
 800f05e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f062:	2900      	cmp	r1, #0
 800f064:	d0fa      	beq.n	800f05c <__kernel_rem_pio2f+0x2c8>
 800f066:	9a04      	ldr	r2, [sp, #16]
 800f068:	a91e      	add	r1, sp, #120	@ 0x78
 800f06a:	18a2      	adds	r2, r4, r2
 800f06c:	1c66      	adds	r6, r4, #1
 800f06e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800f072:	441c      	add	r4, r3
 800f074:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800f078:	42b4      	cmp	r4, r6
 800f07a:	f6ff aecf 	blt.w	800ee1c <__kernel_rem_pio2f+0x88>
 800f07e:	9b07      	ldr	r3, [sp, #28]
 800f080:	46ab      	mov	fp, r5
 800f082:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f086:	f7f1 fe29 	bl	8000cdc <__aeabi_i2f>
 800f08a:	f04f 0a00 	mov.w	sl, #0
 800f08e:	f04f 0800 	mov.w	r8, #0
 800f092:	6028      	str	r0, [r5, #0]
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	459a      	cmp	sl, r3
 800f098:	dd07      	ble.n	800f0aa <__kernel_rem_pio2f+0x316>
 800f09a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800f09e:	3504      	adds	r5, #4
 800f0a0:	3601      	adds	r6, #1
 800f0a2:	e7e9      	b.n	800f078 <__kernel_rem_pio2f+0x2e4>
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	9a08      	ldr	r2, [sp, #32]
 800f0a8:	e7d9      	b.n	800f05e <__kernel_rem_pio2f+0x2ca>
 800f0aa:	9b05      	ldr	r3, [sp, #20]
 800f0ac:	f85b 0904 	ldr.w	r0, [fp], #-4
 800f0b0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f0b4:	f7f1 fe66 	bl	8000d84 <__aeabi_fmul>
 800f0b8:	4601      	mov	r1, r0
 800f0ba:	4640      	mov	r0, r8
 800f0bc:	f7f1 fd5a 	bl	8000b74 <__addsf3>
 800f0c0:	f10a 0a01 	add.w	sl, sl, #1
 800f0c4:	4680      	mov	r8, r0
 800f0c6:	e7e5      	b.n	800f094 <__kernel_rem_pio2f+0x300>
 800f0c8:	9b06      	ldr	r3, [sp, #24]
 800f0ca:	9a02      	ldr	r2, [sp, #8]
 800f0cc:	4648      	mov	r0, r9
 800f0ce:	1a99      	subs	r1, r3, r2
 800f0d0:	f7ff fdf6 	bl	800ecc0 <scalbnf>
 800f0d4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800f0d8:	4680      	mov	r8, r0
 800f0da:	f7f2 f805 	bl	80010e8 <__aeabi_fcmpge>
 800f0de:	b1f8      	cbz	r0, 800f120 <__kernel_rem_pio2f+0x38c>
 800f0e0:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800f0e4:	4640      	mov	r0, r8
 800f0e6:	f7f1 fe4d 	bl	8000d84 <__aeabi_fmul>
 800f0ea:	f7f2 f827 	bl	800113c <__aeabi_f2iz>
 800f0ee:	f7f1 fdf5 	bl	8000cdc <__aeabi_i2f>
 800f0f2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800f0f6:	4681      	mov	r9, r0
 800f0f8:	f7f1 fe44 	bl	8000d84 <__aeabi_fmul>
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	4640      	mov	r0, r8
 800f100:	f7f1 fd36 	bl	8000b70 <__aeabi_fsub>
 800f104:	f7f2 f81a 	bl	800113c <__aeabi_f2iz>
 800f108:	ab0a      	add	r3, sp, #40	@ 0x28
 800f10a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f10e:	4648      	mov	r0, r9
 800f110:	3401      	adds	r4, #1
 800f112:	3708      	adds	r7, #8
 800f114:	f7f2 f812 	bl	800113c <__aeabi_f2iz>
 800f118:	ab0a      	add	r3, sp, #40	@ 0x28
 800f11a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f11e:	e751      	b.n	800efc4 <__kernel_rem_pio2f+0x230>
 800f120:	4640      	mov	r0, r8
 800f122:	e7f7      	b.n	800f114 <__kernel_rem_pio2f+0x380>
 800f124:	ab0a      	add	r3, sp, #40	@ 0x28
 800f126:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f12a:	f7f1 fdd7 	bl	8000cdc <__aeabi_i2f>
 800f12e:	4639      	mov	r1, r7
 800f130:	f7f1 fe28 	bl	8000d84 <__aeabi_fmul>
 800f134:	4649      	mov	r1, r9
 800f136:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800f13a:	4638      	mov	r0, r7
 800f13c:	f7f1 fe22 	bl	8000d84 <__aeabi_fmul>
 800f140:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f144:	4607      	mov	r7, r0
 800f146:	e748      	b.n	800efda <__kernel_rem_pio2f+0x246>
 800f148:	f853 0b04 	ldr.w	r0, [r3], #4
 800f14c:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f150:	9203      	str	r2, [sp, #12]
 800f152:	9302      	str	r3, [sp, #8]
 800f154:	f7f1 fe16 	bl	8000d84 <__aeabi_fmul>
 800f158:	4601      	mov	r1, r0
 800f15a:	4640      	mov	r0, r8
 800f15c:	f7f1 fd0a 	bl	8000b74 <__addsf3>
 800f160:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f164:	4680      	mov	r8, r0
 800f166:	f10a 0a01 	add.w	sl, sl, #1
 800f16a:	9901      	ldr	r1, [sp, #4]
 800f16c:	458a      	cmp	sl, r1
 800f16e:	dc01      	bgt.n	800f174 <__kernel_rem_pio2f+0x3e0>
 800f170:	45ca      	cmp	sl, r9
 800f172:	dde9      	ble.n	800f148 <__kernel_rem_pio2f+0x3b4>
 800f174:	ab5a      	add	r3, sp, #360	@ 0x168
 800f176:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800f17a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800f17e:	3f01      	subs	r7, #1
 800f180:	e731      	b.n	800efe6 <__kernel_rem_pio2f+0x252>
 800f182:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800f184:	2b02      	cmp	r3, #2
 800f186:	dc07      	bgt.n	800f198 <__kernel_rem_pio2f+0x404>
 800f188:	2b00      	cmp	r3, #0
 800f18a:	dc4e      	bgt.n	800f22a <__kernel_rem_pio2f+0x496>
 800f18c:	d02e      	beq.n	800f1ec <__kernel_rem_pio2f+0x458>
 800f18e:	f006 0007 	and.w	r0, r6, #7
 800f192:	b05b      	add	sp, #364	@ 0x16c
 800f194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f198:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	d1f7      	bne.n	800f18e <__kernel_rem_pio2f+0x3fa>
 800f19e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800f1a2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800f1a6:	46b8      	mov	r8, r7
 800f1a8:	46a2      	mov	sl, r4
 800f1aa:	f1ba 0f00 	cmp.w	sl, #0
 800f1ae:	dc49      	bgt.n	800f244 <__kernel_rem_pio2f+0x4b0>
 800f1b0:	46a1      	mov	r9, r4
 800f1b2:	f1b9 0f01 	cmp.w	r9, #1
 800f1b6:	dc60      	bgt.n	800f27a <__kernel_rem_pio2f+0x4e6>
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	2c01      	cmp	r4, #1
 800f1bc:	dc76      	bgt.n	800f2ac <__kernel_rem_pio2f+0x518>
 800f1be:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800f1c0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800f1c2:	2d00      	cmp	r5, #0
 800f1c4:	d178      	bne.n	800f2b8 <__kernel_rem_pio2f+0x524>
 800f1c6:	9900      	ldr	r1, [sp, #0]
 800f1c8:	600a      	str	r2, [r1, #0]
 800f1ca:	460a      	mov	r2, r1
 800f1cc:	604b      	str	r3, [r1, #4]
 800f1ce:	6090      	str	r0, [r2, #8]
 800f1d0:	e7dd      	b.n	800f18e <__kernel_rem_pio2f+0x3fa>
 800f1d2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800f1d6:	f7f1 fccd 	bl	8000b74 <__addsf3>
 800f1da:	3c01      	subs	r4, #1
 800f1dc:	2c00      	cmp	r4, #0
 800f1de:	daf8      	bge.n	800f1d2 <__kernel_rem_pio2f+0x43e>
 800f1e0:	b10d      	cbz	r5, 800f1e6 <__kernel_rem_pio2f+0x452>
 800f1e2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f1e6:	9b00      	ldr	r3, [sp, #0]
 800f1e8:	6018      	str	r0, [r3, #0]
 800f1ea:	e7d0      	b.n	800f18e <__kernel_rem_pio2f+0x3fa>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	af32      	add	r7, sp, #200	@ 0xc8
 800f1f0:	e7f4      	b.n	800f1dc <__kernel_rem_pio2f+0x448>
 800f1f2:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800f1f6:	f7f1 fcbd 	bl	8000b74 <__addsf3>
 800f1fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1fe:	f1b8 0f00 	cmp.w	r8, #0
 800f202:	daf6      	bge.n	800f1f2 <__kernel_rem_pio2f+0x45e>
 800f204:	b1ad      	cbz	r5, 800f232 <__kernel_rem_pio2f+0x49e>
 800f206:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800f20a:	9a00      	ldr	r2, [sp, #0]
 800f20c:	4601      	mov	r1, r0
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800f212:	f7f1 fcad 	bl	8000b70 <__aeabi_fsub>
 800f216:	f04f 0801 	mov.w	r8, #1
 800f21a:	4544      	cmp	r4, r8
 800f21c:	da0b      	bge.n	800f236 <__kernel_rem_pio2f+0x4a2>
 800f21e:	b10d      	cbz	r5, 800f224 <__kernel_rem_pio2f+0x490>
 800f220:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f224:	9b00      	ldr	r3, [sp, #0]
 800f226:	6058      	str	r0, [r3, #4]
 800f228:	e7b1      	b.n	800f18e <__kernel_rem_pio2f+0x3fa>
 800f22a:	46a0      	mov	r8, r4
 800f22c:	2000      	movs	r0, #0
 800f22e:	af32      	add	r7, sp, #200	@ 0xc8
 800f230:	e7e5      	b.n	800f1fe <__kernel_rem_pio2f+0x46a>
 800f232:	4603      	mov	r3, r0
 800f234:	e7e9      	b.n	800f20a <__kernel_rem_pio2f+0x476>
 800f236:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f23a:	f7f1 fc9b 	bl	8000b74 <__addsf3>
 800f23e:	f108 0801 	add.w	r8, r8, #1
 800f242:	e7ea      	b.n	800f21a <__kernel_rem_pio2f+0x486>
 800f244:	f8d8 3000 	ldr.w	r3, [r8]
 800f248:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	9302      	str	r3, [sp, #8]
 800f252:	9201      	str	r2, [sp, #4]
 800f254:	f7f1 fc8e 	bl	8000b74 <__addsf3>
 800f258:	9a01      	ldr	r2, [sp, #4]
 800f25a:	4601      	mov	r1, r0
 800f25c:	4681      	mov	r9, r0
 800f25e:	4610      	mov	r0, r2
 800f260:	f7f1 fc86 	bl	8000b70 <__aeabi_fsub>
 800f264:	9b02      	ldr	r3, [sp, #8]
 800f266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f26a:	4619      	mov	r1, r3
 800f26c:	f7f1 fc82 	bl	8000b74 <__addsf3>
 800f270:	f848 0904 	str.w	r0, [r8], #-4
 800f274:	f8c8 9000 	str.w	r9, [r8]
 800f278:	e797      	b.n	800f1aa <__kernel_rem_pio2f+0x416>
 800f27a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f27e:	f8d7 a000 	ldr.w	sl, [r7]
 800f282:	4618      	mov	r0, r3
 800f284:	4651      	mov	r1, sl
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	f7f1 fc74 	bl	8000b74 <__addsf3>
 800f28c:	9b01      	ldr	r3, [sp, #4]
 800f28e:	4601      	mov	r1, r0
 800f290:	4680      	mov	r8, r0
 800f292:	4618      	mov	r0, r3
 800f294:	f7f1 fc6c 	bl	8000b70 <__aeabi_fsub>
 800f298:	4651      	mov	r1, sl
 800f29a:	f7f1 fc6b 	bl	8000b74 <__addsf3>
 800f29e:	f847 0904 	str.w	r0, [r7], #-4
 800f2a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f2a6:	f8c7 8000 	str.w	r8, [r7]
 800f2aa:	e782      	b.n	800f1b2 <__kernel_rem_pio2f+0x41e>
 800f2ac:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800f2b0:	f7f1 fc60 	bl	8000b74 <__addsf3>
 800f2b4:	3c01      	subs	r4, #1
 800f2b6:	e780      	b.n	800f1ba <__kernel_rem_pio2f+0x426>
 800f2b8:	9900      	ldr	r1, [sp, #0]
 800f2ba:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800f2be:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f2c2:	600a      	str	r2, [r1, #0]
 800f2c4:	604b      	str	r3, [r1, #4]
 800f2c6:	460a      	mov	r2, r1
 800f2c8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800f2cc:	e77f      	b.n	800f1ce <__kernel_rem_pio2f+0x43a>
 800f2ce:	bf00      	nop

0800f2d0 <floorf>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800f2d6:	3d7f      	subs	r5, #127	@ 0x7f
 800f2d8:	2d16      	cmp	r5, #22
 800f2da:	4601      	mov	r1, r0
 800f2dc:	4604      	mov	r4, r0
 800f2de:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800f2e2:	dc26      	bgt.n	800f332 <floorf+0x62>
 800f2e4:	2d00      	cmp	r5, #0
 800f2e6:	da0f      	bge.n	800f308 <floorf+0x38>
 800f2e8:	4917      	ldr	r1, [pc, #92]	@ (800f348 <floorf+0x78>)
 800f2ea:	f7f1 fc43 	bl	8000b74 <__addsf3>
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	f7f1 ff04 	bl	80010fc <__aeabi_fcmpgt>
 800f2f4:	b130      	cbz	r0, 800f304 <floorf+0x34>
 800f2f6:	2c00      	cmp	r4, #0
 800f2f8:	da23      	bge.n	800f342 <floorf+0x72>
 800f2fa:	2e00      	cmp	r6, #0
 800f2fc:	4c13      	ldr	r4, [pc, #76]	@ (800f34c <floorf+0x7c>)
 800f2fe:	bf08      	it	eq
 800f300:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f304:	4621      	mov	r1, r4
 800f306:	e01a      	b.n	800f33e <floorf+0x6e>
 800f308:	4e11      	ldr	r6, [pc, #68]	@ (800f350 <floorf+0x80>)
 800f30a:	412e      	asrs	r6, r5
 800f30c:	4230      	tst	r0, r6
 800f30e:	d016      	beq.n	800f33e <floorf+0x6e>
 800f310:	490d      	ldr	r1, [pc, #52]	@ (800f348 <floorf+0x78>)
 800f312:	f7f1 fc2f 	bl	8000b74 <__addsf3>
 800f316:	2100      	movs	r1, #0
 800f318:	f7f1 fef0 	bl	80010fc <__aeabi_fcmpgt>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d0f1      	beq.n	800f304 <floorf+0x34>
 800f320:	2c00      	cmp	r4, #0
 800f322:	bfbe      	ittt	lt
 800f324:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800f328:	412b      	asrlt	r3, r5
 800f32a:	18e4      	addlt	r4, r4, r3
 800f32c:	ea24 0406 	bic.w	r4, r4, r6
 800f330:	e7e8      	b.n	800f304 <floorf+0x34>
 800f332:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800f336:	d302      	bcc.n	800f33e <floorf+0x6e>
 800f338:	f7f1 fc1c 	bl	8000b74 <__addsf3>
 800f33c:	4601      	mov	r1, r0
 800f33e:	4608      	mov	r0, r1
 800f340:	bd70      	pop	{r4, r5, r6, pc}
 800f342:	2400      	movs	r4, #0
 800f344:	e7de      	b.n	800f304 <floorf+0x34>
 800f346:	bf00      	nop
 800f348:	7149f2ca 	.word	0x7149f2ca
 800f34c:	bf800000 	.word	0xbf800000
 800f350:	007fffff 	.word	0x007fffff

0800f354 <_init>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	bf00      	nop
 800f358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f35a:	bc08      	pop	{r3}
 800f35c:	469e      	mov	lr, r3
 800f35e:	4770      	bx	lr

0800f360 <_fini>:
 800f360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f362:	bf00      	nop
 800f364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f366:	bc08      	pop	{r3}
 800f368:	469e      	mov	lr, r3
 800f36a:	4770      	bx	lr
