cscope 16 $HOME\Desktop\Easton_Quator\2_firmware" -q 0000022522 0002427100
	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/inc/filter.h

1 #i‚de‡
__FILTER_H


2 
	#__FILTER_H


	)

3 
	~<°döt.h
>

18 
	#IIR_SHIFT
 8

	)

20 
öt16_t
 
iúLPFûãrSögÀ
(
öt32_t
 
ö
, i¡32_à
©ãnu©i⁄
, i¡32_t* 
fût
);

24 
	ma1
;

25 
	ma2
;

26 
	mb0
;

27 
	mb1
;

28 
	mb2
;

29 
	mdñay_ñemít_1
;

30 
	mdñay_ñemít_2
;

31 } 
	tÕf2pD©a
;

33 
Õf2pInô
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e_‰eq
, 
cutoff_‰eq
);

34 
Õf2pSëCutoffFªq
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e_‰eq
, 
cutoff_‰eq
);

35 
Õf2pAµly
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e
);

36 
Õf2pRe£t
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e
);

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/inc/sensor.h

8 #i‚de‡
__SENSOR_H


9 
	#__SENSOR_H


	)

10 
	~<°döt.h
>

12 
	#VAR_THREHOLD_ZERO
 30000

	)

13 
	#ACC_SCALE_NUM
 200

	)

15 
	s°Axis
{

16 
	mx
;

17 
	my
;

18 
	mz
;

21 
	s°Gyro
{

22 
öt16_t
 
	mgx
;

23 
öt16_t
 
	mgy
;

24 
öt16_t
 
	mgz
;

26 
	s°Acc
{

27 
öt16_t
 
	max
;

28 
öt16_t
 
	may
;

29 
öt16_t
 
	maz
;

32 
	s°Sís‹Raw
{

33 
°Acc
 
	mAccRaw
;

34 
°Gyro
 
	mGyroRaw
;

36 
	s°Sís‹
{

37 
°Axis
 
	mAcc
;

38 
°Axis
 
	mGyro
;

40 
	s°Qu©î


42 
	mq0
;

43 
	mq1
;

44 
	mq2
;

45 
	mq3
;

48 
	s°Sètus


50 
	mpôch
;

51 
	mrﬁl
;

52 
	myaw
;

57 
°Sís‹Raw
 
g°SíS‹Raw
;

58 
övSqπ
(
x
);

59 
uöt8_t
 
imu_GëGyroBüs
(
°Gyro
 
GyroRaw
);

60 
GyroBuf„rInô
();

61 
£ns‹sTask
();

62 
Inô_AccGryoFûãr
();

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/src/filter.c

1 
	~<m©h.h
>

2 
	~<°dlib.h
>

3 
	~"fûãr.h
"

18 
	#M_PI_F
 ()3.14159265

	)

23 
öt16_t
 
	$iúLPFûãrSögÀ
(
öt32_t
 
ö
, i¡32_à
©ãnu©i⁄
, i¡32_t* 
fût
)

25 
öt32_t
 
öSˇÀd
;

26 
öt32_t
 
fûâmp
 = *
fût
;

27 
öt16_t
 
out
;

29 i‡(
©ãnu©i⁄
 > (1<<
IIR_SHIFT
))

31 
©ãnu©i⁄
 = (1<<
IIR_SHIFT
);

33 i‡(
©ãnu©i⁄
 < 1)

35 
©ãnu©i⁄
 = 1;

39 
öSˇÀd
 = 
ö
 << 
IIR_SHIFT
;

41 
fûâmp
 = fûâm∞+ (((
öSˇÀd
-fûâmpË>> 
IIR_SHIFT
Ë* 
©ãnu©i⁄
);

43 
out
 = (
fûâmp
 >> 8Ë+ ((fûâm∞& (1 << (
IIR_SHIFT
 - 1))) >> (IIR_SHIFT - 1));

44 *
fût
 = 
fûâmp
;

46  
out
;

47 
	}
}

52 
	$Õf2pInô
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e_‰eq
, 
cutoff_‰eq
)

54 i‡(
ÕfD©a
 =
NULL
 || 
cutoff_‰eq
 <= 0.0f)

59 
	`Õf2pSëCutoffFªq
(
ÕfD©a
, 
ßm∂e_‰eq
, 
cutoff_‰eq
);

60 
	}
}

65 
	$Õf2pSëCutoffFªq
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e_‰eq
, 
cutoff_‰eq
)

67 
‰
 = 
ßm∂e_‰eq
/
cutoff_‰eq
;

68 
ohm
 = 
	`ènf
(
M_PI_F
/
‰
);

69 
c
 = 1.0f+2.0f*
	`cosf
(
M_PI_F
/4.0f)*
ohm
+ohm*ohm;

70 
ÕfD©a
->
b0
 = 
ohm
*ohm/
c
;

71 
ÕfD©a
->
b1
 = 2.0f*ÕfD©a->
b0
;

72 
ÕfD©a
->
b2
 =ÜpfD©a->
b0
;

73 
ÕfD©a
->
a1
 = 2.0f*(
ohm
*ohm-1.0f)/
c
;

74 
ÕfD©a
->
a2
 = (1.0f-2.0f*
	`cosf
(
M_PI_F
/4.0f)*
ohm
+ohm*ohm)/
c
;

75 
ÕfD©a
->
dñay_ñemít_1
 = 0.0f;

76 
ÕfD©a
->
dñay_ñemít_2
 = 0.0f;

77 
	}
}

79 
	$Õf2pAµly
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e
)

81 
dñay_ñemít_0
 = 
ßm∂e
 - 
ÕfD©a
->
dñay_ñemít_1
 *ÜpfD©a->
a1
 -ÜpfD©a->
dñay_ñemít_2
 *ÜpfD©a->
a2
;

82 i‡(!
	`isföôe
(
dñay_ñemít_0
))

85 
dñay_ñemít_0
 = 
ßm∂e
;

88 
ouçut
 = 
dñay_ñemít_0
 * 
ÕfD©a
->
b0
 +ÜpfD©a->
dñay_ñemít_1
 *ÜpfD©a->
b1
 +ÜpfD©a->
dñay_ñemít_2
 *ÜpfD©a->
b2
;

90 
ÕfD©a
->
dñay_ñemít_2
 =ÜpfD©a->
dñay_ñemít_1
;

91 
ÕfD©a
->
dñay_ñemít_1
 = 
dñay_ñemít_0
;

92  
ouçut
;

93 
	}
}

95 
	$Õf2pRe£t
(
Õf2pD©a
* 
ÕfD©a
, 
ßm∂e
)

97 
dvÆ
 = 
ßm∂e
 / (
ÕfD©a
->
b0
 +ÜpfD©a->
b1
 +ÜpfD©a->
b2
);

98 
ÕfD©a
->
dñay_ñemít_1
 = 
dvÆ
;

99 
ÕfD©a
->
dñay_ñemít_2
 = 
dvÆ
;

100  
	`Õf2pAµly
(
ÕfD©a
, 
ßm∂e
);

101 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/src/sensor.c

8 
	~"£ns‹.h
"

9 
	~"qmi8658.h
"

10 
	~"qmc5883.h
"

11 
	~"•l06.h
"

12 
	~"m©h.h
"

13 
	~"ußπ.h
"

14 
	~"fûãr.h
"

15 
	~"myiic.h
"

17 
	#LOOPBUFFER
 1024

	)

20 
°Axis
 
	gg°GyroBüs
;

21 
°Sís‹Raw
 
	gg°SíS‹Raw
;

22 
°Axis
 
	gg°GyroV¨
;

23 
°Axis
 
	gg°GyroMón
;

24 
°Sís‹
 
	gg°Sís‹
;

25 
°Qu©î
 
	gg°Qu©‹
;

26 
	ggAccSˇÀ
 = 1;

27 
°GyroBüsBuf„r
 
	gg°GyroBüsBuf„r
;

28 
°Sètus
 
	gg°Sètus
;

29 
uöt8_t
 
	ggCÆibî©i⁄
 = 0;

30 
	gaccSˇÀCÆSum
 = 0;

33 
	grM©
[3][3];

34 
°Axis
 
	gg°I¡EºAxis
;

35 
	ggKp
 = 0.4;

36 
	ggKi
 = 0.001;

37 
	ggDñèT
 = 0.004;

38 
	gq0
 = 1.0f;

39 
	gq1
 = 0.0f;

40 
	gq2
 = 0.0f;

41 
	gq3
 = 0.0f;

46 
	#GYRO_LPF_CUTOFF_FREQ
 80

	)

47 
	#ACCEL_LPF_CUTOFF_FREQ
 30

	)

48 
Õf2pD©a
 
	gaccLpf
[3];

49 
Õf2pD©a
 
	ggyroLpf
[3];

52 
	s°GyroBüsBuf„r


54 
uöt8_t
 
	mFûÀd
;

55 
uöt8_t
 
	mFödBüs
;

56 
°Gyro
 * 
	mhódî
;

57 
°Gyro
 
	mbuf„r
[
LOOPBUFFER
];

62 
	$övSqπ
(
x
)

64 
hÆfx
 = 0.5‡* 
x
;

65 
y
 = 
x
;

66 
i
 = *(*)&
y
;

67 
i
 = 0x5f3759df - (i>>1);

68 
y
 = *(*)&
i
;

69 
y
 = y * (1.5‡- (
hÆfx
 * y * y));

70  
y
;

71 
	}
}

73 
	$Inô_AccGryoFûãr
()

75 
uöt8_t
 
i
 = 0;

76 
i
 = 0; i < 3; i++)

78 
	`Õf2pInô
(&
gyroLpf
[
i
], 1000, 
GYRO_LPF_CUTOFF_FREQ
);

79 
	`Õf2pInô
(&
accLpf
[
i
], 1000, 
ACCEL_LPF_CUTOFF_FREQ
);

81 
	}
}

83 
	$GyroBuf„rInô
()

85 
g°GyroBüsBuf„r
.
FûÀd
 = 0;

86 
g°GyroBüsBuf„r
.
hódî
 = g°GyroBüsBuf„r.
buf„r
;

87 
	}
}

89 
uöt8_t
 
	$imu_FûlGyroBuf„r
(
°Gyro
 
GyroRaw
)

92 
g°GyroBüsBuf„r
.
hódî
->
gx
 = 
GyroRaw
.gx;

93 
g°GyroBüsBuf„r
.
hódî
->
gy
 = 
GyroRaw
.gy;

94 
g°GyroBüsBuf„r
.
hódî
->
gz
 = 
GyroRaw
.gz;

95 
g°GyroBüsBuf„r
.
hódî
++;

98 if(
g°GyroBüsBuf„r
.
hódî
 >&g°GyroBüsBuf„r.
buf„r
[
LOOPBUFFER
])

100 
g°GyroBüsBuf„r
.
FûÀd
 = 1;

101 
g°GyroBüsBuf„r
.
hódî
 = g°GyroBüsBuf„r.
buf„r
;

103  
g°GyroBüsBuf„r
.
FûÀd
;

104 
	}
}

106 
uöt8_t
 
	$imu_GëGyroBüs
(
°Gyro
 
GyroRaw
)

109 
	`imu_FûlGyroBuf„r
(
GyroRaw
);

111 if(!
g°GyroBüsBuf„r
.
FödBüs
)

113 if(
g°GyroBüsBuf„r
.
FûÀd
)

115 sig√d 
gx
=0,
gy
=0,
gz
=0,
gx2
=0,
gy2
=0,
gz2
=0;

116 
i
=0;

117 
i
 = 0 ; i < 
LOOPBUFFER
 ; i++)

119 
gx
 +
g°GyroBüsBuf„r
.
buf„r
[
i
].gx;

120 
gy
 +
g°GyroBüsBuf„r
.
buf„r
[
i
].gy;

121 
gz
 +
g°GyroBüsBuf„r
.
buf„r
[
i
].gz;

123 
gx2
+=
g°GyroBüsBuf„r
.
buf„r
[
i
].
gx
 * gstGyroBiasBuffer.buffer[i].gx;

124 
gy2
+=
g°GyroBüsBuf„r
.
buf„r
[
i
].
gy
 * gstGyroBiasBuffer.buffer[i].gy;

125 
gz2
+=
g°GyroBüsBuf„r
.
buf„r
[
i
].
gz
 * gstGyroBiasBuffer.buffer[i].gz;

128 
g°GyroV¨
.
x
 = (
gx2
 - ( sig√d )(
gx
*gx)/
LOOPBUFFER
)/LOOPBUFFER;

129 
g°GyroV¨
.
y
 = (
gy2
 - ( sig√d )(
gy
*gy)/
LOOPBUFFER
)/LOOPBUFFER;

130 
g°GyroV¨
.
z
 = (
gz2
 - ( sig√d )(
gz
*gz)/
LOOPBUFFER
)/LOOPBUFFER;

132 
g°GyroMón
.
x
 = ()
gx
/
LOOPBUFFER
;

133 
g°GyroMón
.
y
 = ()
gy
/
LOOPBUFFER
;

134 
g°GyroMón
.
z
 = ()
gz
/
LOOPBUFFER
;

136 if(
g°GyroV¨
.
x
 < 
VAR_THREHOLD_ZERO
 && g°GyroV¨.
y
 < VAR_THREHOLD_ZERO && g°GyroV¨.
z
 < VAR_THREHOLD_ZERO)

139 
g°GyroBüs
.
x
 = 
g°GyroMón
.x;

140 
g°GyroBüs
.
y
 = 
g°GyroMón
.y;

141 
g°GyroBüs
.
z
 = 
g°GyroMón
.z;

142 
g°GyroBüsBuf„r
.
FödBüs
 = 1;

144 
g°GyroBüsBuf„r
.
FûÀd
 = 0;

148  
g°GyroBüsBuf„r
.
FödBüs
;

149 
	}
}

151 
	$≠∂yAxis3fLpf
(
Õf2pD©a
 *
d©a
, 
°Axis
 * 
ö
)

153 
ö
->
x
 = 
	`Õf2pAµly
(&
d©a
[0], in->x);

154 
ö
->
y
 = 
	`Õf2pAµly
(&
d©a
[1], in->y);

155 
ö
->
z
 = 
	`Õf2pAµly
(&
d©a
[2], in->z);

156 
	}
}

159 
	$£ns‹sTask
()

161 
˙t
=0;

162 
	`GyroBuf„rInô
();

163 
	`Inô_AccGryoFûãr
();

165 
	`QMI8658_Inô
();

166 
	`QMC5883_Inô
();

170 
	`QMI8658_d©aGë
();

172 
uöt8_t
 
uGyroBüsFound
 = 
	`imu_GëGyroBüs
(
g°SíS‹Raw
.
GyroRaw
);

174 if(
uGyroBüsFound
)

176 
uöt32_t
 
accSˇÀC¡
 = 0;

177 
accSˇÀCÆSum
 +
	`sqπf
(
	`powf
(
g°SíS‹Raw
.
AccRaw
.
ax
,2)+powf(g°SíS‹Raw.AccRaw.
ay
,2)+powf(g°SíS‹Raw.AccRaw.
az
,2));

178 
accSˇÀC¡
++;

179 if(
accSˇÀC¡
 >
ACC_SCALE_NUM
)

181 
gAccSˇÀ
 = 
accSˇÀCÆSum
 / 
ACC_SCALE_NUM
;

182 
accSˇÀC¡
 = 0;

183 
accSˇÀCÆSum
 = 0;

186 
g°Sís‹
.
Acc
.
x
 = -(
g°SíS‹Raw
.
AccRaw
.
ax
)*9.8/2048/
gAccSˇÀ
;

187 
g°Sís‹
.
Acc
.
y
 = (
g°SíS‹Raw
.
AccRaw
.
ay
)*9.8/2048/
gAccSˇÀ
;

188 
g°Sís‹
.
Acc
.
z
 = (
g°SíS‹Raw
.
AccRaw
.
az
)*9.8/2048/
gAccSˇÀ
;

189 
	`≠∂yAxis3fLpf
(
gyroLpf
, &
g°Sís‹
.
Acc
);

190 
g°Sís‹
.
Gyro
.
x
 = -(
g°SíS‹Raw
.
GyroRaw
.
gx
 - 
g°GyroMón
.x)*0.000027;

191 
g°Sís‹
.
Gyro
.
y
 = (
g°SíS‹Raw
.
GyroRaw
.
gy
 - 
g°GyroMón
.y)*0.000027;

192 
g°Sís‹
.
Gyro
.
z
 = (
g°SíS‹Raw
.
GyroRaw
.
gz
 - 
g°GyroMón
.z)*0.000027;

193 
	`≠∂yAxis3fLpf
(
gyroLpf
, &
g°Sís‹
.
Gyro
);

195 
n‹mÆize
=0;

196 
°Axis
 
°EºAxis
;

197 if((
g°Sís‹
.
Acc
.
x
!=0.0fË|| (g°Sís‹.Acc.
z
!=0.0f) || (gstSensor.Acc.z!=0.0f))

199 
n‹mÆize
 = 
	`övSqπ
(
g°Sís‹
.
Acc
.
x
 * g°Sís‹.Acc.x + g°Sís‹.Acc.
y
 * g°Sís‹.Acc.y + g°Sís‹.Acc.
z
 * gstSensor.Acc.z);

200 
g°Sís‹
.
Acc
.
x
 *
n‹mÆize
;

201 
g°Sís‹
.
Acc
.
y
 *
n‹mÆize
;

202 
g°Sís‹
.
Acc
.
z
 *
n‹mÆize
;

204 
°EºAxis
.
x
 = 
g°Sís‹
.
Acc
.
y
 * 
rM©
[2][2] - g°Sís‹.Acc.
z
 *ÑMat[2][1];

205 
°EºAxis
.
y
 = 
g°Sís‹
.
Acc
.
z
 * 
rM©
[2][0] - g°Sís‹.Acc.
x
 *ÑMat[2][2];

206 
°EºAxis
.
z
 = 
g°Sís‹
.
Acc
.
x
 * 
rM©
[2][1] - g°Sís‹.Acc.
y
 *ÑMat[2][0];

208 
g°I¡EºAxis
.
x
 +
gKi
 * 
°EºAxis
.x * 
gDñèT
;

209 
g°I¡EºAxis
.
y
 +
gKi
 * 
°EºAxis
.y * 
gDñèT
;

210 
g°I¡EºAxis
.
z
 +
gKi
 * 
°EºAxis
.z * 
gDñèT
;

212 
g°Sís‹
.
Gyro
.
x
 +
gKp
 * 
°EºAxis
.x + 
g°I¡EºAxis
.x;

213 
g°Sís‹
.
Gyro
.
y
 +
gKp
 * 
°EºAxis
.y + 
g°I¡EºAxis
.y;

214 
g°Sís‹
.
Gyro
.
z
 +
gKp
 * 
°EºAxis
.z + 
g°I¡EºAxis
.z;

217 
q0La°
 = 
q0
;

218 
q1La°
 = 
q1
;

219 
q2La°
 = 
q2
;

220 
q3La°
 = 
q3
;

221 
q0
 +(-
q1La°
 * 
g°Sís‹
.
Gyro
.
x
 - 
q2La°
 * g°Sís‹.Gyro.
y
 - 
q3La°
 * g°Sís‹.Gyro.
z
Ë* 
gDñèT
/2;

222 
q1
 +–
q0La°
 * 
g°Sís‹
.
Gyro
.
x
 + 
q2La°
 * g°Sís‹.Gyro.
z
 - 
q3La°
 * g°Sís‹.Gyro.
y
Ë* 
gDñèT
/2;

223 
q2
 +–
q0La°
 * 
g°Sís‹
.
Gyro
.
y
 - 
q1La°
 * g°Sís‹.Gyro.
z
 + 
q3La°
 * g°Sís‹.Gyro.
x
Ë* 
gDñèT
/2;

224 
q3
 +–
q0La°
 * 
g°Sís‹
.
Gyro
.
z
 + 
q1La°
 * g°Sís‹.Gyro.
y
 - 
q2La°
 * g°Sís‹.Gyro.
x
Ë* 
gDñèT
/2;

226 
n‹mÆize
 = 
	`övSqπ
(
q0
 * q0 + 
q1
 * q1 + 
q2
 * q2 + 
q3
 * q3);

227 
q0
 *
n‹mÆize
;

228 
q1
 *
n‹mÆize
;

229 
q2
 *
n‹mÆize
;

230 
q3
 *
n‹mÆize
;

232 
rM©
[0][0] = 1.0‡- 2.0‡* 
q2
*q2 - 2.0‡* 
q3
*q3;

233 
rM©
[0][1] = 2.0‡* (
q1
*
q2
 + (-
q0
)*
q3
);

234 
rM©
[0][2] = 2.0‡* (
q1
*
q3
 - (-
q0
)*
q2
);

236 
rM©
[1][0] = 2.0‡* (
q1
*
q2
 - (-
q0
)*
q3
);

237 
rM©
[1][1] = 1.0‡- 2.0‡* 
q1
*q1 - 2.0‡* 
q3
*q3;

238 
rM©
[1][2] = 2.0‡* (
q2
*
q3
 + (-
q0
)*
q1
);

240 
rM©
[2][0] = 2.0‡* (
q1
*
q3
 + (-
q0
)*
q2
);

241 
rM©
[2][1] = 2.0‡* (
q2
*
q3
 - (-
q0
)*
q1
);

242 
rM©
[2][2] = 1.0‡- 2.0‡* 
q1
*q1 - 2.0‡* 
q2
*q2;

244 
g°Sètus
.
pôch
 = -
	`asöf
(
rM©
[2][0]) * 57.29578f;

245 
g°Sètus
.
rﬁl
 = 
	`©™2f
(
rM©
[2][1],ÑMat[2][2]) * 57.29578f;

246 
g°Sètus
.
yaw
 = 
	`©™2f
(
rM©
[1][0],ÑMat[0][0]) * 57.29578f;

250 
	`¥ötf
("%‡%‡%f\r\n",
g°Sètus
.
pôch
,g°Sètus.
rﬁl
,g°Sètus.
yaw
);

260 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/FreeRTOSConfig.h

30 #i‚de‡
FREERTOS_CONFIG_H


31 
	#FREERTOS_CONFIG_H


	)

50 #i‡
deföed
(
__ICCARM__
Ë|| deföed(
__CC_ARM
Ë|| deföed(
__GNUC__
)

51 
	~<°döt.h
>

52 
uöt32_t
 
Sy°emC‹eClock
;

53 
xP‹tSysTickH™dÀr
();

55 
	#c⁄figENABLE_FPU
 0

	)

56 
	#c⁄figENABLE_MPU
 0

	)

58 
	#c⁄figUSE_PREEMPTION
 1

	)

59 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 1

	)

60 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

61 
	#c⁄figUSE_IDLE_HOOK
 0

	)

62 
	#c⁄figUSE_TICK_HOOK
 0

	)

63 
	#c⁄figCPU_CLOCK_HZ
 ( 
Sy°emC‹eClock
 )

	)

64 
	#c⁄figTICK_RATE_HZ
 ((
TickTy≥_t
)1000)

	)

65 
	#c⁄figMAX_PRIORITIES
 ( 7 )

	)

66 
	#c⁄figMINIMAL_STACK_SIZE
 ((
uöt16_t
)128)

	)

67 
	#c⁄figTOTAL_HEAP_SIZE
 ((
size_t
)3072)

	)

68 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

69 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

70 
	#c⁄figUSE_MUTEXES
 1

	)

71 
	#c⁄figQUEUE_REGISTRY_SIZE
 8

	)

72 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

76 
	#c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
size_t


	)

80 
	#c⁄figUSE_CO_ROUTINES
 0

	)

81 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

85 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

86 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

87 
	#INCLUDE_vTaskDñëe
 1

	)

88 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

89 
	#INCLUDE_vTaskSu•íd
 1

	)

90 
	#INCLUDE_vTaskDñayU¡û
 0

	)

91 
	#INCLUDE_vTaskDñay
 1

	)

92 
	#INCLUDE_xTaskGëScheduÀrSèã
 1

	)

95 #ifde‡
__NVIC_PRIO_BITS


97 
	#c⁄figPRIO_BITS
 
__NVIC_PRIO_BITS


	)

99 
	#c⁄figPRIO_BITS
 4

	)

104 
	#c⁄figLIBRARY_LOWEST_INTERRUPT_PRIORITY
 15

	)

110 
	#c⁄figLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY
 5

	)

114 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 ( 
c⁄figLIBRARY_LOWEST_INTERRUPT_PRIORITY
 << (8 - 
c⁄figPRIO_BITS
Ë)

	)

117 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ( 
c⁄figLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY
 << (8 - 
c⁄figPRIO_BITS
Ë)

	)

122 
	#c⁄figASSERT
–
x
 ) i‡((xË=0Ë{
	`èskDISABLE_INTERRUPTS
();  ;; );}

	)

127 
	#vP‹tSVCH™dÀr
 
SVC_H™dÀr


	)

128 
	#xP‹tPídSVH™dÀr
 
PídSV_H™dÀr


	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/dma.h

21 #i‚de‡
__DMA_H__


22 
	#__DMA_H__


	)

24 #ifde‡
__˝lu•lus


29 
	~"maö.h
"

41 
MX_DMA_Inô
();

47 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/gpio.h

21 #i‚de‡
__GPIO_H__


22 
	#__GPIO_H__


	)

24 #ifde‡
__˝lu•lus


29 
	~"maö.h
"

39 
MX_GPIO_Inô
();

45 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/i2c.h

21 #i‚de‡
__I2C_H__


22 
	#__I2C_H__


	)

24 #ifde‡
__˝lu•lus


29 
	~"maö.h
"

35 
I2C_H™dÀTy≥Def
 
hi2c1
;

41 
MX_I2C1_Inô
();

47 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/main.h

22 #i‚de‡
__MAIN_H


23 
	#__MAIN_H


	)

25 #ifde‡
__˝lu•lus


30 
	~"°m32f1xx_hÆ.h
"

53 
Eº‹_H™dÀr
();

60 
	#IRQ_Pö
 
GPIO_PIN_13


	)

61 
	#IRQ_GPIO_P‹t
 
GPIOC


	)

62 
	#LED_Pö
 
GPIO_PIN_0


	)

63 
	#LED_GPIO_P‹t
 
GPIOA


	)

64 
	#M4_Pö
 
GPIO_PIN_1


	)

65 
	#M4_GPIO_P‹t
 
GPIOA


	)

66 
	#M3_Pö
 
GPIO_PIN_10


	)

67 
	#M3_GPIO_P‹t
 
GPIOB


	)

68 
	#CE_Pö
 
GPIO_PIN_12


	)

69 
	#CE_GPIO_P‹t
 
GPIOB


	)

70 
	#CSN_Pö
 
GPIO_PIN_8


	)

71 
	#CSN_GPIO_P‹t
 
GPIOA


	)

72 
	#M2_Pö
 
GPIO_PIN_6


	)

73 
	#M2_GPIO_P‹t
 
GPIOB


	)

74 
	#M1_Pö
 
GPIO_PIN_7


	)

75 
	#M1_GPIO_P‹t
 
GPIOB


	)

81 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/spi.h

21 #i‚de‡
__SPI_H__


22 
	#__SPI_H__


	)

24 #ifde‡
__˝lu•lus


29 
	~"maö.h
"

35 
SPI_H™dÀTy≥Def
 
h•i1
;

41 
MX_SPI1_Inô
();

47 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/stm32f1xx_hal_conf.h

21 #i‚de‡
__STM32F1xx_HAL_CONF_H


22 
	#__STM32F1xx_HAL_CONF_H


	)

24 #ifde‡
__˝lu•lus


36 
	#HAL_MODULE_ENABLED


	)

45 
	#HAL_DMA_MODULE_ENABLED


	)

48 
	#HAL_GPIO_MODULE_ENABLED


	)

49 
	#HAL_I2C_MODULE_ENABLED


	)

65 
	#HAL_SPI_MODULE_ENABLED


	)

68 
	#HAL_UART_MODULE_ENABLED


	)

72 
	#HAL_CORTEX_MODULE_ENABLED


	)

73 
	#HAL_DMA_MODULE_ENABLED


	)

74 
	#HAL_FLASH_MODULE_ENABLED


	)

75 
	#HAL_EXTI_MODULE_ENABLED


	)

76 
	#HAL_GPIO_MODULE_ENABLED


	)

77 
	#HAL_PWR_MODULE_ENABLED


	)

78 
	#HAL_RCC_MODULE_ENABLED


	)

86 #i‡!
deföed
 (
HSE_VALUE
)

87 
	#HSE_VALUE
 8000000U

	)

90 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

91 
	#HSE_STARTUP_TIMEOUT
 100U

	)

99 #i‡!
deföed
 (
HSI_VALUE
)

100 
	#HSI_VALUE
 8000000U

	)

106 #i‡!
deföed
 (
LSI_VALUE
)

107 
	#LSI_VALUE
 40000U

	)

109 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


110 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
. */

116 #i‡!
deföed
 (
LSE_VALUE
)

117 
	#LSE_VALUE
 32768U

	)

120 #i‡!
deföed
 (
LSE_STARTUP_TIMEOUT
)

121 
	#LSE_STARTUP_TIMEOUT
 5000U

	)

131 
	#VDD_VALUE
 3300U

	)

132 
	#TICK_INT_PRIORITY
 15U

	)

133 
	#USE_RTOS
 0U

	)

134 
	#PREFETCH_ENABLE
 1U

	)

136 
	#USE_HAL_ADC_REGISTER_CALLBACKS
 0U

	)

137 
	#USE_HAL_CAN_REGISTER_CALLBACKS
 0U

	)

138 
	#USE_HAL_CEC_REGISTER_CALLBACKS
 0U

	)

139 
	#USE_HAL_DAC_REGISTER_CALLBACKS
 0U

	)

140 
	#USE_HAL_ETH_REGISTER_CALLBACKS
 0U

	)

141 
	#USE_HAL_HCD_REGISTER_CALLBACKS
 0U

	)

142 
	#USE_HAL_I2C_REGISTER_CALLBACKS
 0U

	)

143 
	#USE_HAL_I2S_REGISTER_CALLBACKS
 0U

	)

144 
	#USE_HAL_MMC_REGISTER_CALLBACKS
 0U

	)

145 
	#USE_HAL_NAND_REGISTER_CALLBACKS
 0U

	)

146 
	#USE_HAL_NOR_REGISTER_CALLBACKS
 0U

	)

147 
	#USE_HAL_PCCARD_REGISTER_CALLBACKS
 0U

	)

148 
	#USE_HAL_PCD_REGISTER_CALLBACKS
 0U

	)

149 
	#USE_HAL_RTC_REGISTER_CALLBACKS
 0U

	)

150 
	#USE_HAL_SD_REGISTER_CALLBACKS
 0U

	)

151 
	#USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 0U

	)

152 
	#USE_HAL_IRDA_REGISTER_CALLBACKS
 0U

	)

153 
	#USE_HAL_SRAM_REGISTER_CALLBACKS
 0U

	)

154 
	#USE_HAL_SPI_REGISTER_CALLBACKS
 0U

	)

155 
	#USE_HAL_TIM_REGISTER_CALLBACKS
 0U

	)

156 
	#USE_HAL_UART_REGISTER_CALLBACKS
 0U

	)

157 
	#USE_HAL_USART_REGISTER_CALLBACKS
 0U

	)

158 
	#USE_HAL_WWDG_REGISTER_CALLBACKS
 0U

	)

172 
	#MAC_ADDR0
 2U

	)

173 
	#MAC_ADDR1
 0U

	)

174 
	#MAC_ADDR2
 0U

	)

175 
	#MAC_ADDR3
 0U

	)

176 
	#MAC_ADDR4
 0U

	)

177 
	#MAC_ADDR5
 0U

	)

180 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

181 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

182 
	#ETH_RXBUFNB
 8U

	)

183 
	#ETH_TXBUFNB
 4U

	)

188 
	#DP83848_PHY_ADDRESS
 0x01U

	)

190 
	#PHY_RESET_DELAY
 0x000000FFU

	)

192 
	#PHY_CONFIG_DELAY
 0x00000FFFU

	)

194 
	#PHY_READ_TO
 0x0000FFFFU

	)

195 
	#PHY_WRITE_TO
 0x0000FFFFU

	)

199 
	#PHY_BCR
 ((
uöt16_t
)0x00Ë

	)

200 
	#PHY_BSR
 ((
uöt16_t
)0x01Ë

	)

202 
	#PHY_RESET
 ((
uöt16_t
)0x8000Ë

	)

203 
	#PHY_LOOPBACK
 ((
uöt16_t
)0x4000Ë

	)

204 
	#PHY_FULLDUPLEX_100M
 ((
uöt16_t
)0x2100Ë

	)

205 
	#PHY_HALFDUPLEX_100M
 ((
uöt16_t
)0x2000Ë

	)

206 
	#PHY_FULLDUPLEX_10M
 ((
uöt16_t
)0x0100Ë

	)

207 
	#PHY_HALFDUPLEX_10M
 ((
uöt16_t
)0x0000Ë

	)

208 
	#PHY_AUTONEGOTIATION
 ((
uöt16_t
)0x1000Ë

	)

209 
	#PHY_RESTART_AUTONEGOTIATION
 ((
uöt16_t
)0x0200Ë

	)

210 
	#PHY_POWERDOWN
 ((
uöt16_t
)0x0800Ë

	)

211 
	#PHY_ISOLATE
 ((
uöt16_t
)0x0400Ë

	)

213 
	#PHY_AUTONEGO_COMPLETE
 ((
uöt16_t
)0x0020Ë

	)

214 
	#PHY_LINKED_STATUS
 ((
uöt16_t
)0x0004Ë

	)

215 
	#PHY_JABBER_DETECTION
 ((
uöt16_t
)0x0002Ë

	)

218 
	#PHY_SR
 ((
uöt16_t
)0x10UË

	)

220 
	#PHY_SPEED_STATUS
 ((
uöt16_t
)0x0002UË

	)

221 
	#PHY_DUPLEX_STATUS
 ((
uöt16_t
)0x0004UË

	)

230 
	#USE_SPI_CRC
 0U

	)

237 #ifde‡
HAL_RCC_MODULE_ENABLED


238 
	~"°m32f1xx_hÆ_rcc.h
"

241 #ifde‡
HAL_GPIO_MODULE_ENABLED


242 
	~"°m32f1xx_hÆ_gpio.h
"

245 #ifde‡
HAL_EXTI_MODULE_ENABLED


246 
	~"°m32f1xx_hÆ_exti.h
"

249 #ifde‡
HAL_DMA_MODULE_ENABLED


250 
	~"°m32f1xx_hÆ_dma.h
"

253 #ifde‡
HAL_ETH_MODULE_ENABLED


254 
	~"°m32f1xx_hÆ_ëh.h
"

257 #ifde‡
HAL_CAN_MODULE_ENABLED


258 
	~"°m32f1xx_hÆ_ˇn.h
"

261 #ifde‡
HAL_CAN_LEGACY_MODULE_ENABLED


262 
	~"Legacy/°m32f1xx_hÆ_ˇn_Àgacy.h
"

265 #ifde‡
HAL_CEC_MODULE_ENABLED


266 
	~"°m32f1xx_hÆ_˚c.h
"

269 #ifde‡
HAL_CORTEX_MODULE_ENABLED


270 
	~"°m32f1xx_hÆ_c‹ãx.h
"

273 #ifde‡
HAL_ADC_MODULE_ENABLED


274 
	~"°m32f1xx_hÆ_adc.h
"

277 #ifde‡
HAL_CRC_MODULE_ENABLED


278 
	~"°m32f1xx_hÆ_¸c.h
"

281 #ifde‡
HAL_DAC_MODULE_ENABLED


282 
	~"°m32f1xx_hÆ_dac.h
"

285 #ifde‡
HAL_FLASH_MODULE_ENABLED


286 
	~"°m32f1xx_hÆ_Êash.h
"

289 #ifde‡
HAL_SRAM_MODULE_ENABLED


290 
	~"°m32f1xx_hÆ_§am.h
"

293 #ifde‡
HAL_NOR_MODULE_ENABLED


294 
	~"°m32f1xx_hÆ_n‹.h
"

297 #ifde‡
HAL_I2C_MODULE_ENABLED


298 
	~"°m32f1xx_hÆ_i2c.h
"

301 #ifde‡
HAL_I2S_MODULE_ENABLED


302 
	~"°m32f1xx_hÆ_i2s.h
"

305 #ifde‡
HAL_IWDG_MODULE_ENABLED


306 
	~"°m32f1xx_hÆ_iwdg.h
"

309 #ifde‡
HAL_PWR_MODULE_ENABLED


310 
	~"°m32f1xx_hÆ_pwr.h
"

313 #ifde‡
HAL_RTC_MODULE_ENABLED


314 
	~"°m32f1xx_hÆ_πc.h
"

317 #ifde‡
HAL_PCCARD_MODULE_ENABLED


318 
	~"°m32f1xx_hÆ_pcˇrd.h
"

321 #ifde‡
HAL_SD_MODULE_ENABLED


322 
	~"°m32f1xx_hÆ_sd.h
"

325 #ifde‡
HAL_NAND_MODULE_ENABLED


326 
	~"°m32f1xx_hÆ_«nd.h
"

329 #ifde‡
HAL_SPI_MODULE_ENABLED


330 
	~"°m32f1xx_hÆ_•i.h
"

333 #ifde‡
HAL_TIM_MODULE_ENABLED


334 
	~"°m32f1xx_hÆ_tim.h
"

337 #ifde‡
HAL_UART_MODULE_ENABLED


338 
	~"°m32f1xx_hÆ_u¨t.h
"

341 #ifde‡
HAL_USART_MODULE_ENABLED


342 
	~"°m32f1xx_hÆ_ußπ.h
"

345 #ifde‡
HAL_IRDA_MODULE_ENABLED


346 
	~"°m32f1xx_hÆ_úda.h
"

349 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


350 
	~"°m32f1xx_hÆ_sm¨tˇrd.h
"

353 #ifde‡
HAL_WWDG_MODULE_ENABLED


354 
	~"°m32f1xx_hÆ_wwdg.h
"

357 #ifde‡
HAL_PCD_MODULE_ENABLED


358 
	~"°m32f1xx_hÆ_pcd.h
"

361 #ifde‡
HAL_HCD_MODULE_ENABLED


362 
	~"°m32f1xx_hÆ_hcd.h
"

365 #ifde‡
HAL_MMC_MODULE_ENABLED


366 
	~"°m32f1xx_hÆ_mmc.h
"

370 #ifde‡ 
USE_FULL_ASSERT


379 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0U : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

381 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

383 
	#as£π_∑øm
(
ex¥
Ë(()0U)

	)

386 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/stm32f1xx_it.h

21 #i‚de‡
__STM32F1xx_IT_H


22 
	#__STM32F1xx_IT_H


	)

24 #ifde‡
__˝lu•lus


49 
NMI_H™dÀr
();

50 
H¨dFau…_H™dÀr
();

51 
MemM™age_H™dÀr
();

52 
BusFau…_H™dÀr
();

53 
UßgeFau…_H™dÀr
();

54 
DebugM⁄_H™dÀr
();

55 
SysTick_H™dÀr
();

56 
DMA1_Ch™√l2_IRQH™dÀr
();

57 
DMA1_Ch™√l3_IRQH™dÀr
();

58 
DMA1_Ch™√l6_IRQH™dÀr
();

59 
DMA1_Ch™√l7_IRQH™dÀr
();

60 
I2C1_EV_IRQH™dÀr
();

61 
I2C1_ER_IRQH™dÀr
();

66 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/usart.h

21 #i‚de‡
__USART_H__


22 
	#__USART_H__


	)

24 #ifde‡
__˝lu•lus


29 
	~"maö.h
"

35 
UART_H™dÀTy≥Def
 
hu¨t2
;

40 
MX_USART2_UART_Inô
();

46 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/dma.c

22 
	~"dma.h
"

39 
	$MX_DMA_Inô
()

43 
	`__HAL_RCC_DMA1_CLK_ENABLE
();

47 
	`HAL_NVIC_SëPri‹ôy
(
DMA1_Ch™√l2_IRQn
, 5, 0);

48 
	`HAL_NVIC_E«bÀIRQ
(
DMA1_Ch™√l2_IRQn
);

50 
	`HAL_NVIC_SëPri‹ôy
(
DMA1_Ch™√l3_IRQn
, 5, 0);

51 
	`HAL_NVIC_E«bÀIRQ
(
DMA1_Ch™√l3_IRQn
);

53 
	`HAL_NVIC_SëPri‹ôy
(
DMA1_Ch™√l6_IRQn
, 5, 0);

54 
	`HAL_NVIC_E«bÀIRQ
(
DMA1_Ch™√l6_IRQn
);

56 
	`HAL_NVIC_SëPri‹ôy
(
DMA1_Ch™√l7_IRQn
, 5, 0);

57 
	`HAL_NVIC_E«bÀIRQ
(
DMA1_Ch™√l7_IRQn
);

59 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/freertos.c

21 
	~"FªeRTOS.h
"

22 
	~"èsk.h
"

23 
	~"maö.h
"

24 
	~"cmsis_os.h
"

25 
	~"£ns‹.h
"

50 
osThªadId
 
	gdeÁu…TaskH™dÀ
;

57 
SèπDeÁu…Task
(c⁄° * 
¨gumít
);

59 
MX_FREERTOS_Inô
();

62 
vAµliˇti⁄GëIdÀTaskMem‹y
–
SèticTask_t
 **
µxIdÀTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxIdÀTaskSèckBuf„r
, 
uöt32_t
 *
pulIdÀTaskSèckSize
 );

65 
SèticTask_t
 
	gxIdÀTaskTCBBuf„r
;

66 
SèckTy≥_t
 
	gxIdÀSèck
[
c⁄figMINIMAL_STACK_SIZE
];

68 
	$vAµliˇti⁄GëIdÀTaskMem‹y
–
SèticTask_t
 **
µxIdÀTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxIdÀTaskSèckBuf„r
, 
uöt32_t
 *
pulIdÀTaskSèckSize
 )

70 *
µxIdÀTaskTCBBuf„r
 = &
xIdÀTaskTCBBuf„r
;

71 *
µxIdÀTaskSèckBuf„r
 = &
xIdÀSèck
[0];

72 *
pulIdÀTaskSèckSize
 = 
c⁄figMINIMAL_STACK_SIZE
;

74 
	}
}

82 
	$MX_FREERTOS_Inô
() {

105 
	`osThªadDef
(
deÁu…Task
, 
SèπDeÁu…Task
, 
osPri‹ôyN‹mÆ
, 0, 128);

106 
deÁu…TaskH™dÀ
 = 
	`osThªadCª©e
(
	`osThªad
(
deÁu…Task
), 
NULL
);

112 
	}
}

121 
	$SèπDeÁu…Task
(c⁄° * 
¨gumít
)

127 
	`£ns‹sTask
();

131 
	`osDñay
(1000);

132 
	`HAL_GPIO_WrôePö
(
GPIOA
, 
LED_Pö
, 
GPIO_PIN_SET
);

133 
	`osDñay
(10);

134 
	`HAL_GPIO_WrôePö
(
GPIOA
, 
LED_Pö
, 
GPIO_PIN_RESET
);

142 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/gpio.c

22 
	~"gpio.h
"

46 
	$MX_GPIO_Inô
()

49 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
 = {0};

52 
	`__HAL_RCC_GPIOC_CLK_ENABLE
();

53 
	`__HAL_RCC_GPIOD_CLK_ENABLE
();

54 
	`__HAL_RCC_GPIOA_CLK_ENABLE
();

55 
	`__HAL_RCC_GPIOB_CLK_ENABLE
();

58 
	`HAL_GPIO_WrôePö
(
GPIOA
, 
LED_Pö
|
CSN_Pö
, 
GPIO_PIN_RESET
);

61 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_RESET
);

64 
GPIO_InôSåu˘
.
Pö
 = 
IRQ_Pö
;

65 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

66 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

67 
	`HAL_GPIO_Inô
(
IRQ_GPIO_P‹t
, &
GPIO_InôSåu˘
);

70 
GPIO_InôSåu˘
.
Pö
 = 
LED_Pö
;

71 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

72 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

73 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

74 
	`HAL_GPIO_Inô
(
LED_GPIO_P‹t
, &
GPIO_InôSåu˘
);

77 
GPIO_InôSåu˘
.
Pö
 = 
M4_Pö
;

78 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

79 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

80 
	`HAL_GPIO_Inô
(
M4_GPIO_P‹t
, &
GPIO_InôSåu˘
);

83 
GPIO_InôSåu˘
.
Pö
 = 
M3_Pö
|
M2_Pö
|
M1_Pö
;

84 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

85 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

86 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

89 
GPIO_InôSåu˘
.
Pö
 = 
CE_Pö
;

90 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

91 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

92 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

93 
	`HAL_GPIO_Inô
(
CE_GPIO_P‹t
, &
GPIO_InôSåu˘
);

96 
GPIO_InôSåu˘
.
Pö
 = 
CSN_Pö
;

97 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

98 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

99 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

100 
	`HAL_GPIO_Inô
(
CSN_GPIO_P‹t
, &
GPIO_InôSåu˘
);

103 
	`__HAL_AFIO_REMAP_TIM2_PARTIAL_2
();

105 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/i2c.c

21 
	~"i2c.h
"

27 
I2C_H™dÀTy≥Def
 
	ghi2c1
;

28 
DMA_H™dÀTy≥Def
 
	ghdma_i2c1_tx
;

29 
DMA_H™dÀTy≥Def
 
	ghdma_i2c1_rx
;

32 
	$MX_I2C1_Inô
()

42 
hi2c1
.
In°™˚
 = 
I2C1
;

43 
hi2c1
.
Inô
.
ClockS≥ed
 = 100000;

44 
hi2c1
.
Inô
.
DutyCy˛e
 = 
I2C_DUTYCYCLE_2
;

45 
hi2c1
.
Inô
.
OwnAddªss1
 = 0;

46 
hi2c1
.
Inô
.
AddªssögMode
 = 
I2C_ADDRESSINGMODE_7BIT
;

47 
hi2c1
.
Inô
.
DuÆAddªssMode
 = 
I2C_DUALADDRESS_DISABLE
;

48 
hi2c1
.
Inô
.
OwnAddªss2
 = 0;

49 
hi2c1
.
Inô
.
GíîÆCÆlMode
 = 
I2C_GENERALCALL_DISABLE
;

50 
hi2c1
.
Inô
.
NoSåëchMode
 = 
I2C_NOSTRETCH_DISABLE
;

51 i‡(
	`HAL_I2C_Inô
(&
hi2c1
Ë!
HAL_OK
)

53 
	`Eº‹_H™dÀr
();

59 
	}
}

61 
	$HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
* 
i2cH™dÀ
)

64 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
 = {0};

65 if(
i2cH™dÀ
->
In°™˚
==
I2C1
)

71 
	`__HAL_RCC_GPIOB_CLK_ENABLE
();

76 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_8
|
GPIO_PIN_9
;

77 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_OD
;

78 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

79 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

81 
	`__HAL_AFIO_REMAP_I2C1_ENABLE
();

84 
	`__HAL_RCC_I2C1_CLK_ENABLE
();

88 
hdma_i2c1_tx
.
In°™˚
 = 
DMA1_Ch™√l6
;

89 
hdma_i2c1_tx
.
Inô
.
Dúe˘i⁄
 = 
DMA_MEMORY_TO_PERIPH
;

90 
hdma_i2c1_tx
.
Inô
.
PîùhInc
 = 
DMA_PINC_DISABLE
;

91 
hdma_i2c1_tx
.
Inô
.
MemInc
 = 
DMA_MINC_ENABLE
;

92 
hdma_i2c1_tx
.
Inô
.
PîùhD©aAlignmít
 = 
DMA_PDATAALIGN_BYTE
;

93 
hdma_i2c1_tx
.
Inô
.
MemD©aAlignmít
 = 
DMA_MDATAALIGN_BYTE
;

94 
hdma_i2c1_tx
.
Inô
.
Mode
 = 
DMA_NORMAL
;

95 
hdma_i2c1_tx
.
Inô
.
Pri‹ôy
 = 
DMA_PRIORITY_LOW
;

96 i‡(
	`HAL_DMA_Inô
(&
hdma_i2c1_tx
Ë!
HAL_OK
)

98 
	`Eº‹_H™dÀr
();

101 
	`__HAL_LINKDMA
(
i2cH™dÀ
,
hdm©x
,
hdma_i2c1_tx
);

104 
hdma_i2c1_rx
.
In°™˚
 = 
DMA1_Ch™√l7
;

105 
hdma_i2c1_rx
.
Inô
.
Dúe˘i⁄
 = 
DMA_PERIPH_TO_MEMORY
;

106 
hdma_i2c1_rx
.
Inô
.
PîùhInc
 = 
DMA_PINC_DISABLE
;

107 
hdma_i2c1_rx
.
Inô
.
MemInc
 = 
DMA_MINC_ENABLE
;

108 
hdma_i2c1_rx
.
Inô
.
PîùhD©aAlignmít
 = 
DMA_PDATAALIGN_BYTE
;

109 
hdma_i2c1_rx
.
Inô
.
MemD©aAlignmít
 = 
DMA_MDATAALIGN_BYTE
;

110 
hdma_i2c1_rx
.
Inô
.
Mode
 = 
DMA_NORMAL
;

111 
hdma_i2c1_rx
.
Inô
.
Pri‹ôy
 = 
DMA_PRIORITY_LOW
;

112 i‡(
	`HAL_DMA_Inô
(&
hdma_i2c1_rx
Ë!
HAL_OK
)

114 
	`Eº‹_H™dÀr
();

117 
	`__HAL_LINKDMA
(
i2cH™dÀ
,
hdm¨x
,
hdma_i2c1_rx
);

120 
	`HAL_NVIC_SëPri‹ôy
(
I2C1_EV_IRQn
, 5, 0);

121 
	`HAL_NVIC_E«bÀIRQ
(
I2C1_EV_IRQn
);

122 
	`HAL_NVIC_SëPri‹ôy
(
I2C1_ER_IRQn
, 5, 0);

123 
	`HAL_NVIC_E«bÀIRQ
(
I2C1_ER_IRQn
);

128 
	}
}

130 
	$HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
* 
i2cH™dÀ
)

133 if(
i2cH™dÀ
->
In°™˚
==
I2C1
)

139 
	`__HAL_RCC_I2C1_CLK_DISABLE
();

145 
	`HAL_GPIO_DeInô
(
GPIOB
, 
GPIO_PIN_8
);

147 
	`HAL_GPIO_DeInô
(
GPIOB
, 
GPIO_PIN_9
);

150 
	`HAL_DMA_DeInô
(
i2cH™dÀ
->
hdm©x
);

151 
	`HAL_DMA_DeInô
(
i2cH™dÀ
->
hdm¨x
);

154 
	`HAL_NVIC_DißbÀIRQ
(
I2C1_EV_IRQn
);

155 
	`HAL_NVIC_DißbÀIRQ
(
I2C1_ER_IRQn
);

160 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/main.c

20 
	~"maö.h
"

21 
	~"cmsis_os.h
"

22 
	~"dma.h
"

23 
	~"i2c.h
"

24 
	~"•i.h
"

25 
	~"ußπ.h
"

26 
	~"gpio.h
"

27 
	~"NRF2401.h
"

29 
	~"qmi8658.h
"

30 
	~"qmc5883.h
"

31 
	~"•l06.h
"

35 
	~"../../HARDWARE/NRF2401/NRF2401.h
"

60 
Sy°emClock_C⁄fig
();

61 
MX_FREERTOS_Inô
();

68 
	~"°dio.h
"

72 
	$Show_Log
()

74 
	`¥ötf
("\t\033[1;31;40m ______ _____ __ ___ ____ \033[0m\r\n");

75 
	`¥ötf
("\t\033[1;31;40m / _/ |/ / / / / _ _|__ \\ / __ \ \033[0m\r\n");

76 
	`¥ötf
("\t\033[1;31;40m / // /|_/ / / / / | | / /_/ / / / / / \033[0m\r\n");

77 
	`¥ötf
("\t\033[1;31;40m _/ // / / / /_/ / | |/ / __/_/ /_/ / \033[0m\r\n");

78 
	`¥ötf
("\t\033[1;31;40m /___/_/ /_/\____ / |___/____(_)____/ \033[0m\r\n");

79 
	}
}

87 
	$maö
()

97 
	`HAL_Inô
();

104 
	`Sy°emClock_C⁄fig
();

111 
	`MX_GPIO_Inô
();

112 
	`MX_DMA_Inô
();

113 
	`MX_I2C1_Inô
();

114 
	`MX_SPI1_Inô
();

115 
	`MX_USART2_UART_Inô
();

117 
	`Show_Log
();

119 
	`NRF24L01_Inô
();

121 
	`NRF24L01_Check
())

123 
	`HAL_Dñay
(200);

132 
	`MX_FREERTOS_Inô
();

135 
	`osKî√lSèπ
();

146 
	`HAL_Dñay
(800);

147 
	`¥ötf
("hello world!\r\n");

150 
	}
}

156 
	$Sy°emClock_C⁄fig
()

158 
RCC_OscInôTy≥Def
 
RCC_OscInôSåu˘
 = {0};

159 
RCC_ClkInôTy≥Def
 
RCC_ClkInôSåu˘
 = {0};

164 
RCC_OscInôSåu˘
.
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
;

165 
RCC_OscInôSåu˘
.
HSESèã
 = 
RCC_HSE_ON
;

166 
RCC_OscInôSåu˘
.
HSEPªdivVÆue
 = 
RCC_HSE_PREDIV_DIV1
;

167 
RCC_OscInôSåu˘
.
HSISèã
 = 
RCC_HSI_ON
;

168 
RCC_OscInôSåu˘
.
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

169 
RCC_OscInôSåu˘
.
PLL
.
PLLSour˚
 = 
RCC_PLLSOURCE_HSE
;

170 
RCC_OscInôSåu˘
.
PLL
.
PLLMUL
 = 
RCC_PLL_MUL9
;

171 i‡(
	`HAL_RCC_OscC⁄fig
(&
RCC_OscInôSåu˘
Ë!
HAL_OK
)

173 
	`Eº‹_H™dÀr
();

178 
RCC_ClkInôSåu˘
.
ClockTy≥
 = 
RCC_CLOCKTYPE_HCLK
|
RCC_CLOCKTYPE_SYSCLK


179 |
RCC_CLOCKTYPE_PCLK1
|
RCC_CLOCKTYPE_PCLK2
;

180 
RCC_ClkInôSåu˘
.
SYSCLKSour˚
 = 
RCC_SYSCLKSOURCE_PLLCLK
;

181 
RCC_ClkInôSåu˘
.
AHBCLKDividî
 = 
RCC_SYSCLK_DIV1
;

182 
RCC_ClkInôSåu˘
.
APB1CLKDividî
 = 
RCC_HCLK_DIV2
;

183 
RCC_ClkInôSåu˘
.
APB2CLKDividî
 = 
RCC_HCLK_DIV1
;

185 i‡(
	`HAL_RCC_ClockC⁄fig
(&
RCC_ClkInôSåu˘
, 
FLASH_LATENCY_2
Ë!
HAL_OK
)

187 
	`Eº‹_H™dÀr
();

189 
	}
}

199 
	$Eº‹_H™dÀr
()

203 
	`__dißbÀ_úq
();

208 
	}
}

210 #ifde‡ 
USE_FULL_ASSERT


218 
	$as£π_Áûed
(
uöt8_t
 *
fûe
, 
uöt32_t
 
löe
)

224 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/spi.c

21 
	~"•i.h
"

27 
SPI_H™dÀTy≥Def
 
	gh•i1
;

28 
DMA_H™dÀTy≥Def
 
	ghdma_•i1_rx
;

29 
DMA_H™dÀTy≥Def
 
	ghdma_•i1_tx
;

32 
	$MX_SPI1_Inô
()

42 
h•i1
.
In°™˚
 = 
SPI1
;

43 
h•i1
.
Inô
.
Mode
 = 
SPI_MODE_MASTER
;

44 
h•i1
.
Inô
.
Dúe˘i⁄
 = 
SPI_DIRECTION_2LINES
;

45 
h•i1
.
Inô
.
D©aSize
 = 
SPI_DATASIZE_8BIT
;

46 
h•i1
.
Inô
.
CLKPﬁ¨ôy
 = 
SPI_POLARITY_LOW
;

47 
h•i1
.
Inô
.
CLKPha£
 = 
SPI_PHASE_1EDGE
;

48 
h•i1
.
Inô
.
NSS
 = 
SPI_NSS_SOFT
;

49 
h•i1
.
Inô
.
BaudR©ePªsˇÀr
 = 
SPI_BAUDRATEPRESCALER_8
;

50 
h•i1
.
Inô
.
Fú°Bô
 = 
SPI_FIRSTBIT_MSB
;

51 
h•i1
.
Inô
.
TIMode
 = 
SPI_TIMODE_DISABLE
;

52 
h•i1
.
Inô
.
CRCCÆcuœti⁄
 = 
SPI_CRCCALCULATION_DISABLE
;

53 
h•i1
.
Inô
.
CRCPﬁynomül
 = 10;

54 i‡(
	`HAL_SPI_Inô
(&
h•i1
Ë!
HAL_OK
)

56 
	`Eº‹_H™dÀr
();

62 
	}
}

64 
	$HAL_SPI_M•Inô
(
SPI_H™dÀTy≥Def
* 
•iH™dÀ
)

67 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
 = {0};

68 if(
•iH™dÀ
->
In°™˚
==
SPI1
)

74 
	`__HAL_RCC_SPI1_CLK_ENABLE
();

76 
	`__HAL_RCC_GPIOA_CLK_ENABLE
();

82 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_5
|
GPIO_PIN_7
;

83 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

84 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

85 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

87 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_6
;

88 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

89 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

90 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

94 
hdma_•i1_rx
.
In°™˚
 = 
DMA1_Ch™√l2
;

95 
hdma_•i1_rx
.
Inô
.
Dúe˘i⁄
 = 
DMA_PERIPH_TO_MEMORY
;

96 
hdma_•i1_rx
.
Inô
.
PîùhInc
 = 
DMA_PINC_DISABLE
;

97 
hdma_•i1_rx
.
Inô
.
MemInc
 = 
DMA_MINC_ENABLE
;

98 
hdma_•i1_rx
.
Inô
.
PîùhD©aAlignmít
 = 
DMA_PDATAALIGN_BYTE
;

99 
hdma_•i1_rx
.
Inô
.
MemD©aAlignmít
 = 
DMA_MDATAALIGN_BYTE
;

100 
hdma_•i1_rx
.
Inô
.
Mode
 = 
DMA_NORMAL
;

101 
hdma_•i1_rx
.
Inô
.
Pri‹ôy
 = 
DMA_PRIORITY_LOW
;

102 i‡(
	`HAL_DMA_Inô
(&
hdma_•i1_rx
Ë!
HAL_OK
)

104 
	`Eº‹_H™dÀr
();

107 
	`__HAL_LINKDMA
(
•iH™dÀ
,
hdm¨x
,
hdma_•i1_rx
);

110 
hdma_•i1_tx
.
In°™˚
 = 
DMA1_Ch™√l3
;

111 
hdma_•i1_tx
.
Inô
.
Dúe˘i⁄
 = 
DMA_MEMORY_TO_PERIPH
;

112 
hdma_•i1_tx
.
Inô
.
PîùhInc
 = 
DMA_PINC_DISABLE
;

113 
hdma_•i1_tx
.
Inô
.
MemInc
 = 
DMA_MINC_ENABLE
;

114 
hdma_•i1_tx
.
Inô
.
PîùhD©aAlignmít
 = 
DMA_PDATAALIGN_BYTE
;

115 
hdma_•i1_tx
.
Inô
.
MemD©aAlignmít
 = 
DMA_MDATAALIGN_BYTE
;

116 
hdma_•i1_tx
.
Inô
.
Mode
 = 
DMA_NORMAL
;

117 
hdma_•i1_tx
.
Inô
.
Pri‹ôy
 = 
DMA_PRIORITY_LOW
;

118 i‡(
	`HAL_DMA_Inô
(&
hdma_•i1_tx
Ë!
HAL_OK
)

120 
	`Eº‹_H™dÀr
();

123 
	`__HAL_LINKDMA
(
•iH™dÀ
,
hdm©x
,
hdma_•i1_tx
);

129 
	}
}

131 
	$HAL_SPI_M•DeInô
(
SPI_H™dÀTy≥Def
* 
•iH™dÀ
)

134 if(
•iH™dÀ
->
In°™˚
==
SPI1
)

140 
	`__HAL_RCC_SPI1_CLK_DISABLE
();

147 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_5
|
GPIO_PIN_6
|
GPIO_PIN_7
);

150 
	`HAL_DMA_DeInô
(
•iH™dÀ
->
hdm¨x
);

151 
	`HAL_DMA_DeInô
(
•iH™dÀ
->
hdm©x
);

156 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/stm32f1xx_hal_msp.c

22 
	~"maö.h
"

63 
	$HAL_M•Inô
()

70 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

71 
	`__HAL_RCC_PWR_CLK_ENABLE
();

75 
	`HAL_NVIC_SëPri‹ôy
(
PídSV_IRQn
, 15, 0);

79 
	`__HAL_AFIO_REMAP_SWJ_NOJTAG
();

84 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/stm32f1xx_it.c

21 
	~"maö.h
"

22 
	~"°m32f1xx_ô.h
"

23 
	~"FªeRTOS.h
"

24 
	~"èsk.h
"

60 
DMA_H™dÀTy≥Def
 
hdma_i2c1_tx
;

61 
DMA_H™dÀTy≥Def
 
hdma_i2c1_rx
;

62 
I2C_H™dÀTy≥Def
 
hi2c1
;

63 
DMA_H™dÀTy≥Def
 
hdma_•i1_rx
;

64 
DMA_H™dÀTy≥Def
 
hdma_•i1_tx
;

75 
	$NMI_H™dÀr
()

85 
	}
}

90 
	$H¨dFau…_H™dÀr
()

100 
	}
}

105 
	$MemM™age_H™dÀr
()

115 
	}
}

120 
	$BusFau…_H™dÀr
()

130 
	}
}

135 
	$UßgeFau…_H™dÀr
()

145 
	}
}

150 
	$DebugM⁄_H™dÀr
()

158 
	}
}

163 
	$SysTick_H™dÀr
()

168 
	`HAL_IncTick
();

169 #i‡(
INCLUDE_xTaskGëScheduÀrSèã
 == 1 )

170 i‡(
	`xTaskGëScheduÀrSèã
(Ë!
èskSCHEDULER_NOT_STARTED
)

173 
	`xP‹tSysTickH™dÀr
();

174 #i‡(
INCLUDE_xTaskGëScheduÀrSèã
 == 1 )

180 
	}
}

192 
	$DMA1_Ch™√l2_IRQH™dÀr
()

197 
	`HAL_DMA_IRQH™dÀr
(&
hdma_•i1_rx
);

201 
	}
}

206 
	$DMA1_Ch™√l3_IRQH™dÀr
()

211 
	`HAL_DMA_IRQH™dÀr
(&
hdma_•i1_tx
);

215 
	}
}

220 
	$DMA1_Ch™√l6_IRQH™dÀr
()

225 
	`HAL_DMA_IRQH™dÀr
(&
hdma_i2c1_tx
);

229 
	}
}

234 
	$DMA1_Ch™√l7_IRQH™dÀr
()

239 
	`HAL_DMA_IRQH™dÀr
(&
hdma_i2c1_rx
);

243 
	}
}

248 
	$I2C1_EV_IRQH™dÀr
()

253 
	`HAL_I2C_EV_IRQH™dÀr
(&
hi2c1
);

257 
	}
}

262 
	$I2C1_ER_IRQH™dÀr
()

267 
	`HAL_I2C_ER_IRQH™dÀr
(&
hi2c1
);

271 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/syscalls.c

24 
	~<sys/°©.h
>

25 
	~<°dlib.h
>

26 
	~<î∫o.h
>

27 
	~<°dio.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<sys/time.h
>

31 
	~<sys/times.h
>

35 
	$__io_putch¨
(
ch
Ë
	`__©åibuã__
((
wók
));

36 
	$__io_gëch¨
(Ë
	`__©åibuã__
((
wók
));

39 *
__ív
[1] = { 0 
	}
};

40 **
	gívú⁄
 = 
__ív
;

44 
	$öôüli£_m⁄ô‹_h™dÀs
()

46 
	}
}

48 
	$_gëpid
()

51 
	}
}

53 
	$_kûl
(
pid
, 
sig
)

55 ()
pid
;

56 ()
sig
;

57 
î∫o
 = 
EINVAL
;

59 
	}
}

61 
	$_exô
 (
°©us
)

63 
	`_kûl
(
°©us
, -1);

65 
	}
}

67 
__©åibuã__
((
wók
)Ë
	$_ªad
(
fûe
, *
±r
, 
Àn
)

69 ()
fûe
;

70 
D©aIdx
;

72 
D©aIdx
 = 0; D©aIdx < 
Àn
; DataIdx++)

74 *
±r
++ = 
	`__io_gëch¨
();

77  
Àn
;

78 
	}
}

80 
__©åibuã__
((
wók
)Ë
	$_wrôe
(
fûe
, *
±r
, 
Àn
)

82 ()
fûe
;

83 
D©aIdx
;

85 
D©aIdx
 = 0; D©aIdx < 
Àn
; DataIdx++)

87 
	`__io_putch¨
(*
±r
++);

89  
Àn
;

90 
	}
}

92 
	$_˛o£
(
fûe
)

94 ()
fûe
;

96 
	}
}

99 
	$_f°©
(
fûe
, 
°©
 *
°
)

101 ()
fûe
;

102 
°
->
°_mode
 = 
S_IFCHR
;

104 
	}
}

106 
	$_ißây
(
fûe
)

108 ()
fûe
;

110 
	}
}

112 
	$_l£ek
(
fûe
, 
±r
, 
dú
)

114 ()
fûe
;

115 ()
±r
;

116 ()
dú
;

118 
	}
}

120 
	$_›í
(*
∑th
, 
Êags
, ...)

122 ()
∑th
;

123 ()
Êags
;

126 
	}
}

128 
	$_waô
(*
°©us
)

130 ()
°©us
;

131 
î∫o
 = 
ECHILD
;

133 
	}
}

135 
	$_u∆ök
(*
«me
)

137 ()
«me
;

138 
î∫o
 = 
ENOENT
;

140 
	}
}

142 
	$_times
(
tms
 *
buf
)

144 ()
buf
;

146 
	}
}

148 
	$_°©
(*
fûe
, 
°©
 *
°
)

150 ()
fûe
;

151 
°
->
°_mode
 = 
S_IFCHR
;

153 
	}
}

155 
	$_lök
(*
ﬁd
, *
√w
)

157 ()
ﬁd
;

158 ()
√w
;

159 
î∫o
 = 
EMLINK
;

161 
	}
}

163 
	$_f‹k
()

165 
î∫o
 = 
EAGAIN
;

167 
	}
}

169 
	$_execve
(*
«me
, **
¨gv
, **
ív
)

171 ()
«me
;

172 ()
¨gv
;

173 ()
ív
;

174 
î∫o
 = 
ENOMEM
;

176 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/sysmem.c

24 
	~<î∫o.h
>

25 
	~<°döt.h
>

30 
uöt8_t
 *
	g__sbrk_hóp_íd
 = 
NULL
;

53 *
	$_sbrk
(
±rdiff_t
 
ö¸
)

55 
uöt8_t
 
_íd
;

56 
uöt8_t
 
_e°ack
;

57 
uöt32_t
 
_Mö_Sèck_Size
;

58 c⁄° 
uöt32_t
 
°ack_limô
 = (uöt32_t)&
_e°ack
 - (uöt32_t)&
_Mö_Sèck_Size
;

59 c⁄° 
uöt8_t
 *
max_hóp
 = (uöt8_à*)
°ack_limô
;

60 
uöt8_t
 *
¥ev_hóp_íd
;

63 i‡(
NULL
 =
__sbrk_hóp_íd
)

65 
__sbrk_hóp_íd
 = &
_íd
;

69 i‡(
__sbrk_hóp_íd
 + 
ö¸
 > 
max_hóp
)

71 
î∫o
 = 
ENOMEM
;

75 
¥ev_hóp_íd
 = 
__sbrk_hóp_íd
;

76 
__sbrk_hóp_íd
 +
ö¸
;

78  (*)
¥ev_hóp_íd
;

79 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/system_stm32f1xx.c

58 
	~"°m32f1xx.h
"

76 #i‡!
deföed
 (
HSE_VALUE
)

77 
	#HSE_VALUE
 8000000U

	)

81 #i‡!
deföed
 (
HSI_VALUE
)

82 
	#HSI_VALUE
 8000000U

	)

87 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

98 #i‡
deföed
(
USER_VECT_TAB_ADDRESS
)

102 #i‡
deföed
(
VECT_TAB_SRAM
)

103 
	#VECT_TAB_BASE_ADDRESS
 
SRAM_BASE


	)

105 
	#VECT_TAB_OFFSET
 0x00000000U

	)

108 
	#VECT_TAB_BASE_ADDRESS
 
FLASH_BASE


	)

110 
	#VECT_TAB_OFFSET
 0x00000000U

	)

141 
uöt32_t
 
	gSy°emC‹eClock
 = 8000000;

142 c⁄° 
uöt8_t
 
	gAHBPªscTabÀ
[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

143 c⁄° 
uöt8_t
 
	gAPBPªscTabÀ
[8U] = {0, 0, 0, 0, 1, 2, 3, 4};

153 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

154 #ifde‡
DATA_IN_ExtSRAM


155 
Sy°emInô_ExtMemCé
();

175 
	$Sy°emInô
 ()

177 #i‡
	`deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

178 #ifde‡
DATA_IN_ExtSRAM


179 
	`Sy°emInô_ExtMemCé
();

184 #i‡
	`deföed
(
USER_VECT_TAB_ADDRESS
)

185 
SCB
->
VTOR
 = 
VECT_TAB_BASE_ADDRESS
 | 
VECT_TAB_OFFSET
;

187 
	}
}

224 
	$Sy°emC‹eClockUpd©e
 ()

226 
uöt32_t
 
tmp
 = 0U, 
∂lmuŒ
 = 0U, 
∂lsour˚
 = 0U;

228 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

229 
uöt32_t
 
¥ediv1sour˚
 = 0U, 
¥ediv1Á˘‹
 = 0U, 
¥ediv2Á˘‹
 = 0U, 
∂l2muŒ
 = 0U;

232 #i‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

233 
uöt32_t
 
¥ediv1Á˘‹
 = 0U;

237 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

239 
tmp
)

242 
Sy°emC‹eClock
 = 
HSI_VALUE
;

245 
Sy°emC‹eClock
 = 
HSE_VALUE
;

250 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

251 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

253 #i‡!
	`deföed
(
STM32F105xC
Ë&& !deföed(
STM32F107xC
)

254 
∂lmuŒ
 = (Öllmull >> 18U) + 2U;

256 i‡(
∂lsour˚
 == 0x00U)

259 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1UË* 
∂lmuŒ
;

263 #i‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

264 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1U;

266 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

269 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

271 
Sy°emC‹eClock
 = (
HSE_VALUE
 >> 1UË* 
∂lmuŒ
;

275 
Sy°emC‹eClock
 = 
HSE_VALUE
 * 
∂lmuŒ
;

280 
∂lmuŒ
 =Öllmull >> 18U;

282 i‡(
∂lmuŒ
 != 0x0DU)

284 
∂lmuŒ
 += 2U;

288 
∂lmuŒ
 = 13U / 2U;

291 i‡(
∂lsour˚
 == 0x00U)

294 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1UË* 
∂lmuŒ
;

300 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

301 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1U;

303 i‡(
¥ediv1sour˚
 == 0U)

306 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

312 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4U) + 1U;

313 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8U) + 2U;

314 
Sy°emC‹eClock
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

321 
Sy°emC‹eClock
 = 
HSI_VALUE
;

327 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4U)];

329 
Sy°emC‹eClock
 >>
tmp
;

330 
	}
}

332 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

339 #ifde‡
DATA_IN_ExtSRAM


349 
	$Sy°emInô_ExtMemCé
()

351 
__IO
 
uöt32_t
 
tm¥eg
;

356 
RCC
->
AHBENR
 = 0x00000114U;

359 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);

362 
RCC
->
APB2ENR
 = 0x000001E0U;

365 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);

367 ()(
tm¥eg
);

375 
GPIOD
->
CRL
 = 0x44BB44BBU;

376 
GPIOD
->
CRH
 = 0xBBBBBBBBU;

378 
GPIOE
->
CRL
 = 0xB44444BBU;

379 
GPIOE
->
CRH
 = 0xBBBBBBBBU;

381 
GPIOF
->
CRL
 = 0x44BBBBBBU;

382 
GPIOF
->
CRH
 = 0xBBBB4444U;

384 
GPIOG
->
CRL
 = 0x44BBBBBBU;

385 
GPIOG
->
CRH
 = 0x444B4B44U;

390 
FSMC_B™k1
->
BTCR
[4U] = 0x00001091U;

391 
FSMC_B™k1
->
BTCR
[5U] = 0x00110212U;

392 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/usart.c

21 
	~"ußπ.h
"

25 #ifde‡
__GNUC__


27 
	#PUTCHAR_PROTOTYPE
 
	`__io_putch¨
(
ch
)

	)

29 
	gPUTCHAR_PROTOTYPE


32 
HAL_UART_Tønsmô
(&
hu¨t2
, (
uöt8_t
*)&
ch
, 1, 
HAL_MAX_DELAY
);

33  
	gch
;

38 
UART_H™dÀTy≥Def
 
	ghu¨t2
;

43 
	$MX_USART2_UART_Inô
()

53 
hu¨t2
.
In°™˚
 = 
USART2
;

54 
hu¨t2
.
Inô
.
BaudR©e
 = 115200;

55 
hu¨t2
.
Inô
.
W‹dLígth
 = 
UART_WORDLENGTH_8B
;

56 
hu¨t2
.
Inô
.
St›Bôs
 = 
UART_STOPBITS_1
;

57 
hu¨t2
.
Inô
.
P¨ôy
 = 
UART_PARITY_NONE
;

58 
hu¨t2
.
Inô
.
Mode
 = 
UART_MODE_TX
;

59 
hu¨t2
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_NONE
;

60 
hu¨t2
.
Inô
.
OvîSam∂ög
 = 
UART_OVERSAMPLING_16
;

61 i‡(
	`HAL_UART_Inô
(&
hu¨t2
Ë!
HAL_OK
)

63 
	`Eº‹_H™dÀr
();

69 
	}
}

71 
	$HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
* 
u¨tH™dÀ
)

74 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
 = {0};

75 if(
u¨tH™dÀ
->
In°™˚
==
USART2
)

81 
	`__HAL_RCC_USART2_CLK_ENABLE
();

83 
	`__HAL_RCC_GPIOA_CLK_ENABLE
();

88 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_2
;

89 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

90 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

91 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

93 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_3
;

94 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

95 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

96 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

102 
	}
}

104 
	$HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
* 
u¨tH™dÀ
)

107 if(
u¨tH™dÀ
->
In°™˚
==
USART2
)

113 
	`__HAL_RCC_USART2_CLK_DISABLE
();

119 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_2
|
GPIO_PIN_3
);

125 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h

36 #i‚de‡
__STM32F103xB_H


37 
	#__STM32F103xB_H


	)

39 #ifde‡
__˝lu•lus


49 
	#__CM3_REV
 0x0200U

	)

50 
	#__MPU_PRESENT
 0U

	)

51 
	#__NVIC_PRIO_BITS
 4U

	)

52 
	#__Víd‹_SysTickC⁄fig
 0U

	)

71 
N⁄MaskabÀI¡_IRQn
 = -14,

72 
H¨dFau…_IRQn
 = -13,

73 
Mem‹yM™agemít_IRQn
 = -12,

74 
BusFau…_IRQn
 = -11,

75 
UßgeFau…_IRQn
 = -10,

76 
SVCÆl_IRQn
 = -5,

77 
DebugM⁄ô‹_IRQn
 = -4,

78 
PídSV_IRQn
 = -2,

79 
SysTick_IRQn
 = -1,

82 
WWDG_IRQn
 = 0,

83 
PVD_IRQn
 = 1,

84 
TAMPER_IRQn
 = 2,

85 
RTC_IRQn
 = 3,

86 
FLASH_IRQn
 = 4,

87 
RCC_IRQn
 = 5,

88 
EXTI0_IRQn
 = 6,

89 
EXTI1_IRQn
 = 7,

90 
EXTI2_IRQn
 = 8,

91 
EXTI3_IRQn
 = 9,

92 
EXTI4_IRQn
 = 10,

93 
DMA1_Ch™√l1_IRQn
 = 11,

94 
DMA1_Ch™√l2_IRQn
 = 12,

95 
DMA1_Ch™√l3_IRQn
 = 13,

96 
DMA1_Ch™√l4_IRQn
 = 14,

97 
DMA1_Ch™√l5_IRQn
 = 15,

98 
DMA1_Ch™√l6_IRQn
 = 16,

99 
DMA1_Ch™√l7_IRQn
 = 17,

100 
ADC1_2_IRQn
 = 18,

101 
USB_HP_CAN1_TX_IRQn
 = 19,

102 
USB_LP_CAN1_RX0_IRQn
 = 20,

103 
CAN1_RX1_IRQn
 = 21,

104 
CAN1_SCE_IRQn
 = 22,

105 
EXTI9_5_IRQn
 = 23,

106 
TIM1_BRK_IRQn
 = 24,

107 
TIM1_UP_IRQn
 = 25,

108 
TIM1_TRG_COM_IRQn
 = 26,

109 
TIM1_CC_IRQn
 = 27,

110 
TIM2_IRQn
 = 28,

111 
TIM3_IRQn
 = 29,

112 
TIM4_IRQn
 = 30,

113 
I2C1_EV_IRQn
 = 31,

114 
I2C1_ER_IRQn
 = 32,

115 
I2C2_EV_IRQn
 = 33,

116 
I2C2_ER_IRQn
 = 34,

117 
SPI1_IRQn
 = 35,

118 
SPI2_IRQn
 = 36,

119 
USART1_IRQn
 = 37,

120 
USART2_IRQn
 = 38,

121 
USART3_IRQn
 = 39,

122 
EXTI15_10_IRQn
 = 40,

123 
RTC_Aœrm_IRQn
 = 41,

124 
USBWakeUp_IRQn
 = 42,

125 } 
	tIRQn_Ty≥
;

131 
	~"c‹e_cm3.h
"

132 
	~"sy°em_°m32f1xx.h
"

133 
	~<°döt.h
>

145 
__IO
 
uöt32_t
 
SR
;

146 
__IO
 
uöt32_t
 
CR1
;

147 
__IO
 
uöt32_t
 
CR2
;

148 
__IO
 
uöt32_t
 
SMPR1
;

149 
__IO
 
uöt32_t
 
SMPR2
;

150 
__IO
 
uöt32_t
 
JOFR1
;

151 
__IO
 
uöt32_t
 
JOFR2
;

152 
__IO
 
uöt32_t
 
JOFR3
;

153 
__IO
 
uöt32_t
 
JOFR4
;

154 
__IO
 
uöt32_t
 
HTR
;

155 
__IO
 
uöt32_t
 
LTR
;

156 
__IO
 
uöt32_t
 
SQR1
;

157 
__IO
 
uöt32_t
 
SQR2
;

158 
__IO
 
uöt32_t
 
SQR3
;

159 
__IO
 
uöt32_t
 
JSQR
;

160 
__IO
 
uöt32_t
 
JDR1
;

161 
__IO
 
uöt32_t
 
JDR2
;

162 
__IO
 
uöt32_t
 
JDR3
;

163 
__IO
 
uöt32_t
 
JDR4
;

164 
__IO
 
uöt32_t
 
DR
;

165 } 
	tADC_Ty≥Def
;

169 
__IO
 
uöt32_t
 
SR
;

170 
__IO
 
uöt32_t
 
CR1
;

171 
__IO
 
uöt32_t
 
CR2
;

172 
uöt32_t
 
RESERVED
[16];

173 
__IO
 
uöt32_t
 
DR
;

174 } 
	tADC_Comm⁄_Ty≥Def
;

182 
uöt32_t
 
RESERVED0
;

183 
__IO
 
uöt32_t
 
DR1
;

184 
__IO
 
uöt32_t
 
DR2
;

185 
__IO
 
uöt32_t
 
DR3
;

186 
__IO
 
uöt32_t
 
DR4
;

187 
__IO
 
uöt32_t
 
DR5
;

188 
__IO
 
uöt32_t
 
DR6
;

189 
__IO
 
uöt32_t
 
DR7
;

190 
__IO
 
uöt32_t
 
DR8
;

191 
__IO
 
uöt32_t
 
DR9
;

192 
__IO
 
uöt32_t
 
DR10
;

193 
__IO
 
uöt32_t
 
RTCCR
;

194 
__IO
 
uöt32_t
 
CR
;

195 
__IO
 
uöt32_t
 
CSR
;

196 } 
	tBKP_Ty≥Def
;

204 
__IO
 
uöt32_t
 
TIR
;

205 
__IO
 
uöt32_t
 
TDTR
;

206 
__IO
 
uöt32_t
 
TDLR
;

207 
__IO
 
uöt32_t
 
TDHR
;

208 } 
	tCAN_TxMaûBox_Ty≥Def
;

216 
__IO
 
uöt32_t
 
RIR
;

217 
__IO
 
uöt32_t
 
RDTR
;

218 
__IO
 
uöt32_t
 
RDLR
;

219 
__IO
 
uöt32_t
 
RDHR
;

220 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

228 
__IO
 
uöt32_t
 
FR1
;

229 
__IO
 
uöt32_t
 
FR2
;

230 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

238 
__IO
 
uöt32_t
 
MCR
;

239 
__IO
 
uöt32_t
 
MSR
;

240 
__IO
 
uöt32_t
 
TSR
;

241 
__IO
 
uöt32_t
 
RF0R
;

242 
__IO
 
uöt32_t
 
RF1R
;

243 
__IO
 
uöt32_t
 
IER
;

244 
__IO
 
uöt32_t
 
ESR
;

245 
__IO
 
uöt32_t
 
BTR
;

246 
uöt32_t
 
RESERVED0
[88];

247 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

248 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

249 
uöt32_t
 
RESERVED1
[12];

250 
__IO
 
uöt32_t
 
FMR
;

251 
__IO
 
uöt32_t
 
FM1R
;

252 
uöt32_t
 
RESERVED2
;

253 
__IO
 
uöt32_t
 
FS1R
;

254 
uöt32_t
 
RESERVED3
;

255 
__IO
 
uöt32_t
 
FFA1R
;

256 
uöt32_t
 
RESERVED4
;

257 
__IO
 
uöt32_t
 
FA1R
;

258 
uöt32_t
 
RESERVED5
[8];

259 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

260 } 
	tCAN_Ty≥Def
;

268 
__IO
 
uöt32_t
 
DR
;

269 
__IO
 
uöt8_t
 
IDR
;

270 
uöt8_t
 
RESERVED0
;

271 
uöt16_t
 
RESERVED1
;

272 
__IO
 
uöt32_t
 
CR
;

273 } 
	tCRC_Ty≥Def
;

282 
__IO
 
uöt32_t
 
IDCODE
;

283 
__IO
 
uöt32_t
 
CR
;

284 }
	tDBGMCU_Ty≥Def
;

292 
__IO
 
uöt32_t
 
CCR
;

293 
__IO
 
uöt32_t
 
CNDTR
;

294 
__IO
 
uöt32_t
 
CPAR
;

295 
__IO
 
uöt32_t
 
CMAR
;

296 } 
	tDMA_Ch™√l_Ty≥Def
;

300 
__IO
 
uöt32_t
 
ISR
;

301 
__IO
 
uöt32_t
 
IFCR
;

302 } 
	tDMA_Ty≥Def
;

312 
__IO
 
uöt32_t
 
IMR
;

313 
__IO
 
uöt32_t
 
EMR
;

314 
__IO
 
uöt32_t
 
RTSR
;

315 
__IO
 
uöt32_t
 
FTSR
;

316 
__IO
 
uöt32_t
 
SWIER
;

317 
__IO
 
uöt32_t
 
PR
;

318 } 
	tEXTI_Ty≥Def
;

326 
__IO
 
uöt32_t
 
ACR
;

327 
__IO
 
uöt32_t
 
KEYR
;

328 
__IO
 
uöt32_t
 
OPTKEYR
;

329 
__IO
 
uöt32_t
 
SR
;

330 
__IO
 
uöt32_t
 
CR
;

331 
__IO
 
uöt32_t
 
AR
;

332 
__IO
 
uöt32_t
 
RESERVED
;

333 
__IO
 
uöt32_t
 
OBR
;

334 
__IO
 
uöt32_t
 
WRPR
;

335 } 
	tFLASH_Ty≥Def
;

343 
__IO
 
uöt16_t
 
RDP
;

344 
__IO
 
uöt16_t
 
USER
;

345 
__IO
 
uöt16_t
 
D©a0
;

346 
__IO
 
uöt16_t
 
D©a1
;

347 
__IO
 
uöt16_t
 
WRP0
;

348 
__IO
 
uöt16_t
 
WRP1
;

349 
__IO
 
uöt16_t
 
WRP2
;

350 
__IO
 
uöt16_t
 
WRP3
;

351 } 
	tOB_Ty≥Def
;

359 
__IO
 
uöt32_t
 
CRL
;

360 
__IO
 
uöt32_t
 
CRH
;

361 
__IO
 
uöt32_t
 
IDR
;

362 
__IO
 
uöt32_t
 
ODR
;

363 
__IO
 
uöt32_t
 
BSRR
;

364 
__IO
 
uöt32_t
 
BRR
;

365 
__IO
 
uöt32_t
 
LCKR
;

366 } 
	tGPIO_Ty≥Def
;

374 
__IO
 
uöt32_t
 
EVCR
;

375 
__IO
 
uöt32_t
 
MAPR
;

376 
__IO
 
uöt32_t
 
EXTICR
[4];

377 
uöt32_t
 
RESERVED0
;

378 
__IO
 
uöt32_t
 
MAPR2
;

379 } 
	tAFIO_Ty≥Def
;

386 
__IO
 
uöt32_t
 
CR1
;

387 
__IO
 
uöt32_t
 
CR2
;

388 
__IO
 
uöt32_t
 
OAR1
;

389 
__IO
 
uöt32_t
 
OAR2
;

390 
__IO
 
uöt32_t
 
DR
;

391 
__IO
 
uöt32_t
 
SR1
;

392 
__IO
 
uöt32_t
 
SR2
;

393 
__IO
 
uöt32_t
 
CCR
;

394 
__IO
 
uöt32_t
 
TRISE
;

395 } 
	tI2C_Ty≥Def
;

403 
__IO
 
uöt32_t
 
KR
;

404 
__IO
 
uöt32_t
 
PR
;

405 
__IO
 
uöt32_t
 
RLR
;

406 
__IO
 
uöt32_t
 
SR
;

407 } 
	tIWDG_Ty≥Def
;

415 
__IO
 
uöt32_t
 
CR
;

416 
__IO
 
uöt32_t
 
CSR
;

417 } 
	tPWR_Ty≥Def
;

425 
__IO
 
uöt32_t
 
CR
;

426 
__IO
 
uöt32_t
 
CFGR
;

427 
__IO
 
uöt32_t
 
CIR
;

428 
__IO
 
uöt32_t
 
APB2RSTR
;

429 
__IO
 
uöt32_t
 
APB1RSTR
;

430 
__IO
 
uöt32_t
 
AHBENR
;

431 
__IO
 
uöt32_t
 
APB2ENR
;

432 
__IO
 
uöt32_t
 
APB1ENR
;

433 
__IO
 
uöt32_t
 
BDCR
;

434 
__IO
 
uöt32_t
 
CSR
;

437 } 
	tRCC_Ty≥Def
;

445 
__IO
 
uöt32_t
 
CRH
;

446 
__IO
 
uöt32_t
 
CRL
;

447 
__IO
 
uöt32_t
 
PRLH
;

448 
__IO
 
uöt32_t
 
PRLL
;

449 
__IO
 
uöt32_t
 
DIVH
;

450 
__IO
 
uöt32_t
 
DIVL
;

451 
__IO
 
uöt32_t
 
CNTH
;

452 
__IO
 
uöt32_t
 
CNTL
;

453 
__IO
 
uöt32_t
 
ALRH
;

454 
__IO
 
uöt32_t
 
ALRL
;

455 } 
	tRTC_Ty≥Def
;

463 
__IO
 
uöt32_t
 
CR1
;

464 
__IO
 
uöt32_t
 
CR2
;

465 
__IO
 
uöt32_t
 
SR
;

466 
__IO
 
uöt32_t
 
DR
;

467 
__IO
 
uöt32_t
 
CRCPR
;

468 
__IO
 
uöt32_t
 
RXCRCR
;

469 
__IO
 
uöt32_t
 
TXCRCR
;

470 
__IO
 
uöt32_t
 
I2SCFGR
;

471 } 
	tSPI_Ty≥Def
;

478 
__IO
 
uöt32_t
 
CR1
;

479 
__IO
 
uöt32_t
 
CR2
;

480 
__IO
 
uöt32_t
 
SMCR
;

481 
__IO
 
uöt32_t
 
DIER
;

482 
__IO
 
uöt32_t
 
SR
;

483 
__IO
 
uöt32_t
 
EGR
;

484 
__IO
 
uöt32_t
 
CCMR1
;

485 
__IO
 
uöt32_t
 
CCMR2
;

486 
__IO
 
uöt32_t
 
CCER
;

487 
__IO
 
uöt32_t
 
CNT
;

488 
__IO
 
uöt32_t
 
PSC
;

489 
__IO
 
uöt32_t
 
ARR
;

490 
__IO
 
uöt32_t
 
RCR
;

491 
__IO
 
uöt32_t
 
CCR1
;

492 
__IO
 
uöt32_t
 
CCR2
;

493 
__IO
 
uöt32_t
 
CCR3
;

494 
__IO
 
uöt32_t
 
CCR4
;

495 
__IO
 
uöt32_t
 
BDTR
;

496 
__IO
 
uöt32_t
 
DCR
;

497 
__IO
 
uöt32_t
 
DMAR
;

498 
__IO
 
uöt32_t
 
OR
;

499 }
	tTIM_Ty≥Def
;

508 
__IO
 
uöt32_t
 
SR
;

509 
__IO
 
uöt32_t
 
DR
;

510 
__IO
 
uöt32_t
 
BRR
;

511 
__IO
 
uöt32_t
 
CR1
;

512 
__IO
 
uöt32_t
 
CR2
;

513 
__IO
 
uöt32_t
 
CR3
;

514 
__IO
 
uöt32_t
 
GTPR
;

515 } 
	tUSART_Ty≥Def
;

523 
__IO
 
uöt16_t
 
EP0R
;

524 
__IO
 
uöt16_t
 
RESERVED0
;

525 
__IO
 
uöt16_t
 
EP1R
;

526 
__IO
 
uöt16_t
 
RESERVED1
;

527 
__IO
 
uöt16_t
 
EP2R
;

528 
__IO
 
uöt16_t
 
RESERVED2
;

529 
__IO
 
uöt16_t
 
EP3R
;

530 
__IO
 
uöt16_t
 
RESERVED3
;

531 
__IO
 
uöt16_t
 
EP4R
;

532 
__IO
 
uöt16_t
 
RESERVED4
;

533 
__IO
 
uöt16_t
 
EP5R
;

534 
__IO
 
uöt16_t
 
RESERVED5
;

535 
__IO
 
uöt16_t
 
EP6R
;

536 
__IO
 
uöt16_t
 
RESERVED6
;

537 
__IO
 
uöt16_t
 
EP7R
;

538 
__IO
 
uöt16_t
 
RESERVED7
[17];

539 
__IO
 
uöt16_t
 
CNTR
;

540 
__IO
 
uöt16_t
 
RESERVED8
;

541 
__IO
 
uöt16_t
 
ISTR
;

542 
__IO
 
uöt16_t
 
RESERVED9
;

543 
__IO
 
uöt16_t
 
FNR
;

544 
__IO
 
uöt16_t
 
RESERVEDA
;

545 
__IO
 
uöt16_t
 
DADDR
;

546 
__IO
 
uöt16_t
 
RESERVEDB
;

547 
__IO
 
uöt16_t
 
BTABLE
;

548 
__IO
 
uöt16_t
 
RESERVEDC
;

549 } 
	tUSB_Ty≥Def
;

558 
__IO
 
uöt32_t
 
CR
;

559 
__IO
 
uöt32_t
 
CFR
;

560 
__IO
 
uöt32_t
 
SR
;

561 } 
	tWWDG_Ty≥Def
;

572 
	#FLASH_BASE
 0x08000000UL

	)

573 
	#FLASH_BANK1_END
 0x0801FFFFUL

	)

574 
	#SRAM_BASE
 0x20000000UL

	)

575 
	#PERIPH_BASE
 0x40000000UL

	)

577 
	#SRAM_BB_BASE
 0x22000000UL

	)

578 
	#PERIPH_BB_BASE
 0x42000000UL

	)

582 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

583 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000UL)

	)

584 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000UL)

	)

586 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x00000000UL)

	)

587 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x00000400UL)

	)

588 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x00000800UL)

	)

589 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x00002800UL)

	)

590 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00002C00UL)

	)

591 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00003000UL)

	)

592 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x00003800UL)

	)

593 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x00004400UL)

	)

594 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x00004800UL)

	)

595 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x00005400UL)

	)

596 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x00005800UL)

	)

597 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x00006400UL)

	)

598 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x00006C00UL)

	)

599 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x00007000UL)

	)

600 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x00000000UL)

	)

601 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x00000400UL)

	)

602 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x00000800UL)

	)

603 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x00000C00UL)

	)

604 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x00001000UL)

	)

605 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x00001400UL)

	)

606 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x00001800UL)

	)

607 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x00002400UL)

	)

608 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x00002800UL)

	)

609 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x00002C00UL)

	)

610 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x00003000UL)

	)

611 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x00003800UL)

	)

614 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x00000000UL)

	)

615 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x00000008UL)

	)

616 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x0000001CUL)

	)

617 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x00000030UL)

	)

618 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x00000044UL)

	)

619 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x00000058UL)

	)

620 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x0000006CUL)

	)

621 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x00000080UL)

	)

622 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x00001000UL)

	)

623 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x00003000UL)

	)

625 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x00002000ULË

	)

626 
	#FLASHSIZE_BASE
 0x1FFFF7E0UL

	)

627 
	#UID_BASE
 0x1FFFF7E8UL

	)

628 
	#OB_BASE
 0x1FFFF800UL

	)

632 
	#DBGMCU_BASE
 0xE0042000UL

	)

635 
	#USB_BASE
 (
APB1PERIPH_BASE
 + 0x00005C00ULË

	)

636 
	#USB_PMAADDR
 (
APB1PERIPH_BASE
 + 0x00006000ULË

	)

647 
	#TIM2
 ((
TIM_Ty≥Def
 *)
TIM2_BASE
)

	)

648 
	#TIM3
 ((
TIM_Ty≥Def
 *)
TIM3_BASE
)

	)

649 
	#TIM4
 ((
TIM_Ty≥Def
 *)
TIM4_BASE
)

	)

650 
	#RTC
 ((
RTC_Ty≥Def
 *)
RTC_BASE
)

	)

651 
	#WWDG
 ((
WWDG_Ty≥Def
 *)
WWDG_BASE
)

	)

652 
	#IWDG
 ((
IWDG_Ty≥Def
 *)
IWDG_BASE
)

	)

653 
	#SPI2
 ((
SPI_Ty≥Def
 *)
SPI2_BASE
)

	)

654 
	#USART2
 ((
USART_Ty≥Def
 *)
USART2_BASE
)

	)

655 
	#USART3
 ((
USART_Ty≥Def
 *)
USART3_BASE
)

	)

656 
	#I2C1
 ((
I2C_Ty≥Def
 *)
I2C1_BASE
)

	)

657 
	#I2C2
 ((
I2C_Ty≥Def
 *)
I2C2_BASE
)

	)

658 
	#USB
 ((
USB_Ty≥Def
 *)
USB_BASE
)

	)

659 
	#CAN1
 ((
CAN_Ty≥Def
 *)
CAN1_BASE
)

	)

660 
	#BKP
 ((
BKP_Ty≥Def
 *)
BKP_BASE
)

	)

661 
	#PWR
 ((
PWR_Ty≥Def
 *)
PWR_BASE
)

	)

662 
	#AFIO
 ((
AFIO_Ty≥Def
 *)
AFIO_BASE
)

	)

663 
	#EXTI
 ((
EXTI_Ty≥Def
 *)
EXTI_BASE
)

	)

664 
	#GPIOA
 ((
GPIO_Ty≥Def
 *)
GPIOA_BASE
)

	)

665 
	#GPIOB
 ((
GPIO_Ty≥Def
 *)
GPIOB_BASE
)

	)

666 
	#GPIOC
 ((
GPIO_Ty≥Def
 *)
GPIOC_BASE
)

	)

667 
	#GPIOD
 ((
GPIO_Ty≥Def
 *)
GPIOD_BASE
)

	)

668 
	#GPIOE
 ((
GPIO_Ty≥Def
 *)
GPIOE_BASE
)

	)

669 
	#ADC1
 ((
ADC_Ty≥Def
 *)
ADC1_BASE
)

	)

670 
	#ADC2
 ((
ADC_Ty≥Def
 *)
ADC2_BASE
)

	)

671 
	#ADC12_COMMON
 ((
ADC_Comm⁄_Ty≥Def
 *)
ADC1_BASE
)

	)

672 
	#TIM1
 ((
TIM_Ty≥Def
 *)
TIM1_BASE
)

	)

673 
	#SPI1
 ((
SPI_Ty≥Def
 *)
SPI1_BASE
)

	)

674 
	#USART1
 ((
USART_Ty≥Def
 *)
USART1_BASE
)

	)

675 
	#DMA1
 ((
DMA_Ty≥Def
 *)
DMA1_BASE
)

	)

676 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l1_BASE
)

	)

677 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l2_BASE
)

	)

678 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l3_BASE
)

	)

679 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l4_BASE
)

	)

680 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l5_BASE
)

	)

681 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l6_BASE
)

	)

682 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l7_BASE
)

	)

683 
	#RCC
 ((
RCC_Ty≥Def
 *)
RCC_BASE
)

	)

684 
	#CRC
 ((
CRC_Ty≥Def
 *)
CRC_BASE
)

	)

685 
	#FLASH
 ((
FLASH_Ty≥Def
 *)
FLASH_R_BASE
)

	)

686 
	#OB
 ((
OB_Ty≥Def
 *)
OB_BASE
)

	)

687 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *)
DBGMCU_BASE
)

	)

701 
	#LSI_STARTUP_TIME
 85U

	)

721 
	#CRC_DR_DR_Pos
 (0U)

	)

722 
	#CRC_DR_DR_Msk
 (0xFFFFFFFFUL << 
CRC_DR_DR_Pos
Ë

	)

723 
	#CRC_DR_DR
 
CRC_DR_DR_Msk


	)

726 
	#CRC_IDR_IDR_Pos
 (0U)

	)

727 
	#CRC_IDR_IDR_Msk
 (0xFFUL << 
CRC_IDR_IDR_Pos
Ë

	)

728 
	#CRC_IDR_IDR
 
CRC_IDR_IDR_Msk


	)

731 
	#CRC_CR_RESET_Pos
 (0U)

	)

732 
	#CRC_CR_RESET_Msk
 (0x1UL << 
CRC_CR_RESET_Pos
Ë

	)

733 
	#CRC_CR_RESET
 
CRC_CR_RESET_Msk


	)

742 
	#PWR_CR_LPDS_Pos
 (0U)

	)

743 
	#PWR_CR_LPDS_Msk
 (0x1UL << 
PWR_CR_LPDS_Pos
Ë

	)

744 
	#PWR_CR_LPDS
 
PWR_CR_LPDS_Msk


	)

745 
	#PWR_CR_PDDS_Pos
 (1U)

	)

746 
	#PWR_CR_PDDS_Msk
 (0x1UL << 
PWR_CR_PDDS_Pos
Ë

	)

747 
	#PWR_CR_PDDS
 
PWR_CR_PDDS_Msk


	)

748 
	#PWR_CR_CWUF_Pos
 (2U)

	)

749 
	#PWR_CR_CWUF_Msk
 (0x1UL << 
PWR_CR_CWUF_Pos
Ë

	)

750 
	#PWR_CR_CWUF
 
PWR_CR_CWUF_Msk


	)

751 
	#PWR_CR_CSBF_Pos
 (3U)

	)

752 
	#PWR_CR_CSBF_Msk
 (0x1UL << 
PWR_CR_CSBF_Pos
Ë

	)

753 
	#PWR_CR_CSBF
 
PWR_CR_CSBF_Msk


	)

754 
	#PWR_CR_PVDE_Pos
 (4U)

	)

755 
	#PWR_CR_PVDE_Msk
 (0x1UL << 
PWR_CR_PVDE_Pos
Ë

	)

756 
	#PWR_CR_PVDE
 
PWR_CR_PVDE_Msk


	)

758 
	#PWR_CR_PLS_Pos
 (5U)

	)

759 
	#PWR_CR_PLS_Msk
 (0x7UL << 
PWR_CR_PLS_Pos
Ë

	)

760 
	#PWR_CR_PLS
 
PWR_CR_PLS_Msk


	)

761 
	#PWR_CR_PLS_0
 (0x1UL << 
PWR_CR_PLS_Pos
Ë

	)

762 
	#PWR_CR_PLS_1
 (0x2UL << 
PWR_CR_PLS_Pos
Ë

	)

763 
	#PWR_CR_PLS_2
 (0x4UL << 
PWR_CR_PLS_Pos
Ë

	)

766 
	#PWR_CR_PLS_LEV0
 0x00000000U

	)

767 
	#PWR_CR_PLS_LEV1
 0x00000020U

	)

768 
	#PWR_CR_PLS_LEV2
 0x00000040U

	)

769 
	#PWR_CR_PLS_LEV3
 0x00000060U

	)

770 
	#PWR_CR_PLS_LEV4
 0x00000080U

	)

771 
	#PWR_CR_PLS_LEV5
 0x000000A0U

	)

772 
	#PWR_CR_PLS_LEV6
 0x000000C0U

	)

773 
	#PWR_CR_PLS_LEV7
 0x000000E0U

	)

776 
	#PWR_CR_PLS_2V2
 
PWR_CR_PLS_LEV0


	)

777 
	#PWR_CR_PLS_2V3
 
PWR_CR_PLS_LEV1


	)

778 
	#PWR_CR_PLS_2V4
 
PWR_CR_PLS_LEV2


	)

779 
	#PWR_CR_PLS_2V5
 
PWR_CR_PLS_LEV3


	)

780 
	#PWR_CR_PLS_2V6
 
PWR_CR_PLS_LEV4


	)

781 
	#PWR_CR_PLS_2V7
 
PWR_CR_PLS_LEV5


	)

782 
	#PWR_CR_PLS_2V8
 
PWR_CR_PLS_LEV6


	)

783 
	#PWR_CR_PLS_2V9
 
PWR_CR_PLS_LEV7


	)

785 
	#PWR_CR_DBP_Pos
 (8U)

	)

786 
	#PWR_CR_DBP_Msk
 (0x1UL << 
PWR_CR_DBP_Pos
Ë

	)

787 
	#PWR_CR_DBP
 
PWR_CR_DBP_Msk


	)

791 
	#PWR_CSR_WUF_Pos
 (0U)

	)

792 
	#PWR_CSR_WUF_Msk
 (0x1UL << 
PWR_CSR_WUF_Pos
Ë

	)

793 
	#PWR_CSR_WUF
 
PWR_CSR_WUF_Msk


	)

794 
	#PWR_CSR_SBF_Pos
 (1U)

	)

795 
	#PWR_CSR_SBF_Msk
 (0x1UL << 
PWR_CSR_SBF_Pos
Ë

	)

796 
	#PWR_CSR_SBF
 
PWR_CSR_SBF_Msk


	)

797 
	#PWR_CSR_PVDO_Pos
 (2U)

	)

798 
	#PWR_CSR_PVDO_Msk
 (0x1UL << 
PWR_CSR_PVDO_Pos
Ë

	)

799 
	#PWR_CSR_PVDO
 
PWR_CSR_PVDO_Msk


	)

800 
	#PWR_CSR_EWUP_Pos
 (8U)

	)

801 
	#PWR_CSR_EWUP_Msk
 (0x1UL << 
PWR_CSR_EWUP_Pos
Ë

	)

802 
	#PWR_CSR_EWUP
 
PWR_CSR_EWUP_Msk


	)

811 
	#BKP_DR1_D_Pos
 (0U)

	)

812 
	#BKP_DR1_D_Msk
 (0xFFFFUL << 
BKP_DR1_D_Pos
Ë

	)

813 
	#BKP_DR1_D
 
BKP_DR1_D_Msk


	)

816 
	#BKP_DR2_D_Pos
 (0U)

	)

817 
	#BKP_DR2_D_Msk
 (0xFFFFUL << 
BKP_DR2_D_Pos
Ë

	)

818 
	#BKP_DR2_D
 
BKP_DR2_D_Msk


	)

821 
	#BKP_DR3_D_Pos
 (0U)

	)

822 
	#BKP_DR3_D_Msk
 (0xFFFFUL << 
BKP_DR3_D_Pos
Ë

	)

823 
	#BKP_DR3_D
 
BKP_DR3_D_Msk


	)

826 
	#BKP_DR4_D_Pos
 (0U)

	)

827 
	#BKP_DR4_D_Msk
 (0xFFFFUL << 
BKP_DR4_D_Pos
Ë

	)

828 
	#BKP_DR4_D
 
BKP_DR4_D_Msk


	)

831 
	#BKP_DR5_D_Pos
 (0U)

	)

832 
	#BKP_DR5_D_Msk
 (0xFFFFUL << 
BKP_DR5_D_Pos
Ë

	)

833 
	#BKP_DR5_D
 
BKP_DR5_D_Msk


	)

836 
	#BKP_DR6_D_Pos
 (0U)

	)

837 
	#BKP_DR6_D_Msk
 (0xFFFFUL << 
BKP_DR6_D_Pos
Ë

	)

838 
	#BKP_DR6_D
 
BKP_DR6_D_Msk


	)

841 
	#BKP_DR7_D_Pos
 (0U)

	)

842 
	#BKP_DR7_D_Msk
 (0xFFFFUL << 
BKP_DR7_D_Pos
Ë

	)

843 
	#BKP_DR7_D
 
BKP_DR7_D_Msk


	)

846 
	#BKP_DR8_D_Pos
 (0U)

	)

847 
	#BKP_DR8_D_Msk
 (0xFFFFUL << 
BKP_DR8_D_Pos
Ë

	)

848 
	#BKP_DR8_D
 
BKP_DR8_D_Msk


	)

851 
	#BKP_DR9_D_Pos
 (0U)

	)

852 
	#BKP_DR9_D_Msk
 (0xFFFFUL << 
BKP_DR9_D_Pos
Ë

	)

853 
	#BKP_DR9_D
 
BKP_DR9_D_Msk


	)

856 
	#BKP_DR10_D_Pos
 (0U)

	)

857 
	#BKP_DR10_D_Msk
 (0xFFFFUL << 
BKP_DR10_D_Pos
Ë

	)

858 
	#BKP_DR10_D
 
BKP_DR10_D_Msk


	)

860 
	#RTC_BKP_NUMBER
 10

	)

863 
	#BKP_RTCCR_CAL_Pos
 (0U)

	)

864 
	#BKP_RTCCR_CAL_Msk
 (0x7FUL << 
BKP_RTCCR_CAL_Pos
Ë

	)

865 
	#BKP_RTCCR_CAL
 
BKP_RTCCR_CAL_Msk


	)

866 
	#BKP_RTCCR_CCO_Pos
 (7U)

	)

867 
	#BKP_RTCCR_CCO_Msk
 (0x1UL << 
BKP_RTCCR_CCO_Pos
Ë

	)

868 
	#BKP_RTCCR_CCO
 
BKP_RTCCR_CCO_Msk


	)

869 
	#BKP_RTCCR_ASOE_Pos
 (8U)

	)

870 
	#BKP_RTCCR_ASOE_Msk
 (0x1UL << 
BKP_RTCCR_ASOE_Pos
Ë

	)

871 
	#BKP_RTCCR_ASOE
 
BKP_RTCCR_ASOE_Msk


	)

872 
	#BKP_RTCCR_ASOS_Pos
 (9U)

	)

873 
	#BKP_RTCCR_ASOS_Msk
 (0x1UL << 
BKP_RTCCR_ASOS_Pos
Ë

	)

874 
	#BKP_RTCCR_ASOS
 
BKP_RTCCR_ASOS_Msk


	)

877 
	#BKP_CR_TPE_Pos
 (0U)

	)

878 
	#BKP_CR_TPE_Msk
 (0x1UL << 
BKP_CR_TPE_Pos
Ë

	)

879 
	#BKP_CR_TPE
 
BKP_CR_TPE_Msk


	)

880 
	#BKP_CR_TPAL_Pos
 (1U)

	)

881 
	#BKP_CR_TPAL_Msk
 (0x1UL << 
BKP_CR_TPAL_Pos
Ë

	)

882 
	#BKP_CR_TPAL
 
BKP_CR_TPAL_Msk


	)

885 
	#BKP_CSR_CTE_Pos
 (0U)

	)

886 
	#BKP_CSR_CTE_Msk
 (0x1UL << 
BKP_CSR_CTE_Pos
Ë

	)

887 
	#BKP_CSR_CTE
 
BKP_CSR_CTE_Msk


	)

888 
	#BKP_CSR_CTI_Pos
 (1U)

	)

889 
	#BKP_CSR_CTI_Msk
 (0x1UL << 
BKP_CSR_CTI_Pos
Ë

	)

890 
	#BKP_CSR_CTI
 
BKP_CSR_CTI_Msk


	)

891 
	#BKP_CSR_TPIE_Pos
 (2U)

	)

892 
	#BKP_CSR_TPIE_Msk
 (0x1UL << 
BKP_CSR_TPIE_Pos
Ë

	)

893 
	#BKP_CSR_TPIE
 
BKP_CSR_TPIE_Msk


	)

894 
	#BKP_CSR_TEF_Pos
 (8U)

	)

895 
	#BKP_CSR_TEF_Msk
 (0x1UL << 
BKP_CSR_TEF_Pos
Ë

	)

896 
	#BKP_CSR_TEF
 
BKP_CSR_TEF_Msk


	)

897 
	#BKP_CSR_TIF_Pos
 (9U)

	)

898 
	#BKP_CSR_TIF_Msk
 (0x1UL << 
BKP_CSR_TIF_Pos
Ë

	)

899 
	#BKP_CSR_TIF
 
BKP_CSR_TIF_Msk


	)

908 
	#RCC_CR_HSION_Pos
 (0U)

	)

909 
	#RCC_CR_HSION_Msk
 (0x1UL << 
RCC_CR_HSION_Pos
Ë

	)

910 
	#RCC_CR_HSION
 
RCC_CR_HSION_Msk


	)

911 
	#RCC_CR_HSIRDY_Pos
 (1U)

	)

912 
	#RCC_CR_HSIRDY_Msk
 (0x1UL << 
RCC_CR_HSIRDY_Pos
Ë

	)

913 
	#RCC_CR_HSIRDY
 
RCC_CR_HSIRDY_Msk


	)

914 
	#RCC_CR_HSITRIM_Pos
 (3U)

	)

915 
	#RCC_CR_HSITRIM_Msk
 (0x1FUL << 
RCC_CR_HSITRIM_Pos
Ë

	)

916 
	#RCC_CR_HSITRIM
 
RCC_CR_HSITRIM_Msk


	)

917 
	#RCC_CR_HSICAL_Pos
 (8U)

	)

918 
	#RCC_CR_HSICAL_Msk
 (0xFFUL << 
RCC_CR_HSICAL_Pos
Ë

	)

919 
	#RCC_CR_HSICAL
 
RCC_CR_HSICAL_Msk


	)

920 
	#RCC_CR_HSEON_Pos
 (16U)

	)

921 
	#RCC_CR_HSEON_Msk
 (0x1UL << 
RCC_CR_HSEON_Pos
Ë

	)

922 
	#RCC_CR_HSEON
 
RCC_CR_HSEON_Msk


	)

923 
	#RCC_CR_HSERDY_Pos
 (17U)

	)

924 
	#RCC_CR_HSERDY_Msk
 (0x1UL << 
RCC_CR_HSERDY_Pos
Ë

	)

925 
	#RCC_CR_HSERDY
 
RCC_CR_HSERDY_Msk


	)

926 
	#RCC_CR_HSEBYP_Pos
 (18U)

	)

927 
	#RCC_CR_HSEBYP_Msk
 (0x1UL << 
RCC_CR_HSEBYP_Pos
Ë

	)

928 
	#RCC_CR_HSEBYP
 
RCC_CR_HSEBYP_Msk


	)

929 
	#RCC_CR_CSSON_Pos
 (19U)

	)

930 
	#RCC_CR_CSSON_Msk
 (0x1UL << 
RCC_CR_CSSON_Pos
Ë

	)

931 
	#RCC_CR_CSSON
 
RCC_CR_CSSON_Msk


	)

932 
	#RCC_CR_PLLON_Pos
 (24U)

	)

933 
	#RCC_CR_PLLON_Msk
 (0x1UL << 
RCC_CR_PLLON_Pos
Ë

	)

934 
	#RCC_CR_PLLON
 
RCC_CR_PLLON_Msk


	)

935 
	#RCC_CR_PLLRDY_Pos
 (25U)

	)

936 
	#RCC_CR_PLLRDY_Msk
 (0x1UL << 
RCC_CR_PLLRDY_Pos
Ë

	)

937 
	#RCC_CR_PLLRDY
 
RCC_CR_PLLRDY_Msk


	)

942 
	#RCC_CFGR_SW_Pos
 (0U)

	)

943 
	#RCC_CFGR_SW_Msk
 (0x3UL << 
RCC_CFGR_SW_Pos
Ë

	)

944 
	#RCC_CFGR_SW
 
RCC_CFGR_SW_Msk


	)

945 
	#RCC_CFGR_SW_0
 (0x1UL << 
RCC_CFGR_SW_Pos
Ë

	)

946 
	#RCC_CFGR_SW_1
 (0x2UL << 
RCC_CFGR_SW_Pos
Ë

	)

948 
	#RCC_CFGR_SW_HSI
 0x00000000U

	)

949 
	#RCC_CFGR_SW_HSE
 0x00000001U

	)

950 
	#RCC_CFGR_SW_PLL
 0x00000002U

	)

953 
	#RCC_CFGR_SWS_Pos
 (2U)

	)

954 
	#RCC_CFGR_SWS_Msk
 (0x3UL << 
RCC_CFGR_SWS_Pos
Ë

	)

955 
	#RCC_CFGR_SWS
 
RCC_CFGR_SWS_Msk


	)

956 
	#RCC_CFGR_SWS_0
 (0x1UL << 
RCC_CFGR_SWS_Pos
Ë

	)

957 
	#RCC_CFGR_SWS_1
 (0x2UL << 
RCC_CFGR_SWS_Pos
Ë

	)

959 
	#RCC_CFGR_SWS_HSI
 0x00000000U

	)

960 
	#RCC_CFGR_SWS_HSE
 0x00000004U

	)

961 
	#RCC_CFGR_SWS_PLL
 0x00000008U

	)

964 
	#RCC_CFGR_HPRE_Pos
 (4U)

	)

965 
	#RCC_CFGR_HPRE_Msk
 (0xFUL << 
RCC_CFGR_HPRE_Pos
Ë

	)

966 
	#RCC_CFGR_HPRE
 
RCC_CFGR_HPRE_Msk


	)

967 
	#RCC_CFGR_HPRE_0
 (0x1UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

968 
	#RCC_CFGR_HPRE_1
 (0x2UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

969 
	#RCC_CFGR_HPRE_2
 (0x4UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

970 
	#RCC_CFGR_HPRE_3
 (0x8UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

972 
	#RCC_CFGR_HPRE_DIV1
 0x00000000U

	)

973 
	#RCC_CFGR_HPRE_DIV2
 0x00000080U

	)

974 
	#RCC_CFGR_HPRE_DIV4
 0x00000090U

	)

975 
	#RCC_CFGR_HPRE_DIV8
 0x000000A0U

	)

976 
	#RCC_CFGR_HPRE_DIV16
 0x000000B0U

	)

977 
	#RCC_CFGR_HPRE_DIV64
 0x000000C0U

	)

978 
	#RCC_CFGR_HPRE_DIV128
 0x000000D0U

	)

979 
	#RCC_CFGR_HPRE_DIV256
 0x000000E0U

	)

980 
	#RCC_CFGR_HPRE_DIV512
 0x000000F0U

	)

983 
	#RCC_CFGR_PPRE1_Pos
 (8U)

	)

984 
	#RCC_CFGR_PPRE1_Msk
 (0x7UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

985 
	#RCC_CFGR_PPRE1
 
RCC_CFGR_PPRE1_Msk


	)

986 
	#RCC_CFGR_PPRE1_0
 (0x1UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

987 
	#RCC_CFGR_PPRE1_1
 (0x2UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

988 
	#RCC_CFGR_PPRE1_2
 (0x4UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

990 
	#RCC_CFGR_PPRE1_DIV1
 0x00000000U

	)

991 
	#RCC_CFGR_PPRE1_DIV2
 0x00000400U

	)

992 
	#RCC_CFGR_PPRE1_DIV4
 0x00000500U

	)

993 
	#RCC_CFGR_PPRE1_DIV8
 0x00000600U

	)

994 
	#RCC_CFGR_PPRE1_DIV16
 0x00000700U

	)

997 
	#RCC_CFGR_PPRE2_Pos
 (11U)

	)

998 
	#RCC_CFGR_PPRE2_Msk
 (0x7UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

999 
	#RCC_CFGR_PPRE2
 
RCC_CFGR_PPRE2_Msk


	)

1000 
	#RCC_CFGR_PPRE2_0
 (0x1UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

1001 
	#RCC_CFGR_PPRE2_1
 (0x2UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

1002 
	#RCC_CFGR_PPRE2_2
 (0x4UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

1004 
	#RCC_CFGR_PPRE2_DIV1
 0x00000000U

	)

1005 
	#RCC_CFGR_PPRE2_DIV2
 0x00002000U

	)

1006 
	#RCC_CFGR_PPRE2_DIV4
 0x00002800U

	)

1007 
	#RCC_CFGR_PPRE2_DIV8
 0x00003000U

	)

1008 
	#RCC_CFGR_PPRE2_DIV16
 0x00003800U

	)

1011 
	#RCC_CFGR_ADCPRE_Pos
 (14U)

	)

1012 
	#RCC_CFGR_ADCPRE_Msk
 (0x3UL << 
RCC_CFGR_ADCPRE_Pos
Ë

	)

1013 
	#RCC_CFGR_ADCPRE
 
RCC_CFGR_ADCPRE_Msk


	)

1014 
	#RCC_CFGR_ADCPRE_0
 (0x1UL << 
RCC_CFGR_ADCPRE_Pos
Ë

	)

1015 
	#RCC_CFGR_ADCPRE_1
 (0x2UL << 
RCC_CFGR_ADCPRE_Pos
Ë

	)

1017 
	#RCC_CFGR_ADCPRE_DIV2
 0x00000000U

	)

1018 
	#RCC_CFGR_ADCPRE_DIV4
 0x00004000U

	)

1019 
	#RCC_CFGR_ADCPRE_DIV6
 0x00008000U

	)

1020 
	#RCC_CFGR_ADCPRE_DIV8
 0x0000C000U

	)

1022 
	#RCC_CFGR_PLLSRC_Pos
 (16U)

	)

1023 
	#RCC_CFGR_PLLSRC_Msk
 (0x1UL << 
RCC_CFGR_PLLSRC_Pos
Ë

	)

1024 
	#RCC_CFGR_PLLSRC
 
RCC_CFGR_PLLSRC_Msk


	)

1026 
	#RCC_CFGR_PLLXTPRE_Pos
 (17U)

	)

1027 
	#RCC_CFGR_PLLXTPRE_Msk
 (0x1UL << 
RCC_CFGR_PLLXTPRE_Pos
Ë

	)

1028 
	#RCC_CFGR_PLLXTPRE
 
RCC_CFGR_PLLXTPRE_Msk


	)

1031 
	#RCC_CFGR_PLLMULL_Pos
 (18U)

	)

1032 
	#RCC_CFGR_PLLMULL_Msk
 (0xFUL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1033 
	#RCC_CFGR_PLLMULL
 
RCC_CFGR_PLLMULL_Msk


	)

1034 
	#RCC_CFGR_PLLMULL_0
 (0x1UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1035 
	#RCC_CFGR_PLLMULL_1
 (0x2UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1036 
	#RCC_CFGR_PLLMULL_2
 (0x4UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1037 
	#RCC_CFGR_PLLMULL_3
 (0x8UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1039 
	#RCC_CFGR_PLLXTPRE_HSE
 0x00000000U

	)

1040 
	#RCC_CFGR_PLLXTPRE_HSE_DIV2
 0x00020000U

	)

1042 
	#RCC_CFGR_PLLMULL2
 0x00000000U

	)

1043 
	#RCC_CFGR_PLLMULL3_Pos
 (18U)

	)

1044 
	#RCC_CFGR_PLLMULL3_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL3_Pos
Ë

	)

1045 
	#RCC_CFGR_PLLMULL3
 
RCC_CFGR_PLLMULL3_Msk


	)

1046 
	#RCC_CFGR_PLLMULL4_Pos
 (19U)

	)

1047 
	#RCC_CFGR_PLLMULL4_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL4_Pos
Ë

	)

1048 
	#RCC_CFGR_PLLMULL4
 
RCC_CFGR_PLLMULL4_Msk


	)

1049 
	#RCC_CFGR_PLLMULL5_Pos
 (18U)

	)

1050 
	#RCC_CFGR_PLLMULL5_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL5_Pos
Ë

	)

1051 
	#RCC_CFGR_PLLMULL5
 
RCC_CFGR_PLLMULL5_Msk


	)

1052 
	#RCC_CFGR_PLLMULL6_Pos
 (20U)

	)

1053 
	#RCC_CFGR_PLLMULL6_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL6_Pos
Ë

	)

1054 
	#RCC_CFGR_PLLMULL6
 
RCC_CFGR_PLLMULL6_Msk


	)

1055 
	#RCC_CFGR_PLLMULL7_Pos
 (18U)

	)

1056 
	#RCC_CFGR_PLLMULL7_Msk
 (0x5UL << 
RCC_CFGR_PLLMULL7_Pos
Ë

	)

1057 
	#RCC_CFGR_PLLMULL7
 
RCC_CFGR_PLLMULL7_Msk


	)

1058 
	#RCC_CFGR_PLLMULL8_Pos
 (19U)

	)

1059 
	#RCC_CFGR_PLLMULL8_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL8_Pos
Ë

	)

1060 
	#RCC_CFGR_PLLMULL8
 
RCC_CFGR_PLLMULL8_Msk


	)

1061 
	#RCC_CFGR_PLLMULL9_Pos
 (18U)

	)

1062 
	#RCC_CFGR_PLLMULL9_Msk
 (0x7UL << 
RCC_CFGR_PLLMULL9_Pos
Ë

	)

1063 
	#RCC_CFGR_PLLMULL9
 
RCC_CFGR_PLLMULL9_Msk


	)

1064 
	#RCC_CFGR_PLLMULL10_Pos
 (21U)

	)

1065 
	#RCC_CFGR_PLLMULL10_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL10_Pos
Ë

	)

1066 
	#RCC_CFGR_PLLMULL10
 
RCC_CFGR_PLLMULL10_Msk


	)

1067 
	#RCC_CFGR_PLLMULL11_Pos
 (18U)

	)

1068 
	#RCC_CFGR_PLLMULL11_Msk
 (0x9UL << 
RCC_CFGR_PLLMULL11_Pos
Ë

	)

1069 
	#RCC_CFGR_PLLMULL11
 
RCC_CFGR_PLLMULL11_Msk


	)

1070 
	#RCC_CFGR_PLLMULL12_Pos
 (19U)

	)

1071 
	#RCC_CFGR_PLLMULL12_Msk
 (0x5UL << 
RCC_CFGR_PLLMULL12_Pos
Ë

	)

1072 
	#RCC_CFGR_PLLMULL12
 
RCC_CFGR_PLLMULL12_Msk


	)

1073 
	#RCC_CFGR_PLLMULL13_Pos
 (18U)

	)

1074 
	#RCC_CFGR_PLLMULL13_Msk
 (0xBUL << 
RCC_CFGR_PLLMULL13_Pos
Ë

	)

1075 
	#RCC_CFGR_PLLMULL13
 
RCC_CFGR_PLLMULL13_Msk


	)

1076 
	#RCC_CFGR_PLLMULL14_Pos
 (20U)

	)

1077 
	#RCC_CFGR_PLLMULL14_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL14_Pos
Ë

	)

1078 
	#RCC_CFGR_PLLMULL14
 
RCC_CFGR_PLLMULL14_Msk


	)

1079 
	#RCC_CFGR_PLLMULL15_Pos
 (18U)

	)

1080 
	#RCC_CFGR_PLLMULL15_Msk
 (0xDUL << 
RCC_CFGR_PLLMULL15_Pos
Ë

	)

1081 
	#RCC_CFGR_PLLMULL15
 
RCC_CFGR_PLLMULL15_Msk


	)

1082 
	#RCC_CFGR_PLLMULL16_Pos
 (19U)

	)

1083 
	#RCC_CFGR_PLLMULL16_Msk
 (0x7UL << 
RCC_CFGR_PLLMULL16_Pos
Ë

	)

1084 
	#RCC_CFGR_PLLMULL16
 
RCC_CFGR_PLLMULL16_Msk


	)

1085 
	#RCC_CFGR_USBPRE_Pos
 (22U)

	)

1086 
	#RCC_CFGR_USBPRE_Msk
 (0x1UL << 
RCC_CFGR_USBPRE_Pos
Ë

	)

1087 
	#RCC_CFGR_USBPRE
 
RCC_CFGR_USBPRE_Msk


	)

1090 
	#RCC_CFGR_MCO_Pos
 (24U)

	)

1091 
	#RCC_CFGR_MCO_Msk
 (0x7UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1092 
	#RCC_CFGR_MCO
 
RCC_CFGR_MCO_Msk


	)

1093 
	#RCC_CFGR_MCO_0
 (0x1UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1094 
	#RCC_CFGR_MCO_1
 (0x2UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1095 
	#RCC_CFGR_MCO_2
 (0x4UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1097 
	#RCC_CFGR_MCO_NOCLOCK
 0x00000000U

	)

1098 
	#RCC_CFGR_MCO_SYSCLK
 0x04000000U

	)

1099 
	#RCC_CFGR_MCO_HSI
 0x05000000U

	)

1100 
	#RCC_CFGR_MCO_HSE
 0x06000000U

	)

1101 
	#RCC_CFGR_MCO_PLLCLK_DIV2
 0x07000000U

	)

1104 
	#RCC_CFGR_MCOSEL
 
RCC_CFGR_MCO


	)

1105 
	#RCC_CFGR_MCOSEL_0
 
RCC_CFGR_MCO_0


	)

1106 
	#RCC_CFGR_MCOSEL_1
 
RCC_CFGR_MCO_1


	)

1107 
	#RCC_CFGR_MCOSEL_2
 
RCC_CFGR_MCO_2


	)

1108 
	#RCC_CFGR_MCOSEL_NOCLOCK
 
RCC_CFGR_MCO_NOCLOCK


	)

1109 
	#RCC_CFGR_MCOSEL_SYSCLK
 
RCC_CFGR_MCO_SYSCLK


	)

1110 
	#RCC_CFGR_MCOSEL_HSI
 
RCC_CFGR_MCO_HSI


	)

1111 
	#RCC_CFGR_MCOSEL_HSE
 
RCC_CFGR_MCO_HSE


	)

1112 
	#RCC_CFGR_MCOSEL_PLL_DIV2
 
RCC_CFGR_MCO_PLLCLK_DIV2


	)

1115 
	#RCC_CIR_LSIRDYF_Pos
 (0U)

	)

1116 
	#RCC_CIR_LSIRDYF_Msk
 (0x1UL << 
RCC_CIR_LSIRDYF_Pos
Ë

	)

1117 
	#RCC_CIR_LSIRDYF
 
RCC_CIR_LSIRDYF_Msk


	)

1118 
	#RCC_CIR_LSERDYF_Pos
 (1U)

	)

1119 
	#RCC_CIR_LSERDYF_Msk
 (0x1UL << 
RCC_CIR_LSERDYF_Pos
Ë

	)

1120 
	#RCC_CIR_LSERDYF
 
RCC_CIR_LSERDYF_Msk


	)

1121 
	#RCC_CIR_HSIRDYF_Pos
 (2U)

	)

1122 
	#RCC_CIR_HSIRDYF_Msk
 (0x1UL << 
RCC_CIR_HSIRDYF_Pos
Ë

	)

1123 
	#RCC_CIR_HSIRDYF
 
RCC_CIR_HSIRDYF_Msk


	)

1124 
	#RCC_CIR_HSERDYF_Pos
 (3U)

	)

1125 
	#RCC_CIR_HSERDYF_Msk
 (0x1UL << 
RCC_CIR_HSERDYF_Pos
Ë

	)

1126 
	#RCC_CIR_HSERDYF
 
RCC_CIR_HSERDYF_Msk


	)

1127 
	#RCC_CIR_PLLRDYF_Pos
 (4U)

	)

1128 
	#RCC_CIR_PLLRDYF_Msk
 (0x1UL << 
RCC_CIR_PLLRDYF_Pos
Ë

	)

1129 
	#RCC_CIR_PLLRDYF
 
RCC_CIR_PLLRDYF_Msk


	)

1130 
	#RCC_CIR_CSSF_Pos
 (7U)

	)

1131 
	#RCC_CIR_CSSF_Msk
 (0x1UL << 
RCC_CIR_CSSF_Pos
Ë

	)

1132 
	#RCC_CIR_CSSF
 
RCC_CIR_CSSF_Msk


	)

1133 
	#RCC_CIR_LSIRDYIE_Pos
 (8U)

	)

1134 
	#RCC_CIR_LSIRDYIE_Msk
 (0x1UL << 
RCC_CIR_LSIRDYIE_Pos
Ë

	)

1135 
	#RCC_CIR_LSIRDYIE
 
RCC_CIR_LSIRDYIE_Msk


	)

1136 
	#RCC_CIR_LSERDYIE_Pos
 (9U)

	)

1137 
	#RCC_CIR_LSERDYIE_Msk
 (0x1UL << 
RCC_CIR_LSERDYIE_Pos
Ë

	)

1138 
	#RCC_CIR_LSERDYIE
 
RCC_CIR_LSERDYIE_Msk


	)

1139 
	#RCC_CIR_HSIRDYIE_Pos
 (10U)

	)

1140 
	#RCC_CIR_HSIRDYIE_Msk
 (0x1UL << 
RCC_CIR_HSIRDYIE_Pos
Ë

	)

1141 
	#RCC_CIR_HSIRDYIE
 
RCC_CIR_HSIRDYIE_Msk


	)

1142 
	#RCC_CIR_HSERDYIE_Pos
 (11U)

	)

1143 
	#RCC_CIR_HSERDYIE_Msk
 (0x1UL << 
RCC_CIR_HSERDYIE_Pos
Ë

	)

1144 
	#RCC_CIR_HSERDYIE
 
RCC_CIR_HSERDYIE_Msk


	)

1145 
	#RCC_CIR_PLLRDYIE_Pos
 (12U)

	)

1146 
	#RCC_CIR_PLLRDYIE_Msk
 (0x1UL << 
RCC_CIR_PLLRDYIE_Pos
Ë

	)

1147 
	#RCC_CIR_PLLRDYIE
 
RCC_CIR_PLLRDYIE_Msk


	)

1148 
	#RCC_CIR_LSIRDYC_Pos
 (16U)

	)

1149 
	#RCC_CIR_LSIRDYC_Msk
 (0x1UL << 
RCC_CIR_LSIRDYC_Pos
Ë

	)

1150 
	#RCC_CIR_LSIRDYC
 
RCC_CIR_LSIRDYC_Msk


	)

1151 
	#RCC_CIR_LSERDYC_Pos
 (17U)

	)

1152 
	#RCC_CIR_LSERDYC_Msk
 (0x1UL << 
RCC_CIR_LSERDYC_Pos
Ë

	)

1153 
	#RCC_CIR_LSERDYC
 
RCC_CIR_LSERDYC_Msk


	)

1154 
	#RCC_CIR_HSIRDYC_Pos
 (18U)

	)

1155 
	#RCC_CIR_HSIRDYC_Msk
 (0x1UL << 
RCC_CIR_HSIRDYC_Pos
Ë

	)

1156 
	#RCC_CIR_HSIRDYC
 
RCC_CIR_HSIRDYC_Msk


	)

1157 
	#RCC_CIR_HSERDYC_Pos
 (19U)

	)

1158 
	#RCC_CIR_HSERDYC_Msk
 (0x1UL << 
RCC_CIR_HSERDYC_Pos
Ë

	)

1159 
	#RCC_CIR_HSERDYC
 
RCC_CIR_HSERDYC_Msk


	)

1160 
	#RCC_CIR_PLLRDYC_Pos
 (20U)

	)

1161 
	#RCC_CIR_PLLRDYC_Msk
 (0x1UL << 
RCC_CIR_PLLRDYC_Pos
Ë

	)

1162 
	#RCC_CIR_PLLRDYC
 
RCC_CIR_PLLRDYC_Msk


	)

1163 
	#RCC_CIR_CSSC_Pos
 (23U)

	)

1164 
	#RCC_CIR_CSSC_Msk
 (0x1UL << 
RCC_CIR_CSSC_Pos
Ë

	)

1165 
	#RCC_CIR_CSSC
 
RCC_CIR_CSSC_Msk


	)

1169 
	#RCC_APB2RSTR_AFIORST_Pos
 (0U)

	)

1170 
	#RCC_APB2RSTR_AFIORST_Msk
 (0x1UL << 
RCC_APB2RSTR_AFIORST_Pos
Ë

	)

1171 
	#RCC_APB2RSTR_AFIORST
 
RCC_APB2RSTR_AFIORST_Msk


	)

1172 
	#RCC_APB2RSTR_IOPARST_Pos
 (2U)

	)

1173 
	#RCC_APB2RSTR_IOPARST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPARST_Pos
Ë

	)

1174 
	#RCC_APB2RSTR_IOPARST
 
RCC_APB2RSTR_IOPARST_Msk


	)

1175 
	#RCC_APB2RSTR_IOPBRST_Pos
 (3U)

	)

1176 
	#RCC_APB2RSTR_IOPBRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPBRST_Pos
Ë

	)

1177 
	#RCC_APB2RSTR_IOPBRST
 
RCC_APB2RSTR_IOPBRST_Msk


	)

1178 
	#RCC_APB2RSTR_IOPCRST_Pos
 (4U)

	)

1179 
	#RCC_APB2RSTR_IOPCRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPCRST_Pos
Ë

	)

1180 
	#RCC_APB2RSTR_IOPCRST
 
RCC_APB2RSTR_IOPCRST_Msk


	)

1181 
	#RCC_APB2RSTR_IOPDRST_Pos
 (5U)

	)

1182 
	#RCC_APB2RSTR_IOPDRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPDRST_Pos
Ë

	)

1183 
	#RCC_APB2RSTR_IOPDRST
 
RCC_APB2RSTR_IOPDRST_Msk


	)

1184 
	#RCC_APB2RSTR_ADC1RST_Pos
 (9U)

	)

1185 
	#RCC_APB2RSTR_ADC1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC1RST_Pos
Ë

	)

1186 
	#RCC_APB2RSTR_ADC1RST
 
RCC_APB2RSTR_ADC1RST_Msk


	)

1188 
	#RCC_APB2RSTR_ADC2RST_Pos
 (10U)

	)

1189 
	#RCC_APB2RSTR_ADC2RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC2RST_Pos
Ë

	)

1190 
	#RCC_APB2RSTR_ADC2RST
 
RCC_APB2RSTR_ADC2RST_Msk


	)

1192 
	#RCC_APB2RSTR_TIM1RST_Pos
 (11U)

	)

1193 
	#RCC_APB2RSTR_TIM1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_TIM1RST_Pos
Ë

	)

1194 
	#RCC_APB2RSTR_TIM1RST
 
RCC_APB2RSTR_TIM1RST_Msk


	)

1195 
	#RCC_APB2RSTR_SPI1RST_Pos
 (12U)

	)

1196 
	#RCC_APB2RSTR_SPI1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_SPI1RST_Pos
Ë

	)

1197 
	#RCC_APB2RSTR_SPI1RST
 
RCC_APB2RSTR_SPI1RST_Msk


	)

1198 
	#RCC_APB2RSTR_USART1RST_Pos
 (14U)

	)

1199 
	#RCC_APB2RSTR_USART1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_USART1RST_Pos
Ë

	)

1200 
	#RCC_APB2RSTR_USART1RST
 
RCC_APB2RSTR_USART1RST_Msk


	)

1203 
	#RCC_APB2RSTR_IOPERST_Pos
 (6U)

	)

1204 
	#RCC_APB2RSTR_IOPERST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPERST_Pos
Ë

	)

1205 
	#RCC_APB2RSTR_IOPERST
 
RCC_APB2RSTR_IOPERST_Msk


	)

1211 
	#RCC_APB1RSTR_TIM2RST_Pos
 (0U)

	)

1212 
	#RCC_APB1RSTR_TIM2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM2RST_Pos
Ë

	)

1213 
	#RCC_APB1RSTR_TIM2RST
 
RCC_APB1RSTR_TIM2RST_Msk


	)

1214 
	#RCC_APB1RSTR_TIM3RST_Pos
 (1U)

	)

1215 
	#RCC_APB1RSTR_TIM3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM3RST_Pos
Ë

	)

1216 
	#RCC_APB1RSTR_TIM3RST
 
RCC_APB1RSTR_TIM3RST_Msk


	)

1217 
	#RCC_APB1RSTR_WWDGRST_Pos
 (11U)

	)

1218 
	#RCC_APB1RSTR_WWDGRST_Msk
 (0x1UL << 
RCC_APB1RSTR_WWDGRST_Pos
Ë

	)

1219 
	#RCC_APB1RSTR_WWDGRST
 
RCC_APB1RSTR_WWDGRST_Msk


	)

1220 
	#RCC_APB1RSTR_USART2RST_Pos
 (17U)

	)

1221 
	#RCC_APB1RSTR_USART2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_USART2RST_Pos
Ë

	)

1222 
	#RCC_APB1RSTR_USART2RST
 
RCC_APB1RSTR_USART2RST_Msk


	)

1223 
	#RCC_APB1RSTR_I2C1RST_Pos
 (21U)

	)

1224 
	#RCC_APB1RSTR_I2C1RST_Msk
 (0x1UL << 
RCC_APB1RSTR_I2C1RST_Pos
Ë

	)

1225 
	#RCC_APB1RSTR_I2C1RST
 
RCC_APB1RSTR_I2C1RST_Msk


	)

1227 
	#RCC_APB1RSTR_CAN1RST_Pos
 (25U)

	)

1228 
	#RCC_APB1RSTR_CAN1RST_Msk
 (0x1UL << 
RCC_APB1RSTR_CAN1RST_Pos
Ë

	)

1229 
	#RCC_APB1RSTR_CAN1RST
 
RCC_APB1RSTR_CAN1RST_Msk


	)

1231 
	#RCC_APB1RSTR_BKPRST_Pos
 (27U)

	)

1232 
	#RCC_APB1RSTR_BKPRST_Msk
 (0x1UL << 
RCC_APB1RSTR_BKPRST_Pos
Ë

	)

1233 
	#RCC_APB1RSTR_BKPRST
 
RCC_APB1RSTR_BKPRST_Msk


	)

1234 
	#RCC_APB1RSTR_PWRRST_Pos
 (28U)

	)

1235 
	#RCC_APB1RSTR_PWRRST_Msk
 (0x1UL << 
RCC_APB1RSTR_PWRRST_Pos
Ë

	)

1236 
	#RCC_APB1RSTR_PWRRST
 
RCC_APB1RSTR_PWRRST_Msk


	)

1238 
	#RCC_APB1RSTR_TIM4RST_Pos
 (2U)

	)

1239 
	#RCC_APB1RSTR_TIM4RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM4RST_Pos
Ë

	)

1240 
	#RCC_APB1RSTR_TIM4RST
 
RCC_APB1RSTR_TIM4RST_Msk


	)

1241 
	#RCC_APB1RSTR_SPI2RST_Pos
 (14U)

	)

1242 
	#RCC_APB1RSTR_SPI2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_SPI2RST_Pos
Ë

	)

1243 
	#RCC_APB1RSTR_SPI2RST
 
RCC_APB1RSTR_SPI2RST_Msk


	)

1244 
	#RCC_APB1RSTR_USART3RST_Pos
 (18U)

	)

1245 
	#RCC_APB1RSTR_USART3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_USART3RST_Pos
Ë

	)

1246 
	#RCC_APB1RSTR_USART3RST
 
RCC_APB1RSTR_USART3RST_Msk


	)

1247 
	#RCC_APB1RSTR_I2C2RST_Pos
 (22U)

	)

1248 
	#RCC_APB1RSTR_I2C2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_I2C2RST_Pos
Ë

	)

1249 
	#RCC_APB1RSTR_I2C2RST
 
RCC_APB1RSTR_I2C2RST_Msk


	)

1251 
	#RCC_APB1RSTR_USBRST_Pos
 (23U)

	)

1252 
	#RCC_APB1RSTR_USBRST_Msk
 (0x1UL << 
RCC_APB1RSTR_USBRST_Pos
Ë

	)

1253 
	#RCC_APB1RSTR_USBRST
 
RCC_APB1RSTR_USBRST_Msk


	)

1261 
	#RCC_AHBENR_DMA1EN_Pos
 (0U)

	)

1262 
	#RCC_AHBENR_DMA1EN_Msk
 (0x1UL << 
RCC_AHBENR_DMA1EN_Pos
Ë

	)

1263 
	#RCC_AHBENR_DMA1EN
 
RCC_AHBENR_DMA1EN_Msk


	)

1264 
	#RCC_AHBENR_SRAMEN_Pos
 (2U)

	)

1265 
	#RCC_AHBENR_SRAMEN_Msk
 (0x1UL << 
RCC_AHBENR_SRAMEN_Pos
Ë

	)

1266 
	#RCC_AHBENR_SRAMEN
 
RCC_AHBENR_SRAMEN_Msk


	)

1267 
	#RCC_AHBENR_FLITFEN_Pos
 (4U)

	)

1268 
	#RCC_AHBENR_FLITFEN_Msk
 (0x1UL << 
RCC_AHBENR_FLITFEN_Pos
Ë

	)

1269 
	#RCC_AHBENR_FLITFEN
 
RCC_AHBENR_FLITFEN_Msk


	)

1270 
	#RCC_AHBENR_CRCEN_Pos
 (6U)

	)

1271 
	#RCC_AHBENR_CRCEN_Msk
 (0x1UL << 
RCC_AHBENR_CRCEN_Pos
Ë

	)

1272 
	#RCC_AHBENR_CRCEN
 
RCC_AHBENR_CRCEN_Msk


	)

1278 
	#RCC_APB2ENR_AFIOEN_Pos
 (0U)

	)

1279 
	#RCC_APB2ENR_AFIOEN_Msk
 (0x1UL << 
RCC_APB2ENR_AFIOEN_Pos
Ë

	)

1280 
	#RCC_APB2ENR_AFIOEN
 
RCC_APB2ENR_AFIOEN_Msk


	)

1281 
	#RCC_APB2ENR_IOPAEN_Pos
 (2U)

	)

1282 
	#RCC_APB2ENR_IOPAEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPAEN_Pos
Ë

	)

1283 
	#RCC_APB2ENR_IOPAEN
 
RCC_APB2ENR_IOPAEN_Msk


	)

1284 
	#RCC_APB2ENR_IOPBEN_Pos
 (3U)

	)

1285 
	#RCC_APB2ENR_IOPBEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPBEN_Pos
Ë

	)

1286 
	#RCC_APB2ENR_IOPBEN
 
RCC_APB2ENR_IOPBEN_Msk


	)

1287 
	#RCC_APB2ENR_IOPCEN_Pos
 (4U)

	)

1288 
	#RCC_APB2ENR_IOPCEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPCEN_Pos
Ë

	)

1289 
	#RCC_APB2ENR_IOPCEN
 
RCC_APB2ENR_IOPCEN_Msk


	)

1290 
	#RCC_APB2ENR_IOPDEN_Pos
 (5U)

	)

1291 
	#RCC_APB2ENR_IOPDEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPDEN_Pos
Ë

	)

1292 
	#RCC_APB2ENR_IOPDEN
 
RCC_APB2ENR_IOPDEN_Msk


	)

1293 
	#RCC_APB2ENR_ADC1EN_Pos
 (9U)

	)

1294 
	#RCC_APB2ENR_ADC1EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC1EN_Pos
Ë

	)

1295 
	#RCC_APB2ENR_ADC1EN
 
RCC_APB2ENR_ADC1EN_Msk


	)

1297 
	#RCC_APB2ENR_ADC2EN_Pos
 (10U)

	)

1298 
	#RCC_APB2ENR_ADC2EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC2EN_Pos
Ë

	)

1299 
	#RCC_APB2ENR_ADC2EN
 
RCC_APB2ENR_ADC2EN_Msk


	)

1301 
	#RCC_APB2ENR_TIM1EN_Pos
 (11U)

	)

1302 
	#RCC_APB2ENR_TIM1EN_Msk
 (0x1UL << 
RCC_APB2ENR_TIM1EN_Pos
Ë

	)

1303 
	#RCC_APB2ENR_TIM1EN
 
RCC_APB2ENR_TIM1EN_Msk


	)

1304 
	#RCC_APB2ENR_SPI1EN_Pos
 (12U)

	)

1305 
	#RCC_APB2ENR_SPI1EN_Msk
 (0x1UL << 
RCC_APB2ENR_SPI1EN_Pos
Ë

	)

1306 
	#RCC_APB2ENR_SPI1EN
 
RCC_APB2ENR_SPI1EN_Msk


	)

1307 
	#RCC_APB2ENR_USART1EN_Pos
 (14U)

	)

1308 
	#RCC_APB2ENR_USART1EN_Msk
 (0x1UL << 
RCC_APB2ENR_USART1EN_Pos
Ë

	)

1309 
	#RCC_APB2ENR_USART1EN
 
RCC_APB2ENR_USART1EN_Msk


	)

1312 
	#RCC_APB2ENR_IOPEEN_Pos
 (6U)

	)

1313 
	#RCC_APB2ENR_IOPEEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPEEN_Pos
Ë

	)

1314 
	#RCC_APB2ENR_IOPEEN
 
RCC_APB2ENR_IOPEEN_Msk


	)

1320 
	#RCC_APB1ENR_TIM2EN_Pos
 (0U)

	)

1321 
	#RCC_APB1ENR_TIM2EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM2EN_Pos
Ë

	)

1322 
	#RCC_APB1ENR_TIM2EN
 
RCC_APB1ENR_TIM2EN_Msk


	)

1323 
	#RCC_APB1ENR_TIM3EN_Pos
 (1U)

	)

1324 
	#RCC_APB1ENR_TIM3EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM3EN_Pos
Ë

	)

1325 
	#RCC_APB1ENR_TIM3EN
 
RCC_APB1ENR_TIM3EN_Msk


	)

1326 
	#RCC_APB1ENR_WWDGEN_Pos
 (11U)

	)

1327 
	#RCC_APB1ENR_WWDGEN_Msk
 (0x1UL << 
RCC_APB1ENR_WWDGEN_Pos
Ë

	)

1328 
	#RCC_APB1ENR_WWDGEN
 
RCC_APB1ENR_WWDGEN_Msk


	)

1329 
	#RCC_APB1ENR_USART2EN_Pos
 (17U)

	)

1330 
	#RCC_APB1ENR_USART2EN_Msk
 (0x1UL << 
RCC_APB1ENR_USART2EN_Pos
Ë

	)

1331 
	#RCC_APB1ENR_USART2EN
 
RCC_APB1ENR_USART2EN_Msk


	)

1332 
	#RCC_APB1ENR_I2C1EN_Pos
 (21U)

	)

1333 
	#RCC_APB1ENR_I2C1EN_Msk
 (0x1UL << 
RCC_APB1ENR_I2C1EN_Pos
Ë

	)

1334 
	#RCC_APB1ENR_I2C1EN
 
RCC_APB1ENR_I2C1EN_Msk


	)

1336 
	#RCC_APB1ENR_CAN1EN_Pos
 (25U)

	)

1337 
	#RCC_APB1ENR_CAN1EN_Msk
 (0x1UL << 
RCC_APB1ENR_CAN1EN_Pos
Ë

	)

1338 
	#RCC_APB1ENR_CAN1EN
 
RCC_APB1ENR_CAN1EN_Msk


	)

1340 
	#RCC_APB1ENR_BKPEN_Pos
 (27U)

	)

1341 
	#RCC_APB1ENR_BKPEN_Msk
 (0x1UL << 
RCC_APB1ENR_BKPEN_Pos
Ë

	)

1342 
	#RCC_APB1ENR_BKPEN
 
RCC_APB1ENR_BKPEN_Msk


	)

1343 
	#RCC_APB1ENR_PWREN_Pos
 (28U)

	)

1344 
	#RCC_APB1ENR_PWREN_Msk
 (0x1UL << 
RCC_APB1ENR_PWREN_Pos
Ë

	)

1345 
	#RCC_APB1ENR_PWREN
 
RCC_APB1ENR_PWREN_Msk


	)

1347 
	#RCC_APB1ENR_TIM4EN_Pos
 (2U)

	)

1348 
	#RCC_APB1ENR_TIM4EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM4EN_Pos
Ë

	)

1349 
	#RCC_APB1ENR_TIM4EN
 
RCC_APB1ENR_TIM4EN_Msk


	)

1350 
	#RCC_APB1ENR_SPI2EN_Pos
 (14U)

	)

1351 
	#RCC_APB1ENR_SPI2EN_Msk
 (0x1UL << 
RCC_APB1ENR_SPI2EN_Pos
Ë

	)

1352 
	#RCC_APB1ENR_SPI2EN
 
RCC_APB1ENR_SPI2EN_Msk


	)

1353 
	#RCC_APB1ENR_USART3EN_Pos
 (18U)

	)

1354 
	#RCC_APB1ENR_USART3EN_Msk
 (0x1UL << 
RCC_APB1ENR_USART3EN_Pos
Ë

	)

1355 
	#RCC_APB1ENR_USART3EN
 
RCC_APB1ENR_USART3EN_Msk


	)

1356 
	#RCC_APB1ENR_I2C2EN_Pos
 (22U)

	)

1357 
	#RCC_APB1ENR_I2C2EN_Msk
 (0x1UL << 
RCC_APB1ENR_I2C2EN_Pos
Ë

	)

1358 
	#RCC_APB1ENR_I2C2EN
 
RCC_APB1ENR_I2C2EN_Msk


	)

1360 
	#RCC_APB1ENR_USBEN_Pos
 (23U)

	)

1361 
	#RCC_APB1ENR_USBEN_Msk
 (0x1UL << 
RCC_APB1ENR_USBEN_Pos
Ë

	)

1362 
	#RCC_APB1ENR_USBEN
 
RCC_APB1ENR_USBEN_Msk


	)

1370 
	#RCC_BDCR_LSEON_Pos
 (0U)

	)

1371 
	#RCC_BDCR_LSEON_Msk
 (0x1UL << 
RCC_BDCR_LSEON_Pos
Ë

	)

1372 
	#RCC_BDCR_LSEON
 
RCC_BDCR_LSEON_Msk


	)

1373 
	#RCC_BDCR_LSERDY_Pos
 (1U)

	)

1374 
	#RCC_BDCR_LSERDY_Msk
 (0x1UL << 
RCC_BDCR_LSERDY_Pos
Ë

	)

1375 
	#RCC_BDCR_LSERDY
 
RCC_BDCR_LSERDY_Msk


	)

1376 
	#RCC_BDCR_LSEBYP_Pos
 (2U)

	)

1377 
	#RCC_BDCR_LSEBYP_Msk
 (0x1UL << 
RCC_BDCR_LSEBYP_Pos
Ë

	)

1378 
	#RCC_BDCR_LSEBYP
 
RCC_BDCR_LSEBYP_Msk


	)

1380 
	#RCC_BDCR_RTCSEL_Pos
 (8U)

	)

1381 
	#RCC_BDCR_RTCSEL_Msk
 (0x3UL << 
RCC_BDCR_RTCSEL_Pos
Ë

	)

1382 
	#RCC_BDCR_RTCSEL
 
RCC_BDCR_RTCSEL_Msk


	)

1383 
	#RCC_BDCR_RTCSEL_0
 (0x1UL << 
RCC_BDCR_RTCSEL_Pos
Ë

	)

1384 
	#RCC_BDCR_RTCSEL_1
 (0x2UL << 
RCC_BDCR_RTCSEL_Pos
Ë

	)

1387 
	#RCC_BDCR_RTCSEL_NOCLOCK
 0x00000000U

	)

1388 
	#RCC_BDCR_RTCSEL_LSE
 0x00000100U

	)

1389 
	#RCC_BDCR_RTCSEL_LSI
 0x00000200U

	)

1390 
	#RCC_BDCR_RTCSEL_HSE
 0x00000300U

	)

1392 
	#RCC_BDCR_RTCEN_Pos
 (15U)

	)

1393 
	#RCC_BDCR_RTCEN_Msk
 (0x1UL << 
RCC_BDCR_RTCEN_Pos
Ë

	)

1394 
	#RCC_BDCR_RTCEN
 
RCC_BDCR_RTCEN_Msk


	)

1395 
	#RCC_BDCR_BDRST_Pos
 (16U)

	)

1396 
	#RCC_BDCR_BDRST_Msk
 (0x1UL << 
RCC_BDCR_BDRST_Pos
Ë

	)

1397 
	#RCC_BDCR_BDRST
 
RCC_BDCR_BDRST_Msk


	)

1400 
	#RCC_CSR_LSION_Pos
 (0U)

	)

1401 
	#RCC_CSR_LSION_Msk
 (0x1UL << 
RCC_CSR_LSION_Pos
Ë

	)

1402 
	#RCC_CSR_LSION
 
RCC_CSR_LSION_Msk


	)

1403 
	#RCC_CSR_LSIRDY_Pos
 (1U)

	)

1404 
	#RCC_CSR_LSIRDY_Msk
 (0x1UL << 
RCC_CSR_LSIRDY_Pos
Ë

	)

1405 
	#RCC_CSR_LSIRDY
 
RCC_CSR_LSIRDY_Msk


	)

1406 
	#RCC_CSR_RMVF_Pos
 (24U)

	)

1407 
	#RCC_CSR_RMVF_Msk
 (0x1UL << 
RCC_CSR_RMVF_Pos
Ë

	)

1408 
	#RCC_CSR_RMVF
 
RCC_CSR_RMVF_Msk


	)

1409 
	#RCC_CSR_PINRSTF_Pos
 (26U)

	)

1410 
	#RCC_CSR_PINRSTF_Msk
 (0x1UL << 
RCC_CSR_PINRSTF_Pos
Ë

	)

1411 
	#RCC_CSR_PINRSTF
 
RCC_CSR_PINRSTF_Msk


	)

1412 
	#RCC_CSR_PORRSTF_Pos
 (27U)

	)

1413 
	#RCC_CSR_PORRSTF_Msk
 (0x1UL << 
RCC_CSR_PORRSTF_Pos
Ë

	)

1414 
	#RCC_CSR_PORRSTF
 
RCC_CSR_PORRSTF_Msk


	)

1415 
	#RCC_CSR_SFTRSTF_Pos
 (28U)

	)

1416 
	#RCC_CSR_SFTRSTF_Msk
 (0x1UL << 
RCC_CSR_SFTRSTF_Pos
Ë

	)

1417 
	#RCC_CSR_SFTRSTF
 
RCC_CSR_SFTRSTF_Msk


	)

1418 
	#RCC_CSR_IWDGRSTF_Pos
 (29U)

	)

1419 
	#RCC_CSR_IWDGRSTF_Msk
 (0x1UL << 
RCC_CSR_IWDGRSTF_Pos
Ë

	)

1420 
	#RCC_CSR_IWDGRSTF
 
RCC_CSR_IWDGRSTF_Msk


	)

1421 
	#RCC_CSR_WWDGRSTF_Pos
 (30U)

	)

1422 
	#RCC_CSR_WWDGRSTF_Msk
 (0x1UL << 
RCC_CSR_WWDGRSTF_Pos
Ë

	)

1423 
	#RCC_CSR_WWDGRSTF
 
RCC_CSR_WWDGRSTF_Msk


	)

1424 
	#RCC_CSR_LPWRRSTF_Pos
 (31U)

	)

1425 
	#RCC_CSR_LPWRRSTF_Msk
 (0x1UL << 
RCC_CSR_LPWRRSTF_Pos
Ë

	)

1426 
	#RCC_CSR_LPWRRSTF
 
RCC_CSR_LPWRRSTF_Msk


	)

1437 
	#GPIO_CRL_MODE_Pos
 (0U)

	)

1438 
	#GPIO_CRL_MODE_Msk
 (0x33333333UL << 
GPIO_CRL_MODE_Pos
Ë

	)

1439 
	#GPIO_CRL_MODE
 
GPIO_CRL_MODE_Msk


	)

1441 
	#GPIO_CRL_MODE0_Pos
 (0U)

	)

1442 
	#GPIO_CRL_MODE0_Msk
 (0x3UL << 
GPIO_CRL_MODE0_Pos
Ë

	)

1443 
	#GPIO_CRL_MODE0
 
GPIO_CRL_MODE0_Msk


	)

1444 
	#GPIO_CRL_MODE0_0
 (0x1UL << 
GPIO_CRL_MODE0_Pos
Ë

	)

1445 
	#GPIO_CRL_MODE0_1
 (0x2UL << 
GPIO_CRL_MODE0_Pos
Ë

	)

1447 
	#GPIO_CRL_MODE1_Pos
 (4U)

	)

1448 
	#GPIO_CRL_MODE1_Msk
 (0x3UL << 
GPIO_CRL_MODE1_Pos
Ë

	)

1449 
	#GPIO_CRL_MODE1
 
GPIO_CRL_MODE1_Msk


	)

1450 
	#GPIO_CRL_MODE1_0
 (0x1UL << 
GPIO_CRL_MODE1_Pos
Ë

	)

1451 
	#GPIO_CRL_MODE1_1
 (0x2UL << 
GPIO_CRL_MODE1_Pos
Ë

	)

1453 
	#GPIO_CRL_MODE2_Pos
 (8U)

	)

1454 
	#GPIO_CRL_MODE2_Msk
 (0x3UL << 
GPIO_CRL_MODE2_Pos
Ë

	)

1455 
	#GPIO_CRL_MODE2
 
GPIO_CRL_MODE2_Msk


	)

1456 
	#GPIO_CRL_MODE2_0
 (0x1UL << 
GPIO_CRL_MODE2_Pos
Ë

	)

1457 
	#GPIO_CRL_MODE2_1
 (0x2UL << 
GPIO_CRL_MODE2_Pos
Ë

	)

1459 
	#GPIO_CRL_MODE3_Pos
 (12U)

	)

1460 
	#GPIO_CRL_MODE3_Msk
 (0x3UL << 
GPIO_CRL_MODE3_Pos
Ë

	)

1461 
	#GPIO_CRL_MODE3
 
GPIO_CRL_MODE3_Msk


	)

1462 
	#GPIO_CRL_MODE3_0
 (0x1UL << 
GPIO_CRL_MODE3_Pos
Ë

	)

1463 
	#GPIO_CRL_MODE3_1
 (0x2UL << 
GPIO_CRL_MODE3_Pos
Ë

	)

1465 
	#GPIO_CRL_MODE4_Pos
 (16U)

	)

1466 
	#GPIO_CRL_MODE4_Msk
 (0x3UL << 
GPIO_CRL_MODE4_Pos
Ë

	)

1467 
	#GPIO_CRL_MODE4
 
GPIO_CRL_MODE4_Msk


	)

1468 
	#GPIO_CRL_MODE4_0
 (0x1UL << 
GPIO_CRL_MODE4_Pos
Ë

	)

1469 
	#GPIO_CRL_MODE4_1
 (0x2UL << 
GPIO_CRL_MODE4_Pos
Ë

	)

1471 
	#GPIO_CRL_MODE5_Pos
 (20U)

	)

1472 
	#GPIO_CRL_MODE5_Msk
 (0x3UL << 
GPIO_CRL_MODE5_Pos
Ë

	)

1473 
	#GPIO_CRL_MODE5
 
GPIO_CRL_MODE5_Msk


	)

1474 
	#GPIO_CRL_MODE5_0
 (0x1UL << 
GPIO_CRL_MODE5_Pos
Ë

	)

1475 
	#GPIO_CRL_MODE5_1
 (0x2UL << 
GPIO_CRL_MODE5_Pos
Ë

	)

1477 
	#GPIO_CRL_MODE6_Pos
 (24U)

	)

1478 
	#GPIO_CRL_MODE6_Msk
 (0x3UL << 
GPIO_CRL_MODE6_Pos
Ë

	)

1479 
	#GPIO_CRL_MODE6
 
GPIO_CRL_MODE6_Msk


	)

1480 
	#GPIO_CRL_MODE6_0
 (0x1UL << 
GPIO_CRL_MODE6_Pos
Ë

	)

1481 
	#GPIO_CRL_MODE6_1
 (0x2UL << 
GPIO_CRL_MODE6_Pos
Ë

	)

1483 
	#GPIO_CRL_MODE7_Pos
 (28U)

	)

1484 
	#GPIO_CRL_MODE7_Msk
 (0x3UL << 
GPIO_CRL_MODE7_Pos
Ë

	)

1485 
	#GPIO_CRL_MODE7
 
GPIO_CRL_MODE7_Msk


	)

1486 
	#GPIO_CRL_MODE7_0
 (0x1UL << 
GPIO_CRL_MODE7_Pos
Ë

	)

1487 
	#GPIO_CRL_MODE7_1
 (0x2UL << 
GPIO_CRL_MODE7_Pos
Ë

	)

1489 
	#GPIO_CRL_CNF_Pos
 (2U)

	)

1490 
	#GPIO_CRL_CNF_Msk
 (0x33333333UL << 
GPIO_CRL_CNF_Pos
Ë

	)

1491 
	#GPIO_CRL_CNF
 
GPIO_CRL_CNF_Msk


	)

1493 
	#GPIO_CRL_CNF0_Pos
 (2U)

	)

1494 
	#GPIO_CRL_CNF0_Msk
 (0x3UL << 
GPIO_CRL_CNF0_Pos
Ë

	)

1495 
	#GPIO_CRL_CNF0
 
GPIO_CRL_CNF0_Msk


	)

1496 
	#GPIO_CRL_CNF0_0
 (0x1UL << 
GPIO_CRL_CNF0_Pos
Ë

	)

1497 
	#GPIO_CRL_CNF0_1
 (0x2UL << 
GPIO_CRL_CNF0_Pos
Ë

	)

1499 
	#GPIO_CRL_CNF1_Pos
 (6U)

	)

1500 
	#GPIO_CRL_CNF1_Msk
 (0x3UL << 
GPIO_CRL_CNF1_Pos
Ë

	)

1501 
	#GPIO_CRL_CNF1
 
GPIO_CRL_CNF1_Msk


	)

1502 
	#GPIO_CRL_CNF1_0
 (0x1UL << 
GPIO_CRL_CNF1_Pos
Ë

	)

1503 
	#GPIO_CRL_CNF1_1
 (0x2UL << 
GPIO_CRL_CNF1_Pos
Ë

	)

1505 
	#GPIO_CRL_CNF2_Pos
 (10U)

	)

1506 
	#GPIO_CRL_CNF2_Msk
 (0x3UL << 
GPIO_CRL_CNF2_Pos
Ë

	)

1507 
	#GPIO_CRL_CNF2
 
GPIO_CRL_CNF2_Msk


	)

1508 
	#GPIO_CRL_CNF2_0
 (0x1UL << 
GPIO_CRL_CNF2_Pos
Ë

	)

1509 
	#GPIO_CRL_CNF2_1
 (0x2UL << 
GPIO_CRL_CNF2_Pos
Ë

	)

1511 
	#GPIO_CRL_CNF3_Pos
 (14U)

	)

1512 
	#GPIO_CRL_CNF3_Msk
 (0x3UL << 
GPIO_CRL_CNF3_Pos
Ë

	)

1513 
	#GPIO_CRL_CNF3
 
GPIO_CRL_CNF3_Msk


	)

1514 
	#GPIO_CRL_CNF3_0
 (0x1UL << 
GPIO_CRL_CNF3_Pos
Ë

	)

1515 
	#GPIO_CRL_CNF3_1
 (0x2UL << 
GPIO_CRL_CNF3_Pos
Ë

	)

1517 
	#GPIO_CRL_CNF4_Pos
 (18U)

	)

1518 
	#GPIO_CRL_CNF4_Msk
 (0x3UL << 
GPIO_CRL_CNF4_Pos
Ë

	)

1519 
	#GPIO_CRL_CNF4
 
GPIO_CRL_CNF4_Msk


	)

1520 
	#GPIO_CRL_CNF4_0
 (0x1UL << 
GPIO_CRL_CNF4_Pos
Ë

	)

1521 
	#GPIO_CRL_CNF4_1
 (0x2UL << 
GPIO_CRL_CNF4_Pos
Ë

	)

1523 
	#GPIO_CRL_CNF5_Pos
 (22U)

	)

1524 
	#GPIO_CRL_CNF5_Msk
 (0x3UL << 
GPIO_CRL_CNF5_Pos
Ë

	)

1525 
	#GPIO_CRL_CNF5
 
GPIO_CRL_CNF5_Msk


	)

1526 
	#GPIO_CRL_CNF5_0
 (0x1UL << 
GPIO_CRL_CNF5_Pos
Ë

	)

1527 
	#GPIO_CRL_CNF5_1
 (0x2UL << 
GPIO_CRL_CNF5_Pos
Ë

	)

1529 
	#GPIO_CRL_CNF6_Pos
 (26U)

	)

1530 
	#GPIO_CRL_CNF6_Msk
 (0x3UL << 
GPIO_CRL_CNF6_Pos
Ë

	)

1531 
	#GPIO_CRL_CNF6
 
GPIO_CRL_CNF6_Msk


	)

1532 
	#GPIO_CRL_CNF6_0
 (0x1UL << 
GPIO_CRL_CNF6_Pos
Ë

	)

1533 
	#GPIO_CRL_CNF6_1
 (0x2UL << 
GPIO_CRL_CNF6_Pos
Ë

	)

1535 
	#GPIO_CRL_CNF7_Pos
 (30U)

	)

1536 
	#GPIO_CRL_CNF7_Msk
 (0x3UL << 
GPIO_CRL_CNF7_Pos
Ë

	)

1537 
	#GPIO_CRL_CNF7
 
GPIO_CRL_CNF7_Msk


	)

1538 
	#GPIO_CRL_CNF7_0
 (0x1UL << 
GPIO_CRL_CNF7_Pos
Ë

	)

1539 
	#GPIO_CRL_CNF7_1
 (0x2UL << 
GPIO_CRL_CNF7_Pos
Ë

	)

1542 
	#GPIO_CRH_MODE_Pos
 (0U)

	)

1543 
	#GPIO_CRH_MODE_Msk
 (0x33333333UL << 
GPIO_CRH_MODE_Pos
Ë

	)

1544 
	#GPIO_CRH_MODE
 
GPIO_CRH_MODE_Msk


	)

1546 
	#GPIO_CRH_MODE8_Pos
 (0U)

	)

1547 
	#GPIO_CRH_MODE8_Msk
 (0x3UL << 
GPIO_CRH_MODE8_Pos
Ë

	)

1548 
	#GPIO_CRH_MODE8
 
GPIO_CRH_MODE8_Msk


	)

1549 
	#GPIO_CRH_MODE8_0
 (0x1UL << 
GPIO_CRH_MODE8_Pos
Ë

	)

1550 
	#GPIO_CRH_MODE8_1
 (0x2UL << 
GPIO_CRH_MODE8_Pos
Ë

	)

1552 
	#GPIO_CRH_MODE9_Pos
 (4U)

	)

1553 
	#GPIO_CRH_MODE9_Msk
 (0x3UL << 
GPIO_CRH_MODE9_Pos
Ë

	)

1554 
	#GPIO_CRH_MODE9
 
GPIO_CRH_MODE9_Msk


	)

1555 
	#GPIO_CRH_MODE9_0
 (0x1UL << 
GPIO_CRH_MODE9_Pos
Ë

	)

1556 
	#GPIO_CRH_MODE9_1
 (0x2UL << 
GPIO_CRH_MODE9_Pos
Ë

	)

1558 
	#GPIO_CRH_MODE10_Pos
 (8U)

	)

1559 
	#GPIO_CRH_MODE10_Msk
 (0x3UL << 
GPIO_CRH_MODE10_Pos
Ë

	)

1560 
	#GPIO_CRH_MODE10
 
GPIO_CRH_MODE10_Msk


	)

1561 
	#GPIO_CRH_MODE10_0
 (0x1UL << 
GPIO_CRH_MODE10_Pos
Ë

	)

1562 
	#GPIO_CRH_MODE10_1
 (0x2UL << 
GPIO_CRH_MODE10_Pos
Ë

	)

1564 
	#GPIO_CRH_MODE11_Pos
 (12U)

	)

1565 
	#GPIO_CRH_MODE11_Msk
 (0x3UL << 
GPIO_CRH_MODE11_Pos
Ë

	)

1566 
	#GPIO_CRH_MODE11
 
GPIO_CRH_MODE11_Msk


	)

1567 
	#GPIO_CRH_MODE11_0
 (0x1UL << 
GPIO_CRH_MODE11_Pos
Ë

	)

1568 
	#GPIO_CRH_MODE11_1
 (0x2UL << 
GPIO_CRH_MODE11_Pos
Ë

	)

1570 
	#GPIO_CRH_MODE12_Pos
 (16U)

	)

1571 
	#GPIO_CRH_MODE12_Msk
 (0x3UL << 
GPIO_CRH_MODE12_Pos
Ë

	)

1572 
	#GPIO_CRH_MODE12
 
GPIO_CRH_MODE12_Msk


	)

1573 
	#GPIO_CRH_MODE12_0
 (0x1UL << 
GPIO_CRH_MODE12_Pos
Ë

	)

1574 
	#GPIO_CRH_MODE12_1
 (0x2UL << 
GPIO_CRH_MODE12_Pos
Ë

	)

1576 
	#GPIO_CRH_MODE13_Pos
 (20U)

	)

1577 
	#GPIO_CRH_MODE13_Msk
 (0x3UL << 
GPIO_CRH_MODE13_Pos
Ë

	)

1578 
	#GPIO_CRH_MODE13
 
GPIO_CRH_MODE13_Msk


	)

1579 
	#GPIO_CRH_MODE13_0
 (0x1UL << 
GPIO_CRH_MODE13_Pos
Ë

	)

1580 
	#GPIO_CRH_MODE13_1
 (0x2UL << 
GPIO_CRH_MODE13_Pos
Ë

	)

1582 
	#GPIO_CRH_MODE14_Pos
 (24U)

	)

1583 
	#GPIO_CRH_MODE14_Msk
 (0x3UL << 
GPIO_CRH_MODE14_Pos
Ë

	)

1584 
	#GPIO_CRH_MODE14
 
GPIO_CRH_MODE14_Msk


	)

1585 
	#GPIO_CRH_MODE14_0
 (0x1UL << 
GPIO_CRH_MODE14_Pos
Ë

	)

1586 
	#GPIO_CRH_MODE14_1
 (0x2UL << 
GPIO_CRH_MODE14_Pos
Ë

	)

1588 
	#GPIO_CRH_MODE15_Pos
 (28U)

	)

1589 
	#GPIO_CRH_MODE15_Msk
 (0x3UL << 
GPIO_CRH_MODE15_Pos
Ë

	)

1590 
	#GPIO_CRH_MODE15
 
GPIO_CRH_MODE15_Msk


	)

1591 
	#GPIO_CRH_MODE15_0
 (0x1UL << 
GPIO_CRH_MODE15_Pos
Ë

	)

1592 
	#GPIO_CRH_MODE15_1
 (0x2UL << 
GPIO_CRH_MODE15_Pos
Ë

	)

1594 
	#GPIO_CRH_CNF_Pos
 (2U)

	)

1595 
	#GPIO_CRH_CNF_Msk
 (0x33333333UL << 
GPIO_CRH_CNF_Pos
Ë

	)

1596 
	#GPIO_CRH_CNF
 
GPIO_CRH_CNF_Msk


	)

1598 
	#GPIO_CRH_CNF8_Pos
 (2U)

	)

1599 
	#GPIO_CRH_CNF8_Msk
 (0x3UL << 
GPIO_CRH_CNF8_Pos
Ë

	)

1600 
	#GPIO_CRH_CNF8
 
GPIO_CRH_CNF8_Msk


	)

1601 
	#GPIO_CRH_CNF8_0
 (0x1UL << 
GPIO_CRH_CNF8_Pos
Ë

	)

1602 
	#GPIO_CRH_CNF8_1
 (0x2UL << 
GPIO_CRH_CNF8_Pos
Ë

	)

1604 
	#GPIO_CRH_CNF9_Pos
 (6U)

	)

1605 
	#GPIO_CRH_CNF9_Msk
 (0x3UL << 
GPIO_CRH_CNF9_Pos
Ë

	)

1606 
	#GPIO_CRH_CNF9
 
GPIO_CRH_CNF9_Msk


	)

1607 
	#GPIO_CRH_CNF9_0
 (0x1UL << 
GPIO_CRH_CNF9_Pos
Ë

	)

1608 
	#GPIO_CRH_CNF9_1
 (0x2UL << 
GPIO_CRH_CNF9_Pos
Ë

	)

1610 
	#GPIO_CRH_CNF10_Pos
 (10U)

	)

1611 
	#GPIO_CRH_CNF10_Msk
 (0x3UL << 
GPIO_CRH_CNF10_Pos
Ë

	)

1612 
	#GPIO_CRH_CNF10
 
GPIO_CRH_CNF10_Msk


	)

1613 
	#GPIO_CRH_CNF10_0
 (0x1UL << 
GPIO_CRH_CNF10_Pos
Ë

	)

1614 
	#GPIO_CRH_CNF10_1
 (0x2UL << 
GPIO_CRH_CNF10_Pos
Ë

	)

1616 
	#GPIO_CRH_CNF11_Pos
 (14U)

	)

1617 
	#GPIO_CRH_CNF11_Msk
 (0x3UL << 
GPIO_CRH_CNF11_Pos
Ë

	)

1618 
	#GPIO_CRH_CNF11
 
GPIO_CRH_CNF11_Msk


	)

1619 
	#GPIO_CRH_CNF11_0
 (0x1UL << 
GPIO_CRH_CNF11_Pos
Ë

	)

1620 
	#GPIO_CRH_CNF11_1
 (0x2UL << 
GPIO_CRH_CNF11_Pos
Ë

	)

1622 
	#GPIO_CRH_CNF12_Pos
 (18U)

	)

1623 
	#GPIO_CRH_CNF12_Msk
 (0x3UL << 
GPIO_CRH_CNF12_Pos
Ë

	)

1624 
	#GPIO_CRH_CNF12
 
GPIO_CRH_CNF12_Msk


	)

1625 
	#GPIO_CRH_CNF12_0
 (0x1UL << 
GPIO_CRH_CNF12_Pos
Ë

	)

1626 
	#GPIO_CRH_CNF12_1
 (0x2UL << 
GPIO_CRH_CNF12_Pos
Ë

	)

1628 
	#GPIO_CRH_CNF13_Pos
 (22U)

	)

1629 
	#GPIO_CRH_CNF13_Msk
 (0x3UL << 
GPIO_CRH_CNF13_Pos
Ë

	)

1630 
	#GPIO_CRH_CNF13
 
GPIO_CRH_CNF13_Msk


	)

1631 
	#GPIO_CRH_CNF13_0
 (0x1UL << 
GPIO_CRH_CNF13_Pos
Ë

	)

1632 
	#GPIO_CRH_CNF13_1
 (0x2UL << 
GPIO_CRH_CNF13_Pos
Ë

	)

1634 
	#GPIO_CRH_CNF14_Pos
 (26U)

	)

1635 
	#GPIO_CRH_CNF14_Msk
 (0x3UL << 
GPIO_CRH_CNF14_Pos
Ë

	)

1636 
	#GPIO_CRH_CNF14
 
GPIO_CRH_CNF14_Msk


	)

1637 
	#GPIO_CRH_CNF14_0
 (0x1UL << 
GPIO_CRH_CNF14_Pos
Ë

	)

1638 
	#GPIO_CRH_CNF14_1
 (0x2UL << 
GPIO_CRH_CNF14_Pos
Ë

	)

1640 
	#GPIO_CRH_CNF15_Pos
 (30U)

	)

1641 
	#GPIO_CRH_CNF15_Msk
 (0x3UL << 
GPIO_CRH_CNF15_Pos
Ë

	)

1642 
	#GPIO_CRH_CNF15
 
GPIO_CRH_CNF15_Msk


	)

1643 
	#GPIO_CRH_CNF15_0
 (0x1UL << 
GPIO_CRH_CNF15_Pos
Ë

	)

1644 
	#GPIO_CRH_CNF15_1
 (0x2UL << 
GPIO_CRH_CNF15_Pos
Ë

	)

1647 
	#GPIO_IDR_IDR0_Pos
 (0U)

	)

1648 
	#GPIO_IDR_IDR0_Msk
 (0x1UL << 
GPIO_IDR_IDR0_Pos
Ë

	)

1649 
	#GPIO_IDR_IDR0
 
GPIO_IDR_IDR0_Msk


	)

1650 
	#GPIO_IDR_IDR1_Pos
 (1U)

	)

1651 
	#GPIO_IDR_IDR1_Msk
 (0x1UL << 
GPIO_IDR_IDR1_Pos
Ë

	)

1652 
	#GPIO_IDR_IDR1
 
GPIO_IDR_IDR1_Msk


	)

1653 
	#GPIO_IDR_IDR2_Pos
 (2U)

	)

1654 
	#GPIO_IDR_IDR2_Msk
 (0x1UL << 
GPIO_IDR_IDR2_Pos
Ë

	)

1655 
	#GPIO_IDR_IDR2
 
GPIO_IDR_IDR2_Msk


	)

1656 
	#GPIO_IDR_IDR3_Pos
 (3U)

	)

1657 
	#GPIO_IDR_IDR3_Msk
 (0x1UL << 
GPIO_IDR_IDR3_Pos
Ë

	)

1658 
	#GPIO_IDR_IDR3
 
GPIO_IDR_IDR3_Msk


	)

1659 
	#GPIO_IDR_IDR4_Pos
 (4U)

	)

1660 
	#GPIO_IDR_IDR4_Msk
 (0x1UL << 
GPIO_IDR_IDR4_Pos
Ë

	)

1661 
	#GPIO_IDR_IDR4
 
GPIO_IDR_IDR4_Msk


	)

1662 
	#GPIO_IDR_IDR5_Pos
 (5U)

	)

1663 
	#GPIO_IDR_IDR5_Msk
 (0x1UL << 
GPIO_IDR_IDR5_Pos
Ë

	)

1664 
	#GPIO_IDR_IDR5
 
GPIO_IDR_IDR5_Msk


	)

1665 
	#GPIO_IDR_IDR6_Pos
 (6U)

	)

1666 
	#GPIO_IDR_IDR6_Msk
 (0x1UL << 
GPIO_IDR_IDR6_Pos
Ë

	)

1667 
	#GPIO_IDR_IDR6
 
GPIO_IDR_IDR6_Msk


	)

1668 
	#GPIO_IDR_IDR7_Pos
 (7U)

	)

1669 
	#GPIO_IDR_IDR7_Msk
 (0x1UL << 
GPIO_IDR_IDR7_Pos
Ë

	)

1670 
	#GPIO_IDR_IDR7
 
GPIO_IDR_IDR7_Msk


	)

1671 
	#GPIO_IDR_IDR8_Pos
 (8U)

	)

1672 
	#GPIO_IDR_IDR8_Msk
 (0x1UL << 
GPIO_IDR_IDR8_Pos
Ë

	)

1673 
	#GPIO_IDR_IDR8
 
GPIO_IDR_IDR8_Msk


	)

1674 
	#GPIO_IDR_IDR9_Pos
 (9U)

	)

1675 
	#GPIO_IDR_IDR9_Msk
 (0x1UL << 
GPIO_IDR_IDR9_Pos
Ë

	)

1676 
	#GPIO_IDR_IDR9
 
GPIO_IDR_IDR9_Msk


	)

1677 
	#GPIO_IDR_IDR10_Pos
 (10U)

	)

1678 
	#GPIO_IDR_IDR10_Msk
 (0x1UL << 
GPIO_IDR_IDR10_Pos
Ë

	)

1679 
	#GPIO_IDR_IDR10
 
GPIO_IDR_IDR10_Msk


	)

1680 
	#GPIO_IDR_IDR11_Pos
 (11U)

	)

1681 
	#GPIO_IDR_IDR11_Msk
 (0x1UL << 
GPIO_IDR_IDR11_Pos
Ë

	)

1682 
	#GPIO_IDR_IDR11
 
GPIO_IDR_IDR11_Msk


	)

1683 
	#GPIO_IDR_IDR12_Pos
 (12U)

	)

1684 
	#GPIO_IDR_IDR12_Msk
 (0x1UL << 
GPIO_IDR_IDR12_Pos
Ë

	)

1685 
	#GPIO_IDR_IDR12
 
GPIO_IDR_IDR12_Msk


	)

1686 
	#GPIO_IDR_IDR13_Pos
 (13U)

	)

1687 
	#GPIO_IDR_IDR13_Msk
 (0x1UL << 
GPIO_IDR_IDR13_Pos
Ë

	)

1688 
	#GPIO_IDR_IDR13
 
GPIO_IDR_IDR13_Msk


	)

1689 
	#GPIO_IDR_IDR14_Pos
 (14U)

	)

1690 
	#GPIO_IDR_IDR14_Msk
 (0x1UL << 
GPIO_IDR_IDR14_Pos
Ë

	)

1691 
	#GPIO_IDR_IDR14
 
GPIO_IDR_IDR14_Msk


	)

1692 
	#GPIO_IDR_IDR15_Pos
 (15U)

	)

1693 
	#GPIO_IDR_IDR15_Msk
 (0x1UL << 
GPIO_IDR_IDR15_Pos
Ë

	)

1694 
	#GPIO_IDR_IDR15
 
GPIO_IDR_IDR15_Msk


	)

1697 
	#GPIO_ODR_ODR0_Pos
 (0U)

	)

1698 
	#GPIO_ODR_ODR0_Msk
 (0x1UL << 
GPIO_ODR_ODR0_Pos
Ë

	)

1699 
	#GPIO_ODR_ODR0
 
GPIO_ODR_ODR0_Msk


	)

1700 
	#GPIO_ODR_ODR1_Pos
 (1U)

	)

1701 
	#GPIO_ODR_ODR1_Msk
 (0x1UL << 
GPIO_ODR_ODR1_Pos
Ë

	)

1702 
	#GPIO_ODR_ODR1
 
GPIO_ODR_ODR1_Msk


	)

1703 
	#GPIO_ODR_ODR2_Pos
 (2U)

	)

1704 
	#GPIO_ODR_ODR2_Msk
 (0x1UL << 
GPIO_ODR_ODR2_Pos
Ë

	)

1705 
	#GPIO_ODR_ODR2
 
GPIO_ODR_ODR2_Msk


	)

1706 
	#GPIO_ODR_ODR3_Pos
 (3U)

	)

1707 
	#GPIO_ODR_ODR3_Msk
 (0x1UL << 
GPIO_ODR_ODR3_Pos
Ë

	)

1708 
	#GPIO_ODR_ODR3
 
GPIO_ODR_ODR3_Msk


	)

1709 
	#GPIO_ODR_ODR4_Pos
 (4U)

	)

1710 
	#GPIO_ODR_ODR4_Msk
 (0x1UL << 
GPIO_ODR_ODR4_Pos
Ë

	)

1711 
	#GPIO_ODR_ODR4
 
GPIO_ODR_ODR4_Msk


	)

1712 
	#GPIO_ODR_ODR5_Pos
 (5U)

	)

1713 
	#GPIO_ODR_ODR5_Msk
 (0x1UL << 
GPIO_ODR_ODR5_Pos
Ë

	)

1714 
	#GPIO_ODR_ODR5
 
GPIO_ODR_ODR5_Msk


	)

1715 
	#GPIO_ODR_ODR6_Pos
 (6U)

	)

1716 
	#GPIO_ODR_ODR6_Msk
 (0x1UL << 
GPIO_ODR_ODR6_Pos
Ë

	)

1717 
	#GPIO_ODR_ODR6
 
GPIO_ODR_ODR6_Msk


	)

1718 
	#GPIO_ODR_ODR7_Pos
 (7U)

	)

1719 
	#GPIO_ODR_ODR7_Msk
 (0x1UL << 
GPIO_ODR_ODR7_Pos
Ë

	)

1720 
	#GPIO_ODR_ODR7
 
GPIO_ODR_ODR7_Msk


	)

1721 
	#GPIO_ODR_ODR8_Pos
 (8U)

	)

1722 
	#GPIO_ODR_ODR8_Msk
 (0x1UL << 
GPIO_ODR_ODR8_Pos
Ë

	)

1723 
	#GPIO_ODR_ODR8
 
GPIO_ODR_ODR8_Msk


	)

1724 
	#GPIO_ODR_ODR9_Pos
 (9U)

	)

1725 
	#GPIO_ODR_ODR9_Msk
 (0x1UL << 
GPIO_ODR_ODR9_Pos
Ë

	)

1726 
	#GPIO_ODR_ODR9
 
GPIO_ODR_ODR9_Msk


	)

1727 
	#GPIO_ODR_ODR10_Pos
 (10U)

	)

1728 
	#GPIO_ODR_ODR10_Msk
 (0x1UL << 
GPIO_ODR_ODR10_Pos
Ë

	)

1729 
	#GPIO_ODR_ODR10
 
GPIO_ODR_ODR10_Msk


	)

1730 
	#GPIO_ODR_ODR11_Pos
 (11U)

	)

1731 
	#GPIO_ODR_ODR11_Msk
 (0x1UL << 
GPIO_ODR_ODR11_Pos
Ë

	)

1732 
	#GPIO_ODR_ODR11
 
GPIO_ODR_ODR11_Msk


	)

1733 
	#GPIO_ODR_ODR12_Pos
 (12U)

	)

1734 
	#GPIO_ODR_ODR12_Msk
 (0x1UL << 
GPIO_ODR_ODR12_Pos
Ë

	)

1735 
	#GPIO_ODR_ODR12
 
GPIO_ODR_ODR12_Msk


	)

1736 
	#GPIO_ODR_ODR13_Pos
 (13U)

	)

1737 
	#GPIO_ODR_ODR13_Msk
 (0x1UL << 
GPIO_ODR_ODR13_Pos
Ë

	)

1738 
	#GPIO_ODR_ODR13
 
GPIO_ODR_ODR13_Msk


	)

1739 
	#GPIO_ODR_ODR14_Pos
 (14U)

	)

1740 
	#GPIO_ODR_ODR14_Msk
 (0x1UL << 
GPIO_ODR_ODR14_Pos
Ë

	)

1741 
	#GPIO_ODR_ODR14
 
GPIO_ODR_ODR14_Msk


	)

1742 
	#GPIO_ODR_ODR15_Pos
 (15U)

	)

1743 
	#GPIO_ODR_ODR15_Msk
 (0x1UL << 
GPIO_ODR_ODR15_Pos
Ë

	)

1744 
	#GPIO_ODR_ODR15
 
GPIO_ODR_ODR15_Msk


	)

1747 
	#GPIO_BSRR_BS0_Pos
 (0U)

	)

1748 
	#GPIO_BSRR_BS0_Msk
 (0x1UL << 
GPIO_BSRR_BS0_Pos
Ë

	)

1749 
	#GPIO_BSRR_BS0
 
GPIO_BSRR_BS0_Msk


	)

1750 
	#GPIO_BSRR_BS1_Pos
 (1U)

	)

1751 
	#GPIO_BSRR_BS1_Msk
 (0x1UL << 
GPIO_BSRR_BS1_Pos
Ë

	)

1752 
	#GPIO_BSRR_BS1
 
GPIO_BSRR_BS1_Msk


	)

1753 
	#GPIO_BSRR_BS2_Pos
 (2U)

	)

1754 
	#GPIO_BSRR_BS2_Msk
 (0x1UL << 
GPIO_BSRR_BS2_Pos
Ë

	)

1755 
	#GPIO_BSRR_BS2
 
GPIO_BSRR_BS2_Msk


	)

1756 
	#GPIO_BSRR_BS3_Pos
 (3U)

	)

1757 
	#GPIO_BSRR_BS3_Msk
 (0x1UL << 
GPIO_BSRR_BS3_Pos
Ë

	)

1758 
	#GPIO_BSRR_BS3
 
GPIO_BSRR_BS3_Msk


	)

1759 
	#GPIO_BSRR_BS4_Pos
 (4U)

	)

1760 
	#GPIO_BSRR_BS4_Msk
 (0x1UL << 
GPIO_BSRR_BS4_Pos
Ë

	)

1761 
	#GPIO_BSRR_BS4
 
GPIO_BSRR_BS4_Msk


	)

1762 
	#GPIO_BSRR_BS5_Pos
 (5U)

	)

1763 
	#GPIO_BSRR_BS5_Msk
 (0x1UL << 
GPIO_BSRR_BS5_Pos
Ë

	)

1764 
	#GPIO_BSRR_BS5
 
GPIO_BSRR_BS5_Msk


	)

1765 
	#GPIO_BSRR_BS6_Pos
 (6U)

	)

1766 
	#GPIO_BSRR_BS6_Msk
 (0x1UL << 
GPIO_BSRR_BS6_Pos
Ë

	)

1767 
	#GPIO_BSRR_BS6
 
GPIO_BSRR_BS6_Msk


	)

1768 
	#GPIO_BSRR_BS7_Pos
 (7U)

	)

1769 
	#GPIO_BSRR_BS7_Msk
 (0x1UL << 
GPIO_BSRR_BS7_Pos
Ë

	)

1770 
	#GPIO_BSRR_BS7
 
GPIO_BSRR_BS7_Msk


	)

1771 
	#GPIO_BSRR_BS8_Pos
 (8U)

	)

1772 
	#GPIO_BSRR_BS8_Msk
 (0x1UL << 
GPIO_BSRR_BS8_Pos
Ë

	)

1773 
	#GPIO_BSRR_BS8
 
GPIO_BSRR_BS8_Msk


	)

1774 
	#GPIO_BSRR_BS9_Pos
 (9U)

	)

1775 
	#GPIO_BSRR_BS9_Msk
 (0x1UL << 
GPIO_BSRR_BS9_Pos
Ë

	)

1776 
	#GPIO_BSRR_BS9
 
GPIO_BSRR_BS9_Msk


	)

1777 
	#GPIO_BSRR_BS10_Pos
 (10U)

	)

1778 
	#GPIO_BSRR_BS10_Msk
 (0x1UL << 
GPIO_BSRR_BS10_Pos
Ë

	)

1779 
	#GPIO_BSRR_BS10
 
GPIO_BSRR_BS10_Msk


	)

1780 
	#GPIO_BSRR_BS11_Pos
 (11U)

	)

1781 
	#GPIO_BSRR_BS11_Msk
 (0x1UL << 
GPIO_BSRR_BS11_Pos
Ë

	)

1782 
	#GPIO_BSRR_BS11
 
GPIO_BSRR_BS11_Msk


	)

1783 
	#GPIO_BSRR_BS12_Pos
 (12U)

	)

1784 
	#GPIO_BSRR_BS12_Msk
 (0x1UL << 
GPIO_BSRR_BS12_Pos
Ë

	)

1785 
	#GPIO_BSRR_BS12
 
GPIO_BSRR_BS12_Msk


	)

1786 
	#GPIO_BSRR_BS13_Pos
 (13U)

	)

1787 
	#GPIO_BSRR_BS13_Msk
 (0x1UL << 
GPIO_BSRR_BS13_Pos
Ë

	)

1788 
	#GPIO_BSRR_BS13
 
GPIO_BSRR_BS13_Msk


	)

1789 
	#GPIO_BSRR_BS14_Pos
 (14U)

	)

1790 
	#GPIO_BSRR_BS14_Msk
 (0x1UL << 
GPIO_BSRR_BS14_Pos
Ë

	)

1791 
	#GPIO_BSRR_BS14
 
GPIO_BSRR_BS14_Msk


	)

1792 
	#GPIO_BSRR_BS15_Pos
 (15U)

	)

1793 
	#GPIO_BSRR_BS15_Msk
 (0x1UL << 
GPIO_BSRR_BS15_Pos
Ë

	)

1794 
	#GPIO_BSRR_BS15
 
GPIO_BSRR_BS15_Msk


	)

1796 
	#GPIO_BSRR_BR0_Pos
 (16U)

	)

1797 
	#GPIO_BSRR_BR0_Msk
 (0x1UL << 
GPIO_BSRR_BR0_Pos
Ë

	)

1798 
	#GPIO_BSRR_BR0
 
GPIO_BSRR_BR0_Msk


	)

1799 
	#GPIO_BSRR_BR1_Pos
 (17U)

	)

1800 
	#GPIO_BSRR_BR1_Msk
 (0x1UL << 
GPIO_BSRR_BR1_Pos
Ë

	)

1801 
	#GPIO_BSRR_BR1
 
GPIO_BSRR_BR1_Msk


	)

1802 
	#GPIO_BSRR_BR2_Pos
 (18U)

	)

1803 
	#GPIO_BSRR_BR2_Msk
 (0x1UL << 
GPIO_BSRR_BR2_Pos
Ë

	)

1804 
	#GPIO_BSRR_BR2
 
GPIO_BSRR_BR2_Msk


	)

1805 
	#GPIO_BSRR_BR3_Pos
 (19U)

	)

1806 
	#GPIO_BSRR_BR3_Msk
 (0x1UL << 
GPIO_BSRR_BR3_Pos
Ë

	)

1807 
	#GPIO_BSRR_BR3
 
GPIO_BSRR_BR3_Msk


	)

1808 
	#GPIO_BSRR_BR4_Pos
 (20U)

	)

1809 
	#GPIO_BSRR_BR4_Msk
 (0x1UL << 
GPIO_BSRR_BR4_Pos
Ë

	)

1810 
	#GPIO_BSRR_BR4
 
GPIO_BSRR_BR4_Msk


	)

1811 
	#GPIO_BSRR_BR5_Pos
 (21U)

	)

1812 
	#GPIO_BSRR_BR5_Msk
 (0x1UL << 
GPIO_BSRR_BR5_Pos
Ë

	)

1813 
	#GPIO_BSRR_BR5
 
GPIO_BSRR_BR5_Msk


	)

1814 
	#GPIO_BSRR_BR6_Pos
 (22U)

	)

1815 
	#GPIO_BSRR_BR6_Msk
 (0x1UL << 
GPIO_BSRR_BR6_Pos
Ë

	)

1816 
	#GPIO_BSRR_BR6
 
GPIO_BSRR_BR6_Msk


	)

1817 
	#GPIO_BSRR_BR7_Pos
 (23U)

	)

1818 
	#GPIO_BSRR_BR7_Msk
 (0x1UL << 
GPIO_BSRR_BR7_Pos
Ë

	)

1819 
	#GPIO_BSRR_BR7
 
GPIO_BSRR_BR7_Msk


	)

1820 
	#GPIO_BSRR_BR8_Pos
 (24U)

	)

1821 
	#GPIO_BSRR_BR8_Msk
 (0x1UL << 
GPIO_BSRR_BR8_Pos
Ë

	)

1822 
	#GPIO_BSRR_BR8
 
GPIO_BSRR_BR8_Msk


	)

1823 
	#GPIO_BSRR_BR9_Pos
 (25U)

	)

1824 
	#GPIO_BSRR_BR9_Msk
 (0x1UL << 
GPIO_BSRR_BR9_Pos
Ë

	)

1825 
	#GPIO_BSRR_BR9
 
GPIO_BSRR_BR9_Msk


	)

1826 
	#GPIO_BSRR_BR10_Pos
 (26U)

	)

1827 
	#GPIO_BSRR_BR10_Msk
 (0x1UL << 
GPIO_BSRR_BR10_Pos
Ë

	)

1828 
	#GPIO_BSRR_BR10
 
GPIO_BSRR_BR10_Msk


	)

1829 
	#GPIO_BSRR_BR11_Pos
 (27U)

	)

1830 
	#GPIO_BSRR_BR11_Msk
 (0x1UL << 
GPIO_BSRR_BR11_Pos
Ë

	)

1831 
	#GPIO_BSRR_BR11
 
GPIO_BSRR_BR11_Msk


	)

1832 
	#GPIO_BSRR_BR12_Pos
 (28U)

	)

1833 
	#GPIO_BSRR_BR12_Msk
 (0x1UL << 
GPIO_BSRR_BR12_Pos
Ë

	)

1834 
	#GPIO_BSRR_BR12
 
GPIO_BSRR_BR12_Msk


	)

1835 
	#GPIO_BSRR_BR13_Pos
 (29U)

	)

1836 
	#GPIO_BSRR_BR13_Msk
 (0x1UL << 
GPIO_BSRR_BR13_Pos
Ë

	)

1837 
	#GPIO_BSRR_BR13
 
GPIO_BSRR_BR13_Msk


	)

1838 
	#GPIO_BSRR_BR14_Pos
 (30U)

	)

1839 
	#GPIO_BSRR_BR14_Msk
 (0x1UL << 
GPIO_BSRR_BR14_Pos
Ë

	)

1840 
	#GPIO_BSRR_BR14
 
GPIO_BSRR_BR14_Msk


	)

1841 
	#GPIO_BSRR_BR15_Pos
 (31U)

	)

1842 
	#GPIO_BSRR_BR15_Msk
 (0x1UL << 
GPIO_BSRR_BR15_Pos
Ë

	)

1843 
	#GPIO_BSRR_BR15
 
GPIO_BSRR_BR15_Msk


	)

1846 
	#GPIO_BRR_BR0_Pos
 (0U)

	)

1847 
	#GPIO_BRR_BR0_Msk
 (0x1UL << 
GPIO_BRR_BR0_Pos
Ë

	)

1848 
	#GPIO_BRR_BR0
 
GPIO_BRR_BR0_Msk


	)

1849 
	#GPIO_BRR_BR1_Pos
 (1U)

	)

1850 
	#GPIO_BRR_BR1_Msk
 (0x1UL << 
GPIO_BRR_BR1_Pos
Ë

	)

1851 
	#GPIO_BRR_BR1
 
GPIO_BRR_BR1_Msk


	)

1852 
	#GPIO_BRR_BR2_Pos
 (2U)

	)

1853 
	#GPIO_BRR_BR2_Msk
 (0x1UL << 
GPIO_BRR_BR2_Pos
Ë

	)

1854 
	#GPIO_BRR_BR2
 
GPIO_BRR_BR2_Msk


	)

1855 
	#GPIO_BRR_BR3_Pos
 (3U)

	)

1856 
	#GPIO_BRR_BR3_Msk
 (0x1UL << 
GPIO_BRR_BR3_Pos
Ë

	)

1857 
	#GPIO_BRR_BR3
 
GPIO_BRR_BR3_Msk


	)

1858 
	#GPIO_BRR_BR4_Pos
 (4U)

	)

1859 
	#GPIO_BRR_BR4_Msk
 (0x1UL << 
GPIO_BRR_BR4_Pos
Ë

	)

1860 
	#GPIO_BRR_BR4
 
GPIO_BRR_BR4_Msk


	)

1861 
	#GPIO_BRR_BR5_Pos
 (5U)

	)

1862 
	#GPIO_BRR_BR5_Msk
 (0x1UL << 
GPIO_BRR_BR5_Pos
Ë

	)

1863 
	#GPIO_BRR_BR5
 
GPIO_BRR_BR5_Msk


	)

1864 
	#GPIO_BRR_BR6_Pos
 (6U)

	)

1865 
	#GPIO_BRR_BR6_Msk
 (0x1UL << 
GPIO_BRR_BR6_Pos
Ë

	)

1866 
	#GPIO_BRR_BR6
 
GPIO_BRR_BR6_Msk


	)

1867 
	#GPIO_BRR_BR7_Pos
 (7U)

	)

1868 
	#GPIO_BRR_BR7_Msk
 (0x1UL << 
GPIO_BRR_BR7_Pos
Ë

	)

1869 
	#GPIO_BRR_BR7
 
GPIO_BRR_BR7_Msk


	)

1870 
	#GPIO_BRR_BR8_Pos
 (8U)

	)

1871 
	#GPIO_BRR_BR8_Msk
 (0x1UL << 
GPIO_BRR_BR8_Pos
Ë

	)

1872 
	#GPIO_BRR_BR8
 
GPIO_BRR_BR8_Msk


	)

1873 
	#GPIO_BRR_BR9_Pos
 (9U)

	)

1874 
	#GPIO_BRR_BR9_Msk
 (0x1UL << 
GPIO_BRR_BR9_Pos
Ë

	)

1875 
	#GPIO_BRR_BR9
 
GPIO_BRR_BR9_Msk


	)

1876 
	#GPIO_BRR_BR10_Pos
 (10U)

	)

1877 
	#GPIO_BRR_BR10_Msk
 (0x1UL << 
GPIO_BRR_BR10_Pos
Ë

	)

1878 
	#GPIO_BRR_BR10
 
GPIO_BRR_BR10_Msk


	)

1879 
	#GPIO_BRR_BR11_Pos
 (11U)

	)

1880 
	#GPIO_BRR_BR11_Msk
 (0x1UL << 
GPIO_BRR_BR11_Pos
Ë

	)

1881 
	#GPIO_BRR_BR11
 
GPIO_BRR_BR11_Msk


	)

1882 
	#GPIO_BRR_BR12_Pos
 (12U)

	)

1883 
	#GPIO_BRR_BR12_Msk
 (0x1UL << 
GPIO_BRR_BR12_Pos
Ë

	)

1884 
	#GPIO_BRR_BR12
 
GPIO_BRR_BR12_Msk


	)

1885 
	#GPIO_BRR_BR13_Pos
 (13U)

	)

1886 
	#GPIO_BRR_BR13_Msk
 (0x1UL << 
GPIO_BRR_BR13_Pos
Ë

	)

1887 
	#GPIO_BRR_BR13
 
GPIO_BRR_BR13_Msk


	)

1888 
	#GPIO_BRR_BR14_Pos
 (14U)

	)

1889 
	#GPIO_BRR_BR14_Msk
 (0x1UL << 
GPIO_BRR_BR14_Pos
Ë

	)

1890 
	#GPIO_BRR_BR14
 
GPIO_BRR_BR14_Msk


	)

1891 
	#GPIO_BRR_BR15_Pos
 (15U)

	)

1892 
	#GPIO_BRR_BR15_Msk
 (0x1UL << 
GPIO_BRR_BR15_Pos
Ë

	)

1893 
	#GPIO_BRR_BR15
 
GPIO_BRR_BR15_Msk


	)

1896 
	#GPIO_LCKR_LCK0_Pos
 (0U)

	)

1897 
	#GPIO_LCKR_LCK0_Msk
 (0x1UL << 
GPIO_LCKR_LCK0_Pos
Ë

	)

1898 
	#GPIO_LCKR_LCK0
 
GPIO_LCKR_LCK0_Msk


	)

1899 
	#GPIO_LCKR_LCK1_Pos
 (1U)

	)

1900 
	#GPIO_LCKR_LCK1_Msk
 (0x1UL << 
GPIO_LCKR_LCK1_Pos
Ë

	)

1901 
	#GPIO_LCKR_LCK1
 
GPIO_LCKR_LCK1_Msk


	)

1902 
	#GPIO_LCKR_LCK2_Pos
 (2U)

	)

1903 
	#GPIO_LCKR_LCK2_Msk
 (0x1UL << 
GPIO_LCKR_LCK2_Pos
Ë

	)

1904 
	#GPIO_LCKR_LCK2
 
GPIO_LCKR_LCK2_Msk


	)

1905 
	#GPIO_LCKR_LCK3_Pos
 (3U)

	)

1906 
	#GPIO_LCKR_LCK3_Msk
 (0x1UL << 
GPIO_LCKR_LCK3_Pos
Ë

	)

1907 
	#GPIO_LCKR_LCK3
 
GPIO_LCKR_LCK3_Msk


	)

1908 
	#GPIO_LCKR_LCK4_Pos
 (4U)

	)

1909 
	#GPIO_LCKR_LCK4_Msk
 (0x1UL << 
GPIO_LCKR_LCK4_Pos
Ë

	)

1910 
	#GPIO_LCKR_LCK4
 
GPIO_LCKR_LCK4_Msk


	)

1911 
	#GPIO_LCKR_LCK5_Pos
 (5U)

	)

1912 
	#GPIO_LCKR_LCK5_Msk
 (0x1UL << 
GPIO_LCKR_LCK5_Pos
Ë

	)

1913 
	#GPIO_LCKR_LCK5
 
GPIO_LCKR_LCK5_Msk


	)

1914 
	#GPIO_LCKR_LCK6_Pos
 (6U)

	)

1915 
	#GPIO_LCKR_LCK6_Msk
 (0x1UL << 
GPIO_LCKR_LCK6_Pos
Ë

	)

1916 
	#GPIO_LCKR_LCK6
 
GPIO_LCKR_LCK6_Msk


	)

1917 
	#GPIO_LCKR_LCK7_Pos
 (7U)

	)

1918 
	#GPIO_LCKR_LCK7_Msk
 (0x1UL << 
GPIO_LCKR_LCK7_Pos
Ë

	)

1919 
	#GPIO_LCKR_LCK7
 
GPIO_LCKR_LCK7_Msk


	)

1920 
	#GPIO_LCKR_LCK8_Pos
 (8U)

	)

1921 
	#GPIO_LCKR_LCK8_Msk
 (0x1UL << 
GPIO_LCKR_LCK8_Pos
Ë

	)

1922 
	#GPIO_LCKR_LCK8
 
GPIO_LCKR_LCK8_Msk


	)

1923 
	#GPIO_LCKR_LCK9_Pos
 (9U)

	)

1924 
	#GPIO_LCKR_LCK9_Msk
 (0x1UL << 
GPIO_LCKR_LCK9_Pos
Ë

	)

1925 
	#GPIO_LCKR_LCK9
 
GPIO_LCKR_LCK9_Msk


	)

1926 
	#GPIO_LCKR_LCK10_Pos
 (10U)

	)

1927 
	#GPIO_LCKR_LCK10_Msk
 (0x1UL << 
GPIO_LCKR_LCK10_Pos
Ë

	)

1928 
	#GPIO_LCKR_LCK10
 
GPIO_LCKR_LCK10_Msk


	)

1929 
	#GPIO_LCKR_LCK11_Pos
 (11U)

	)

1930 
	#GPIO_LCKR_LCK11_Msk
 (0x1UL << 
GPIO_LCKR_LCK11_Pos
Ë

	)

1931 
	#GPIO_LCKR_LCK11
 
GPIO_LCKR_LCK11_Msk


	)

1932 
	#GPIO_LCKR_LCK12_Pos
 (12U)

	)

1933 
	#GPIO_LCKR_LCK12_Msk
 (0x1UL << 
GPIO_LCKR_LCK12_Pos
Ë

	)

1934 
	#GPIO_LCKR_LCK12
 
GPIO_LCKR_LCK12_Msk


	)

1935 
	#GPIO_LCKR_LCK13_Pos
 (13U)

	)

1936 
	#GPIO_LCKR_LCK13_Msk
 (0x1UL << 
GPIO_LCKR_LCK13_Pos
Ë

	)

1937 
	#GPIO_LCKR_LCK13
 
GPIO_LCKR_LCK13_Msk


	)

1938 
	#GPIO_LCKR_LCK14_Pos
 (14U)

	)

1939 
	#GPIO_LCKR_LCK14_Msk
 (0x1UL << 
GPIO_LCKR_LCK14_Pos
Ë

	)

1940 
	#GPIO_LCKR_LCK14
 
GPIO_LCKR_LCK14_Msk


	)

1941 
	#GPIO_LCKR_LCK15_Pos
 (15U)

	)

1942 
	#GPIO_LCKR_LCK15_Msk
 (0x1UL << 
GPIO_LCKR_LCK15_Pos
Ë

	)

1943 
	#GPIO_LCKR_LCK15
 
GPIO_LCKR_LCK15_Msk


	)

1944 
	#GPIO_LCKR_LCKK_Pos
 (16U)

	)

1945 
	#GPIO_LCKR_LCKK_Msk
 (0x1UL << 
GPIO_LCKR_LCKK_Pos
Ë

	)

1946 
	#GPIO_LCKR_LCKK
 
GPIO_LCKR_LCKK_Msk


	)

1951 
	#AFIO_EVCR_PIN_Pos
 (0U)

	)

1952 
	#AFIO_EVCR_PIN_Msk
 (0xFUL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1953 
	#AFIO_EVCR_PIN
 
AFIO_EVCR_PIN_Msk


	)

1954 
	#AFIO_EVCR_PIN_0
 (0x1UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1955 
	#AFIO_EVCR_PIN_1
 (0x2UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1956 
	#AFIO_EVCR_PIN_2
 (0x4UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1957 
	#AFIO_EVCR_PIN_3
 (0x8UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1960 
	#AFIO_EVCR_PIN_PX0
 0x00000000U

	)

1961 
	#AFIO_EVCR_PIN_PX1_Pos
 (0U)

	)

1962 
	#AFIO_EVCR_PIN_PX1_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX1_Pos
Ë

	)

1963 
	#AFIO_EVCR_PIN_PX1
 
AFIO_EVCR_PIN_PX1_Msk


	)

1964 
	#AFIO_EVCR_PIN_PX2_Pos
 (1U)

	)

1965 
	#AFIO_EVCR_PIN_PX2_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX2_Pos
Ë

	)

1966 
	#AFIO_EVCR_PIN_PX2
 
AFIO_EVCR_PIN_PX2_Msk


	)

1967 
	#AFIO_EVCR_PIN_PX3_Pos
 (0U)

	)

1968 
	#AFIO_EVCR_PIN_PX3_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX3_Pos
Ë

	)

1969 
	#AFIO_EVCR_PIN_PX3
 
AFIO_EVCR_PIN_PX3_Msk


	)

1970 
	#AFIO_EVCR_PIN_PX4_Pos
 (2U)

	)

1971 
	#AFIO_EVCR_PIN_PX4_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX4_Pos
Ë

	)

1972 
	#AFIO_EVCR_PIN_PX4
 
AFIO_EVCR_PIN_PX4_Msk


	)

1973 
	#AFIO_EVCR_PIN_PX5_Pos
 (0U)

	)

1974 
	#AFIO_EVCR_PIN_PX5_Msk
 (0x5UL << 
AFIO_EVCR_PIN_PX5_Pos
Ë

	)

1975 
	#AFIO_EVCR_PIN_PX5
 
AFIO_EVCR_PIN_PX5_Msk


	)

1976 
	#AFIO_EVCR_PIN_PX6_Pos
 (1U)

	)

1977 
	#AFIO_EVCR_PIN_PX6_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX6_Pos
Ë

	)

1978 
	#AFIO_EVCR_PIN_PX6
 
AFIO_EVCR_PIN_PX6_Msk


	)

1979 
	#AFIO_EVCR_PIN_PX7_Pos
 (0U)

	)

1980 
	#AFIO_EVCR_PIN_PX7_Msk
 (0x7UL << 
AFIO_EVCR_PIN_PX7_Pos
Ë

	)

1981 
	#AFIO_EVCR_PIN_PX7
 
AFIO_EVCR_PIN_PX7_Msk


	)

1982 
	#AFIO_EVCR_PIN_PX8_Pos
 (3U)

	)

1983 
	#AFIO_EVCR_PIN_PX8_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX8_Pos
Ë

	)

1984 
	#AFIO_EVCR_PIN_PX8
 
AFIO_EVCR_PIN_PX8_Msk


	)

1985 
	#AFIO_EVCR_PIN_PX9_Pos
 (0U)

	)

1986 
	#AFIO_EVCR_PIN_PX9_Msk
 (0x9UL << 
AFIO_EVCR_PIN_PX9_Pos
Ë

	)

1987 
	#AFIO_EVCR_PIN_PX9
 
AFIO_EVCR_PIN_PX9_Msk


	)

1988 
	#AFIO_EVCR_PIN_PX10_Pos
 (1U)

	)

1989 
	#AFIO_EVCR_PIN_PX10_Msk
 (0x5UL << 
AFIO_EVCR_PIN_PX10_Pos
Ë

	)

1990 
	#AFIO_EVCR_PIN_PX10
 
AFIO_EVCR_PIN_PX10_Msk


	)

1991 
	#AFIO_EVCR_PIN_PX11_Pos
 (0U)

	)

1992 
	#AFIO_EVCR_PIN_PX11_Msk
 (0xBUL << 
AFIO_EVCR_PIN_PX11_Pos
Ë

	)

1993 
	#AFIO_EVCR_PIN_PX11
 
AFIO_EVCR_PIN_PX11_Msk


	)

1994 
	#AFIO_EVCR_PIN_PX12_Pos
 (2U)

	)

1995 
	#AFIO_EVCR_PIN_PX12_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX12_Pos
Ë

	)

1996 
	#AFIO_EVCR_PIN_PX12
 
AFIO_EVCR_PIN_PX12_Msk


	)

1997 
	#AFIO_EVCR_PIN_PX13_Pos
 (0U)

	)

1998 
	#AFIO_EVCR_PIN_PX13_Msk
 (0xDUL << 
AFIO_EVCR_PIN_PX13_Pos
Ë

	)

1999 
	#AFIO_EVCR_PIN_PX13
 
AFIO_EVCR_PIN_PX13_Msk


	)

2000 
	#AFIO_EVCR_PIN_PX14_Pos
 (1U)

	)

2001 
	#AFIO_EVCR_PIN_PX14_Msk
 (0x7UL << 
AFIO_EVCR_PIN_PX14_Pos
Ë

	)

2002 
	#AFIO_EVCR_PIN_PX14
 
AFIO_EVCR_PIN_PX14_Msk


	)

2003 
	#AFIO_EVCR_PIN_PX15_Pos
 (0U)

	)

2004 
	#AFIO_EVCR_PIN_PX15_Msk
 (0xFUL << 
AFIO_EVCR_PIN_PX15_Pos
Ë

	)

2005 
	#AFIO_EVCR_PIN_PX15
 
AFIO_EVCR_PIN_PX15_Msk


	)

2007 
	#AFIO_EVCR_PORT_Pos
 (4U)

	)

2008 
	#AFIO_EVCR_PORT_Msk
 (0x7UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2009 
	#AFIO_EVCR_PORT
 
AFIO_EVCR_PORT_Msk


	)

2010 
	#AFIO_EVCR_PORT_0
 (0x1UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2011 
	#AFIO_EVCR_PORT_1
 (0x2UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2012 
	#AFIO_EVCR_PORT_2
 (0x4UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2015 
	#AFIO_EVCR_PORT_PA
 0x00000000

	)

2016 
	#AFIO_EVCR_PORT_PB_Pos
 (4U)

	)

2017 
	#AFIO_EVCR_PORT_PB_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PB_Pos
Ë

	)

2018 
	#AFIO_EVCR_PORT_PB
 
AFIO_EVCR_PORT_PB_Msk


	)

2019 
	#AFIO_EVCR_PORT_PC_Pos
 (5U)

	)

2020 
	#AFIO_EVCR_PORT_PC_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PC_Pos
Ë

	)

2021 
	#AFIO_EVCR_PORT_PC
 
AFIO_EVCR_PORT_PC_Msk


	)

2022 
	#AFIO_EVCR_PORT_PD_Pos
 (4U)

	)

2023 
	#AFIO_EVCR_PORT_PD_Msk
 (0x3UL << 
AFIO_EVCR_PORT_PD_Pos
Ë

	)

2024 
	#AFIO_EVCR_PORT_PD
 
AFIO_EVCR_PORT_PD_Msk


	)

2025 
	#AFIO_EVCR_PORT_PE_Pos
 (6U)

	)

2026 
	#AFIO_EVCR_PORT_PE_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PE_Pos
Ë

	)

2027 
	#AFIO_EVCR_PORT_PE
 
AFIO_EVCR_PORT_PE_Msk


	)

2029 
	#AFIO_EVCR_EVOE_Pos
 (7U)

	)

2030 
	#AFIO_EVCR_EVOE_Msk
 (0x1UL << 
AFIO_EVCR_EVOE_Pos
Ë

	)

2031 
	#AFIO_EVCR_EVOE
 
AFIO_EVCR_EVOE_Msk


	)

2034 
	#AFIO_MAPR_SPI1_REMAP_Pos
 (0U)

	)

2035 
	#AFIO_MAPR_SPI1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_SPI1_REMAP_Pos
Ë

	)

2036 
	#AFIO_MAPR_SPI1_REMAP
 
AFIO_MAPR_SPI1_REMAP_Msk


	)

2037 
	#AFIO_MAPR_I2C1_REMAP_Pos
 (1U)

	)

2038 
	#AFIO_MAPR_I2C1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_I2C1_REMAP_Pos
Ë

	)

2039 
	#AFIO_MAPR_I2C1_REMAP
 
AFIO_MAPR_I2C1_REMAP_Msk


	)

2040 
	#AFIO_MAPR_USART1_REMAP_Pos
 (2U)

	)

2041 
	#AFIO_MAPR_USART1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART1_REMAP_Pos
Ë

	)

2042 
	#AFIO_MAPR_USART1_REMAP
 
AFIO_MAPR_USART1_REMAP_Msk


	)

2043 
	#AFIO_MAPR_USART2_REMAP_Pos
 (3U)

	)

2044 
	#AFIO_MAPR_USART2_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART2_REMAP_Pos
Ë

	)

2045 
	#AFIO_MAPR_USART2_REMAP
 
AFIO_MAPR_USART2_REMAP_Msk


	)

2047 
	#AFIO_MAPR_USART3_REMAP_Pos
 (4U)

	)

2048 
	#AFIO_MAPR_USART3_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_USART3_REMAP_Pos
Ë

	)

2049 
	#AFIO_MAPR_USART3_REMAP
 
AFIO_MAPR_USART3_REMAP_Msk


	)

2050 
	#AFIO_MAPR_USART3_REMAP_0
 (0x1UL << 
AFIO_MAPR_USART3_REMAP_Pos
Ë

	)

2051 
	#AFIO_MAPR_USART3_REMAP_1
 (0x2UL << 
AFIO_MAPR_USART3_REMAP_Pos
Ë

	)

2054 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 0x00000000U

	)

2055 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos
 (4U)

	)

2056 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos
Ë

	)

2057 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk


	)

2058 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos
 (4U)

	)

2059 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos
Ë

	)

2060 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 
AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk


	)

2062 
	#AFIO_MAPR_TIM1_REMAP_Pos
 (6U)

	)

2063 
	#AFIO_MAPR_TIM1_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM1_REMAP_Pos
Ë

	)

2064 
	#AFIO_MAPR_TIM1_REMAP
 
AFIO_MAPR_TIM1_REMAP_Msk


	)

2065 
	#AFIO_MAPR_TIM1_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM1_REMAP_Pos
Ë

	)

2066 
	#AFIO_MAPR_TIM1_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM1_REMAP_Pos
Ë

	)

2069 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 0x00000000U

	)

2070 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos
 (6U)

	)

2071 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos
Ë

	)

2072 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk


	)

2073 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos
 (6U)

	)

2074 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos
Ë

	)

2075 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 
AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk


	)

2077 
	#AFIO_MAPR_TIM2_REMAP_Pos
 (8U)

	)

2078 
	#AFIO_MAPR_TIM2_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM2_REMAP_Pos
Ë

	)

2079 
	#AFIO_MAPR_TIM2_REMAP
 
AFIO_MAPR_TIM2_REMAP_Msk


	)

2080 
	#AFIO_MAPR_TIM2_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_Pos
Ë

	)

2081 
	#AFIO_MAPR_TIM2_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM2_REMAP_Pos
Ë

	)

2084 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 0x00000000U

	)

2085 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos
 (8U)

	)

2086 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos
Ë

	)

2087 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk


	)

2088 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos
 (9U)

	)

2089 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos
Ë

	)

2090 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk


	)

2091 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos
 (8U)

	)

2092 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos
Ë

	)

2093 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 
AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk


	)

2095 
	#AFIO_MAPR_TIM3_REMAP_Pos
 (10U)

	)

2096 
	#AFIO_MAPR_TIM3_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM3_REMAP_Pos
Ë

	)

2097 
	#AFIO_MAPR_TIM3_REMAP
 
AFIO_MAPR_TIM3_REMAP_Msk


	)

2098 
	#AFIO_MAPR_TIM3_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM3_REMAP_Pos
Ë

	)

2099 
	#AFIO_MAPR_TIM3_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM3_REMAP_Pos
Ë

	)

2102 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 0x00000000U

	)

2103 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos
 (11U)

	)

2104 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos
Ë

	)

2105 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk


	)

2106 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos
 (10U)

	)

2107 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos
Ë

	)

2108 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 
AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk


	)

2110 
	#AFIO_MAPR_TIM4_REMAP_Pos
 (12U)

	)

2111 
	#AFIO_MAPR_TIM4_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM4_REMAP_Pos
Ë

	)

2112 
	#AFIO_MAPR_TIM4_REMAP
 
AFIO_MAPR_TIM4_REMAP_Msk


	)

2114 
	#AFIO_MAPR_CAN_REMAP_Pos
 (13U)

	)

2115 
	#AFIO_MAPR_CAN_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_CAN_REMAP_Pos
Ë

	)

2116 
	#AFIO_MAPR_CAN_REMAP
 
AFIO_MAPR_CAN_REMAP_Msk


	)

2117 
	#AFIO_MAPR_CAN_REMAP_0
 (0x1UL << 
AFIO_MAPR_CAN_REMAP_Pos
Ë

	)

2118 
	#AFIO_MAPR_CAN_REMAP_1
 (0x2UL << 
AFIO_MAPR_CAN_REMAP_Pos
Ë

	)

2121 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 0x00000000U

	)

2122 
	#AFIO_MAPR_CAN_REMAP_REMAP2_Pos
 (14U)

	)

2123 
	#AFIO_MAPR_CAN_REMAP_REMAP2_Msk
 (0x1UL << 
AFIO_MAPR_CAN_REMAP_REMAP2_Pos
Ë

	)

2124 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 
AFIO_MAPR_CAN_REMAP_REMAP2_Msk


	)

2125 
	#AFIO_MAPR_CAN_REMAP_REMAP3_Pos
 (13U)

	)

2126 
	#AFIO_MAPR_CAN_REMAP_REMAP3_Msk
 (0x3UL << 
AFIO_MAPR_CAN_REMAP_REMAP3_Pos
Ë

	)

2127 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 
AFIO_MAPR_CAN_REMAP_REMAP3_Msk


	)

2129 
	#AFIO_MAPR_PD01_REMAP_Pos
 (15U)

	)

2130 
	#AFIO_MAPR_PD01_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_PD01_REMAP_Pos
Ë

	)

2131 
	#AFIO_MAPR_PD01_REMAP
 
AFIO_MAPR_PD01_REMAP_Msk


	)

2134 
	#AFIO_MAPR_SWJ_CFG_Pos
 (24U)

	)

2135 
	#AFIO_MAPR_SWJ_CFG_Msk
 (0x7UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2136 
	#AFIO_MAPR_SWJ_CFG
 
AFIO_MAPR_SWJ_CFG_Msk


	)

2137 
	#AFIO_MAPR_SWJ_CFG_0
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2138 
	#AFIO_MAPR_SWJ_CFG_1
 (0x2UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2139 
	#AFIO_MAPR_SWJ_CFG_2
 (0x4UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2141 
	#AFIO_MAPR_SWJ_CFG_RESET
 0x00000000U

	)

2142 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos
 (24U)

	)

2143 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos
Ë

	)

2144 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 
AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk


	)

2145 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos
 (25U)

	)

2146 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos
Ë

	)

2147 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk


	)

2148 
	#AFIO_MAPR_SWJ_CFG_DISABLE_Pos
 (26U)

	)

2149 
	#AFIO_MAPR_SWJ_CFG_DISABLE_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_DISABLE_Pos
Ë

	)

2150 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 
AFIO_MAPR_SWJ_CFG_DISABLE_Msk


	)

2154 
	#AFIO_EXTICR1_EXTI0_Pos
 (0U)

	)

2155 
	#AFIO_EXTICR1_EXTI0_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI0_Pos
Ë

	)

2156 
	#AFIO_EXTICR1_EXTI0
 
AFIO_EXTICR1_EXTI0_Msk


	)

2157 
	#AFIO_EXTICR1_EXTI1_Pos
 (4U)

	)

2158 
	#AFIO_EXTICR1_EXTI1_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI1_Pos
Ë

	)

2159 
	#AFIO_EXTICR1_EXTI1
 
AFIO_EXTICR1_EXTI1_Msk


	)

2160 
	#AFIO_EXTICR1_EXTI2_Pos
 (8U)

	)

2161 
	#AFIO_EXTICR1_EXTI2_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI2_Pos
Ë

	)

2162 
	#AFIO_EXTICR1_EXTI2
 
AFIO_EXTICR1_EXTI2_Msk


	)

2163 
	#AFIO_EXTICR1_EXTI3_Pos
 (12U)

	)

2164 
	#AFIO_EXTICR1_EXTI3_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI3_Pos
Ë

	)

2165 
	#AFIO_EXTICR1_EXTI3
 
AFIO_EXTICR1_EXTI3_Msk


	)

2168 
	#AFIO_EXTICR1_EXTI0_PA
 0x00000000U

	)

2169 
	#AFIO_EXTICR1_EXTI0_PB_Pos
 (0U)

	)

2170 
	#AFIO_EXTICR1_EXTI0_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PB_Pos
Ë

	)

2171 
	#AFIO_EXTICR1_EXTI0_PB
 
AFIO_EXTICR1_EXTI0_PB_Msk


	)

2172 
	#AFIO_EXTICR1_EXTI0_PC_Pos
 (1U)

	)

2173 
	#AFIO_EXTICR1_EXTI0_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PC_Pos
Ë

	)

2174 
	#AFIO_EXTICR1_EXTI0_PC
 
AFIO_EXTICR1_EXTI0_PC_Msk


	)

2175 
	#AFIO_EXTICR1_EXTI0_PD_Pos
 (0U)

	)

2176 
	#AFIO_EXTICR1_EXTI0_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI0_PD_Pos
Ë

	)

2177 
	#AFIO_EXTICR1_EXTI0_PD
 
AFIO_EXTICR1_EXTI0_PD_Msk


	)

2178 
	#AFIO_EXTICR1_EXTI0_PE_Pos
 (2U)

	)

2179 
	#AFIO_EXTICR1_EXTI0_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PE_Pos
Ë

	)

2180 
	#AFIO_EXTICR1_EXTI0_PE
 
AFIO_EXTICR1_EXTI0_PE_Msk


	)

2181 
	#AFIO_EXTICR1_EXTI0_PF_Pos
 (0U)

	)

2182 
	#AFIO_EXTICR1_EXTI0_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI0_PF_Pos
Ë

	)

2183 
	#AFIO_EXTICR1_EXTI0_PF
 
AFIO_EXTICR1_EXTI0_PF_Msk


	)

2184 
	#AFIO_EXTICR1_EXTI0_PG_Pos
 (1U)

	)

2185 
	#AFIO_EXTICR1_EXTI0_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI0_PG_Pos
Ë

	)

2186 
	#AFIO_EXTICR1_EXTI0_PG
 
AFIO_EXTICR1_EXTI0_PG_Msk


	)

2189 
	#AFIO_EXTICR1_EXTI1_PA
 0x00000000U

	)

2190 
	#AFIO_EXTICR1_EXTI1_PB_Pos
 (4U)

	)

2191 
	#AFIO_EXTICR1_EXTI1_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PB_Pos
Ë

	)

2192 
	#AFIO_EXTICR1_EXTI1_PB
 
AFIO_EXTICR1_EXTI1_PB_Msk


	)

2193 
	#AFIO_EXTICR1_EXTI1_PC_Pos
 (5U)

	)

2194 
	#AFIO_EXTICR1_EXTI1_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PC_Pos
Ë

	)

2195 
	#AFIO_EXTICR1_EXTI1_PC
 
AFIO_EXTICR1_EXTI1_PC_Msk


	)

2196 
	#AFIO_EXTICR1_EXTI1_PD_Pos
 (4U)

	)

2197 
	#AFIO_EXTICR1_EXTI1_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI1_PD_Pos
Ë

	)

2198 
	#AFIO_EXTICR1_EXTI1_PD
 
AFIO_EXTICR1_EXTI1_PD_Msk


	)

2199 
	#AFIO_EXTICR1_EXTI1_PE_Pos
 (6U)

	)

2200 
	#AFIO_EXTICR1_EXTI1_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PE_Pos
Ë

	)

2201 
	#AFIO_EXTICR1_EXTI1_PE
 
AFIO_EXTICR1_EXTI1_PE_Msk


	)

2202 
	#AFIO_EXTICR1_EXTI1_PF_Pos
 (4U)

	)

2203 
	#AFIO_EXTICR1_EXTI1_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI1_PF_Pos
Ë

	)

2204 
	#AFIO_EXTICR1_EXTI1_PF
 
AFIO_EXTICR1_EXTI1_PF_Msk


	)

2205 
	#AFIO_EXTICR1_EXTI1_PG_Pos
 (5U)

	)

2206 
	#AFIO_EXTICR1_EXTI1_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI1_PG_Pos
Ë

	)

2207 
	#AFIO_EXTICR1_EXTI1_PG
 
AFIO_EXTICR1_EXTI1_PG_Msk


	)

2210 
	#AFIO_EXTICR1_EXTI2_PA
 0x00000000U

	)

2211 
	#AFIO_EXTICR1_EXTI2_PB_Pos
 (8U)

	)

2212 
	#AFIO_EXTICR1_EXTI2_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PB_Pos
Ë

	)

2213 
	#AFIO_EXTICR1_EXTI2_PB
 
AFIO_EXTICR1_EXTI2_PB_Msk


	)

2214 
	#AFIO_EXTICR1_EXTI2_PC_Pos
 (9U)

	)

2215 
	#AFIO_EXTICR1_EXTI2_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PC_Pos
Ë

	)

2216 
	#AFIO_EXTICR1_EXTI2_PC
 
AFIO_EXTICR1_EXTI2_PC_Msk


	)

2217 
	#AFIO_EXTICR1_EXTI2_PD_Pos
 (8U)

	)

2218 
	#AFIO_EXTICR1_EXTI2_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI2_PD_Pos
Ë

	)

2219 
	#AFIO_EXTICR1_EXTI2_PD
 
AFIO_EXTICR1_EXTI2_PD_Msk


	)

2220 
	#AFIO_EXTICR1_EXTI2_PE_Pos
 (10U)

	)

2221 
	#AFIO_EXTICR1_EXTI2_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PE_Pos
Ë

	)

2222 
	#AFIO_EXTICR1_EXTI2_PE
 
AFIO_EXTICR1_EXTI2_PE_Msk


	)

2223 
	#AFIO_EXTICR1_EXTI2_PF_Pos
 (8U)

	)

2224 
	#AFIO_EXTICR1_EXTI2_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI2_PF_Pos
Ë

	)

2225 
	#AFIO_EXTICR1_EXTI2_PF
 
AFIO_EXTICR1_EXTI2_PF_Msk


	)

2226 
	#AFIO_EXTICR1_EXTI2_PG_Pos
 (9U)

	)

2227 
	#AFIO_EXTICR1_EXTI2_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI2_PG_Pos
Ë

	)

2228 
	#AFIO_EXTICR1_EXTI2_PG
 
AFIO_EXTICR1_EXTI2_PG_Msk


	)

2231 
	#AFIO_EXTICR1_EXTI3_PA
 0x00000000U

	)

2232 
	#AFIO_EXTICR1_EXTI3_PB_Pos
 (12U)

	)

2233 
	#AFIO_EXTICR1_EXTI3_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PB_Pos
Ë

	)

2234 
	#AFIO_EXTICR1_EXTI3_PB
 
AFIO_EXTICR1_EXTI3_PB_Msk


	)

2235 
	#AFIO_EXTICR1_EXTI3_PC_Pos
 (13U)

	)

2236 
	#AFIO_EXTICR1_EXTI3_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PC_Pos
Ë

	)

2237 
	#AFIO_EXTICR1_EXTI3_PC
 
AFIO_EXTICR1_EXTI3_PC_Msk


	)

2238 
	#AFIO_EXTICR1_EXTI3_PD_Pos
 (12U)

	)

2239 
	#AFIO_EXTICR1_EXTI3_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI3_PD_Pos
Ë

	)

2240 
	#AFIO_EXTICR1_EXTI3_PD
 
AFIO_EXTICR1_EXTI3_PD_Msk


	)

2241 
	#AFIO_EXTICR1_EXTI3_PE_Pos
 (14U)

	)

2242 
	#AFIO_EXTICR1_EXTI3_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PE_Pos
Ë

	)

2243 
	#AFIO_EXTICR1_EXTI3_PE
 
AFIO_EXTICR1_EXTI3_PE_Msk


	)

2244 
	#AFIO_EXTICR1_EXTI3_PF_Pos
 (12U)

	)

2245 
	#AFIO_EXTICR1_EXTI3_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI3_PF_Pos
Ë

	)

2246 
	#AFIO_EXTICR1_EXTI3_PF
 
AFIO_EXTICR1_EXTI3_PF_Msk


	)

2247 
	#AFIO_EXTICR1_EXTI3_PG_Pos
 (13U)

	)

2248 
	#AFIO_EXTICR1_EXTI3_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI3_PG_Pos
Ë

	)

2249 
	#AFIO_EXTICR1_EXTI3_PG
 
AFIO_EXTICR1_EXTI3_PG_Msk


	)

2252 
	#AFIO_EXTICR2_EXTI4_Pos
 (0U)

	)

2253 
	#AFIO_EXTICR2_EXTI4_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI4_Pos
Ë

	)

2254 
	#AFIO_EXTICR2_EXTI4
 
AFIO_EXTICR2_EXTI4_Msk


	)

2255 
	#AFIO_EXTICR2_EXTI5_Pos
 (4U)

	)

2256 
	#AFIO_EXTICR2_EXTI5_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI5_Pos
Ë

	)

2257 
	#AFIO_EXTICR2_EXTI5
 
AFIO_EXTICR2_EXTI5_Msk


	)

2258 
	#AFIO_EXTICR2_EXTI6_Pos
 (8U)

	)

2259 
	#AFIO_EXTICR2_EXTI6_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI6_Pos
Ë

	)

2260 
	#AFIO_EXTICR2_EXTI6
 
AFIO_EXTICR2_EXTI6_Msk


	)

2261 
	#AFIO_EXTICR2_EXTI7_Pos
 (12U)

	)

2262 
	#AFIO_EXTICR2_EXTI7_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI7_Pos
Ë

	)

2263 
	#AFIO_EXTICR2_EXTI7
 
AFIO_EXTICR2_EXTI7_Msk


	)

2266 
	#AFIO_EXTICR2_EXTI4_PA
 0x00000000U

	)

2267 
	#AFIO_EXTICR2_EXTI4_PB_Pos
 (0U)

	)

2268 
	#AFIO_EXTICR2_EXTI4_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PB_Pos
Ë

	)

2269 
	#AFIO_EXTICR2_EXTI4_PB
 
AFIO_EXTICR2_EXTI4_PB_Msk


	)

2270 
	#AFIO_EXTICR2_EXTI4_PC_Pos
 (1U)

	)

2271 
	#AFIO_EXTICR2_EXTI4_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PC_Pos
Ë

	)

2272 
	#AFIO_EXTICR2_EXTI4_PC
 
AFIO_EXTICR2_EXTI4_PC_Msk


	)

2273 
	#AFIO_EXTICR2_EXTI4_PD_Pos
 (0U)

	)

2274 
	#AFIO_EXTICR2_EXTI4_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI4_PD_Pos
Ë

	)

2275 
	#AFIO_EXTICR2_EXTI4_PD
 
AFIO_EXTICR2_EXTI4_PD_Msk


	)

2276 
	#AFIO_EXTICR2_EXTI4_PE_Pos
 (2U)

	)

2277 
	#AFIO_EXTICR2_EXTI4_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PE_Pos
Ë

	)

2278 
	#AFIO_EXTICR2_EXTI4_PE
 
AFIO_EXTICR2_EXTI4_PE_Msk


	)

2279 
	#AFIO_EXTICR2_EXTI4_PF_Pos
 (0U)

	)

2280 
	#AFIO_EXTICR2_EXTI4_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI4_PF_Pos
Ë

	)

2281 
	#AFIO_EXTICR2_EXTI4_PF
 
AFIO_EXTICR2_EXTI4_PF_Msk


	)

2282 
	#AFIO_EXTICR2_EXTI4_PG_Pos
 (1U)

	)

2283 
	#AFIO_EXTICR2_EXTI4_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI4_PG_Pos
Ë

	)

2284 
	#AFIO_EXTICR2_EXTI4_PG
 
AFIO_EXTICR2_EXTI4_PG_Msk


	)

2287 
	#AFIO_EXTICR2_EXTI5_PA
 0x00000000U

	)

2288 
	#AFIO_EXTICR2_EXTI5_PB_Pos
 (4U)

	)

2289 
	#AFIO_EXTICR2_EXTI5_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PB_Pos
Ë

	)

2290 
	#AFIO_EXTICR2_EXTI5_PB
 
AFIO_EXTICR2_EXTI5_PB_Msk


	)

2291 
	#AFIO_EXTICR2_EXTI5_PC_Pos
 (5U)

	)

2292 
	#AFIO_EXTICR2_EXTI5_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PC_Pos
Ë

	)

2293 
	#AFIO_EXTICR2_EXTI5_PC
 
AFIO_EXTICR2_EXTI5_PC_Msk


	)

2294 
	#AFIO_EXTICR2_EXTI5_PD_Pos
 (4U)

	)

2295 
	#AFIO_EXTICR2_EXTI5_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI5_PD_Pos
Ë

	)

2296 
	#AFIO_EXTICR2_EXTI5_PD
 
AFIO_EXTICR2_EXTI5_PD_Msk


	)

2297 
	#AFIO_EXTICR2_EXTI5_PE_Pos
 (6U)

	)

2298 
	#AFIO_EXTICR2_EXTI5_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PE_Pos
Ë

	)

2299 
	#AFIO_EXTICR2_EXTI5_PE
 
AFIO_EXTICR2_EXTI5_PE_Msk


	)

2300 
	#AFIO_EXTICR2_EXTI5_PF_Pos
 (4U)

	)

2301 
	#AFIO_EXTICR2_EXTI5_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI5_PF_Pos
Ë

	)

2302 
	#AFIO_EXTICR2_EXTI5_PF
 
AFIO_EXTICR2_EXTI5_PF_Msk


	)

2303 
	#AFIO_EXTICR2_EXTI5_PG_Pos
 (5U)

	)

2304 
	#AFIO_EXTICR2_EXTI5_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI5_PG_Pos
Ë

	)

2305 
	#AFIO_EXTICR2_EXTI5_PG
 
AFIO_EXTICR2_EXTI5_PG_Msk


	)

2308 
	#AFIO_EXTICR2_EXTI6_PA
 0x00000000U

	)

2309 
	#AFIO_EXTICR2_EXTI6_PB_Pos
 (8U)

	)

2310 
	#AFIO_EXTICR2_EXTI6_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PB_Pos
Ë

	)

2311 
	#AFIO_EXTICR2_EXTI6_PB
 
AFIO_EXTICR2_EXTI6_PB_Msk


	)

2312 
	#AFIO_EXTICR2_EXTI6_PC_Pos
 (9U)

	)

2313 
	#AFIO_EXTICR2_EXTI6_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PC_Pos
Ë

	)

2314 
	#AFIO_EXTICR2_EXTI6_PC
 
AFIO_EXTICR2_EXTI6_PC_Msk


	)

2315 
	#AFIO_EXTICR2_EXTI6_PD_Pos
 (8U)

	)

2316 
	#AFIO_EXTICR2_EXTI6_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI6_PD_Pos
Ë

	)

2317 
	#AFIO_EXTICR2_EXTI6_PD
 
AFIO_EXTICR2_EXTI6_PD_Msk


	)

2318 
	#AFIO_EXTICR2_EXTI6_PE_Pos
 (10U)

	)

2319 
	#AFIO_EXTICR2_EXTI6_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PE_Pos
Ë

	)

2320 
	#AFIO_EXTICR2_EXTI6_PE
 
AFIO_EXTICR2_EXTI6_PE_Msk


	)

2321 
	#AFIO_EXTICR2_EXTI6_PF_Pos
 (8U)

	)

2322 
	#AFIO_EXTICR2_EXTI6_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI6_PF_Pos
Ë

	)

2323 
	#AFIO_EXTICR2_EXTI6_PF
 
AFIO_EXTICR2_EXTI6_PF_Msk


	)

2324 
	#AFIO_EXTICR2_EXTI6_PG_Pos
 (9U)

	)

2325 
	#AFIO_EXTICR2_EXTI6_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI6_PG_Pos
Ë

	)

2326 
	#AFIO_EXTICR2_EXTI6_PG
 
AFIO_EXTICR2_EXTI6_PG_Msk


	)

2329 
	#AFIO_EXTICR2_EXTI7_PA
 0x00000000U

	)

2330 
	#AFIO_EXTICR2_EXTI7_PB_Pos
 (12U)

	)

2331 
	#AFIO_EXTICR2_EXTI7_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PB_Pos
Ë

	)

2332 
	#AFIO_EXTICR2_EXTI7_PB
 
AFIO_EXTICR2_EXTI7_PB_Msk


	)

2333 
	#AFIO_EXTICR2_EXTI7_PC_Pos
 (13U)

	)

2334 
	#AFIO_EXTICR2_EXTI7_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PC_Pos
Ë

	)

2335 
	#AFIO_EXTICR2_EXTI7_PC
 
AFIO_EXTICR2_EXTI7_PC_Msk


	)

2336 
	#AFIO_EXTICR2_EXTI7_PD_Pos
 (12U)

	)

2337 
	#AFIO_EXTICR2_EXTI7_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI7_PD_Pos
Ë

	)

2338 
	#AFIO_EXTICR2_EXTI7_PD
 
AFIO_EXTICR2_EXTI7_PD_Msk


	)

2339 
	#AFIO_EXTICR2_EXTI7_PE_Pos
 (14U)

	)

2340 
	#AFIO_EXTICR2_EXTI7_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PE_Pos
Ë

	)

2341 
	#AFIO_EXTICR2_EXTI7_PE
 
AFIO_EXTICR2_EXTI7_PE_Msk


	)

2342 
	#AFIO_EXTICR2_EXTI7_PF_Pos
 (12U)

	)

2343 
	#AFIO_EXTICR2_EXTI7_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI7_PF_Pos
Ë

	)

2344 
	#AFIO_EXTICR2_EXTI7_PF
 
AFIO_EXTICR2_EXTI7_PF_Msk


	)

2345 
	#AFIO_EXTICR2_EXTI7_PG_Pos
 (13U)

	)

2346 
	#AFIO_EXTICR2_EXTI7_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI7_PG_Pos
Ë

	)

2347 
	#AFIO_EXTICR2_EXTI7_PG
 
AFIO_EXTICR2_EXTI7_PG_Msk


	)

2350 
	#AFIO_EXTICR3_EXTI8_Pos
 (0U)

	)

2351 
	#AFIO_EXTICR3_EXTI8_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI8_Pos
Ë

	)

2352 
	#AFIO_EXTICR3_EXTI8
 
AFIO_EXTICR3_EXTI8_Msk


	)

2353 
	#AFIO_EXTICR3_EXTI9_Pos
 (4U)

	)

2354 
	#AFIO_EXTICR3_EXTI9_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI9_Pos
Ë

	)

2355 
	#AFIO_EXTICR3_EXTI9
 
AFIO_EXTICR3_EXTI9_Msk


	)

2356 
	#AFIO_EXTICR3_EXTI10_Pos
 (8U)

	)

2357 
	#AFIO_EXTICR3_EXTI10_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI10_Pos
Ë

	)

2358 
	#AFIO_EXTICR3_EXTI10
 
AFIO_EXTICR3_EXTI10_Msk


	)

2359 
	#AFIO_EXTICR3_EXTI11_Pos
 (12U)

	)

2360 
	#AFIO_EXTICR3_EXTI11_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI11_Pos
Ë

	)

2361 
	#AFIO_EXTICR3_EXTI11
 
AFIO_EXTICR3_EXTI11_Msk


	)

2364 
	#AFIO_EXTICR3_EXTI8_PA
 0x00000000U

	)

2365 
	#AFIO_EXTICR3_EXTI8_PB_Pos
 (0U)

	)

2366 
	#AFIO_EXTICR3_EXTI8_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PB_Pos
Ë

	)

2367 
	#AFIO_EXTICR3_EXTI8_PB
 
AFIO_EXTICR3_EXTI8_PB_Msk


	)

2368 
	#AFIO_EXTICR3_EXTI8_PC_Pos
 (1U)

	)

2369 
	#AFIO_EXTICR3_EXTI8_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PC_Pos
Ë

	)

2370 
	#AFIO_EXTICR3_EXTI8_PC
 
AFIO_EXTICR3_EXTI8_PC_Msk


	)

2371 
	#AFIO_EXTICR3_EXTI8_PD_Pos
 (0U)

	)

2372 
	#AFIO_EXTICR3_EXTI8_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI8_PD_Pos
Ë

	)

2373 
	#AFIO_EXTICR3_EXTI8_PD
 
AFIO_EXTICR3_EXTI8_PD_Msk


	)

2374 
	#AFIO_EXTICR3_EXTI8_PE_Pos
 (2U)

	)

2375 
	#AFIO_EXTICR3_EXTI8_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PE_Pos
Ë

	)

2376 
	#AFIO_EXTICR3_EXTI8_PE
 
AFIO_EXTICR3_EXTI8_PE_Msk


	)

2377 
	#AFIO_EXTICR3_EXTI8_PF_Pos
 (0U)

	)

2378 
	#AFIO_EXTICR3_EXTI8_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI8_PF_Pos
Ë

	)

2379 
	#AFIO_EXTICR3_EXTI8_PF
 
AFIO_EXTICR3_EXTI8_PF_Msk


	)

2380 
	#AFIO_EXTICR3_EXTI8_PG_Pos
 (1U)

	)

2381 
	#AFIO_EXTICR3_EXTI8_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI8_PG_Pos
Ë

	)

2382 
	#AFIO_EXTICR3_EXTI8_PG
 
AFIO_EXTICR3_EXTI8_PG_Msk


	)

2385 
	#AFIO_EXTICR3_EXTI9_PA
 0x00000000U

	)

2386 
	#AFIO_EXTICR3_EXTI9_PB_Pos
 (4U)

	)

2387 
	#AFIO_EXTICR3_EXTI9_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PB_Pos
Ë

	)

2388 
	#AFIO_EXTICR3_EXTI9_PB
 
AFIO_EXTICR3_EXTI9_PB_Msk


	)

2389 
	#AFIO_EXTICR3_EXTI9_PC_Pos
 (5U)

	)

2390 
	#AFIO_EXTICR3_EXTI9_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PC_Pos
Ë

	)

2391 
	#AFIO_EXTICR3_EXTI9_PC
 
AFIO_EXTICR3_EXTI9_PC_Msk


	)

2392 
	#AFIO_EXTICR3_EXTI9_PD_Pos
 (4U)

	)

2393 
	#AFIO_EXTICR3_EXTI9_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI9_PD_Pos
Ë

	)

2394 
	#AFIO_EXTICR3_EXTI9_PD
 
AFIO_EXTICR3_EXTI9_PD_Msk


	)

2395 
	#AFIO_EXTICR3_EXTI9_PE_Pos
 (6U)

	)

2396 
	#AFIO_EXTICR3_EXTI9_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PE_Pos
Ë

	)

2397 
	#AFIO_EXTICR3_EXTI9_PE
 
AFIO_EXTICR3_EXTI9_PE_Msk


	)

2398 
	#AFIO_EXTICR3_EXTI9_PF_Pos
 (4U)

	)

2399 
	#AFIO_EXTICR3_EXTI9_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI9_PF_Pos
Ë

	)

2400 
	#AFIO_EXTICR3_EXTI9_PF
 
AFIO_EXTICR3_EXTI9_PF_Msk


	)

2401 
	#AFIO_EXTICR3_EXTI9_PG_Pos
 (5U)

	)

2402 
	#AFIO_EXTICR3_EXTI9_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI9_PG_Pos
Ë

	)

2403 
	#AFIO_EXTICR3_EXTI9_PG
 
AFIO_EXTICR3_EXTI9_PG_Msk


	)

2406 
	#AFIO_EXTICR3_EXTI10_PA
 0x00000000U

	)

2407 
	#AFIO_EXTICR3_EXTI10_PB_Pos
 (8U)

	)

2408 
	#AFIO_EXTICR3_EXTI10_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PB_Pos
Ë

	)

2409 
	#AFIO_EXTICR3_EXTI10_PB
 
AFIO_EXTICR3_EXTI10_PB_Msk


	)

2410 
	#AFIO_EXTICR3_EXTI10_PC_Pos
 (9U)

	)

2411 
	#AFIO_EXTICR3_EXTI10_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PC_Pos
Ë

	)

2412 
	#AFIO_EXTICR3_EXTI10_PC
 
AFIO_EXTICR3_EXTI10_PC_Msk


	)

2413 
	#AFIO_EXTICR3_EXTI10_PD_Pos
 (8U)

	)

2414 
	#AFIO_EXTICR3_EXTI10_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI10_PD_Pos
Ë

	)

2415 
	#AFIO_EXTICR3_EXTI10_PD
 
AFIO_EXTICR3_EXTI10_PD_Msk


	)

2416 
	#AFIO_EXTICR3_EXTI10_PE_Pos
 (10U)

	)

2417 
	#AFIO_EXTICR3_EXTI10_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PE_Pos
Ë

	)

2418 
	#AFIO_EXTICR3_EXTI10_PE
 
AFIO_EXTICR3_EXTI10_PE_Msk


	)

2419 
	#AFIO_EXTICR3_EXTI10_PF_Pos
 (8U)

	)

2420 
	#AFIO_EXTICR3_EXTI10_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI10_PF_Pos
Ë

	)

2421 
	#AFIO_EXTICR3_EXTI10_PF
 
AFIO_EXTICR3_EXTI10_PF_Msk


	)

2422 
	#AFIO_EXTICR3_EXTI10_PG_Pos
 (9U)

	)

2423 
	#AFIO_EXTICR3_EXTI10_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI10_PG_Pos
Ë

	)

2424 
	#AFIO_EXTICR3_EXTI10_PG
 
AFIO_EXTICR3_EXTI10_PG_Msk


	)

2427 
	#AFIO_EXTICR3_EXTI11_PA
 0x00000000U

	)

2428 
	#AFIO_EXTICR3_EXTI11_PB_Pos
 (12U)

	)

2429 
	#AFIO_EXTICR3_EXTI11_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PB_Pos
Ë

	)

2430 
	#AFIO_EXTICR3_EXTI11_PB
 
AFIO_EXTICR3_EXTI11_PB_Msk


	)

2431 
	#AFIO_EXTICR3_EXTI11_PC_Pos
 (13U)

	)

2432 
	#AFIO_EXTICR3_EXTI11_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PC_Pos
Ë

	)

2433 
	#AFIO_EXTICR3_EXTI11_PC
 
AFIO_EXTICR3_EXTI11_PC_Msk


	)

2434 
	#AFIO_EXTICR3_EXTI11_PD_Pos
 (12U)

	)

2435 
	#AFIO_EXTICR3_EXTI11_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI11_PD_Pos
Ë

	)

2436 
	#AFIO_EXTICR3_EXTI11_PD
 
AFIO_EXTICR3_EXTI11_PD_Msk


	)

2437 
	#AFIO_EXTICR3_EXTI11_PE_Pos
 (14U)

	)

2438 
	#AFIO_EXTICR3_EXTI11_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PE_Pos
Ë

	)

2439 
	#AFIO_EXTICR3_EXTI11_PE
 
AFIO_EXTICR3_EXTI11_PE_Msk


	)

2440 
	#AFIO_EXTICR3_EXTI11_PF_Pos
 (12U)

	)

2441 
	#AFIO_EXTICR3_EXTI11_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI11_PF_Pos
Ë

	)

2442 
	#AFIO_EXTICR3_EXTI11_PF
 
AFIO_EXTICR3_EXTI11_PF_Msk


	)

2443 
	#AFIO_EXTICR3_EXTI11_PG_Pos
 (13U)

	)

2444 
	#AFIO_EXTICR3_EXTI11_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI11_PG_Pos
Ë

	)

2445 
	#AFIO_EXTICR3_EXTI11_PG
 
AFIO_EXTICR3_EXTI11_PG_Msk


	)

2448 
	#AFIO_EXTICR4_EXTI12_Pos
 (0U)

	)

2449 
	#AFIO_EXTICR4_EXTI12_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI12_Pos
Ë

	)

2450 
	#AFIO_EXTICR4_EXTI12
 
AFIO_EXTICR4_EXTI12_Msk


	)

2451 
	#AFIO_EXTICR4_EXTI13_Pos
 (4U)

	)

2452 
	#AFIO_EXTICR4_EXTI13_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI13_Pos
Ë

	)

2453 
	#AFIO_EXTICR4_EXTI13
 
AFIO_EXTICR4_EXTI13_Msk


	)

2454 
	#AFIO_EXTICR4_EXTI14_Pos
 (8U)

	)

2455 
	#AFIO_EXTICR4_EXTI14_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI14_Pos
Ë

	)

2456 
	#AFIO_EXTICR4_EXTI14
 
AFIO_EXTICR4_EXTI14_Msk


	)

2457 
	#AFIO_EXTICR4_EXTI15_Pos
 (12U)

	)

2458 
	#AFIO_EXTICR4_EXTI15_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI15_Pos
Ë

	)

2459 
	#AFIO_EXTICR4_EXTI15
 
AFIO_EXTICR4_EXTI15_Msk


	)

2462 
	#AFIO_EXTICR4_EXTI12_PA
 0x00000000U

	)

2463 
	#AFIO_EXTICR4_EXTI12_PB_Pos
 (0U)

	)

2464 
	#AFIO_EXTICR4_EXTI12_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PB_Pos
Ë

	)

2465 
	#AFIO_EXTICR4_EXTI12_PB
 
AFIO_EXTICR4_EXTI12_PB_Msk


	)

2466 
	#AFIO_EXTICR4_EXTI12_PC_Pos
 (1U)

	)

2467 
	#AFIO_EXTICR4_EXTI12_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PC_Pos
Ë

	)

2468 
	#AFIO_EXTICR4_EXTI12_PC
 
AFIO_EXTICR4_EXTI12_PC_Msk


	)

2469 
	#AFIO_EXTICR4_EXTI12_PD_Pos
 (0U)

	)

2470 
	#AFIO_EXTICR4_EXTI12_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI12_PD_Pos
Ë

	)

2471 
	#AFIO_EXTICR4_EXTI12_PD
 
AFIO_EXTICR4_EXTI12_PD_Msk


	)

2472 
	#AFIO_EXTICR4_EXTI12_PE_Pos
 (2U)

	)

2473 
	#AFIO_EXTICR4_EXTI12_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PE_Pos
Ë

	)

2474 
	#AFIO_EXTICR4_EXTI12_PE
 
AFIO_EXTICR4_EXTI12_PE_Msk


	)

2475 
	#AFIO_EXTICR4_EXTI12_PF_Pos
 (0U)

	)

2476 
	#AFIO_EXTICR4_EXTI12_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI12_PF_Pos
Ë

	)

2477 
	#AFIO_EXTICR4_EXTI12_PF
 
AFIO_EXTICR4_EXTI12_PF_Msk


	)

2478 
	#AFIO_EXTICR4_EXTI12_PG_Pos
 (1U)

	)

2479 
	#AFIO_EXTICR4_EXTI12_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI12_PG_Pos
Ë

	)

2480 
	#AFIO_EXTICR4_EXTI12_PG
 
AFIO_EXTICR4_EXTI12_PG_Msk


	)

2483 
	#AFIO_EXTICR4_EXTI13_PA
 0x00000000U

	)

2484 
	#AFIO_EXTICR4_EXTI13_PB_Pos
 (4U)

	)

2485 
	#AFIO_EXTICR4_EXTI13_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PB_Pos
Ë

	)

2486 
	#AFIO_EXTICR4_EXTI13_PB
 
AFIO_EXTICR4_EXTI13_PB_Msk


	)

2487 
	#AFIO_EXTICR4_EXTI13_PC_Pos
 (5U)

	)

2488 
	#AFIO_EXTICR4_EXTI13_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PC_Pos
Ë

	)

2489 
	#AFIO_EXTICR4_EXTI13_PC
 
AFIO_EXTICR4_EXTI13_PC_Msk


	)

2490 
	#AFIO_EXTICR4_EXTI13_PD_Pos
 (4U)

	)

2491 
	#AFIO_EXTICR4_EXTI13_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI13_PD_Pos
Ë

	)

2492 
	#AFIO_EXTICR4_EXTI13_PD
 
AFIO_EXTICR4_EXTI13_PD_Msk


	)

2493 
	#AFIO_EXTICR4_EXTI13_PE_Pos
 (6U)

	)

2494 
	#AFIO_EXTICR4_EXTI13_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PE_Pos
Ë

	)

2495 
	#AFIO_EXTICR4_EXTI13_PE
 
AFIO_EXTICR4_EXTI13_PE_Msk


	)

2496 
	#AFIO_EXTICR4_EXTI13_PF_Pos
 (4U)

	)

2497 
	#AFIO_EXTICR4_EXTI13_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI13_PF_Pos
Ë

	)

2498 
	#AFIO_EXTICR4_EXTI13_PF
 
AFIO_EXTICR4_EXTI13_PF_Msk


	)

2499 
	#AFIO_EXTICR4_EXTI13_PG_Pos
 (5U)

	)

2500 
	#AFIO_EXTICR4_EXTI13_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI13_PG_Pos
Ë

	)

2501 
	#AFIO_EXTICR4_EXTI13_PG
 
AFIO_EXTICR4_EXTI13_PG_Msk


	)

2504 
	#AFIO_EXTICR4_EXTI14_PA
 0x00000000U

	)

2505 
	#AFIO_EXTICR4_EXTI14_PB_Pos
 (8U)

	)

2506 
	#AFIO_EXTICR4_EXTI14_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PB_Pos
Ë

	)

2507 
	#AFIO_EXTICR4_EXTI14_PB
 
AFIO_EXTICR4_EXTI14_PB_Msk


	)

2508 
	#AFIO_EXTICR4_EXTI14_PC_Pos
 (9U)

	)

2509 
	#AFIO_EXTICR4_EXTI14_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PC_Pos
Ë

	)

2510 
	#AFIO_EXTICR4_EXTI14_PC
 
AFIO_EXTICR4_EXTI14_PC_Msk


	)

2511 
	#AFIO_EXTICR4_EXTI14_PD_Pos
 (8U)

	)

2512 
	#AFIO_EXTICR4_EXTI14_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI14_PD_Pos
Ë

	)

2513 
	#AFIO_EXTICR4_EXTI14_PD
 
AFIO_EXTICR4_EXTI14_PD_Msk


	)

2514 
	#AFIO_EXTICR4_EXTI14_PE_Pos
 (10U)

	)

2515 
	#AFIO_EXTICR4_EXTI14_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PE_Pos
Ë

	)

2516 
	#AFIO_EXTICR4_EXTI14_PE
 
AFIO_EXTICR4_EXTI14_PE_Msk


	)

2517 
	#AFIO_EXTICR4_EXTI14_PF_Pos
 (8U)

	)

2518 
	#AFIO_EXTICR4_EXTI14_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI14_PF_Pos
Ë

	)

2519 
	#AFIO_EXTICR4_EXTI14_PF
 
AFIO_EXTICR4_EXTI14_PF_Msk


	)

2520 
	#AFIO_EXTICR4_EXTI14_PG_Pos
 (9U)

	)

2521 
	#AFIO_EXTICR4_EXTI14_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI14_PG_Pos
Ë

	)

2522 
	#AFIO_EXTICR4_EXTI14_PG
 
AFIO_EXTICR4_EXTI14_PG_Msk


	)

2525 
	#AFIO_EXTICR4_EXTI15_PA
 0x00000000U

	)

2526 
	#AFIO_EXTICR4_EXTI15_PB_Pos
 (12U)

	)

2527 
	#AFIO_EXTICR4_EXTI15_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PB_Pos
Ë

	)

2528 
	#AFIO_EXTICR4_EXTI15_PB
 
AFIO_EXTICR4_EXTI15_PB_Msk


	)

2529 
	#AFIO_EXTICR4_EXTI15_PC_Pos
 (13U)

	)

2530 
	#AFIO_EXTICR4_EXTI15_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PC_Pos
Ë

	)

2531 
	#AFIO_EXTICR4_EXTI15_PC
 
AFIO_EXTICR4_EXTI15_PC_Msk


	)

2532 
	#AFIO_EXTICR4_EXTI15_PD_Pos
 (12U)

	)

2533 
	#AFIO_EXTICR4_EXTI15_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI15_PD_Pos
Ë

	)

2534 
	#AFIO_EXTICR4_EXTI15_PD
 
AFIO_EXTICR4_EXTI15_PD_Msk


	)

2535 
	#AFIO_EXTICR4_EXTI15_PE_Pos
 (14U)

	)

2536 
	#AFIO_EXTICR4_EXTI15_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PE_Pos
Ë

	)

2537 
	#AFIO_EXTICR4_EXTI15_PE
 
AFIO_EXTICR4_EXTI15_PE_Msk


	)

2538 
	#AFIO_EXTICR4_EXTI15_PF_Pos
 (12U)

	)

2539 
	#AFIO_EXTICR4_EXTI15_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI15_PF_Pos
Ë

	)

2540 
	#AFIO_EXTICR4_EXTI15_PF
 
AFIO_EXTICR4_EXTI15_PF_Msk


	)

2541 
	#AFIO_EXTICR4_EXTI15_PG_Pos
 (13U)

	)

2542 
	#AFIO_EXTICR4_EXTI15_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI15_PG_Pos
Ë

	)

2543 
	#AFIO_EXTICR4_EXTI15_PG
 
AFIO_EXTICR4_EXTI15_PG_Msk


	)

2556 
	#EXTI_IMR_MR0_Pos
 (0U)

	)

2557 
	#EXTI_IMR_MR0_Msk
 (0x1UL << 
EXTI_IMR_MR0_Pos
Ë

	)

2558 
	#EXTI_IMR_MR0
 
EXTI_IMR_MR0_Msk


	)

2559 
	#EXTI_IMR_MR1_Pos
 (1U)

	)

2560 
	#EXTI_IMR_MR1_Msk
 (0x1UL << 
EXTI_IMR_MR1_Pos
Ë

	)

2561 
	#EXTI_IMR_MR1
 
EXTI_IMR_MR1_Msk


	)

2562 
	#EXTI_IMR_MR2_Pos
 (2U)

	)

2563 
	#EXTI_IMR_MR2_Msk
 (0x1UL << 
EXTI_IMR_MR2_Pos
Ë

	)

2564 
	#EXTI_IMR_MR2
 
EXTI_IMR_MR2_Msk


	)

2565 
	#EXTI_IMR_MR3_Pos
 (3U)

	)

2566 
	#EXTI_IMR_MR3_Msk
 (0x1UL << 
EXTI_IMR_MR3_Pos
Ë

	)

2567 
	#EXTI_IMR_MR3
 
EXTI_IMR_MR3_Msk


	)

2568 
	#EXTI_IMR_MR4_Pos
 (4U)

	)

2569 
	#EXTI_IMR_MR4_Msk
 (0x1UL << 
EXTI_IMR_MR4_Pos
Ë

	)

2570 
	#EXTI_IMR_MR4
 
EXTI_IMR_MR4_Msk


	)

2571 
	#EXTI_IMR_MR5_Pos
 (5U)

	)

2572 
	#EXTI_IMR_MR5_Msk
 (0x1UL << 
EXTI_IMR_MR5_Pos
Ë

	)

2573 
	#EXTI_IMR_MR5
 
EXTI_IMR_MR5_Msk


	)

2574 
	#EXTI_IMR_MR6_Pos
 (6U)

	)

2575 
	#EXTI_IMR_MR6_Msk
 (0x1UL << 
EXTI_IMR_MR6_Pos
Ë

	)

2576 
	#EXTI_IMR_MR6
 
EXTI_IMR_MR6_Msk


	)

2577 
	#EXTI_IMR_MR7_Pos
 (7U)

	)

2578 
	#EXTI_IMR_MR7_Msk
 (0x1UL << 
EXTI_IMR_MR7_Pos
Ë

	)

2579 
	#EXTI_IMR_MR7
 
EXTI_IMR_MR7_Msk


	)

2580 
	#EXTI_IMR_MR8_Pos
 (8U)

	)

2581 
	#EXTI_IMR_MR8_Msk
 (0x1UL << 
EXTI_IMR_MR8_Pos
Ë

	)

2582 
	#EXTI_IMR_MR8
 
EXTI_IMR_MR8_Msk


	)

2583 
	#EXTI_IMR_MR9_Pos
 (9U)

	)

2584 
	#EXTI_IMR_MR9_Msk
 (0x1UL << 
EXTI_IMR_MR9_Pos
Ë

	)

2585 
	#EXTI_IMR_MR9
 
EXTI_IMR_MR9_Msk


	)

2586 
	#EXTI_IMR_MR10_Pos
 (10U)

	)

2587 
	#EXTI_IMR_MR10_Msk
 (0x1UL << 
EXTI_IMR_MR10_Pos
Ë

	)

2588 
	#EXTI_IMR_MR10
 
EXTI_IMR_MR10_Msk


	)

2589 
	#EXTI_IMR_MR11_Pos
 (11U)

	)

2590 
	#EXTI_IMR_MR11_Msk
 (0x1UL << 
EXTI_IMR_MR11_Pos
Ë

	)

2591 
	#EXTI_IMR_MR11
 
EXTI_IMR_MR11_Msk


	)

2592 
	#EXTI_IMR_MR12_Pos
 (12U)

	)

2593 
	#EXTI_IMR_MR12_Msk
 (0x1UL << 
EXTI_IMR_MR12_Pos
Ë

	)

2594 
	#EXTI_IMR_MR12
 
EXTI_IMR_MR12_Msk


	)

2595 
	#EXTI_IMR_MR13_Pos
 (13U)

	)

2596 
	#EXTI_IMR_MR13_Msk
 (0x1UL << 
EXTI_IMR_MR13_Pos
Ë

	)

2597 
	#EXTI_IMR_MR13
 
EXTI_IMR_MR13_Msk


	)

2598 
	#EXTI_IMR_MR14_Pos
 (14U)

	)

2599 
	#EXTI_IMR_MR14_Msk
 (0x1UL << 
EXTI_IMR_MR14_Pos
Ë

	)

2600 
	#EXTI_IMR_MR14
 
EXTI_IMR_MR14_Msk


	)

2601 
	#EXTI_IMR_MR15_Pos
 (15U)

	)

2602 
	#EXTI_IMR_MR15_Msk
 (0x1UL << 
EXTI_IMR_MR15_Pos
Ë

	)

2603 
	#EXTI_IMR_MR15
 
EXTI_IMR_MR15_Msk


	)

2604 
	#EXTI_IMR_MR16_Pos
 (16U)

	)

2605 
	#EXTI_IMR_MR16_Msk
 (0x1UL << 
EXTI_IMR_MR16_Pos
Ë

	)

2606 
	#EXTI_IMR_MR16
 
EXTI_IMR_MR16_Msk


	)

2607 
	#EXTI_IMR_MR17_Pos
 (17U)

	)

2608 
	#EXTI_IMR_MR17_Msk
 (0x1UL << 
EXTI_IMR_MR17_Pos
Ë

	)

2609 
	#EXTI_IMR_MR17
 
EXTI_IMR_MR17_Msk


	)

2610 
	#EXTI_IMR_MR18_Pos
 (18U)

	)

2611 
	#EXTI_IMR_MR18_Msk
 (0x1UL << 
EXTI_IMR_MR18_Pos
Ë

	)

2612 
	#EXTI_IMR_MR18
 
EXTI_IMR_MR18_Msk


	)

2615 
	#EXTI_IMR_IM0
 
EXTI_IMR_MR0


	)

2616 
	#EXTI_IMR_IM1
 
EXTI_IMR_MR1


	)

2617 
	#EXTI_IMR_IM2
 
EXTI_IMR_MR2


	)

2618 
	#EXTI_IMR_IM3
 
EXTI_IMR_MR3


	)

2619 
	#EXTI_IMR_IM4
 
EXTI_IMR_MR4


	)

2620 
	#EXTI_IMR_IM5
 
EXTI_IMR_MR5


	)

2621 
	#EXTI_IMR_IM6
 
EXTI_IMR_MR6


	)

2622 
	#EXTI_IMR_IM7
 
EXTI_IMR_MR7


	)

2623 
	#EXTI_IMR_IM8
 
EXTI_IMR_MR8


	)

2624 
	#EXTI_IMR_IM9
 
EXTI_IMR_MR9


	)

2625 
	#EXTI_IMR_IM10
 
EXTI_IMR_MR10


	)

2626 
	#EXTI_IMR_IM11
 
EXTI_IMR_MR11


	)

2627 
	#EXTI_IMR_IM12
 
EXTI_IMR_MR12


	)

2628 
	#EXTI_IMR_IM13
 
EXTI_IMR_MR13


	)

2629 
	#EXTI_IMR_IM14
 
EXTI_IMR_MR14


	)

2630 
	#EXTI_IMR_IM15
 
EXTI_IMR_MR15


	)

2631 
	#EXTI_IMR_IM16
 
EXTI_IMR_MR16


	)

2632 
	#EXTI_IMR_IM17
 
EXTI_IMR_MR17


	)

2633 
	#EXTI_IMR_IM18
 
EXTI_IMR_MR18


	)

2634 
	#EXTI_IMR_IM
 0x0007FFFFU

	)

2637 
	#EXTI_EMR_MR0_Pos
 (0U)

	)

2638 
	#EXTI_EMR_MR0_Msk
 (0x1UL << 
EXTI_EMR_MR0_Pos
Ë

	)

2639 
	#EXTI_EMR_MR0
 
EXTI_EMR_MR0_Msk


	)

2640 
	#EXTI_EMR_MR1_Pos
 (1U)

	)

2641 
	#EXTI_EMR_MR1_Msk
 (0x1UL << 
EXTI_EMR_MR1_Pos
Ë

	)

2642 
	#EXTI_EMR_MR1
 
EXTI_EMR_MR1_Msk


	)

2643 
	#EXTI_EMR_MR2_Pos
 (2U)

	)

2644 
	#EXTI_EMR_MR2_Msk
 (0x1UL << 
EXTI_EMR_MR2_Pos
Ë

	)

2645 
	#EXTI_EMR_MR2
 
EXTI_EMR_MR2_Msk


	)

2646 
	#EXTI_EMR_MR3_Pos
 (3U)

	)

2647 
	#EXTI_EMR_MR3_Msk
 (0x1UL << 
EXTI_EMR_MR3_Pos
Ë

	)

2648 
	#EXTI_EMR_MR3
 
EXTI_EMR_MR3_Msk


	)

2649 
	#EXTI_EMR_MR4_Pos
 (4U)

	)

2650 
	#EXTI_EMR_MR4_Msk
 (0x1UL << 
EXTI_EMR_MR4_Pos
Ë

	)

2651 
	#EXTI_EMR_MR4
 
EXTI_EMR_MR4_Msk


	)

2652 
	#EXTI_EMR_MR5_Pos
 (5U)

	)

2653 
	#EXTI_EMR_MR5_Msk
 (0x1UL << 
EXTI_EMR_MR5_Pos
Ë

	)

2654 
	#EXTI_EMR_MR5
 
EXTI_EMR_MR5_Msk


	)

2655 
	#EXTI_EMR_MR6_Pos
 (6U)

	)

2656 
	#EXTI_EMR_MR6_Msk
 (0x1UL << 
EXTI_EMR_MR6_Pos
Ë

	)

2657 
	#EXTI_EMR_MR6
 
EXTI_EMR_MR6_Msk


	)

2658 
	#EXTI_EMR_MR7_Pos
 (7U)

	)

2659 
	#EXTI_EMR_MR7_Msk
 (0x1UL << 
EXTI_EMR_MR7_Pos
Ë

	)

2660 
	#EXTI_EMR_MR7
 
EXTI_EMR_MR7_Msk


	)

2661 
	#EXTI_EMR_MR8_Pos
 (8U)

	)

2662 
	#EXTI_EMR_MR8_Msk
 (0x1UL << 
EXTI_EMR_MR8_Pos
Ë

	)

2663 
	#EXTI_EMR_MR8
 
EXTI_EMR_MR8_Msk


	)

2664 
	#EXTI_EMR_MR9_Pos
 (9U)

	)

2665 
	#EXTI_EMR_MR9_Msk
 (0x1UL << 
EXTI_EMR_MR9_Pos
Ë

	)

2666 
	#EXTI_EMR_MR9
 
EXTI_EMR_MR9_Msk


	)

2667 
	#EXTI_EMR_MR10_Pos
 (10U)

	)

2668 
	#EXTI_EMR_MR10_Msk
 (0x1UL << 
EXTI_EMR_MR10_Pos
Ë

	)

2669 
	#EXTI_EMR_MR10
 
EXTI_EMR_MR10_Msk


	)

2670 
	#EXTI_EMR_MR11_Pos
 (11U)

	)

2671 
	#EXTI_EMR_MR11_Msk
 (0x1UL << 
EXTI_EMR_MR11_Pos
Ë

	)

2672 
	#EXTI_EMR_MR11
 
EXTI_EMR_MR11_Msk


	)

2673 
	#EXTI_EMR_MR12_Pos
 (12U)

	)

2674 
	#EXTI_EMR_MR12_Msk
 (0x1UL << 
EXTI_EMR_MR12_Pos
Ë

	)

2675 
	#EXTI_EMR_MR12
 
EXTI_EMR_MR12_Msk


	)

2676 
	#EXTI_EMR_MR13_Pos
 (13U)

	)

2677 
	#EXTI_EMR_MR13_Msk
 (0x1UL << 
EXTI_EMR_MR13_Pos
Ë

	)

2678 
	#EXTI_EMR_MR13
 
EXTI_EMR_MR13_Msk


	)

2679 
	#EXTI_EMR_MR14_Pos
 (14U)

	)

2680 
	#EXTI_EMR_MR14_Msk
 (0x1UL << 
EXTI_EMR_MR14_Pos
Ë

	)

2681 
	#EXTI_EMR_MR14
 
EXTI_EMR_MR14_Msk


	)

2682 
	#EXTI_EMR_MR15_Pos
 (15U)

	)

2683 
	#EXTI_EMR_MR15_Msk
 (0x1UL << 
EXTI_EMR_MR15_Pos
Ë

	)

2684 
	#EXTI_EMR_MR15
 
EXTI_EMR_MR15_Msk


	)

2685 
	#EXTI_EMR_MR16_Pos
 (16U)

	)

2686 
	#EXTI_EMR_MR16_Msk
 (0x1UL << 
EXTI_EMR_MR16_Pos
Ë

	)

2687 
	#EXTI_EMR_MR16
 
EXTI_EMR_MR16_Msk


	)

2688 
	#EXTI_EMR_MR17_Pos
 (17U)

	)

2689 
	#EXTI_EMR_MR17_Msk
 (0x1UL << 
EXTI_EMR_MR17_Pos
Ë

	)

2690 
	#EXTI_EMR_MR17
 
EXTI_EMR_MR17_Msk


	)

2691 
	#EXTI_EMR_MR18_Pos
 (18U)

	)

2692 
	#EXTI_EMR_MR18_Msk
 (0x1UL << 
EXTI_EMR_MR18_Pos
Ë

	)

2693 
	#EXTI_EMR_MR18
 
EXTI_EMR_MR18_Msk


	)

2696 
	#EXTI_EMR_EM0
 
EXTI_EMR_MR0


	)

2697 
	#EXTI_EMR_EM1
 
EXTI_EMR_MR1


	)

2698 
	#EXTI_EMR_EM2
 
EXTI_EMR_MR2


	)

2699 
	#EXTI_EMR_EM3
 
EXTI_EMR_MR3


	)

2700 
	#EXTI_EMR_EM4
 
EXTI_EMR_MR4


	)

2701 
	#EXTI_EMR_EM5
 
EXTI_EMR_MR5


	)

2702 
	#EXTI_EMR_EM6
 
EXTI_EMR_MR6


	)

2703 
	#EXTI_EMR_EM7
 
EXTI_EMR_MR7


	)

2704 
	#EXTI_EMR_EM8
 
EXTI_EMR_MR8


	)

2705 
	#EXTI_EMR_EM9
 
EXTI_EMR_MR9


	)

2706 
	#EXTI_EMR_EM10
 
EXTI_EMR_MR10


	)

2707 
	#EXTI_EMR_EM11
 
EXTI_EMR_MR11


	)

2708 
	#EXTI_EMR_EM12
 
EXTI_EMR_MR12


	)

2709 
	#EXTI_EMR_EM13
 
EXTI_EMR_MR13


	)

2710 
	#EXTI_EMR_EM14
 
EXTI_EMR_MR14


	)

2711 
	#EXTI_EMR_EM15
 
EXTI_EMR_MR15


	)

2712 
	#EXTI_EMR_EM16
 
EXTI_EMR_MR16


	)

2713 
	#EXTI_EMR_EM17
 
EXTI_EMR_MR17


	)

2714 
	#EXTI_EMR_EM18
 
EXTI_EMR_MR18


	)

2717 
	#EXTI_RTSR_TR0_Pos
 (0U)

	)

2718 
	#EXTI_RTSR_TR0_Msk
 (0x1UL << 
EXTI_RTSR_TR0_Pos
Ë

	)

2719 
	#EXTI_RTSR_TR0
 
EXTI_RTSR_TR0_Msk


	)

2720 
	#EXTI_RTSR_TR1_Pos
 (1U)

	)

2721 
	#EXTI_RTSR_TR1_Msk
 (0x1UL << 
EXTI_RTSR_TR1_Pos
Ë

	)

2722 
	#EXTI_RTSR_TR1
 
EXTI_RTSR_TR1_Msk


	)

2723 
	#EXTI_RTSR_TR2_Pos
 (2U)

	)

2724 
	#EXTI_RTSR_TR2_Msk
 (0x1UL << 
EXTI_RTSR_TR2_Pos
Ë

	)

2725 
	#EXTI_RTSR_TR2
 
EXTI_RTSR_TR2_Msk


	)

2726 
	#EXTI_RTSR_TR3_Pos
 (3U)

	)

2727 
	#EXTI_RTSR_TR3_Msk
 (0x1UL << 
EXTI_RTSR_TR3_Pos
Ë

	)

2728 
	#EXTI_RTSR_TR3
 
EXTI_RTSR_TR3_Msk


	)

2729 
	#EXTI_RTSR_TR4_Pos
 (4U)

	)

2730 
	#EXTI_RTSR_TR4_Msk
 (0x1UL << 
EXTI_RTSR_TR4_Pos
Ë

	)

2731 
	#EXTI_RTSR_TR4
 
EXTI_RTSR_TR4_Msk


	)

2732 
	#EXTI_RTSR_TR5_Pos
 (5U)

	)

2733 
	#EXTI_RTSR_TR5_Msk
 (0x1UL << 
EXTI_RTSR_TR5_Pos
Ë

	)

2734 
	#EXTI_RTSR_TR5
 
EXTI_RTSR_TR5_Msk


	)

2735 
	#EXTI_RTSR_TR6_Pos
 (6U)

	)

2736 
	#EXTI_RTSR_TR6_Msk
 (0x1UL << 
EXTI_RTSR_TR6_Pos
Ë

	)

2737 
	#EXTI_RTSR_TR6
 
EXTI_RTSR_TR6_Msk


	)

2738 
	#EXTI_RTSR_TR7_Pos
 (7U)

	)

2739 
	#EXTI_RTSR_TR7_Msk
 (0x1UL << 
EXTI_RTSR_TR7_Pos
Ë

	)

2740 
	#EXTI_RTSR_TR7
 
EXTI_RTSR_TR7_Msk


	)

2741 
	#EXTI_RTSR_TR8_Pos
 (8U)

	)

2742 
	#EXTI_RTSR_TR8_Msk
 (0x1UL << 
EXTI_RTSR_TR8_Pos
Ë

	)

2743 
	#EXTI_RTSR_TR8
 
EXTI_RTSR_TR8_Msk


	)

2744 
	#EXTI_RTSR_TR9_Pos
 (9U)

	)

2745 
	#EXTI_RTSR_TR9_Msk
 (0x1UL << 
EXTI_RTSR_TR9_Pos
Ë

	)

2746 
	#EXTI_RTSR_TR9
 
EXTI_RTSR_TR9_Msk


	)

2747 
	#EXTI_RTSR_TR10_Pos
 (10U)

	)

2748 
	#EXTI_RTSR_TR10_Msk
 (0x1UL << 
EXTI_RTSR_TR10_Pos
Ë

	)

2749 
	#EXTI_RTSR_TR10
 
EXTI_RTSR_TR10_Msk


	)

2750 
	#EXTI_RTSR_TR11_Pos
 (11U)

	)

2751 
	#EXTI_RTSR_TR11_Msk
 (0x1UL << 
EXTI_RTSR_TR11_Pos
Ë

	)

2752 
	#EXTI_RTSR_TR11
 
EXTI_RTSR_TR11_Msk


	)

2753 
	#EXTI_RTSR_TR12_Pos
 (12U)

	)

2754 
	#EXTI_RTSR_TR12_Msk
 (0x1UL << 
EXTI_RTSR_TR12_Pos
Ë

	)

2755 
	#EXTI_RTSR_TR12
 
EXTI_RTSR_TR12_Msk


	)

2756 
	#EXTI_RTSR_TR13_Pos
 (13U)

	)

2757 
	#EXTI_RTSR_TR13_Msk
 (0x1UL << 
EXTI_RTSR_TR13_Pos
Ë

	)

2758 
	#EXTI_RTSR_TR13
 
EXTI_RTSR_TR13_Msk


	)

2759 
	#EXTI_RTSR_TR14_Pos
 (14U)

	)

2760 
	#EXTI_RTSR_TR14_Msk
 (0x1UL << 
EXTI_RTSR_TR14_Pos
Ë

	)

2761 
	#EXTI_RTSR_TR14
 
EXTI_RTSR_TR14_Msk


	)

2762 
	#EXTI_RTSR_TR15_Pos
 (15U)

	)

2763 
	#EXTI_RTSR_TR15_Msk
 (0x1UL << 
EXTI_RTSR_TR15_Pos
Ë

	)

2764 
	#EXTI_RTSR_TR15
 
EXTI_RTSR_TR15_Msk


	)

2765 
	#EXTI_RTSR_TR16_Pos
 (16U)

	)

2766 
	#EXTI_RTSR_TR16_Msk
 (0x1UL << 
EXTI_RTSR_TR16_Pos
Ë

	)

2767 
	#EXTI_RTSR_TR16
 
EXTI_RTSR_TR16_Msk


	)

2768 
	#EXTI_RTSR_TR17_Pos
 (17U)

	)

2769 
	#EXTI_RTSR_TR17_Msk
 (0x1UL << 
EXTI_RTSR_TR17_Pos
Ë

	)

2770 
	#EXTI_RTSR_TR17
 
EXTI_RTSR_TR17_Msk


	)

2771 
	#EXTI_RTSR_TR18_Pos
 (18U)

	)

2772 
	#EXTI_RTSR_TR18_Msk
 (0x1UL << 
EXTI_RTSR_TR18_Pos
Ë

	)

2773 
	#EXTI_RTSR_TR18
 
EXTI_RTSR_TR18_Msk


	)

2776 
	#EXTI_RTSR_RT0
 
EXTI_RTSR_TR0


	)

2777 
	#EXTI_RTSR_RT1
 
EXTI_RTSR_TR1


	)

2778 
	#EXTI_RTSR_RT2
 
EXTI_RTSR_TR2


	)

2779 
	#EXTI_RTSR_RT3
 
EXTI_RTSR_TR3


	)

2780 
	#EXTI_RTSR_RT4
 
EXTI_RTSR_TR4


	)

2781 
	#EXTI_RTSR_RT5
 
EXTI_RTSR_TR5


	)

2782 
	#EXTI_RTSR_RT6
 
EXTI_RTSR_TR6


	)

2783 
	#EXTI_RTSR_RT7
 
EXTI_RTSR_TR7


	)

2784 
	#EXTI_RTSR_RT8
 
EXTI_RTSR_TR8


	)

2785 
	#EXTI_RTSR_RT9
 
EXTI_RTSR_TR9


	)

2786 
	#EXTI_RTSR_RT10
 
EXTI_RTSR_TR10


	)

2787 
	#EXTI_RTSR_RT11
 
EXTI_RTSR_TR11


	)

2788 
	#EXTI_RTSR_RT12
 
EXTI_RTSR_TR12


	)

2789 
	#EXTI_RTSR_RT13
 
EXTI_RTSR_TR13


	)

2790 
	#EXTI_RTSR_RT14
 
EXTI_RTSR_TR14


	)

2791 
	#EXTI_RTSR_RT15
 
EXTI_RTSR_TR15


	)

2792 
	#EXTI_RTSR_RT16
 
EXTI_RTSR_TR16


	)

2793 
	#EXTI_RTSR_RT17
 
EXTI_RTSR_TR17


	)

2794 
	#EXTI_RTSR_RT18
 
EXTI_RTSR_TR18


	)

2797 
	#EXTI_FTSR_TR0_Pos
 (0U)

	)

2798 
	#EXTI_FTSR_TR0_Msk
 (0x1UL << 
EXTI_FTSR_TR0_Pos
Ë

	)

2799 
	#EXTI_FTSR_TR0
 
EXTI_FTSR_TR0_Msk


	)

2800 
	#EXTI_FTSR_TR1_Pos
 (1U)

	)

2801 
	#EXTI_FTSR_TR1_Msk
 (0x1UL << 
EXTI_FTSR_TR1_Pos
Ë

	)

2802 
	#EXTI_FTSR_TR1
 
EXTI_FTSR_TR1_Msk


	)

2803 
	#EXTI_FTSR_TR2_Pos
 (2U)

	)

2804 
	#EXTI_FTSR_TR2_Msk
 (0x1UL << 
EXTI_FTSR_TR2_Pos
Ë

	)

2805 
	#EXTI_FTSR_TR2
 
EXTI_FTSR_TR2_Msk


	)

2806 
	#EXTI_FTSR_TR3_Pos
 (3U)

	)

2807 
	#EXTI_FTSR_TR3_Msk
 (0x1UL << 
EXTI_FTSR_TR3_Pos
Ë

	)

2808 
	#EXTI_FTSR_TR3
 
EXTI_FTSR_TR3_Msk


	)

2809 
	#EXTI_FTSR_TR4_Pos
 (4U)

	)

2810 
	#EXTI_FTSR_TR4_Msk
 (0x1UL << 
EXTI_FTSR_TR4_Pos
Ë

	)

2811 
	#EXTI_FTSR_TR4
 
EXTI_FTSR_TR4_Msk


	)

2812 
	#EXTI_FTSR_TR5_Pos
 (5U)

	)

2813 
	#EXTI_FTSR_TR5_Msk
 (0x1UL << 
EXTI_FTSR_TR5_Pos
Ë

	)

2814 
	#EXTI_FTSR_TR5
 
EXTI_FTSR_TR5_Msk


	)

2815 
	#EXTI_FTSR_TR6_Pos
 (6U)

	)

2816 
	#EXTI_FTSR_TR6_Msk
 (0x1UL << 
EXTI_FTSR_TR6_Pos
Ë

	)

2817 
	#EXTI_FTSR_TR6
 
EXTI_FTSR_TR6_Msk


	)

2818 
	#EXTI_FTSR_TR7_Pos
 (7U)

	)

2819 
	#EXTI_FTSR_TR7_Msk
 (0x1UL << 
EXTI_FTSR_TR7_Pos
Ë

	)

2820 
	#EXTI_FTSR_TR7
 
EXTI_FTSR_TR7_Msk


	)

2821 
	#EXTI_FTSR_TR8_Pos
 (8U)

	)

2822 
	#EXTI_FTSR_TR8_Msk
 (0x1UL << 
EXTI_FTSR_TR8_Pos
Ë

	)

2823 
	#EXTI_FTSR_TR8
 
EXTI_FTSR_TR8_Msk


	)

2824 
	#EXTI_FTSR_TR9_Pos
 (9U)

	)

2825 
	#EXTI_FTSR_TR9_Msk
 (0x1UL << 
EXTI_FTSR_TR9_Pos
Ë

	)

2826 
	#EXTI_FTSR_TR9
 
EXTI_FTSR_TR9_Msk


	)

2827 
	#EXTI_FTSR_TR10_Pos
 (10U)

	)

2828 
	#EXTI_FTSR_TR10_Msk
 (0x1UL << 
EXTI_FTSR_TR10_Pos
Ë

	)

2829 
	#EXTI_FTSR_TR10
 
EXTI_FTSR_TR10_Msk


	)

2830 
	#EXTI_FTSR_TR11_Pos
 (11U)

	)

2831 
	#EXTI_FTSR_TR11_Msk
 (0x1UL << 
EXTI_FTSR_TR11_Pos
Ë

	)

2832 
	#EXTI_FTSR_TR11
 
EXTI_FTSR_TR11_Msk


	)

2833 
	#EXTI_FTSR_TR12_Pos
 (12U)

	)

2834 
	#EXTI_FTSR_TR12_Msk
 (0x1UL << 
EXTI_FTSR_TR12_Pos
Ë

	)

2835 
	#EXTI_FTSR_TR12
 
EXTI_FTSR_TR12_Msk


	)

2836 
	#EXTI_FTSR_TR13_Pos
 (13U)

	)

2837 
	#EXTI_FTSR_TR13_Msk
 (0x1UL << 
EXTI_FTSR_TR13_Pos
Ë

	)

2838 
	#EXTI_FTSR_TR13
 
EXTI_FTSR_TR13_Msk


	)

2839 
	#EXTI_FTSR_TR14_Pos
 (14U)

	)

2840 
	#EXTI_FTSR_TR14_Msk
 (0x1UL << 
EXTI_FTSR_TR14_Pos
Ë

	)

2841 
	#EXTI_FTSR_TR14
 
EXTI_FTSR_TR14_Msk


	)

2842 
	#EXTI_FTSR_TR15_Pos
 (15U)

	)

2843 
	#EXTI_FTSR_TR15_Msk
 (0x1UL << 
EXTI_FTSR_TR15_Pos
Ë

	)

2844 
	#EXTI_FTSR_TR15
 
EXTI_FTSR_TR15_Msk


	)

2845 
	#EXTI_FTSR_TR16_Pos
 (16U)

	)

2846 
	#EXTI_FTSR_TR16_Msk
 (0x1UL << 
EXTI_FTSR_TR16_Pos
Ë

	)

2847 
	#EXTI_FTSR_TR16
 
EXTI_FTSR_TR16_Msk


	)

2848 
	#EXTI_FTSR_TR17_Pos
 (17U)

	)

2849 
	#EXTI_FTSR_TR17_Msk
 (0x1UL << 
EXTI_FTSR_TR17_Pos
Ë

	)

2850 
	#EXTI_FTSR_TR17
 
EXTI_FTSR_TR17_Msk


	)

2851 
	#EXTI_FTSR_TR18_Pos
 (18U)

	)

2852 
	#EXTI_FTSR_TR18_Msk
 (0x1UL << 
EXTI_FTSR_TR18_Pos
Ë

	)

2853 
	#EXTI_FTSR_TR18
 
EXTI_FTSR_TR18_Msk


	)

2856 
	#EXTI_FTSR_FT0
 
EXTI_FTSR_TR0


	)

2857 
	#EXTI_FTSR_FT1
 
EXTI_FTSR_TR1


	)

2858 
	#EXTI_FTSR_FT2
 
EXTI_FTSR_TR2


	)

2859 
	#EXTI_FTSR_FT3
 
EXTI_FTSR_TR3


	)

2860 
	#EXTI_FTSR_FT4
 
EXTI_FTSR_TR4


	)

2861 
	#EXTI_FTSR_FT5
 
EXTI_FTSR_TR5


	)

2862 
	#EXTI_FTSR_FT6
 
EXTI_FTSR_TR6


	)

2863 
	#EXTI_FTSR_FT7
 
EXTI_FTSR_TR7


	)

2864 
	#EXTI_FTSR_FT8
 
EXTI_FTSR_TR8


	)

2865 
	#EXTI_FTSR_FT9
 
EXTI_FTSR_TR9


	)

2866 
	#EXTI_FTSR_FT10
 
EXTI_FTSR_TR10


	)

2867 
	#EXTI_FTSR_FT11
 
EXTI_FTSR_TR11


	)

2868 
	#EXTI_FTSR_FT12
 
EXTI_FTSR_TR12


	)

2869 
	#EXTI_FTSR_FT13
 
EXTI_FTSR_TR13


	)

2870 
	#EXTI_FTSR_FT14
 
EXTI_FTSR_TR14


	)

2871 
	#EXTI_FTSR_FT15
 
EXTI_FTSR_TR15


	)

2872 
	#EXTI_FTSR_FT16
 
EXTI_FTSR_TR16


	)

2873 
	#EXTI_FTSR_FT17
 
EXTI_FTSR_TR17


	)

2874 
	#EXTI_FTSR_FT18
 
EXTI_FTSR_TR18


	)

2877 
	#EXTI_SWIER_SWIER0_Pos
 (0U)

	)

2878 
	#EXTI_SWIER_SWIER0_Msk
 (0x1UL << 
EXTI_SWIER_SWIER0_Pos
Ë

	)

2879 
	#EXTI_SWIER_SWIER0
 
EXTI_SWIER_SWIER0_Msk


	)

2880 
	#EXTI_SWIER_SWIER1_Pos
 (1U)

	)

2881 
	#EXTI_SWIER_SWIER1_Msk
 (0x1UL << 
EXTI_SWIER_SWIER1_Pos
Ë

	)

2882 
	#EXTI_SWIER_SWIER1
 
EXTI_SWIER_SWIER1_Msk


	)

2883 
	#EXTI_SWIER_SWIER2_Pos
 (2U)

	)

2884 
	#EXTI_SWIER_SWIER2_Msk
 (0x1UL << 
EXTI_SWIER_SWIER2_Pos
Ë

	)

2885 
	#EXTI_SWIER_SWIER2
 
EXTI_SWIER_SWIER2_Msk


	)

2886 
	#EXTI_SWIER_SWIER3_Pos
 (3U)

	)

2887 
	#EXTI_SWIER_SWIER3_Msk
 (0x1UL << 
EXTI_SWIER_SWIER3_Pos
Ë

	)

2888 
	#EXTI_SWIER_SWIER3
 
EXTI_SWIER_SWIER3_Msk


	)

2889 
	#EXTI_SWIER_SWIER4_Pos
 (4U)

	)

2890 
	#EXTI_SWIER_SWIER4_Msk
 (0x1UL << 
EXTI_SWIER_SWIER4_Pos
Ë

	)

2891 
	#EXTI_SWIER_SWIER4
 
EXTI_SWIER_SWIER4_Msk


	)

2892 
	#EXTI_SWIER_SWIER5_Pos
 (5U)

	)

2893 
	#EXTI_SWIER_SWIER5_Msk
 (0x1UL << 
EXTI_SWIER_SWIER5_Pos
Ë

	)

2894 
	#EXTI_SWIER_SWIER5
 
EXTI_SWIER_SWIER5_Msk


	)

2895 
	#EXTI_SWIER_SWIER6_Pos
 (6U)

	)

2896 
	#EXTI_SWIER_SWIER6_Msk
 (0x1UL << 
EXTI_SWIER_SWIER6_Pos
Ë

	)

2897 
	#EXTI_SWIER_SWIER6
 
EXTI_SWIER_SWIER6_Msk


	)

2898 
	#EXTI_SWIER_SWIER7_Pos
 (7U)

	)

2899 
	#EXTI_SWIER_SWIER7_Msk
 (0x1UL << 
EXTI_SWIER_SWIER7_Pos
Ë

	)

2900 
	#EXTI_SWIER_SWIER7
 
EXTI_SWIER_SWIER7_Msk


	)

2901 
	#EXTI_SWIER_SWIER8_Pos
 (8U)

	)

2902 
	#EXTI_SWIER_SWIER8_Msk
 (0x1UL << 
EXTI_SWIER_SWIER8_Pos
Ë

	)

2903 
	#EXTI_SWIER_SWIER8
 
EXTI_SWIER_SWIER8_Msk


	)

2904 
	#EXTI_SWIER_SWIER9_Pos
 (9U)

	)

2905 
	#EXTI_SWIER_SWIER9_Msk
 (0x1UL << 
EXTI_SWIER_SWIER9_Pos
Ë

	)

2906 
	#EXTI_SWIER_SWIER9
 
EXTI_SWIER_SWIER9_Msk


	)

2907 
	#EXTI_SWIER_SWIER10_Pos
 (10U)

	)

2908 
	#EXTI_SWIER_SWIER10_Msk
 (0x1UL << 
EXTI_SWIER_SWIER10_Pos
Ë

	)

2909 
	#EXTI_SWIER_SWIER10
 
EXTI_SWIER_SWIER10_Msk


	)

2910 
	#EXTI_SWIER_SWIER11_Pos
 (11U)

	)

2911 
	#EXTI_SWIER_SWIER11_Msk
 (0x1UL << 
EXTI_SWIER_SWIER11_Pos
Ë

	)

2912 
	#EXTI_SWIER_SWIER11
 
EXTI_SWIER_SWIER11_Msk


	)

2913 
	#EXTI_SWIER_SWIER12_Pos
 (12U)

	)

2914 
	#EXTI_SWIER_SWIER12_Msk
 (0x1UL << 
EXTI_SWIER_SWIER12_Pos
Ë

	)

2915 
	#EXTI_SWIER_SWIER12
 
EXTI_SWIER_SWIER12_Msk


	)

2916 
	#EXTI_SWIER_SWIER13_Pos
 (13U)

	)

2917 
	#EXTI_SWIER_SWIER13_Msk
 (0x1UL << 
EXTI_SWIER_SWIER13_Pos
Ë

	)

2918 
	#EXTI_SWIER_SWIER13
 
EXTI_SWIER_SWIER13_Msk


	)

2919 
	#EXTI_SWIER_SWIER14_Pos
 (14U)

	)

2920 
	#EXTI_SWIER_SWIER14_Msk
 (0x1UL << 
EXTI_SWIER_SWIER14_Pos
Ë

	)

2921 
	#EXTI_SWIER_SWIER14
 
EXTI_SWIER_SWIER14_Msk


	)

2922 
	#EXTI_SWIER_SWIER15_Pos
 (15U)

	)

2923 
	#EXTI_SWIER_SWIER15_Msk
 (0x1UL << 
EXTI_SWIER_SWIER15_Pos
Ë

	)

2924 
	#EXTI_SWIER_SWIER15
 
EXTI_SWIER_SWIER15_Msk


	)

2925 
	#EXTI_SWIER_SWIER16_Pos
 (16U)

	)

2926 
	#EXTI_SWIER_SWIER16_Msk
 (0x1UL << 
EXTI_SWIER_SWIER16_Pos
Ë

	)

2927 
	#EXTI_SWIER_SWIER16
 
EXTI_SWIER_SWIER16_Msk


	)

2928 
	#EXTI_SWIER_SWIER17_Pos
 (17U)

	)

2929 
	#EXTI_SWIER_SWIER17_Msk
 (0x1UL << 
EXTI_SWIER_SWIER17_Pos
Ë

	)

2930 
	#EXTI_SWIER_SWIER17
 
EXTI_SWIER_SWIER17_Msk


	)

2931 
	#EXTI_SWIER_SWIER18_Pos
 (18U)

	)

2932 
	#EXTI_SWIER_SWIER18_Msk
 (0x1UL << 
EXTI_SWIER_SWIER18_Pos
Ë

	)

2933 
	#EXTI_SWIER_SWIER18
 
EXTI_SWIER_SWIER18_Msk


	)

2936 
	#EXTI_SWIER_SWI0
 
EXTI_SWIER_SWIER0


	)

2937 
	#EXTI_SWIER_SWI1
 
EXTI_SWIER_SWIER1


	)

2938 
	#EXTI_SWIER_SWI2
 
EXTI_SWIER_SWIER2


	)

2939 
	#EXTI_SWIER_SWI3
 
EXTI_SWIER_SWIER3


	)

2940 
	#EXTI_SWIER_SWI4
 
EXTI_SWIER_SWIER4


	)

2941 
	#EXTI_SWIER_SWI5
 
EXTI_SWIER_SWIER5


	)

2942 
	#EXTI_SWIER_SWI6
 
EXTI_SWIER_SWIER6


	)

2943 
	#EXTI_SWIER_SWI7
 
EXTI_SWIER_SWIER7


	)

2944 
	#EXTI_SWIER_SWI8
 
EXTI_SWIER_SWIER8


	)

2945 
	#EXTI_SWIER_SWI9
 
EXTI_SWIER_SWIER9


	)

2946 
	#EXTI_SWIER_SWI10
 
EXTI_SWIER_SWIER10


	)

2947 
	#EXTI_SWIER_SWI11
 
EXTI_SWIER_SWIER11


	)

2948 
	#EXTI_SWIER_SWI12
 
EXTI_SWIER_SWIER12


	)

2949 
	#EXTI_SWIER_SWI13
 
EXTI_SWIER_SWIER13


	)

2950 
	#EXTI_SWIER_SWI14
 
EXTI_SWIER_SWIER14


	)

2951 
	#EXTI_SWIER_SWI15
 
EXTI_SWIER_SWIER15


	)

2952 
	#EXTI_SWIER_SWI16
 
EXTI_SWIER_SWIER16


	)

2953 
	#EXTI_SWIER_SWI17
 
EXTI_SWIER_SWIER17


	)

2954 
	#EXTI_SWIER_SWI18
 
EXTI_SWIER_SWIER18


	)

2957 
	#EXTI_PR_PR0_Pos
 (0U)

	)

2958 
	#EXTI_PR_PR0_Msk
 (0x1UL << 
EXTI_PR_PR0_Pos
Ë

	)

2959 
	#EXTI_PR_PR0
 
EXTI_PR_PR0_Msk


	)

2960 
	#EXTI_PR_PR1_Pos
 (1U)

	)

2961 
	#EXTI_PR_PR1_Msk
 (0x1UL << 
EXTI_PR_PR1_Pos
Ë

	)

2962 
	#EXTI_PR_PR1
 
EXTI_PR_PR1_Msk


	)

2963 
	#EXTI_PR_PR2_Pos
 (2U)

	)

2964 
	#EXTI_PR_PR2_Msk
 (0x1UL << 
EXTI_PR_PR2_Pos
Ë

	)

2965 
	#EXTI_PR_PR2
 
EXTI_PR_PR2_Msk


	)

2966 
	#EXTI_PR_PR3_Pos
 (3U)

	)

2967 
	#EXTI_PR_PR3_Msk
 (0x1UL << 
EXTI_PR_PR3_Pos
Ë

	)

2968 
	#EXTI_PR_PR3
 
EXTI_PR_PR3_Msk


	)

2969 
	#EXTI_PR_PR4_Pos
 (4U)

	)

2970 
	#EXTI_PR_PR4_Msk
 (0x1UL << 
EXTI_PR_PR4_Pos
Ë

	)

2971 
	#EXTI_PR_PR4
 
EXTI_PR_PR4_Msk


	)

2972 
	#EXTI_PR_PR5_Pos
 (5U)

	)

2973 
	#EXTI_PR_PR5_Msk
 (0x1UL << 
EXTI_PR_PR5_Pos
Ë

	)

2974 
	#EXTI_PR_PR5
 
EXTI_PR_PR5_Msk


	)

2975 
	#EXTI_PR_PR6_Pos
 (6U)

	)

2976 
	#EXTI_PR_PR6_Msk
 (0x1UL << 
EXTI_PR_PR6_Pos
Ë

	)

2977 
	#EXTI_PR_PR6
 
EXTI_PR_PR6_Msk


	)

2978 
	#EXTI_PR_PR7_Pos
 (7U)

	)

2979 
	#EXTI_PR_PR7_Msk
 (0x1UL << 
EXTI_PR_PR7_Pos
Ë

	)

2980 
	#EXTI_PR_PR7
 
EXTI_PR_PR7_Msk


	)

2981 
	#EXTI_PR_PR8_Pos
 (8U)

	)

2982 
	#EXTI_PR_PR8_Msk
 (0x1UL << 
EXTI_PR_PR8_Pos
Ë

	)

2983 
	#EXTI_PR_PR8
 
EXTI_PR_PR8_Msk


	)

2984 
	#EXTI_PR_PR9_Pos
 (9U)

	)

2985 
	#EXTI_PR_PR9_Msk
 (0x1UL << 
EXTI_PR_PR9_Pos
Ë

	)

2986 
	#EXTI_PR_PR9
 
EXTI_PR_PR9_Msk


	)

2987 
	#EXTI_PR_PR10_Pos
 (10U)

	)

2988 
	#EXTI_PR_PR10_Msk
 (0x1UL << 
EXTI_PR_PR10_Pos
Ë

	)

2989 
	#EXTI_PR_PR10
 
EXTI_PR_PR10_Msk


	)

2990 
	#EXTI_PR_PR11_Pos
 (11U)

	)

2991 
	#EXTI_PR_PR11_Msk
 (0x1UL << 
EXTI_PR_PR11_Pos
Ë

	)

2992 
	#EXTI_PR_PR11
 
EXTI_PR_PR11_Msk


	)

2993 
	#EXTI_PR_PR12_Pos
 (12U)

	)

2994 
	#EXTI_PR_PR12_Msk
 (0x1UL << 
EXTI_PR_PR12_Pos
Ë

	)

2995 
	#EXTI_PR_PR12
 
EXTI_PR_PR12_Msk


	)

2996 
	#EXTI_PR_PR13_Pos
 (13U)

	)

2997 
	#EXTI_PR_PR13_Msk
 (0x1UL << 
EXTI_PR_PR13_Pos
Ë

	)

2998 
	#EXTI_PR_PR13
 
EXTI_PR_PR13_Msk


	)

2999 
	#EXTI_PR_PR14_Pos
 (14U)

	)

3000 
	#EXTI_PR_PR14_Msk
 (0x1UL << 
EXTI_PR_PR14_Pos
Ë

	)

3001 
	#EXTI_PR_PR14
 
EXTI_PR_PR14_Msk


	)

3002 
	#EXTI_PR_PR15_Pos
 (15U)

	)

3003 
	#EXTI_PR_PR15_Msk
 (0x1UL << 
EXTI_PR_PR15_Pos
Ë

	)

3004 
	#EXTI_PR_PR15
 
EXTI_PR_PR15_Msk


	)

3005 
	#EXTI_PR_PR16_Pos
 (16U)

	)

3006 
	#EXTI_PR_PR16_Msk
 (0x1UL << 
EXTI_PR_PR16_Pos
Ë

	)

3007 
	#EXTI_PR_PR16
 
EXTI_PR_PR16_Msk


	)

3008 
	#EXTI_PR_PR17_Pos
 (17U)

	)

3009 
	#EXTI_PR_PR17_Msk
 (0x1UL << 
EXTI_PR_PR17_Pos
Ë

	)

3010 
	#EXTI_PR_PR17
 
EXTI_PR_PR17_Msk


	)

3011 
	#EXTI_PR_PR18_Pos
 (18U)

	)

3012 
	#EXTI_PR_PR18_Msk
 (0x1UL << 
EXTI_PR_PR18_Pos
Ë

	)

3013 
	#EXTI_PR_PR18
 
EXTI_PR_PR18_Msk


	)

3016 
	#EXTI_PR_PIF0
 
EXTI_PR_PR0


	)

3017 
	#EXTI_PR_PIF1
 
EXTI_PR_PR1


	)

3018 
	#EXTI_PR_PIF2
 
EXTI_PR_PR2


	)

3019 
	#EXTI_PR_PIF3
 
EXTI_PR_PR3


	)

3020 
	#EXTI_PR_PIF4
 
EXTI_PR_PR4


	)

3021 
	#EXTI_PR_PIF5
 
EXTI_PR_PR5


	)

3022 
	#EXTI_PR_PIF6
 
EXTI_PR_PR6


	)

3023 
	#EXTI_PR_PIF7
 
EXTI_PR_PR7


	)

3024 
	#EXTI_PR_PIF8
 
EXTI_PR_PR8


	)

3025 
	#EXTI_PR_PIF9
 
EXTI_PR_PR9


	)

3026 
	#EXTI_PR_PIF10
 
EXTI_PR_PR10


	)

3027 
	#EXTI_PR_PIF11
 
EXTI_PR_PR11


	)

3028 
	#EXTI_PR_PIF12
 
EXTI_PR_PR12


	)

3029 
	#EXTI_PR_PIF13
 
EXTI_PR_PR13


	)

3030 
	#EXTI_PR_PIF14
 
EXTI_PR_PR14


	)

3031 
	#EXTI_PR_PIF15
 
EXTI_PR_PR15


	)

3032 
	#EXTI_PR_PIF16
 
EXTI_PR_PR16


	)

3033 
	#EXTI_PR_PIF17
 
EXTI_PR_PR17


	)

3034 
	#EXTI_PR_PIF18
 
EXTI_PR_PR18


	)

3043 
	#DMA_ISR_GIF1_Pos
 (0U)

	)

3044 
	#DMA_ISR_GIF1_Msk
 (0x1UL << 
DMA_ISR_GIF1_Pos
Ë

	)

3045 
	#DMA_ISR_GIF1
 
DMA_ISR_GIF1_Msk


	)

3046 
	#DMA_ISR_TCIF1_Pos
 (1U)

	)

3047 
	#DMA_ISR_TCIF1_Msk
 (0x1UL << 
DMA_ISR_TCIF1_Pos
Ë

	)

3048 
	#DMA_ISR_TCIF1
 
DMA_ISR_TCIF1_Msk


	)

3049 
	#DMA_ISR_HTIF1_Pos
 (2U)

	)

3050 
	#DMA_ISR_HTIF1_Msk
 (0x1UL << 
DMA_ISR_HTIF1_Pos
Ë

	)

3051 
	#DMA_ISR_HTIF1
 
DMA_ISR_HTIF1_Msk


	)

3052 
	#DMA_ISR_TEIF1_Pos
 (3U)

	)

3053 
	#DMA_ISR_TEIF1_Msk
 (0x1UL << 
DMA_ISR_TEIF1_Pos
Ë

	)

3054 
	#DMA_ISR_TEIF1
 
DMA_ISR_TEIF1_Msk


	)

3055 
	#DMA_ISR_GIF2_Pos
 (4U)

	)

3056 
	#DMA_ISR_GIF2_Msk
 (0x1UL << 
DMA_ISR_GIF2_Pos
Ë

	)

3057 
	#DMA_ISR_GIF2
 
DMA_ISR_GIF2_Msk


	)

3058 
	#DMA_ISR_TCIF2_Pos
 (5U)

	)

3059 
	#DMA_ISR_TCIF2_Msk
 (0x1UL << 
DMA_ISR_TCIF2_Pos
Ë

	)

3060 
	#DMA_ISR_TCIF2
 
DMA_ISR_TCIF2_Msk


	)

3061 
	#DMA_ISR_HTIF2_Pos
 (6U)

	)

3062 
	#DMA_ISR_HTIF2_Msk
 (0x1UL << 
DMA_ISR_HTIF2_Pos
Ë

	)

3063 
	#DMA_ISR_HTIF2
 
DMA_ISR_HTIF2_Msk


	)

3064 
	#DMA_ISR_TEIF2_Pos
 (7U)

	)

3065 
	#DMA_ISR_TEIF2_Msk
 (0x1UL << 
DMA_ISR_TEIF2_Pos
Ë

	)

3066 
	#DMA_ISR_TEIF2
 
DMA_ISR_TEIF2_Msk


	)

3067 
	#DMA_ISR_GIF3_Pos
 (8U)

	)

3068 
	#DMA_ISR_GIF3_Msk
 (0x1UL << 
DMA_ISR_GIF3_Pos
Ë

	)

3069 
	#DMA_ISR_GIF3
 
DMA_ISR_GIF3_Msk


	)

3070 
	#DMA_ISR_TCIF3_Pos
 (9U)

	)

3071 
	#DMA_ISR_TCIF3_Msk
 (0x1UL << 
DMA_ISR_TCIF3_Pos
Ë

	)

3072 
	#DMA_ISR_TCIF3
 
DMA_ISR_TCIF3_Msk


	)

3073 
	#DMA_ISR_HTIF3_Pos
 (10U)

	)

3074 
	#DMA_ISR_HTIF3_Msk
 (0x1UL << 
DMA_ISR_HTIF3_Pos
Ë

	)

3075 
	#DMA_ISR_HTIF3
 
DMA_ISR_HTIF3_Msk


	)

3076 
	#DMA_ISR_TEIF3_Pos
 (11U)

	)

3077 
	#DMA_ISR_TEIF3_Msk
 (0x1UL << 
DMA_ISR_TEIF3_Pos
Ë

	)

3078 
	#DMA_ISR_TEIF3
 
DMA_ISR_TEIF3_Msk


	)

3079 
	#DMA_ISR_GIF4_Pos
 (12U)

	)

3080 
	#DMA_ISR_GIF4_Msk
 (0x1UL << 
DMA_ISR_GIF4_Pos
Ë

	)

3081 
	#DMA_ISR_GIF4
 
DMA_ISR_GIF4_Msk


	)

3082 
	#DMA_ISR_TCIF4_Pos
 (13U)

	)

3083 
	#DMA_ISR_TCIF4_Msk
 (0x1UL << 
DMA_ISR_TCIF4_Pos
Ë

	)

3084 
	#DMA_ISR_TCIF4
 
DMA_ISR_TCIF4_Msk


	)

3085 
	#DMA_ISR_HTIF4_Pos
 (14U)

	)

3086 
	#DMA_ISR_HTIF4_Msk
 (0x1UL << 
DMA_ISR_HTIF4_Pos
Ë

	)

3087 
	#DMA_ISR_HTIF4
 
DMA_ISR_HTIF4_Msk


	)

3088 
	#DMA_ISR_TEIF4_Pos
 (15U)

	)

3089 
	#DMA_ISR_TEIF4_Msk
 (0x1UL << 
DMA_ISR_TEIF4_Pos
Ë

	)

3090 
	#DMA_ISR_TEIF4
 
DMA_ISR_TEIF4_Msk


	)

3091 
	#DMA_ISR_GIF5_Pos
 (16U)

	)

3092 
	#DMA_ISR_GIF5_Msk
 (0x1UL << 
DMA_ISR_GIF5_Pos
Ë

	)

3093 
	#DMA_ISR_GIF5
 
DMA_ISR_GIF5_Msk


	)

3094 
	#DMA_ISR_TCIF5_Pos
 (17U)

	)

3095 
	#DMA_ISR_TCIF5_Msk
 (0x1UL << 
DMA_ISR_TCIF5_Pos
Ë

	)

3096 
	#DMA_ISR_TCIF5
 
DMA_ISR_TCIF5_Msk


	)

3097 
	#DMA_ISR_HTIF5_Pos
 (18U)

	)

3098 
	#DMA_ISR_HTIF5_Msk
 (0x1UL << 
DMA_ISR_HTIF5_Pos
Ë

	)

3099 
	#DMA_ISR_HTIF5
 
DMA_ISR_HTIF5_Msk


	)

3100 
	#DMA_ISR_TEIF5_Pos
 (19U)

	)

3101 
	#DMA_ISR_TEIF5_Msk
 (0x1UL << 
DMA_ISR_TEIF5_Pos
Ë

	)

3102 
	#DMA_ISR_TEIF5
 
DMA_ISR_TEIF5_Msk


	)

3103 
	#DMA_ISR_GIF6_Pos
 (20U)

	)

3104 
	#DMA_ISR_GIF6_Msk
 (0x1UL << 
DMA_ISR_GIF6_Pos
Ë

	)

3105 
	#DMA_ISR_GIF6
 
DMA_ISR_GIF6_Msk


	)

3106 
	#DMA_ISR_TCIF6_Pos
 (21U)

	)

3107 
	#DMA_ISR_TCIF6_Msk
 (0x1UL << 
DMA_ISR_TCIF6_Pos
Ë

	)

3108 
	#DMA_ISR_TCIF6
 
DMA_ISR_TCIF6_Msk


	)

3109 
	#DMA_ISR_HTIF6_Pos
 (22U)

	)

3110 
	#DMA_ISR_HTIF6_Msk
 (0x1UL << 
DMA_ISR_HTIF6_Pos
Ë

	)

3111 
	#DMA_ISR_HTIF6
 
DMA_ISR_HTIF6_Msk


	)

3112 
	#DMA_ISR_TEIF6_Pos
 (23U)

	)

3113 
	#DMA_ISR_TEIF6_Msk
 (0x1UL << 
DMA_ISR_TEIF6_Pos
Ë

	)

3114 
	#DMA_ISR_TEIF6
 
DMA_ISR_TEIF6_Msk


	)

3115 
	#DMA_ISR_GIF7_Pos
 (24U)

	)

3116 
	#DMA_ISR_GIF7_Msk
 (0x1UL << 
DMA_ISR_GIF7_Pos
Ë

	)

3117 
	#DMA_ISR_GIF7
 
DMA_ISR_GIF7_Msk


	)

3118 
	#DMA_ISR_TCIF7_Pos
 (25U)

	)

3119 
	#DMA_ISR_TCIF7_Msk
 (0x1UL << 
DMA_ISR_TCIF7_Pos
Ë

	)

3120 
	#DMA_ISR_TCIF7
 
DMA_ISR_TCIF7_Msk


	)

3121 
	#DMA_ISR_HTIF7_Pos
 (26U)

	)

3122 
	#DMA_ISR_HTIF7_Msk
 (0x1UL << 
DMA_ISR_HTIF7_Pos
Ë

	)

3123 
	#DMA_ISR_HTIF7
 
DMA_ISR_HTIF7_Msk


	)

3124 
	#DMA_ISR_TEIF7_Pos
 (27U)

	)

3125 
	#DMA_ISR_TEIF7_Msk
 (0x1UL << 
DMA_ISR_TEIF7_Pos
Ë

	)

3126 
	#DMA_ISR_TEIF7
 
DMA_ISR_TEIF7_Msk


	)

3129 
	#DMA_IFCR_CGIF1_Pos
 (0U)

	)

3130 
	#DMA_IFCR_CGIF1_Msk
 (0x1UL << 
DMA_IFCR_CGIF1_Pos
Ë

	)

3131 
	#DMA_IFCR_CGIF1
 
DMA_IFCR_CGIF1_Msk


	)

3132 
	#DMA_IFCR_CTCIF1_Pos
 (1U)

	)

3133 
	#DMA_IFCR_CTCIF1_Msk
 (0x1UL << 
DMA_IFCR_CTCIF1_Pos
Ë

	)

3134 
	#DMA_IFCR_CTCIF1
 
DMA_IFCR_CTCIF1_Msk


	)

3135 
	#DMA_IFCR_CHTIF1_Pos
 (2U)

	)

3136 
	#DMA_IFCR_CHTIF1_Msk
 (0x1UL << 
DMA_IFCR_CHTIF1_Pos
Ë

	)

3137 
	#DMA_IFCR_CHTIF1
 
DMA_IFCR_CHTIF1_Msk


	)

3138 
	#DMA_IFCR_CTEIF1_Pos
 (3U)

	)

3139 
	#DMA_IFCR_CTEIF1_Msk
 (0x1UL << 
DMA_IFCR_CTEIF1_Pos
Ë

	)

3140 
	#DMA_IFCR_CTEIF1
 
DMA_IFCR_CTEIF1_Msk


	)

3141 
	#DMA_IFCR_CGIF2_Pos
 (4U)

	)

3142 
	#DMA_IFCR_CGIF2_Msk
 (0x1UL << 
DMA_IFCR_CGIF2_Pos
Ë

	)

3143 
	#DMA_IFCR_CGIF2
 
DMA_IFCR_CGIF2_Msk


	)

3144 
	#DMA_IFCR_CTCIF2_Pos
 (5U)

	)

3145 
	#DMA_IFCR_CTCIF2_Msk
 (0x1UL << 
DMA_IFCR_CTCIF2_Pos
Ë

	)

3146 
	#DMA_IFCR_CTCIF2
 
DMA_IFCR_CTCIF2_Msk


	)

3147 
	#DMA_IFCR_CHTIF2_Pos
 (6U)

	)

3148 
	#DMA_IFCR_CHTIF2_Msk
 (0x1UL << 
DMA_IFCR_CHTIF2_Pos
Ë

	)

3149 
	#DMA_IFCR_CHTIF2
 
DMA_IFCR_CHTIF2_Msk


	)

3150 
	#DMA_IFCR_CTEIF2_Pos
 (7U)

	)

3151 
	#DMA_IFCR_CTEIF2_Msk
 (0x1UL << 
DMA_IFCR_CTEIF2_Pos
Ë

	)

3152 
	#DMA_IFCR_CTEIF2
 
DMA_IFCR_CTEIF2_Msk


	)

3153 
	#DMA_IFCR_CGIF3_Pos
 (8U)

	)

3154 
	#DMA_IFCR_CGIF3_Msk
 (0x1UL << 
DMA_IFCR_CGIF3_Pos
Ë

	)

3155 
	#DMA_IFCR_CGIF3
 
DMA_IFCR_CGIF3_Msk


	)

3156 
	#DMA_IFCR_CTCIF3_Pos
 (9U)

	)

3157 
	#DMA_IFCR_CTCIF3_Msk
 (0x1UL << 
DMA_IFCR_CTCIF3_Pos
Ë

	)

3158 
	#DMA_IFCR_CTCIF3
 
DMA_IFCR_CTCIF3_Msk


	)

3159 
	#DMA_IFCR_CHTIF3_Pos
 (10U)

	)

3160 
	#DMA_IFCR_CHTIF3_Msk
 (0x1UL << 
DMA_IFCR_CHTIF3_Pos
Ë

	)

3161 
	#DMA_IFCR_CHTIF3
 
DMA_IFCR_CHTIF3_Msk


	)

3162 
	#DMA_IFCR_CTEIF3_Pos
 (11U)

	)

3163 
	#DMA_IFCR_CTEIF3_Msk
 (0x1UL << 
DMA_IFCR_CTEIF3_Pos
Ë

	)

3164 
	#DMA_IFCR_CTEIF3
 
DMA_IFCR_CTEIF3_Msk


	)

3165 
	#DMA_IFCR_CGIF4_Pos
 (12U)

	)

3166 
	#DMA_IFCR_CGIF4_Msk
 (0x1UL << 
DMA_IFCR_CGIF4_Pos
Ë

	)

3167 
	#DMA_IFCR_CGIF4
 
DMA_IFCR_CGIF4_Msk


	)

3168 
	#DMA_IFCR_CTCIF4_Pos
 (13U)

	)

3169 
	#DMA_IFCR_CTCIF4_Msk
 (0x1UL << 
DMA_IFCR_CTCIF4_Pos
Ë

	)

3170 
	#DMA_IFCR_CTCIF4
 
DMA_IFCR_CTCIF4_Msk


	)

3171 
	#DMA_IFCR_CHTIF4_Pos
 (14U)

	)

3172 
	#DMA_IFCR_CHTIF4_Msk
 (0x1UL << 
DMA_IFCR_CHTIF4_Pos
Ë

	)

3173 
	#DMA_IFCR_CHTIF4
 
DMA_IFCR_CHTIF4_Msk


	)

3174 
	#DMA_IFCR_CTEIF4_Pos
 (15U)

	)

3175 
	#DMA_IFCR_CTEIF4_Msk
 (0x1UL << 
DMA_IFCR_CTEIF4_Pos
Ë

	)

3176 
	#DMA_IFCR_CTEIF4
 
DMA_IFCR_CTEIF4_Msk


	)

3177 
	#DMA_IFCR_CGIF5_Pos
 (16U)

	)

3178 
	#DMA_IFCR_CGIF5_Msk
 (0x1UL << 
DMA_IFCR_CGIF5_Pos
Ë

	)

3179 
	#DMA_IFCR_CGIF5
 
DMA_IFCR_CGIF5_Msk


	)

3180 
	#DMA_IFCR_CTCIF5_Pos
 (17U)

	)

3181 
	#DMA_IFCR_CTCIF5_Msk
 (0x1UL << 
DMA_IFCR_CTCIF5_Pos
Ë

	)

3182 
	#DMA_IFCR_CTCIF5
 
DMA_IFCR_CTCIF5_Msk


	)

3183 
	#DMA_IFCR_CHTIF5_Pos
 (18U)

	)

3184 
	#DMA_IFCR_CHTIF5_Msk
 (0x1UL << 
DMA_IFCR_CHTIF5_Pos
Ë

	)

3185 
	#DMA_IFCR_CHTIF5
 
DMA_IFCR_CHTIF5_Msk


	)

3186 
	#DMA_IFCR_CTEIF5_Pos
 (19U)

	)

3187 
	#DMA_IFCR_CTEIF5_Msk
 (0x1UL << 
DMA_IFCR_CTEIF5_Pos
Ë

	)

3188 
	#DMA_IFCR_CTEIF5
 
DMA_IFCR_CTEIF5_Msk


	)

3189 
	#DMA_IFCR_CGIF6_Pos
 (20U)

	)

3190 
	#DMA_IFCR_CGIF6_Msk
 (0x1UL << 
DMA_IFCR_CGIF6_Pos
Ë

	)

3191 
	#DMA_IFCR_CGIF6
 
DMA_IFCR_CGIF6_Msk


	)

3192 
	#DMA_IFCR_CTCIF6_Pos
 (21U)

	)

3193 
	#DMA_IFCR_CTCIF6_Msk
 (0x1UL << 
DMA_IFCR_CTCIF6_Pos
Ë

	)

3194 
	#DMA_IFCR_CTCIF6
 
DMA_IFCR_CTCIF6_Msk


	)

3195 
	#DMA_IFCR_CHTIF6_Pos
 (22U)

	)

3196 
	#DMA_IFCR_CHTIF6_Msk
 (0x1UL << 
DMA_IFCR_CHTIF6_Pos
Ë

	)

3197 
	#DMA_IFCR_CHTIF6
 
DMA_IFCR_CHTIF6_Msk


	)

3198 
	#DMA_IFCR_CTEIF6_Pos
 (23U)

	)

3199 
	#DMA_IFCR_CTEIF6_Msk
 (0x1UL << 
DMA_IFCR_CTEIF6_Pos
Ë

	)

3200 
	#DMA_IFCR_CTEIF6
 
DMA_IFCR_CTEIF6_Msk


	)

3201 
	#DMA_IFCR_CGIF7_Pos
 (24U)

	)

3202 
	#DMA_IFCR_CGIF7_Msk
 (0x1UL << 
DMA_IFCR_CGIF7_Pos
Ë

	)

3203 
	#DMA_IFCR_CGIF7
 
DMA_IFCR_CGIF7_Msk


	)

3204 
	#DMA_IFCR_CTCIF7_Pos
 (25U)

	)

3205 
	#DMA_IFCR_CTCIF7_Msk
 (0x1UL << 
DMA_IFCR_CTCIF7_Pos
Ë

	)

3206 
	#DMA_IFCR_CTCIF7
 
DMA_IFCR_CTCIF7_Msk


	)

3207 
	#DMA_IFCR_CHTIF7_Pos
 (26U)

	)

3208 
	#DMA_IFCR_CHTIF7_Msk
 (0x1UL << 
DMA_IFCR_CHTIF7_Pos
Ë

	)

3209 
	#DMA_IFCR_CHTIF7
 
DMA_IFCR_CHTIF7_Msk


	)

3210 
	#DMA_IFCR_CTEIF7_Pos
 (27U)

	)

3211 
	#DMA_IFCR_CTEIF7_Msk
 (0x1UL << 
DMA_IFCR_CTEIF7_Pos
Ë

	)

3212 
	#DMA_IFCR_CTEIF7
 
DMA_IFCR_CTEIF7_Msk


	)

3215 
	#DMA_CCR_EN_Pos
 (0U)

	)

3216 
	#DMA_CCR_EN_Msk
 (0x1UL << 
DMA_CCR_EN_Pos
Ë

	)

3217 
	#DMA_CCR_EN
 
DMA_CCR_EN_Msk


	)

3218 
	#DMA_CCR_TCIE_Pos
 (1U)

	)

3219 
	#DMA_CCR_TCIE_Msk
 (0x1UL << 
DMA_CCR_TCIE_Pos
Ë

	)

3220 
	#DMA_CCR_TCIE
 
DMA_CCR_TCIE_Msk


	)

3221 
	#DMA_CCR_HTIE_Pos
 (2U)

	)

3222 
	#DMA_CCR_HTIE_Msk
 (0x1UL << 
DMA_CCR_HTIE_Pos
Ë

	)

3223 
	#DMA_CCR_HTIE
 
DMA_CCR_HTIE_Msk


	)

3224 
	#DMA_CCR_TEIE_Pos
 (3U)

	)

3225 
	#DMA_CCR_TEIE_Msk
 (0x1UL << 
DMA_CCR_TEIE_Pos
Ë

	)

3226 
	#DMA_CCR_TEIE
 
DMA_CCR_TEIE_Msk


	)

3227 
	#DMA_CCR_DIR_Pos
 (4U)

	)

3228 
	#DMA_CCR_DIR_Msk
 (0x1UL << 
DMA_CCR_DIR_Pos
Ë

	)

3229 
	#DMA_CCR_DIR
 
DMA_CCR_DIR_Msk


	)

3230 
	#DMA_CCR_CIRC_Pos
 (5U)

	)

3231 
	#DMA_CCR_CIRC_Msk
 (0x1UL << 
DMA_CCR_CIRC_Pos
Ë

	)

3232 
	#DMA_CCR_CIRC
 
DMA_CCR_CIRC_Msk


	)

3233 
	#DMA_CCR_PINC_Pos
 (6U)

	)

3234 
	#DMA_CCR_PINC_Msk
 (0x1UL << 
DMA_CCR_PINC_Pos
Ë

	)

3235 
	#DMA_CCR_PINC
 
DMA_CCR_PINC_Msk


	)

3236 
	#DMA_CCR_MINC_Pos
 (7U)

	)

3237 
	#DMA_CCR_MINC_Msk
 (0x1UL << 
DMA_CCR_MINC_Pos
Ë

	)

3238 
	#DMA_CCR_MINC
 
DMA_CCR_MINC_Msk


	)

3240 
	#DMA_CCR_PSIZE_Pos
 (8U)

	)

3241 
	#DMA_CCR_PSIZE_Msk
 (0x3UL << 
DMA_CCR_PSIZE_Pos
Ë

	)

3242 
	#DMA_CCR_PSIZE
 
DMA_CCR_PSIZE_Msk


	)

3243 
	#DMA_CCR_PSIZE_0
 (0x1UL << 
DMA_CCR_PSIZE_Pos
Ë

	)

3244 
	#DMA_CCR_PSIZE_1
 (0x2UL << 
DMA_CCR_PSIZE_Pos
Ë

	)

3246 
	#DMA_CCR_MSIZE_Pos
 (10U)

	)

3247 
	#DMA_CCR_MSIZE_Msk
 (0x3UL << 
DMA_CCR_MSIZE_Pos
Ë

	)

3248 
	#DMA_CCR_MSIZE
 
DMA_CCR_MSIZE_Msk


	)

3249 
	#DMA_CCR_MSIZE_0
 (0x1UL << 
DMA_CCR_MSIZE_Pos
Ë

	)

3250 
	#DMA_CCR_MSIZE_1
 (0x2UL << 
DMA_CCR_MSIZE_Pos
Ë

	)

3252 
	#DMA_CCR_PL_Pos
 (12U)

	)

3253 
	#DMA_CCR_PL_Msk
 (0x3UL << 
DMA_CCR_PL_Pos
Ë

	)

3254 
	#DMA_CCR_PL
 
DMA_CCR_PL_Msk


	)

3255 
	#DMA_CCR_PL_0
 (0x1UL << 
DMA_CCR_PL_Pos
Ë

	)

3256 
	#DMA_CCR_PL_1
 (0x2UL << 
DMA_CCR_PL_Pos
Ë

	)

3258 
	#DMA_CCR_MEM2MEM_Pos
 (14U)

	)

3259 
	#DMA_CCR_MEM2MEM_Msk
 (0x1UL << 
DMA_CCR_MEM2MEM_Pos
Ë

	)

3260 
	#DMA_CCR_MEM2MEM
 
DMA_CCR_MEM2MEM_Msk


	)

3263 
	#DMA_CNDTR_NDT_Pos
 (0U)

	)

3264 
	#DMA_CNDTR_NDT_Msk
 (0xFFFFUL << 
DMA_CNDTR_NDT_Pos
Ë

	)

3265 
	#DMA_CNDTR_NDT
 
DMA_CNDTR_NDT_Msk


	)

3268 
	#DMA_CPAR_PA_Pos
 (0U)

	)

3269 
	#DMA_CPAR_PA_Msk
 (0xFFFFFFFFUL << 
DMA_CPAR_PA_Pos
Ë

	)

3270 
	#DMA_CPAR_PA
 
DMA_CPAR_PA_Msk


	)

3273 
	#DMA_CMAR_MA_Pos
 (0U)

	)

3274 
	#DMA_CMAR_MA_Msk
 (0xFFFFFFFFUL << 
DMA_CMAR_MA_Pos
Ë

	)

3275 
	#DMA_CMAR_MA
 
DMA_CMAR_MA_Msk


	)

3286 
	#ADC_MULTIMODE_SUPPORT


	)

3289 
	#ADC_SR_AWD_Pos
 (0U)

	)

3290 
	#ADC_SR_AWD_Msk
 (0x1UL << 
ADC_SR_AWD_Pos
Ë

	)

3291 
	#ADC_SR_AWD
 
ADC_SR_AWD_Msk


	)

3292 
	#ADC_SR_EOS_Pos
 (1U)

	)

3293 
	#ADC_SR_EOS_Msk
 (0x1UL << 
ADC_SR_EOS_Pos
Ë

	)

3294 
	#ADC_SR_EOS
 
ADC_SR_EOS_Msk


	)

3295 
	#ADC_SR_JEOS_Pos
 (2U)

	)

3296 
	#ADC_SR_JEOS_Msk
 (0x1UL << 
ADC_SR_JEOS_Pos
Ë

	)

3297 
	#ADC_SR_JEOS
 
ADC_SR_JEOS_Msk


	)

3298 
	#ADC_SR_JSTRT_Pos
 (3U)

	)

3299 
	#ADC_SR_JSTRT_Msk
 (0x1UL << 
ADC_SR_JSTRT_Pos
Ë

	)

3300 
	#ADC_SR_JSTRT
 
ADC_SR_JSTRT_Msk


	)

3301 
	#ADC_SR_STRT_Pos
 (4U)

	)

3302 
	#ADC_SR_STRT_Msk
 (0x1UL << 
ADC_SR_STRT_Pos
Ë

	)

3303 
	#ADC_SR_STRT
 
ADC_SR_STRT_Msk


	)

3306 
	#ADC_SR_EOC
 (
ADC_SR_EOS
)

	)

3307 
	#ADC_SR_JEOC
 (
ADC_SR_JEOS
)

	)

3310 
	#ADC_CR1_AWDCH_Pos
 (0U)

	)

3311 
	#ADC_CR1_AWDCH_Msk
 (0x1FUL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3312 
	#ADC_CR1_AWDCH
 
ADC_CR1_AWDCH_Msk


	)

3313 
	#ADC_CR1_AWDCH_0
 (0x01UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3314 
	#ADC_CR1_AWDCH_1
 (0x02UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3315 
	#ADC_CR1_AWDCH_2
 (0x04UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3316 
	#ADC_CR1_AWDCH_3
 (0x08UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3317 
	#ADC_CR1_AWDCH_4
 (0x10UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3319 
	#ADC_CR1_EOSIE_Pos
 (5U)

	)

3320 
	#ADC_CR1_EOSIE_Msk
 (0x1UL << 
ADC_CR1_EOSIE_Pos
Ë

	)

3321 
	#ADC_CR1_EOSIE
 
ADC_CR1_EOSIE_Msk


	)

3322 
	#ADC_CR1_AWDIE_Pos
 (6U)

	)

3323 
	#ADC_CR1_AWDIE_Msk
 (0x1UL << 
ADC_CR1_AWDIE_Pos
Ë

	)

3324 
	#ADC_CR1_AWDIE
 
ADC_CR1_AWDIE_Msk


	)

3325 
	#ADC_CR1_JEOSIE_Pos
 (7U)

	)

3326 
	#ADC_CR1_JEOSIE_Msk
 (0x1UL << 
ADC_CR1_JEOSIE_Pos
Ë

	)

3327 
	#ADC_CR1_JEOSIE
 
ADC_CR1_JEOSIE_Msk


	)

3328 
	#ADC_CR1_SCAN_Pos
 (8U)

	)

3329 
	#ADC_CR1_SCAN_Msk
 (0x1UL << 
ADC_CR1_SCAN_Pos
Ë

	)

3330 
	#ADC_CR1_SCAN
 
ADC_CR1_SCAN_Msk


	)

3331 
	#ADC_CR1_AWDSGL_Pos
 (9U)

	)

3332 
	#ADC_CR1_AWDSGL_Msk
 (0x1UL << 
ADC_CR1_AWDSGL_Pos
Ë

	)

3333 
	#ADC_CR1_AWDSGL
 
ADC_CR1_AWDSGL_Msk


	)

3334 
	#ADC_CR1_JAUTO_Pos
 (10U)

	)

3335 
	#ADC_CR1_JAUTO_Msk
 (0x1UL << 
ADC_CR1_JAUTO_Pos
Ë

	)

3336 
	#ADC_CR1_JAUTO
 
ADC_CR1_JAUTO_Msk


	)

3337 
	#ADC_CR1_DISCEN_Pos
 (11U)

	)

3338 
	#ADC_CR1_DISCEN_Msk
 (0x1UL << 
ADC_CR1_DISCEN_Pos
Ë

	)

3339 
	#ADC_CR1_DISCEN
 
ADC_CR1_DISCEN_Msk


	)

3340 
	#ADC_CR1_JDISCEN_Pos
 (12U)

	)

3341 
	#ADC_CR1_JDISCEN_Msk
 (0x1UL << 
ADC_CR1_JDISCEN_Pos
Ë

	)

3342 
	#ADC_CR1_JDISCEN
 
ADC_CR1_JDISCEN_Msk


	)

3344 
	#ADC_CR1_DISCNUM_Pos
 (13U)

	)

3345 
	#ADC_CR1_DISCNUM_Msk
 (0x7UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3346 
	#ADC_CR1_DISCNUM
 
ADC_CR1_DISCNUM_Msk


	)

3347 
	#ADC_CR1_DISCNUM_0
 (0x1UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3348 
	#ADC_CR1_DISCNUM_1
 (0x2UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3349 
	#ADC_CR1_DISCNUM_2
 (0x4UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3351 
	#ADC_CR1_DUALMOD_Pos
 (16U)

	)

3352 
	#ADC_CR1_DUALMOD_Msk
 (0xFUL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3353 
	#ADC_CR1_DUALMOD
 
ADC_CR1_DUALMOD_Msk


	)

3354 
	#ADC_CR1_DUALMOD_0
 (0x1UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3355 
	#ADC_CR1_DUALMOD_1
 (0x2UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3356 
	#ADC_CR1_DUALMOD_2
 (0x4UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3357 
	#ADC_CR1_DUALMOD_3
 (0x8UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3359 
	#ADC_CR1_JAWDEN_Pos
 (22U)

	)

3360 
	#ADC_CR1_JAWDEN_Msk
 (0x1UL << 
ADC_CR1_JAWDEN_Pos
Ë

	)

3361 
	#ADC_CR1_JAWDEN
 
ADC_CR1_JAWDEN_Msk


	)

3362 
	#ADC_CR1_AWDEN_Pos
 (23U)

	)

3363 
	#ADC_CR1_AWDEN_Msk
 (0x1UL << 
ADC_CR1_AWDEN_Pos
Ë

	)

3364 
	#ADC_CR1_AWDEN
 
ADC_CR1_AWDEN_Msk


	)

3367 
	#ADC_CR1_EOCIE
 (
ADC_CR1_EOSIE
)

	)

3368 
	#ADC_CR1_JEOCIE
 (
ADC_CR1_JEOSIE
)

	)

3371 
	#ADC_CR2_ADON_Pos
 (0U)

	)

3372 
	#ADC_CR2_ADON_Msk
 (0x1UL << 
ADC_CR2_ADON_Pos
Ë

	)

3373 
	#ADC_CR2_ADON
 
ADC_CR2_ADON_Msk


	)

3374 
	#ADC_CR2_CONT_Pos
 (1U)

	)

3375 
	#ADC_CR2_CONT_Msk
 (0x1UL << 
ADC_CR2_CONT_Pos
Ë

	)

3376 
	#ADC_CR2_CONT
 
ADC_CR2_CONT_Msk


	)

3377 
	#ADC_CR2_CAL_Pos
 (2U)

	)

3378 
	#ADC_CR2_CAL_Msk
 (0x1UL << 
ADC_CR2_CAL_Pos
Ë

	)

3379 
	#ADC_CR2_CAL
 
ADC_CR2_CAL_Msk


	)

3380 
	#ADC_CR2_RSTCAL_Pos
 (3U)

	)

3381 
	#ADC_CR2_RSTCAL_Msk
 (0x1UL << 
ADC_CR2_RSTCAL_Pos
Ë

	)

3382 
	#ADC_CR2_RSTCAL
 
ADC_CR2_RSTCAL_Msk


	)

3383 
	#ADC_CR2_DMA_Pos
 (8U)

	)

3384 
	#ADC_CR2_DMA_Msk
 (0x1UL << 
ADC_CR2_DMA_Pos
Ë

	)

3385 
	#ADC_CR2_DMA
 
ADC_CR2_DMA_Msk


	)

3386 
	#ADC_CR2_ALIGN_Pos
 (11U)

	)

3387 
	#ADC_CR2_ALIGN_Msk
 (0x1UL << 
ADC_CR2_ALIGN_Pos
Ë

	)

3388 
	#ADC_CR2_ALIGN
 
ADC_CR2_ALIGN_Msk


	)

3390 
	#ADC_CR2_JEXTSEL_Pos
 (12U)

	)

3391 
	#ADC_CR2_JEXTSEL_Msk
 (0x7UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3392 
	#ADC_CR2_JEXTSEL
 
ADC_CR2_JEXTSEL_Msk


	)

3393 
	#ADC_CR2_JEXTSEL_0
 (0x1UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3394 
	#ADC_CR2_JEXTSEL_1
 (0x2UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3395 
	#ADC_CR2_JEXTSEL_2
 (0x4UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3397 
	#ADC_CR2_JEXTTRIG_Pos
 (15U)

	)

3398 
	#ADC_CR2_JEXTTRIG_Msk
 (0x1UL << 
ADC_CR2_JEXTTRIG_Pos
Ë

	)

3399 
	#ADC_CR2_JEXTTRIG
 
ADC_CR2_JEXTTRIG_Msk


	)

3401 
	#ADC_CR2_EXTSEL_Pos
 (17U)

	)

3402 
	#ADC_CR2_EXTSEL_Msk
 (0x7UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3403 
	#ADC_CR2_EXTSEL
 
ADC_CR2_EXTSEL_Msk


	)

3404 
	#ADC_CR2_EXTSEL_0
 (0x1UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3405 
	#ADC_CR2_EXTSEL_1
 (0x2UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3406 
	#ADC_CR2_EXTSEL_2
 (0x4UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3408 
	#ADC_CR2_EXTTRIG_Pos
 (20U)

	)

3409 
	#ADC_CR2_EXTTRIG_Msk
 (0x1UL << 
ADC_CR2_EXTTRIG_Pos
Ë

	)

3410 
	#ADC_CR2_EXTTRIG
 
ADC_CR2_EXTTRIG_Msk


	)

3411 
	#ADC_CR2_JSWSTART_Pos
 (21U)

	)

3412 
	#ADC_CR2_JSWSTART_Msk
 (0x1UL << 
ADC_CR2_JSWSTART_Pos
Ë

	)

3413 
	#ADC_CR2_JSWSTART
 
ADC_CR2_JSWSTART_Msk


	)

3414 
	#ADC_CR2_SWSTART_Pos
 (22U)

	)

3415 
	#ADC_CR2_SWSTART_Msk
 (0x1UL << 
ADC_CR2_SWSTART_Pos
Ë

	)

3416 
	#ADC_CR2_SWSTART
 
ADC_CR2_SWSTART_Msk


	)

3417 
	#ADC_CR2_TSVREFE_Pos
 (23U)

	)

3418 
	#ADC_CR2_TSVREFE_Msk
 (0x1UL << 
ADC_CR2_TSVREFE_Pos
Ë

	)

3419 
	#ADC_CR2_TSVREFE
 
ADC_CR2_TSVREFE_Msk


	)

3422 
	#ADC_SMPR1_SMP10_Pos
 (0U)

	)

3423 
	#ADC_SMPR1_SMP10_Msk
 (0x7UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3424 
	#ADC_SMPR1_SMP10
 
ADC_SMPR1_SMP10_Msk


	)

3425 
	#ADC_SMPR1_SMP10_0
 (0x1UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3426 
	#ADC_SMPR1_SMP10_1
 (0x2UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3427 
	#ADC_SMPR1_SMP10_2
 (0x4UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3429 
	#ADC_SMPR1_SMP11_Pos
 (3U)

	)

3430 
	#ADC_SMPR1_SMP11_Msk
 (0x7UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3431 
	#ADC_SMPR1_SMP11
 
ADC_SMPR1_SMP11_Msk


	)

3432 
	#ADC_SMPR1_SMP11_0
 (0x1UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3433 
	#ADC_SMPR1_SMP11_1
 (0x2UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3434 
	#ADC_SMPR1_SMP11_2
 (0x4UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3436 
	#ADC_SMPR1_SMP12_Pos
 (6U)

	)

3437 
	#ADC_SMPR1_SMP12_Msk
 (0x7UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3438 
	#ADC_SMPR1_SMP12
 
ADC_SMPR1_SMP12_Msk


	)

3439 
	#ADC_SMPR1_SMP12_0
 (0x1UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3440 
	#ADC_SMPR1_SMP12_1
 (0x2UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3441 
	#ADC_SMPR1_SMP12_2
 (0x4UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3443 
	#ADC_SMPR1_SMP13_Pos
 (9U)

	)

3444 
	#ADC_SMPR1_SMP13_Msk
 (0x7UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3445 
	#ADC_SMPR1_SMP13
 
ADC_SMPR1_SMP13_Msk


	)

3446 
	#ADC_SMPR1_SMP13_0
 (0x1UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3447 
	#ADC_SMPR1_SMP13_1
 (0x2UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3448 
	#ADC_SMPR1_SMP13_2
 (0x4UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3450 
	#ADC_SMPR1_SMP14_Pos
 (12U)

	)

3451 
	#ADC_SMPR1_SMP14_Msk
 (0x7UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3452 
	#ADC_SMPR1_SMP14
 
ADC_SMPR1_SMP14_Msk


	)

3453 
	#ADC_SMPR1_SMP14_0
 (0x1UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3454 
	#ADC_SMPR1_SMP14_1
 (0x2UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3455 
	#ADC_SMPR1_SMP14_2
 (0x4UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3457 
	#ADC_SMPR1_SMP15_Pos
 (15U)

	)

3458 
	#ADC_SMPR1_SMP15_Msk
 (0x7UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3459 
	#ADC_SMPR1_SMP15
 
ADC_SMPR1_SMP15_Msk


	)

3460 
	#ADC_SMPR1_SMP15_0
 (0x1UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3461 
	#ADC_SMPR1_SMP15_1
 (0x2UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3462 
	#ADC_SMPR1_SMP15_2
 (0x4UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3464 
	#ADC_SMPR1_SMP16_Pos
 (18U)

	)

3465 
	#ADC_SMPR1_SMP16_Msk
 (0x7UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3466 
	#ADC_SMPR1_SMP16
 
ADC_SMPR1_SMP16_Msk


	)

3467 
	#ADC_SMPR1_SMP16_0
 (0x1UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3468 
	#ADC_SMPR1_SMP16_1
 (0x2UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3469 
	#ADC_SMPR1_SMP16_2
 (0x4UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3471 
	#ADC_SMPR1_SMP17_Pos
 (21U)

	)

3472 
	#ADC_SMPR1_SMP17_Msk
 (0x7UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3473 
	#ADC_SMPR1_SMP17
 
ADC_SMPR1_SMP17_Msk


	)

3474 
	#ADC_SMPR1_SMP17_0
 (0x1UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3475 
	#ADC_SMPR1_SMP17_1
 (0x2UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3476 
	#ADC_SMPR1_SMP17_2
 (0x4UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3479 
	#ADC_SMPR2_SMP0_Pos
 (0U)

	)

3480 
	#ADC_SMPR2_SMP0_Msk
 (0x7UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3481 
	#ADC_SMPR2_SMP0
 
ADC_SMPR2_SMP0_Msk


	)

3482 
	#ADC_SMPR2_SMP0_0
 (0x1UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3483 
	#ADC_SMPR2_SMP0_1
 (0x2UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3484 
	#ADC_SMPR2_SMP0_2
 (0x4UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3486 
	#ADC_SMPR2_SMP1_Pos
 (3U)

	)

3487 
	#ADC_SMPR2_SMP1_Msk
 (0x7UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3488 
	#ADC_SMPR2_SMP1
 
ADC_SMPR2_SMP1_Msk


	)

3489 
	#ADC_SMPR2_SMP1_0
 (0x1UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3490 
	#ADC_SMPR2_SMP1_1
 (0x2UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3491 
	#ADC_SMPR2_SMP1_2
 (0x4UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3493 
	#ADC_SMPR2_SMP2_Pos
 (6U)

	)

3494 
	#ADC_SMPR2_SMP2_Msk
 (0x7UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3495 
	#ADC_SMPR2_SMP2
 
ADC_SMPR2_SMP2_Msk


	)

3496 
	#ADC_SMPR2_SMP2_0
 (0x1UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3497 
	#ADC_SMPR2_SMP2_1
 (0x2UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3498 
	#ADC_SMPR2_SMP2_2
 (0x4UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3500 
	#ADC_SMPR2_SMP3_Pos
 (9U)

	)

3501 
	#ADC_SMPR2_SMP3_Msk
 (0x7UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3502 
	#ADC_SMPR2_SMP3
 
ADC_SMPR2_SMP3_Msk


	)

3503 
	#ADC_SMPR2_SMP3_0
 (0x1UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3504 
	#ADC_SMPR2_SMP3_1
 (0x2UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3505 
	#ADC_SMPR2_SMP3_2
 (0x4UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3507 
	#ADC_SMPR2_SMP4_Pos
 (12U)

	)

3508 
	#ADC_SMPR2_SMP4_Msk
 (0x7UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3509 
	#ADC_SMPR2_SMP4
 
ADC_SMPR2_SMP4_Msk


	)

3510 
	#ADC_SMPR2_SMP4_0
 (0x1UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3511 
	#ADC_SMPR2_SMP4_1
 (0x2UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3512 
	#ADC_SMPR2_SMP4_2
 (0x4UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3514 
	#ADC_SMPR2_SMP5_Pos
 (15U)

	)

3515 
	#ADC_SMPR2_SMP5_Msk
 (0x7UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3516 
	#ADC_SMPR2_SMP5
 
ADC_SMPR2_SMP5_Msk


	)

3517 
	#ADC_SMPR2_SMP5_0
 (0x1UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3518 
	#ADC_SMPR2_SMP5_1
 (0x2UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3519 
	#ADC_SMPR2_SMP5_2
 (0x4UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3521 
	#ADC_SMPR2_SMP6_Pos
 (18U)

	)

3522 
	#ADC_SMPR2_SMP6_Msk
 (0x7UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3523 
	#ADC_SMPR2_SMP6
 
ADC_SMPR2_SMP6_Msk


	)

3524 
	#ADC_SMPR2_SMP6_0
 (0x1UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3525 
	#ADC_SMPR2_SMP6_1
 (0x2UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3526 
	#ADC_SMPR2_SMP6_2
 (0x4UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3528 
	#ADC_SMPR2_SMP7_Pos
 (21U)

	)

3529 
	#ADC_SMPR2_SMP7_Msk
 (0x7UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3530 
	#ADC_SMPR2_SMP7
 
ADC_SMPR2_SMP7_Msk


	)

3531 
	#ADC_SMPR2_SMP7_0
 (0x1UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3532 
	#ADC_SMPR2_SMP7_1
 (0x2UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3533 
	#ADC_SMPR2_SMP7_2
 (0x4UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3535 
	#ADC_SMPR2_SMP8_Pos
 (24U)

	)

3536 
	#ADC_SMPR2_SMP8_Msk
 (0x7UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3537 
	#ADC_SMPR2_SMP8
 
ADC_SMPR2_SMP8_Msk


	)

3538 
	#ADC_SMPR2_SMP8_0
 (0x1UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3539 
	#ADC_SMPR2_SMP8_1
 (0x2UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3540 
	#ADC_SMPR2_SMP8_2
 (0x4UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3542 
	#ADC_SMPR2_SMP9_Pos
 (27U)

	)

3543 
	#ADC_SMPR2_SMP9_Msk
 (0x7UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3544 
	#ADC_SMPR2_SMP9
 
ADC_SMPR2_SMP9_Msk


	)

3545 
	#ADC_SMPR2_SMP9_0
 (0x1UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3546 
	#ADC_SMPR2_SMP9_1
 (0x2UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3547 
	#ADC_SMPR2_SMP9_2
 (0x4UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3550 
	#ADC_JOFR1_JOFFSET1_Pos
 (0U)

	)

3551 
	#ADC_JOFR1_JOFFSET1_Msk
 (0xFFFUL << 
ADC_JOFR1_JOFFSET1_Pos
Ë

	)

3552 
	#ADC_JOFR1_JOFFSET1
 
ADC_JOFR1_JOFFSET1_Msk


	)

3555 
	#ADC_JOFR2_JOFFSET2_Pos
 (0U)

	)

3556 
	#ADC_JOFR2_JOFFSET2_Msk
 (0xFFFUL << 
ADC_JOFR2_JOFFSET2_Pos
Ë

	)

3557 
	#ADC_JOFR2_JOFFSET2
 
ADC_JOFR2_JOFFSET2_Msk


	)

3560 
	#ADC_JOFR3_JOFFSET3_Pos
 (0U)

	)

3561 
	#ADC_JOFR3_JOFFSET3_Msk
 (0xFFFUL << 
ADC_JOFR3_JOFFSET3_Pos
Ë

	)

3562 
	#ADC_JOFR3_JOFFSET3
 
ADC_JOFR3_JOFFSET3_Msk


	)

3565 
	#ADC_JOFR4_JOFFSET4_Pos
 (0U)

	)

3566 
	#ADC_JOFR4_JOFFSET4_Msk
 (0xFFFUL << 
ADC_JOFR4_JOFFSET4_Pos
Ë

	)

3567 
	#ADC_JOFR4_JOFFSET4
 
ADC_JOFR4_JOFFSET4_Msk


	)

3570 
	#ADC_HTR_HT_Pos
 (0U)

	)

3571 
	#ADC_HTR_HT_Msk
 (0xFFFUL << 
ADC_HTR_HT_Pos
Ë

	)

3572 
	#ADC_HTR_HT
 
ADC_HTR_HT_Msk


	)

3575 
	#ADC_LTR_LT_Pos
 (0U)

	)

3576 
	#ADC_LTR_LT_Msk
 (0xFFFUL << 
ADC_LTR_LT_Pos
Ë

	)

3577 
	#ADC_LTR_LT
 
ADC_LTR_LT_Msk


	)

3580 
	#ADC_SQR1_SQ13_Pos
 (0U)

	)

3581 
	#ADC_SQR1_SQ13_Msk
 (0x1FUL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3582 
	#ADC_SQR1_SQ13
 
ADC_SQR1_SQ13_Msk


	)

3583 
	#ADC_SQR1_SQ13_0
 (0x01UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3584 
	#ADC_SQR1_SQ13_1
 (0x02UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3585 
	#ADC_SQR1_SQ13_2
 (0x04UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3586 
	#ADC_SQR1_SQ13_3
 (0x08UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3587 
	#ADC_SQR1_SQ13_4
 (0x10UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3589 
	#ADC_SQR1_SQ14_Pos
 (5U)

	)

3590 
	#ADC_SQR1_SQ14_Msk
 (0x1FUL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3591 
	#ADC_SQR1_SQ14
 
ADC_SQR1_SQ14_Msk


	)

3592 
	#ADC_SQR1_SQ14_0
 (0x01UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3593 
	#ADC_SQR1_SQ14_1
 (0x02UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3594 
	#ADC_SQR1_SQ14_2
 (0x04UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3595 
	#ADC_SQR1_SQ14_3
 (0x08UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3596 
	#ADC_SQR1_SQ14_4
 (0x10UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3598 
	#ADC_SQR1_SQ15_Pos
 (10U)

	)

3599 
	#ADC_SQR1_SQ15_Msk
 (0x1FUL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3600 
	#ADC_SQR1_SQ15
 
ADC_SQR1_SQ15_Msk


	)

3601 
	#ADC_SQR1_SQ15_0
 (0x01UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3602 
	#ADC_SQR1_SQ15_1
 (0x02UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3603 
	#ADC_SQR1_SQ15_2
 (0x04UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3604 
	#ADC_SQR1_SQ15_3
 (0x08UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3605 
	#ADC_SQR1_SQ15_4
 (0x10UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3607 
	#ADC_SQR1_SQ16_Pos
 (15U)

	)

3608 
	#ADC_SQR1_SQ16_Msk
 (0x1FUL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3609 
	#ADC_SQR1_SQ16
 
ADC_SQR1_SQ16_Msk


	)

3610 
	#ADC_SQR1_SQ16_0
 (0x01UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3611 
	#ADC_SQR1_SQ16_1
 (0x02UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3612 
	#ADC_SQR1_SQ16_2
 (0x04UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3613 
	#ADC_SQR1_SQ16_3
 (0x08UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3614 
	#ADC_SQR1_SQ16_4
 (0x10UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3616 
	#ADC_SQR1_L_Pos
 (20U)

	)

3617 
	#ADC_SQR1_L_Msk
 (0xFUL << 
ADC_SQR1_L_Pos
Ë

	)

3618 
	#ADC_SQR1_L
 
ADC_SQR1_L_Msk


	)

3619 
	#ADC_SQR1_L_0
 (0x1UL << 
ADC_SQR1_L_Pos
Ë

	)

3620 
	#ADC_SQR1_L_1
 (0x2UL << 
ADC_SQR1_L_Pos
Ë

	)

3621 
	#ADC_SQR1_L_2
 (0x4UL << 
ADC_SQR1_L_Pos
Ë

	)

3622 
	#ADC_SQR1_L_3
 (0x8UL << 
ADC_SQR1_L_Pos
Ë

	)

3625 
	#ADC_SQR2_SQ7_Pos
 (0U)

	)

3626 
	#ADC_SQR2_SQ7_Msk
 (0x1FUL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3627 
	#ADC_SQR2_SQ7
 
ADC_SQR2_SQ7_Msk


	)

3628 
	#ADC_SQR2_SQ7_0
 (0x01UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3629 
	#ADC_SQR2_SQ7_1
 (0x02UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3630 
	#ADC_SQR2_SQ7_2
 (0x04UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3631 
	#ADC_SQR2_SQ7_3
 (0x08UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3632 
	#ADC_SQR2_SQ7_4
 (0x10UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3634 
	#ADC_SQR2_SQ8_Pos
 (5U)

	)

3635 
	#ADC_SQR2_SQ8_Msk
 (0x1FUL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3636 
	#ADC_SQR2_SQ8
 
ADC_SQR2_SQ8_Msk


	)

3637 
	#ADC_SQR2_SQ8_0
 (0x01UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3638 
	#ADC_SQR2_SQ8_1
 (0x02UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3639 
	#ADC_SQR2_SQ8_2
 (0x04UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3640 
	#ADC_SQR2_SQ8_3
 (0x08UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3641 
	#ADC_SQR2_SQ8_4
 (0x10UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3643 
	#ADC_SQR2_SQ9_Pos
 (10U)

	)

3644 
	#ADC_SQR2_SQ9_Msk
 (0x1FUL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3645 
	#ADC_SQR2_SQ9
 
ADC_SQR2_SQ9_Msk


	)

3646 
	#ADC_SQR2_SQ9_0
 (0x01UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3647 
	#ADC_SQR2_SQ9_1
 (0x02UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3648 
	#ADC_SQR2_SQ9_2
 (0x04UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3649 
	#ADC_SQR2_SQ9_3
 (0x08UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3650 
	#ADC_SQR2_SQ9_4
 (0x10UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3652 
	#ADC_SQR2_SQ10_Pos
 (15U)

	)

3653 
	#ADC_SQR2_SQ10_Msk
 (0x1FUL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3654 
	#ADC_SQR2_SQ10
 
ADC_SQR2_SQ10_Msk


	)

3655 
	#ADC_SQR2_SQ10_0
 (0x01UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3656 
	#ADC_SQR2_SQ10_1
 (0x02UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3657 
	#ADC_SQR2_SQ10_2
 (0x04UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3658 
	#ADC_SQR2_SQ10_3
 (0x08UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3659 
	#ADC_SQR2_SQ10_4
 (0x10UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3661 
	#ADC_SQR2_SQ11_Pos
 (20U)

	)

3662 
	#ADC_SQR2_SQ11_Msk
 (0x1FUL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3663 
	#ADC_SQR2_SQ11
 
ADC_SQR2_SQ11_Msk


	)

3664 
	#ADC_SQR2_SQ11_0
 (0x01UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3665 
	#ADC_SQR2_SQ11_1
 (0x02UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3666 
	#ADC_SQR2_SQ11_2
 (0x04UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3667 
	#ADC_SQR2_SQ11_3
 (0x08UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3668 
	#ADC_SQR2_SQ11_4
 (0x10UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3670 
	#ADC_SQR2_SQ12_Pos
 (25U)

	)

3671 
	#ADC_SQR2_SQ12_Msk
 (0x1FUL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3672 
	#ADC_SQR2_SQ12
 
ADC_SQR2_SQ12_Msk


	)

3673 
	#ADC_SQR2_SQ12_0
 (0x01UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3674 
	#ADC_SQR2_SQ12_1
 (0x02UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3675 
	#ADC_SQR2_SQ12_2
 (0x04UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3676 
	#ADC_SQR2_SQ12_3
 (0x08UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3677 
	#ADC_SQR2_SQ12_4
 (0x10UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3680 
	#ADC_SQR3_SQ1_Pos
 (0U)

	)

3681 
	#ADC_SQR3_SQ1_Msk
 (0x1FUL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3682 
	#ADC_SQR3_SQ1
 
ADC_SQR3_SQ1_Msk


	)

3683 
	#ADC_SQR3_SQ1_0
 (0x01UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3684 
	#ADC_SQR3_SQ1_1
 (0x02UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3685 
	#ADC_SQR3_SQ1_2
 (0x04UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3686 
	#ADC_SQR3_SQ1_3
 (0x08UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3687 
	#ADC_SQR3_SQ1_4
 (0x10UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3689 
	#ADC_SQR3_SQ2_Pos
 (5U)

	)

3690 
	#ADC_SQR3_SQ2_Msk
 (0x1FUL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3691 
	#ADC_SQR3_SQ2
 
ADC_SQR3_SQ2_Msk


	)

3692 
	#ADC_SQR3_SQ2_0
 (0x01UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3693 
	#ADC_SQR3_SQ2_1
 (0x02UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3694 
	#ADC_SQR3_SQ2_2
 (0x04UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3695 
	#ADC_SQR3_SQ2_3
 (0x08UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3696 
	#ADC_SQR3_SQ2_4
 (0x10UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3698 
	#ADC_SQR3_SQ3_Pos
 (10U)

	)

3699 
	#ADC_SQR3_SQ3_Msk
 (0x1FUL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3700 
	#ADC_SQR3_SQ3
 
ADC_SQR3_SQ3_Msk


	)

3701 
	#ADC_SQR3_SQ3_0
 (0x01UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3702 
	#ADC_SQR3_SQ3_1
 (0x02UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3703 
	#ADC_SQR3_SQ3_2
 (0x04UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3704 
	#ADC_SQR3_SQ3_3
 (0x08UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3705 
	#ADC_SQR3_SQ3_4
 (0x10UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3707 
	#ADC_SQR3_SQ4_Pos
 (15U)

	)

3708 
	#ADC_SQR3_SQ4_Msk
 (0x1FUL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3709 
	#ADC_SQR3_SQ4
 
ADC_SQR3_SQ4_Msk


	)

3710 
	#ADC_SQR3_SQ4_0
 (0x01UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3711 
	#ADC_SQR3_SQ4_1
 (0x02UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3712 
	#ADC_SQR3_SQ4_2
 (0x04UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3713 
	#ADC_SQR3_SQ4_3
 (0x08UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3714 
	#ADC_SQR3_SQ4_4
 (0x10UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3716 
	#ADC_SQR3_SQ5_Pos
 (20U)

	)

3717 
	#ADC_SQR3_SQ5_Msk
 (0x1FUL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3718 
	#ADC_SQR3_SQ5
 
ADC_SQR3_SQ5_Msk


	)

3719 
	#ADC_SQR3_SQ5_0
 (0x01UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3720 
	#ADC_SQR3_SQ5_1
 (0x02UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3721 
	#ADC_SQR3_SQ5_2
 (0x04UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3722 
	#ADC_SQR3_SQ5_3
 (0x08UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3723 
	#ADC_SQR3_SQ5_4
 (0x10UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3725 
	#ADC_SQR3_SQ6_Pos
 (25U)

	)

3726 
	#ADC_SQR3_SQ6_Msk
 (0x1FUL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3727 
	#ADC_SQR3_SQ6
 
ADC_SQR3_SQ6_Msk


	)

3728 
	#ADC_SQR3_SQ6_0
 (0x01UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3729 
	#ADC_SQR3_SQ6_1
 (0x02UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3730 
	#ADC_SQR3_SQ6_2
 (0x04UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3731 
	#ADC_SQR3_SQ6_3
 (0x08UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3732 
	#ADC_SQR3_SQ6_4
 (0x10UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3735 
	#ADC_JSQR_JSQ1_Pos
 (0U)

	)

3736 
	#ADC_JSQR_JSQ1_Msk
 (0x1FUL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3737 
	#ADC_JSQR_JSQ1
 
ADC_JSQR_JSQ1_Msk


	)

3738 
	#ADC_JSQR_JSQ1_0
 (0x01UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3739 
	#ADC_JSQR_JSQ1_1
 (0x02UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3740 
	#ADC_JSQR_JSQ1_2
 (0x04UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3741 
	#ADC_JSQR_JSQ1_3
 (0x08UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3742 
	#ADC_JSQR_JSQ1_4
 (0x10UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3744 
	#ADC_JSQR_JSQ2_Pos
 (5U)

	)

3745 
	#ADC_JSQR_JSQ2_Msk
 (0x1FUL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3746 
	#ADC_JSQR_JSQ2
 
ADC_JSQR_JSQ2_Msk


	)

3747 
	#ADC_JSQR_JSQ2_0
 (0x01UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3748 
	#ADC_JSQR_JSQ2_1
 (0x02UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3749 
	#ADC_JSQR_JSQ2_2
 (0x04UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3750 
	#ADC_JSQR_JSQ2_3
 (0x08UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3751 
	#ADC_JSQR_JSQ2_4
 (0x10UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3753 
	#ADC_JSQR_JSQ3_Pos
 (10U)

	)

3754 
	#ADC_JSQR_JSQ3_Msk
 (0x1FUL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3755 
	#ADC_JSQR_JSQ3
 
ADC_JSQR_JSQ3_Msk


	)

3756 
	#ADC_JSQR_JSQ3_0
 (0x01UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3757 
	#ADC_JSQR_JSQ3_1
 (0x02UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3758 
	#ADC_JSQR_JSQ3_2
 (0x04UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3759 
	#ADC_JSQR_JSQ3_3
 (0x08UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3760 
	#ADC_JSQR_JSQ3_4
 (0x10UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3762 
	#ADC_JSQR_JSQ4_Pos
 (15U)

	)

3763 
	#ADC_JSQR_JSQ4_Msk
 (0x1FUL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3764 
	#ADC_JSQR_JSQ4
 
ADC_JSQR_JSQ4_Msk


	)

3765 
	#ADC_JSQR_JSQ4_0
 (0x01UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3766 
	#ADC_JSQR_JSQ4_1
 (0x02UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3767 
	#ADC_JSQR_JSQ4_2
 (0x04UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3768 
	#ADC_JSQR_JSQ4_3
 (0x08UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3769 
	#ADC_JSQR_JSQ4_4
 (0x10UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3771 
	#ADC_JSQR_JL_Pos
 (20U)

	)

3772 
	#ADC_JSQR_JL_Msk
 (0x3UL << 
ADC_JSQR_JL_Pos
Ë

	)

3773 
	#ADC_JSQR_JL
 
ADC_JSQR_JL_Msk


	)

3774 
	#ADC_JSQR_JL_0
 (0x1UL << 
ADC_JSQR_JL_Pos
Ë

	)

3775 
	#ADC_JSQR_JL_1
 (0x2UL << 
ADC_JSQR_JL_Pos
Ë

	)

3778 
	#ADC_JDR1_JDATA_Pos
 (0U)

	)

3779 
	#ADC_JDR1_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR1_JDATA_Pos
Ë

	)

3780 
	#ADC_JDR1_JDATA
 
ADC_JDR1_JDATA_Msk


	)

3783 
	#ADC_JDR2_JDATA_Pos
 (0U)

	)

3784 
	#ADC_JDR2_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR2_JDATA_Pos
Ë

	)

3785 
	#ADC_JDR2_JDATA
 
ADC_JDR2_JDATA_Msk


	)

3788 
	#ADC_JDR3_JDATA_Pos
 (0U)

	)

3789 
	#ADC_JDR3_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR3_JDATA_Pos
Ë

	)

3790 
	#ADC_JDR3_JDATA
 
ADC_JDR3_JDATA_Msk


	)

3793 
	#ADC_JDR4_JDATA_Pos
 (0U)

	)

3794 
	#ADC_JDR4_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR4_JDATA_Pos
Ë

	)

3795 
	#ADC_JDR4_JDATA
 
ADC_JDR4_JDATA_Msk


	)

3798 
	#ADC_DR_DATA_Pos
 (0U)

	)

3799 
	#ADC_DR_DATA_Msk
 (0xFFFFUL << 
ADC_DR_DATA_Pos
Ë

	)

3800 
	#ADC_DR_DATA
 
ADC_DR_DATA_Msk


	)

3801 
	#ADC_DR_ADC2DATA_Pos
 (16U)

	)

3802 
	#ADC_DR_ADC2DATA_Msk
 (0xFFFFUL << 
ADC_DR_ADC2DATA_Pos
Ë

	)

3803 
	#ADC_DR_ADC2DATA
 
ADC_DR_ADC2DATA_Msk


	)

3812 
	#TIM_CR1_CEN_Pos
 (0U)

	)

3813 
	#TIM_CR1_CEN_Msk
 (0x1UL << 
TIM_CR1_CEN_Pos
Ë

	)

3814 
	#TIM_CR1_CEN
 
TIM_CR1_CEN_Msk


	)

3815 
	#TIM_CR1_UDIS_Pos
 (1U)

	)

3816 
	#TIM_CR1_UDIS_Msk
 (0x1UL << 
TIM_CR1_UDIS_Pos
Ë

	)

3817 
	#TIM_CR1_UDIS
 
TIM_CR1_UDIS_Msk


	)

3818 
	#TIM_CR1_URS_Pos
 (2U)

	)

3819 
	#TIM_CR1_URS_Msk
 (0x1UL << 
TIM_CR1_URS_Pos
Ë

	)

3820 
	#TIM_CR1_URS
 
TIM_CR1_URS_Msk


	)

3821 
	#TIM_CR1_OPM_Pos
 (3U)

	)

3822 
	#TIM_CR1_OPM_Msk
 (0x1UL << 
TIM_CR1_OPM_Pos
Ë

	)

3823 
	#TIM_CR1_OPM
 
TIM_CR1_OPM_Msk


	)

3824 
	#TIM_CR1_DIR_Pos
 (4U)

	)

3825 
	#TIM_CR1_DIR_Msk
 (0x1UL << 
TIM_CR1_DIR_Pos
Ë

	)

3826 
	#TIM_CR1_DIR
 
TIM_CR1_DIR_Msk


	)

3828 
	#TIM_CR1_CMS_Pos
 (5U)

	)

3829 
	#TIM_CR1_CMS_Msk
 (0x3UL << 
TIM_CR1_CMS_Pos
Ë

	)

3830 
	#TIM_CR1_CMS
 
TIM_CR1_CMS_Msk


	)

3831 
	#TIM_CR1_CMS_0
 (0x1UL << 
TIM_CR1_CMS_Pos
Ë

	)

3832 
	#TIM_CR1_CMS_1
 (0x2UL << 
TIM_CR1_CMS_Pos
Ë

	)

3834 
	#TIM_CR1_ARPE_Pos
 (7U)

	)

3835 
	#TIM_CR1_ARPE_Msk
 (0x1UL << 
TIM_CR1_ARPE_Pos
Ë

	)

3836 
	#TIM_CR1_ARPE
 
TIM_CR1_ARPE_Msk


	)

3838 
	#TIM_CR1_CKD_Pos
 (8U)

	)

3839 
	#TIM_CR1_CKD_Msk
 (0x3UL << 
TIM_CR1_CKD_Pos
Ë

	)

3840 
	#TIM_CR1_CKD
 
TIM_CR1_CKD_Msk


	)

3841 
	#TIM_CR1_CKD_0
 (0x1UL << 
TIM_CR1_CKD_Pos
Ë

	)

3842 
	#TIM_CR1_CKD_1
 (0x2UL << 
TIM_CR1_CKD_Pos
Ë

	)

3845 
	#TIM_CR2_CCPC_Pos
 (0U)

	)

3846 
	#TIM_CR2_CCPC_Msk
 (0x1UL << 
TIM_CR2_CCPC_Pos
Ë

	)

3847 
	#TIM_CR2_CCPC
 
TIM_CR2_CCPC_Msk


	)

3848 
	#TIM_CR2_CCUS_Pos
 (2U)

	)

3849 
	#TIM_CR2_CCUS_Msk
 (0x1UL << 
TIM_CR2_CCUS_Pos
Ë

	)

3850 
	#TIM_CR2_CCUS
 
TIM_CR2_CCUS_Msk


	)

3851 
	#TIM_CR2_CCDS_Pos
 (3U)

	)

3852 
	#TIM_CR2_CCDS_Msk
 (0x1UL << 
TIM_CR2_CCDS_Pos
Ë

	)

3853 
	#TIM_CR2_CCDS
 
TIM_CR2_CCDS_Msk


	)

3855 
	#TIM_CR2_MMS_Pos
 (4U)

	)

3856 
	#TIM_CR2_MMS_Msk
 (0x7UL << 
TIM_CR2_MMS_Pos
Ë

	)

3857 
	#TIM_CR2_MMS
 
TIM_CR2_MMS_Msk


	)

3858 
	#TIM_CR2_MMS_0
 (0x1UL << 
TIM_CR2_MMS_Pos
Ë

	)

3859 
	#TIM_CR2_MMS_1
 (0x2UL << 
TIM_CR2_MMS_Pos
Ë

	)

3860 
	#TIM_CR2_MMS_2
 (0x4UL << 
TIM_CR2_MMS_Pos
Ë

	)

3862 
	#TIM_CR2_TI1S_Pos
 (7U)

	)

3863 
	#TIM_CR2_TI1S_Msk
 (0x1UL << 
TIM_CR2_TI1S_Pos
Ë

	)

3864 
	#TIM_CR2_TI1S
 
TIM_CR2_TI1S_Msk


	)

3865 
	#TIM_CR2_OIS1_Pos
 (8U)

	)

3866 
	#TIM_CR2_OIS1_Msk
 (0x1UL << 
TIM_CR2_OIS1_Pos
Ë

	)

3867 
	#TIM_CR2_OIS1
 
TIM_CR2_OIS1_Msk


	)

3868 
	#TIM_CR2_OIS1N_Pos
 (9U)

	)

3869 
	#TIM_CR2_OIS1N_Msk
 (0x1UL << 
TIM_CR2_OIS1N_Pos
Ë

	)

3870 
	#TIM_CR2_OIS1N
 
TIM_CR2_OIS1N_Msk


	)

3871 
	#TIM_CR2_OIS2_Pos
 (10U)

	)

3872 
	#TIM_CR2_OIS2_Msk
 (0x1UL << 
TIM_CR2_OIS2_Pos
Ë

	)

3873 
	#TIM_CR2_OIS2
 
TIM_CR2_OIS2_Msk


	)

3874 
	#TIM_CR2_OIS2N_Pos
 (11U)

	)

3875 
	#TIM_CR2_OIS2N_Msk
 (0x1UL << 
TIM_CR2_OIS2N_Pos
Ë

	)

3876 
	#TIM_CR2_OIS2N
 
TIM_CR2_OIS2N_Msk


	)

3877 
	#TIM_CR2_OIS3_Pos
 (12U)

	)

3878 
	#TIM_CR2_OIS3_Msk
 (0x1UL << 
TIM_CR2_OIS3_Pos
Ë

	)

3879 
	#TIM_CR2_OIS3
 
TIM_CR2_OIS3_Msk


	)

3880 
	#TIM_CR2_OIS3N_Pos
 (13U)

	)

3881 
	#TIM_CR2_OIS3N_Msk
 (0x1UL << 
TIM_CR2_OIS3N_Pos
Ë

	)

3882 
	#TIM_CR2_OIS3N
 
TIM_CR2_OIS3N_Msk


	)

3883 
	#TIM_CR2_OIS4_Pos
 (14U)

	)

3884 
	#TIM_CR2_OIS4_Msk
 (0x1UL << 
TIM_CR2_OIS4_Pos
Ë

	)

3885 
	#TIM_CR2_OIS4
 
TIM_CR2_OIS4_Msk


	)

3888 
	#TIM_SMCR_SMS_Pos
 (0U)

	)

3889 
	#TIM_SMCR_SMS_Msk
 (0x7UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3890 
	#TIM_SMCR_SMS
 
TIM_SMCR_SMS_Msk


	)

3891 
	#TIM_SMCR_SMS_0
 (0x1UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3892 
	#TIM_SMCR_SMS_1
 (0x2UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3893 
	#TIM_SMCR_SMS_2
 (0x4UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3895 
	#TIM_SMCR_TS_Pos
 (4U)

	)

3896 
	#TIM_SMCR_TS_Msk
 (0x7UL << 
TIM_SMCR_TS_Pos
Ë

	)

3897 
	#TIM_SMCR_TS
 
TIM_SMCR_TS_Msk


	)

3898 
	#TIM_SMCR_TS_0
 (0x1UL << 
TIM_SMCR_TS_Pos
Ë

	)

3899 
	#TIM_SMCR_TS_1
 (0x2UL << 
TIM_SMCR_TS_Pos
Ë

	)

3900 
	#TIM_SMCR_TS_2
 (0x4UL << 
TIM_SMCR_TS_Pos
Ë

	)

3902 
	#TIM_SMCR_MSM_Pos
 (7U)

	)

3903 
	#TIM_SMCR_MSM_Msk
 (0x1UL << 
TIM_SMCR_MSM_Pos
Ë

	)

3904 
	#TIM_SMCR_MSM
 
TIM_SMCR_MSM_Msk


	)

3906 
	#TIM_SMCR_ETF_Pos
 (8U)

	)

3907 
	#TIM_SMCR_ETF_Msk
 (0xFUL << 
TIM_SMCR_ETF_Pos
Ë

	)

3908 
	#TIM_SMCR_ETF
 
TIM_SMCR_ETF_Msk


	)

3909 
	#TIM_SMCR_ETF_0
 (0x1UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3910 
	#TIM_SMCR_ETF_1
 (0x2UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3911 
	#TIM_SMCR_ETF_2
 (0x4UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3912 
	#TIM_SMCR_ETF_3
 (0x8UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3914 
	#TIM_SMCR_ETPS_Pos
 (12U)

	)

3915 
	#TIM_SMCR_ETPS_Msk
 (0x3UL << 
TIM_SMCR_ETPS_Pos
Ë

	)

3916 
	#TIM_SMCR_ETPS
 
TIM_SMCR_ETPS_Msk


	)

3917 
	#TIM_SMCR_ETPS_0
 (0x1UL << 
TIM_SMCR_ETPS_Pos
Ë

	)

3918 
	#TIM_SMCR_ETPS_1
 (0x2UL << 
TIM_SMCR_ETPS_Pos
Ë

	)

3920 
	#TIM_SMCR_ECE_Pos
 (14U)

	)

3921 
	#TIM_SMCR_ECE_Msk
 (0x1UL << 
TIM_SMCR_ECE_Pos
Ë

	)

3922 
	#TIM_SMCR_ECE
 
TIM_SMCR_ECE_Msk


	)

3923 
	#TIM_SMCR_ETP_Pos
 (15U)

	)

3924 
	#TIM_SMCR_ETP_Msk
 (0x1UL << 
TIM_SMCR_ETP_Pos
Ë

	)

3925 
	#TIM_SMCR_ETP
 
TIM_SMCR_ETP_Msk


	)

3928 
	#TIM_DIER_UIE_Pos
 (0U)

	)

3929 
	#TIM_DIER_UIE_Msk
 (0x1UL << 
TIM_DIER_UIE_Pos
Ë

	)

3930 
	#TIM_DIER_UIE
 
TIM_DIER_UIE_Msk


	)

3931 
	#TIM_DIER_CC1IE_Pos
 (1U)

	)

3932 
	#TIM_DIER_CC1IE_Msk
 (0x1UL << 
TIM_DIER_CC1IE_Pos
Ë

	)

3933 
	#TIM_DIER_CC1IE
 
TIM_DIER_CC1IE_Msk


	)

3934 
	#TIM_DIER_CC2IE_Pos
 (2U)

	)

3935 
	#TIM_DIER_CC2IE_Msk
 (0x1UL << 
TIM_DIER_CC2IE_Pos
Ë

	)

3936 
	#TIM_DIER_CC2IE
 
TIM_DIER_CC2IE_Msk


	)

3937 
	#TIM_DIER_CC3IE_Pos
 (3U)

	)

3938 
	#TIM_DIER_CC3IE_Msk
 (0x1UL << 
TIM_DIER_CC3IE_Pos
Ë

	)

3939 
	#TIM_DIER_CC3IE
 
TIM_DIER_CC3IE_Msk


	)

3940 
	#TIM_DIER_CC4IE_Pos
 (4U)

	)

3941 
	#TIM_DIER_CC4IE_Msk
 (0x1UL << 
TIM_DIER_CC4IE_Pos
Ë

	)

3942 
	#TIM_DIER_CC4IE
 
TIM_DIER_CC4IE_Msk


	)

3943 
	#TIM_DIER_COMIE_Pos
 (5U)

	)

3944 
	#TIM_DIER_COMIE_Msk
 (0x1UL << 
TIM_DIER_COMIE_Pos
Ë

	)

3945 
	#TIM_DIER_COMIE
 
TIM_DIER_COMIE_Msk


	)

3946 
	#TIM_DIER_TIE_Pos
 (6U)

	)

3947 
	#TIM_DIER_TIE_Msk
 (0x1UL << 
TIM_DIER_TIE_Pos
Ë

	)

3948 
	#TIM_DIER_TIE
 
TIM_DIER_TIE_Msk


	)

3949 
	#TIM_DIER_BIE_Pos
 (7U)

	)

3950 
	#TIM_DIER_BIE_Msk
 (0x1UL << 
TIM_DIER_BIE_Pos
Ë

	)

3951 
	#TIM_DIER_BIE
 
TIM_DIER_BIE_Msk


	)

3952 
	#TIM_DIER_UDE_Pos
 (8U)

	)

3953 
	#TIM_DIER_UDE_Msk
 (0x1UL << 
TIM_DIER_UDE_Pos
Ë

	)

3954 
	#TIM_DIER_UDE
 
TIM_DIER_UDE_Msk


	)

3955 
	#TIM_DIER_CC1DE_Pos
 (9U)

	)

3956 
	#TIM_DIER_CC1DE_Msk
 (0x1UL << 
TIM_DIER_CC1DE_Pos
Ë

	)

3957 
	#TIM_DIER_CC1DE
 
TIM_DIER_CC1DE_Msk


	)

3958 
	#TIM_DIER_CC2DE_Pos
 (10U)

	)

3959 
	#TIM_DIER_CC2DE_Msk
 (0x1UL << 
TIM_DIER_CC2DE_Pos
Ë

	)

3960 
	#TIM_DIER_CC2DE
 
TIM_DIER_CC2DE_Msk


	)

3961 
	#TIM_DIER_CC3DE_Pos
 (11U)

	)

3962 
	#TIM_DIER_CC3DE_Msk
 (0x1UL << 
TIM_DIER_CC3DE_Pos
Ë

	)

3963 
	#TIM_DIER_CC3DE
 
TIM_DIER_CC3DE_Msk


	)

3964 
	#TIM_DIER_CC4DE_Pos
 (12U)

	)

3965 
	#TIM_DIER_CC4DE_Msk
 (0x1UL << 
TIM_DIER_CC4DE_Pos
Ë

	)

3966 
	#TIM_DIER_CC4DE
 
TIM_DIER_CC4DE_Msk


	)

3967 
	#TIM_DIER_COMDE_Pos
 (13U)

	)

3968 
	#TIM_DIER_COMDE_Msk
 (0x1UL << 
TIM_DIER_COMDE_Pos
Ë

	)

3969 
	#TIM_DIER_COMDE
 
TIM_DIER_COMDE_Msk


	)

3970 
	#TIM_DIER_TDE_Pos
 (14U)

	)

3971 
	#TIM_DIER_TDE_Msk
 (0x1UL << 
TIM_DIER_TDE_Pos
Ë

	)

3972 
	#TIM_DIER_TDE
 
TIM_DIER_TDE_Msk


	)

3975 
	#TIM_SR_UIF_Pos
 (0U)

	)

3976 
	#TIM_SR_UIF_Msk
 (0x1UL << 
TIM_SR_UIF_Pos
Ë

	)

3977 
	#TIM_SR_UIF
 
TIM_SR_UIF_Msk


	)

3978 
	#TIM_SR_CC1IF_Pos
 (1U)

	)

3979 
	#TIM_SR_CC1IF_Msk
 (0x1UL << 
TIM_SR_CC1IF_Pos
Ë

	)

3980 
	#TIM_SR_CC1IF
 
TIM_SR_CC1IF_Msk


	)

3981 
	#TIM_SR_CC2IF_Pos
 (2U)

	)

3982 
	#TIM_SR_CC2IF_Msk
 (0x1UL << 
TIM_SR_CC2IF_Pos
Ë

	)

3983 
	#TIM_SR_CC2IF
 
TIM_SR_CC2IF_Msk


	)

3984 
	#TIM_SR_CC3IF_Pos
 (3U)

	)

3985 
	#TIM_SR_CC3IF_Msk
 (0x1UL << 
TIM_SR_CC3IF_Pos
Ë

	)

3986 
	#TIM_SR_CC3IF
 
TIM_SR_CC3IF_Msk


	)

3987 
	#TIM_SR_CC4IF_Pos
 (4U)

	)

3988 
	#TIM_SR_CC4IF_Msk
 (0x1UL << 
TIM_SR_CC4IF_Pos
Ë

	)

3989 
	#TIM_SR_CC4IF
 
TIM_SR_CC4IF_Msk


	)

3990 
	#TIM_SR_COMIF_Pos
 (5U)

	)

3991 
	#TIM_SR_COMIF_Msk
 (0x1UL << 
TIM_SR_COMIF_Pos
Ë

	)

3992 
	#TIM_SR_COMIF
 
TIM_SR_COMIF_Msk


	)

3993 
	#TIM_SR_TIF_Pos
 (6U)

	)

3994 
	#TIM_SR_TIF_Msk
 (0x1UL << 
TIM_SR_TIF_Pos
Ë

	)

3995 
	#TIM_SR_TIF
 
TIM_SR_TIF_Msk


	)

3996 
	#TIM_SR_BIF_Pos
 (7U)

	)

3997 
	#TIM_SR_BIF_Msk
 (0x1UL << 
TIM_SR_BIF_Pos
Ë

	)

3998 
	#TIM_SR_BIF
 
TIM_SR_BIF_Msk


	)

3999 
	#TIM_SR_CC1OF_Pos
 (9U)

	)

4000 
	#TIM_SR_CC1OF_Msk
 (0x1UL << 
TIM_SR_CC1OF_Pos
Ë

	)

4001 
	#TIM_SR_CC1OF
 
TIM_SR_CC1OF_Msk


	)

4002 
	#TIM_SR_CC2OF_Pos
 (10U)

	)

4003 
	#TIM_SR_CC2OF_Msk
 (0x1UL << 
TIM_SR_CC2OF_Pos
Ë

	)

4004 
	#TIM_SR_CC2OF
 
TIM_SR_CC2OF_Msk


	)

4005 
	#TIM_SR_CC3OF_Pos
 (11U)

	)

4006 
	#TIM_SR_CC3OF_Msk
 (0x1UL << 
TIM_SR_CC3OF_Pos
Ë

	)

4007 
	#TIM_SR_CC3OF
 
TIM_SR_CC3OF_Msk


	)

4008 
	#TIM_SR_CC4OF_Pos
 (12U)

	)

4009 
	#TIM_SR_CC4OF_Msk
 (0x1UL << 
TIM_SR_CC4OF_Pos
Ë

	)

4010 
	#TIM_SR_CC4OF
 
TIM_SR_CC4OF_Msk


	)

4013 
	#TIM_EGR_UG_Pos
 (0U)

	)

4014 
	#TIM_EGR_UG_Msk
 (0x1UL << 
TIM_EGR_UG_Pos
Ë

	)

4015 
	#TIM_EGR_UG
 
TIM_EGR_UG_Msk


	)

4016 
	#TIM_EGR_CC1G_Pos
 (1U)

	)

4017 
	#TIM_EGR_CC1G_Msk
 (0x1UL << 
TIM_EGR_CC1G_Pos
Ë

	)

4018 
	#TIM_EGR_CC1G
 
TIM_EGR_CC1G_Msk


	)

4019 
	#TIM_EGR_CC2G_Pos
 (2U)

	)

4020 
	#TIM_EGR_CC2G_Msk
 (0x1UL << 
TIM_EGR_CC2G_Pos
Ë

	)

4021 
	#TIM_EGR_CC2G
 
TIM_EGR_CC2G_Msk


	)

4022 
	#TIM_EGR_CC3G_Pos
 (3U)

	)

4023 
	#TIM_EGR_CC3G_Msk
 (0x1UL << 
TIM_EGR_CC3G_Pos
Ë

	)

4024 
	#TIM_EGR_CC3G
 
TIM_EGR_CC3G_Msk


	)

4025 
	#TIM_EGR_CC4G_Pos
 (4U)

	)

4026 
	#TIM_EGR_CC4G_Msk
 (0x1UL << 
TIM_EGR_CC4G_Pos
Ë

	)

4027 
	#TIM_EGR_CC4G
 
TIM_EGR_CC4G_Msk


	)

4028 
	#TIM_EGR_COMG_Pos
 (5U)

	)

4029 
	#TIM_EGR_COMG_Msk
 (0x1UL << 
TIM_EGR_COMG_Pos
Ë

	)

4030 
	#TIM_EGR_COMG
 
TIM_EGR_COMG_Msk


	)

4031 
	#TIM_EGR_TG_Pos
 (6U)

	)

4032 
	#TIM_EGR_TG_Msk
 (0x1UL << 
TIM_EGR_TG_Pos
Ë

	)

4033 
	#TIM_EGR_TG
 
TIM_EGR_TG_Msk


	)

4034 
	#TIM_EGR_BG_Pos
 (7U)

	)

4035 
	#TIM_EGR_BG_Msk
 (0x1UL << 
TIM_EGR_BG_Pos
Ë

	)

4036 
	#TIM_EGR_BG
 
TIM_EGR_BG_Msk


	)

4039 
	#TIM_CCMR1_CC1S_Pos
 (0U)

	)

4040 
	#TIM_CCMR1_CC1S_Msk
 (0x3UL << 
TIM_CCMR1_CC1S_Pos
Ë

	)

4041 
	#TIM_CCMR1_CC1S
 
TIM_CCMR1_CC1S_Msk


	)

4042 
	#TIM_CCMR1_CC1S_0
 (0x1UL << 
TIM_CCMR1_CC1S_Pos
Ë

	)

4043 
	#TIM_CCMR1_CC1S_1
 (0x2UL << 
TIM_CCMR1_CC1S_Pos
Ë

	)

4045 
	#TIM_CCMR1_OC1FE_Pos
 (2U)

	)

4046 
	#TIM_CCMR1_OC1FE_Msk
 (0x1UL << 
TIM_CCMR1_OC1FE_Pos
Ë

	)

4047 
	#TIM_CCMR1_OC1FE
 
TIM_CCMR1_OC1FE_Msk


	)

4048 
	#TIM_CCMR1_OC1PE_Pos
 (3U)

	)

4049 
	#TIM_CCMR1_OC1PE_Msk
 (0x1UL << 
TIM_CCMR1_OC1PE_Pos
Ë

	)

4050 
	#TIM_CCMR1_OC1PE
 
TIM_CCMR1_OC1PE_Msk


	)

4052 
	#TIM_CCMR1_OC1M_Pos
 (4U)

	)

4053 
	#TIM_CCMR1_OC1M_Msk
 (0x7UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4054 
	#TIM_CCMR1_OC1M
 
TIM_CCMR1_OC1M_Msk


	)

4055 
	#TIM_CCMR1_OC1M_0
 (0x1UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4056 
	#TIM_CCMR1_OC1M_1
 (0x2UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4057 
	#TIM_CCMR1_OC1M_2
 (0x4UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4059 
	#TIM_CCMR1_OC1CE_Pos
 (7U)

	)

4060 
	#TIM_CCMR1_OC1CE_Msk
 (0x1UL << 
TIM_CCMR1_OC1CE_Pos
Ë

	)

4061 
	#TIM_CCMR1_OC1CE
 
TIM_CCMR1_OC1CE_Msk


	)

4063 
	#TIM_CCMR1_CC2S_Pos
 (8U)

	)

4064 
	#TIM_CCMR1_CC2S_Msk
 (0x3UL << 
TIM_CCMR1_CC2S_Pos
Ë

	)

4065 
	#TIM_CCMR1_CC2S
 
TIM_CCMR1_CC2S_Msk


	)

4066 
	#TIM_CCMR1_CC2S_0
 (0x1UL << 
TIM_CCMR1_CC2S_Pos
Ë

	)

4067 
	#TIM_CCMR1_CC2S_1
 (0x2UL << 
TIM_CCMR1_CC2S_Pos
Ë

	)

4069 
	#TIM_CCMR1_OC2FE_Pos
 (10U)

	)

4070 
	#TIM_CCMR1_OC2FE_Msk
 (0x1UL << 
TIM_CCMR1_OC2FE_Pos
Ë

	)

4071 
	#TIM_CCMR1_OC2FE
 
TIM_CCMR1_OC2FE_Msk


	)

4072 
	#TIM_CCMR1_OC2PE_Pos
 (11U)

	)

4073 
	#TIM_CCMR1_OC2PE_Msk
 (0x1UL << 
TIM_CCMR1_OC2PE_Pos
Ë

	)

4074 
	#TIM_CCMR1_OC2PE
 
TIM_CCMR1_OC2PE_Msk


	)

4076 
	#TIM_CCMR1_OC2M_Pos
 (12U)

	)

4077 
	#TIM_CCMR1_OC2M_Msk
 (0x7UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4078 
	#TIM_CCMR1_OC2M
 
TIM_CCMR1_OC2M_Msk


	)

4079 
	#TIM_CCMR1_OC2M_0
 (0x1UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4080 
	#TIM_CCMR1_OC2M_1
 (0x2UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4081 
	#TIM_CCMR1_OC2M_2
 (0x4UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4083 
	#TIM_CCMR1_OC2CE_Pos
 (15U)

	)

4084 
	#TIM_CCMR1_OC2CE_Msk
 (0x1UL << 
TIM_CCMR1_OC2CE_Pos
Ë

	)

4085 
	#TIM_CCMR1_OC2CE
 
TIM_CCMR1_OC2CE_Msk


	)

4089 
	#TIM_CCMR1_IC1PSC_Pos
 (2U)

	)

4090 
	#TIM_CCMR1_IC1PSC_Msk
 (0x3UL << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

4091 
	#TIM_CCMR1_IC1PSC
 
TIM_CCMR1_IC1PSC_Msk


	)

4092 
	#TIM_CCMR1_IC1PSC_0
 (0x1UL << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

4093 
	#TIM_CCMR1_IC1PSC_1
 (0x2UL << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

4095 
	#TIM_CCMR1_IC1F_Pos
 (4U)

	)

4096 
	#TIM_CCMR1_IC1F_Msk
 (0xFUL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4097 
	#TIM_CCMR1_IC1F
 
TIM_CCMR1_IC1F_Msk


	)

4098 
	#TIM_CCMR1_IC1F_0
 (0x1UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4099 
	#TIM_CCMR1_IC1F_1
 (0x2UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4100 
	#TIM_CCMR1_IC1F_2
 (0x4UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4101 
	#TIM_CCMR1_IC1F_3
 (0x8UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4103 
	#TIM_CCMR1_IC2PSC_Pos
 (10U)

	)

4104 
	#TIM_CCMR1_IC2PSC_Msk
 (0x3UL << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

4105 
	#TIM_CCMR1_IC2PSC
 
TIM_CCMR1_IC2PSC_Msk


	)

4106 
	#TIM_CCMR1_IC2PSC_0
 (0x1UL << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

4107 
	#TIM_CCMR1_IC2PSC_1
 (0x2UL << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

4109 
	#TIM_CCMR1_IC2F_Pos
 (12U)

	)

4110 
	#TIM_CCMR1_IC2F_Msk
 (0xFUL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4111 
	#TIM_CCMR1_IC2F
 
TIM_CCMR1_IC2F_Msk


	)

4112 
	#TIM_CCMR1_IC2F_0
 (0x1UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4113 
	#TIM_CCMR1_IC2F_1
 (0x2UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4114 
	#TIM_CCMR1_IC2F_2
 (0x4UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4115 
	#TIM_CCMR1_IC2F_3
 (0x8UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4118 
	#TIM_CCMR2_CC3S_Pos
 (0U)

	)

4119 
	#TIM_CCMR2_CC3S_Msk
 (0x3UL << 
TIM_CCMR2_CC3S_Pos
Ë

	)

4120 
	#TIM_CCMR2_CC3S
 
TIM_CCMR2_CC3S_Msk


	)

4121 
	#TIM_CCMR2_CC3S_0
 (0x1UL << 
TIM_CCMR2_CC3S_Pos
Ë

	)

4122 
	#TIM_CCMR2_CC3S_1
 (0x2UL << 
TIM_CCMR2_CC3S_Pos
Ë

	)

4124 
	#TIM_CCMR2_OC3FE_Pos
 (2U)

	)

4125 
	#TIM_CCMR2_OC3FE_Msk
 (0x1UL << 
TIM_CCMR2_OC3FE_Pos
Ë

	)

4126 
	#TIM_CCMR2_OC3FE
 
TIM_CCMR2_OC3FE_Msk


	)

4127 
	#TIM_CCMR2_OC3PE_Pos
 (3U)

	)

4128 
	#TIM_CCMR2_OC3PE_Msk
 (0x1UL << 
TIM_CCMR2_OC3PE_Pos
Ë

	)

4129 
	#TIM_CCMR2_OC3PE
 
TIM_CCMR2_OC3PE_Msk


	)

4131 
	#TIM_CCMR2_OC3M_Pos
 (4U)

	)

4132 
	#TIM_CCMR2_OC3M_Msk
 (0x7UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4133 
	#TIM_CCMR2_OC3M
 
TIM_CCMR2_OC3M_Msk


	)

4134 
	#TIM_CCMR2_OC3M_0
 (0x1UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4135 
	#TIM_CCMR2_OC3M_1
 (0x2UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4136 
	#TIM_CCMR2_OC3M_2
 (0x4UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4138 
	#TIM_CCMR2_OC3CE_Pos
 (7U)

	)

4139 
	#TIM_CCMR2_OC3CE_Msk
 (0x1UL << 
TIM_CCMR2_OC3CE_Pos
Ë

	)

4140 
	#TIM_CCMR2_OC3CE
 
TIM_CCMR2_OC3CE_Msk


	)

4142 
	#TIM_CCMR2_CC4S_Pos
 (8U)

	)

4143 
	#TIM_CCMR2_CC4S_Msk
 (0x3UL << 
TIM_CCMR2_CC4S_Pos
Ë

	)

4144 
	#TIM_CCMR2_CC4S
 
TIM_CCMR2_CC4S_Msk


	)

4145 
	#TIM_CCMR2_CC4S_0
 (0x1UL << 
TIM_CCMR2_CC4S_Pos
Ë

	)

4146 
	#TIM_CCMR2_CC4S_1
 (0x2UL << 
TIM_CCMR2_CC4S_Pos
Ë

	)

4148 
	#TIM_CCMR2_OC4FE_Pos
 (10U)

	)

4149 
	#TIM_CCMR2_OC4FE_Msk
 (0x1UL << 
TIM_CCMR2_OC4FE_Pos
Ë

	)

4150 
	#TIM_CCMR2_OC4FE
 
TIM_CCMR2_OC4FE_Msk


	)

4151 
	#TIM_CCMR2_OC4PE_Pos
 (11U)

	)

4152 
	#TIM_CCMR2_OC4PE_Msk
 (0x1UL << 
TIM_CCMR2_OC4PE_Pos
Ë

	)

4153 
	#TIM_CCMR2_OC4PE
 
TIM_CCMR2_OC4PE_Msk


	)

4155 
	#TIM_CCMR2_OC4M_Pos
 (12U)

	)

4156 
	#TIM_CCMR2_OC4M_Msk
 (0x7UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4157 
	#TIM_CCMR2_OC4M
 
TIM_CCMR2_OC4M_Msk


	)

4158 
	#TIM_CCMR2_OC4M_0
 (0x1UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4159 
	#TIM_CCMR2_OC4M_1
 (0x2UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4160 
	#TIM_CCMR2_OC4M_2
 (0x4UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4162 
	#TIM_CCMR2_OC4CE_Pos
 (15U)

	)

4163 
	#TIM_CCMR2_OC4CE_Msk
 (0x1UL << 
TIM_CCMR2_OC4CE_Pos
Ë

	)

4164 
	#TIM_CCMR2_OC4CE
 
TIM_CCMR2_OC4CE_Msk


	)

4168 
	#TIM_CCMR2_IC3PSC_Pos
 (2U)

	)

4169 
	#TIM_CCMR2_IC3PSC_Msk
 (0x3UL << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

4170 
	#TIM_CCMR2_IC3PSC
 
TIM_CCMR2_IC3PSC_Msk


	)

4171 
	#TIM_CCMR2_IC3PSC_0
 (0x1UL << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

4172 
	#TIM_CCMR2_IC3PSC_1
 (0x2UL << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

4174 
	#TIM_CCMR2_IC3F_Pos
 (4U)

	)

4175 
	#TIM_CCMR2_IC3F_Msk
 (0xFUL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4176 
	#TIM_CCMR2_IC3F
 
TIM_CCMR2_IC3F_Msk


	)

4177 
	#TIM_CCMR2_IC3F_0
 (0x1UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4178 
	#TIM_CCMR2_IC3F_1
 (0x2UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4179 
	#TIM_CCMR2_IC3F_2
 (0x4UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4180 
	#TIM_CCMR2_IC3F_3
 (0x8UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4182 
	#TIM_CCMR2_IC4PSC_Pos
 (10U)

	)

4183 
	#TIM_CCMR2_IC4PSC_Msk
 (0x3UL << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

4184 
	#TIM_CCMR2_IC4PSC
 
TIM_CCMR2_IC4PSC_Msk


	)

4185 
	#TIM_CCMR2_IC4PSC_0
 (0x1UL << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

4186 
	#TIM_CCMR2_IC4PSC_1
 (0x2UL << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

4188 
	#TIM_CCMR2_IC4F_Pos
 (12U)

	)

4189 
	#TIM_CCMR2_IC4F_Msk
 (0xFUL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4190 
	#TIM_CCMR2_IC4F
 
TIM_CCMR2_IC4F_Msk


	)

4191 
	#TIM_CCMR2_IC4F_0
 (0x1UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4192 
	#TIM_CCMR2_IC4F_1
 (0x2UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4193 
	#TIM_CCMR2_IC4F_2
 (0x4UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4194 
	#TIM_CCMR2_IC4F_3
 (0x8UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4197 
	#TIM_CCER_CC1E_Pos
 (0U)

	)

4198 
	#TIM_CCER_CC1E_Msk
 (0x1UL << 
TIM_CCER_CC1E_Pos
Ë

	)

4199 
	#TIM_CCER_CC1E
 
TIM_CCER_CC1E_Msk


	)

4200 
	#TIM_CCER_CC1P_Pos
 (1U)

	)

4201 
	#TIM_CCER_CC1P_Msk
 (0x1UL << 
TIM_CCER_CC1P_Pos
Ë

	)

4202 
	#TIM_CCER_CC1P
 
TIM_CCER_CC1P_Msk


	)

4203 
	#TIM_CCER_CC1NE_Pos
 (2U)

	)

4204 
	#TIM_CCER_CC1NE_Msk
 (0x1UL << 
TIM_CCER_CC1NE_Pos
Ë

	)

4205 
	#TIM_CCER_CC1NE
 
TIM_CCER_CC1NE_Msk


	)

4206 
	#TIM_CCER_CC1NP_Pos
 (3U)

	)

4207 
	#TIM_CCER_CC1NP_Msk
 (0x1UL << 
TIM_CCER_CC1NP_Pos
Ë

	)

4208 
	#TIM_CCER_CC1NP
 
TIM_CCER_CC1NP_Msk


	)

4209 
	#TIM_CCER_CC2E_Pos
 (4U)

	)

4210 
	#TIM_CCER_CC2E_Msk
 (0x1UL << 
TIM_CCER_CC2E_Pos
Ë

	)

4211 
	#TIM_CCER_CC2E
 
TIM_CCER_CC2E_Msk


	)

4212 
	#TIM_CCER_CC2P_Pos
 (5U)

	)

4213 
	#TIM_CCER_CC2P_Msk
 (0x1UL << 
TIM_CCER_CC2P_Pos
Ë

	)

4214 
	#TIM_CCER_CC2P
 
TIM_CCER_CC2P_Msk


	)

4215 
	#TIM_CCER_CC2NE_Pos
 (6U)

	)

4216 
	#TIM_CCER_CC2NE_Msk
 (0x1UL << 
TIM_CCER_CC2NE_Pos
Ë

	)

4217 
	#TIM_CCER_CC2NE
 
TIM_CCER_CC2NE_Msk


	)

4218 
	#TIM_CCER_CC2NP_Pos
 (7U)

	)

4219 
	#TIM_CCER_CC2NP_Msk
 (0x1UL << 
TIM_CCER_CC2NP_Pos
Ë

	)

4220 
	#TIM_CCER_CC2NP
 
TIM_CCER_CC2NP_Msk


	)

4221 
	#TIM_CCER_CC3E_Pos
 (8U)

	)

4222 
	#TIM_CCER_CC3E_Msk
 (0x1UL << 
TIM_CCER_CC3E_Pos
Ë

	)

4223 
	#TIM_CCER_CC3E
 
TIM_CCER_CC3E_Msk


	)

4224 
	#TIM_CCER_CC3P_Pos
 (9U)

	)

4225 
	#TIM_CCER_CC3P_Msk
 (0x1UL << 
TIM_CCER_CC3P_Pos
Ë

	)

4226 
	#TIM_CCER_CC3P
 
TIM_CCER_CC3P_Msk


	)

4227 
	#TIM_CCER_CC3NE_Pos
 (10U)

	)

4228 
	#TIM_CCER_CC3NE_Msk
 (0x1UL << 
TIM_CCER_CC3NE_Pos
Ë

	)

4229 
	#TIM_CCER_CC3NE
 
TIM_CCER_CC3NE_Msk


	)

4230 
	#TIM_CCER_CC3NP_Pos
 (11U)

	)

4231 
	#TIM_CCER_CC3NP_Msk
 (0x1UL << 
TIM_CCER_CC3NP_Pos
Ë

	)

4232 
	#TIM_CCER_CC3NP
 
TIM_CCER_CC3NP_Msk


	)

4233 
	#TIM_CCER_CC4E_Pos
 (12U)

	)

4234 
	#TIM_CCER_CC4E_Msk
 (0x1UL << 
TIM_CCER_CC4E_Pos
Ë

	)

4235 
	#TIM_CCER_CC4E
 
TIM_CCER_CC4E_Msk


	)

4236 
	#TIM_CCER_CC4P_Pos
 (13U)

	)

4237 
	#TIM_CCER_CC4P_Msk
 (0x1UL << 
TIM_CCER_CC4P_Pos
Ë

	)

4238 
	#TIM_CCER_CC4P
 
TIM_CCER_CC4P_Msk


	)

4241 
	#TIM_CNT_CNT_Pos
 (0U)

	)

4242 
	#TIM_CNT_CNT_Msk
 (0xFFFFFFFFUL << 
TIM_CNT_CNT_Pos
Ë

	)

4243 
	#TIM_CNT_CNT
 
TIM_CNT_CNT_Msk


	)

4246 
	#TIM_PSC_PSC_Pos
 (0U)

	)

4247 
	#TIM_PSC_PSC_Msk
 (0xFFFFUL << 
TIM_PSC_PSC_Pos
Ë

	)

4248 
	#TIM_PSC_PSC
 
TIM_PSC_PSC_Msk


	)

4251 
	#TIM_ARR_ARR_Pos
 (0U)

	)

4252 
	#TIM_ARR_ARR_Msk
 (0xFFFFFFFFUL << 
TIM_ARR_ARR_Pos
Ë

	)

4253 
	#TIM_ARR_ARR
 
TIM_ARR_ARR_Msk


	)

4256 
	#TIM_RCR_REP_Pos
 (0U)

	)

4257 
	#TIM_RCR_REP_Msk
 (0xFFUL << 
TIM_RCR_REP_Pos
Ë

	)

4258 
	#TIM_RCR_REP
 
TIM_RCR_REP_Msk


	)

4261 
	#TIM_CCR1_CCR1_Pos
 (0U)

	)

4262 
	#TIM_CCR1_CCR1_Msk
 (0xFFFFUL << 
TIM_CCR1_CCR1_Pos
Ë

	)

4263 
	#TIM_CCR1_CCR1
 
TIM_CCR1_CCR1_Msk


	)

4266 
	#TIM_CCR2_CCR2_Pos
 (0U)

	)

4267 
	#TIM_CCR2_CCR2_Msk
 (0xFFFFUL << 
TIM_CCR2_CCR2_Pos
Ë

	)

4268 
	#TIM_CCR2_CCR2
 
TIM_CCR2_CCR2_Msk


	)

4271 
	#TIM_CCR3_CCR3_Pos
 (0U)

	)

4272 
	#TIM_CCR3_CCR3_Msk
 (0xFFFFUL << 
TIM_CCR3_CCR3_Pos
Ë

	)

4273 
	#TIM_CCR3_CCR3
 
TIM_CCR3_CCR3_Msk


	)

4276 
	#TIM_CCR4_CCR4_Pos
 (0U)

	)

4277 
	#TIM_CCR4_CCR4_Msk
 (0xFFFFUL << 
TIM_CCR4_CCR4_Pos
Ë

	)

4278 
	#TIM_CCR4_CCR4
 
TIM_CCR4_CCR4_Msk


	)

4281 
	#TIM_BDTR_DTG_Pos
 (0U)

	)

4282 
	#TIM_BDTR_DTG_Msk
 (0xFFUL << 
TIM_BDTR_DTG_Pos
Ë

	)

4283 
	#TIM_BDTR_DTG
 
TIM_BDTR_DTG_Msk


	)

4284 
	#TIM_BDTR_DTG_0
 (0x01UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4285 
	#TIM_BDTR_DTG_1
 (0x02UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4286 
	#TIM_BDTR_DTG_2
 (0x04UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4287 
	#TIM_BDTR_DTG_3
 (0x08UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4288 
	#TIM_BDTR_DTG_4
 (0x10UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4289 
	#TIM_BDTR_DTG_5
 (0x20UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4290 
	#TIM_BDTR_DTG_6
 (0x40UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4291 
	#TIM_BDTR_DTG_7
 (0x80UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4293 
	#TIM_BDTR_LOCK_Pos
 (8U)

	)

4294 
	#TIM_BDTR_LOCK_Msk
 (0x3UL << 
TIM_BDTR_LOCK_Pos
Ë

	)

4295 
	#TIM_BDTR_LOCK
 
TIM_BDTR_LOCK_Msk


	)

4296 
	#TIM_BDTR_LOCK_0
 (0x1UL << 
TIM_BDTR_LOCK_Pos
Ë

	)

4297 
	#TIM_BDTR_LOCK_1
 (0x2UL << 
TIM_BDTR_LOCK_Pos
Ë

	)

4299 
	#TIM_BDTR_OSSI_Pos
 (10U)

	)

4300 
	#TIM_BDTR_OSSI_Msk
 (0x1UL << 
TIM_BDTR_OSSI_Pos
Ë

	)

4301 
	#TIM_BDTR_OSSI
 
TIM_BDTR_OSSI_Msk


	)

4302 
	#TIM_BDTR_OSSR_Pos
 (11U)

	)

4303 
	#TIM_BDTR_OSSR_Msk
 (0x1UL << 
TIM_BDTR_OSSR_Pos
Ë

	)

4304 
	#TIM_BDTR_OSSR
 
TIM_BDTR_OSSR_Msk


	)

4305 
	#TIM_BDTR_BKE_Pos
 (12U)

	)

4306 
	#TIM_BDTR_BKE_Msk
 (0x1UL << 
TIM_BDTR_BKE_Pos
Ë

	)

4307 
	#TIM_BDTR_BKE
 
TIM_BDTR_BKE_Msk


	)

4308 
	#TIM_BDTR_BKP_Pos
 (13U)

	)

4309 
	#TIM_BDTR_BKP_Msk
 (0x1UL << 
TIM_BDTR_BKP_Pos
Ë

	)

4310 
	#TIM_BDTR_BKP
 
TIM_BDTR_BKP_Msk


	)

4311 
	#TIM_BDTR_AOE_Pos
 (14U)

	)

4312 
	#TIM_BDTR_AOE_Msk
 (0x1UL << 
TIM_BDTR_AOE_Pos
Ë

	)

4313 
	#TIM_BDTR_AOE
 
TIM_BDTR_AOE_Msk


	)

4314 
	#TIM_BDTR_MOE_Pos
 (15U)

	)

4315 
	#TIM_BDTR_MOE_Msk
 (0x1UL << 
TIM_BDTR_MOE_Pos
Ë

	)

4316 
	#TIM_BDTR_MOE
 
TIM_BDTR_MOE_Msk


	)

4319 
	#TIM_DCR_DBA_Pos
 (0U)

	)

4320 
	#TIM_DCR_DBA_Msk
 (0x1FUL << 
TIM_DCR_DBA_Pos
Ë

	)

4321 
	#TIM_DCR_DBA
 
TIM_DCR_DBA_Msk


	)

4322 
	#TIM_DCR_DBA_0
 (0x01UL << 
TIM_DCR_DBA_Pos
Ë

	)

4323 
	#TIM_DCR_DBA_1
 (0x02UL << 
TIM_DCR_DBA_Pos
Ë

	)

4324 
	#TIM_DCR_DBA_2
 (0x04UL << 
TIM_DCR_DBA_Pos
Ë

	)

4325 
	#TIM_DCR_DBA_3
 (0x08UL << 
TIM_DCR_DBA_Pos
Ë

	)

4326 
	#TIM_DCR_DBA_4
 (0x10UL << 
TIM_DCR_DBA_Pos
Ë

	)

4328 
	#TIM_DCR_DBL_Pos
 (8U)

	)

4329 
	#TIM_DCR_DBL_Msk
 (0x1FUL << 
TIM_DCR_DBL_Pos
Ë

	)

4330 
	#TIM_DCR_DBL
 
TIM_DCR_DBL_Msk


	)

4331 
	#TIM_DCR_DBL_0
 (0x01UL << 
TIM_DCR_DBL_Pos
Ë

	)

4332 
	#TIM_DCR_DBL_1
 (0x02UL << 
TIM_DCR_DBL_Pos
Ë

	)

4333 
	#TIM_DCR_DBL_2
 (0x04UL << 
TIM_DCR_DBL_Pos
Ë

	)

4334 
	#TIM_DCR_DBL_3
 (0x08UL << 
TIM_DCR_DBL_Pos
Ë

	)

4335 
	#TIM_DCR_DBL_4
 (0x10UL << 
TIM_DCR_DBL_Pos
Ë

	)

4338 
	#TIM_DMAR_DMAB_Pos
 (0U)

	)

4339 
	#TIM_DMAR_DMAB_Msk
 (0xFFFFUL << 
TIM_DMAR_DMAB_Pos
Ë

	)

4340 
	#TIM_DMAR_DMAB
 
TIM_DMAR_DMAB_Msk


	)

4349 
	#RTC_CRH_SECIE_Pos
 (0U)

	)

4350 
	#RTC_CRH_SECIE_Msk
 (0x1UL << 
RTC_CRH_SECIE_Pos
Ë

	)

4351 
	#RTC_CRH_SECIE
 
RTC_CRH_SECIE_Msk


	)

4352 
	#RTC_CRH_ALRIE_Pos
 (1U)

	)

4353 
	#RTC_CRH_ALRIE_Msk
 (0x1UL << 
RTC_CRH_ALRIE_Pos
Ë

	)

4354 
	#RTC_CRH_ALRIE
 
RTC_CRH_ALRIE_Msk


	)

4355 
	#RTC_CRH_OWIE_Pos
 (2U)

	)

4356 
	#RTC_CRH_OWIE_Msk
 (0x1UL << 
RTC_CRH_OWIE_Pos
Ë

	)

4357 
	#RTC_CRH_OWIE
 
RTC_CRH_OWIE_Msk


	)

4360 
	#RTC_CRL_SECF_Pos
 (0U)

	)

4361 
	#RTC_CRL_SECF_Msk
 (0x1UL << 
RTC_CRL_SECF_Pos
Ë

	)

4362 
	#RTC_CRL_SECF
 
RTC_CRL_SECF_Msk


	)

4363 
	#RTC_CRL_ALRF_Pos
 (1U)

	)

4364 
	#RTC_CRL_ALRF_Msk
 (0x1UL << 
RTC_CRL_ALRF_Pos
Ë

	)

4365 
	#RTC_CRL_ALRF
 
RTC_CRL_ALRF_Msk


	)

4366 
	#RTC_CRL_OWF_Pos
 (2U)

	)

4367 
	#RTC_CRL_OWF_Msk
 (0x1UL << 
RTC_CRL_OWF_Pos
Ë

	)

4368 
	#RTC_CRL_OWF
 
RTC_CRL_OWF_Msk


	)

4369 
	#RTC_CRL_RSF_Pos
 (3U)

	)

4370 
	#RTC_CRL_RSF_Msk
 (0x1UL << 
RTC_CRL_RSF_Pos
Ë

	)

4371 
	#RTC_CRL_RSF
 
RTC_CRL_RSF_Msk


	)

4372 
	#RTC_CRL_CNF_Pos
 (4U)

	)

4373 
	#RTC_CRL_CNF_Msk
 (0x1UL << 
RTC_CRL_CNF_Pos
Ë

	)

4374 
	#RTC_CRL_CNF
 
RTC_CRL_CNF_Msk


	)

4375 
	#RTC_CRL_RTOFF_Pos
 (5U)

	)

4376 
	#RTC_CRL_RTOFF_Msk
 (0x1UL << 
RTC_CRL_RTOFF_Pos
Ë

	)

4377 
	#RTC_CRL_RTOFF
 
RTC_CRL_RTOFF_Msk


	)

4380 
	#RTC_PRLH_PRL_Pos
 (0U)

	)

4381 
	#RTC_PRLH_PRL_Msk
 (0xFUL << 
RTC_PRLH_PRL_Pos
Ë

	)

4382 
	#RTC_PRLH_PRL
 
RTC_PRLH_PRL_Msk


	)

4385 
	#RTC_PRLL_PRL_Pos
 (0U)

	)

4386 
	#RTC_PRLL_PRL_Msk
 (0xFFFFUL << 
RTC_PRLL_PRL_Pos
Ë

	)

4387 
	#RTC_PRLL_PRL
 
RTC_PRLL_PRL_Msk


	)

4390 
	#RTC_DIVH_RTC_DIV_Pos
 (0U)

	)

4391 
	#RTC_DIVH_RTC_DIV_Msk
 (0xFUL << 
RTC_DIVH_RTC_DIV_Pos
Ë

	)

4392 
	#RTC_DIVH_RTC_DIV
 
RTC_DIVH_RTC_DIV_Msk


	)

4395 
	#RTC_DIVL_RTC_DIV_Pos
 (0U)

	)

4396 
	#RTC_DIVL_RTC_DIV_Msk
 (0xFFFFUL << 
RTC_DIVL_RTC_DIV_Pos
Ë

	)

4397 
	#RTC_DIVL_RTC_DIV
 
RTC_DIVL_RTC_DIV_Msk


	)

4400 
	#RTC_CNTH_RTC_CNT_Pos
 (0U)

	)

4401 
	#RTC_CNTH_RTC_CNT_Msk
 (0xFFFFUL << 
RTC_CNTH_RTC_CNT_Pos
Ë

	)

4402 
	#RTC_CNTH_RTC_CNT
 
RTC_CNTH_RTC_CNT_Msk


	)

4405 
	#RTC_CNTL_RTC_CNT_Pos
 (0U)

	)

4406 
	#RTC_CNTL_RTC_CNT_Msk
 (0xFFFFUL << 
RTC_CNTL_RTC_CNT_Pos
Ë

	)

4407 
	#RTC_CNTL_RTC_CNT
 
RTC_CNTL_RTC_CNT_Msk


	)

4410 
	#RTC_ALRH_RTC_ALR_Pos
 (0U)

	)

4411 
	#RTC_ALRH_RTC_ALR_Msk
 (0xFFFFUL << 
RTC_ALRH_RTC_ALR_Pos
Ë

	)

4412 
	#RTC_ALRH_RTC_ALR
 
RTC_ALRH_RTC_ALR_Msk


	)

4415 
	#RTC_ALRL_RTC_ALR_Pos
 (0U)

	)

4416 
	#RTC_ALRL_RTC_ALR_Msk
 (0xFFFFUL << 
RTC_ALRL_RTC_ALR_Pos
Ë

	)

4417 
	#RTC_ALRL_RTC_ALR
 
RTC_ALRL_RTC_ALR_Msk


	)

4426 
	#IWDG_KR_KEY_Pos
 (0U)

	)

4427 
	#IWDG_KR_KEY_Msk
 (0xFFFFUL << 
IWDG_KR_KEY_Pos
Ë

	)

4428 
	#IWDG_KR_KEY
 
IWDG_KR_KEY_Msk


	)

4431 
	#IWDG_PR_PR_Pos
 (0U)

	)

4432 
	#IWDG_PR_PR_Msk
 (0x7UL << 
IWDG_PR_PR_Pos
Ë

	)

4433 
	#IWDG_PR_PR
 
IWDG_PR_PR_Msk


	)

4434 
	#IWDG_PR_PR_0
 (0x1UL << 
IWDG_PR_PR_Pos
Ë

	)

4435 
	#IWDG_PR_PR_1
 (0x2UL << 
IWDG_PR_PR_Pos
Ë

	)

4436 
	#IWDG_PR_PR_2
 (0x4UL << 
IWDG_PR_PR_Pos
Ë

	)

4439 
	#IWDG_RLR_RL_Pos
 (0U)

	)

4440 
	#IWDG_RLR_RL_Msk
 (0xFFFUL << 
IWDG_RLR_RL_Pos
Ë

	)

4441 
	#IWDG_RLR_RL
 
IWDG_RLR_RL_Msk


	)

4444 
	#IWDG_SR_PVU_Pos
 (0U)

	)

4445 
	#IWDG_SR_PVU_Msk
 (0x1UL << 
IWDG_SR_PVU_Pos
Ë

	)

4446 
	#IWDG_SR_PVU
 
IWDG_SR_PVU_Msk


	)

4447 
	#IWDG_SR_RVU_Pos
 (1U)

	)

4448 
	#IWDG_SR_RVU_Msk
 (0x1UL << 
IWDG_SR_RVU_Pos
Ë

	)

4449 
	#IWDG_SR_RVU
 
IWDG_SR_RVU_Msk


	)

4458 
	#WWDG_CR_T_Pos
 (0U)

	)

4459 
	#WWDG_CR_T_Msk
 (0x7FUL << 
WWDG_CR_T_Pos
Ë

	)

4460 
	#WWDG_CR_T
 
WWDG_CR_T_Msk


	)

4461 
	#WWDG_CR_T_0
 (0x01UL << 
WWDG_CR_T_Pos
Ë

	)

4462 
	#WWDG_CR_T_1
 (0x02UL << 
WWDG_CR_T_Pos
Ë

	)

4463 
	#WWDG_CR_T_2
 (0x04UL << 
WWDG_CR_T_Pos
Ë

	)

4464 
	#WWDG_CR_T_3
 (0x08UL << 
WWDG_CR_T_Pos
Ë

	)

4465 
	#WWDG_CR_T_4
 (0x10UL << 
WWDG_CR_T_Pos
Ë

	)

4466 
	#WWDG_CR_T_5
 (0x20UL << 
WWDG_CR_T_Pos
Ë

	)

4467 
	#WWDG_CR_T_6
 (0x40UL << 
WWDG_CR_T_Pos
Ë

	)

4470 
	#WWDG_CR_T0
 
WWDG_CR_T_0


	)

4471 
	#WWDG_CR_T1
 
WWDG_CR_T_1


	)

4472 
	#WWDG_CR_T2
 
WWDG_CR_T_2


	)

4473 
	#WWDG_CR_T3
 
WWDG_CR_T_3


	)

4474 
	#WWDG_CR_T4
 
WWDG_CR_T_4


	)

4475 
	#WWDG_CR_T5
 
WWDG_CR_T_5


	)

4476 
	#WWDG_CR_T6
 
WWDG_CR_T_6


	)

4478 
	#WWDG_CR_WDGA_Pos
 (7U)

	)

4479 
	#WWDG_CR_WDGA_Msk
 (0x1UL << 
WWDG_CR_WDGA_Pos
Ë

	)

4480 
	#WWDG_CR_WDGA
 
WWDG_CR_WDGA_Msk


	)

4483 
	#WWDG_CFR_W_Pos
 (0U)

	)

4484 
	#WWDG_CFR_W_Msk
 (0x7FUL << 
WWDG_CFR_W_Pos
Ë

	)

4485 
	#WWDG_CFR_W
 
WWDG_CFR_W_Msk


	)

4486 
	#WWDG_CFR_W_0
 (0x01UL << 
WWDG_CFR_W_Pos
Ë

	)

4487 
	#WWDG_CFR_W_1
 (0x02UL << 
WWDG_CFR_W_Pos
Ë

	)

4488 
	#WWDG_CFR_W_2
 (0x04UL << 
WWDG_CFR_W_Pos
Ë

	)

4489 
	#WWDG_CFR_W_3
 (0x08UL << 
WWDG_CFR_W_Pos
Ë

	)

4490 
	#WWDG_CFR_W_4
 (0x10UL << 
WWDG_CFR_W_Pos
Ë

	)

4491 
	#WWDG_CFR_W_5
 (0x20UL << 
WWDG_CFR_W_Pos
Ë

	)

4492 
	#WWDG_CFR_W_6
 (0x40UL << 
WWDG_CFR_W_Pos
Ë

	)

4495 
	#WWDG_CFR_W0
 
WWDG_CFR_W_0


	)

4496 
	#WWDG_CFR_W1
 
WWDG_CFR_W_1


	)

4497 
	#WWDG_CFR_W2
 
WWDG_CFR_W_2


	)

4498 
	#WWDG_CFR_W3
 
WWDG_CFR_W_3


	)

4499 
	#WWDG_CFR_W4
 
WWDG_CFR_W_4


	)

4500 
	#WWDG_CFR_W5
 
WWDG_CFR_W_5


	)

4501 
	#WWDG_CFR_W6
 
WWDG_CFR_W_6


	)

4503 
	#WWDG_CFR_WDGTB_Pos
 (7U)

	)

4504 
	#WWDG_CFR_WDGTB_Msk
 (0x3UL << 
WWDG_CFR_WDGTB_Pos
Ë

	)

4505 
	#WWDG_CFR_WDGTB
 
WWDG_CFR_WDGTB_Msk


	)

4506 
	#WWDG_CFR_WDGTB_0
 (0x1UL << 
WWDG_CFR_WDGTB_Pos
Ë

	)

4507 
	#WWDG_CFR_WDGTB_1
 (0x2UL << 
WWDG_CFR_WDGTB_Pos
Ë

	)

4510 
	#WWDG_CFR_WDGTB0
 
WWDG_CFR_WDGTB_0


	)

4511 
	#WWDG_CFR_WDGTB1
 
WWDG_CFR_WDGTB_1


	)

4513 
	#WWDG_CFR_EWI_Pos
 (9U)

	)

4514 
	#WWDG_CFR_EWI_Msk
 (0x1UL << 
WWDG_CFR_EWI_Pos
Ë

	)

4515 
	#WWDG_CFR_EWI
 
WWDG_CFR_EWI_Msk


	)

4518 
	#WWDG_SR_EWIF_Pos
 (0U)

	)

4519 
	#WWDG_SR_EWIF_Msk
 (0x1UL << 
WWDG_SR_EWIF_Pos
Ë

	)

4520 
	#WWDG_SR_EWIF
 
WWDG_SR_EWIF_Msk


	)

4529 
	#USB_EP0R
 
USB_BASE


	)

4530 
	#USB_EP1R
 (
USB_BASE
 + 0x00000004Ë

	)

4531 
	#USB_EP2R
 (
USB_BASE
 + 0x00000008Ë

	)

4532 
	#USB_EP3R
 (
USB_BASE
 + 0x0000000CË

	)

4533 
	#USB_EP4R
 (
USB_BASE
 + 0x00000010Ë

	)

4534 
	#USB_EP5R
 (
USB_BASE
 + 0x00000014Ë

	)

4535 
	#USB_EP6R
 (
USB_BASE
 + 0x00000018Ë

	)

4536 
	#USB_EP7R
 (
USB_BASE
 + 0x0000001CË

	)

4539 
	#USB_EP_CTR_RX_Pos
 (15U)

	)

4540 
	#USB_EP_CTR_RX_Msk
 (0x1UL << 
USB_EP_CTR_RX_Pos
Ë

	)

4541 
	#USB_EP_CTR_RX
 
USB_EP_CTR_RX_Msk


	)

4542 
	#USB_EP_DTOG_RX_Pos
 (14U)

	)

4543 
	#USB_EP_DTOG_RX_Msk
 (0x1UL << 
USB_EP_DTOG_RX_Pos
Ë

	)

4544 
	#USB_EP_DTOG_RX
 
USB_EP_DTOG_RX_Msk


	)

4545 
	#USB_EPRX_STAT_Pos
 (12U)

	)

4546 
	#USB_EPRX_STAT_Msk
 (0x3UL << 
USB_EPRX_STAT_Pos
Ë

	)

4547 
	#USB_EPRX_STAT
 
USB_EPRX_STAT_Msk


	)

4548 
	#USB_EP_SETUP_Pos
 (11U)

	)

4549 
	#USB_EP_SETUP_Msk
 (0x1UL << 
USB_EP_SETUP_Pos
Ë

	)

4550 
	#USB_EP_SETUP
 
USB_EP_SETUP_Msk


	)

4551 
	#USB_EP_T_FIELD_Pos
 (9U)

	)

4552 
	#USB_EP_T_FIELD_Msk
 (0x3UL << 
USB_EP_T_FIELD_Pos
Ë

	)

4553 
	#USB_EP_T_FIELD
 
USB_EP_T_FIELD_Msk


	)

4554 
	#USB_EP_KIND_Pos
 (8U)

	)

4555 
	#USB_EP_KIND_Msk
 (0x1UL << 
USB_EP_KIND_Pos
Ë

	)

4556 
	#USB_EP_KIND
 
USB_EP_KIND_Msk


	)

4557 
	#USB_EP_CTR_TX_Pos
 (7U)

	)

4558 
	#USB_EP_CTR_TX_Msk
 (0x1UL << 
USB_EP_CTR_TX_Pos
Ë

	)

4559 
	#USB_EP_CTR_TX
 
USB_EP_CTR_TX_Msk


	)

4560 
	#USB_EP_DTOG_TX_Pos
 (6U)

	)

4561 
	#USB_EP_DTOG_TX_Msk
 (0x1UL << 
USB_EP_DTOG_TX_Pos
Ë

	)

4562 
	#USB_EP_DTOG_TX
 
USB_EP_DTOG_TX_Msk


	)

4563 
	#USB_EPTX_STAT_Pos
 (4U)

	)

4564 
	#USB_EPTX_STAT_Msk
 (0x3UL << 
USB_EPTX_STAT_Pos
Ë

	)

4565 
	#USB_EPTX_STAT
 
USB_EPTX_STAT_Msk


	)

4566 
	#USB_EPADDR_FIELD_Pos
 (0U)

	)

4567 
	#USB_EPADDR_FIELD_Msk
 (0xFUL << 
USB_EPADDR_FIELD_Pos
Ë

	)

4568 
	#USB_EPADDR_FIELD
 
USB_EPADDR_FIELD_Msk


	)

4571 
	#USB_EPREG_MASK
 (
USB_EP_CTR_RX
|
USB_EP_SETUP
|
USB_EP_T_FIELD
|
USB_EP_KIND
|
USB_EP_CTR_TX
|
USB_EPADDR_FIELD
)

	)

4573 
	#USB_EP_TYPE_MASK_Pos
 (9U)

	)

4574 
	#USB_EP_TYPE_MASK_Msk
 (0x3UL << 
USB_EP_TYPE_MASK_Pos
Ë

	)

4575 
	#USB_EP_TYPE_MASK
 
USB_EP_TYPE_MASK_Msk


	)

4576 
	#USB_EP_BULK
 0x00000000U

	)

4577 
	#USB_EP_CONTROL
 0x00000200U

	)

4578 
	#USB_EP_ISOCHRONOUS
 0x00000400U

	)

4579 
	#USB_EP_INTERRUPT
 0x00000600U

	)

4580 
	#USB_EP_T_MASK
 (~
USB_EP_T_FIELD
 & 
USB_EPREG_MASK
)

	)

4582 
	#USB_EPKIND_MASK
 (~
USB_EP_KIND
 & 
USB_EPREG_MASK
Ë

	)

4584 
	#USB_EP_TX_DIS
 0x00000000U

	)

4585 
	#USB_EP_TX_STALL
 0x00000010U

	)

4586 
	#USB_EP_TX_NAK
 0x00000020U

	)

4587 
	#USB_EP_TX_VALID
 0x00000030U

	)

4588 
	#USB_EPTX_DTOG1
 0x00000010U

	)

4589 
	#USB_EPTX_DTOG2
 0x00000020U

	)

4590 
	#USB_EPTX_DTOGMASK
 (
USB_EPTX_STAT
|
USB_EPREG_MASK
)

	)

4592 
	#USB_EP_RX_DIS
 0x00000000U

	)

4593 
	#USB_EP_RX_STALL
 0x00001000U

	)

4594 
	#USB_EP_RX_NAK
 0x00002000U

	)

4595 
	#USB_EP_RX_VALID
 0x00003000U

	)

4596 
	#USB_EPRX_DTOG1
 0x00001000U

	)

4597 
	#USB_EPRX_DTOG2
 0x00002000U

	)

4598 
	#USB_EPRX_DTOGMASK
 (
USB_EPRX_STAT
|
USB_EPREG_MASK
)

	)

4601 
	#USB_EP0R_EA_Pos
 (0U)

	)

4602 
	#USB_EP0R_EA_Msk
 (0xFUL << 
USB_EP0R_EA_Pos
Ë

	)

4603 
	#USB_EP0R_EA
 
USB_EP0R_EA_Msk


	)

4605 
	#USB_EP0R_STAT_TX_Pos
 (4U)

	)

4606 
	#USB_EP0R_STAT_TX_Msk
 (0x3UL << 
USB_EP0R_STAT_TX_Pos
Ë

	)

4607 
	#USB_EP0R_STAT_TX
 
USB_EP0R_STAT_TX_Msk


	)

4608 
	#USB_EP0R_STAT_TX_0
 (0x1UL << 
USB_EP0R_STAT_TX_Pos
Ë

	)

4609 
	#USB_EP0R_STAT_TX_1
 (0x2UL << 
USB_EP0R_STAT_TX_Pos
Ë

	)

4611 
	#USB_EP0R_DTOG_TX_Pos
 (6U)

	)

4612 
	#USB_EP0R_DTOG_TX_Msk
 (0x1UL << 
USB_EP0R_DTOG_TX_Pos
Ë

	)

4613 
	#USB_EP0R_DTOG_TX
 
USB_EP0R_DTOG_TX_Msk


	)

4614 
	#USB_EP0R_CTR_TX_Pos
 (7U)

	)

4615 
	#USB_EP0R_CTR_TX_Msk
 (0x1UL << 
USB_EP0R_CTR_TX_Pos
Ë

	)

4616 
	#USB_EP0R_CTR_TX
 
USB_EP0R_CTR_TX_Msk


	)

4617 
	#USB_EP0R_EP_KIND_Pos
 (8U)

	)

4618 
	#USB_EP0R_EP_KIND_Msk
 (0x1UL << 
USB_EP0R_EP_KIND_Pos
Ë

	)

4619 
	#USB_EP0R_EP_KIND
 
USB_EP0R_EP_KIND_Msk


	)

4621 
	#USB_EP0R_EP_TYPE_Pos
 (9U)

	)

4622 
	#USB_EP0R_EP_TYPE_Msk
 (0x3UL << 
USB_EP0R_EP_TYPE_Pos
Ë

	)

4623 
	#USB_EP0R_EP_TYPE
 
USB_EP0R_EP_TYPE_Msk


	)

4624 
	#USB_EP0R_EP_TYPE_0
 (0x1UL << 
USB_EP0R_EP_TYPE_Pos
Ë

	)

4625 
	#USB_EP0R_EP_TYPE_1
 (0x2UL << 
USB_EP0R_EP_TYPE_Pos
Ë

	)

4627 
	#USB_EP0R_SETUP_Pos
 (11U)

	)

4628 
	#USB_EP0R_SETUP_Msk
 (0x1UL << 
USB_EP0R_SETUP_Pos
Ë

	)

4629 
	#USB_EP0R_SETUP
 
USB_EP0R_SETUP_Msk


	)

4631 
	#USB_EP0R_STAT_RX_Pos
 (12U)

	)

4632 
	#USB_EP0R_STAT_RX_Msk
 (0x3UL << 
USB_EP0R_STAT_RX_Pos
Ë

	)

4633 
	#USB_EP0R_STAT_RX
 
USB_EP0R_STAT_RX_Msk


	)

4634 
	#USB_EP0R_STAT_RX_0
 (0x1UL << 
USB_EP0R_STAT_RX_Pos
Ë

	)

4635 
	#USB_EP0R_STAT_RX_1
 (0x2UL << 
USB_EP0R_STAT_RX_Pos
Ë

	)

4637 
	#USB_EP0R_DTOG_RX_Pos
 (14U)

	)

4638 
	#USB_EP0R_DTOG_RX_Msk
 (0x1UL << 
USB_EP0R_DTOG_RX_Pos
Ë

	)

4639 
	#USB_EP0R_DTOG_RX
 
USB_EP0R_DTOG_RX_Msk


	)

4640 
	#USB_EP0R_CTR_RX_Pos
 (15U)

	)

4641 
	#USB_EP0R_CTR_RX_Msk
 (0x1UL << 
USB_EP0R_CTR_RX_Pos
Ë

	)

4642 
	#USB_EP0R_CTR_RX
 
USB_EP0R_CTR_RX_Msk


	)

4645 
	#USB_EP1R_EA_Pos
 (0U)

	)

4646 
	#USB_EP1R_EA_Msk
 (0xFUL << 
USB_EP1R_EA_Pos
Ë

	)

4647 
	#USB_EP1R_EA
 
USB_EP1R_EA_Msk


	)

4649 
	#USB_EP1R_STAT_TX_Pos
 (4U)

	)

4650 
	#USB_EP1R_STAT_TX_Msk
 (0x3UL << 
USB_EP1R_STAT_TX_Pos
Ë

	)

4651 
	#USB_EP1R_STAT_TX
 
USB_EP1R_STAT_TX_Msk


	)

4652 
	#USB_EP1R_STAT_TX_0
 (0x1UL << 
USB_EP1R_STAT_TX_Pos
Ë

	)

4653 
	#USB_EP1R_STAT_TX_1
 (0x2UL << 
USB_EP1R_STAT_TX_Pos
Ë

	)

4655 
	#USB_EP1R_DTOG_TX_Pos
 (6U)

	)

4656 
	#USB_EP1R_DTOG_TX_Msk
 (0x1UL << 
USB_EP1R_DTOG_TX_Pos
Ë

	)

4657 
	#USB_EP1R_DTOG_TX
 
USB_EP1R_DTOG_TX_Msk


	)

4658 
	#USB_EP1R_CTR_TX_Pos
 (7U)

	)

4659 
	#USB_EP1R_CTR_TX_Msk
 (0x1UL << 
USB_EP1R_CTR_TX_Pos
Ë

	)

4660 
	#USB_EP1R_CTR_TX
 
USB_EP1R_CTR_TX_Msk


	)

4661 
	#USB_EP1R_EP_KIND_Pos
 (8U)

	)

4662 
	#USB_EP1R_EP_KIND_Msk
 (0x1UL << 
USB_EP1R_EP_KIND_Pos
Ë

	)

4663 
	#USB_EP1R_EP_KIND
 
USB_EP1R_EP_KIND_Msk


	)

4665 
	#USB_EP1R_EP_TYPE_Pos
 (9U)

	)

4666 
	#USB_EP1R_EP_TYPE_Msk
 (0x3UL << 
USB_EP1R_EP_TYPE_Pos
Ë

	)

4667 
	#USB_EP1R_EP_TYPE
 
USB_EP1R_EP_TYPE_Msk


	)

4668 
	#USB_EP1R_EP_TYPE_0
 (0x1UL << 
USB_EP1R_EP_TYPE_Pos
Ë

	)

4669 
	#USB_EP1R_EP_TYPE_1
 (0x2UL << 
USB_EP1R_EP_TYPE_Pos
Ë

	)

4671 
	#USB_EP1R_SETUP_Pos
 (11U)

	)

4672 
	#USB_EP1R_SETUP_Msk
 (0x1UL << 
USB_EP1R_SETUP_Pos
Ë

	)

4673 
	#USB_EP1R_SETUP
 
USB_EP1R_SETUP_Msk


	)

4675 
	#USB_EP1R_STAT_RX_Pos
 (12U)

	)

4676 
	#USB_EP1R_STAT_RX_Msk
 (0x3UL << 
USB_EP1R_STAT_RX_Pos
Ë

	)

4677 
	#USB_EP1R_STAT_RX
 
USB_EP1R_STAT_RX_Msk


	)

4678 
	#USB_EP1R_STAT_RX_0
 (0x1UL << 
USB_EP1R_STAT_RX_Pos
Ë

	)

4679 
	#USB_EP1R_STAT_RX_1
 (0x2UL << 
USB_EP1R_STAT_RX_Pos
Ë

	)

4681 
	#USB_EP1R_DTOG_RX_Pos
 (14U)

	)

4682 
	#USB_EP1R_DTOG_RX_Msk
 (0x1UL << 
USB_EP1R_DTOG_RX_Pos
Ë

	)

4683 
	#USB_EP1R_DTOG_RX
 
USB_EP1R_DTOG_RX_Msk


	)

4684 
	#USB_EP1R_CTR_RX_Pos
 (15U)

	)

4685 
	#USB_EP1R_CTR_RX_Msk
 (0x1UL << 
USB_EP1R_CTR_RX_Pos
Ë

	)

4686 
	#USB_EP1R_CTR_RX
 
USB_EP1R_CTR_RX_Msk


	)

4689 
	#USB_EP2R_EA_Pos
 (0U)

	)

4690 
	#USB_EP2R_EA_Msk
 (0xFUL << 
USB_EP2R_EA_Pos
Ë

	)

4691 
	#USB_EP2R_EA
 
USB_EP2R_EA_Msk


	)

4693 
	#USB_EP2R_STAT_TX_Pos
 (4U)

	)

4694 
	#USB_EP2R_STAT_TX_Msk
 (0x3UL << 
USB_EP2R_STAT_TX_Pos
Ë

	)

4695 
	#USB_EP2R_STAT_TX
 
USB_EP2R_STAT_TX_Msk


	)

4696 
	#USB_EP2R_STAT_TX_0
 (0x1UL << 
USB_EP2R_STAT_TX_Pos
Ë

	)

4697 
	#USB_EP2R_STAT_TX_1
 (0x2UL << 
USB_EP2R_STAT_TX_Pos
Ë

	)

4699 
	#USB_EP2R_DTOG_TX_Pos
 (6U)

	)

4700 
	#USB_EP2R_DTOG_TX_Msk
 (0x1UL << 
USB_EP2R_DTOG_TX_Pos
Ë

	)

4701 
	#USB_EP2R_DTOG_TX
 
USB_EP2R_DTOG_TX_Msk


	)

4702 
	#USB_EP2R_CTR_TX_Pos
 (7U)

	)

4703 
	#USB_EP2R_CTR_TX_Msk
 (0x1UL << 
USB_EP2R_CTR_TX_Pos
Ë

	)

4704 
	#USB_EP2R_CTR_TX
 
USB_EP2R_CTR_TX_Msk


	)

4705 
	#USB_EP2R_EP_KIND_Pos
 (8U)

	)

4706 
	#USB_EP2R_EP_KIND_Msk
 (0x1UL << 
USB_EP2R_EP_KIND_Pos
Ë

	)

4707 
	#USB_EP2R_EP_KIND
 
USB_EP2R_EP_KIND_Msk


	)

4709 
	#USB_EP2R_EP_TYPE_Pos
 (9U)

	)

4710 
	#USB_EP2R_EP_TYPE_Msk
 (0x3UL << 
USB_EP2R_EP_TYPE_Pos
Ë

	)

4711 
	#USB_EP2R_EP_TYPE
 
USB_EP2R_EP_TYPE_Msk


	)

4712 
	#USB_EP2R_EP_TYPE_0
 (0x1UL << 
USB_EP2R_EP_TYPE_Pos
Ë

	)

4713 
	#USB_EP2R_EP_TYPE_1
 (0x2UL << 
USB_EP2R_EP_TYPE_Pos
Ë

	)

4715 
	#USB_EP2R_SETUP_Pos
 (11U)

	)

4716 
	#USB_EP2R_SETUP_Msk
 (0x1UL << 
USB_EP2R_SETUP_Pos
Ë

	)

4717 
	#USB_EP2R_SETUP
 
USB_EP2R_SETUP_Msk


	)

4719 
	#USB_EP2R_STAT_RX_Pos
 (12U)

	)

4720 
	#USB_EP2R_STAT_RX_Msk
 (0x3UL << 
USB_EP2R_STAT_RX_Pos
Ë

	)

4721 
	#USB_EP2R_STAT_RX
 
USB_EP2R_STAT_RX_Msk


	)

4722 
	#USB_EP2R_STAT_RX_0
 (0x1UL << 
USB_EP2R_STAT_RX_Pos
Ë

	)

4723 
	#USB_EP2R_STAT_RX_1
 (0x2UL << 
USB_EP2R_STAT_RX_Pos
Ë

	)

4725 
	#USB_EP2R_DTOG_RX_Pos
 (14U)

	)

4726 
	#USB_EP2R_DTOG_RX_Msk
 (0x1UL << 
USB_EP2R_DTOG_RX_Pos
Ë

	)

4727 
	#USB_EP2R_DTOG_RX
 
USB_EP2R_DTOG_RX_Msk


	)

4728 
	#USB_EP2R_CTR_RX_Pos
 (15U)

	)

4729 
	#USB_EP2R_CTR_RX_Msk
 (0x1UL << 
USB_EP2R_CTR_RX_Pos
Ë

	)

4730 
	#USB_EP2R_CTR_RX
 
USB_EP2R_CTR_RX_Msk


	)

4733 
	#USB_EP3R_EA_Pos
 (0U)

	)

4734 
	#USB_EP3R_EA_Msk
 (0xFUL << 
USB_EP3R_EA_Pos
Ë

	)

4735 
	#USB_EP3R_EA
 
USB_EP3R_EA_Msk


	)

4737 
	#USB_EP3R_STAT_TX_Pos
 (4U)

	)

4738 
	#USB_EP3R_STAT_TX_Msk
 (0x3UL << 
USB_EP3R_STAT_TX_Pos
Ë

	)

4739 
	#USB_EP3R_STAT_TX
 
USB_EP3R_STAT_TX_Msk


	)

4740 
	#USB_EP3R_STAT_TX_0
 (0x1UL << 
USB_EP3R_STAT_TX_Pos
Ë

	)

4741 
	#USB_EP3R_STAT_TX_1
 (0x2UL << 
USB_EP3R_STAT_TX_Pos
Ë

	)

4743 
	#USB_EP3R_DTOG_TX_Pos
 (6U)

	)

4744 
	#USB_EP3R_DTOG_TX_Msk
 (0x1UL << 
USB_EP3R_DTOG_TX_Pos
Ë

	)

4745 
	#USB_EP3R_DTOG_TX
 
USB_EP3R_DTOG_TX_Msk


	)

4746 
	#USB_EP3R_CTR_TX_Pos
 (7U)

	)

4747 
	#USB_EP3R_CTR_TX_Msk
 (0x1UL << 
USB_EP3R_CTR_TX_Pos
Ë

	)

4748 
	#USB_EP3R_CTR_TX
 
USB_EP3R_CTR_TX_Msk


	)

4749 
	#USB_EP3R_EP_KIND_Pos
 (8U)

	)

4750 
	#USB_EP3R_EP_KIND_Msk
 (0x1UL << 
USB_EP3R_EP_KIND_Pos
Ë

	)

4751 
	#USB_EP3R_EP_KIND
 
USB_EP3R_EP_KIND_Msk


	)

4753 
	#USB_EP3R_EP_TYPE_Pos
 (9U)

	)

4754 
	#USB_EP3R_EP_TYPE_Msk
 (0x3UL << 
USB_EP3R_EP_TYPE_Pos
Ë

	)

4755 
	#USB_EP3R_EP_TYPE
 
USB_EP3R_EP_TYPE_Msk


	)

4756 
	#USB_EP3R_EP_TYPE_0
 (0x1UL << 
USB_EP3R_EP_TYPE_Pos
Ë

	)

4757 
	#USB_EP3R_EP_TYPE_1
 (0x2UL << 
USB_EP3R_EP_TYPE_Pos
Ë

	)

4759 
	#USB_EP3R_SETUP_Pos
 (11U)

	)

4760 
	#USB_EP3R_SETUP_Msk
 (0x1UL << 
USB_EP3R_SETUP_Pos
Ë

	)

4761 
	#USB_EP3R_SETUP
 
USB_EP3R_SETUP_Msk


	)

4763 
	#USB_EP3R_STAT_RX_Pos
 (12U)

	)

4764 
	#USB_EP3R_STAT_RX_Msk
 (0x3UL << 
USB_EP3R_STAT_RX_Pos
Ë

	)

4765 
	#USB_EP3R_STAT_RX
 
USB_EP3R_STAT_RX_Msk


	)

4766 
	#USB_EP3R_STAT_RX_0
 (0x1UL << 
USB_EP3R_STAT_RX_Pos
Ë

	)

4767 
	#USB_EP3R_STAT_RX_1
 (0x2UL << 
USB_EP3R_STAT_RX_Pos
Ë

	)

4769 
	#USB_EP3R_DTOG_RX_Pos
 (14U)

	)

4770 
	#USB_EP3R_DTOG_RX_Msk
 (0x1UL << 
USB_EP3R_DTOG_RX_Pos
Ë

	)

4771 
	#USB_EP3R_DTOG_RX
 
USB_EP3R_DTOG_RX_Msk


	)

4772 
	#USB_EP3R_CTR_RX_Pos
 (15U)

	)

4773 
	#USB_EP3R_CTR_RX_Msk
 (0x1UL << 
USB_EP3R_CTR_RX_Pos
Ë

	)

4774 
	#USB_EP3R_CTR_RX
 
USB_EP3R_CTR_RX_Msk


	)

4777 
	#USB_EP4R_EA_Pos
 (0U)

	)

4778 
	#USB_EP4R_EA_Msk
 (0xFUL << 
USB_EP4R_EA_Pos
Ë

	)

4779 
	#USB_EP4R_EA
 
USB_EP4R_EA_Msk


	)

4781 
	#USB_EP4R_STAT_TX_Pos
 (4U)

	)

4782 
	#USB_EP4R_STAT_TX_Msk
 (0x3UL << 
USB_EP4R_STAT_TX_Pos
Ë

	)

4783 
	#USB_EP4R_STAT_TX
 
USB_EP4R_STAT_TX_Msk


	)

4784 
	#USB_EP4R_STAT_TX_0
 (0x1UL << 
USB_EP4R_STAT_TX_Pos
Ë

	)

4785 
	#USB_EP4R_STAT_TX_1
 (0x2UL << 
USB_EP4R_STAT_TX_Pos
Ë

	)

4787 
	#USB_EP4R_DTOG_TX_Pos
 (6U)

	)

4788 
	#USB_EP4R_DTOG_TX_Msk
 (0x1UL << 
USB_EP4R_DTOG_TX_Pos
Ë

	)

4789 
	#USB_EP4R_DTOG_TX
 
USB_EP4R_DTOG_TX_Msk


	)

4790 
	#USB_EP4R_CTR_TX_Pos
 (7U)

	)

4791 
	#USB_EP4R_CTR_TX_Msk
 (0x1UL << 
USB_EP4R_CTR_TX_Pos
Ë

	)

4792 
	#USB_EP4R_CTR_TX
 
USB_EP4R_CTR_TX_Msk


	)

4793 
	#USB_EP4R_EP_KIND_Pos
 (8U)

	)

4794 
	#USB_EP4R_EP_KIND_Msk
 (0x1UL << 
USB_EP4R_EP_KIND_Pos
Ë

	)

4795 
	#USB_EP4R_EP_KIND
 
USB_EP4R_EP_KIND_Msk


	)

4797 
	#USB_EP4R_EP_TYPE_Pos
 (9U)

	)

4798 
	#USB_EP4R_EP_TYPE_Msk
 (0x3UL << 
USB_EP4R_EP_TYPE_Pos
Ë

	)

4799 
	#USB_EP4R_EP_TYPE
 
USB_EP4R_EP_TYPE_Msk


	)

4800 
	#USB_EP4R_EP_TYPE_0
 (0x1UL << 
USB_EP4R_EP_TYPE_Pos
Ë

	)

4801 
	#USB_EP4R_EP_TYPE_1
 (0x2UL << 
USB_EP4R_EP_TYPE_Pos
Ë

	)

4803 
	#USB_EP4R_SETUP_Pos
 (11U)

	)

4804 
	#USB_EP4R_SETUP_Msk
 (0x1UL << 
USB_EP4R_SETUP_Pos
Ë

	)

4805 
	#USB_EP4R_SETUP
 
USB_EP4R_SETUP_Msk


	)

4807 
	#USB_EP4R_STAT_RX_Pos
 (12U)

	)

4808 
	#USB_EP4R_STAT_RX_Msk
 (0x3UL << 
USB_EP4R_STAT_RX_Pos
Ë

	)

4809 
	#USB_EP4R_STAT_RX
 
USB_EP4R_STAT_RX_Msk


	)

4810 
	#USB_EP4R_STAT_RX_0
 (0x1UL << 
USB_EP4R_STAT_RX_Pos
Ë

	)

4811 
	#USB_EP4R_STAT_RX_1
 (0x2UL << 
USB_EP4R_STAT_RX_Pos
Ë

	)

4813 
	#USB_EP4R_DTOG_RX_Pos
 (14U)

	)

4814 
	#USB_EP4R_DTOG_RX_Msk
 (0x1UL << 
USB_EP4R_DTOG_RX_Pos
Ë

	)

4815 
	#USB_EP4R_DTOG_RX
 
USB_EP4R_DTOG_RX_Msk


	)

4816 
	#USB_EP4R_CTR_RX_Pos
 (15U)

	)

4817 
	#USB_EP4R_CTR_RX_Msk
 (0x1UL << 
USB_EP4R_CTR_RX_Pos
Ë

	)

4818 
	#USB_EP4R_CTR_RX
 
USB_EP4R_CTR_RX_Msk


	)

4821 
	#USB_EP5R_EA_Pos
 (0U)

	)

4822 
	#USB_EP5R_EA_Msk
 (0xFUL << 
USB_EP5R_EA_Pos
Ë

	)

4823 
	#USB_EP5R_EA
 
USB_EP5R_EA_Msk


	)

4825 
	#USB_EP5R_STAT_TX_Pos
 (4U)

	)

4826 
	#USB_EP5R_STAT_TX_Msk
 (0x3UL << 
USB_EP5R_STAT_TX_Pos
Ë

	)

4827 
	#USB_EP5R_STAT_TX
 
USB_EP5R_STAT_TX_Msk


	)

4828 
	#USB_EP5R_STAT_TX_0
 (0x1UL << 
USB_EP5R_STAT_TX_Pos
Ë

	)

4829 
	#USB_EP5R_STAT_TX_1
 (0x2UL << 
USB_EP5R_STAT_TX_Pos
Ë

	)

4831 
	#USB_EP5R_DTOG_TX_Pos
 (6U)

	)

4832 
	#USB_EP5R_DTOG_TX_Msk
 (0x1UL << 
USB_EP5R_DTOG_TX_Pos
Ë

	)

4833 
	#USB_EP5R_DTOG_TX
 
USB_EP5R_DTOG_TX_Msk


	)

4834 
	#USB_EP5R_CTR_TX_Pos
 (7U)

	)

4835 
	#USB_EP5R_CTR_TX_Msk
 (0x1UL << 
USB_EP5R_CTR_TX_Pos
Ë

	)

4836 
	#USB_EP5R_CTR_TX
 
USB_EP5R_CTR_TX_Msk


	)

4837 
	#USB_EP5R_EP_KIND_Pos
 (8U)

	)

4838 
	#USB_EP5R_EP_KIND_Msk
 (0x1UL << 
USB_EP5R_EP_KIND_Pos
Ë

	)

4839 
	#USB_EP5R_EP_KIND
 
USB_EP5R_EP_KIND_Msk


	)

4841 
	#USB_EP5R_EP_TYPE_Pos
 (9U)

	)

4842 
	#USB_EP5R_EP_TYPE_Msk
 (0x3UL << 
USB_EP5R_EP_TYPE_Pos
Ë

	)

4843 
	#USB_EP5R_EP_TYPE
 
USB_EP5R_EP_TYPE_Msk


	)

4844 
	#USB_EP5R_EP_TYPE_0
 (0x1UL << 
USB_EP5R_EP_TYPE_Pos
Ë

	)

4845 
	#USB_EP5R_EP_TYPE_1
 (0x2UL << 
USB_EP5R_EP_TYPE_Pos
Ë

	)

4847 
	#USB_EP5R_SETUP_Pos
 (11U)

	)

4848 
	#USB_EP5R_SETUP_Msk
 (0x1UL << 
USB_EP5R_SETUP_Pos
Ë

	)

4849 
	#USB_EP5R_SETUP
 
USB_EP5R_SETUP_Msk


	)

4851 
	#USB_EP5R_STAT_RX_Pos
 (12U)

	)

4852 
	#USB_EP5R_STAT_RX_Msk
 (0x3UL << 
USB_EP5R_STAT_RX_Pos
Ë

	)

4853 
	#USB_EP5R_STAT_RX
 
USB_EP5R_STAT_RX_Msk


	)

4854 
	#USB_EP5R_STAT_RX_0
 (0x1UL << 
USB_EP5R_STAT_RX_Pos
Ë

	)

4855 
	#USB_EP5R_STAT_RX_1
 (0x2UL << 
USB_EP5R_STAT_RX_Pos
Ë

	)

4857 
	#USB_EP5R_DTOG_RX_Pos
 (14U)

	)

4858 
	#USB_EP5R_DTOG_RX_Msk
 (0x1UL << 
USB_EP5R_DTOG_RX_Pos
Ë

	)

4859 
	#USB_EP5R_DTOG_RX
 
USB_EP5R_DTOG_RX_Msk


	)

4860 
	#USB_EP5R_CTR_RX_Pos
 (15U)

	)

4861 
	#USB_EP5R_CTR_RX_Msk
 (0x1UL << 
USB_EP5R_CTR_RX_Pos
Ë

	)

4862 
	#USB_EP5R_CTR_RX
 
USB_EP5R_CTR_RX_Msk


	)

4865 
	#USB_EP6R_EA_Pos
 (0U)

	)

4866 
	#USB_EP6R_EA_Msk
 (0xFUL << 
USB_EP6R_EA_Pos
Ë

	)

4867 
	#USB_EP6R_EA
 
USB_EP6R_EA_Msk


	)

4869 
	#USB_EP6R_STAT_TX_Pos
 (4U)

	)

4870 
	#USB_EP6R_STAT_TX_Msk
 (0x3UL << 
USB_EP6R_STAT_TX_Pos
Ë

	)

4871 
	#USB_EP6R_STAT_TX
 
USB_EP6R_STAT_TX_Msk


	)

4872 
	#USB_EP6R_STAT_TX_0
 (0x1UL << 
USB_EP6R_STAT_TX_Pos
Ë

	)

4873 
	#USB_EP6R_STAT_TX_1
 (0x2UL << 
USB_EP6R_STAT_TX_Pos
Ë

	)

4875 
	#USB_EP6R_DTOG_TX_Pos
 (6U)

	)

4876 
	#USB_EP6R_DTOG_TX_Msk
 (0x1UL << 
USB_EP6R_DTOG_TX_Pos
Ë

	)

4877 
	#USB_EP6R_DTOG_TX
 
USB_EP6R_DTOG_TX_Msk


	)

4878 
	#USB_EP6R_CTR_TX_Pos
 (7U)

	)

4879 
	#USB_EP6R_CTR_TX_Msk
 (0x1UL << 
USB_EP6R_CTR_TX_Pos
Ë

	)

4880 
	#USB_EP6R_CTR_TX
 
USB_EP6R_CTR_TX_Msk


	)

4881 
	#USB_EP6R_EP_KIND_Pos
 (8U)

	)

4882 
	#USB_EP6R_EP_KIND_Msk
 (0x1UL << 
USB_EP6R_EP_KIND_Pos
Ë

	)

4883 
	#USB_EP6R_EP_KIND
 
USB_EP6R_EP_KIND_Msk


	)

4885 
	#USB_EP6R_EP_TYPE_Pos
 (9U)

	)

4886 
	#USB_EP6R_EP_TYPE_Msk
 (0x3UL << 
USB_EP6R_EP_TYPE_Pos
Ë

	)

4887 
	#USB_EP6R_EP_TYPE
 
USB_EP6R_EP_TYPE_Msk


	)

4888 
	#USB_EP6R_EP_TYPE_0
 (0x1UL << 
USB_EP6R_EP_TYPE_Pos
Ë

	)

4889 
	#USB_EP6R_EP_TYPE_1
 (0x2UL << 
USB_EP6R_EP_TYPE_Pos
Ë

	)

4891 
	#USB_EP6R_SETUP_Pos
 (11U)

	)

4892 
	#USB_EP6R_SETUP_Msk
 (0x1UL << 
USB_EP6R_SETUP_Pos
Ë

	)

4893 
	#USB_EP6R_SETUP
 
USB_EP6R_SETUP_Msk


	)

4895 
	#USB_EP6R_STAT_RX_Pos
 (12U)

	)

4896 
	#USB_EP6R_STAT_RX_Msk
 (0x3UL << 
USB_EP6R_STAT_RX_Pos
Ë

	)

4897 
	#USB_EP6R_STAT_RX
 
USB_EP6R_STAT_RX_Msk


	)

4898 
	#USB_EP6R_STAT_RX_0
 (0x1UL << 
USB_EP6R_STAT_RX_Pos
Ë

	)

4899 
	#USB_EP6R_STAT_RX_1
 (0x2UL << 
USB_EP6R_STAT_RX_Pos
Ë

	)

4901 
	#USB_EP6R_DTOG_RX_Pos
 (14U)

	)

4902 
	#USB_EP6R_DTOG_RX_Msk
 (0x1UL << 
USB_EP6R_DTOG_RX_Pos
Ë

	)

4903 
	#USB_EP6R_DTOG_RX
 
USB_EP6R_DTOG_RX_Msk


	)

4904 
	#USB_EP6R_CTR_RX_Pos
 (15U)

	)

4905 
	#USB_EP6R_CTR_RX_Msk
 (0x1UL << 
USB_EP6R_CTR_RX_Pos
Ë

	)

4906 
	#USB_EP6R_CTR_RX
 
USB_EP6R_CTR_RX_Msk


	)

4909 
	#USB_EP7R_EA_Pos
 (0U)

	)

4910 
	#USB_EP7R_EA_Msk
 (0xFUL << 
USB_EP7R_EA_Pos
Ë

	)

4911 
	#USB_EP7R_EA
 
USB_EP7R_EA_Msk


	)

4913 
	#USB_EP7R_STAT_TX_Pos
 (4U)

	)

4914 
	#USB_EP7R_STAT_TX_Msk
 (0x3UL << 
USB_EP7R_STAT_TX_Pos
Ë

	)

4915 
	#USB_EP7R_STAT_TX
 
USB_EP7R_STAT_TX_Msk


	)

4916 
	#USB_EP7R_STAT_TX_0
 (0x1UL << 
USB_EP7R_STAT_TX_Pos
Ë

	)

4917 
	#USB_EP7R_STAT_TX_1
 (0x2UL << 
USB_EP7R_STAT_TX_Pos
Ë

	)

4919 
	#USB_EP7R_DTOG_TX_Pos
 (6U)

	)

4920 
	#USB_EP7R_DTOG_TX_Msk
 (0x1UL << 
USB_EP7R_DTOG_TX_Pos
Ë

	)

4921 
	#USB_EP7R_DTOG_TX
 
USB_EP7R_DTOG_TX_Msk


	)

4922 
	#USB_EP7R_CTR_TX_Pos
 (7U)

	)

4923 
	#USB_EP7R_CTR_TX_Msk
 (0x1UL << 
USB_EP7R_CTR_TX_Pos
Ë

	)

4924 
	#USB_EP7R_CTR_TX
 
USB_EP7R_CTR_TX_Msk


	)

4925 
	#USB_EP7R_EP_KIND_Pos
 (8U)

	)

4926 
	#USB_EP7R_EP_KIND_Msk
 (0x1UL << 
USB_EP7R_EP_KIND_Pos
Ë

	)

4927 
	#USB_EP7R_EP_KIND
 
USB_EP7R_EP_KIND_Msk


	)

4929 
	#USB_EP7R_EP_TYPE_Pos
 (9U)

	)

4930 
	#USB_EP7R_EP_TYPE_Msk
 (0x3UL << 
USB_EP7R_EP_TYPE_Pos
Ë

	)

4931 
	#USB_EP7R_EP_TYPE
 
USB_EP7R_EP_TYPE_Msk


	)

4932 
	#USB_EP7R_EP_TYPE_0
 (0x1UL << 
USB_EP7R_EP_TYPE_Pos
Ë

	)

4933 
	#USB_EP7R_EP_TYPE_1
 (0x2UL << 
USB_EP7R_EP_TYPE_Pos
Ë

	)

4935 
	#USB_EP7R_SETUP_Pos
 (11U)

	)

4936 
	#USB_EP7R_SETUP_Msk
 (0x1UL << 
USB_EP7R_SETUP_Pos
Ë

	)

4937 
	#USB_EP7R_SETUP
 
USB_EP7R_SETUP_Msk


	)

4939 
	#USB_EP7R_STAT_RX_Pos
 (12U)

	)

4940 
	#USB_EP7R_STAT_RX_Msk
 (0x3UL << 
USB_EP7R_STAT_RX_Pos
Ë

	)

4941 
	#USB_EP7R_STAT_RX
 
USB_EP7R_STAT_RX_Msk


	)

4942 
	#USB_EP7R_STAT_RX_0
 (0x1UL << 
USB_EP7R_STAT_RX_Pos
Ë

	)

4943 
	#USB_EP7R_STAT_RX_1
 (0x2UL << 
USB_EP7R_STAT_RX_Pos
Ë

	)

4945 
	#USB_EP7R_DTOG_RX_Pos
 (14U)

	)

4946 
	#USB_EP7R_DTOG_RX_Msk
 (0x1UL << 
USB_EP7R_DTOG_RX_Pos
Ë

	)

4947 
	#USB_EP7R_DTOG_RX
 
USB_EP7R_DTOG_RX_Msk


	)

4948 
	#USB_EP7R_CTR_RX_Pos
 (15U)

	)

4949 
	#USB_EP7R_CTR_RX_Msk
 (0x1UL << 
USB_EP7R_CTR_RX_Pos
Ë

	)

4950 
	#USB_EP7R_CTR_RX
 
USB_EP7R_CTR_RX_Msk


	)

4954 
	#USB_CNTR_FRES_Pos
 (0U)

	)

4955 
	#USB_CNTR_FRES_Msk
 (0x1UL << 
USB_CNTR_FRES_Pos
Ë

	)

4956 
	#USB_CNTR_FRES
 
USB_CNTR_FRES_Msk


	)

4957 
	#USB_CNTR_PDWN_Pos
 (1U)

	)

4958 
	#USB_CNTR_PDWN_Msk
 (0x1UL << 
USB_CNTR_PDWN_Pos
Ë

	)

4959 
	#USB_CNTR_PDWN
 
USB_CNTR_PDWN_Msk


	)

4960 
	#USB_CNTR_LP_MODE_Pos
 (2U)

	)

4961 
	#USB_CNTR_LP_MODE_Msk
 (0x1UL << 
USB_CNTR_LP_MODE_Pos
Ë

	)

4962 
	#USB_CNTR_LP_MODE
 
USB_CNTR_LP_MODE_Msk


	)

4963 
	#USB_CNTR_FSUSP_Pos
 (3U)

	)

4964 
	#USB_CNTR_FSUSP_Msk
 (0x1UL << 
USB_CNTR_FSUSP_Pos
Ë

	)

4965 
	#USB_CNTR_FSUSP
 
USB_CNTR_FSUSP_Msk


	)

4966 
	#USB_CNTR_RESUME_Pos
 (4U)

	)

4967 
	#USB_CNTR_RESUME_Msk
 (0x1UL << 
USB_CNTR_RESUME_Pos
Ë

	)

4968 
	#USB_CNTR_RESUME
 
USB_CNTR_RESUME_Msk


	)

4969 
	#USB_CNTR_ESOFM_Pos
 (8U)

	)

4970 
	#USB_CNTR_ESOFM_Msk
 (0x1UL << 
USB_CNTR_ESOFM_Pos
Ë

	)

4971 
	#USB_CNTR_ESOFM
 
USB_CNTR_ESOFM_Msk


	)

4972 
	#USB_CNTR_SOFM_Pos
 (9U)

	)

4973 
	#USB_CNTR_SOFM_Msk
 (0x1UL << 
USB_CNTR_SOFM_Pos
Ë

	)

4974 
	#USB_CNTR_SOFM
 
USB_CNTR_SOFM_Msk


	)

4975 
	#USB_CNTR_RESETM_Pos
 (10U)

	)

4976 
	#USB_CNTR_RESETM_Msk
 (0x1UL << 
USB_CNTR_RESETM_Pos
Ë

	)

4977 
	#USB_CNTR_RESETM
 
USB_CNTR_RESETM_Msk


	)

4978 
	#USB_CNTR_SUSPM_Pos
 (11U)

	)

4979 
	#USB_CNTR_SUSPM_Msk
 (0x1UL << 
USB_CNTR_SUSPM_Pos
Ë

	)

4980 
	#USB_CNTR_SUSPM
 
USB_CNTR_SUSPM_Msk


	)

4981 
	#USB_CNTR_WKUPM_Pos
 (12U)

	)

4982 
	#USB_CNTR_WKUPM_Msk
 (0x1UL << 
USB_CNTR_WKUPM_Pos
Ë

	)

4983 
	#USB_CNTR_WKUPM
 
USB_CNTR_WKUPM_Msk


	)

4984 
	#USB_CNTR_ERRM_Pos
 (13U)

	)

4985 
	#USB_CNTR_ERRM_Msk
 (0x1UL << 
USB_CNTR_ERRM_Pos
Ë

	)

4986 
	#USB_CNTR_ERRM
 
USB_CNTR_ERRM_Msk


	)

4987 
	#USB_CNTR_PMAOVRM_Pos
 (14U)

	)

4988 
	#USB_CNTR_PMAOVRM_Msk
 (0x1UL << 
USB_CNTR_PMAOVRM_Pos
Ë

	)

4989 
	#USB_CNTR_PMAOVRM
 
USB_CNTR_PMAOVRM_Msk


	)

4990 
	#USB_CNTR_CTRM_Pos
 (15U)

	)

4991 
	#USB_CNTR_CTRM_Msk
 (0x1UL << 
USB_CNTR_CTRM_Pos
Ë

	)

4992 
	#USB_CNTR_CTRM
 
USB_CNTR_CTRM_Msk


	)

4995 
	#USB_ISTR_EP_ID_Pos
 (0U)

	)

4996 
	#USB_ISTR_EP_ID_Msk
 (0xFUL << 
USB_ISTR_EP_ID_Pos
Ë

	)

4997 
	#USB_ISTR_EP_ID
 
USB_ISTR_EP_ID_Msk


	)

4998 
	#USB_ISTR_DIR_Pos
 (4U)

	)

4999 
	#USB_ISTR_DIR_Msk
 (0x1UL << 
USB_ISTR_DIR_Pos
Ë

	)

5000 
	#USB_ISTR_DIR
 
USB_ISTR_DIR_Msk


	)

5001 
	#USB_ISTR_ESOF_Pos
 (8U)

	)

5002 
	#USB_ISTR_ESOF_Msk
 (0x1UL << 
USB_ISTR_ESOF_Pos
Ë

	)

5003 
	#USB_ISTR_ESOF
 
USB_ISTR_ESOF_Msk


	)

5004 
	#USB_ISTR_SOF_Pos
 (9U)

	)

5005 
	#USB_ISTR_SOF_Msk
 (0x1UL << 
USB_ISTR_SOF_Pos
Ë

	)

5006 
	#USB_ISTR_SOF
 
USB_ISTR_SOF_Msk


	)

5007 
	#USB_ISTR_RESET_Pos
 (10U)

	)

5008 
	#USB_ISTR_RESET_Msk
 (0x1UL << 
USB_ISTR_RESET_Pos
Ë

	)

5009 
	#USB_ISTR_RESET
 
USB_ISTR_RESET_Msk


	)

5010 
	#USB_ISTR_SUSP_Pos
 (11U)

	)

5011 
	#USB_ISTR_SUSP_Msk
 (0x1UL << 
USB_ISTR_SUSP_Pos
Ë

	)

5012 
	#USB_ISTR_SUSP
 
USB_ISTR_SUSP_Msk


	)

5013 
	#USB_ISTR_WKUP_Pos
 (12U)

	)

5014 
	#USB_ISTR_WKUP_Msk
 (0x1UL << 
USB_ISTR_WKUP_Pos
Ë

	)

5015 
	#USB_ISTR_WKUP
 
USB_ISTR_WKUP_Msk


	)

5016 
	#USB_ISTR_ERR_Pos
 (13U)

	)

5017 
	#USB_ISTR_ERR_Msk
 (0x1UL << 
USB_ISTR_ERR_Pos
Ë

	)

5018 
	#USB_ISTR_ERR
 
USB_ISTR_ERR_Msk


	)

5019 
	#USB_ISTR_PMAOVR_Pos
 (14U)

	)

5020 
	#USB_ISTR_PMAOVR_Msk
 (0x1UL << 
USB_ISTR_PMAOVR_Pos
Ë

	)

5021 
	#USB_ISTR_PMAOVR
 
USB_ISTR_PMAOVR_Msk


	)

5022 
	#USB_ISTR_CTR_Pos
 (15U)

	)

5023 
	#USB_ISTR_CTR_Msk
 (0x1UL << 
USB_ISTR_CTR_Pos
Ë

	)

5024 
	#USB_ISTR_CTR
 
USB_ISTR_CTR_Msk


	)

5027 
	#USB_FNR_FN_Pos
 (0U)

	)

5028 
	#USB_FNR_FN_Msk
 (0x7FFUL << 
USB_FNR_FN_Pos
Ë

	)

5029 
	#USB_FNR_FN
 
USB_FNR_FN_Msk


	)

5030 
	#USB_FNR_LSOF_Pos
 (11U)

	)

5031 
	#USB_FNR_LSOF_Msk
 (0x3UL << 
USB_FNR_LSOF_Pos
Ë

	)

5032 
	#USB_FNR_LSOF
 
USB_FNR_LSOF_Msk


	)

5033 
	#USB_FNR_LCK_Pos
 (13U)

	)

5034 
	#USB_FNR_LCK_Msk
 (0x1UL << 
USB_FNR_LCK_Pos
Ë

	)

5035 
	#USB_FNR_LCK
 
USB_FNR_LCK_Msk


	)

5036 
	#USB_FNR_RXDM_Pos
 (14U)

	)

5037 
	#USB_FNR_RXDM_Msk
 (0x1UL << 
USB_FNR_RXDM_Pos
Ë

	)

5038 
	#USB_FNR_RXDM
 
USB_FNR_RXDM_Msk


	)

5039 
	#USB_FNR_RXDP_Pos
 (15U)

	)

5040 
	#USB_FNR_RXDP_Msk
 (0x1UL << 
USB_FNR_RXDP_Pos
Ë

	)

5041 
	#USB_FNR_RXDP
 
USB_FNR_RXDP_Msk


	)

5044 
	#USB_DADDR_ADD_Pos
 (0U)

	)

5045 
	#USB_DADDR_ADD_Msk
 (0x7FUL << 
USB_DADDR_ADD_Pos
Ë

	)

5046 
	#USB_DADDR_ADD
 
USB_DADDR_ADD_Msk


	)

5047 
	#USB_DADDR_ADD0_Pos
 (0U)

	)

5048 
	#USB_DADDR_ADD0_Msk
 (0x1UL << 
USB_DADDR_ADD0_Pos
Ë

	)

5049 
	#USB_DADDR_ADD0
 
USB_DADDR_ADD0_Msk


	)

5050 
	#USB_DADDR_ADD1_Pos
 (1U)

	)

5051 
	#USB_DADDR_ADD1_Msk
 (0x1UL << 
USB_DADDR_ADD1_Pos
Ë

	)

5052 
	#USB_DADDR_ADD1
 
USB_DADDR_ADD1_Msk


	)

5053 
	#USB_DADDR_ADD2_Pos
 (2U)

	)

5054 
	#USB_DADDR_ADD2_Msk
 (0x1UL << 
USB_DADDR_ADD2_Pos
Ë

	)

5055 
	#USB_DADDR_ADD2
 
USB_DADDR_ADD2_Msk


	)

5056 
	#USB_DADDR_ADD3_Pos
 (3U)

	)

5057 
	#USB_DADDR_ADD3_Msk
 (0x1UL << 
USB_DADDR_ADD3_Pos
Ë

	)

5058 
	#USB_DADDR_ADD3
 
USB_DADDR_ADD3_Msk


	)

5059 
	#USB_DADDR_ADD4_Pos
 (4U)

	)

5060 
	#USB_DADDR_ADD4_Msk
 (0x1UL << 
USB_DADDR_ADD4_Pos
Ë

	)

5061 
	#USB_DADDR_ADD4
 
USB_DADDR_ADD4_Msk


	)

5062 
	#USB_DADDR_ADD5_Pos
 (5U)

	)

5063 
	#USB_DADDR_ADD5_Msk
 (0x1UL << 
USB_DADDR_ADD5_Pos
Ë

	)

5064 
	#USB_DADDR_ADD5
 
USB_DADDR_ADD5_Msk


	)

5065 
	#USB_DADDR_ADD6_Pos
 (6U)

	)

5066 
	#USB_DADDR_ADD6_Msk
 (0x1UL << 
USB_DADDR_ADD6_Pos
Ë

	)

5067 
	#USB_DADDR_ADD6
 
USB_DADDR_ADD6_Msk


	)

5069 
	#USB_DADDR_EF_Pos
 (7U)

	)

5070 
	#USB_DADDR_EF_Msk
 (0x1UL << 
USB_DADDR_EF_Pos
Ë

	)

5071 
	#USB_DADDR_EF
 
USB_DADDR_EF_Msk


	)

5074 
	#USB_BTABLE_BTABLE_Pos
 (3U)

	)

5075 
	#USB_BTABLE_BTABLE_Msk
 (0x1FFFUL << 
USB_BTABLE_BTABLE_Pos
Ë

	)

5076 
	#USB_BTABLE_BTABLE
 
USB_BTABLE_BTABLE_Msk


	)

5080 
	#USB_ADDR0_TX_ADDR0_TX_Pos
 (1U)

	)

5081 
	#USB_ADDR0_TX_ADDR0_TX_Msk
 (0x7FFFUL << 
USB_ADDR0_TX_ADDR0_TX_Pos
Ë

	)

5082 
	#USB_ADDR0_TX_ADDR0_TX
 
USB_ADDR0_TX_ADDR0_TX_Msk


	)

5085 
	#USB_ADDR1_TX_ADDR1_TX_Pos
 (1U)

	)

5086 
	#USB_ADDR1_TX_ADDR1_TX_Msk
 (0x7FFFUL << 
USB_ADDR1_TX_ADDR1_TX_Pos
Ë

	)

5087 
	#USB_ADDR1_TX_ADDR1_TX
 
USB_ADDR1_TX_ADDR1_TX_Msk


	)

5090 
	#USB_ADDR2_TX_ADDR2_TX_Pos
 (1U)

	)

5091 
	#USB_ADDR2_TX_ADDR2_TX_Msk
 (0x7FFFUL << 
USB_ADDR2_TX_ADDR2_TX_Pos
Ë

	)

5092 
	#USB_ADDR2_TX_ADDR2_TX
 
USB_ADDR2_TX_ADDR2_TX_Msk


	)

5095 
	#USB_ADDR3_TX_ADDR3_TX_Pos
 (1U)

	)

5096 
	#USB_ADDR3_TX_ADDR3_TX_Msk
 (0x7FFFUL << 
USB_ADDR3_TX_ADDR3_TX_Pos
Ë

	)

5097 
	#USB_ADDR3_TX_ADDR3_TX
 
USB_ADDR3_TX_ADDR3_TX_Msk


	)

5100 
	#USB_ADDR4_TX_ADDR4_TX_Pos
 (1U)

	)

5101 
	#USB_ADDR4_TX_ADDR4_TX_Msk
 (0x7FFFUL << 
USB_ADDR4_TX_ADDR4_TX_Pos
Ë

	)

5102 
	#USB_ADDR4_TX_ADDR4_TX
 
USB_ADDR4_TX_ADDR4_TX_Msk


	)

5105 
	#USB_ADDR5_TX_ADDR5_TX_Pos
 (1U)

	)

5106 
	#USB_ADDR5_TX_ADDR5_TX_Msk
 (0x7FFFUL << 
USB_ADDR5_TX_ADDR5_TX_Pos
Ë

	)

5107 
	#USB_ADDR5_TX_ADDR5_TX
 
USB_ADDR5_TX_ADDR5_TX_Msk


	)

5110 
	#USB_ADDR6_TX_ADDR6_TX_Pos
 (1U)

	)

5111 
	#USB_ADDR6_TX_ADDR6_TX_Msk
 (0x7FFFUL << 
USB_ADDR6_TX_ADDR6_TX_Pos
Ë

	)

5112 
	#USB_ADDR6_TX_ADDR6_TX
 
USB_ADDR6_TX_ADDR6_TX_Msk


	)

5115 
	#USB_ADDR7_TX_ADDR7_TX_Pos
 (1U)

	)

5116 
	#USB_ADDR7_TX_ADDR7_TX_Msk
 (0x7FFFUL << 
USB_ADDR7_TX_ADDR7_TX_Pos
Ë

	)

5117 
	#USB_ADDR7_TX_ADDR7_TX
 
USB_ADDR7_TX_ADDR7_TX_Msk


	)

5122 
	#USB_COUNT0_TX_COUNT0_TX_Pos
 (0U)

	)

5123 
	#USB_COUNT0_TX_COUNT0_TX_Msk
 (0x3FFUL << 
USB_COUNT0_TX_COUNT0_TX_Pos
Ë

	)

5124 
	#USB_COUNT0_TX_COUNT0_TX
 
USB_COUNT0_TX_COUNT0_TX_Msk


	)

5127 
	#USB_COUNT1_TX_COUNT1_TX_Pos
 (0U)

	)

5128 
	#USB_COUNT1_TX_COUNT1_TX_Msk
 (0x3FFUL << 
USB_COUNT1_TX_COUNT1_TX_Pos
Ë

	)

5129 
	#USB_COUNT1_TX_COUNT1_TX
 
USB_COUNT1_TX_COUNT1_TX_Msk


	)

5132 
	#USB_COUNT2_TX_COUNT2_TX_Pos
 (0U)

	)

5133 
	#USB_COUNT2_TX_COUNT2_TX_Msk
 (0x3FFUL << 
USB_COUNT2_TX_COUNT2_TX_Pos
Ë

	)

5134 
	#USB_COUNT2_TX_COUNT2_TX
 
USB_COUNT2_TX_COUNT2_TX_Msk


	)

5137 
	#USB_COUNT3_TX_COUNT3_TX_Pos
 (0U)

	)

5138 
	#USB_COUNT3_TX_COUNT3_TX_Msk
 (0x3FFUL << 
USB_COUNT3_TX_COUNT3_TX_Pos
Ë

	)

5139 
	#USB_COUNT3_TX_COUNT3_TX
 
USB_COUNT3_TX_COUNT3_TX_Msk


	)

5142 
	#USB_COUNT4_TX_COUNT4_TX_Pos
 (0U)

	)

5143 
	#USB_COUNT4_TX_COUNT4_TX_Msk
 (0x3FFUL << 
USB_COUNT4_TX_COUNT4_TX_Pos
Ë

	)

5144 
	#USB_COUNT4_TX_COUNT4_TX
 
USB_COUNT4_TX_COUNT4_TX_Msk


	)

5147 
	#USB_COUNT5_TX_COUNT5_TX_Pos
 (0U)

	)

5148 
	#USB_COUNT5_TX_COUNT5_TX_Msk
 (0x3FFUL << 
USB_COUNT5_TX_COUNT5_TX_Pos
Ë

	)

5149 
	#USB_COUNT5_TX_COUNT5_TX
 
USB_COUNT5_TX_COUNT5_TX_Msk


	)

5152 
	#USB_COUNT6_TX_COUNT6_TX_Pos
 (0U)

	)

5153 
	#USB_COUNT6_TX_COUNT6_TX_Msk
 (0x3FFUL << 
USB_COUNT6_TX_COUNT6_TX_Pos
Ë

	)

5154 
	#USB_COUNT6_TX_COUNT6_TX
 
USB_COUNT6_TX_COUNT6_TX_Msk


	)

5157 
	#USB_COUNT7_TX_COUNT7_TX_Pos
 (0U)

	)

5158 
	#USB_COUNT7_TX_COUNT7_TX_Msk
 (0x3FFUL << 
USB_COUNT7_TX_COUNT7_TX_Pos
Ë

	)

5159 
	#USB_COUNT7_TX_COUNT7_TX
 
USB_COUNT7_TX_COUNT7_TX_Msk


	)

5164 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 0x000003FFU

	)

5167 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 0x03FF0000U

	)

5170 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 0x000003FFU

	)

5173 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 0x03FF0000U

	)

5176 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 0x000003FFU

	)

5179 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 0x03FF0000U

	)

5182 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 0x000003FFU

	)

5185 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 0x03FF0000U

	)

5188 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 0x000003FFU

	)

5191 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 0x03FF0000U

	)

5194 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 0x000003FFU

	)

5197 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 0x03FF0000U

	)

5200 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 0x000003FFU

	)

5203 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 0x03FF0000U

	)

5206 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 0x000003FFU

	)

5209 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 0x03FF0000U

	)

5214 
	#USB_ADDR0_RX_ADDR0_RX_Pos
 (1U)

	)

5215 
	#USB_ADDR0_RX_ADDR0_RX_Msk
 (0x7FFFUL << 
USB_ADDR0_RX_ADDR0_RX_Pos
Ë

	)

5216 
	#USB_ADDR0_RX_ADDR0_RX
 
USB_ADDR0_RX_ADDR0_RX_Msk


	)

5219 
	#USB_ADDR1_RX_ADDR1_RX_Pos
 (1U)

	)

5220 
	#USB_ADDR1_RX_ADDR1_RX_Msk
 (0x7FFFUL << 
USB_ADDR1_RX_ADDR1_RX_Pos
Ë

	)

5221 
	#USB_ADDR1_RX_ADDR1_RX
 
USB_ADDR1_RX_ADDR1_RX_Msk


	)

5224 
	#USB_ADDR2_RX_ADDR2_RX_Pos
 (1U)

	)

5225 
	#USB_ADDR2_RX_ADDR2_RX_Msk
 (0x7FFFUL << 
USB_ADDR2_RX_ADDR2_RX_Pos
Ë

	)

5226 
	#USB_ADDR2_RX_ADDR2_RX
 
USB_ADDR2_RX_ADDR2_RX_Msk


	)

5229 
	#USB_ADDR3_RX_ADDR3_RX_Pos
 (1U)

	)

5230 
	#USB_ADDR3_RX_ADDR3_RX_Msk
 (0x7FFFUL << 
USB_ADDR3_RX_ADDR3_RX_Pos
Ë

	)

5231 
	#USB_ADDR3_RX_ADDR3_RX
 
USB_ADDR3_RX_ADDR3_RX_Msk


	)

5234 
	#USB_ADDR4_RX_ADDR4_RX_Pos
 (1U)

	)

5235 
	#USB_ADDR4_RX_ADDR4_RX_Msk
 (0x7FFFUL << 
USB_ADDR4_RX_ADDR4_RX_Pos
Ë

	)

5236 
	#USB_ADDR4_RX_ADDR4_RX
 
USB_ADDR4_RX_ADDR4_RX_Msk


	)

5239 
	#USB_ADDR5_RX_ADDR5_RX_Pos
 (1U)

	)

5240 
	#USB_ADDR5_RX_ADDR5_RX_Msk
 (0x7FFFUL << 
USB_ADDR5_RX_ADDR5_RX_Pos
Ë

	)

5241 
	#USB_ADDR5_RX_ADDR5_RX
 
USB_ADDR5_RX_ADDR5_RX_Msk


	)

5244 
	#USB_ADDR6_RX_ADDR6_RX_Pos
 (1U)

	)

5245 
	#USB_ADDR6_RX_ADDR6_RX_Msk
 (0x7FFFUL << 
USB_ADDR6_RX_ADDR6_RX_Pos
Ë

	)

5246 
	#USB_ADDR6_RX_ADDR6_RX
 
USB_ADDR6_RX_ADDR6_RX_Msk


	)

5249 
	#USB_ADDR7_RX_ADDR7_RX_Pos
 (1U)

	)

5250 
	#USB_ADDR7_RX_ADDR7_RX_Msk
 (0x7FFFUL << 
USB_ADDR7_RX_ADDR7_RX_Pos
Ë

	)

5251 
	#USB_ADDR7_RX_ADDR7_RX
 
USB_ADDR7_RX_ADDR7_RX_Msk


	)

5256 
	#USB_COUNT0_RX_COUNT0_RX_Pos
 (0U)

	)

5257 
	#USB_COUNT0_RX_COUNT0_RX_Msk
 (0x3FFUL << 
USB_COUNT0_RX_COUNT0_RX_Pos
Ë

	)

5258 
	#USB_COUNT0_RX_COUNT0_RX
 
USB_COUNT0_RX_COUNT0_RX_Msk


	)

5260 
	#USB_COUNT0_RX_NUM_BLOCK_Pos
 (10U)

	)

5261 
	#USB_COUNT0_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5262 
	#USB_COUNT0_RX_NUM_BLOCK
 
USB_COUNT0_RX_NUM_BLOCK_Msk


	)

5263 
	#USB_COUNT0_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5264 
	#USB_COUNT0_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5265 
	#USB_COUNT0_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5266 
	#USB_COUNT0_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5267 
	#USB_COUNT0_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5269 
	#USB_COUNT0_RX_BLSIZE_Pos
 (15U)

	)

5270 
	#USB_COUNT0_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT0_RX_BLSIZE_Pos
Ë

	)

5271 
	#USB_COUNT0_RX_BLSIZE
 
USB_COUNT0_RX_BLSIZE_Msk


	)

5274 
	#USB_COUNT1_RX_COUNT1_RX_Pos
 (0U)

	)

5275 
	#USB_COUNT1_RX_COUNT1_RX_Msk
 (0x3FFUL << 
USB_COUNT1_RX_COUNT1_RX_Pos
Ë

	)

5276 
	#USB_COUNT1_RX_COUNT1_RX
 
USB_COUNT1_RX_COUNT1_RX_Msk


	)

5278 
	#USB_COUNT1_RX_NUM_BLOCK_Pos
 (10U)

	)

5279 
	#USB_COUNT1_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5280 
	#USB_COUNT1_RX_NUM_BLOCK
 
USB_COUNT1_RX_NUM_BLOCK_Msk


	)

5281 
	#USB_COUNT1_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5282 
	#USB_COUNT1_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5283 
	#USB_COUNT1_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5284 
	#USB_COUNT1_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5285 
	#USB_COUNT1_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5287 
	#USB_COUNT1_RX_BLSIZE_Pos
 (15U)

	)

5288 
	#USB_COUNT1_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT1_RX_BLSIZE_Pos
Ë

	)

5289 
	#USB_COUNT1_RX_BLSIZE
 
USB_COUNT1_RX_BLSIZE_Msk


	)

5292 
	#USB_COUNT2_RX_COUNT2_RX_Pos
 (0U)

	)

5293 
	#USB_COUNT2_RX_COUNT2_RX_Msk
 (0x3FFUL << 
USB_COUNT2_RX_COUNT2_RX_Pos
Ë

	)

5294 
	#USB_COUNT2_RX_COUNT2_RX
 
USB_COUNT2_RX_COUNT2_RX_Msk


	)

5296 
	#USB_COUNT2_RX_NUM_BLOCK_Pos
 (10U)

	)

5297 
	#USB_COUNT2_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5298 
	#USB_COUNT2_RX_NUM_BLOCK
 
USB_COUNT2_RX_NUM_BLOCK_Msk


	)

5299 
	#USB_COUNT2_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5300 
	#USB_COUNT2_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5301 
	#USB_COUNT2_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5302 
	#USB_COUNT2_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5303 
	#USB_COUNT2_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5305 
	#USB_COUNT2_RX_BLSIZE_Pos
 (15U)

	)

5306 
	#USB_COUNT2_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT2_RX_BLSIZE_Pos
Ë

	)

5307 
	#USB_COUNT2_RX_BLSIZE
 
USB_COUNT2_RX_BLSIZE_Msk


	)

5310 
	#USB_COUNT3_RX_COUNT3_RX_Pos
 (0U)

	)

5311 
	#USB_COUNT3_RX_COUNT3_RX_Msk
 (0x3FFUL << 
USB_COUNT3_RX_COUNT3_RX_Pos
Ë

	)

5312 
	#USB_COUNT3_RX_COUNT3_RX
 
USB_COUNT3_RX_COUNT3_RX_Msk


	)

5314 
	#USB_COUNT3_RX_NUM_BLOCK_Pos
 (10U)

	)

5315 
	#USB_COUNT3_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5316 
	#USB_COUNT3_RX_NUM_BLOCK
 
USB_COUNT3_RX_NUM_BLOCK_Msk


	)

5317 
	#USB_COUNT3_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5318 
	#USB_COUNT3_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5319 
	#USB_COUNT3_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5320 
	#USB_COUNT3_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5321 
	#USB_COUNT3_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5323 
	#USB_COUNT3_RX_BLSIZE_Pos
 (15U)

	)

5324 
	#USB_COUNT3_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT3_RX_BLSIZE_Pos
Ë

	)

5325 
	#USB_COUNT3_RX_BLSIZE
 
USB_COUNT3_RX_BLSIZE_Msk


	)

5328 
	#USB_COUNT4_RX_COUNT4_RX_Pos
 (0U)

	)

5329 
	#USB_COUNT4_RX_COUNT4_RX_Msk
 (0x3FFUL << 
USB_COUNT4_RX_COUNT4_RX_Pos
Ë

	)

5330 
	#USB_COUNT4_RX_COUNT4_RX
 
USB_COUNT4_RX_COUNT4_RX_Msk


	)

5332 
	#USB_COUNT4_RX_NUM_BLOCK_Pos
 (10U)

	)

5333 
	#USB_COUNT4_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5334 
	#USB_COUNT4_RX_NUM_BLOCK
 
USB_COUNT4_RX_NUM_BLOCK_Msk


	)

5335 
	#USB_COUNT4_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5336 
	#USB_COUNT4_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5337 
	#USB_COUNT4_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5338 
	#USB_COUNT4_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5339 
	#USB_COUNT4_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5341 
	#USB_COUNT4_RX_BLSIZE_Pos
 (15U)

	)

5342 
	#USB_COUNT4_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT4_RX_BLSIZE_Pos
Ë

	)

5343 
	#USB_COUNT4_RX_BLSIZE
 
USB_COUNT4_RX_BLSIZE_Msk


	)

5346 
	#USB_COUNT5_RX_COUNT5_RX_Pos
 (0U)

	)

5347 
	#USB_COUNT5_RX_COUNT5_RX_Msk
 (0x3FFUL << 
USB_COUNT5_RX_COUNT5_RX_Pos
Ë

	)

5348 
	#USB_COUNT5_RX_COUNT5_RX
 
USB_COUNT5_RX_COUNT5_RX_Msk


	)

5350 
	#USB_COUNT5_RX_NUM_BLOCK_Pos
 (10U)

	)

5351 
	#USB_COUNT5_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5352 
	#USB_COUNT5_RX_NUM_BLOCK
 
USB_COUNT5_RX_NUM_BLOCK_Msk


	)

5353 
	#USB_COUNT5_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5354 
	#USB_COUNT5_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5355 
	#USB_COUNT5_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5356 
	#USB_COUNT5_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5357 
	#USB_COUNT5_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5359 
	#USB_COUNT5_RX_BLSIZE_Pos
 (15U)

	)

5360 
	#USB_COUNT5_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT5_RX_BLSIZE_Pos
Ë

	)

5361 
	#USB_COUNT5_RX_BLSIZE
 
USB_COUNT5_RX_BLSIZE_Msk


	)

5364 
	#USB_COUNT6_RX_COUNT6_RX_Pos
 (0U)

	)

5365 
	#USB_COUNT6_RX_COUNT6_RX_Msk
 (0x3FFUL << 
USB_COUNT6_RX_COUNT6_RX_Pos
Ë

	)

5366 
	#USB_COUNT6_RX_COUNT6_RX
 
USB_COUNT6_RX_COUNT6_RX_Msk


	)

5368 
	#USB_COUNT6_RX_NUM_BLOCK_Pos
 (10U)

	)

5369 
	#USB_COUNT6_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5370 
	#USB_COUNT6_RX_NUM_BLOCK
 
USB_COUNT6_RX_NUM_BLOCK_Msk


	)

5371 
	#USB_COUNT6_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5372 
	#USB_COUNT6_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5373 
	#USB_COUNT6_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5374 
	#USB_COUNT6_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5375 
	#USB_COUNT6_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5377 
	#USB_COUNT6_RX_BLSIZE_Pos
 (15U)

	)

5378 
	#USB_COUNT6_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT6_RX_BLSIZE_Pos
Ë

	)

5379 
	#USB_COUNT6_RX_BLSIZE
 
USB_COUNT6_RX_BLSIZE_Msk


	)

5382 
	#USB_COUNT7_RX_COUNT7_RX_Pos
 (0U)

	)

5383 
	#USB_COUNT7_RX_COUNT7_RX_Msk
 (0x3FFUL << 
USB_COUNT7_RX_COUNT7_RX_Pos
Ë

	)

5384 
	#USB_COUNT7_RX_COUNT7_RX
 
USB_COUNT7_RX_COUNT7_RX_Msk


	)

5386 
	#USB_COUNT7_RX_NUM_BLOCK_Pos
 (10U)

	)

5387 
	#USB_COUNT7_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5388 
	#USB_COUNT7_RX_NUM_BLOCK
 
USB_COUNT7_RX_NUM_BLOCK_Msk


	)

5389 
	#USB_COUNT7_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5390 
	#USB_COUNT7_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5391 
	#USB_COUNT7_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5392 
	#USB_COUNT7_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5393 
	#USB_COUNT7_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5395 
	#USB_COUNT7_RX_BLSIZE_Pos
 (15U)

	)

5396 
	#USB_COUNT7_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT7_RX_BLSIZE_Pos
Ë

	)

5397 
	#USB_COUNT7_RX_BLSIZE
 
USB_COUNT7_RX_BLSIZE_Msk


	)

5402 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 0x000003FFU

	)

5404 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5405 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5406 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5407 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5408 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5409 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5411 
	#USB_COUNT0_RX_0_BLSIZE_0
 0x00008000U

	)

5414 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 0x03FF0000U

	)

5416 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5417 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5418 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5419 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5420 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5421 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5423 
	#USB_COUNT0_RX_1_BLSIZE_1
 0x80000000U

	)

5426 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 0x000003FFU

	)

5428 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5429 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5430 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5431 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5432 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5433 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5435 
	#USB_COUNT1_RX_0_BLSIZE_0
 0x00008000U

	)

5438 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 0x03FF0000U

	)

5440 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5441 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5442 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5443 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5444 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5445 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5447 
	#USB_COUNT1_RX_1_BLSIZE_1
 0x80000000U

	)

5450 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 0x000003FFU

	)

5452 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5453 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5454 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5455 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5456 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5457 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5459 
	#USB_COUNT2_RX_0_BLSIZE_0
 0x00008000U

	)

5462 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 0x03FF0000U

	)

5464 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5465 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5466 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5467 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5468 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5469 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5471 
	#USB_COUNT2_RX_1_BLSIZE_1
 0x80000000U

	)

5474 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 0x000003FFU

	)

5476 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5477 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5478 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5479 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5480 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5481 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5483 
	#USB_COUNT3_RX_0_BLSIZE_0
 0x00008000U

	)

5486 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 0x03FF0000U

	)

5488 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5489 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5490 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5491 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5492 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5493 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5495 
	#USB_COUNT3_RX_1_BLSIZE_1
 0x80000000U

	)

5498 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 0x000003FFU

	)

5500 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5501 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5502 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5503 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5504 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5505 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5507 
	#USB_COUNT4_RX_0_BLSIZE_0
 0x00008000U

	)

5510 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 0x03FF0000U

	)

5512 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5513 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5514 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5515 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5516 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5517 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5519 
	#USB_COUNT4_RX_1_BLSIZE_1
 0x80000000U

	)

5522 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 0x000003FFU

	)

5524 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5525 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5526 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5527 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5528 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5529 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5531 
	#USB_COUNT5_RX_0_BLSIZE_0
 0x00008000U

	)

5534 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 0x03FF0000U

	)

5536 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5537 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5538 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5539 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5540 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5541 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5543 
	#USB_COUNT5_RX_1_BLSIZE_1
 0x80000000U

	)

5546 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 0x000003FFU

	)

5548 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5549 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5550 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5551 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5552 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5553 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5555 
	#USB_COUNT6_RX_0_BLSIZE_0
 0x00008000U

	)

5558 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 0x03FF0000U

	)

5560 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5561 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5562 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5563 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5564 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5565 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5567 
	#USB_COUNT6_RX_1_BLSIZE_1
 0x80000000U

	)

5570 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 0x000003FFU

	)

5572 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5573 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5574 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5575 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5576 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5577 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5579 
	#USB_COUNT7_RX_0_BLSIZE_0
 0x00008000U

	)

5582 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 0x03FF0000U

	)

5584 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5585 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5586 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5587 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5588 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5589 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5591 
	#USB_COUNT7_RX_1_BLSIZE_1
 0x80000000U

	)

5601 
	#CAN_MCR_INRQ_Pos
 (0U)

	)

5602 
	#CAN_MCR_INRQ_Msk
 (0x1UL << 
CAN_MCR_INRQ_Pos
Ë

	)

5603 
	#CAN_MCR_INRQ
 
CAN_MCR_INRQ_Msk


	)

5604 
	#CAN_MCR_SLEEP_Pos
 (1U)

	)

5605 
	#CAN_MCR_SLEEP_Msk
 (0x1UL << 
CAN_MCR_SLEEP_Pos
Ë

	)

5606 
	#CAN_MCR_SLEEP
 
CAN_MCR_SLEEP_Msk


	)

5607 
	#CAN_MCR_TXFP_Pos
 (2U)

	)

5608 
	#CAN_MCR_TXFP_Msk
 (0x1UL << 
CAN_MCR_TXFP_Pos
Ë

	)

5609 
	#CAN_MCR_TXFP
 
CAN_MCR_TXFP_Msk


	)

5610 
	#CAN_MCR_RFLM_Pos
 (3U)

	)

5611 
	#CAN_MCR_RFLM_Msk
 (0x1UL << 
CAN_MCR_RFLM_Pos
Ë

	)

5612 
	#CAN_MCR_RFLM
 
CAN_MCR_RFLM_Msk


	)

5613 
	#CAN_MCR_NART_Pos
 (4U)

	)

5614 
	#CAN_MCR_NART_Msk
 (0x1UL << 
CAN_MCR_NART_Pos
Ë

	)

5615 
	#CAN_MCR_NART
 
CAN_MCR_NART_Msk


	)

5616 
	#CAN_MCR_AWUM_Pos
 (5U)

	)

5617 
	#CAN_MCR_AWUM_Msk
 (0x1UL << 
CAN_MCR_AWUM_Pos
Ë

	)

5618 
	#CAN_MCR_AWUM
 
CAN_MCR_AWUM_Msk


	)

5619 
	#CAN_MCR_ABOM_Pos
 (6U)

	)

5620 
	#CAN_MCR_ABOM_Msk
 (0x1UL << 
CAN_MCR_ABOM_Pos
Ë

	)

5621 
	#CAN_MCR_ABOM
 
CAN_MCR_ABOM_Msk


	)

5622 
	#CAN_MCR_TTCM_Pos
 (7U)

	)

5623 
	#CAN_MCR_TTCM_Msk
 (0x1UL << 
CAN_MCR_TTCM_Pos
Ë

	)

5624 
	#CAN_MCR_TTCM
 
CAN_MCR_TTCM_Msk


	)

5625 
	#CAN_MCR_RESET_Pos
 (15U)

	)

5626 
	#CAN_MCR_RESET_Msk
 (0x1UL << 
CAN_MCR_RESET_Pos
Ë

	)

5627 
	#CAN_MCR_RESET
 
CAN_MCR_RESET_Msk


	)

5628 
	#CAN_MCR_DBF_Pos
 (16U)

	)

5629 
	#CAN_MCR_DBF_Msk
 (0x1UL << 
CAN_MCR_DBF_Pos
Ë

	)

5630 
	#CAN_MCR_DBF
 
CAN_MCR_DBF_Msk


	)

5633 
	#CAN_MSR_INAK_Pos
 (0U)

	)

5634 
	#CAN_MSR_INAK_Msk
 (0x1UL << 
CAN_MSR_INAK_Pos
Ë

	)

5635 
	#CAN_MSR_INAK
 
CAN_MSR_INAK_Msk


	)

5636 
	#CAN_MSR_SLAK_Pos
 (1U)

	)

5637 
	#CAN_MSR_SLAK_Msk
 (0x1UL << 
CAN_MSR_SLAK_Pos
Ë

	)

5638 
	#CAN_MSR_SLAK
 
CAN_MSR_SLAK_Msk


	)

5639 
	#CAN_MSR_ERRI_Pos
 (2U)

	)

5640 
	#CAN_MSR_ERRI_Msk
 (0x1UL << 
CAN_MSR_ERRI_Pos
Ë

	)

5641 
	#CAN_MSR_ERRI
 
CAN_MSR_ERRI_Msk


	)

5642 
	#CAN_MSR_WKUI_Pos
 (3U)

	)

5643 
	#CAN_MSR_WKUI_Msk
 (0x1UL << 
CAN_MSR_WKUI_Pos
Ë

	)

5644 
	#CAN_MSR_WKUI
 
CAN_MSR_WKUI_Msk


	)

5645 
	#CAN_MSR_SLAKI_Pos
 (4U)

	)

5646 
	#CAN_MSR_SLAKI_Msk
 (0x1UL << 
CAN_MSR_SLAKI_Pos
Ë

	)

5647 
	#CAN_MSR_SLAKI
 
CAN_MSR_SLAKI_Msk


	)

5648 
	#CAN_MSR_TXM_Pos
 (8U)

	)

5649 
	#CAN_MSR_TXM_Msk
 (0x1UL << 
CAN_MSR_TXM_Pos
Ë

	)

5650 
	#CAN_MSR_TXM
 
CAN_MSR_TXM_Msk


	)

5651 
	#CAN_MSR_RXM_Pos
 (9U)

	)

5652 
	#CAN_MSR_RXM_Msk
 (0x1UL << 
CAN_MSR_RXM_Pos
Ë

	)

5653 
	#CAN_MSR_RXM
 
CAN_MSR_RXM_Msk


	)

5654 
	#CAN_MSR_SAMP_Pos
 (10U)

	)

5655 
	#CAN_MSR_SAMP_Msk
 (0x1UL << 
CAN_MSR_SAMP_Pos
Ë

	)

5656 
	#CAN_MSR_SAMP
 
CAN_MSR_SAMP_Msk


	)

5657 
	#CAN_MSR_RX_Pos
 (11U)

	)

5658 
	#CAN_MSR_RX_Msk
 (0x1UL << 
CAN_MSR_RX_Pos
Ë

	)

5659 
	#CAN_MSR_RX
 
CAN_MSR_RX_Msk


	)

5662 
	#CAN_TSR_RQCP0_Pos
 (0U)

	)

5663 
	#CAN_TSR_RQCP0_Msk
 (0x1UL << 
CAN_TSR_RQCP0_Pos
Ë

	)

5664 
	#CAN_TSR_RQCP0
 
CAN_TSR_RQCP0_Msk


	)

5665 
	#CAN_TSR_TXOK0_Pos
 (1U)

	)

5666 
	#CAN_TSR_TXOK0_Msk
 (0x1UL << 
CAN_TSR_TXOK0_Pos
Ë

	)

5667 
	#CAN_TSR_TXOK0
 
CAN_TSR_TXOK0_Msk


	)

5668 
	#CAN_TSR_ALST0_Pos
 (2U)

	)

5669 
	#CAN_TSR_ALST0_Msk
 (0x1UL << 
CAN_TSR_ALST0_Pos
Ë

	)

5670 
	#CAN_TSR_ALST0
 
CAN_TSR_ALST0_Msk


	)

5671 
	#CAN_TSR_TERR0_Pos
 (3U)

	)

5672 
	#CAN_TSR_TERR0_Msk
 (0x1UL << 
CAN_TSR_TERR0_Pos
Ë

	)

5673 
	#CAN_TSR_TERR0
 
CAN_TSR_TERR0_Msk


	)

5674 
	#CAN_TSR_ABRQ0_Pos
 (7U)

	)

5675 
	#CAN_TSR_ABRQ0_Msk
 (0x1UL << 
CAN_TSR_ABRQ0_Pos
Ë

	)

5676 
	#CAN_TSR_ABRQ0
 
CAN_TSR_ABRQ0_Msk


	)

5677 
	#CAN_TSR_RQCP1_Pos
 (8U)

	)

5678 
	#CAN_TSR_RQCP1_Msk
 (0x1UL << 
CAN_TSR_RQCP1_Pos
Ë

	)

5679 
	#CAN_TSR_RQCP1
 
CAN_TSR_RQCP1_Msk


	)

5680 
	#CAN_TSR_TXOK1_Pos
 (9U)

	)

5681 
	#CAN_TSR_TXOK1_Msk
 (0x1UL << 
CAN_TSR_TXOK1_Pos
Ë

	)

5682 
	#CAN_TSR_TXOK1
 
CAN_TSR_TXOK1_Msk


	)

5683 
	#CAN_TSR_ALST1_Pos
 (10U)

	)

5684 
	#CAN_TSR_ALST1_Msk
 (0x1UL << 
CAN_TSR_ALST1_Pos
Ë

	)

5685 
	#CAN_TSR_ALST1
 
CAN_TSR_ALST1_Msk


	)

5686 
	#CAN_TSR_TERR1_Pos
 (11U)

	)

5687 
	#CAN_TSR_TERR1_Msk
 (0x1UL << 
CAN_TSR_TERR1_Pos
Ë

	)

5688 
	#CAN_TSR_TERR1
 
CAN_TSR_TERR1_Msk


	)

5689 
	#CAN_TSR_ABRQ1_Pos
 (15U)

	)

5690 
	#CAN_TSR_ABRQ1_Msk
 (0x1UL << 
CAN_TSR_ABRQ1_Pos
Ë

	)

5691 
	#CAN_TSR_ABRQ1
 
CAN_TSR_ABRQ1_Msk


	)

5692 
	#CAN_TSR_RQCP2_Pos
 (16U)

	)

5693 
	#CAN_TSR_RQCP2_Msk
 (0x1UL << 
CAN_TSR_RQCP2_Pos
Ë

	)

5694 
	#CAN_TSR_RQCP2
 
CAN_TSR_RQCP2_Msk


	)

5695 
	#CAN_TSR_TXOK2_Pos
 (17U)

	)

5696 
	#CAN_TSR_TXOK2_Msk
 (0x1UL << 
CAN_TSR_TXOK2_Pos
Ë

	)

5697 
	#CAN_TSR_TXOK2
 
CAN_TSR_TXOK2_Msk


	)

5698 
	#CAN_TSR_ALST2_Pos
 (18U)

	)

5699 
	#CAN_TSR_ALST2_Msk
 (0x1UL << 
CAN_TSR_ALST2_Pos
Ë

	)

5700 
	#CAN_TSR_ALST2
 
CAN_TSR_ALST2_Msk


	)

5701 
	#CAN_TSR_TERR2_Pos
 (19U)

	)

5702 
	#CAN_TSR_TERR2_Msk
 (0x1UL << 
CAN_TSR_TERR2_Pos
Ë

	)

5703 
	#CAN_TSR_TERR2
 
CAN_TSR_TERR2_Msk


	)

5704 
	#CAN_TSR_ABRQ2_Pos
 (23U)

	)

5705 
	#CAN_TSR_ABRQ2_Msk
 (0x1UL << 
CAN_TSR_ABRQ2_Pos
Ë

	)

5706 
	#CAN_TSR_ABRQ2
 
CAN_TSR_ABRQ2_Msk


	)

5707 
	#CAN_TSR_CODE_Pos
 (24U)

	)

5708 
	#CAN_TSR_CODE_Msk
 (0x3UL << 
CAN_TSR_CODE_Pos
Ë

	)

5709 
	#CAN_TSR_CODE
 
CAN_TSR_CODE_Msk


	)

5711 
	#CAN_TSR_TME_Pos
 (26U)

	)

5712 
	#CAN_TSR_TME_Msk
 (0x7UL << 
CAN_TSR_TME_Pos
Ë

	)

5713 
	#CAN_TSR_TME
 
CAN_TSR_TME_Msk


	)

5714 
	#CAN_TSR_TME0_Pos
 (26U)

	)

5715 
	#CAN_TSR_TME0_Msk
 (0x1UL << 
CAN_TSR_TME0_Pos
Ë

	)

5716 
	#CAN_TSR_TME0
 
CAN_TSR_TME0_Msk


	)

5717 
	#CAN_TSR_TME1_Pos
 (27U)

	)

5718 
	#CAN_TSR_TME1_Msk
 (0x1UL << 
CAN_TSR_TME1_Pos
Ë

	)

5719 
	#CAN_TSR_TME1
 
CAN_TSR_TME1_Msk


	)

5720 
	#CAN_TSR_TME2_Pos
 (28U)

	)

5721 
	#CAN_TSR_TME2_Msk
 (0x1UL << 
CAN_TSR_TME2_Pos
Ë

	)

5722 
	#CAN_TSR_TME2
 
CAN_TSR_TME2_Msk


	)

5724 
	#CAN_TSR_LOW_Pos
 (29U)

	)

5725 
	#CAN_TSR_LOW_Msk
 (0x7UL << 
CAN_TSR_LOW_Pos
Ë

	)

5726 
	#CAN_TSR_LOW
 
CAN_TSR_LOW_Msk


	)

5727 
	#CAN_TSR_LOW0_Pos
 (29U)

	)

5728 
	#CAN_TSR_LOW0_Msk
 (0x1UL << 
CAN_TSR_LOW0_Pos
Ë

	)

5729 
	#CAN_TSR_LOW0
 
CAN_TSR_LOW0_Msk


	)

5730 
	#CAN_TSR_LOW1_Pos
 (30U)

	)

5731 
	#CAN_TSR_LOW1_Msk
 (0x1UL << 
CAN_TSR_LOW1_Pos
Ë

	)

5732 
	#CAN_TSR_LOW1
 
CAN_TSR_LOW1_Msk


	)

5733 
	#CAN_TSR_LOW2_Pos
 (31U)

	)

5734 
	#CAN_TSR_LOW2_Msk
 (0x1UL << 
CAN_TSR_LOW2_Pos
Ë

	)

5735 
	#CAN_TSR_LOW2
 
CAN_TSR_LOW2_Msk


	)

5738 
	#CAN_RF0R_FMP0_Pos
 (0U)

	)

5739 
	#CAN_RF0R_FMP0_Msk
 (0x3UL << 
CAN_RF0R_FMP0_Pos
Ë

	)

5740 
	#CAN_RF0R_FMP0
 
CAN_RF0R_FMP0_Msk


	)

5741 
	#CAN_RF0R_FULL0_Pos
 (3U)

	)

5742 
	#CAN_RF0R_FULL0_Msk
 (0x1UL << 
CAN_RF0R_FULL0_Pos
Ë

	)

5743 
	#CAN_RF0R_FULL0
 
CAN_RF0R_FULL0_Msk


	)

5744 
	#CAN_RF0R_FOVR0_Pos
 (4U)

	)

5745 
	#CAN_RF0R_FOVR0_Msk
 (0x1UL << 
CAN_RF0R_FOVR0_Pos
Ë

	)

5746 
	#CAN_RF0R_FOVR0
 
CAN_RF0R_FOVR0_Msk


	)

5747 
	#CAN_RF0R_RFOM0_Pos
 (5U)

	)

5748 
	#CAN_RF0R_RFOM0_Msk
 (0x1UL << 
CAN_RF0R_RFOM0_Pos
Ë

	)

5749 
	#CAN_RF0R_RFOM0
 
CAN_RF0R_RFOM0_Msk


	)

5752 
	#CAN_RF1R_FMP1_Pos
 (0U)

	)

5753 
	#CAN_RF1R_FMP1_Msk
 (0x3UL << 
CAN_RF1R_FMP1_Pos
Ë

	)

5754 
	#CAN_RF1R_FMP1
 
CAN_RF1R_FMP1_Msk


	)

5755 
	#CAN_RF1R_FULL1_Pos
 (3U)

	)

5756 
	#CAN_RF1R_FULL1_Msk
 (0x1UL << 
CAN_RF1R_FULL1_Pos
Ë

	)

5757 
	#CAN_RF1R_FULL1
 
CAN_RF1R_FULL1_Msk


	)

5758 
	#CAN_RF1R_FOVR1_Pos
 (4U)

	)

5759 
	#CAN_RF1R_FOVR1_Msk
 (0x1UL << 
CAN_RF1R_FOVR1_Pos
Ë

	)

5760 
	#CAN_RF1R_FOVR1
 
CAN_RF1R_FOVR1_Msk


	)

5761 
	#CAN_RF1R_RFOM1_Pos
 (5U)

	)

5762 
	#CAN_RF1R_RFOM1_Msk
 (0x1UL << 
CAN_RF1R_RFOM1_Pos
Ë

	)

5763 
	#CAN_RF1R_RFOM1
 
CAN_RF1R_RFOM1_Msk


	)

5766 
	#CAN_IER_TMEIE_Pos
 (0U)

	)

5767 
	#CAN_IER_TMEIE_Msk
 (0x1UL << 
CAN_IER_TMEIE_Pos
Ë

	)

5768 
	#CAN_IER_TMEIE
 
CAN_IER_TMEIE_Msk


	)

5769 
	#CAN_IER_FMPIE0_Pos
 (1U)

	)

5770 
	#CAN_IER_FMPIE0_Msk
 (0x1UL << 
CAN_IER_FMPIE0_Pos
Ë

	)

5771 
	#CAN_IER_FMPIE0
 
CAN_IER_FMPIE0_Msk


	)

5772 
	#CAN_IER_FFIE0_Pos
 (2U)

	)

5773 
	#CAN_IER_FFIE0_Msk
 (0x1UL << 
CAN_IER_FFIE0_Pos
Ë

	)

5774 
	#CAN_IER_FFIE0
 
CAN_IER_FFIE0_Msk


	)

5775 
	#CAN_IER_FOVIE0_Pos
 (3U)

	)

5776 
	#CAN_IER_FOVIE0_Msk
 (0x1UL << 
CAN_IER_FOVIE0_Pos
Ë

	)

5777 
	#CAN_IER_FOVIE0
 
CAN_IER_FOVIE0_Msk


	)

5778 
	#CAN_IER_FMPIE1_Pos
 (4U)

	)

5779 
	#CAN_IER_FMPIE1_Msk
 (0x1UL << 
CAN_IER_FMPIE1_Pos
Ë

	)

5780 
	#CAN_IER_FMPIE1
 
CAN_IER_FMPIE1_Msk


	)

5781 
	#CAN_IER_FFIE1_Pos
 (5U)

	)

5782 
	#CAN_IER_FFIE1_Msk
 (0x1UL << 
CAN_IER_FFIE1_Pos
Ë

	)

5783 
	#CAN_IER_FFIE1
 
CAN_IER_FFIE1_Msk


	)

5784 
	#CAN_IER_FOVIE1_Pos
 (6U)

	)

5785 
	#CAN_IER_FOVIE1_Msk
 (0x1UL << 
CAN_IER_FOVIE1_Pos
Ë

	)

5786 
	#CAN_IER_FOVIE1
 
CAN_IER_FOVIE1_Msk


	)

5787 
	#CAN_IER_EWGIE_Pos
 (8U)

	)

5788 
	#CAN_IER_EWGIE_Msk
 (0x1UL << 
CAN_IER_EWGIE_Pos
Ë

	)

5789 
	#CAN_IER_EWGIE
 
CAN_IER_EWGIE_Msk


	)

5790 
	#CAN_IER_EPVIE_Pos
 (9U)

	)

5791 
	#CAN_IER_EPVIE_Msk
 (0x1UL << 
CAN_IER_EPVIE_Pos
Ë

	)

5792 
	#CAN_IER_EPVIE
 
CAN_IER_EPVIE_Msk


	)

5793 
	#CAN_IER_BOFIE_Pos
 (10U)

	)

5794 
	#CAN_IER_BOFIE_Msk
 (0x1UL << 
CAN_IER_BOFIE_Pos
Ë

	)

5795 
	#CAN_IER_BOFIE
 
CAN_IER_BOFIE_Msk


	)

5796 
	#CAN_IER_LECIE_Pos
 (11U)

	)

5797 
	#CAN_IER_LECIE_Msk
 (0x1UL << 
CAN_IER_LECIE_Pos
Ë

	)

5798 
	#CAN_IER_LECIE
 
CAN_IER_LECIE_Msk


	)

5799 
	#CAN_IER_ERRIE_Pos
 (15U)

	)

5800 
	#CAN_IER_ERRIE_Msk
 (0x1UL << 
CAN_IER_ERRIE_Pos
Ë

	)

5801 
	#CAN_IER_ERRIE
 
CAN_IER_ERRIE_Msk


	)

5802 
	#CAN_IER_WKUIE_Pos
 (16U)

	)

5803 
	#CAN_IER_WKUIE_Msk
 (0x1UL << 
CAN_IER_WKUIE_Pos
Ë

	)

5804 
	#CAN_IER_WKUIE
 
CAN_IER_WKUIE_Msk


	)

5805 
	#CAN_IER_SLKIE_Pos
 (17U)

	)

5806 
	#CAN_IER_SLKIE_Msk
 (0x1UL << 
CAN_IER_SLKIE_Pos
Ë

	)

5807 
	#CAN_IER_SLKIE
 
CAN_IER_SLKIE_Msk


	)

5810 
	#CAN_ESR_EWGF_Pos
 (0U)

	)

5811 
	#CAN_ESR_EWGF_Msk
 (0x1UL << 
CAN_ESR_EWGF_Pos
Ë

	)

5812 
	#CAN_ESR_EWGF
 
CAN_ESR_EWGF_Msk


	)

5813 
	#CAN_ESR_EPVF_Pos
 (1U)

	)

5814 
	#CAN_ESR_EPVF_Msk
 (0x1UL << 
CAN_ESR_EPVF_Pos
Ë

	)

5815 
	#CAN_ESR_EPVF
 
CAN_ESR_EPVF_Msk


	)

5816 
	#CAN_ESR_BOFF_Pos
 (2U)

	)

5817 
	#CAN_ESR_BOFF_Msk
 (0x1UL << 
CAN_ESR_BOFF_Pos
Ë

	)

5818 
	#CAN_ESR_BOFF
 
CAN_ESR_BOFF_Msk


	)

5820 
	#CAN_ESR_LEC_Pos
 (4U)

	)

5821 
	#CAN_ESR_LEC_Msk
 (0x7UL << 
CAN_ESR_LEC_Pos
Ë

	)

5822 
	#CAN_ESR_LEC
 
CAN_ESR_LEC_Msk


	)

5823 
	#CAN_ESR_LEC_0
 (0x1UL << 
CAN_ESR_LEC_Pos
Ë

	)

5824 
	#CAN_ESR_LEC_1
 (0x2UL << 
CAN_ESR_LEC_Pos
Ë

	)

5825 
	#CAN_ESR_LEC_2
 (0x4UL << 
CAN_ESR_LEC_Pos
Ë

	)

5827 
	#CAN_ESR_TEC_Pos
 (16U)

	)

5828 
	#CAN_ESR_TEC_Msk
 (0xFFUL << 
CAN_ESR_TEC_Pos
Ë

	)

5829 
	#CAN_ESR_TEC
 
CAN_ESR_TEC_Msk


	)

5830 
	#CAN_ESR_REC_Pos
 (24U)

	)

5831 
	#CAN_ESR_REC_Msk
 (0xFFUL << 
CAN_ESR_REC_Pos
Ë

	)

5832 
	#CAN_ESR_REC
 
CAN_ESR_REC_Msk


	)

5835 
	#CAN_BTR_BRP_Pos
 (0U)

	)

5836 
	#CAN_BTR_BRP_Msk
 (0x3FFUL << 
CAN_BTR_BRP_Pos
Ë

	)

5837 
	#CAN_BTR_BRP
 
CAN_BTR_BRP_Msk


	)

5838 
	#CAN_BTR_TS1_Pos
 (16U)

	)

5839 
	#CAN_BTR_TS1_Msk
 (0xFUL << 
CAN_BTR_TS1_Pos
Ë

	)

5840 
	#CAN_BTR_TS1
 
CAN_BTR_TS1_Msk


	)

5841 
	#CAN_BTR_TS1_0
 (0x1UL << 
CAN_BTR_TS1_Pos
Ë

	)

5842 
	#CAN_BTR_TS1_1
 (0x2UL << 
CAN_BTR_TS1_Pos
Ë

	)

5843 
	#CAN_BTR_TS1_2
 (0x4UL << 
CAN_BTR_TS1_Pos
Ë

	)

5844 
	#CAN_BTR_TS1_3
 (0x8UL << 
CAN_BTR_TS1_Pos
Ë

	)

5845 
	#CAN_BTR_TS2_Pos
 (20U)

	)

5846 
	#CAN_BTR_TS2_Msk
 (0x7UL << 
CAN_BTR_TS2_Pos
Ë

	)

5847 
	#CAN_BTR_TS2
 
CAN_BTR_TS2_Msk


	)

5848 
	#CAN_BTR_TS2_0
 (0x1UL << 
CAN_BTR_TS2_Pos
Ë

	)

5849 
	#CAN_BTR_TS2_1
 (0x2UL << 
CAN_BTR_TS2_Pos
Ë

	)

5850 
	#CAN_BTR_TS2_2
 (0x4UL << 
CAN_BTR_TS2_Pos
Ë

	)

5851 
	#CAN_BTR_SJW_Pos
 (24U)

	)

5852 
	#CAN_BTR_SJW_Msk
 (0x3UL << 
CAN_BTR_SJW_Pos
Ë

	)

5853 
	#CAN_BTR_SJW
 
CAN_BTR_SJW_Msk


	)

5854 
	#CAN_BTR_SJW_0
 (0x1UL << 
CAN_BTR_SJW_Pos
Ë

	)

5855 
	#CAN_BTR_SJW_1
 (0x2UL << 
CAN_BTR_SJW_Pos
Ë

	)

5856 
	#CAN_BTR_LBKM_Pos
 (30U)

	)

5857 
	#CAN_BTR_LBKM_Msk
 (0x1UL << 
CAN_BTR_LBKM_Pos
Ë

	)

5858 
	#CAN_BTR_LBKM
 
CAN_BTR_LBKM_Msk


	)

5859 
	#CAN_BTR_SILM_Pos
 (31U)

	)

5860 
	#CAN_BTR_SILM_Msk
 (0x1UL << 
CAN_BTR_SILM_Pos
Ë

	)

5861 
	#CAN_BTR_SILM
 
CAN_BTR_SILM_Msk


	)

5865 
	#CAN_TI0R_TXRQ_Pos
 (0U)

	)

5866 
	#CAN_TI0R_TXRQ_Msk
 (0x1UL << 
CAN_TI0R_TXRQ_Pos
Ë

	)

5867 
	#CAN_TI0R_TXRQ
 
CAN_TI0R_TXRQ_Msk


	)

5868 
	#CAN_TI0R_RTR_Pos
 (1U)

	)

5869 
	#CAN_TI0R_RTR_Msk
 (0x1UL << 
CAN_TI0R_RTR_Pos
Ë

	)

5870 
	#CAN_TI0R_RTR
 
CAN_TI0R_RTR_Msk


	)

5871 
	#CAN_TI0R_IDE_Pos
 (2U)

	)

5872 
	#CAN_TI0R_IDE_Msk
 (0x1UL << 
CAN_TI0R_IDE_Pos
Ë

	)

5873 
	#CAN_TI0R_IDE
 
CAN_TI0R_IDE_Msk


	)

5874 
	#CAN_TI0R_EXID_Pos
 (3U)

	)

5875 
	#CAN_TI0R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI0R_EXID_Pos
Ë

	)

5876 
	#CAN_TI0R_EXID
 
CAN_TI0R_EXID_Msk


	)

5877 
	#CAN_TI0R_STID_Pos
 (21U)

	)

5878 
	#CAN_TI0R_STID_Msk
 (0x7FFUL << 
CAN_TI0R_STID_Pos
Ë

	)

5879 
	#CAN_TI0R_STID
 
CAN_TI0R_STID_Msk


	)

5882 
	#CAN_TDT0R_DLC_Pos
 (0U)

	)

5883 
	#CAN_TDT0R_DLC_Msk
 (0xFUL << 
CAN_TDT0R_DLC_Pos
Ë

	)

5884 
	#CAN_TDT0R_DLC
 
CAN_TDT0R_DLC_Msk


	)

5885 
	#CAN_TDT0R_TGT_Pos
 (8U)

	)

5886 
	#CAN_TDT0R_TGT_Msk
 (0x1UL << 
CAN_TDT0R_TGT_Pos
Ë

	)

5887 
	#CAN_TDT0R_TGT
 
CAN_TDT0R_TGT_Msk


	)

5888 
	#CAN_TDT0R_TIME_Pos
 (16U)

	)

5889 
	#CAN_TDT0R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT0R_TIME_Pos
Ë

	)

5890 
	#CAN_TDT0R_TIME
 
CAN_TDT0R_TIME_Msk


	)

5893 
	#CAN_TDL0R_DATA0_Pos
 (0U)

	)

5894 
	#CAN_TDL0R_DATA0_Msk
 (0xFFUL << 
CAN_TDL0R_DATA0_Pos
Ë

	)

5895 
	#CAN_TDL0R_DATA0
 
CAN_TDL0R_DATA0_Msk


	)

5896 
	#CAN_TDL0R_DATA1_Pos
 (8U)

	)

5897 
	#CAN_TDL0R_DATA1_Msk
 (0xFFUL << 
CAN_TDL0R_DATA1_Pos
Ë

	)

5898 
	#CAN_TDL0R_DATA1
 
CAN_TDL0R_DATA1_Msk


	)

5899 
	#CAN_TDL0R_DATA2_Pos
 (16U)

	)

5900 
	#CAN_TDL0R_DATA2_Msk
 (0xFFUL << 
CAN_TDL0R_DATA2_Pos
Ë

	)

5901 
	#CAN_TDL0R_DATA2
 
CAN_TDL0R_DATA2_Msk


	)

5902 
	#CAN_TDL0R_DATA3_Pos
 (24U)

	)

5903 
	#CAN_TDL0R_DATA3_Msk
 (0xFFUL << 
CAN_TDL0R_DATA3_Pos
Ë

	)

5904 
	#CAN_TDL0R_DATA3
 
CAN_TDL0R_DATA3_Msk


	)

5907 
	#CAN_TDH0R_DATA4_Pos
 (0U)

	)

5908 
	#CAN_TDH0R_DATA4_Msk
 (0xFFUL << 
CAN_TDH0R_DATA4_Pos
Ë

	)

5909 
	#CAN_TDH0R_DATA4
 
CAN_TDH0R_DATA4_Msk


	)

5910 
	#CAN_TDH0R_DATA5_Pos
 (8U)

	)

5911 
	#CAN_TDH0R_DATA5_Msk
 (0xFFUL << 
CAN_TDH0R_DATA5_Pos
Ë

	)

5912 
	#CAN_TDH0R_DATA5
 
CAN_TDH0R_DATA5_Msk


	)

5913 
	#CAN_TDH0R_DATA6_Pos
 (16U)

	)

5914 
	#CAN_TDH0R_DATA6_Msk
 (0xFFUL << 
CAN_TDH0R_DATA6_Pos
Ë

	)

5915 
	#CAN_TDH0R_DATA6
 
CAN_TDH0R_DATA6_Msk


	)

5916 
	#CAN_TDH0R_DATA7_Pos
 (24U)

	)

5917 
	#CAN_TDH0R_DATA7_Msk
 (0xFFUL << 
CAN_TDH0R_DATA7_Pos
Ë

	)

5918 
	#CAN_TDH0R_DATA7
 
CAN_TDH0R_DATA7_Msk


	)

5921 
	#CAN_TI1R_TXRQ_Pos
 (0U)

	)

5922 
	#CAN_TI1R_TXRQ_Msk
 (0x1UL << 
CAN_TI1R_TXRQ_Pos
Ë

	)

5923 
	#CAN_TI1R_TXRQ
 
CAN_TI1R_TXRQ_Msk


	)

5924 
	#CAN_TI1R_RTR_Pos
 (1U)

	)

5925 
	#CAN_TI1R_RTR_Msk
 (0x1UL << 
CAN_TI1R_RTR_Pos
Ë

	)

5926 
	#CAN_TI1R_RTR
 
CAN_TI1R_RTR_Msk


	)

5927 
	#CAN_TI1R_IDE_Pos
 (2U)

	)

5928 
	#CAN_TI1R_IDE_Msk
 (0x1UL << 
CAN_TI1R_IDE_Pos
Ë

	)

5929 
	#CAN_TI1R_IDE
 
CAN_TI1R_IDE_Msk


	)

5930 
	#CAN_TI1R_EXID_Pos
 (3U)

	)

5931 
	#CAN_TI1R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI1R_EXID_Pos
Ë

	)

5932 
	#CAN_TI1R_EXID
 
CAN_TI1R_EXID_Msk


	)

5933 
	#CAN_TI1R_STID_Pos
 (21U)

	)

5934 
	#CAN_TI1R_STID_Msk
 (0x7FFUL << 
CAN_TI1R_STID_Pos
Ë

	)

5935 
	#CAN_TI1R_STID
 
CAN_TI1R_STID_Msk


	)

5938 
	#CAN_TDT1R_DLC_Pos
 (0U)

	)

5939 
	#CAN_TDT1R_DLC_Msk
 (0xFUL << 
CAN_TDT1R_DLC_Pos
Ë

	)

5940 
	#CAN_TDT1R_DLC
 
CAN_TDT1R_DLC_Msk


	)

5941 
	#CAN_TDT1R_TGT_Pos
 (8U)

	)

5942 
	#CAN_TDT1R_TGT_Msk
 (0x1UL << 
CAN_TDT1R_TGT_Pos
Ë

	)

5943 
	#CAN_TDT1R_TGT
 
CAN_TDT1R_TGT_Msk


	)

5944 
	#CAN_TDT1R_TIME_Pos
 (16U)

	)

5945 
	#CAN_TDT1R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT1R_TIME_Pos
Ë

	)

5946 
	#CAN_TDT1R_TIME
 
CAN_TDT1R_TIME_Msk


	)

5949 
	#CAN_TDL1R_DATA0_Pos
 (0U)

	)

5950 
	#CAN_TDL1R_DATA0_Msk
 (0xFFUL << 
CAN_TDL1R_DATA0_Pos
Ë

	)

5951 
	#CAN_TDL1R_DATA0
 
CAN_TDL1R_DATA0_Msk


	)

5952 
	#CAN_TDL1R_DATA1_Pos
 (8U)

	)

5953 
	#CAN_TDL1R_DATA1_Msk
 (0xFFUL << 
CAN_TDL1R_DATA1_Pos
Ë

	)

5954 
	#CAN_TDL1R_DATA1
 
CAN_TDL1R_DATA1_Msk


	)

5955 
	#CAN_TDL1R_DATA2_Pos
 (16U)

	)

5956 
	#CAN_TDL1R_DATA2_Msk
 (0xFFUL << 
CAN_TDL1R_DATA2_Pos
Ë

	)

5957 
	#CAN_TDL1R_DATA2
 
CAN_TDL1R_DATA2_Msk


	)

5958 
	#CAN_TDL1R_DATA3_Pos
 (24U)

	)

5959 
	#CAN_TDL1R_DATA3_Msk
 (0xFFUL << 
CAN_TDL1R_DATA3_Pos
Ë

	)

5960 
	#CAN_TDL1R_DATA3
 
CAN_TDL1R_DATA3_Msk


	)

5963 
	#CAN_TDH1R_DATA4_Pos
 (0U)

	)

5964 
	#CAN_TDH1R_DATA4_Msk
 (0xFFUL << 
CAN_TDH1R_DATA4_Pos
Ë

	)

5965 
	#CAN_TDH1R_DATA4
 
CAN_TDH1R_DATA4_Msk


	)

5966 
	#CAN_TDH1R_DATA5_Pos
 (8U)

	)

5967 
	#CAN_TDH1R_DATA5_Msk
 (0xFFUL << 
CAN_TDH1R_DATA5_Pos
Ë

	)

5968 
	#CAN_TDH1R_DATA5
 
CAN_TDH1R_DATA5_Msk


	)

5969 
	#CAN_TDH1R_DATA6_Pos
 (16U)

	)

5970 
	#CAN_TDH1R_DATA6_Msk
 (0xFFUL << 
CAN_TDH1R_DATA6_Pos
Ë

	)

5971 
	#CAN_TDH1R_DATA6
 
CAN_TDH1R_DATA6_Msk


	)

5972 
	#CAN_TDH1R_DATA7_Pos
 (24U)

	)

5973 
	#CAN_TDH1R_DATA7_Msk
 (0xFFUL << 
CAN_TDH1R_DATA7_Pos
Ë

	)

5974 
	#CAN_TDH1R_DATA7
 
CAN_TDH1R_DATA7_Msk


	)

5977 
	#CAN_TI2R_TXRQ_Pos
 (0U)

	)

5978 
	#CAN_TI2R_TXRQ_Msk
 (0x1UL << 
CAN_TI2R_TXRQ_Pos
Ë

	)

5979 
	#CAN_TI2R_TXRQ
 
CAN_TI2R_TXRQ_Msk


	)

5980 
	#CAN_TI2R_RTR_Pos
 (1U)

	)

5981 
	#CAN_TI2R_RTR_Msk
 (0x1UL << 
CAN_TI2R_RTR_Pos
Ë

	)

5982 
	#CAN_TI2R_RTR
 
CAN_TI2R_RTR_Msk


	)

5983 
	#CAN_TI2R_IDE_Pos
 (2U)

	)

5984 
	#CAN_TI2R_IDE_Msk
 (0x1UL << 
CAN_TI2R_IDE_Pos
Ë

	)

5985 
	#CAN_TI2R_IDE
 
CAN_TI2R_IDE_Msk


	)

5986 
	#CAN_TI2R_EXID_Pos
 (3U)

	)

5987 
	#CAN_TI2R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI2R_EXID_Pos
Ë

	)

5988 
	#CAN_TI2R_EXID
 
CAN_TI2R_EXID_Msk


	)

5989 
	#CAN_TI2R_STID_Pos
 (21U)

	)

5990 
	#CAN_TI2R_STID_Msk
 (0x7FFUL << 
CAN_TI2R_STID_Pos
Ë

	)

5991 
	#CAN_TI2R_STID
 
CAN_TI2R_STID_Msk


	)

5994 
	#CAN_TDT2R_DLC_Pos
 (0U)

	)

5995 
	#CAN_TDT2R_DLC_Msk
 (0xFUL << 
CAN_TDT2R_DLC_Pos
Ë

	)

5996 
	#CAN_TDT2R_DLC
 
CAN_TDT2R_DLC_Msk


	)

5997 
	#CAN_TDT2R_TGT_Pos
 (8U)

	)

5998 
	#CAN_TDT2R_TGT_Msk
 (0x1UL << 
CAN_TDT2R_TGT_Pos
Ë

	)

5999 
	#CAN_TDT2R_TGT
 
CAN_TDT2R_TGT_Msk


	)

6000 
	#CAN_TDT2R_TIME_Pos
 (16U)

	)

6001 
	#CAN_TDT2R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT2R_TIME_Pos
Ë

	)

6002 
	#CAN_TDT2R_TIME
 
CAN_TDT2R_TIME_Msk


	)

6005 
	#CAN_TDL2R_DATA0_Pos
 (0U)

	)

6006 
	#CAN_TDL2R_DATA0_Msk
 (0xFFUL << 
CAN_TDL2R_DATA0_Pos
Ë

	)

6007 
	#CAN_TDL2R_DATA0
 
CAN_TDL2R_DATA0_Msk


	)

6008 
	#CAN_TDL2R_DATA1_Pos
 (8U)

	)

6009 
	#CAN_TDL2R_DATA1_Msk
 (0xFFUL << 
CAN_TDL2R_DATA1_Pos
Ë

	)

6010 
	#CAN_TDL2R_DATA1
 
CAN_TDL2R_DATA1_Msk


	)

6011 
	#CAN_TDL2R_DATA2_Pos
 (16U)

	)

6012 
	#CAN_TDL2R_DATA2_Msk
 (0xFFUL << 
CAN_TDL2R_DATA2_Pos
Ë

	)

6013 
	#CAN_TDL2R_DATA2
 
CAN_TDL2R_DATA2_Msk


	)

6014 
	#CAN_TDL2R_DATA3_Pos
 (24U)

	)

6015 
	#CAN_TDL2R_DATA3_Msk
 (0xFFUL << 
CAN_TDL2R_DATA3_Pos
Ë

	)

6016 
	#CAN_TDL2R_DATA3
 
CAN_TDL2R_DATA3_Msk


	)

6019 
	#CAN_TDH2R_DATA4_Pos
 (0U)

	)

6020 
	#CAN_TDH2R_DATA4_Msk
 (0xFFUL << 
CAN_TDH2R_DATA4_Pos
Ë

	)

6021 
	#CAN_TDH2R_DATA4
 
CAN_TDH2R_DATA4_Msk


	)

6022 
	#CAN_TDH2R_DATA5_Pos
 (8U)

	)

6023 
	#CAN_TDH2R_DATA5_Msk
 (0xFFUL << 
CAN_TDH2R_DATA5_Pos
Ë

	)

6024 
	#CAN_TDH2R_DATA5
 
CAN_TDH2R_DATA5_Msk


	)

6025 
	#CAN_TDH2R_DATA6_Pos
 (16U)

	)

6026 
	#CAN_TDH2R_DATA6_Msk
 (0xFFUL << 
CAN_TDH2R_DATA6_Pos
Ë

	)

6027 
	#CAN_TDH2R_DATA6
 
CAN_TDH2R_DATA6_Msk


	)

6028 
	#CAN_TDH2R_DATA7_Pos
 (24U)

	)

6029 
	#CAN_TDH2R_DATA7_Msk
 (0xFFUL << 
CAN_TDH2R_DATA7_Pos
Ë

	)

6030 
	#CAN_TDH2R_DATA7
 
CAN_TDH2R_DATA7_Msk


	)

6033 
	#CAN_RI0R_RTR_Pos
 (1U)

	)

6034 
	#CAN_RI0R_RTR_Msk
 (0x1UL << 
CAN_RI0R_RTR_Pos
Ë

	)

6035 
	#CAN_RI0R_RTR
 
CAN_RI0R_RTR_Msk


	)

6036 
	#CAN_RI0R_IDE_Pos
 (2U)

	)

6037 
	#CAN_RI0R_IDE_Msk
 (0x1UL << 
CAN_RI0R_IDE_Pos
Ë

	)

6038 
	#CAN_RI0R_IDE
 
CAN_RI0R_IDE_Msk


	)

6039 
	#CAN_RI0R_EXID_Pos
 (3U)

	)

6040 
	#CAN_RI0R_EXID_Msk
 (0x3FFFFUL << 
CAN_RI0R_EXID_Pos
Ë

	)

6041 
	#CAN_RI0R_EXID
 
CAN_RI0R_EXID_Msk


	)

6042 
	#CAN_RI0R_STID_Pos
 (21U)

	)

6043 
	#CAN_RI0R_STID_Msk
 (0x7FFUL << 
CAN_RI0R_STID_Pos
Ë

	)

6044 
	#CAN_RI0R_STID
 
CAN_RI0R_STID_Msk


	)

6047 
	#CAN_RDT0R_DLC_Pos
 (0U)

	)

6048 
	#CAN_RDT0R_DLC_Msk
 (0xFUL << 
CAN_RDT0R_DLC_Pos
Ë

	)

6049 
	#CAN_RDT0R_DLC
 
CAN_RDT0R_DLC_Msk


	)

6050 
	#CAN_RDT0R_FMI_Pos
 (8U)

	)

6051 
	#CAN_RDT0R_FMI_Msk
 (0xFFUL << 
CAN_RDT0R_FMI_Pos
Ë

	)

6052 
	#CAN_RDT0R_FMI
 
CAN_RDT0R_FMI_Msk


	)

6053 
	#CAN_RDT0R_TIME_Pos
 (16U)

	)

6054 
	#CAN_RDT0R_TIME_Msk
 (0xFFFFUL << 
CAN_RDT0R_TIME_Pos
Ë

	)

6055 
	#CAN_RDT0R_TIME
 
CAN_RDT0R_TIME_Msk


	)

6058 
	#CAN_RDL0R_DATA0_Pos
 (0U)

	)

6059 
	#CAN_RDL0R_DATA0_Msk
 (0xFFUL << 
CAN_RDL0R_DATA0_Pos
Ë

	)

6060 
	#CAN_RDL0R_DATA0
 
CAN_RDL0R_DATA0_Msk


	)

6061 
	#CAN_RDL0R_DATA1_Pos
 (8U)

	)

6062 
	#CAN_RDL0R_DATA1_Msk
 (0xFFUL << 
CAN_RDL0R_DATA1_Pos
Ë

	)

6063 
	#CAN_RDL0R_DATA1
 
CAN_RDL0R_DATA1_Msk


	)

6064 
	#CAN_RDL0R_DATA2_Pos
 (16U)

	)

6065 
	#CAN_RDL0R_DATA2_Msk
 (0xFFUL << 
CAN_RDL0R_DATA2_Pos
Ë

	)

6066 
	#CAN_RDL0R_DATA2
 
CAN_RDL0R_DATA2_Msk


	)

6067 
	#CAN_RDL0R_DATA3_Pos
 (24U)

	)

6068 
	#CAN_RDL0R_DATA3_Msk
 (0xFFUL << 
CAN_RDL0R_DATA3_Pos
Ë

	)

6069 
	#CAN_RDL0R_DATA3
 
CAN_RDL0R_DATA3_Msk


	)

6072 
	#CAN_RDH0R_DATA4_Pos
 (0U)

	)

6073 
	#CAN_RDH0R_DATA4_Msk
 (0xFFUL << 
CAN_RDH0R_DATA4_Pos
Ë

	)

6074 
	#CAN_RDH0R_DATA4
 
CAN_RDH0R_DATA4_Msk


	)

6075 
	#CAN_RDH0R_DATA5_Pos
 (8U)

	)

6076 
	#CAN_RDH0R_DATA5_Msk
 (0xFFUL << 
CAN_RDH0R_DATA5_Pos
Ë

	)

6077 
	#CAN_RDH0R_DATA5
 
CAN_RDH0R_DATA5_Msk


	)

6078 
	#CAN_RDH0R_DATA6_Pos
 (16U)

	)

6079 
	#CAN_RDH0R_DATA6_Msk
 (0xFFUL << 
CAN_RDH0R_DATA6_Pos
Ë

	)

6080 
	#CAN_RDH0R_DATA6
 
CAN_RDH0R_DATA6_Msk


	)

6081 
	#CAN_RDH0R_DATA7_Pos
 (24U)

	)

6082 
	#CAN_RDH0R_DATA7_Msk
 (0xFFUL << 
CAN_RDH0R_DATA7_Pos
Ë

	)

6083 
	#CAN_RDH0R_DATA7
 
CAN_RDH0R_DATA7_Msk


	)

6086 
	#CAN_RI1R_RTR_Pos
 (1U)

	)

6087 
	#CAN_RI1R_RTR_Msk
 (0x1UL << 
CAN_RI1R_RTR_Pos
Ë

	)

6088 
	#CAN_RI1R_RTR
 
CAN_RI1R_RTR_Msk


	)

6089 
	#CAN_RI1R_IDE_Pos
 (2U)

	)

6090 
	#CAN_RI1R_IDE_Msk
 (0x1UL << 
CAN_RI1R_IDE_Pos
Ë

	)

6091 
	#CAN_RI1R_IDE
 
CAN_RI1R_IDE_Msk


	)

6092 
	#CAN_RI1R_EXID_Pos
 (3U)

	)

6093 
	#CAN_RI1R_EXID_Msk
 (0x3FFFFUL << 
CAN_RI1R_EXID_Pos
Ë

	)

6094 
	#CAN_RI1R_EXID
 
CAN_RI1R_EXID_Msk


	)

6095 
	#CAN_RI1R_STID_Pos
 (21U)

	)

6096 
	#CAN_RI1R_STID_Msk
 (0x7FFUL << 
CAN_RI1R_STID_Pos
Ë

	)

6097 
	#CAN_RI1R_STID
 
CAN_RI1R_STID_Msk


	)

6100 
	#CAN_RDT1R_DLC_Pos
 (0U)

	)

6101 
	#CAN_RDT1R_DLC_Msk
 (0xFUL << 
CAN_RDT1R_DLC_Pos
Ë

	)

6102 
	#CAN_RDT1R_DLC
 
CAN_RDT1R_DLC_Msk


	)

6103 
	#CAN_RDT1R_FMI_Pos
 (8U)

	)

6104 
	#CAN_RDT1R_FMI_Msk
 (0xFFUL << 
CAN_RDT1R_FMI_Pos
Ë

	)

6105 
	#CAN_RDT1R_FMI
 
CAN_RDT1R_FMI_Msk


	)

6106 
	#CAN_RDT1R_TIME_Pos
 (16U)

	)

6107 
	#CAN_RDT1R_TIME_Msk
 (0xFFFFUL << 
CAN_RDT1R_TIME_Pos
Ë

	)

6108 
	#CAN_RDT1R_TIME
 
CAN_RDT1R_TIME_Msk


	)

6111 
	#CAN_RDL1R_DATA0_Pos
 (0U)

	)

6112 
	#CAN_RDL1R_DATA0_Msk
 (0xFFUL << 
CAN_RDL1R_DATA0_Pos
Ë

	)

6113 
	#CAN_RDL1R_DATA0
 
CAN_RDL1R_DATA0_Msk


	)

6114 
	#CAN_RDL1R_DATA1_Pos
 (8U)

	)

6115 
	#CAN_RDL1R_DATA1_Msk
 (0xFFUL << 
CAN_RDL1R_DATA1_Pos
Ë

	)

6116 
	#CAN_RDL1R_DATA1
 
CAN_RDL1R_DATA1_Msk


	)

6117 
	#CAN_RDL1R_DATA2_Pos
 (16U)

	)

6118 
	#CAN_RDL1R_DATA2_Msk
 (0xFFUL << 
CAN_RDL1R_DATA2_Pos
Ë

	)

6119 
	#CAN_RDL1R_DATA2
 
CAN_RDL1R_DATA2_Msk


	)

6120 
	#CAN_RDL1R_DATA3_Pos
 (24U)

	)

6121 
	#CAN_RDL1R_DATA3_Msk
 (0xFFUL << 
CAN_RDL1R_DATA3_Pos
Ë

	)

6122 
	#CAN_RDL1R_DATA3
 
CAN_RDL1R_DATA3_Msk


	)

6125 
	#CAN_RDH1R_DATA4_Pos
 (0U)

	)

6126 
	#CAN_RDH1R_DATA4_Msk
 (0xFFUL << 
CAN_RDH1R_DATA4_Pos
Ë

	)

6127 
	#CAN_RDH1R_DATA4
 
CAN_RDH1R_DATA4_Msk


	)

6128 
	#CAN_RDH1R_DATA5_Pos
 (8U)

	)

6129 
	#CAN_RDH1R_DATA5_Msk
 (0xFFUL << 
CAN_RDH1R_DATA5_Pos
Ë

	)

6130 
	#CAN_RDH1R_DATA5
 
CAN_RDH1R_DATA5_Msk


	)

6131 
	#CAN_RDH1R_DATA6_Pos
 (16U)

	)

6132 
	#CAN_RDH1R_DATA6_Msk
 (0xFFUL << 
CAN_RDH1R_DATA6_Pos
Ë

	)

6133 
	#CAN_RDH1R_DATA6
 
CAN_RDH1R_DATA6_Msk


	)

6134 
	#CAN_RDH1R_DATA7_Pos
 (24U)

	)

6135 
	#CAN_RDH1R_DATA7_Msk
 (0xFFUL << 
CAN_RDH1R_DATA7_Pos
Ë

	)

6136 
	#CAN_RDH1R_DATA7
 
CAN_RDH1R_DATA7_Msk


	)

6140 
	#CAN_FMR_FINIT_Pos
 (0U)

	)

6141 
	#CAN_FMR_FINIT_Msk
 (0x1UL << 
CAN_FMR_FINIT_Pos
Ë

	)

6142 
	#CAN_FMR_FINIT
 
CAN_FMR_FINIT_Msk


	)

6143 
	#CAN_FMR_CAN2SB_Pos
 (8U)

	)

6144 
	#CAN_FMR_CAN2SB_Msk
 (0x3FUL << 
CAN_FMR_CAN2SB_Pos
Ë

	)

6145 
	#CAN_FMR_CAN2SB
 
CAN_FMR_CAN2SB_Msk


	)

6148 
	#CAN_FM1R_FBM_Pos
 (0U)

	)

6149 
	#CAN_FM1R_FBM_Msk
 (0x3FFFUL << 
CAN_FM1R_FBM_Pos
Ë

	)

6150 
	#CAN_FM1R_FBM
 
CAN_FM1R_FBM_Msk


	)

6151 
	#CAN_FM1R_FBM0_Pos
 (0U)

	)

6152 
	#CAN_FM1R_FBM0_Msk
 (0x1UL << 
CAN_FM1R_FBM0_Pos
Ë

	)

6153 
	#CAN_FM1R_FBM0
 
CAN_FM1R_FBM0_Msk


	)

6154 
	#CAN_FM1R_FBM1_Pos
 (1U)

	)

6155 
	#CAN_FM1R_FBM1_Msk
 (0x1UL << 
CAN_FM1R_FBM1_Pos
Ë

	)

6156 
	#CAN_FM1R_FBM1
 
CAN_FM1R_FBM1_Msk


	)

6157 
	#CAN_FM1R_FBM2_Pos
 (2U)

	)

6158 
	#CAN_FM1R_FBM2_Msk
 (0x1UL << 
CAN_FM1R_FBM2_Pos
Ë

	)

6159 
	#CAN_FM1R_FBM2
 
CAN_FM1R_FBM2_Msk


	)

6160 
	#CAN_FM1R_FBM3_Pos
 (3U)

	)

6161 
	#CAN_FM1R_FBM3_Msk
 (0x1UL << 
CAN_FM1R_FBM3_Pos
Ë

	)

6162 
	#CAN_FM1R_FBM3
 
CAN_FM1R_FBM3_Msk


	)

6163 
	#CAN_FM1R_FBM4_Pos
 (4U)

	)

6164 
	#CAN_FM1R_FBM4_Msk
 (0x1UL << 
CAN_FM1R_FBM4_Pos
Ë

	)

6165 
	#CAN_FM1R_FBM4
 
CAN_FM1R_FBM4_Msk


	)

6166 
	#CAN_FM1R_FBM5_Pos
 (5U)

	)

6167 
	#CAN_FM1R_FBM5_Msk
 (0x1UL << 
CAN_FM1R_FBM5_Pos
Ë

	)

6168 
	#CAN_FM1R_FBM5
 
CAN_FM1R_FBM5_Msk


	)

6169 
	#CAN_FM1R_FBM6_Pos
 (6U)

	)

6170 
	#CAN_FM1R_FBM6_Msk
 (0x1UL << 
CAN_FM1R_FBM6_Pos
Ë

	)

6171 
	#CAN_FM1R_FBM6
 
CAN_FM1R_FBM6_Msk


	)

6172 
	#CAN_FM1R_FBM7_Pos
 (7U)

	)

6173 
	#CAN_FM1R_FBM7_Msk
 (0x1UL << 
CAN_FM1R_FBM7_Pos
Ë

	)

6174 
	#CAN_FM1R_FBM7
 
CAN_FM1R_FBM7_Msk


	)

6175 
	#CAN_FM1R_FBM8_Pos
 (8U)

	)

6176 
	#CAN_FM1R_FBM8_Msk
 (0x1UL << 
CAN_FM1R_FBM8_Pos
Ë

	)

6177 
	#CAN_FM1R_FBM8
 
CAN_FM1R_FBM8_Msk


	)

6178 
	#CAN_FM1R_FBM9_Pos
 (9U)

	)

6179 
	#CAN_FM1R_FBM9_Msk
 (0x1UL << 
CAN_FM1R_FBM9_Pos
Ë

	)

6180 
	#CAN_FM1R_FBM9
 
CAN_FM1R_FBM9_Msk


	)

6181 
	#CAN_FM1R_FBM10_Pos
 (10U)

	)

6182 
	#CAN_FM1R_FBM10_Msk
 (0x1UL << 
CAN_FM1R_FBM10_Pos
Ë

	)

6183 
	#CAN_FM1R_FBM10
 
CAN_FM1R_FBM10_Msk


	)

6184 
	#CAN_FM1R_FBM11_Pos
 (11U)

	)

6185 
	#CAN_FM1R_FBM11_Msk
 (0x1UL << 
CAN_FM1R_FBM11_Pos
Ë

	)

6186 
	#CAN_FM1R_FBM11
 
CAN_FM1R_FBM11_Msk


	)

6187 
	#CAN_FM1R_FBM12_Pos
 (12U)

	)

6188 
	#CAN_FM1R_FBM12_Msk
 (0x1UL << 
CAN_FM1R_FBM12_Pos
Ë

	)

6189 
	#CAN_FM1R_FBM12
 
CAN_FM1R_FBM12_Msk


	)

6190 
	#CAN_FM1R_FBM13_Pos
 (13U)

	)

6191 
	#CAN_FM1R_FBM13_Msk
 (0x1UL << 
CAN_FM1R_FBM13_Pos
Ë

	)

6192 
	#CAN_FM1R_FBM13
 
CAN_FM1R_FBM13_Msk


	)

6195 
	#CAN_FS1R_FSC_Pos
 (0U)

	)

6196 
	#CAN_FS1R_FSC_Msk
 (0x3FFFUL << 
CAN_FS1R_FSC_Pos
Ë

	)

6197 
	#CAN_FS1R_FSC
 
CAN_FS1R_FSC_Msk


	)

6198 
	#CAN_FS1R_FSC0_Pos
 (0U)

	)

6199 
	#CAN_FS1R_FSC0_Msk
 (0x1UL << 
CAN_FS1R_FSC0_Pos
Ë

	)

6200 
	#CAN_FS1R_FSC0
 
CAN_FS1R_FSC0_Msk


	)

6201 
	#CAN_FS1R_FSC1_Pos
 (1U)

	)

6202 
	#CAN_FS1R_FSC1_Msk
 (0x1UL << 
CAN_FS1R_FSC1_Pos
Ë

	)

6203 
	#CAN_FS1R_FSC1
 
CAN_FS1R_FSC1_Msk


	)

6204 
	#CAN_FS1R_FSC2_Pos
 (2U)

	)

6205 
	#CAN_FS1R_FSC2_Msk
 (0x1UL << 
CAN_FS1R_FSC2_Pos
Ë

	)

6206 
	#CAN_FS1R_FSC2
 
CAN_FS1R_FSC2_Msk


	)

6207 
	#CAN_FS1R_FSC3_Pos
 (3U)

	)

6208 
	#CAN_FS1R_FSC3_Msk
 (0x1UL << 
CAN_FS1R_FSC3_Pos
Ë

	)

6209 
	#CAN_FS1R_FSC3
 
CAN_FS1R_FSC3_Msk


	)

6210 
	#CAN_FS1R_FSC4_Pos
 (4U)

	)

6211 
	#CAN_FS1R_FSC4_Msk
 (0x1UL << 
CAN_FS1R_FSC4_Pos
Ë

	)

6212 
	#CAN_FS1R_FSC4
 
CAN_FS1R_FSC4_Msk


	)

6213 
	#CAN_FS1R_FSC5_Pos
 (5U)

	)

6214 
	#CAN_FS1R_FSC5_Msk
 (0x1UL << 
CAN_FS1R_FSC5_Pos
Ë

	)

6215 
	#CAN_FS1R_FSC5
 
CAN_FS1R_FSC5_Msk


	)

6216 
	#CAN_FS1R_FSC6_Pos
 (6U)

	)

6217 
	#CAN_FS1R_FSC6_Msk
 (0x1UL << 
CAN_FS1R_FSC6_Pos
Ë

	)

6218 
	#CAN_FS1R_FSC6
 
CAN_FS1R_FSC6_Msk


	)

6219 
	#CAN_FS1R_FSC7_Pos
 (7U)

	)

6220 
	#CAN_FS1R_FSC7_Msk
 (0x1UL << 
CAN_FS1R_FSC7_Pos
Ë

	)

6221 
	#CAN_FS1R_FSC7
 
CAN_FS1R_FSC7_Msk


	)

6222 
	#CAN_FS1R_FSC8_Pos
 (8U)

	)

6223 
	#CAN_FS1R_FSC8_Msk
 (0x1UL << 
CAN_FS1R_FSC8_Pos
Ë

	)

6224 
	#CAN_FS1R_FSC8
 
CAN_FS1R_FSC8_Msk


	)

6225 
	#CAN_FS1R_FSC9_Pos
 (9U)

	)

6226 
	#CAN_FS1R_FSC9_Msk
 (0x1UL << 
CAN_FS1R_FSC9_Pos
Ë

	)

6227 
	#CAN_FS1R_FSC9
 
CAN_FS1R_FSC9_Msk


	)

6228 
	#CAN_FS1R_FSC10_Pos
 (10U)

	)

6229 
	#CAN_FS1R_FSC10_Msk
 (0x1UL << 
CAN_FS1R_FSC10_Pos
Ë

	)

6230 
	#CAN_FS1R_FSC10
 
CAN_FS1R_FSC10_Msk


	)

6231 
	#CAN_FS1R_FSC11_Pos
 (11U)

	)

6232 
	#CAN_FS1R_FSC11_Msk
 (0x1UL << 
CAN_FS1R_FSC11_Pos
Ë

	)

6233 
	#CAN_FS1R_FSC11
 
CAN_FS1R_FSC11_Msk


	)

6234 
	#CAN_FS1R_FSC12_Pos
 (12U)

	)

6235 
	#CAN_FS1R_FSC12_Msk
 (0x1UL << 
CAN_FS1R_FSC12_Pos
Ë

	)

6236 
	#CAN_FS1R_FSC12
 
CAN_FS1R_FSC12_Msk


	)

6237 
	#CAN_FS1R_FSC13_Pos
 (13U)

	)

6238 
	#CAN_FS1R_FSC13_Msk
 (0x1UL << 
CAN_FS1R_FSC13_Pos
Ë

	)

6239 
	#CAN_FS1R_FSC13
 
CAN_FS1R_FSC13_Msk


	)

6242 
	#CAN_FFA1R_FFA_Pos
 (0U)

	)

6243 
	#CAN_FFA1R_FFA_Msk
 (0x3FFFUL << 
CAN_FFA1R_FFA_Pos
Ë

	)

6244 
	#CAN_FFA1R_FFA
 
CAN_FFA1R_FFA_Msk


	)

6245 
	#CAN_FFA1R_FFA0_Pos
 (0U)

	)

6246 
	#CAN_FFA1R_FFA0_Msk
 (0x1UL << 
CAN_FFA1R_FFA0_Pos
Ë

	)

6247 
	#CAN_FFA1R_FFA0
 
CAN_FFA1R_FFA0_Msk


	)

6248 
	#CAN_FFA1R_FFA1_Pos
 (1U)

	)

6249 
	#CAN_FFA1R_FFA1_Msk
 (0x1UL << 
CAN_FFA1R_FFA1_Pos
Ë

	)

6250 
	#CAN_FFA1R_FFA1
 
CAN_FFA1R_FFA1_Msk


	)

6251 
	#CAN_FFA1R_FFA2_Pos
 (2U)

	)

6252 
	#CAN_FFA1R_FFA2_Msk
 (0x1UL << 
CAN_FFA1R_FFA2_Pos
Ë

	)

6253 
	#CAN_FFA1R_FFA2
 
CAN_FFA1R_FFA2_Msk


	)

6254 
	#CAN_FFA1R_FFA3_Pos
 (3U)

	)

6255 
	#CAN_FFA1R_FFA3_Msk
 (0x1UL << 
CAN_FFA1R_FFA3_Pos
Ë

	)

6256 
	#CAN_FFA1R_FFA3
 
CAN_FFA1R_FFA3_Msk


	)

6257 
	#CAN_FFA1R_FFA4_Pos
 (4U)

	)

6258 
	#CAN_FFA1R_FFA4_Msk
 (0x1UL << 
CAN_FFA1R_FFA4_Pos
Ë

	)

6259 
	#CAN_FFA1R_FFA4
 
CAN_FFA1R_FFA4_Msk


	)

6260 
	#CAN_FFA1R_FFA5_Pos
 (5U)

	)

6261 
	#CAN_FFA1R_FFA5_Msk
 (0x1UL << 
CAN_FFA1R_FFA5_Pos
Ë

	)

6262 
	#CAN_FFA1R_FFA5
 
CAN_FFA1R_FFA5_Msk


	)

6263 
	#CAN_FFA1R_FFA6_Pos
 (6U)

	)

6264 
	#CAN_FFA1R_FFA6_Msk
 (0x1UL << 
CAN_FFA1R_FFA6_Pos
Ë

	)

6265 
	#CAN_FFA1R_FFA6
 
CAN_FFA1R_FFA6_Msk


	)

6266 
	#CAN_FFA1R_FFA7_Pos
 (7U)

	)

6267 
	#CAN_FFA1R_FFA7_Msk
 (0x1UL << 
CAN_FFA1R_FFA7_Pos
Ë

	)

6268 
	#CAN_FFA1R_FFA7
 
CAN_FFA1R_FFA7_Msk


	)

6269 
	#CAN_FFA1R_FFA8_Pos
 (8U)

	)

6270 
	#CAN_FFA1R_FFA8_Msk
 (0x1UL << 
CAN_FFA1R_FFA8_Pos
Ë

	)

6271 
	#CAN_FFA1R_FFA8
 
CAN_FFA1R_FFA8_Msk


	)

6272 
	#CAN_FFA1R_FFA9_Pos
 (9U)

	)

6273 
	#CAN_FFA1R_FFA9_Msk
 (0x1UL << 
CAN_FFA1R_FFA9_Pos
Ë

	)

6274 
	#CAN_FFA1R_FFA9
 
CAN_FFA1R_FFA9_Msk


	)

6275 
	#CAN_FFA1R_FFA10_Pos
 (10U)

	)

6276 
	#CAN_FFA1R_FFA10_Msk
 (0x1UL << 
CAN_FFA1R_FFA10_Pos
Ë

	)

6277 
	#CAN_FFA1R_FFA10
 
CAN_FFA1R_FFA10_Msk


	)

6278 
	#CAN_FFA1R_FFA11_Pos
 (11U)

	)

6279 
	#CAN_FFA1R_FFA11_Msk
 (0x1UL << 
CAN_FFA1R_FFA11_Pos
Ë

	)

6280 
	#CAN_FFA1R_FFA11
 
CAN_FFA1R_FFA11_Msk


	)

6281 
	#CAN_FFA1R_FFA12_Pos
 (12U)

	)

6282 
	#CAN_FFA1R_FFA12_Msk
 (0x1UL << 
CAN_FFA1R_FFA12_Pos
Ë

	)

6283 
	#CAN_FFA1R_FFA12
 
CAN_FFA1R_FFA12_Msk


	)

6284 
	#CAN_FFA1R_FFA13_Pos
 (13U)

	)

6285 
	#CAN_FFA1R_FFA13_Msk
 (0x1UL << 
CAN_FFA1R_FFA13_Pos
Ë

	)

6286 
	#CAN_FFA1R_FFA13
 
CAN_FFA1R_FFA13_Msk


	)

6289 
	#CAN_FA1R_FACT_Pos
 (0U)

	)

6290 
	#CAN_FA1R_FACT_Msk
 (0x3FFFUL << 
CAN_FA1R_FACT_Pos
Ë

	)

6291 
	#CAN_FA1R_FACT
 
CAN_FA1R_FACT_Msk


	)

6292 
	#CAN_FA1R_FACT0_Pos
 (0U)

	)

6293 
	#CAN_FA1R_FACT0_Msk
 (0x1UL << 
CAN_FA1R_FACT0_Pos
Ë

	)

6294 
	#CAN_FA1R_FACT0
 
CAN_FA1R_FACT0_Msk


	)

6295 
	#CAN_FA1R_FACT1_Pos
 (1U)

	)

6296 
	#CAN_FA1R_FACT1_Msk
 (0x1UL << 
CAN_FA1R_FACT1_Pos
Ë

	)

6297 
	#CAN_FA1R_FACT1
 
CAN_FA1R_FACT1_Msk


	)

6298 
	#CAN_FA1R_FACT2_Pos
 (2U)

	)

6299 
	#CAN_FA1R_FACT2_Msk
 (0x1UL << 
CAN_FA1R_FACT2_Pos
Ë

	)

6300 
	#CAN_FA1R_FACT2
 
CAN_FA1R_FACT2_Msk


	)

6301 
	#CAN_FA1R_FACT3_Pos
 (3U)

	)

6302 
	#CAN_FA1R_FACT3_Msk
 (0x1UL << 
CAN_FA1R_FACT3_Pos
Ë

	)

6303 
	#CAN_FA1R_FACT3
 
CAN_FA1R_FACT3_Msk


	)

6304 
	#CAN_FA1R_FACT4_Pos
 (4U)

	)

6305 
	#CAN_FA1R_FACT4_Msk
 (0x1UL << 
CAN_FA1R_FACT4_Pos
Ë

	)

6306 
	#CAN_FA1R_FACT4
 
CAN_FA1R_FACT4_Msk


	)

6307 
	#CAN_FA1R_FACT5_Pos
 (5U)

	)

6308 
	#CAN_FA1R_FACT5_Msk
 (0x1UL << 
CAN_FA1R_FACT5_Pos
Ë

	)

6309 
	#CAN_FA1R_FACT5
 
CAN_FA1R_FACT5_Msk


	)

6310 
	#CAN_FA1R_FACT6_Pos
 (6U)

	)

6311 
	#CAN_FA1R_FACT6_Msk
 (0x1UL << 
CAN_FA1R_FACT6_Pos
Ë

	)

6312 
	#CAN_FA1R_FACT6
 
CAN_FA1R_FACT6_Msk


	)

6313 
	#CAN_FA1R_FACT7_Pos
 (7U)

	)

6314 
	#CAN_FA1R_FACT7_Msk
 (0x1UL << 
CAN_FA1R_FACT7_Pos
Ë

	)

6315 
	#CAN_FA1R_FACT7
 
CAN_FA1R_FACT7_Msk


	)

6316 
	#CAN_FA1R_FACT8_Pos
 (8U)

	)

6317 
	#CAN_FA1R_FACT8_Msk
 (0x1UL << 
CAN_FA1R_FACT8_Pos
Ë

	)

6318 
	#CAN_FA1R_FACT8
 
CAN_FA1R_FACT8_Msk


	)

6319 
	#CAN_FA1R_FACT9_Pos
 (9U)

	)

6320 
	#CAN_FA1R_FACT9_Msk
 (0x1UL << 
CAN_FA1R_FACT9_Pos
Ë

	)

6321 
	#CAN_FA1R_FACT9
 
CAN_FA1R_FACT9_Msk


	)

6322 
	#CAN_FA1R_FACT10_Pos
 (10U)

	)

6323 
	#CAN_FA1R_FACT10_Msk
 (0x1UL << 
CAN_FA1R_FACT10_Pos
Ë

	)

6324 
	#CAN_FA1R_FACT10
 
CAN_FA1R_FACT10_Msk


	)

6325 
	#CAN_FA1R_FACT11_Pos
 (11U)

	)

6326 
	#CAN_FA1R_FACT11_Msk
 (0x1UL << 
CAN_FA1R_FACT11_Pos
Ë

	)

6327 
	#CAN_FA1R_FACT11
 
CAN_FA1R_FACT11_Msk


	)

6328 
	#CAN_FA1R_FACT12_Pos
 (12U)

	)

6329 
	#CAN_FA1R_FACT12_Msk
 (0x1UL << 
CAN_FA1R_FACT12_Pos
Ë

	)

6330 
	#CAN_FA1R_FACT12
 
CAN_FA1R_FACT12_Msk


	)

6331 
	#CAN_FA1R_FACT13_Pos
 (13U)

	)

6332 
	#CAN_FA1R_FACT13_Msk
 (0x1UL << 
CAN_FA1R_FACT13_Pos
Ë

	)

6333 
	#CAN_FA1R_FACT13
 
CAN_FA1R_FACT13_Msk


	)

6336 
	#CAN_F0R1_FB0_Pos
 (0U)

	)

6337 
	#CAN_F0R1_FB0_Msk
 (0x1UL << 
CAN_F0R1_FB0_Pos
Ë

	)

6338 
	#CAN_F0R1_FB0
 
CAN_F0R1_FB0_Msk


	)

6339 
	#CAN_F0R1_FB1_Pos
 (1U)

	)

6340 
	#CAN_F0R1_FB1_Msk
 (0x1UL << 
CAN_F0R1_FB1_Pos
Ë

	)

6341 
	#CAN_F0R1_FB1
 
CAN_F0R1_FB1_Msk


	)

6342 
	#CAN_F0R1_FB2_Pos
 (2U)

	)

6343 
	#CAN_F0R1_FB2_Msk
 (0x1UL << 
CAN_F0R1_FB2_Pos
Ë

	)

6344 
	#CAN_F0R1_FB2
 
CAN_F0R1_FB2_Msk


	)

6345 
	#CAN_F0R1_FB3_Pos
 (3U)

	)

6346 
	#CAN_F0R1_FB3_Msk
 (0x1UL << 
CAN_F0R1_FB3_Pos
Ë

	)

6347 
	#CAN_F0R1_FB3
 
CAN_F0R1_FB3_Msk


	)

6348 
	#CAN_F0R1_FB4_Pos
 (4U)

	)

6349 
	#CAN_F0R1_FB4_Msk
 (0x1UL << 
CAN_F0R1_FB4_Pos
Ë

	)

6350 
	#CAN_F0R1_FB4
 
CAN_F0R1_FB4_Msk


	)

6351 
	#CAN_F0R1_FB5_Pos
 (5U)

	)

6352 
	#CAN_F0R1_FB5_Msk
 (0x1UL << 
CAN_F0R1_FB5_Pos
Ë

	)

6353 
	#CAN_F0R1_FB5
 
CAN_F0R1_FB5_Msk


	)

6354 
	#CAN_F0R1_FB6_Pos
 (6U)

	)

6355 
	#CAN_F0R1_FB6_Msk
 (0x1UL << 
CAN_F0R1_FB6_Pos
Ë

	)

6356 
	#CAN_F0R1_FB6
 
CAN_F0R1_FB6_Msk


	)

6357 
	#CAN_F0R1_FB7_Pos
 (7U)

	)

6358 
	#CAN_F0R1_FB7_Msk
 (0x1UL << 
CAN_F0R1_FB7_Pos
Ë

	)

6359 
	#CAN_F0R1_FB7
 
CAN_F0R1_FB7_Msk


	)

6360 
	#CAN_F0R1_FB8_Pos
 (8U)

	)

6361 
	#CAN_F0R1_FB8_Msk
 (0x1UL << 
CAN_F0R1_FB8_Pos
Ë

	)

6362 
	#CAN_F0R1_FB8
 
CAN_F0R1_FB8_Msk


	)

6363 
	#CAN_F0R1_FB9_Pos
 (9U)

	)

6364 
	#CAN_F0R1_FB9_Msk
 (0x1UL << 
CAN_F0R1_FB9_Pos
Ë

	)

6365 
	#CAN_F0R1_FB9
 
CAN_F0R1_FB9_Msk


	)

6366 
	#CAN_F0R1_FB10_Pos
 (10U)

	)

6367 
	#CAN_F0R1_FB10_Msk
 (0x1UL << 
CAN_F0R1_FB10_Pos
Ë

	)

6368 
	#CAN_F0R1_FB10
 
CAN_F0R1_FB10_Msk


	)

6369 
	#CAN_F0R1_FB11_Pos
 (11U)

	)

6370 
	#CAN_F0R1_FB11_Msk
 (0x1UL << 
CAN_F0R1_FB11_Pos
Ë

	)

6371 
	#CAN_F0R1_FB11
 
CAN_F0R1_FB11_Msk


	)

6372 
	#CAN_F0R1_FB12_Pos
 (12U)

	)

6373 
	#CAN_F0R1_FB12_Msk
 (0x1UL << 
CAN_F0R1_FB12_Pos
Ë

	)

6374 
	#CAN_F0R1_FB12
 
CAN_F0R1_FB12_Msk


	)

6375 
	#CAN_F0R1_FB13_Pos
 (13U)

	)

6376 
	#CAN_F0R1_FB13_Msk
 (0x1UL << 
CAN_F0R1_FB13_Pos
Ë

	)

6377 
	#CAN_F0R1_FB13
 
CAN_F0R1_FB13_Msk


	)

6378 
	#CAN_F0R1_FB14_Pos
 (14U)

	)

6379 
	#CAN_F0R1_FB14_Msk
 (0x1UL << 
CAN_F0R1_FB14_Pos
Ë

	)

6380 
	#CAN_F0R1_FB14
 
CAN_F0R1_FB14_Msk


	)

6381 
	#CAN_F0R1_FB15_Pos
 (15U)

	)

6382 
	#CAN_F0R1_FB15_Msk
 (0x1UL << 
CAN_F0R1_FB15_Pos
Ë

	)

6383 
	#CAN_F0R1_FB15
 
CAN_F0R1_FB15_Msk


	)

6384 
	#CAN_F0R1_FB16_Pos
 (16U)

	)

6385 
	#CAN_F0R1_FB16_Msk
 (0x1UL << 
CAN_F0R1_FB16_Pos
Ë

	)

6386 
	#CAN_F0R1_FB16
 
CAN_F0R1_FB16_Msk


	)

6387 
	#CAN_F0R1_FB17_Pos
 (17U)

	)

6388 
	#CAN_F0R1_FB17_Msk
 (0x1UL << 
CAN_F0R1_FB17_Pos
Ë

	)

6389 
	#CAN_F0R1_FB17
 
CAN_F0R1_FB17_Msk


	)

6390 
	#CAN_F0R1_FB18_Pos
 (18U)

	)

6391 
	#CAN_F0R1_FB18_Msk
 (0x1UL << 
CAN_F0R1_FB18_Pos
Ë

	)

6392 
	#CAN_F0R1_FB18
 
CAN_F0R1_FB18_Msk


	)

6393 
	#CAN_F0R1_FB19_Pos
 (19U)

	)

6394 
	#CAN_F0R1_FB19_Msk
 (0x1UL << 
CAN_F0R1_FB19_Pos
Ë

	)

6395 
	#CAN_F0R1_FB19
 
CAN_F0R1_FB19_Msk


	)

6396 
	#CAN_F0R1_FB20_Pos
 (20U)

	)

6397 
	#CAN_F0R1_FB20_Msk
 (0x1UL << 
CAN_F0R1_FB20_Pos
Ë

	)

6398 
	#CAN_F0R1_FB20
 
CAN_F0R1_FB20_Msk


	)

6399 
	#CAN_F0R1_FB21_Pos
 (21U)

	)

6400 
	#CAN_F0R1_FB21_Msk
 (0x1UL << 
CAN_F0R1_FB21_Pos
Ë

	)

6401 
	#CAN_F0R1_FB21
 
CAN_F0R1_FB21_Msk


	)

6402 
	#CAN_F0R1_FB22_Pos
 (22U)

	)

6403 
	#CAN_F0R1_FB22_Msk
 (0x1UL << 
CAN_F0R1_FB22_Pos
Ë

	)

6404 
	#CAN_F0R1_FB22
 
CAN_F0R1_FB22_Msk


	)

6405 
	#CAN_F0R1_FB23_Pos
 (23U)

	)

6406 
	#CAN_F0R1_FB23_Msk
 (0x1UL << 
CAN_F0R1_FB23_Pos
Ë

	)

6407 
	#CAN_F0R1_FB23
 
CAN_F0R1_FB23_Msk


	)

6408 
	#CAN_F0R1_FB24_Pos
 (24U)

	)

6409 
	#CAN_F0R1_FB24_Msk
 (0x1UL << 
CAN_F0R1_FB24_Pos
Ë

	)

6410 
	#CAN_F0R1_FB24
 
CAN_F0R1_FB24_Msk


	)

6411 
	#CAN_F0R1_FB25_Pos
 (25U)

	)

6412 
	#CAN_F0R1_FB25_Msk
 (0x1UL << 
CAN_F0R1_FB25_Pos
Ë

	)

6413 
	#CAN_F0R1_FB25
 
CAN_F0R1_FB25_Msk


	)

6414 
	#CAN_F0R1_FB26_Pos
 (26U)

	)

6415 
	#CAN_F0R1_FB26_Msk
 (0x1UL << 
CAN_F0R1_FB26_Pos
Ë

	)

6416 
	#CAN_F0R1_FB26
 
CAN_F0R1_FB26_Msk


	)

6417 
	#CAN_F0R1_FB27_Pos
 (27U)

	)

6418 
	#CAN_F0R1_FB27_Msk
 (0x1UL << 
CAN_F0R1_FB27_Pos
Ë

	)

6419 
	#CAN_F0R1_FB27
 
CAN_F0R1_FB27_Msk


	)

6420 
	#CAN_F0R1_FB28_Pos
 (28U)

	)

6421 
	#CAN_F0R1_FB28_Msk
 (0x1UL << 
CAN_F0R1_FB28_Pos
Ë

	)

6422 
	#CAN_F0R1_FB28
 
CAN_F0R1_FB28_Msk


	)

6423 
	#CAN_F0R1_FB29_Pos
 (29U)

	)

6424 
	#CAN_F0R1_FB29_Msk
 (0x1UL << 
CAN_F0R1_FB29_Pos
Ë

	)

6425 
	#CAN_F0R1_FB29
 
CAN_F0R1_FB29_Msk


	)

6426 
	#CAN_F0R1_FB30_Pos
 (30U)

	)

6427 
	#CAN_F0R1_FB30_Msk
 (0x1UL << 
CAN_F0R1_FB30_Pos
Ë

	)

6428 
	#CAN_F0R1_FB30
 
CAN_F0R1_FB30_Msk


	)

6429 
	#CAN_F0R1_FB31_Pos
 (31U)

	)

6430 
	#CAN_F0R1_FB31_Msk
 (0x1UL << 
CAN_F0R1_FB31_Pos
Ë

	)

6431 
	#CAN_F0R1_FB31
 
CAN_F0R1_FB31_Msk


	)

6434 
	#CAN_F1R1_FB0_Pos
 (0U)

	)

6435 
	#CAN_F1R1_FB0_Msk
 (0x1UL << 
CAN_F1R1_FB0_Pos
Ë

	)

6436 
	#CAN_F1R1_FB0
 
CAN_F1R1_FB0_Msk


	)

6437 
	#CAN_F1R1_FB1_Pos
 (1U)

	)

6438 
	#CAN_F1R1_FB1_Msk
 (0x1UL << 
CAN_F1R1_FB1_Pos
Ë

	)

6439 
	#CAN_F1R1_FB1
 
CAN_F1R1_FB1_Msk


	)

6440 
	#CAN_F1R1_FB2_Pos
 (2U)

	)

6441 
	#CAN_F1R1_FB2_Msk
 (0x1UL << 
CAN_F1R1_FB2_Pos
Ë

	)

6442 
	#CAN_F1R1_FB2
 
CAN_F1R1_FB2_Msk


	)

6443 
	#CAN_F1R1_FB3_Pos
 (3U)

	)

6444 
	#CAN_F1R1_FB3_Msk
 (0x1UL << 
CAN_F1R1_FB3_Pos
Ë

	)

6445 
	#CAN_F1R1_FB3
 
CAN_F1R1_FB3_Msk


	)

6446 
	#CAN_F1R1_FB4_Pos
 (4U)

	)

6447 
	#CAN_F1R1_FB4_Msk
 (0x1UL << 
CAN_F1R1_FB4_Pos
Ë

	)

6448 
	#CAN_F1R1_FB4
 
CAN_F1R1_FB4_Msk


	)

6449 
	#CAN_F1R1_FB5_Pos
 (5U)

	)

6450 
	#CAN_F1R1_FB5_Msk
 (0x1UL << 
CAN_F1R1_FB5_Pos
Ë

	)

6451 
	#CAN_F1R1_FB5
 
CAN_F1R1_FB5_Msk


	)

6452 
	#CAN_F1R1_FB6_Pos
 (6U)

	)

6453 
	#CAN_F1R1_FB6_Msk
 (0x1UL << 
CAN_F1R1_FB6_Pos
Ë

	)

6454 
	#CAN_F1R1_FB6
 
CAN_F1R1_FB6_Msk


	)

6455 
	#CAN_F1R1_FB7_Pos
 (7U)

	)

6456 
	#CAN_F1R1_FB7_Msk
 (0x1UL << 
CAN_F1R1_FB7_Pos
Ë

	)

6457 
	#CAN_F1R1_FB7
 
CAN_F1R1_FB7_Msk


	)

6458 
	#CAN_F1R1_FB8_Pos
 (8U)

	)

6459 
	#CAN_F1R1_FB8_Msk
 (0x1UL << 
CAN_F1R1_FB8_Pos
Ë

	)

6460 
	#CAN_F1R1_FB8
 
CAN_F1R1_FB8_Msk


	)

6461 
	#CAN_F1R1_FB9_Pos
 (9U)

	)

6462 
	#CAN_F1R1_FB9_Msk
 (0x1UL << 
CAN_F1R1_FB9_Pos
Ë

	)

6463 
	#CAN_F1R1_FB9
 
CAN_F1R1_FB9_Msk


	)

6464 
	#CAN_F1R1_FB10_Pos
 (10U)

	)

6465 
	#CAN_F1R1_FB10_Msk
 (0x1UL << 
CAN_F1R1_FB10_Pos
Ë

	)

6466 
	#CAN_F1R1_FB10
 
CAN_F1R1_FB10_Msk


	)

6467 
	#CAN_F1R1_FB11_Pos
 (11U)

	)

6468 
	#CAN_F1R1_FB11_Msk
 (0x1UL << 
CAN_F1R1_FB11_Pos
Ë

	)

6469 
	#CAN_F1R1_FB11
 
CAN_F1R1_FB11_Msk


	)

6470 
	#CAN_F1R1_FB12_Pos
 (12U)

	)

6471 
	#CAN_F1R1_FB12_Msk
 (0x1UL << 
CAN_F1R1_FB12_Pos
Ë

	)

6472 
	#CAN_F1R1_FB12
 
CAN_F1R1_FB12_Msk


	)

6473 
	#CAN_F1R1_FB13_Pos
 (13U)

	)

6474 
	#CAN_F1R1_FB13_Msk
 (0x1UL << 
CAN_F1R1_FB13_Pos
Ë

	)

6475 
	#CAN_F1R1_FB13
 
CAN_F1R1_FB13_Msk


	)

6476 
	#CAN_F1R1_FB14_Pos
 (14U)

	)

6477 
	#CAN_F1R1_FB14_Msk
 (0x1UL << 
CAN_F1R1_FB14_Pos
Ë

	)

6478 
	#CAN_F1R1_FB14
 
CAN_F1R1_FB14_Msk


	)

6479 
	#CAN_F1R1_FB15_Pos
 (15U)

	)

6480 
	#CAN_F1R1_FB15_Msk
 (0x1UL << 
CAN_F1R1_FB15_Pos
Ë

	)

6481 
	#CAN_F1R1_FB15
 
CAN_F1R1_FB15_Msk


	)

6482 
	#CAN_F1R1_FB16_Pos
 (16U)

	)

6483 
	#CAN_F1R1_FB16_Msk
 (0x1UL << 
CAN_F1R1_FB16_Pos
Ë

	)

6484 
	#CAN_F1R1_FB16
 
CAN_F1R1_FB16_Msk


	)

6485 
	#CAN_F1R1_FB17_Pos
 (17U)

	)

6486 
	#CAN_F1R1_FB17_Msk
 (0x1UL << 
CAN_F1R1_FB17_Pos
Ë

	)

6487 
	#CAN_F1R1_FB17
 
CAN_F1R1_FB17_Msk


	)

6488 
	#CAN_F1R1_FB18_Pos
 (18U)

	)

6489 
	#CAN_F1R1_FB18_Msk
 (0x1UL << 
CAN_F1R1_FB18_Pos
Ë

	)

6490 
	#CAN_F1R1_FB18
 
CAN_F1R1_FB18_Msk


	)

6491 
	#CAN_F1R1_FB19_Pos
 (19U)

	)

6492 
	#CAN_F1R1_FB19_Msk
 (0x1UL << 
CAN_F1R1_FB19_Pos
Ë

	)

6493 
	#CAN_F1R1_FB19
 
CAN_F1R1_FB19_Msk


	)

6494 
	#CAN_F1R1_FB20_Pos
 (20U)

	)

6495 
	#CAN_F1R1_FB20_Msk
 (0x1UL << 
CAN_F1R1_FB20_Pos
Ë

	)

6496 
	#CAN_F1R1_FB20
 
CAN_F1R1_FB20_Msk


	)

6497 
	#CAN_F1R1_FB21_Pos
 (21U)

	)

6498 
	#CAN_F1R1_FB21_Msk
 (0x1UL << 
CAN_F1R1_FB21_Pos
Ë

	)

6499 
	#CAN_F1R1_FB21
 
CAN_F1R1_FB21_Msk


	)

6500 
	#CAN_F1R1_FB22_Pos
 (22U)

	)

6501 
	#CAN_F1R1_FB22_Msk
 (0x1UL << 
CAN_F1R1_FB22_Pos
Ë

	)

6502 
	#CAN_F1R1_FB22
 
CAN_F1R1_FB22_Msk


	)

6503 
	#CAN_F1R1_FB23_Pos
 (23U)

	)

6504 
	#CAN_F1R1_FB23_Msk
 (0x1UL << 
CAN_F1R1_FB23_Pos
Ë

	)

6505 
	#CAN_F1R1_FB23
 
CAN_F1R1_FB23_Msk


	)

6506 
	#CAN_F1R1_FB24_Pos
 (24U)

	)

6507 
	#CAN_F1R1_FB24_Msk
 (0x1UL << 
CAN_F1R1_FB24_Pos
Ë

	)

6508 
	#CAN_F1R1_FB24
 
CAN_F1R1_FB24_Msk


	)

6509 
	#CAN_F1R1_FB25_Pos
 (25U)

	)

6510 
	#CAN_F1R1_FB25_Msk
 (0x1UL << 
CAN_F1R1_FB25_Pos
Ë

	)

6511 
	#CAN_F1R1_FB25
 
CAN_F1R1_FB25_Msk


	)

6512 
	#CAN_F1R1_FB26_Pos
 (26U)

	)

6513 
	#CAN_F1R1_FB26_Msk
 (0x1UL << 
CAN_F1R1_FB26_Pos
Ë

	)

6514 
	#CAN_F1R1_FB26
 
CAN_F1R1_FB26_Msk


	)

6515 
	#CAN_F1R1_FB27_Pos
 (27U)

	)

6516 
	#CAN_F1R1_FB27_Msk
 (0x1UL << 
CAN_F1R1_FB27_Pos
Ë

	)

6517 
	#CAN_F1R1_FB27
 
CAN_F1R1_FB27_Msk


	)

6518 
	#CAN_F1R1_FB28_Pos
 (28U)

	)

6519 
	#CAN_F1R1_FB28_Msk
 (0x1UL << 
CAN_F1R1_FB28_Pos
Ë

	)

6520 
	#CAN_F1R1_FB28
 
CAN_F1R1_FB28_Msk


	)

6521 
	#CAN_F1R1_FB29_Pos
 (29U)

	)

6522 
	#CAN_F1R1_FB29_Msk
 (0x1UL << 
CAN_F1R1_FB29_Pos
Ë

	)

6523 
	#CAN_F1R1_FB29
 
CAN_F1R1_FB29_Msk


	)

6524 
	#CAN_F1R1_FB30_Pos
 (30U)

	)

6525 
	#CAN_F1R1_FB30_Msk
 (0x1UL << 
CAN_F1R1_FB30_Pos
Ë

	)

6526 
	#CAN_F1R1_FB30
 
CAN_F1R1_FB30_Msk


	)

6527 
	#CAN_F1R1_FB31_Pos
 (31U)

	)

6528 
	#CAN_F1R1_FB31_Msk
 (0x1UL << 
CAN_F1R1_FB31_Pos
Ë

	)

6529 
	#CAN_F1R1_FB31
 
CAN_F1R1_FB31_Msk


	)

6532 
	#CAN_F2R1_FB0_Pos
 (0U)

	)

6533 
	#CAN_F2R1_FB0_Msk
 (0x1UL << 
CAN_F2R1_FB0_Pos
Ë

	)

6534 
	#CAN_F2R1_FB0
 
CAN_F2R1_FB0_Msk


	)

6535 
	#CAN_F2R1_FB1_Pos
 (1U)

	)

6536 
	#CAN_F2R1_FB1_Msk
 (0x1UL << 
CAN_F2R1_FB1_Pos
Ë

	)

6537 
	#CAN_F2R1_FB1
 
CAN_F2R1_FB1_Msk


	)

6538 
	#CAN_F2R1_FB2_Pos
 (2U)

	)

6539 
	#CAN_F2R1_FB2_Msk
 (0x1UL << 
CAN_F2R1_FB2_Pos
Ë

	)

6540 
	#CAN_F2R1_FB2
 
CAN_F2R1_FB2_Msk


	)

6541 
	#CAN_F2R1_FB3_Pos
 (3U)

	)

6542 
	#CAN_F2R1_FB3_Msk
 (0x1UL << 
CAN_F2R1_FB3_Pos
Ë

	)

6543 
	#CAN_F2R1_FB3
 
CAN_F2R1_FB3_Msk


	)

6544 
	#CAN_F2R1_FB4_Pos
 (4U)

	)

6545 
	#CAN_F2R1_FB4_Msk
 (0x1UL << 
CAN_F2R1_FB4_Pos
Ë

	)

6546 
	#CAN_F2R1_FB4
 
CAN_F2R1_FB4_Msk


	)

6547 
	#CAN_F2R1_FB5_Pos
 (5U)

	)

6548 
	#CAN_F2R1_FB5_Msk
 (0x1UL << 
CAN_F2R1_FB5_Pos
Ë

	)

6549 
	#CAN_F2R1_FB5
 
CAN_F2R1_FB5_Msk


	)

6550 
	#CAN_F2R1_FB6_Pos
 (6U)

	)

6551 
	#CAN_F2R1_FB6_Msk
 (0x1UL << 
CAN_F2R1_FB6_Pos
Ë

	)

6552 
	#CAN_F2R1_FB6
 
CAN_F2R1_FB6_Msk


	)

6553 
	#CAN_F2R1_FB7_Pos
 (7U)

	)

6554 
	#CAN_F2R1_FB7_Msk
 (0x1UL << 
CAN_F2R1_FB7_Pos
Ë

	)

6555 
	#CAN_F2R1_FB7
 
CAN_F2R1_FB7_Msk


	)

6556 
	#CAN_F2R1_FB8_Pos
 (8U)

	)

6557 
	#CAN_F2R1_FB8_Msk
 (0x1UL << 
CAN_F2R1_FB8_Pos
Ë

	)

6558 
	#CAN_F2R1_FB8
 
CAN_F2R1_FB8_Msk


	)

6559 
	#CAN_F2R1_FB9_Pos
 (9U)

	)

6560 
	#CAN_F2R1_FB9_Msk
 (0x1UL << 
CAN_F2R1_FB9_Pos
Ë

	)

6561 
	#CAN_F2R1_FB9
 
CAN_F2R1_FB9_Msk


	)

6562 
	#CAN_F2R1_FB10_Pos
 (10U)

	)

6563 
	#CAN_F2R1_FB10_Msk
 (0x1UL << 
CAN_F2R1_FB10_Pos
Ë

	)

6564 
	#CAN_F2R1_FB10
 
CAN_F2R1_FB10_Msk


	)

6565 
	#CAN_F2R1_FB11_Pos
 (11U)

	)

6566 
	#CAN_F2R1_FB11_Msk
 (0x1UL << 
CAN_F2R1_FB11_Pos
Ë

	)

6567 
	#CAN_F2R1_FB11
 
CAN_F2R1_FB11_Msk


	)

6568 
	#CAN_F2R1_FB12_Pos
 (12U)

	)

6569 
	#CAN_F2R1_FB12_Msk
 (0x1UL << 
CAN_F2R1_FB12_Pos
Ë

	)

6570 
	#CAN_F2R1_FB12
 
CAN_F2R1_FB12_Msk


	)

6571 
	#CAN_F2R1_FB13_Pos
 (13U)

	)

6572 
	#CAN_F2R1_FB13_Msk
 (0x1UL << 
CAN_F2R1_FB13_Pos
Ë

	)

6573 
	#CAN_F2R1_FB13
 
CAN_F2R1_FB13_Msk


	)

6574 
	#CAN_F2R1_FB14_Pos
 (14U)

	)

6575 
	#CAN_F2R1_FB14_Msk
 (0x1UL << 
CAN_F2R1_FB14_Pos
Ë

	)

6576 
	#CAN_F2R1_FB14
 
CAN_F2R1_FB14_Msk


	)

6577 
	#CAN_F2R1_FB15_Pos
 (15U)

	)

6578 
	#CAN_F2R1_FB15_Msk
 (0x1UL << 
CAN_F2R1_FB15_Pos
Ë

	)

6579 
	#CAN_F2R1_FB15
 
CAN_F2R1_FB15_Msk


	)

6580 
	#CAN_F2R1_FB16_Pos
 (16U)

	)

6581 
	#CAN_F2R1_FB16_Msk
 (0x1UL << 
CAN_F2R1_FB16_Pos
Ë

	)

6582 
	#CAN_F2R1_FB16
 
CAN_F2R1_FB16_Msk


	)

6583 
	#CAN_F2R1_FB17_Pos
 (17U)

	)

6584 
	#CAN_F2R1_FB17_Msk
 (0x1UL << 
CAN_F2R1_FB17_Pos
Ë

	)

6585 
	#CAN_F2R1_FB17
 
CAN_F2R1_FB17_Msk


	)

6586 
	#CAN_F2R1_FB18_Pos
 (18U)

	)

6587 
	#CAN_F2R1_FB18_Msk
 (0x1UL << 
CAN_F2R1_FB18_Pos
Ë

	)

6588 
	#CAN_F2R1_FB18
 
CAN_F2R1_FB18_Msk


	)

6589 
	#CAN_F2R1_FB19_Pos
 (19U)

	)

6590 
	#CAN_F2R1_FB19_Msk
 (0x1UL << 
CAN_F2R1_FB19_Pos
Ë

	)

6591 
	#CAN_F2R1_FB19
 
CAN_F2R1_FB19_Msk


	)

6592 
	#CAN_F2R1_FB20_Pos
 (20U)

	)

6593 
	#CAN_F2R1_FB20_Msk
 (0x1UL << 
CAN_F2R1_FB20_Pos
Ë

	)

6594 
	#CAN_F2R1_FB20
 
CAN_F2R1_FB20_Msk


	)

6595 
	#CAN_F2R1_FB21_Pos
 (21U)

	)

6596 
	#CAN_F2R1_FB21_Msk
 (0x1UL << 
CAN_F2R1_FB21_Pos
Ë

	)

6597 
	#CAN_F2R1_FB21
 
CAN_F2R1_FB21_Msk


	)

6598 
	#CAN_F2R1_FB22_Pos
 (22U)

	)

6599 
	#CAN_F2R1_FB22_Msk
 (0x1UL << 
CAN_F2R1_FB22_Pos
Ë

	)

6600 
	#CAN_F2R1_FB22
 
CAN_F2R1_FB22_Msk


	)

6601 
	#CAN_F2R1_FB23_Pos
 (23U)

	)

6602 
	#CAN_F2R1_FB23_Msk
 (0x1UL << 
CAN_F2R1_FB23_Pos
Ë

	)

6603 
	#CAN_F2R1_FB23
 
CAN_F2R1_FB23_Msk


	)

6604 
	#CAN_F2R1_FB24_Pos
 (24U)

	)

6605 
	#CAN_F2R1_FB24_Msk
 (0x1UL << 
CAN_F2R1_FB24_Pos
Ë

	)

6606 
	#CAN_F2R1_FB24
 
CAN_F2R1_FB24_Msk


	)

6607 
	#CAN_F2R1_FB25_Pos
 (25U)

	)

6608 
	#CAN_F2R1_FB25_Msk
 (0x1UL << 
CAN_F2R1_FB25_Pos
Ë

	)

6609 
	#CAN_F2R1_FB25
 
CAN_F2R1_FB25_Msk


	)

6610 
	#CAN_F2R1_FB26_Pos
 (26U)

	)

6611 
	#CAN_F2R1_FB26_Msk
 (0x1UL << 
CAN_F2R1_FB26_Pos
Ë

	)

6612 
	#CAN_F2R1_FB26
 
CAN_F2R1_FB26_Msk


	)

6613 
	#CAN_F2R1_FB27_Pos
 (27U)

	)

6614 
	#CAN_F2R1_FB27_Msk
 (0x1UL << 
CAN_F2R1_FB27_Pos
Ë

	)

6615 
	#CAN_F2R1_FB27
 
CAN_F2R1_FB27_Msk


	)

6616 
	#CAN_F2R1_FB28_Pos
 (28U)

	)

6617 
	#CAN_F2R1_FB28_Msk
 (0x1UL << 
CAN_F2R1_FB28_Pos
Ë

	)

6618 
	#CAN_F2R1_FB28
 
CAN_F2R1_FB28_Msk


	)

6619 
	#CAN_F2R1_FB29_Pos
 (29U)

	)

6620 
	#CAN_F2R1_FB29_Msk
 (0x1UL << 
CAN_F2R1_FB29_Pos
Ë

	)

6621 
	#CAN_F2R1_FB29
 
CAN_F2R1_FB29_Msk


	)

6622 
	#CAN_F2R1_FB30_Pos
 (30U)

	)

6623 
	#CAN_F2R1_FB30_Msk
 (0x1UL << 
CAN_F2R1_FB30_Pos
Ë

	)

6624 
	#CAN_F2R1_FB30
 
CAN_F2R1_FB30_Msk


	)

6625 
	#CAN_F2R1_FB31_Pos
 (31U)

	)

6626 
	#CAN_F2R1_FB31_Msk
 (0x1UL << 
CAN_F2R1_FB31_Pos
Ë

	)

6627 
	#CAN_F2R1_FB31
 
CAN_F2R1_FB31_Msk


	)

6630 
	#CAN_F3R1_FB0_Pos
 (0U)

	)

6631 
	#CAN_F3R1_FB0_Msk
 (0x1UL << 
CAN_F3R1_FB0_Pos
Ë

	)

6632 
	#CAN_F3R1_FB0
 
CAN_F3R1_FB0_Msk


	)

6633 
	#CAN_F3R1_FB1_Pos
 (1U)

	)

6634 
	#CAN_F3R1_FB1_Msk
 (0x1UL << 
CAN_F3R1_FB1_Pos
Ë

	)

6635 
	#CAN_F3R1_FB1
 
CAN_F3R1_FB1_Msk


	)

6636 
	#CAN_F3R1_FB2_Pos
 (2U)

	)

6637 
	#CAN_F3R1_FB2_Msk
 (0x1UL << 
CAN_F3R1_FB2_Pos
Ë

	)

6638 
	#CAN_F3R1_FB2
 
CAN_F3R1_FB2_Msk


	)

6639 
	#CAN_F3R1_FB3_Pos
 (3U)

	)

6640 
	#CAN_F3R1_FB3_Msk
 (0x1UL << 
CAN_F3R1_FB3_Pos
Ë

	)

6641 
	#CAN_F3R1_FB3
 
CAN_F3R1_FB3_Msk


	)

6642 
	#CAN_F3R1_FB4_Pos
 (4U)

	)

6643 
	#CAN_F3R1_FB4_Msk
 (0x1UL << 
CAN_F3R1_FB4_Pos
Ë

	)

6644 
	#CAN_F3R1_FB4
 
CAN_F3R1_FB4_Msk


	)

6645 
	#CAN_F3R1_FB5_Pos
 (5U)

	)

6646 
	#CAN_F3R1_FB5_Msk
 (0x1UL << 
CAN_F3R1_FB5_Pos
Ë

	)

6647 
	#CAN_F3R1_FB5
 
CAN_F3R1_FB5_Msk


	)

6648 
	#CAN_F3R1_FB6_Pos
 (6U)

	)

6649 
	#CAN_F3R1_FB6_Msk
 (0x1UL << 
CAN_F3R1_FB6_Pos
Ë

	)

6650 
	#CAN_F3R1_FB6
 
CAN_F3R1_FB6_Msk


	)

6651 
	#CAN_F3R1_FB7_Pos
 (7U)

	)

6652 
	#CAN_F3R1_FB7_Msk
 (0x1UL << 
CAN_F3R1_FB7_Pos
Ë

	)

6653 
	#CAN_F3R1_FB7
 
CAN_F3R1_FB7_Msk


	)

6654 
	#CAN_F3R1_FB8_Pos
 (8U)

	)

6655 
	#CAN_F3R1_FB8_Msk
 (0x1UL << 
CAN_F3R1_FB8_Pos
Ë

	)

6656 
	#CAN_F3R1_FB8
 
CAN_F3R1_FB8_Msk


	)

6657 
	#CAN_F3R1_FB9_Pos
 (9U)

	)

6658 
	#CAN_F3R1_FB9_Msk
 (0x1UL << 
CAN_F3R1_FB9_Pos
Ë

	)

6659 
	#CAN_F3R1_FB9
 
CAN_F3R1_FB9_Msk


	)

6660 
	#CAN_F3R1_FB10_Pos
 (10U)

	)

6661 
	#CAN_F3R1_FB10_Msk
 (0x1UL << 
CAN_F3R1_FB10_Pos
Ë

	)

6662 
	#CAN_F3R1_FB10
 
CAN_F3R1_FB10_Msk


	)

6663 
	#CAN_F3R1_FB11_Pos
 (11U)

	)

6664 
	#CAN_F3R1_FB11_Msk
 (0x1UL << 
CAN_F3R1_FB11_Pos
Ë

	)

6665 
	#CAN_F3R1_FB11
 
CAN_F3R1_FB11_Msk


	)

6666 
	#CAN_F3R1_FB12_Pos
 (12U)

	)

6667 
	#CAN_F3R1_FB12_Msk
 (0x1UL << 
CAN_F3R1_FB12_Pos
Ë

	)

6668 
	#CAN_F3R1_FB12
 
CAN_F3R1_FB12_Msk


	)

6669 
	#CAN_F3R1_FB13_Pos
 (13U)

	)

6670 
	#CAN_F3R1_FB13_Msk
 (0x1UL << 
CAN_F3R1_FB13_Pos
Ë

	)

6671 
	#CAN_F3R1_FB13
 
CAN_F3R1_FB13_Msk


	)

6672 
	#CAN_F3R1_FB14_Pos
 (14U)

	)

6673 
	#CAN_F3R1_FB14_Msk
 (0x1UL << 
CAN_F3R1_FB14_Pos
Ë

	)

6674 
	#CAN_F3R1_FB14
 
CAN_F3R1_FB14_Msk


	)

6675 
	#CAN_F3R1_FB15_Pos
 (15U)

	)

6676 
	#CAN_F3R1_FB15_Msk
 (0x1UL << 
CAN_F3R1_FB15_Pos
Ë

	)

6677 
	#CAN_F3R1_FB15
 
CAN_F3R1_FB15_Msk


	)

6678 
	#CAN_F3R1_FB16_Pos
 (16U)

	)

6679 
	#CAN_F3R1_FB16_Msk
 (0x1UL << 
CAN_F3R1_FB16_Pos
Ë

	)

6680 
	#CAN_F3R1_FB16
 
CAN_F3R1_FB16_Msk


	)

6681 
	#CAN_F3R1_FB17_Pos
 (17U)

	)

6682 
	#CAN_F3R1_FB17_Msk
 (0x1UL << 
CAN_F3R1_FB17_Pos
Ë

	)

6683 
	#CAN_F3R1_FB17
 
CAN_F3R1_FB17_Msk


	)

6684 
	#CAN_F3R1_FB18_Pos
 (18U)

	)

6685 
	#CAN_F3R1_FB18_Msk
 (0x1UL << 
CAN_F3R1_FB18_Pos
Ë

	)

6686 
	#CAN_F3R1_FB18
 
CAN_F3R1_FB18_Msk


	)

6687 
	#CAN_F3R1_FB19_Pos
 (19U)

	)

6688 
	#CAN_F3R1_FB19_Msk
 (0x1UL << 
CAN_F3R1_FB19_Pos
Ë

	)

6689 
	#CAN_F3R1_FB19
 
CAN_F3R1_FB19_Msk


	)

6690 
	#CAN_F3R1_FB20_Pos
 (20U)

	)

6691 
	#CAN_F3R1_FB20_Msk
 (0x1UL << 
CAN_F3R1_FB20_Pos
Ë

	)

6692 
	#CAN_F3R1_FB20
 
CAN_F3R1_FB20_Msk


	)

6693 
	#CAN_F3R1_FB21_Pos
 (21U)

	)

6694 
	#CAN_F3R1_FB21_Msk
 (0x1UL << 
CAN_F3R1_FB21_Pos
Ë

	)

6695 
	#CAN_F3R1_FB21
 
CAN_F3R1_FB21_Msk


	)

6696 
	#CAN_F3R1_FB22_Pos
 (22U)

	)

6697 
	#CAN_F3R1_FB22_Msk
 (0x1UL << 
CAN_F3R1_FB22_Pos
Ë

	)

6698 
	#CAN_F3R1_FB22
 
CAN_F3R1_FB22_Msk


	)

6699 
	#CAN_F3R1_FB23_Pos
 (23U)

	)

6700 
	#CAN_F3R1_FB23_Msk
 (0x1UL << 
CAN_F3R1_FB23_Pos
Ë

	)

6701 
	#CAN_F3R1_FB23
 
CAN_F3R1_FB23_Msk


	)

6702 
	#CAN_F3R1_FB24_Pos
 (24U)

	)

6703 
	#CAN_F3R1_FB24_Msk
 (0x1UL << 
CAN_F3R1_FB24_Pos
Ë

	)

6704 
	#CAN_F3R1_FB24
 
CAN_F3R1_FB24_Msk


	)

6705 
	#CAN_F3R1_FB25_Pos
 (25U)

	)

6706 
	#CAN_F3R1_FB25_Msk
 (0x1UL << 
CAN_F3R1_FB25_Pos
Ë

	)

6707 
	#CAN_F3R1_FB25
 
CAN_F3R1_FB25_Msk


	)

6708 
	#CAN_F3R1_FB26_Pos
 (26U)

	)

6709 
	#CAN_F3R1_FB26_Msk
 (0x1UL << 
CAN_F3R1_FB26_Pos
Ë

	)

6710 
	#CAN_F3R1_FB26
 
CAN_F3R1_FB26_Msk


	)

6711 
	#CAN_F3R1_FB27_Pos
 (27U)

	)

6712 
	#CAN_F3R1_FB27_Msk
 (0x1UL << 
CAN_F3R1_FB27_Pos
Ë

	)

6713 
	#CAN_F3R1_FB27
 
CAN_F3R1_FB27_Msk


	)

6714 
	#CAN_F3R1_FB28_Pos
 (28U)

	)

6715 
	#CAN_F3R1_FB28_Msk
 (0x1UL << 
CAN_F3R1_FB28_Pos
Ë

	)

6716 
	#CAN_F3R1_FB28
 
CAN_F3R1_FB28_Msk


	)

6717 
	#CAN_F3R1_FB29_Pos
 (29U)

	)

6718 
	#CAN_F3R1_FB29_Msk
 (0x1UL << 
CAN_F3R1_FB29_Pos
Ë

	)

6719 
	#CAN_F3R1_FB29
 
CAN_F3R1_FB29_Msk


	)

6720 
	#CAN_F3R1_FB30_Pos
 (30U)

	)

6721 
	#CAN_F3R1_FB30_Msk
 (0x1UL << 
CAN_F3R1_FB30_Pos
Ë

	)

6722 
	#CAN_F3R1_FB30
 
CAN_F3R1_FB30_Msk


	)

6723 
	#CAN_F3R1_FB31_Pos
 (31U)

	)

6724 
	#CAN_F3R1_FB31_Msk
 (0x1UL << 
CAN_F3R1_FB31_Pos
Ë

	)

6725 
	#CAN_F3R1_FB31
 
CAN_F3R1_FB31_Msk


	)

6728 
	#CAN_F4R1_FB0_Pos
 (0U)

	)

6729 
	#CAN_F4R1_FB0_Msk
 (0x1UL << 
CAN_F4R1_FB0_Pos
Ë

	)

6730 
	#CAN_F4R1_FB0
 
CAN_F4R1_FB0_Msk


	)

6731 
	#CAN_F4R1_FB1_Pos
 (1U)

	)

6732 
	#CAN_F4R1_FB1_Msk
 (0x1UL << 
CAN_F4R1_FB1_Pos
Ë

	)

6733 
	#CAN_F4R1_FB1
 
CAN_F4R1_FB1_Msk


	)

6734 
	#CAN_F4R1_FB2_Pos
 (2U)

	)

6735 
	#CAN_F4R1_FB2_Msk
 (0x1UL << 
CAN_F4R1_FB2_Pos
Ë

	)

6736 
	#CAN_F4R1_FB2
 
CAN_F4R1_FB2_Msk


	)

6737 
	#CAN_F4R1_FB3_Pos
 (3U)

	)

6738 
	#CAN_F4R1_FB3_Msk
 (0x1UL << 
CAN_F4R1_FB3_Pos
Ë

	)

6739 
	#CAN_F4R1_FB3
 
CAN_F4R1_FB3_Msk


	)

6740 
	#CAN_F4R1_FB4_Pos
 (4U)

	)

6741 
	#CAN_F4R1_FB4_Msk
 (0x1UL << 
CAN_F4R1_FB4_Pos
Ë

	)

6742 
	#CAN_F4R1_FB4
 
CAN_F4R1_FB4_Msk


	)

6743 
	#CAN_F4R1_FB5_Pos
 (5U)

	)

6744 
	#CAN_F4R1_FB5_Msk
 (0x1UL << 
CAN_F4R1_FB5_Pos
Ë

	)

6745 
	#CAN_F4R1_FB5
 
CAN_F4R1_FB5_Msk


	)

6746 
	#CAN_F4R1_FB6_Pos
 (6U)

	)

6747 
	#CAN_F4R1_FB6_Msk
 (0x1UL << 
CAN_F4R1_FB6_Pos
Ë

	)

6748 
	#CAN_F4R1_FB6
 
CAN_F4R1_FB6_Msk


	)

6749 
	#CAN_F4R1_FB7_Pos
 (7U)

	)

6750 
	#CAN_F4R1_FB7_Msk
 (0x1UL << 
CAN_F4R1_FB7_Pos
Ë

	)

6751 
	#CAN_F4R1_FB7
 
CAN_F4R1_FB7_Msk


	)

6752 
	#CAN_F4R1_FB8_Pos
 (8U)

	)

6753 
	#CAN_F4R1_FB8_Msk
 (0x1UL << 
CAN_F4R1_FB8_Pos
Ë

	)

6754 
	#CAN_F4R1_FB8
 
CAN_F4R1_FB8_Msk


	)

6755 
	#CAN_F4R1_FB9_Pos
 (9U)

	)

6756 
	#CAN_F4R1_FB9_Msk
 (0x1UL << 
CAN_F4R1_FB9_Pos
Ë

	)

6757 
	#CAN_F4R1_FB9
 
CAN_F4R1_FB9_Msk


	)

6758 
	#CAN_F4R1_FB10_Pos
 (10U)

	)

6759 
	#CAN_F4R1_FB10_Msk
 (0x1UL << 
CAN_F4R1_FB10_Pos
Ë

	)

6760 
	#CAN_F4R1_FB10
 
CAN_F4R1_FB10_Msk


	)

6761 
	#CAN_F4R1_FB11_Pos
 (11U)

	)

6762 
	#CAN_F4R1_FB11_Msk
 (0x1UL << 
CAN_F4R1_FB11_Pos
Ë

	)

6763 
	#CAN_F4R1_FB11
 
CAN_F4R1_FB11_Msk


	)

6764 
	#CAN_F4R1_FB12_Pos
 (12U)

	)

6765 
	#CAN_F4R1_FB12_Msk
 (0x1UL << 
CAN_F4R1_FB12_Pos
Ë

	)

6766 
	#CAN_F4R1_FB12
 
CAN_F4R1_FB12_Msk


	)

6767 
	#CAN_F4R1_FB13_Pos
 (13U)

	)

6768 
	#CAN_F4R1_FB13_Msk
 (0x1UL << 
CAN_F4R1_FB13_Pos
Ë

	)

6769 
	#CAN_F4R1_FB13
 
CAN_F4R1_FB13_Msk


	)

6770 
	#CAN_F4R1_FB14_Pos
 (14U)

	)

6771 
	#CAN_F4R1_FB14_Msk
 (0x1UL << 
CAN_F4R1_FB14_Pos
Ë

	)

6772 
	#CAN_F4R1_FB14
 
CAN_F4R1_FB14_Msk


	)

6773 
	#CAN_F4R1_FB15_Pos
 (15U)

	)

6774 
	#CAN_F4R1_FB15_Msk
 (0x1UL << 
CAN_F4R1_FB15_Pos
Ë

	)

6775 
	#CAN_F4R1_FB15
 
CAN_F4R1_FB15_Msk


	)

6776 
	#CAN_F4R1_FB16_Pos
 (16U)

	)

6777 
	#CAN_F4R1_FB16_Msk
 (0x1UL << 
CAN_F4R1_FB16_Pos
Ë

	)

6778 
	#CAN_F4R1_FB16
 
CAN_F4R1_FB16_Msk


	)

6779 
	#CAN_F4R1_FB17_Pos
 (17U)

	)

6780 
	#CAN_F4R1_FB17_Msk
 (0x1UL << 
CAN_F4R1_FB17_Pos
Ë

	)

6781 
	#CAN_F4R1_FB17
 
CAN_F4R1_FB17_Msk


	)

6782 
	#CAN_F4R1_FB18_Pos
 (18U)

	)

6783 
	#CAN_F4R1_FB18_Msk
 (0x1UL << 
CAN_F4R1_FB18_Pos
Ë

	)

6784 
	#CAN_F4R1_FB18
 
CAN_F4R1_FB18_Msk


	)

6785 
	#CAN_F4R1_FB19_Pos
 (19U)

	)

6786 
	#CAN_F4R1_FB19_Msk
 (0x1UL << 
CAN_F4R1_FB19_Pos
Ë

	)

6787 
	#CAN_F4R1_FB19
 
CAN_F4R1_FB19_Msk


	)

6788 
	#CAN_F4R1_FB20_Pos
 (20U)

	)

6789 
	#CAN_F4R1_FB20_Msk
 (0x1UL << 
CAN_F4R1_FB20_Pos
Ë

	)

6790 
	#CAN_F4R1_FB20
 
CAN_F4R1_FB20_Msk


	)

6791 
	#CAN_F4R1_FB21_Pos
 (21U)

	)

6792 
	#CAN_F4R1_FB21_Msk
 (0x1UL << 
CAN_F4R1_FB21_Pos
Ë

	)

6793 
	#CAN_F4R1_FB21
 
CAN_F4R1_FB21_Msk


	)

6794 
	#CAN_F4R1_FB22_Pos
 (22U)

	)

6795 
	#CAN_F4R1_FB22_Msk
 (0x1UL << 
CAN_F4R1_FB22_Pos
Ë

	)

6796 
	#CAN_F4R1_FB22
 
CAN_F4R1_FB22_Msk


	)

6797 
	#CAN_F4R1_FB23_Pos
 (23U)

	)

6798 
	#CAN_F4R1_FB23_Msk
 (0x1UL << 
CAN_F4R1_FB23_Pos
Ë

	)

6799 
	#CAN_F4R1_FB23
 
CAN_F4R1_FB23_Msk


	)

6800 
	#CAN_F4R1_FB24_Pos
 (24U)

	)

6801 
	#CAN_F4R1_FB24_Msk
 (0x1UL << 
CAN_F4R1_FB24_Pos
Ë

	)

6802 
	#CAN_F4R1_FB24
 
CAN_F4R1_FB24_Msk


	)

6803 
	#CAN_F4R1_FB25_Pos
 (25U)

	)

6804 
	#CAN_F4R1_FB25_Msk
 (0x1UL << 
CAN_F4R1_FB25_Pos
Ë

	)

6805 
	#CAN_F4R1_FB25
 
CAN_F4R1_FB25_Msk


	)

6806 
	#CAN_F4R1_FB26_Pos
 (26U)

	)

6807 
	#CAN_F4R1_FB26_Msk
 (0x1UL << 
CAN_F4R1_FB26_Pos
Ë

	)

6808 
	#CAN_F4R1_FB26
 
CAN_F4R1_FB26_Msk


	)

6809 
	#CAN_F4R1_FB27_Pos
 (27U)

	)

6810 
	#CAN_F4R1_FB27_Msk
 (0x1UL << 
CAN_F4R1_FB27_Pos
Ë

	)

6811 
	#CAN_F4R1_FB27
 
CAN_F4R1_FB27_Msk


	)

6812 
	#CAN_F4R1_FB28_Pos
 (28U)

	)

6813 
	#CAN_F4R1_FB28_Msk
 (0x1UL << 
CAN_F4R1_FB28_Pos
Ë

	)

6814 
	#CAN_F4R1_FB28
 
CAN_F4R1_FB28_Msk


	)

6815 
	#CAN_F4R1_FB29_Pos
 (29U)

	)

6816 
	#CAN_F4R1_FB29_Msk
 (0x1UL << 
CAN_F4R1_FB29_Pos
Ë

	)

6817 
	#CAN_F4R1_FB29
 
CAN_F4R1_FB29_Msk


	)

6818 
	#CAN_F4R1_FB30_Pos
 (30U)

	)

6819 
	#CAN_F4R1_FB30_Msk
 (0x1UL << 
CAN_F4R1_FB30_Pos
Ë

	)

6820 
	#CAN_F4R1_FB30
 
CAN_F4R1_FB30_Msk


	)

6821 
	#CAN_F4R1_FB31_Pos
 (31U)

	)

6822 
	#CAN_F4R1_FB31_Msk
 (0x1UL << 
CAN_F4R1_FB31_Pos
Ë

	)

6823 
	#CAN_F4R1_FB31
 
CAN_F4R1_FB31_Msk


	)

6826 
	#CAN_F5R1_FB0_Pos
 (0U)

	)

6827 
	#CAN_F5R1_FB0_Msk
 (0x1UL << 
CAN_F5R1_FB0_Pos
Ë

	)

6828 
	#CAN_F5R1_FB0
 
CAN_F5R1_FB0_Msk


	)

6829 
	#CAN_F5R1_FB1_Pos
 (1U)

	)

6830 
	#CAN_F5R1_FB1_Msk
 (0x1UL << 
CAN_F5R1_FB1_Pos
Ë

	)

6831 
	#CAN_F5R1_FB1
 
CAN_F5R1_FB1_Msk


	)

6832 
	#CAN_F5R1_FB2_Pos
 (2U)

	)

6833 
	#CAN_F5R1_FB2_Msk
 (0x1UL << 
CAN_F5R1_FB2_Pos
Ë

	)

6834 
	#CAN_F5R1_FB2
 
CAN_F5R1_FB2_Msk


	)

6835 
	#CAN_F5R1_FB3_Pos
 (3U)

	)

6836 
	#CAN_F5R1_FB3_Msk
 (0x1UL << 
CAN_F5R1_FB3_Pos
Ë

	)

6837 
	#CAN_F5R1_FB3
 
CAN_F5R1_FB3_Msk


	)

6838 
	#CAN_F5R1_FB4_Pos
 (4U)

	)

6839 
	#CAN_F5R1_FB4_Msk
 (0x1UL << 
CAN_F5R1_FB4_Pos
Ë

	)

6840 
	#CAN_F5R1_FB4
 
CAN_F5R1_FB4_Msk


	)

6841 
	#CAN_F5R1_FB5_Pos
 (5U)

	)

6842 
	#CAN_F5R1_FB5_Msk
 (0x1UL << 
CAN_F5R1_FB5_Pos
Ë

	)

6843 
	#CAN_F5R1_FB5
 
CAN_F5R1_FB5_Msk


	)

6844 
	#CAN_F5R1_FB6_Pos
 (6U)

	)

6845 
	#CAN_F5R1_FB6_Msk
 (0x1UL << 
CAN_F5R1_FB6_Pos
Ë

	)

6846 
	#CAN_F5R1_FB6
 
CAN_F5R1_FB6_Msk


	)

6847 
	#CAN_F5R1_FB7_Pos
 (7U)

	)

6848 
	#CAN_F5R1_FB7_Msk
 (0x1UL << 
CAN_F5R1_FB7_Pos
Ë

	)

6849 
	#CAN_F5R1_FB7
 
CAN_F5R1_FB7_Msk


	)

6850 
	#CAN_F5R1_FB8_Pos
 (8U)

	)

6851 
	#CAN_F5R1_FB8_Msk
 (0x1UL << 
CAN_F5R1_FB8_Pos
Ë

	)

6852 
	#CAN_F5R1_FB8
 
CAN_F5R1_FB8_Msk


	)

6853 
	#CAN_F5R1_FB9_Pos
 (9U)

	)

6854 
	#CAN_F5R1_FB9_Msk
 (0x1UL << 
CAN_F5R1_FB9_Pos
Ë

	)

6855 
	#CAN_F5R1_FB9
 
CAN_F5R1_FB9_Msk


	)

6856 
	#CAN_F5R1_FB10_Pos
 (10U)

	)

6857 
	#CAN_F5R1_FB10_Msk
 (0x1UL << 
CAN_F5R1_FB10_Pos
Ë

	)

6858 
	#CAN_F5R1_FB10
 
CAN_F5R1_FB10_Msk


	)

6859 
	#CAN_F5R1_FB11_Pos
 (11U)

	)

6860 
	#CAN_F5R1_FB11_Msk
 (0x1UL << 
CAN_F5R1_FB11_Pos
Ë

	)

6861 
	#CAN_F5R1_FB11
 
CAN_F5R1_FB11_Msk


	)

6862 
	#CAN_F5R1_FB12_Pos
 (12U)

	)

6863 
	#CAN_F5R1_FB12_Msk
 (0x1UL << 
CAN_F5R1_FB12_Pos
Ë

	)

6864 
	#CAN_F5R1_FB12
 
CAN_F5R1_FB12_Msk


	)

6865 
	#CAN_F5R1_FB13_Pos
 (13U)

	)

6866 
	#CAN_F5R1_FB13_Msk
 (0x1UL << 
CAN_F5R1_FB13_Pos
Ë

	)

6867 
	#CAN_F5R1_FB13
 
CAN_F5R1_FB13_Msk


	)

6868 
	#CAN_F5R1_FB14_Pos
 (14U)

	)

6869 
	#CAN_F5R1_FB14_Msk
 (0x1UL << 
CAN_F5R1_FB14_Pos
Ë

	)

6870 
	#CAN_F5R1_FB14
 
CAN_F5R1_FB14_Msk


	)

6871 
	#CAN_F5R1_FB15_Pos
 (15U)

	)

6872 
	#CAN_F5R1_FB15_Msk
 (0x1UL << 
CAN_F5R1_FB15_Pos
Ë

	)

6873 
	#CAN_F5R1_FB15
 
CAN_F5R1_FB15_Msk


	)

6874 
	#CAN_F5R1_FB16_Pos
 (16U)

	)

6875 
	#CAN_F5R1_FB16_Msk
 (0x1UL << 
CAN_F5R1_FB16_Pos
Ë

	)

6876 
	#CAN_F5R1_FB16
 
CAN_F5R1_FB16_Msk


	)

6877 
	#CAN_F5R1_FB17_Pos
 (17U)

	)

6878 
	#CAN_F5R1_FB17_Msk
 (0x1UL << 
CAN_F5R1_FB17_Pos
Ë

	)

6879 
	#CAN_F5R1_FB17
 
CAN_F5R1_FB17_Msk


	)

6880 
	#CAN_F5R1_FB18_Pos
 (18U)

	)

6881 
	#CAN_F5R1_FB18_Msk
 (0x1UL << 
CAN_F5R1_FB18_Pos
Ë

	)

6882 
	#CAN_F5R1_FB18
 
CAN_F5R1_FB18_Msk


	)

6883 
	#CAN_F5R1_FB19_Pos
 (19U)

	)

6884 
	#CAN_F5R1_FB19_Msk
 (0x1UL << 
CAN_F5R1_FB19_Pos
Ë

	)

6885 
	#CAN_F5R1_FB19
 
CAN_F5R1_FB19_Msk


	)

6886 
	#CAN_F5R1_FB20_Pos
 (20U)

	)

6887 
	#CAN_F5R1_FB20_Msk
 (0x1UL << 
CAN_F5R1_FB20_Pos
Ë

	)

6888 
	#CAN_F5R1_FB20
 
CAN_F5R1_FB20_Msk


	)

6889 
	#CAN_F5R1_FB21_Pos
 (21U)

	)

6890 
	#CAN_F5R1_FB21_Msk
 (0x1UL << 
CAN_F5R1_FB21_Pos
Ë

	)

6891 
	#CAN_F5R1_FB21
 
CAN_F5R1_FB21_Msk


	)

6892 
	#CAN_F5R1_FB22_Pos
 (22U)

	)

6893 
	#CAN_F5R1_FB22_Msk
 (0x1UL << 
CAN_F5R1_FB22_Pos
Ë

	)

6894 
	#CAN_F5R1_FB22
 
CAN_F5R1_FB22_Msk


	)

6895 
	#CAN_F5R1_FB23_Pos
 (23U)

	)

6896 
	#CAN_F5R1_FB23_Msk
 (0x1UL << 
CAN_F5R1_FB23_Pos
Ë

	)

6897 
	#CAN_F5R1_FB23
 
CAN_F5R1_FB23_Msk


	)

6898 
	#CAN_F5R1_FB24_Pos
 (24U)

	)

6899 
	#CAN_F5R1_FB24_Msk
 (0x1UL << 
CAN_F5R1_FB24_Pos
Ë

	)

6900 
	#CAN_F5R1_FB24
 
CAN_F5R1_FB24_Msk


	)

6901 
	#CAN_F5R1_FB25_Pos
 (25U)

	)

6902 
	#CAN_F5R1_FB25_Msk
 (0x1UL << 
CAN_F5R1_FB25_Pos
Ë

	)

6903 
	#CAN_F5R1_FB25
 
CAN_F5R1_FB25_Msk


	)

6904 
	#CAN_F5R1_FB26_Pos
 (26U)

	)

6905 
	#CAN_F5R1_FB26_Msk
 (0x1UL << 
CAN_F5R1_FB26_Pos
Ë

	)

6906 
	#CAN_F5R1_FB26
 
CAN_F5R1_FB26_Msk


	)

6907 
	#CAN_F5R1_FB27_Pos
 (27U)

	)

6908 
	#CAN_F5R1_FB27_Msk
 (0x1UL << 
CAN_F5R1_FB27_Pos
Ë

	)

6909 
	#CAN_F5R1_FB27
 
CAN_F5R1_FB27_Msk


	)

6910 
	#CAN_F5R1_FB28_Pos
 (28U)

	)

6911 
	#CAN_F5R1_FB28_Msk
 (0x1UL << 
CAN_F5R1_FB28_Pos
Ë

	)

6912 
	#CAN_F5R1_FB28
 
CAN_F5R1_FB28_Msk


	)

6913 
	#CAN_F5R1_FB29_Pos
 (29U)

	)

6914 
	#CAN_F5R1_FB29_Msk
 (0x1UL << 
CAN_F5R1_FB29_Pos
Ë

	)

6915 
	#CAN_F5R1_FB29
 
CAN_F5R1_FB29_Msk


	)

6916 
	#CAN_F5R1_FB30_Pos
 (30U)

	)

6917 
	#CAN_F5R1_FB30_Msk
 (0x1UL << 
CAN_F5R1_FB30_Pos
Ë

	)

6918 
	#CAN_F5R1_FB30
 
CAN_F5R1_FB30_Msk


	)

6919 
	#CAN_F5R1_FB31_Pos
 (31U)

	)

6920 
	#CAN_F5R1_FB31_Msk
 (0x1UL << 
CAN_F5R1_FB31_Pos
Ë

	)

6921 
	#CAN_F5R1_FB31
 
CAN_F5R1_FB31_Msk


	)

6924 
	#CAN_F6R1_FB0_Pos
 (0U)

	)

6925 
	#CAN_F6R1_FB0_Msk
 (0x1UL << 
CAN_F6R1_FB0_Pos
Ë

	)

6926 
	#CAN_F6R1_FB0
 
CAN_F6R1_FB0_Msk


	)

6927 
	#CAN_F6R1_FB1_Pos
 (1U)

	)

6928 
	#CAN_F6R1_FB1_Msk
 (0x1UL << 
CAN_F6R1_FB1_Pos
Ë

	)

6929 
	#CAN_F6R1_FB1
 
CAN_F6R1_FB1_Msk


	)

6930 
	#CAN_F6R1_FB2_Pos
 (2U)

	)

6931 
	#CAN_F6R1_FB2_Msk
 (0x1UL << 
CAN_F6R1_FB2_Pos
Ë

	)

6932 
	#CAN_F6R1_FB2
 
CAN_F6R1_FB2_Msk


	)

6933 
	#CAN_F6R1_FB3_Pos
 (3U)

	)

6934 
	#CAN_F6R1_FB3_Msk
 (0x1UL << 
CAN_F6R1_FB3_Pos
Ë

	)

6935 
	#CAN_F6R1_FB3
 
CAN_F6R1_FB3_Msk


	)

6936 
	#CAN_F6R1_FB4_Pos
 (4U)

	)

6937 
	#CAN_F6R1_FB4_Msk
 (0x1UL << 
CAN_F6R1_FB4_Pos
Ë

	)

6938 
	#CAN_F6R1_FB4
 
CAN_F6R1_FB4_Msk


	)

6939 
	#CAN_F6R1_FB5_Pos
 (5U)

	)

6940 
	#CAN_F6R1_FB5_Msk
 (0x1UL << 
CAN_F6R1_FB5_Pos
Ë

	)

6941 
	#CAN_F6R1_FB5
 
CAN_F6R1_FB5_Msk


	)

6942 
	#CAN_F6R1_FB6_Pos
 (6U)

	)

6943 
	#CAN_F6R1_FB6_Msk
 (0x1UL << 
CAN_F6R1_FB6_Pos
Ë

	)

6944 
	#CAN_F6R1_FB6
 
CAN_F6R1_FB6_Msk


	)

6945 
	#CAN_F6R1_FB7_Pos
 (7U)

	)

6946 
	#CAN_F6R1_FB7_Msk
 (0x1UL << 
CAN_F6R1_FB7_Pos
Ë

	)

6947 
	#CAN_F6R1_FB7
 
CAN_F6R1_FB7_Msk


	)

6948 
	#CAN_F6R1_FB8_Pos
 (8U)

	)

6949 
	#CAN_F6R1_FB8_Msk
 (0x1UL << 
CAN_F6R1_FB8_Pos
Ë

	)

6950 
	#CAN_F6R1_FB8
 
CAN_F6R1_FB8_Msk


	)

6951 
	#CAN_F6R1_FB9_Pos
 (9U)

	)

6952 
	#CAN_F6R1_FB9_Msk
 (0x1UL << 
CAN_F6R1_FB9_Pos
Ë

	)

6953 
	#CAN_F6R1_FB9
 
CAN_F6R1_FB9_Msk


	)

6954 
	#CAN_F6R1_FB10_Pos
 (10U)

	)

6955 
	#CAN_F6R1_FB10_Msk
 (0x1UL << 
CAN_F6R1_FB10_Pos
Ë

	)

6956 
	#CAN_F6R1_FB10
 
CAN_F6R1_FB10_Msk


	)

6957 
	#CAN_F6R1_FB11_Pos
 (11U)

	)

6958 
	#CAN_F6R1_FB11_Msk
 (0x1UL << 
CAN_F6R1_FB11_Pos
Ë

	)

6959 
	#CAN_F6R1_FB11
 
CAN_F6R1_FB11_Msk


	)

6960 
	#CAN_F6R1_FB12_Pos
 (12U)

	)

6961 
	#CAN_F6R1_FB12_Msk
 (0x1UL << 
CAN_F6R1_FB12_Pos
Ë

	)

6962 
	#CAN_F6R1_FB12
 
CAN_F6R1_FB12_Msk


	)

6963 
	#CAN_F6R1_FB13_Pos
 (13U)

	)

6964 
	#CAN_F6R1_FB13_Msk
 (0x1UL << 
CAN_F6R1_FB13_Pos
Ë

	)

6965 
	#CAN_F6R1_FB13
 
CAN_F6R1_FB13_Msk


	)

6966 
	#CAN_F6R1_FB14_Pos
 (14U)

	)

6967 
	#CAN_F6R1_FB14_Msk
 (0x1UL << 
CAN_F6R1_FB14_Pos
Ë

	)

6968 
	#CAN_F6R1_FB14
 
CAN_F6R1_FB14_Msk


	)

6969 
	#CAN_F6R1_FB15_Pos
 (15U)

	)

6970 
	#CAN_F6R1_FB15_Msk
 (0x1UL << 
CAN_F6R1_FB15_Pos
Ë

	)

6971 
	#CAN_F6R1_FB15
 
CAN_F6R1_FB15_Msk


	)

6972 
	#CAN_F6R1_FB16_Pos
 (16U)

	)

6973 
	#CAN_F6R1_FB16_Msk
 (0x1UL << 
CAN_F6R1_FB16_Pos
Ë

	)

6974 
	#CAN_F6R1_FB16
 
CAN_F6R1_FB16_Msk


	)

6975 
	#CAN_F6R1_FB17_Pos
 (17U)

	)

6976 
	#CAN_F6R1_FB17_Msk
 (0x1UL << 
CAN_F6R1_FB17_Pos
Ë

	)

6977 
	#CAN_F6R1_FB17
 
CAN_F6R1_FB17_Msk


	)

6978 
	#CAN_F6R1_FB18_Pos
 (18U)

	)

6979 
	#CAN_F6R1_FB18_Msk
 (0x1UL << 
CAN_F6R1_FB18_Pos
Ë

	)

6980 
	#CAN_F6R1_FB18
 
CAN_F6R1_FB18_Msk


	)

6981 
	#CAN_F6R1_FB19_Pos
 (19U)

	)

6982 
	#CAN_F6R1_FB19_Msk
 (0x1UL << 
CAN_F6R1_FB19_Pos
Ë

	)

6983 
	#CAN_F6R1_FB19
 
CAN_F6R1_FB19_Msk


	)

6984 
	#CAN_F6R1_FB20_Pos
 (20U)

	)

6985 
	#CAN_F6R1_FB20_Msk
 (0x1UL << 
CAN_F6R1_FB20_Pos
Ë

	)

6986 
	#CAN_F6R1_FB20
 
CAN_F6R1_FB20_Msk


	)

6987 
	#CAN_F6R1_FB21_Pos
 (21U)

	)

6988 
	#CAN_F6R1_FB21_Msk
 (0x1UL << 
CAN_F6R1_FB21_Pos
Ë

	)

6989 
	#CAN_F6R1_FB21
 
CAN_F6R1_FB21_Msk


	)

6990 
	#CAN_F6R1_FB22_Pos
 (22U)

	)

6991 
	#CAN_F6R1_FB22_Msk
 (0x1UL << 
CAN_F6R1_FB22_Pos
Ë

	)

6992 
	#CAN_F6R1_FB22
 
CAN_F6R1_FB22_Msk


	)

6993 
	#CAN_F6R1_FB23_Pos
 (23U)

	)

6994 
	#CAN_F6R1_FB23_Msk
 (0x1UL << 
CAN_F6R1_FB23_Pos
Ë

	)

6995 
	#CAN_F6R1_FB23
 
CAN_F6R1_FB23_Msk


	)

6996 
	#CAN_F6R1_FB24_Pos
 (24U)

	)

6997 
	#CAN_F6R1_FB24_Msk
 (0x1UL << 
CAN_F6R1_FB24_Pos
Ë

	)

6998 
	#CAN_F6R1_FB24
 
CAN_F6R1_FB24_Msk


	)

6999 
	#CAN_F6R1_FB25_Pos
 (25U)

	)

7000 
	#CAN_F6R1_FB25_Msk
 (0x1UL << 
CAN_F6R1_FB25_Pos
Ë

	)

7001 
	#CAN_F6R1_FB25
 
CAN_F6R1_FB25_Msk


	)

7002 
	#CAN_F6R1_FB26_Pos
 (26U)

	)

7003 
	#CAN_F6R1_FB26_Msk
 (0x1UL << 
CAN_F6R1_FB26_Pos
Ë

	)

7004 
	#CAN_F6R1_FB26
 
CAN_F6R1_FB26_Msk


	)

7005 
	#CAN_F6R1_FB27_Pos
 (27U)

	)

7006 
	#CAN_F6R1_FB27_Msk
 (0x1UL << 
CAN_F6R1_FB27_Pos
Ë

	)

7007 
	#CAN_F6R1_FB27
 
CAN_F6R1_FB27_Msk


	)

7008 
	#CAN_F6R1_FB28_Pos
 (28U)

	)

7009 
	#CAN_F6R1_FB28_Msk
 (0x1UL << 
CAN_F6R1_FB28_Pos
Ë

	)

7010 
	#CAN_F6R1_FB28
 
CAN_F6R1_FB28_Msk


	)

7011 
	#CAN_F6R1_FB29_Pos
 (29U)

	)

7012 
	#CAN_F6R1_FB29_Msk
 (0x1UL << 
CAN_F6R1_FB29_Pos
Ë

	)

7013 
	#CAN_F6R1_FB29
 
CAN_F6R1_FB29_Msk


	)

7014 
	#CAN_F6R1_FB30_Pos
 (30U)

	)

7015 
	#CAN_F6R1_FB30_Msk
 (0x1UL << 
CAN_F6R1_FB30_Pos
Ë

	)

7016 
	#CAN_F6R1_FB30
 
CAN_F6R1_FB30_Msk


	)

7017 
	#CAN_F6R1_FB31_Pos
 (31U)

	)

7018 
	#CAN_F6R1_FB31_Msk
 (0x1UL << 
CAN_F6R1_FB31_Pos
Ë

	)

7019 
	#CAN_F6R1_FB31
 
CAN_F6R1_FB31_Msk


	)

7022 
	#CAN_F7R1_FB0_Pos
 (0U)

	)

7023 
	#CAN_F7R1_FB0_Msk
 (0x1UL << 
CAN_F7R1_FB0_Pos
Ë

	)

7024 
	#CAN_F7R1_FB0
 
CAN_F7R1_FB0_Msk


	)

7025 
	#CAN_F7R1_FB1_Pos
 (1U)

	)

7026 
	#CAN_F7R1_FB1_Msk
 (0x1UL << 
CAN_F7R1_FB1_Pos
Ë

	)

7027 
	#CAN_F7R1_FB1
 
CAN_F7R1_FB1_Msk


	)

7028 
	#CAN_F7R1_FB2_Pos
 (2U)

	)

7029 
	#CAN_F7R1_FB2_Msk
 (0x1UL << 
CAN_F7R1_FB2_Pos
Ë

	)

7030 
	#CAN_F7R1_FB2
 
CAN_F7R1_FB2_Msk


	)

7031 
	#CAN_F7R1_FB3_Pos
 (3U)

	)

7032 
	#CAN_F7R1_FB3_Msk
 (0x1UL << 
CAN_F7R1_FB3_Pos
Ë

	)

7033 
	#CAN_F7R1_FB3
 
CAN_F7R1_FB3_Msk


	)

7034 
	#CAN_F7R1_FB4_Pos
 (4U)

	)

7035 
	#CAN_F7R1_FB4_Msk
 (0x1UL << 
CAN_F7R1_FB4_Pos
Ë

	)

7036 
	#CAN_F7R1_FB4
 
CAN_F7R1_FB4_Msk


	)

7037 
	#CAN_F7R1_FB5_Pos
 (5U)

	)

7038 
	#CAN_F7R1_FB5_Msk
 (0x1UL << 
CAN_F7R1_FB5_Pos
Ë

	)

7039 
	#CAN_F7R1_FB5
 
CAN_F7R1_FB5_Msk


	)

7040 
	#CAN_F7R1_FB6_Pos
 (6U)

	)

7041 
	#CAN_F7R1_FB6_Msk
 (0x1UL << 
CAN_F7R1_FB6_Pos
Ë

	)

7042 
	#CAN_F7R1_FB6
 
CAN_F7R1_FB6_Msk


	)

7043 
	#CAN_F7R1_FB7_Pos
 (7U)

	)

7044 
	#CAN_F7R1_FB7_Msk
 (0x1UL << 
CAN_F7R1_FB7_Pos
Ë

	)

7045 
	#CAN_F7R1_FB7
 
CAN_F7R1_FB7_Msk


	)

7046 
	#CAN_F7R1_FB8_Pos
 (8U)

	)

7047 
	#CAN_F7R1_FB8_Msk
 (0x1UL << 
CAN_F7R1_FB8_Pos
Ë

	)

7048 
	#CAN_F7R1_FB8
 
CAN_F7R1_FB8_Msk


	)

7049 
	#CAN_F7R1_FB9_Pos
 (9U)

	)

7050 
	#CAN_F7R1_FB9_Msk
 (0x1UL << 
CAN_F7R1_FB9_Pos
Ë

	)

7051 
	#CAN_F7R1_FB9
 
CAN_F7R1_FB9_Msk


	)

7052 
	#CAN_F7R1_FB10_Pos
 (10U)

	)

7053 
	#CAN_F7R1_FB10_Msk
 (0x1UL << 
CAN_F7R1_FB10_Pos
Ë

	)

7054 
	#CAN_F7R1_FB10
 
CAN_F7R1_FB10_Msk


	)

7055 
	#CAN_F7R1_FB11_Pos
 (11U)

	)

7056 
	#CAN_F7R1_FB11_Msk
 (0x1UL << 
CAN_F7R1_FB11_Pos
Ë

	)

7057 
	#CAN_F7R1_FB11
 
CAN_F7R1_FB11_Msk


	)

7058 
	#CAN_F7R1_FB12_Pos
 (12U)

	)

7059 
	#CAN_F7R1_FB12_Msk
 (0x1UL << 
CAN_F7R1_FB12_Pos
Ë

	)

7060 
	#CAN_F7R1_FB12
 
CAN_F7R1_FB12_Msk


	)

7061 
	#CAN_F7R1_FB13_Pos
 (13U)

	)

7062 
	#CAN_F7R1_FB13_Msk
 (0x1UL << 
CAN_F7R1_FB13_Pos
Ë

	)

7063 
	#CAN_F7R1_FB13
 
CAN_F7R1_FB13_Msk


	)

7064 
	#CAN_F7R1_FB14_Pos
 (14U)

	)

7065 
	#CAN_F7R1_FB14_Msk
 (0x1UL << 
CAN_F7R1_FB14_Pos
Ë

	)

7066 
	#CAN_F7R1_FB14
 
CAN_F7R1_FB14_Msk


	)

7067 
	#CAN_F7R1_FB15_Pos
 (15U)

	)

7068 
	#CAN_F7R1_FB15_Msk
 (0x1UL << 
CAN_F7R1_FB15_Pos
Ë

	)

7069 
	#CAN_F7R1_FB15
 
CAN_F7R1_FB15_Msk


	)

7070 
	#CAN_F7R1_FB16_Pos
 (16U)

	)

7071 
	#CAN_F7R1_FB16_Msk
 (0x1UL << 
CAN_F7R1_FB16_Pos
Ë

	)

7072 
	#CAN_F7R1_FB16
 
CAN_F7R1_FB16_Msk


	)

7073 
	#CAN_F7R1_FB17_Pos
 (17U)

	)

7074 
	#CAN_F7R1_FB17_Msk
 (0x1UL << 
CAN_F7R1_FB17_Pos
Ë

	)

7075 
	#CAN_F7R1_FB17
 
CAN_F7R1_FB17_Msk


	)

7076 
	#CAN_F7R1_FB18_Pos
 (18U)

	)

7077 
	#CAN_F7R1_FB18_Msk
 (0x1UL << 
CAN_F7R1_FB18_Pos
Ë

	)

7078 
	#CAN_F7R1_FB18
 
CAN_F7R1_FB18_Msk


	)

7079 
	#CAN_F7R1_FB19_Pos
 (19U)

	)

7080 
	#CAN_F7R1_FB19_Msk
 (0x1UL << 
CAN_F7R1_FB19_Pos
Ë

	)

7081 
	#CAN_F7R1_FB19
 
CAN_F7R1_FB19_Msk


	)

7082 
	#CAN_F7R1_FB20_Pos
 (20U)

	)

7083 
	#CAN_F7R1_FB20_Msk
 (0x1UL << 
CAN_F7R1_FB20_Pos
Ë

	)

7084 
	#CAN_F7R1_FB20
 
CAN_F7R1_FB20_Msk


	)

7085 
	#CAN_F7R1_FB21_Pos
 (21U)

	)

7086 
	#CAN_F7R1_FB21_Msk
 (0x1UL << 
CAN_F7R1_FB21_Pos
Ë

	)

7087 
	#CAN_F7R1_FB21
 
CAN_F7R1_FB21_Msk


	)

7088 
	#CAN_F7R1_FB22_Pos
 (22U)

	)

7089 
	#CAN_F7R1_FB22_Msk
 (0x1UL << 
CAN_F7R1_FB22_Pos
Ë

	)

7090 
	#CAN_F7R1_FB22
 
CAN_F7R1_FB22_Msk


	)

7091 
	#CAN_F7R1_FB23_Pos
 (23U)

	)

7092 
	#CAN_F7R1_FB23_Msk
 (0x1UL << 
CAN_F7R1_FB23_Pos
Ë

	)

7093 
	#CAN_F7R1_FB23
 
CAN_F7R1_FB23_Msk


	)

7094 
	#CAN_F7R1_FB24_Pos
 (24U)

	)

7095 
	#CAN_F7R1_FB24_Msk
 (0x1UL << 
CAN_F7R1_FB24_Pos
Ë

	)

7096 
	#CAN_F7R1_FB24
 
CAN_F7R1_FB24_Msk


	)

7097 
	#CAN_F7R1_FB25_Pos
 (25U)

	)

7098 
	#CAN_F7R1_FB25_Msk
 (0x1UL << 
CAN_F7R1_FB25_Pos
Ë

	)

7099 
	#CAN_F7R1_FB25
 
CAN_F7R1_FB25_Msk


	)

7100 
	#CAN_F7R1_FB26_Pos
 (26U)

	)

7101 
	#CAN_F7R1_FB26_Msk
 (0x1UL << 
CAN_F7R1_FB26_Pos
Ë

	)

7102 
	#CAN_F7R1_FB26
 
CAN_F7R1_FB26_Msk


	)

7103 
	#CAN_F7R1_FB27_Pos
 (27U)

	)

7104 
	#CAN_F7R1_FB27_Msk
 (0x1UL << 
CAN_F7R1_FB27_Pos
Ë

	)

7105 
	#CAN_F7R1_FB27
 
CAN_F7R1_FB27_Msk


	)

7106 
	#CAN_F7R1_FB28_Pos
 (28U)

	)

7107 
	#CAN_F7R1_FB28_Msk
 (0x1UL << 
CAN_F7R1_FB28_Pos
Ë

	)

7108 
	#CAN_F7R1_FB28
 
CAN_F7R1_FB28_Msk


	)

7109 
	#CAN_F7R1_FB29_Pos
 (29U)

	)

7110 
	#CAN_F7R1_FB29_Msk
 (0x1UL << 
CAN_F7R1_FB29_Pos
Ë

	)

7111 
	#CAN_F7R1_FB29
 
CAN_F7R1_FB29_Msk


	)

7112 
	#CAN_F7R1_FB30_Pos
 (30U)

	)

7113 
	#CAN_F7R1_FB30_Msk
 (0x1UL << 
CAN_F7R1_FB30_Pos
Ë

	)

7114 
	#CAN_F7R1_FB30
 
CAN_F7R1_FB30_Msk


	)

7115 
	#CAN_F7R1_FB31_Pos
 (31U)

	)

7116 
	#CAN_F7R1_FB31_Msk
 (0x1UL << 
CAN_F7R1_FB31_Pos
Ë

	)

7117 
	#CAN_F7R1_FB31
 
CAN_F7R1_FB31_Msk


	)

7120 
	#CAN_F8R1_FB0_Pos
 (0U)

	)

7121 
	#CAN_F8R1_FB0_Msk
 (0x1UL << 
CAN_F8R1_FB0_Pos
Ë

	)

7122 
	#CAN_F8R1_FB0
 
CAN_F8R1_FB0_Msk


	)

7123 
	#CAN_F8R1_FB1_Pos
 (1U)

	)

7124 
	#CAN_F8R1_FB1_Msk
 (0x1UL << 
CAN_F8R1_FB1_Pos
Ë

	)

7125 
	#CAN_F8R1_FB1
 
CAN_F8R1_FB1_Msk


	)

7126 
	#CAN_F8R1_FB2_Pos
 (2U)

	)

7127 
	#CAN_F8R1_FB2_Msk
 (0x1UL << 
CAN_F8R1_FB2_Pos
Ë

	)

7128 
	#CAN_F8R1_FB2
 
CAN_F8R1_FB2_Msk


	)

7129 
	#CAN_F8R1_FB3_Pos
 (3U)

	)

7130 
	#CAN_F8R1_FB3_Msk
 (0x1UL << 
CAN_F8R1_FB3_Pos
Ë

	)

7131 
	#CAN_F8R1_FB3
 
CAN_F8R1_FB3_Msk


	)

7132 
	#CAN_F8R1_FB4_Pos
 (4U)

	)

7133 
	#CAN_F8R1_FB4_Msk
 (0x1UL << 
CAN_F8R1_FB4_Pos
Ë

	)

7134 
	#CAN_F8R1_FB4
 
CAN_F8R1_FB4_Msk


	)

7135 
	#CAN_F8R1_FB5_Pos
 (5U)

	)

7136 
	#CAN_F8R1_FB5_Msk
 (0x1UL << 
CAN_F8R1_FB5_Pos
Ë

	)

7137 
	#CAN_F8R1_FB5
 
CAN_F8R1_FB5_Msk


	)

7138 
	#CAN_F8R1_FB6_Pos
 (6U)

	)

7139 
	#CAN_F8R1_FB6_Msk
 (0x1UL << 
CAN_F8R1_FB6_Pos
Ë

	)

7140 
	#CAN_F8R1_FB6
 
CAN_F8R1_FB6_Msk


	)

7141 
	#CAN_F8R1_FB7_Pos
 (7U)

	)

7142 
	#CAN_F8R1_FB7_Msk
 (0x1UL << 
CAN_F8R1_FB7_Pos
Ë

	)

7143 
	#CAN_F8R1_FB7
 
CAN_F8R1_FB7_Msk


	)

7144 
	#CAN_F8R1_FB8_Pos
 (8U)

	)

7145 
	#CAN_F8R1_FB8_Msk
 (0x1UL << 
CAN_F8R1_FB8_Pos
Ë

	)

7146 
	#CAN_F8R1_FB8
 
CAN_F8R1_FB8_Msk


	)

7147 
	#CAN_F8R1_FB9_Pos
 (9U)

	)

7148 
	#CAN_F8R1_FB9_Msk
 (0x1UL << 
CAN_F8R1_FB9_Pos
Ë

	)

7149 
	#CAN_F8R1_FB9
 
CAN_F8R1_FB9_Msk


	)

7150 
	#CAN_F8R1_FB10_Pos
 (10U)

	)

7151 
	#CAN_F8R1_FB10_Msk
 (0x1UL << 
CAN_F8R1_FB10_Pos
Ë

	)

7152 
	#CAN_F8R1_FB10
 
CAN_F8R1_FB10_Msk


	)

7153 
	#CAN_F8R1_FB11_Pos
 (11U)

	)

7154 
	#CAN_F8R1_FB11_Msk
 (0x1UL << 
CAN_F8R1_FB11_Pos
Ë

	)

7155 
	#CAN_F8R1_FB11
 
CAN_F8R1_FB11_Msk


	)

7156 
	#CAN_F8R1_FB12_Pos
 (12U)

	)

7157 
	#CAN_F8R1_FB12_Msk
 (0x1UL << 
CAN_F8R1_FB12_Pos
Ë

	)

7158 
	#CAN_F8R1_FB12
 
CAN_F8R1_FB12_Msk


	)

7159 
	#CAN_F8R1_FB13_Pos
 (13U)

	)

7160 
	#CAN_F8R1_FB13_Msk
 (0x1UL << 
CAN_F8R1_FB13_Pos
Ë

	)

7161 
	#CAN_F8R1_FB13
 
CAN_F8R1_FB13_Msk


	)

7162 
	#CAN_F8R1_FB14_Pos
 (14U)

	)

7163 
	#CAN_F8R1_FB14_Msk
 (0x1UL << 
CAN_F8R1_FB14_Pos
Ë

	)

7164 
	#CAN_F8R1_FB14
 
CAN_F8R1_FB14_Msk


	)

7165 
	#CAN_F8R1_FB15_Pos
 (15U)

	)

7166 
	#CAN_F8R1_FB15_Msk
 (0x1UL << 
CAN_F8R1_FB15_Pos
Ë

	)

7167 
	#CAN_F8R1_FB15
 
CAN_F8R1_FB15_Msk


	)

7168 
	#CAN_F8R1_FB16_Pos
 (16U)

	)

7169 
	#CAN_F8R1_FB16_Msk
 (0x1UL << 
CAN_F8R1_FB16_Pos
Ë

	)

7170 
	#CAN_F8R1_FB16
 
CAN_F8R1_FB16_Msk


	)

7171 
	#CAN_F8R1_FB17_Pos
 (17U)

	)

7172 
	#CAN_F8R1_FB17_Msk
 (0x1UL << 
CAN_F8R1_FB17_Pos
Ë

	)

7173 
	#CAN_F8R1_FB17
 
CAN_F8R1_FB17_Msk


	)

7174 
	#CAN_F8R1_FB18_Pos
 (18U)

	)

7175 
	#CAN_F8R1_FB18_Msk
 (0x1UL << 
CAN_F8R1_FB18_Pos
Ë

	)

7176 
	#CAN_F8R1_FB18
 
CAN_F8R1_FB18_Msk


	)

7177 
	#CAN_F8R1_FB19_Pos
 (19U)

	)

7178 
	#CAN_F8R1_FB19_Msk
 (0x1UL << 
CAN_F8R1_FB19_Pos
Ë

	)

7179 
	#CAN_F8R1_FB19
 
CAN_F8R1_FB19_Msk


	)

7180 
	#CAN_F8R1_FB20_Pos
 (20U)

	)

7181 
	#CAN_F8R1_FB20_Msk
 (0x1UL << 
CAN_F8R1_FB20_Pos
Ë

	)

7182 
	#CAN_F8R1_FB20
 
CAN_F8R1_FB20_Msk


	)

7183 
	#CAN_F8R1_FB21_Pos
 (21U)

	)

7184 
	#CAN_F8R1_FB21_Msk
 (0x1UL << 
CAN_F8R1_FB21_Pos
Ë

	)

7185 
	#CAN_F8R1_FB21
 
CAN_F8R1_FB21_Msk


	)

7186 
	#CAN_F8R1_FB22_Pos
 (22U)

	)

7187 
	#CAN_F8R1_FB22_Msk
 (0x1UL << 
CAN_F8R1_FB22_Pos
Ë

	)

7188 
	#CAN_F8R1_FB22
 
CAN_F8R1_FB22_Msk


	)

7189 
	#CAN_F8R1_FB23_Pos
 (23U)

	)

7190 
	#CAN_F8R1_FB23_Msk
 (0x1UL << 
CAN_F8R1_FB23_Pos
Ë

	)

7191 
	#CAN_F8R1_FB23
 
CAN_F8R1_FB23_Msk


	)

7192 
	#CAN_F8R1_FB24_Pos
 (24U)

	)

7193 
	#CAN_F8R1_FB24_Msk
 (0x1UL << 
CAN_F8R1_FB24_Pos
Ë

	)

7194 
	#CAN_F8R1_FB24
 
CAN_F8R1_FB24_Msk


	)

7195 
	#CAN_F8R1_FB25_Pos
 (25U)

	)

7196 
	#CAN_F8R1_FB25_Msk
 (0x1UL << 
CAN_F8R1_FB25_Pos
Ë

	)

7197 
	#CAN_F8R1_FB25
 
CAN_F8R1_FB25_Msk


	)

7198 
	#CAN_F8R1_FB26_Pos
 (26U)

	)

7199 
	#CAN_F8R1_FB26_Msk
 (0x1UL << 
CAN_F8R1_FB26_Pos
Ë

	)

7200 
	#CAN_F8R1_FB26
 
CAN_F8R1_FB26_Msk


	)

7201 
	#CAN_F8R1_FB27_Pos
 (27U)

	)

7202 
	#CAN_F8R1_FB27_Msk
 (0x1UL << 
CAN_F8R1_FB27_Pos
Ë

	)

7203 
	#CAN_F8R1_FB27
 
CAN_F8R1_FB27_Msk


	)

7204 
	#CAN_F8R1_FB28_Pos
 (28U)

	)

7205 
	#CAN_F8R1_FB28_Msk
 (0x1UL << 
CAN_F8R1_FB28_Pos
Ë

	)

7206 
	#CAN_F8R1_FB28
 
CAN_F8R1_FB28_Msk


	)

7207 
	#CAN_F8R1_FB29_Pos
 (29U)

	)

7208 
	#CAN_F8R1_FB29_Msk
 (0x1UL << 
CAN_F8R1_FB29_Pos
Ë

	)

7209 
	#CAN_F8R1_FB29
 
CAN_F8R1_FB29_Msk


	)

7210 
	#CAN_F8R1_FB30_Pos
 (30U)

	)

7211 
	#CAN_F8R1_FB30_Msk
 (0x1UL << 
CAN_F8R1_FB30_Pos
Ë

	)

7212 
	#CAN_F8R1_FB30
 
CAN_F8R1_FB30_Msk


	)

7213 
	#CAN_F8R1_FB31_Pos
 (31U)

	)

7214 
	#CAN_F8R1_FB31_Msk
 (0x1UL << 
CAN_F8R1_FB31_Pos
Ë

	)

7215 
	#CAN_F8R1_FB31
 
CAN_F8R1_FB31_Msk


	)

7218 
	#CAN_F9R1_FB0_Pos
 (0U)

	)

7219 
	#CAN_F9R1_FB0_Msk
 (0x1UL << 
CAN_F9R1_FB0_Pos
Ë

	)

7220 
	#CAN_F9R1_FB0
 
CAN_F9R1_FB0_Msk


	)

7221 
	#CAN_F9R1_FB1_Pos
 (1U)

	)

7222 
	#CAN_F9R1_FB1_Msk
 (0x1UL << 
CAN_F9R1_FB1_Pos
Ë

	)

7223 
	#CAN_F9R1_FB1
 
CAN_F9R1_FB1_Msk


	)

7224 
	#CAN_F9R1_FB2_Pos
 (2U)

	)

7225 
	#CAN_F9R1_FB2_Msk
 (0x1UL << 
CAN_F9R1_FB2_Pos
Ë

	)

7226 
	#CAN_F9R1_FB2
 
CAN_F9R1_FB2_Msk


	)

7227 
	#CAN_F9R1_FB3_Pos
 (3U)

	)

7228 
	#CAN_F9R1_FB3_Msk
 (0x1UL << 
CAN_F9R1_FB3_Pos
Ë

	)

7229 
	#CAN_F9R1_FB3
 
CAN_F9R1_FB3_Msk


	)

7230 
	#CAN_F9R1_FB4_Pos
 (4U)

	)

7231 
	#CAN_F9R1_FB4_Msk
 (0x1UL << 
CAN_F9R1_FB4_Pos
Ë

	)

7232 
	#CAN_F9R1_FB4
 
CAN_F9R1_FB4_Msk


	)

7233 
	#CAN_F9R1_FB5_Pos
 (5U)

	)

7234 
	#CAN_F9R1_FB5_Msk
 (0x1UL << 
CAN_F9R1_FB5_Pos
Ë

	)

7235 
	#CAN_F9R1_FB5
 
CAN_F9R1_FB5_Msk


	)

7236 
	#CAN_F9R1_FB6_Pos
 (6U)

	)

7237 
	#CAN_F9R1_FB6_Msk
 (0x1UL << 
CAN_F9R1_FB6_Pos
Ë

	)

7238 
	#CAN_F9R1_FB6
 
CAN_F9R1_FB6_Msk


	)

7239 
	#CAN_F9R1_FB7_Pos
 (7U)

	)

7240 
	#CAN_F9R1_FB7_Msk
 (0x1UL << 
CAN_F9R1_FB7_Pos
Ë

	)

7241 
	#CAN_F9R1_FB7
 
CAN_F9R1_FB7_Msk


	)

7242 
	#CAN_F9R1_FB8_Pos
 (8U)

	)

7243 
	#CAN_F9R1_FB8_Msk
 (0x1UL << 
CAN_F9R1_FB8_Pos
Ë

	)

7244 
	#CAN_F9R1_FB8
 
CAN_F9R1_FB8_Msk


	)

7245 
	#CAN_F9R1_FB9_Pos
 (9U)

	)

7246 
	#CAN_F9R1_FB9_Msk
 (0x1UL << 
CAN_F9R1_FB9_Pos
Ë

	)

7247 
	#CAN_F9R1_FB9
 
CAN_F9R1_FB9_Msk


	)

7248 
	#CAN_F9R1_FB10_Pos
 (10U)

	)

7249 
	#CAN_F9R1_FB10_Msk
 (0x1UL << 
CAN_F9R1_FB10_Pos
Ë

	)

7250 
	#CAN_F9R1_FB10
 
CAN_F9R1_FB10_Msk


	)

7251 
	#CAN_F9R1_FB11_Pos
 (11U)

	)

7252 
	#CAN_F9R1_FB11_Msk
 (0x1UL << 
CAN_F9R1_FB11_Pos
Ë

	)

7253 
	#CAN_F9R1_FB11
 
CAN_F9R1_FB11_Msk


	)

7254 
	#CAN_F9R1_FB12_Pos
 (12U)

	)

7255 
	#CAN_F9R1_FB12_Msk
 (0x1UL << 
CAN_F9R1_FB12_Pos
Ë

	)

7256 
	#CAN_F9R1_FB12
 
CAN_F9R1_FB12_Msk


	)

7257 
	#CAN_F9R1_FB13_Pos
 (13U)

	)

7258 
	#CAN_F9R1_FB13_Msk
 (0x1UL << 
CAN_F9R1_FB13_Pos
Ë

	)

7259 
	#CAN_F9R1_FB13
 
CAN_F9R1_FB13_Msk


	)

7260 
	#CAN_F9R1_FB14_Pos
 (14U)

	)

7261 
	#CAN_F9R1_FB14_Msk
 (0x1UL << 
CAN_F9R1_FB14_Pos
Ë

	)

7262 
	#CAN_F9R1_FB14
 
CAN_F9R1_FB14_Msk


	)

7263 
	#CAN_F9R1_FB15_Pos
 (15U)

	)

7264 
	#CAN_F9R1_FB15_Msk
 (0x1UL << 
CAN_F9R1_FB15_Pos
Ë

	)

7265 
	#CAN_F9R1_FB15
 
CAN_F9R1_FB15_Msk


	)

7266 
	#CAN_F9R1_FB16_Pos
 (16U)

	)

7267 
	#CAN_F9R1_FB16_Msk
 (0x1UL << 
CAN_F9R1_FB16_Pos
Ë

	)

7268 
	#CAN_F9R1_FB16
 
CAN_F9R1_FB16_Msk


	)

7269 
	#CAN_F9R1_FB17_Pos
 (17U)

	)

7270 
	#CAN_F9R1_FB17_Msk
 (0x1UL << 
CAN_F9R1_FB17_Pos
Ë

	)

7271 
	#CAN_F9R1_FB17
 
CAN_F9R1_FB17_Msk


	)

7272 
	#CAN_F9R1_FB18_Pos
 (18U)

	)

7273 
	#CAN_F9R1_FB18_Msk
 (0x1UL << 
CAN_F9R1_FB18_Pos
Ë

	)

7274 
	#CAN_F9R1_FB18
 
CAN_F9R1_FB18_Msk


	)

7275 
	#CAN_F9R1_FB19_Pos
 (19U)

	)

7276 
	#CAN_F9R1_FB19_Msk
 (0x1UL << 
CAN_F9R1_FB19_Pos
Ë

	)

7277 
	#CAN_F9R1_FB19
 
CAN_F9R1_FB19_Msk


	)

7278 
	#CAN_F9R1_FB20_Pos
 (20U)

	)

7279 
	#CAN_F9R1_FB20_Msk
 (0x1UL << 
CAN_F9R1_FB20_Pos
Ë

	)

7280 
	#CAN_F9R1_FB20
 
CAN_F9R1_FB20_Msk


	)

7281 
	#CAN_F9R1_FB21_Pos
 (21U)

	)

7282 
	#CAN_F9R1_FB21_Msk
 (0x1UL << 
CAN_F9R1_FB21_Pos
Ë

	)

7283 
	#CAN_F9R1_FB21
 
CAN_F9R1_FB21_Msk


	)

7284 
	#CAN_F9R1_FB22_Pos
 (22U)

	)

7285 
	#CAN_F9R1_FB22_Msk
 (0x1UL << 
CAN_F9R1_FB22_Pos
Ë

	)

7286 
	#CAN_F9R1_FB22
 
CAN_F9R1_FB22_Msk


	)

7287 
	#CAN_F9R1_FB23_Pos
 (23U)

	)

7288 
	#CAN_F9R1_FB23_Msk
 (0x1UL << 
CAN_F9R1_FB23_Pos
Ë

	)

7289 
	#CAN_F9R1_FB23
 
CAN_F9R1_FB23_Msk


	)

7290 
	#CAN_F9R1_FB24_Pos
 (24U)

	)

7291 
	#CAN_F9R1_FB24_Msk
 (0x1UL << 
CAN_F9R1_FB24_Pos
Ë

	)

7292 
	#CAN_F9R1_FB24
 
CAN_F9R1_FB24_Msk


	)

7293 
	#CAN_F9R1_FB25_Pos
 (25U)

	)

7294 
	#CAN_F9R1_FB25_Msk
 (0x1UL << 
CAN_F9R1_FB25_Pos
Ë

	)

7295 
	#CAN_F9R1_FB25
 
CAN_F9R1_FB25_Msk


	)

7296 
	#CAN_F9R1_FB26_Pos
 (26U)

	)

7297 
	#CAN_F9R1_FB26_Msk
 (0x1UL << 
CAN_F9R1_FB26_Pos
Ë

	)

7298 
	#CAN_F9R1_FB26
 
CAN_F9R1_FB26_Msk


	)

7299 
	#CAN_F9R1_FB27_Pos
 (27U)

	)

7300 
	#CAN_F9R1_FB27_Msk
 (0x1UL << 
CAN_F9R1_FB27_Pos
Ë

	)

7301 
	#CAN_F9R1_FB27
 
CAN_F9R1_FB27_Msk


	)

7302 
	#CAN_F9R1_FB28_Pos
 (28U)

	)

7303 
	#CAN_F9R1_FB28_Msk
 (0x1UL << 
CAN_F9R1_FB28_Pos
Ë

	)

7304 
	#CAN_F9R1_FB28
 
CAN_F9R1_FB28_Msk


	)

7305 
	#CAN_F9R1_FB29_Pos
 (29U)

	)

7306 
	#CAN_F9R1_FB29_Msk
 (0x1UL << 
CAN_F9R1_FB29_Pos
Ë

	)

7307 
	#CAN_F9R1_FB29
 
CAN_F9R1_FB29_Msk


	)

7308 
	#CAN_F9R1_FB30_Pos
 (30U)

	)

7309 
	#CAN_F9R1_FB30_Msk
 (0x1UL << 
CAN_F9R1_FB30_Pos
Ë

	)

7310 
	#CAN_F9R1_FB30
 
CAN_F9R1_FB30_Msk


	)

7311 
	#CAN_F9R1_FB31_Pos
 (31U)

	)

7312 
	#CAN_F9R1_FB31_Msk
 (0x1UL << 
CAN_F9R1_FB31_Pos
Ë

	)

7313 
	#CAN_F9R1_FB31
 
CAN_F9R1_FB31_Msk


	)

7316 
	#CAN_F10R1_FB0_Pos
 (0U)

	)

7317 
	#CAN_F10R1_FB0_Msk
 (0x1UL << 
CAN_F10R1_FB0_Pos
Ë

	)

7318 
	#CAN_F10R1_FB0
 
CAN_F10R1_FB0_Msk


	)

7319 
	#CAN_F10R1_FB1_Pos
 (1U)

	)

7320 
	#CAN_F10R1_FB1_Msk
 (0x1UL << 
CAN_F10R1_FB1_Pos
Ë

	)

7321 
	#CAN_F10R1_FB1
 
CAN_F10R1_FB1_Msk


	)

7322 
	#CAN_F10R1_FB2_Pos
 (2U)

	)

7323 
	#CAN_F10R1_FB2_Msk
 (0x1UL << 
CAN_F10R1_FB2_Pos
Ë

	)

7324 
	#CAN_F10R1_FB2
 
CAN_F10R1_FB2_Msk


	)

7325 
	#CAN_F10R1_FB3_Pos
 (3U)

	)

7326 
	#CAN_F10R1_FB3_Msk
 (0x1UL << 
CAN_F10R1_FB3_Pos
Ë

	)

7327 
	#CAN_F10R1_FB3
 
CAN_F10R1_FB3_Msk


	)

7328 
	#CAN_F10R1_FB4_Pos
 (4U)

	)

7329 
	#CAN_F10R1_FB4_Msk
 (0x1UL << 
CAN_F10R1_FB4_Pos
Ë

	)

7330 
	#CAN_F10R1_FB4
 
CAN_F10R1_FB4_Msk


	)

7331 
	#CAN_F10R1_FB5_Pos
 (5U)

	)

7332 
	#CAN_F10R1_FB5_Msk
 (0x1UL << 
CAN_F10R1_FB5_Pos
Ë

	)

7333 
	#CAN_F10R1_FB5
 
CAN_F10R1_FB5_Msk


	)

7334 
	#CAN_F10R1_FB6_Pos
 (6U)

	)

7335 
	#CAN_F10R1_FB6_Msk
 (0x1UL << 
CAN_F10R1_FB6_Pos
Ë

	)

7336 
	#CAN_F10R1_FB6
 
CAN_F10R1_FB6_Msk


	)

7337 
	#CAN_F10R1_FB7_Pos
 (7U)

	)

7338 
	#CAN_F10R1_FB7_Msk
 (0x1UL << 
CAN_F10R1_FB7_Pos
Ë

	)

7339 
	#CAN_F10R1_FB7
 
CAN_F10R1_FB7_Msk


	)

7340 
	#CAN_F10R1_FB8_Pos
 (8U)

	)

7341 
	#CAN_F10R1_FB8_Msk
 (0x1UL << 
CAN_F10R1_FB8_Pos
Ë

	)

7342 
	#CAN_F10R1_FB8
 
CAN_F10R1_FB8_Msk


	)

7343 
	#CAN_F10R1_FB9_Pos
 (9U)

	)

7344 
	#CAN_F10R1_FB9_Msk
 (0x1UL << 
CAN_F10R1_FB9_Pos
Ë

	)

7345 
	#CAN_F10R1_FB9
 
CAN_F10R1_FB9_Msk


	)

7346 
	#CAN_F10R1_FB10_Pos
 (10U)

	)

7347 
	#CAN_F10R1_FB10_Msk
 (0x1UL << 
CAN_F10R1_FB10_Pos
Ë

	)

7348 
	#CAN_F10R1_FB10
 
CAN_F10R1_FB10_Msk


	)

7349 
	#CAN_F10R1_FB11_Pos
 (11U)

	)

7350 
	#CAN_F10R1_FB11_Msk
 (0x1UL << 
CAN_F10R1_FB11_Pos
Ë

	)

7351 
	#CAN_F10R1_FB11
 
CAN_F10R1_FB11_Msk


	)

7352 
	#CAN_F10R1_FB12_Pos
 (12U)

	)

7353 
	#CAN_F10R1_FB12_Msk
 (0x1UL << 
CAN_F10R1_FB12_Pos
Ë

	)

7354 
	#CAN_F10R1_FB12
 
CAN_F10R1_FB12_Msk


	)

7355 
	#CAN_F10R1_FB13_Pos
 (13U)

	)

7356 
	#CAN_F10R1_FB13_Msk
 (0x1UL << 
CAN_F10R1_FB13_Pos
Ë

	)

7357 
	#CAN_F10R1_FB13
 
CAN_F10R1_FB13_Msk


	)

7358 
	#CAN_F10R1_FB14_Pos
 (14U)

	)

7359 
	#CAN_F10R1_FB14_Msk
 (0x1UL << 
CAN_F10R1_FB14_Pos
Ë

	)

7360 
	#CAN_F10R1_FB14
 
CAN_F10R1_FB14_Msk


	)

7361 
	#CAN_F10R1_FB15_Pos
 (15U)

	)

7362 
	#CAN_F10R1_FB15_Msk
 (0x1UL << 
CAN_F10R1_FB15_Pos
Ë

	)

7363 
	#CAN_F10R1_FB15
 
CAN_F10R1_FB15_Msk


	)

7364 
	#CAN_F10R1_FB16_Pos
 (16U)

	)

7365 
	#CAN_F10R1_FB16_Msk
 (0x1UL << 
CAN_F10R1_FB16_Pos
Ë

	)

7366 
	#CAN_F10R1_FB16
 
CAN_F10R1_FB16_Msk


	)

7367 
	#CAN_F10R1_FB17_Pos
 (17U)

	)

7368 
	#CAN_F10R1_FB17_Msk
 (0x1UL << 
CAN_F10R1_FB17_Pos
Ë

	)

7369 
	#CAN_F10R1_FB17
 
CAN_F10R1_FB17_Msk


	)

7370 
	#CAN_F10R1_FB18_Pos
 (18U)

	)

7371 
	#CAN_F10R1_FB18_Msk
 (0x1UL << 
CAN_F10R1_FB18_Pos
Ë

	)

7372 
	#CAN_F10R1_FB18
 
CAN_F10R1_FB18_Msk


	)

7373 
	#CAN_F10R1_FB19_Pos
 (19U)

	)

7374 
	#CAN_F10R1_FB19_Msk
 (0x1UL << 
CAN_F10R1_FB19_Pos
Ë

	)

7375 
	#CAN_F10R1_FB19
 
CAN_F10R1_FB19_Msk


	)

7376 
	#CAN_F10R1_FB20_Pos
 (20U)

	)

7377 
	#CAN_F10R1_FB20_Msk
 (0x1UL << 
CAN_F10R1_FB20_Pos
Ë

	)

7378 
	#CAN_F10R1_FB20
 
CAN_F10R1_FB20_Msk


	)

7379 
	#CAN_F10R1_FB21_Pos
 (21U)

	)

7380 
	#CAN_F10R1_FB21_Msk
 (0x1UL << 
CAN_F10R1_FB21_Pos
Ë

	)

7381 
	#CAN_F10R1_FB21
 
CAN_F10R1_FB21_Msk


	)

7382 
	#CAN_F10R1_FB22_Pos
 (22U)

	)

7383 
	#CAN_F10R1_FB22_Msk
 (0x1UL << 
CAN_F10R1_FB22_Pos
Ë

	)

7384 
	#CAN_F10R1_FB22
 
CAN_F10R1_FB22_Msk


	)

7385 
	#CAN_F10R1_FB23_Pos
 (23U)

	)

7386 
	#CAN_F10R1_FB23_Msk
 (0x1UL << 
CAN_F10R1_FB23_Pos
Ë

	)

7387 
	#CAN_F10R1_FB23
 
CAN_F10R1_FB23_Msk


	)

7388 
	#CAN_F10R1_FB24_Pos
 (24U)

	)

7389 
	#CAN_F10R1_FB24_Msk
 (0x1UL << 
CAN_F10R1_FB24_Pos
Ë

	)

7390 
	#CAN_F10R1_FB24
 
CAN_F10R1_FB24_Msk


	)

7391 
	#CAN_F10R1_FB25_Pos
 (25U)

	)

7392 
	#CAN_F10R1_FB25_Msk
 (0x1UL << 
CAN_F10R1_FB25_Pos
Ë

	)

7393 
	#CAN_F10R1_FB25
 
CAN_F10R1_FB25_Msk


	)

7394 
	#CAN_F10R1_FB26_Pos
 (26U)

	)

7395 
	#CAN_F10R1_FB26_Msk
 (0x1UL << 
CAN_F10R1_FB26_Pos
Ë

	)

7396 
	#CAN_F10R1_FB26
 
CAN_F10R1_FB26_Msk


	)

7397 
	#CAN_F10R1_FB27_Pos
 (27U)

	)

7398 
	#CAN_F10R1_FB27_Msk
 (0x1UL << 
CAN_F10R1_FB27_Pos
Ë

	)

7399 
	#CAN_F10R1_FB27
 
CAN_F10R1_FB27_Msk


	)

7400 
	#CAN_F10R1_FB28_Pos
 (28U)

	)

7401 
	#CAN_F10R1_FB28_Msk
 (0x1UL << 
CAN_F10R1_FB28_Pos
Ë

	)

7402 
	#CAN_F10R1_FB28
 
CAN_F10R1_FB28_Msk


	)

7403 
	#CAN_F10R1_FB29_Pos
 (29U)

	)

7404 
	#CAN_F10R1_FB29_Msk
 (0x1UL << 
CAN_F10R1_FB29_Pos
Ë

	)

7405 
	#CAN_F10R1_FB29
 
CAN_F10R1_FB29_Msk


	)

7406 
	#CAN_F10R1_FB30_Pos
 (30U)

	)

7407 
	#CAN_F10R1_FB30_Msk
 (0x1UL << 
CAN_F10R1_FB30_Pos
Ë

	)

7408 
	#CAN_F10R1_FB30
 
CAN_F10R1_FB30_Msk


	)

7409 
	#CAN_F10R1_FB31_Pos
 (31U)

	)

7410 
	#CAN_F10R1_FB31_Msk
 (0x1UL << 
CAN_F10R1_FB31_Pos
Ë

	)

7411 
	#CAN_F10R1_FB31
 
CAN_F10R1_FB31_Msk


	)

7414 
	#CAN_F11R1_FB0_Pos
 (0U)

	)

7415 
	#CAN_F11R1_FB0_Msk
 (0x1UL << 
CAN_F11R1_FB0_Pos
Ë

	)

7416 
	#CAN_F11R1_FB0
 
CAN_F11R1_FB0_Msk


	)

7417 
	#CAN_F11R1_FB1_Pos
 (1U)

	)

7418 
	#CAN_F11R1_FB1_Msk
 (0x1UL << 
CAN_F11R1_FB1_Pos
Ë

	)

7419 
	#CAN_F11R1_FB1
 
CAN_F11R1_FB1_Msk


	)

7420 
	#CAN_F11R1_FB2_Pos
 (2U)

	)

7421 
	#CAN_F11R1_FB2_Msk
 (0x1UL << 
CAN_F11R1_FB2_Pos
Ë

	)

7422 
	#CAN_F11R1_FB2
 
CAN_F11R1_FB2_Msk


	)

7423 
	#CAN_F11R1_FB3_Pos
 (3U)

	)

7424 
	#CAN_F11R1_FB3_Msk
 (0x1UL << 
CAN_F11R1_FB3_Pos
Ë

	)

7425 
	#CAN_F11R1_FB3
 
CAN_F11R1_FB3_Msk


	)

7426 
	#CAN_F11R1_FB4_Pos
 (4U)

	)

7427 
	#CAN_F11R1_FB4_Msk
 (0x1UL << 
CAN_F11R1_FB4_Pos
Ë

	)

7428 
	#CAN_F11R1_FB4
 
CAN_F11R1_FB4_Msk


	)

7429 
	#CAN_F11R1_FB5_Pos
 (5U)

	)

7430 
	#CAN_F11R1_FB5_Msk
 (0x1UL << 
CAN_F11R1_FB5_Pos
Ë

	)

7431 
	#CAN_F11R1_FB5
 
CAN_F11R1_FB5_Msk


	)

7432 
	#CAN_F11R1_FB6_Pos
 (6U)

	)

7433 
	#CAN_F11R1_FB6_Msk
 (0x1UL << 
CAN_F11R1_FB6_Pos
Ë

	)

7434 
	#CAN_F11R1_FB6
 
CAN_F11R1_FB6_Msk


	)

7435 
	#CAN_F11R1_FB7_Pos
 (7U)

	)

7436 
	#CAN_F11R1_FB7_Msk
 (0x1UL << 
CAN_F11R1_FB7_Pos
Ë

	)

7437 
	#CAN_F11R1_FB7
 
CAN_F11R1_FB7_Msk


	)

7438 
	#CAN_F11R1_FB8_Pos
 (8U)

	)

7439 
	#CAN_F11R1_FB8_Msk
 (0x1UL << 
CAN_F11R1_FB8_Pos
Ë

	)

7440 
	#CAN_F11R1_FB8
 
CAN_F11R1_FB8_Msk


	)

7441 
	#CAN_F11R1_FB9_Pos
 (9U)

	)

7442 
	#CAN_F11R1_FB9_Msk
 (0x1UL << 
CAN_F11R1_FB9_Pos
Ë

	)

7443 
	#CAN_F11R1_FB9
 
CAN_F11R1_FB9_Msk


	)

7444 
	#CAN_F11R1_FB10_Pos
 (10U)

	)

7445 
	#CAN_F11R1_FB10_Msk
 (0x1UL << 
CAN_F11R1_FB10_Pos
Ë

	)

7446 
	#CAN_F11R1_FB10
 
CAN_F11R1_FB10_Msk


	)

7447 
	#CAN_F11R1_FB11_Pos
 (11U)

	)

7448 
	#CAN_F11R1_FB11_Msk
 (0x1UL << 
CAN_F11R1_FB11_Pos
Ë

	)

7449 
	#CAN_F11R1_FB11
 
CAN_F11R1_FB11_Msk


	)

7450 
	#CAN_F11R1_FB12_Pos
 (12U)

	)

7451 
	#CAN_F11R1_FB12_Msk
 (0x1UL << 
CAN_F11R1_FB12_Pos
Ë

	)

7452 
	#CAN_F11R1_FB12
 
CAN_F11R1_FB12_Msk


	)

7453 
	#CAN_F11R1_FB13_Pos
 (13U)

	)

7454 
	#CAN_F11R1_FB13_Msk
 (0x1UL << 
CAN_F11R1_FB13_Pos
Ë

	)

7455 
	#CAN_F11R1_FB13
 
CAN_F11R1_FB13_Msk


	)

7456 
	#CAN_F11R1_FB14_Pos
 (14U)

	)

7457 
	#CAN_F11R1_FB14_Msk
 (0x1UL << 
CAN_F11R1_FB14_Pos
Ë

	)

7458 
	#CAN_F11R1_FB14
 
CAN_F11R1_FB14_Msk


	)

7459 
	#CAN_F11R1_FB15_Pos
 (15U)

	)

7460 
	#CAN_F11R1_FB15_Msk
 (0x1UL << 
CAN_F11R1_FB15_Pos
Ë

	)

7461 
	#CAN_F11R1_FB15
 
CAN_F11R1_FB15_Msk


	)

7462 
	#CAN_F11R1_FB16_Pos
 (16U)

	)

7463 
	#CAN_F11R1_FB16_Msk
 (0x1UL << 
CAN_F11R1_FB16_Pos
Ë

	)

7464 
	#CAN_F11R1_FB16
 
CAN_F11R1_FB16_Msk


	)

7465 
	#CAN_F11R1_FB17_Pos
 (17U)

	)

7466 
	#CAN_F11R1_FB17_Msk
 (0x1UL << 
CAN_F11R1_FB17_Pos
Ë

	)

7467 
	#CAN_F11R1_FB17
 
CAN_F11R1_FB17_Msk


	)

7468 
	#CAN_F11R1_FB18_Pos
 (18U)

	)

7469 
	#CAN_F11R1_FB18_Msk
 (0x1UL << 
CAN_F11R1_FB18_Pos
Ë

	)

7470 
	#CAN_F11R1_FB18
 
CAN_F11R1_FB18_Msk


	)

7471 
	#CAN_F11R1_FB19_Pos
 (19U)

	)

7472 
	#CAN_F11R1_FB19_Msk
 (0x1UL << 
CAN_F11R1_FB19_Pos
Ë

	)

7473 
	#CAN_F11R1_FB19
 
CAN_F11R1_FB19_Msk


	)

7474 
	#CAN_F11R1_FB20_Pos
 (20U)

	)

7475 
	#CAN_F11R1_FB20_Msk
 (0x1UL << 
CAN_F11R1_FB20_Pos
Ë

	)

7476 
	#CAN_F11R1_FB20
 
CAN_F11R1_FB20_Msk


	)

7477 
	#CAN_F11R1_FB21_Pos
 (21U)

	)

7478 
	#CAN_F11R1_FB21_Msk
 (0x1UL << 
CAN_F11R1_FB21_Pos
Ë

	)

7479 
	#CAN_F11R1_FB21
 
CAN_F11R1_FB21_Msk


	)

7480 
	#CAN_F11R1_FB22_Pos
 (22U)

	)

7481 
	#CAN_F11R1_FB22_Msk
 (0x1UL << 
CAN_F11R1_FB22_Pos
Ë

	)

7482 
	#CAN_F11R1_FB22
 
CAN_F11R1_FB22_Msk


	)

7483 
	#CAN_F11R1_FB23_Pos
 (23U)

	)

7484 
	#CAN_F11R1_FB23_Msk
 (0x1UL << 
CAN_F11R1_FB23_Pos
Ë

	)

7485 
	#CAN_F11R1_FB23
 
CAN_F11R1_FB23_Msk


	)

7486 
	#CAN_F11R1_FB24_Pos
 (24U)

	)

7487 
	#CAN_F11R1_FB24_Msk
 (0x1UL << 
CAN_F11R1_FB24_Pos
Ë

	)

7488 
	#CAN_F11R1_FB24
 
CAN_F11R1_FB24_Msk


	)

7489 
	#CAN_F11R1_FB25_Pos
 (25U)

	)

7490 
	#CAN_F11R1_FB25_Msk
 (0x1UL << 
CAN_F11R1_FB25_Pos
Ë

	)

7491 
	#CAN_F11R1_FB25
 
CAN_F11R1_FB25_Msk


	)

7492 
	#CAN_F11R1_FB26_Pos
 (26U)

	)

7493 
	#CAN_F11R1_FB26_Msk
 (0x1UL << 
CAN_F11R1_FB26_Pos
Ë

	)

7494 
	#CAN_F11R1_FB26
 
CAN_F11R1_FB26_Msk


	)

7495 
	#CAN_F11R1_FB27_Pos
 (27U)

	)

7496 
	#CAN_F11R1_FB27_Msk
 (0x1UL << 
CAN_F11R1_FB27_Pos
Ë

	)

7497 
	#CAN_F11R1_FB27
 
CAN_F11R1_FB27_Msk


	)

7498 
	#CAN_F11R1_FB28_Pos
 (28U)

	)

7499 
	#CAN_F11R1_FB28_Msk
 (0x1UL << 
CAN_F11R1_FB28_Pos
Ë

	)

7500 
	#CAN_F11R1_FB28
 
CAN_F11R1_FB28_Msk


	)

7501 
	#CAN_F11R1_FB29_Pos
 (29U)

	)

7502 
	#CAN_F11R1_FB29_Msk
 (0x1UL << 
CAN_F11R1_FB29_Pos
Ë

	)

7503 
	#CAN_F11R1_FB29
 
CAN_F11R1_FB29_Msk


	)

7504 
	#CAN_F11R1_FB30_Pos
 (30U)

	)

7505 
	#CAN_F11R1_FB30_Msk
 (0x1UL << 
CAN_F11R1_FB30_Pos
Ë

	)

7506 
	#CAN_F11R1_FB30
 
CAN_F11R1_FB30_Msk


	)

7507 
	#CAN_F11R1_FB31_Pos
 (31U)

	)

7508 
	#CAN_F11R1_FB31_Msk
 (0x1UL << 
CAN_F11R1_FB31_Pos
Ë

	)

7509 
	#CAN_F11R1_FB31
 
CAN_F11R1_FB31_Msk


	)

7512 
	#CAN_F12R1_FB0_Pos
 (0U)

	)

7513 
	#CAN_F12R1_FB0_Msk
 (0x1UL << 
CAN_F12R1_FB0_Pos
Ë

	)

7514 
	#CAN_F12R1_FB0
 
CAN_F12R1_FB0_Msk


	)

7515 
	#CAN_F12R1_FB1_Pos
 (1U)

	)

7516 
	#CAN_F12R1_FB1_Msk
 (0x1UL << 
CAN_F12R1_FB1_Pos
Ë

	)

7517 
	#CAN_F12R1_FB1
 
CAN_F12R1_FB1_Msk


	)

7518 
	#CAN_F12R1_FB2_Pos
 (2U)

	)

7519 
	#CAN_F12R1_FB2_Msk
 (0x1UL << 
CAN_F12R1_FB2_Pos
Ë

	)

7520 
	#CAN_F12R1_FB2
 
CAN_F12R1_FB2_Msk


	)

7521 
	#CAN_F12R1_FB3_Pos
 (3U)

	)

7522 
	#CAN_F12R1_FB3_Msk
 (0x1UL << 
CAN_F12R1_FB3_Pos
Ë

	)

7523 
	#CAN_F12R1_FB3
 
CAN_F12R1_FB3_Msk


	)

7524 
	#CAN_F12R1_FB4_Pos
 (4U)

	)

7525 
	#CAN_F12R1_FB4_Msk
 (0x1UL << 
CAN_F12R1_FB4_Pos
Ë

	)

7526 
	#CAN_F12R1_FB4
 
CAN_F12R1_FB4_Msk


	)

7527 
	#CAN_F12R1_FB5_Pos
 (5U)

	)

7528 
	#CAN_F12R1_FB5_Msk
 (0x1UL << 
CAN_F12R1_FB5_Pos
Ë

	)

7529 
	#CAN_F12R1_FB5
 
CAN_F12R1_FB5_Msk


	)

7530 
	#CAN_F12R1_FB6_Pos
 (6U)

	)

7531 
	#CAN_F12R1_FB6_Msk
 (0x1UL << 
CAN_F12R1_FB6_Pos
Ë

	)

7532 
	#CAN_F12R1_FB6
 
CAN_F12R1_FB6_Msk


	)

7533 
	#CAN_F12R1_FB7_Pos
 (7U)

	)

7534 
	#CAN_F12R1_FB7_Msk
 (0x1UL << 
CAN_F12R1_FB7_Pos
Ë

	)

7535 
	#CAN_F12R1_FB7
 
CAN_F12R1_FB7_Msk


	)

7536 
	#CAN_F12R1_FB8_Pos
 (8U)

	)

7537 
	#CAN_F12R1_FB8_Msk
 (0x1UL << 
CAN_F12R1_FB8_Pos
Ë

	)

7538 
	#CAN_F12R1_FB8
 
CAN_F12R1_FB8_Msk


	)

7539 
	#CAN_F12R1_FB9_Pos
 (9U)

	)

7540 
	#CAN_F12R1_FB9_Msk
 (0x1UL << 
CAN_F12R1_FB9_Pos
Ë

	)

7541 
	#CAN_F12R1_FB9
 
CAN_F12R1_FB9_Msk


	)

7542 
	#CAN_F12R1_FB10_Pos
 (10U)

	)

7543 
	#CAN_F12R1_FB10_Msk
 (0x1UL << 
CAN_F12R1_FB10_Pos
Ë

	)

7544 
	#CAN_F12R1_FB10
 
CAN_F12R1_FB10_Msk


	)

7545 
	#CAN_F12R1_FB11_Pos
 (11U)

	)

7546 
	#CAN_F12R1_FB11_Msk
 (0x1UL << 
CAN_F12R1_FB11_Pos
Ë

	)

7547 
	#CAN_F12R1_FB11
 
CAN_F12R1_FB11_Msk


	)

7548 
	#CAN_F12R1_FB12_Pos
 (12U)

	)

7549 
	#CAN_F12R1_FB12_Msk
 (0x1UL << 
CAN_F12R1_FB12_Pos
Ë

	)

7550 
	#CAN_F12R1_FB12
 
CAN_F12R1_FB12_Msk


	)

7551 
	#CAN_F12R1_FB13_Pos
 (13U)

	)

7552 
	#CAN_F12R1_FB13_Msk
 (0x1UL << 
CAN_F12R1_FB13_Pos
Ë

	)

7553 
	#CAN_F12R1_FB13
 
CAN_F12R1_FB13_Msk


	)

7554 
	#CAN_F12R1_FB14_Pos
 (14U)

	)

7555 
	#CAN_F12R1_FB14_Msk
 (0x1UL << 
CAN_F12R1_FB14_Pos
Ë

	)

7556 
	#CAN_F12R1_FB14
 
CAN_F12R1_FB14_Msk


	)

7557 
	#CAN_F12R1_FB15_Pos
 (15U)

	)

7558 
	#CAN_F12R1_FB15_Msk
 (0x1UL << 
CAN_F12R1_FB15_Pos
Ë

	)

7559 
	#CAN_F12R1_FB15
 
CAN_F12R1_FB15_Msk


	)

7560 
	#CAN_F12R1_FB16_Pos
 (16U)

	)

7561 
	#CAN_F12R1_FB16_Msk
 (0x1UL << 
CAN_F12R1_FB16_Pos
Ë

	)

7562 
	#CAN_F12R1_FB16
 
CAN_F12R1_FB16_Msk


	)

7563 
	#CAN_F12R1_FB17_Pos
 (17U)

	)

7564 
	#CAN_F12R1_FB17_Msk
 (0x1UL << 
CAN_F12R1_FB17_Pos
Ë

	)

7565 
	#CAN_F12R1_FB17
 
CAN_F12R1_FB17_Msk


	)

7566 
	#CAN_F12R1_FB18_Pos
 (18U)

	)

7567 
	#CAN_F12R1_FB18_Msk
 (0x1UL << 
CAN_F12R1_FB18_Pos
Ë

	)

7568 
	#CAN_F12R1_FB18
 
CAN_F12R1_FB18_Msk


	)

7569 
	#CAN_F12R1_FB19_Pos
 (19U)

	)

7570 
	#CAN_F12R1_FB19_Msk
 (0x1UL << 
CAN_F12R1_FB19_Pos
Ë

	)

7571 
	#CAN_F12R1_FB19
 
CAN_F12R1_FB19_Msk


	)

7572 
	#CAN_F12R1_FB20_Pos
 (20U)

	)

7573 
	#CAN_F12R1_FB20_Msk
 (0x1UL << 
CAN_F12R1_FB20_Pos
Ë

	)

7574 
	#CAN_F12R1_FB20
 
CAN_F12R1_FB20_Msk


	)

7575 
	#CAN_F12R1_FB21_Pos
 (21U)

	)

7576 
	#CAN_F12R1_FB21_Msk
 (0x1UL << 
CAN_F12R1_FB21_Pos
Ë

	)

7577 
	#CAN_F12R1_FB21
 
CAN_F12R1_FB21_Msk


	)

7578 
	#CAN_F12R1_FB22_Pos
 (22U)

	)

7579 
	#CAN_F12R1_FB22_Msk
 (0x1UL << 
CAN_F12R1_FB22_Pos
Ë

	)

7580 
	#CAN_F12R1_FB22
 
CAN_F12R1_FB22_Msk


	)

7581 
	#CAN_F12R1_FB23_Pos
 (23U)

	)

7582 
	#CAN_F12R1_FB23_Msk
 (0x1UL << 
CAN_F12R1_FB23_Pos
Ë

	)

7583 
	#CAN_F12R1_FB23
 
CAN_F12R1_FB23_Msk


	)

7584 
	#CAN_F12R1_FB24_Pos
 (24U)

	)

7585 
	#CAN_F12R1_FB24_Msk
 (0x1UL << 
CAN_F12R1_FB24_Pos
Ë

	)

7586 
	#CAN_F12R1_FB24
 
CAN_F12R1_FB24_Msk


	)

7587 
	#CAN_F12R1_FB25_Pos
 (25U)

	)

7588 
	#CAN_F12R1_FB25_Msk
 (0x1UL << 
CAN_F12R1_FB25_Pos
Ë

	)

7589 
	#CAN_F12R1_FB25
 
CAN_F12R1_FB25_Msk


	)

7590 
	#CAN_F12R1_FB26_Pos
 (26U)

	)

7591 
	#CAN_F12R1_FB26_Msk
 (0x1UL << 
CAN_F12R1_FB26_Pos
Ë

	)

7592 
	#CAN_F12R1_FB26
 
CAN_F12R1_FB26_Msk


	)

7593 
	#CAN_F12R1_FB27_Pos
 (27U)

	)

7594 
	#CAN_F12R1_FB27_Msk
 (0x1UL << 
CAN_F12R1_FB27_Pos
Ë

	)

7595 
	#CAN_F12R1_FB27
 
CAN_F12R1_FB27_Msk


	)

7596 
	#CAN_F12R1_FB28_Pos
 (28U)

	)

7597 
	#CAN_F12R1_FB28_Msk
 (0x1UL << 
CAN_F12R1_FB28_Pos
Ë

	)

7598 
	#CAN_F12R1_FB28
 
CAN_F12R1_FB28_Msk


	)

7599 
	#CAN_F12R1_FB29_Pos
 (29U)

	)

7600 
	#CAN_F12R1_FB29_Msk
 (0x1UL << 
CAN_F12R1_FB29_Pos
Ë

	)

7601 
	#CAN_F12R1_FB29
 
CAN_F12R1_FB29_Msk


	)

7602 
	#CAN_F12R1_FB30_Pos
 (30U)

	)

7603 
	#CAN_F12R1_FB30_Msk
 (0x1UL << 
CAN_F12R1_FB30_Pos
Ë

	)

7604 
	#CAN_F12R1_FB30
 
CAN_F12R1_FB30_Msk


	)

7605 
	#CAN_F12R1_FB31_Pos
 (31U)

	)

7606 
	#CAN_F12R1_FB31_Msk
 (0x1UL << 
CAN_F12R1_FB31_Pos
Ë

	)

7607 
	#CAN_F12R1_FB31
 
CAN_F12R1_FB31_Msk


	)

7610 
	#CAN_F13R1_FB0_Pos
 (0U)

	)

7611 
	#CAN_F13R1_FB0_Msk
 (0x1UL << 
CAN_F13R1_FB0_Pos
Ë

	)

7612 
	#CAN_F13R1_FB0
 
CAN_F13R1_FB0_Msk


	)

7613 
	#CAN_F13R1_FB1_Pos
 (1U)

	)

7614 
	#CAN_F13R1_FB1_Msk
 (0x1UL << 
CAN_F13R1_FB1_Pos
Ë

	)

7615 
	#CAN_F13R1_FB1
 
CAN_F13R1_FB1_Msk


	)

7616 
	#CAN_F13R1_FB2_Pos
 (2U)

	)

7617 
	#CAN_F13R1_FB2_Msk
 (0x1UL << 
CAN_F13R1_FB2_Pos
Ë

	)

7618 
	#CAN_F13R1_FB2
 
CAN_F13R1_FB2_Msk


	)

7619 
	#CAN_F13R1_FB3_Pos
 (3U)

	)

7620 
	#CAN_F13R1_FB3_Msk
 (0x1UL << 
CAN_F13R1_FB3_Pos
Ë

	)

7621 
	#CAN_F13R1_FB3
 
CAN_F13R1_FB3_Msk


	)

7622 
	#CAN_F13R1_FB4_Pos
 (4U)

	)

7623 
	#CAN_F13R1_FB4_Msk
 (0x1UL << 
CAN_F13R1_FB4_Pos
Ë

	)

7624 
	#CAN_F13R1_FB4
 
CAN_F13R1_FB4_Msk


	)

7625 
	#CAN_F13R1_FB5_Pos
 (5U)

	)

7626 
	#CAN_F13R1_FB5_Msk
 (0x1UL << 
CAN_F13R1_FB5_Pos
Ë

	)

7627 
	#CAN_F13R1_FB5
 
CAN_F13R1_FB5_Msk


	)

7628 
	#CAN_F13R1_FB6_Pos
 (6U)

	)

7629 
	#CAN_F13R1_FB6_Msk
 (0x1UL << 
CAN_F13R1_FB6_Pos
Ë

	)

7630 
	#CAN_F13R1_FB6
 
CAN_F13R1_FB6_Msk


	)

7631 
	#CAN_F13R1_FB7_Pos
 (7U)

	)

7632 
	#CAN_F13R1_FB7_Msk
 (0x1UL << 
CAN_F13R1_FB7_Pos
Ë

	)

7633 
	#CAN_F13R1_FB7
 
CAN_F13R1_FB7_Msk


	)

7634 
	#CAN_F13R1_FB8_Pos
 (8U)

	)

7635 
	#CAN_F13R1_FB8_Msk
 (0x1UL << 
CAN_F13R1_FB8_Pos
Ë

	)

7636 
	#CAN_F13R1_FB8
 
CAN_F13R1_FB8_Msk


	)

7637 
	#CAN_F13R1_FB9_Pos
 (9U)

	)

7638 
	#CAN_F13R1_FB9_Msk
 (0x1UL << 
CAN_F13R1_FB9_Pos
Ë

	)

7639 
	#CAN_F13R1_FB9
 
CAN_F13R1_FB9_Msk


	)

7640 
	#CAN_F13R1_FB10_Pos
 (10U)

	)

7641 
	#CAN_F13R1_FB10_Msk
 (0x1UL << 
CAN_F13R1_FB10_Pos
Ë

	)

7642 
	#CAN_F13R1_FB10
 
CAN_F13R1_FB10_Msk


	)

7643 
	#CAN_F13R1_FB11_Pos
 (11U)

	)

7644 
	#CAN_F13R1_FB11_Msk
 (0x1UL << 
CAN_F13R1_FB11_Pos
Ë

	)

7645 
	#CAN_F13R1_FB11
 
CAN_F13R1_FB11_Msk


	)

7646 
	#CAN_F13R1_FB12_Pos
 (12U)

	)

7647 
	#CAN_F13R1_FB12_Msk
 (0x1UL << 
CAN_F13R1_FB12_Pos
Ë

	)

7648 
	#CAN_F13R1_FB12
 
CAN_F13R1_FB12_Msk


	)

7649 
	#CAN_F13R1_FB13_Pos
 (13U)

	)

7650 
	#CAN_F13R1_FB13_Msk
 (0x1UL << 
CAN_F13R1_FB13_Pos
Ë

	)

7651 
	#CAN_F13R1_FB13
 
CAN_F13R1_FB13_Msk


	)

7652 
	#CAN_F13R1_FB14_Pos
 (14U)

	)

7653 
	#CAN_F13R1_FB14_Msk
 (0x1UL << 
CAN_F13R1_FB14_Pos
Ë

	)

7654 
	#CAN_F13R1_FB14
 
CAN_F13R1_FB14_Msk


	)

7655 
	#CAN_F13R1_FB15_Pos
 (15U)

	)

7656 
	#CAN_F13R1_FB15_Msk
 (0x1UL << 
CAN_F13R1_FB15_Pos
Ë

	)

7657 
	#CAN_F13R1_FB15
 
CAN_F13R1_FB15_Msk


	)

7658 
	#CAN_F13R1_FB16_Pos
 (16U)

	)

7659 
	#CAN_F13R1_FB16_Msk
 (0x1UL << 
CAN_F13R1_FB16_Pos
Ë

	)

7660 
	#CAN_F13R1_FB16
 
CAN_F13R1_FB16_Msk


	)

7661 
	#CAN_F13R1_FB17_Pos
 (17U)

	)

7662 
	#CAN_F13R1_FB17_Msk
 (0x1UL << 
CAN_F13R1_FB17_Pos
Ë

	)

7663 
	#CAN_F13R1_FB17
 
CAN_F13R1_FB17_Msk


	)

7664 
	#CAN_F13R1_FB18_Pos
 (18U)

	)

7665 
	#CAN_F13R1_FB18_Msk
 (0x1UL << 
CAN_F13R1_FB18_Pos
Ë

	)

7666 
	#CAN_F13R1_FB18
 
CAN_F13R1_FB18_Msk


	)

7667 
	#CAN_F13R1_FB19_Pos
 (19U)

	)

7668 
	#CAN_F13R1_FB19_Msk
 (0x1UL << 
CAN_F13R1_FB19_Pos
Ë

	)

7669 
	#CAN_F13R1_FB19
 
CAN_F13R1_FB19_Msk


	)

7670 
	#CAN_F13R1_FB20_Pos
 (20U)

	)

7671 
	#CAN_F13R1_FB20_Msk
 (0x1UL << 
CAN_F13R1_FB20_Pos
Ë

	)

7672 
	#CAN_F13R1_FB20
 
CAN_F13R1_FB20_Msk


	)

7673 
	#CAN_F13R1_FB21_Pos
 (21U)

	)

7674 
	#CAN_F13R1_FB21_Msk
 (0x1UL << 
CAN_F13R1_FB21_Pos
Ë

	)

7675 
	#CAN_F13R1_FB21
 
CAN_F13R1_FB21_Msk


	)

7676 
	#CAN_F13R1_FB22_Pos
 (22U)

	)

7677 
	#CAN_F13R1_FB22_Msk
 (0x1UL << 
CAN_F13R1_FB22_Pos
Ë

	)

7678 
	#CAN_F13R1_FB22
 
CAN_F13R1_FB22_Msk


	)

7679 
	#CAN_F13R1_FB23_Pos
 (23U)

	)

7680 
	#CAN_F13R1_FB23_Msk
 (0x1UL << 
CAN_F13R1_FB23_Pos
Ë

	)

7681 
	#CAN_F13R1_FB23
 
CAN_F13R1_FB23_Msk


	)

7682 
	#CAN_F13R1_FB24_Pos
 (24U)

	)

7683 
	#CAN_F13R1_FB24_Msk
 (0x1UL << 
CAN_F13R1_FB24_Pos
Ë

	)

7684 
	#CAN_F13R1_FB24
 
CAN_F13R1_FB24_Msk


	)

7685 
	#CAN_F13R1_FB25_Pos
 (25U)

	)

7686 
	#CAN_F13R1_FB25_Msk
 (0x1UL << 
CAN_F13R1_FB25_Pos
Ë

	)

7687 
	#CAN_F13R1_FB25
 
CAN_F13R1_FB25_Msk


	)

7688 
	#CAN_F13R1_FB26_Pos
 (26U)

	)

7689 
	#CAN_F13R1_FB26_Msk
 (0x1UL << 
CAN_F13R1_FB26_Pos
Ë

	)

7690 
	#CAN_F13R1_FB26
 
CAN_F13R1_FB26_Msk


	)

7691 
	#CAN_F13R1_FB27_Pos
 (27U)

	)

7692 
	#CAN_F13R1_FB27_Msk
 (0x1UL << 
CAN_F13R1_FB27_Pos
Ë

	)

7693 
	#CAN_F13R1_FB27
 
CAN_F13R1_FB27_Msk


	)

7694 
	#CAN_F13R1_FB28_Pos
 (28U)

	)

7695 
	#CAN_F13R1_FB28_Msk
 (0x1UL << 
CAN_F13R1_FB28_Pos
Ë

	)

7696 
	#CAN_F13R1_FB28
 
CAN_F13R1_FB28_Msk


	)

7697 
	#CAN_F13R1_FB29_Pos
 (29U)

	)

7698 
	#CAN_F13R1_FB29_Msk
 (0x1UL << 
CAN_F13R1_FB29_Pos
Ë

	)

7699 
	#CAN_F13R1_FB29
 
CAN_F13R1_FB29_Msk


	)

7700 
	#CAN_F13R1_FB30_Pos
 (30U)

	)

7701 
	#CAN_F13R1_FB30_Msk
 (0x1UL << 
CAN_F13R1_FB30_Pos
Ë

	)

7702 
	#CAN_F13R1_FB30
 
CAN_F13R1_FB30_Msk


	)

7703 
	#CAN_F13R1_FB31_Pos
 (31U)

	)

7704 
	#CAN_F13R1_FB31_Msk
 (0x1UL << 
CAN_F13R1_FB31_Pos
Ë

	)

7705 
	#CAN_F13R1_FB31
 
CAN_F13R1_FB31_Msk


	)

7708 
	#CAN_F0R2_FB0_Pos
 (0U)

	)

7709 
	#CAN_F0R2_FB0_Msk
 (0x1UL << 
CAN_F0R2_FB0_Pos
Ë

	)

7710 
	#CAN_F0R2_FB0
 
CAN_F0R2_FB0_Msk


	)

7711 
	#CAN_F0R2_FB1_Pos
 (1U)

	)

7712 
	#CAN_F0R2_FB1_Msk
 (0x1UL << 
CAN_F0R2_FB1_Pos
Ë

	)

7713 
	#CAN_F0R2_FB1
 
CAN_F0R2_FB1_Msk


	)

7714 
	#CAN_F0R2_FB2_Pos
 (2U)

	)

7715 
	#CAN_F0R2_FB2_Msk
 (0x1UL << 
CAN_F0R2_FB2_Pos
Ë

	)

7716 
	#CAN_F0R2_FB2
 
CAN_F0R2_FB2_Msk


	)

7717 
	#CAN_F0R2_FB3_Pos
 (3U)

	)

7718 
	#CAN_F0R2_FB3_Msk
 (0x1UL << 
CAN_F0R2_FB3_Pos
Ë

	)

7719 
	#CAN_F0R2_FB3
 
CAN_F0R2_FB3_Msk


	)

7720 
	#CAN_F0R2_FB4_Pos
 (4U)

	)

7721 
	#CAN_F0R2_FB4_Msk
 (0x1UL << 
CAN_F0R2_FB4_Pos
Ë

	)

7722 
	#CAN_F0R2_FB4
 
CAN_F0R2_FB4_Msk


	)

7723 
	#CAN_F0R2_FB5_Pos
 (5U)

	)

7724 
	#CAN_F0R2_FB5_Msk
 (0x1UL << 
CAN_F0R2_FB5_Pos
Ë

	)

7725 
	#CAN_F0R2_FB5
 
CAN_F0R2_FB5_Msk


	)

7726 
	#CAN_F0R2_FB6_Pos
 (6U)

	)

7727 
	#CAN_F0R2_FB6_Msk
 (0x1UL << 
CAN_F0R2_FB6_Pos
Ë

	)

7728 
	#CAN_F0R2_FB6
 
CAN_F0R2_FB6_Msk


	)

7729 
	#CAN_F0R2_FB7_Pos
 (7U)

	)

7730 
	#CAN_F0R2_FB7_Msk
 (0x1UL << 
CAN_F0R2_FB7_Pos
Ë

	)

7731 
	#CAN_F0R2_FB7
 
CAN_F0R2_FB7_Msk


	)

7732 
	#CAN_F0R2_FB8_Pos
 (8U)

	)

7733 
	#CAN_F0R2_FB8_Msk
 (0x1UL << 
CAN_F0R2_FB8_Pos
Ë

	)

7734 
	#CAN_F0R2_FB8
 
CAN_F0R2_FB8_Msk


	)

7735 
	#CAN_F0R2_FB9_Pos
 (9U)

	)

7736 
	#CAN_F0R2_FB9_Msk
 (0x1UL << 
CAN_F0R2_FB9_Pos
Ë

	)

7737 
	#CAN_F0R2_FB9
 
CAN_F0R2_FB9_Msk


	)

7738 
	#CAN_F0R2_FB10_Pos
 (10U)

	)

7739 
	#CAN_F0R2_FB10_Msk
 (0x1UL << 
CAN_F0R2_FB10_Pos
Ë

	)

7740 
	#CAN_F0R2_FB10
 
CAN_F0R2_FB10_Msk


	)

7741 
	#CAN_F0R2_FB11_Pos
 (11U)

	)

7742 
	#CAN_F0R2_FB11_Msk
 (0x1UL << 
CAN_F0R2_FB11_Pos
Ë

	)

7743 
	#CAN_F0R2_FB11
 
CAN_F0R2_FB11_Msk


	)

7744 
	#CAN_F0R2_FB12_Pos
 (12U)

	)

7745 
	#CAN_F0R2_FB12_Msk
 (0x1UL << 
CAN_F0R2_FB12_Pos
Ë

	)

7746 
	#CAN_F0R2_FB12
 
CAN_F0R2_FB12_Msk


	)

7747 
	#CAN_F0R2_FB13_Pos
 (13U)

	)

7748 
	#CAN_F0R2_FB13_Msk
 (0x1UL << 
CAN_F0R2_FB13_Pos
Ë

	)

7749 
	#CAN_F0R2_FB13
 
CAN_F0R2_FB13_Msk


	)

7750 
	#CAN_F0R2_FB14_Pos
 (14U)

	)

7751 
	#CAN_F0R2_FB14_Msk
 (0x1UL << 
CAN_F0R2_FB14_Pos
Ë

	)

7752 
	#CAN_F0R2_FB14
 
CAN_F0R2_FB14_Msk


	)

7753 
	#CAN_F0R2_FB15_Pos
 (15U)

	)

7754 
	#CAN_F0R2_FB15_Msk
 (0x1UL << 
CAN_F0R2_FB15_Pos
Ë

	)

7755 
	#CAN_F0R2_FB15
 
CAN_F0R2_FB15_Msk


	)

7756 
	#CAN_F0R2_FB16_Pos
 (16U)

	)

7757 
	#CAN_F0R2_FB16_Msk
 (0x1UL << 
CAN_F0R2_FB16_Pos
Ë

	)

7758 
	#CAN_F0R2_FB16
 
CAN_F0R2_FB16_Msk


	)

7759 
	#CAN_F0R2_FB17_Pos
 (17U)

	)

7760 
	#CAN_F0R2_FB17_Msk
 (0x1UL << 
CAN_F0R2_FB17_Pos
Ë

	)

7761 
	#CAN_F0R2_FB17
 
CAN_F0R2_FB17_Msk


	)

7762 
	#CAN_F0R2_FB18_Pos
 (18U)

	)

7763 
	#CAN_F0R2_FB18_Msk
 (0x1UL << 
CAN_F0R2_FB18_Pos
Ë

	)

7764 
	#CAN_F0R2_FB18
 
CAN_F0R2_FB18_Msk


	)

7765 
	#CAN_F0R2_FB19_Pos
 (19U)

	)

7766 
	#CAN_F0R2_FB19_Msk
 (0x1UL << 
CAN_F0R2_FB19_Pos
Ë

	)

7767 
	#CAN_F0R2_FB19
 
CAN_F0R2_FB19_Msk


	)

7768 
	#CAN_F0R2_FB20_Pos
 (20U)

	)

7769 
	#CAN_F0R2_FB20_Msk
 (0x1UL << 
CAN_F0R2_FB20_Pos
Ë

	)

7770 
	#CAN_F0R2_FB20
 
CAN_F0R2_FB20_Msk


	)

7771 
	#CAN_F0R2_FB21_Pos
 (21U)

	)

7772 
	#CAN_F0R2_FB21_Msk
 (0x1UL << 
CAN_F0R2_FB21_Pos
Ë

	)

7773 
	#CAN_F0R2_FB21
 
CAN_F0R2_FB21_Msk


	)

7774 
	#CAN_F0R2_FB22_Pos
 (22U)

	)

7775 
	#CAN_F0R2_FB22_Msk
 (0x1UL << 
CAN_F0R2_FB22_Pos
Ë

	)

7776 
	#CAN_F0R2_FB22
 
CAN_F0R2_FB22_Msk


	)

7777 
	#CAN_F0R2_FB23_Pos
 (23U)

	)

7778 
	#CAN_F0R2_FB23_Msk
 (0x1UL << 
CAN_F0R2_FB23_Pos
Ë

	)

7779 
	#CAN_F0R2_FB23
 
CAN_F0R2_FB23_Msk


	)

7780 
	#CAN_F0R2_FB24_Pos
 (24U)

	)

7781 
	#CAN_F0R2_FB24_Msk
 (0x1UL << 
CAN_F0R2_FB24_Pos
Ë

	)

7782 
	#CAN_F0R2_FB24
 
CAN_F0R2_FB24_Msk


	)

7783 
	#CAN_F0R2_FB25_Pos
 (25U)

	)

7784 
	#CAN_F0R2_FB25_Msk
 (0x1UL << 
CAN_F0R2_FB25_Pos
Ë

	)

7785 
	#CAN_F0R2_FB25
 
CAN_F0R2_FB25_Msk


	)

7786 
	#CAN_F0R2_FB26_Pos
 (26U)

	)

7787 
	#CAN_F0R2_FB26_Msk
 (0x1UL << 
CAN_F0R2_FB26_Pos
Ë

	)

7788 
	#CAN_F0R2_FB26
 
CAN_F0R2_FB26_Msk


	)

7789 
	#CAN_F0R2_FB27_Pos
 (27U)

	)

7790 
	#CAN_F0R2_FB27_Msk
 (0x1UL << 
CAN_F0R2_FB27_Pos
Ë

	)

7791 
	#CAN_F0R2_FB27
 
CAN_F0R2_FB27_Msk


	)

7792 
	#CAN_F0R2_FB28_Pos
 (28U)

	)

7793 
	#CAN_F0R2_FB28_Msk
 (0x1UL << 
CAN_F0R2_FB28_Pos
Ë

	)

7794 
	#CAN_F0R2_FB28
 
CAN_F0R2_FB28_Msk


	)

7795 
	#CAN_F0R2_FB29_Pos
 (29U)

	)

7796 
	#CAN_F0R2_FB29_Msk
 (0x1UL << 
CAN_F0R2_FB29_Pos
Ë

	)

7797 
	#CAN_F0R2_FB29
 
CAN_F0R2_FB29_Msk


	)

7798 
	#CAN_F0R2_FB30_Pos
 (30U)

	)

7799 
	#CAN_F0R2_FB30_Msk
 (0x1UL << 
CAN_F0R2_FB30_Pos
Ë

	)

7800 
	#CAN_F0R2_FB30
 
CAN_F0R2_FB30_Msk


	)

7801 
	#CAN_F0R2_FB31_Pos
 (31U)

	)

7802 
	#CAN_F0R2_FB31_Msk
 (0x1UL << 
CAN_F0R2_FB31_Pos
Ë

	)

7803 
	#CAN_F0R2_FB31
 
CAN_F0R2_FB31_Msk


	)

7806 
	#CAN_F1R2_FB0_Pos
 (0U)

	)

7807 
	#CAN_F1R2_FB0_Msk
 (0x1UL << 
CAN_F1R2_FB0_Pos
Ë

	)

7808 
	#CAN_F1R2_FB0
 
CAN_F1R2_FB0_Msk


	)

7809 
	#CAN_F1R2_FB1_Pos
 (1U)

	)

7810 
	#CAN_F1R2_FB1_Msk
 (0x1UL << 
CAN_F1R2_FB1_Pos
Ë

	)

7811 
	#CAN_F1R2_FB1
 
CAN_F1R2_FB1_Msk


	)

7812 
	#CAN_F1R2_FB2_Pos
 (2U)

	)

7813 
	#CAN_F1R2_FB2_Msk
 (0x1UL << 
CAN_F1R2_FB2_Pos
Ë

	)

7814 
	#CAN_F1R2_FB2
 
CAN_F1R2_FB2_Msk


	)

7815 
	#CAN_F1R2_FB3_Pos
 (3U)

	)

7816 
	#CAN_F1R2_FB3_Msk
 (0x1UL << 
CAN_F1R2_FB3_Pos
Ë

	)

7817 
	#CAN_F1R2_FB3
 
CAN_F1R2_FB3_Msk


	)

7818 
	#CAN_F1R2_FB4_Pos
 (4U)

	)

7819 
	#CAN_F1R2_FB4_Msk
 (0x1UL << 
CAN_F1R2_FB4_Pos
Ë

	)

7820 
	#CAN_F1R2_FB4
 
CAN_F1R2_FB4_Msk


	)

7821 
	#CAN_F1R2_FB5_Pos
 (5U)

	)

7822 
	#CAN_F1R2_FB5_Msk
 (0x1UL << 
CAN_F1R2_FB5_Pos
Ë

	)

7823 
	#CAN_F1R2_FB5
 
CAN_F1R2_FB5_Msk


	)

7824 
	#CAN_F1R2_FB6_Pos
 (6U)

	)

7825 
	#CAN_F1R2_FB6_Msk
 (0x1UL << 
CAN_F1R2_FB6_Pos
Ë

	)

7826 
	#CAN_F1R2_FB6
 
CAN_F1R2_FB6_Msk


	)

7827 
	#CAN_F1R2_FB7_Pos
 (7U)

	)

7828 
	#CAN_F1R2_FB7_Msk
 (0x1UL << 
CAN_F1R2_FB7_Pos
Ë

	)

7829 
	#CAN_F1R2_FB7
 
CAN_F1R2_FB7_Msk


	)

7830 
	#CAN_F1R2_FB8_Pos
 (8U)

	)

7831 
	#CAN_F1R2_FB8_Msk
 (0x1UL << 
CAN_F1R2_FB8_Pos
Ë

	)

7832 
	#CAN_F1R2_FB8
 
CAN_F1R2_FB8_Msk


	)

7833 
	#CAN_F1R2_FB9_Pos
 (9U)

	)

7834 
	#CAN_F1R2_FB9_Msk
 (0x1UL << 
CAN_F1R2_FB9_Pos
Ë

	)

7835 
	#CAN_F1R2_FB9
 
CAN_F1R2_FB9_Msk


	)

7836 
	#CAN_F1R2_FB10_Pos
 (10U)

	)

7837 
	#CAN_F1R2_FB10_Msk
 (0x1UL << 
CAN_F1R2_FB10_Pos
Ë

	)

7838 
	#CAN_F1R2_FB10
 
CAN_F1R2_FB10_Msk


	)

7839 
	#CAN_F1R2_FB11_Pos
 (11U)

	)

7840 
	#CAN_F1R2_FB11_Msk
 (0x1UL << 
CAN_F1R2_FB11_Pos
Ë

	)

7841 
	#CAN_F1R2_FB11
 
CAN_F1R2_FB11_Msk


	)

7842 
	#CAN_F1R2_FB12_Pos
 (12U)

	)

7843 
	#CAN_F1R2_FB12_Msk
 (0x1UL << 
CAN_F1R2_FB12_Pos
Ë

	)

7844 
	#CAN_F1R2_FB12
 
CAN_F1R2_FB12_Msk


	)

7845 
	#CAN_F1R2_FB13_Pos
 (13U)

	)

7846 
	#CAN_F1R2_FB13_Msk
 (0x1UL << 
CAN_F1R2_FB13_Pos
Ë

	)

7847 
	#CAN_F1R2_FB13
 
CAN_F1R2_FB13_Msk


	)

7848 
	#CAN_F1R2_FB14_Pos
 (14U)

	)

7849 
	#CAN_F1R2_FB14_Msk
 (0x1UL << 
CAN_F1R2_FB14_Pos
Ë

	)

7850 
	#CAN_F1R2_FB14
 
CAN_F1R2_FB14_Msk


	)

7851 
	#CAN_F1R2_FB15_Pos
 (15U)

	)

7852 
	#CAN_F1R2_FB15_Msk
 (0x1UL << 
CAN_F1R2_FB15_Pos
Ë

	)

7853 
	#CAN_F1R2_FB15
 
CAN_F1R2_FB15_Msk


	)

7854 
	#CAN_F1R2_FB16_Pos
 (16U)

	)

7855 
	#CAN_F1R2_FB16_Msk
 (0x1UL << 
CAN_F1R2_FB16_Pos
Ë

	)

7856 
	#CAN_F1R2_FB16
 
CAN_F1R2_FB16_Msk


	)

7857 
	#CAN_F1R2_FB17_Pos
 (17U)

	)

7858 
	#CAN_F1R2_FB17_Msk
 (0x1UL << 
CAN_F1R2_FB17_Pos
Ë

	)

7859 
	#CAN_F1R2_FB17
 
CAN_F1R2_FB17_Msk


	)

7860 
	#CAN_F1R2_FB18_Pos
 (18U)

	)

7861 
	#CAN_F1R2_FB18_Msk
 (0x1UL << 
CAN_F1R2_FB18_Pos
Ë

	)

7862 
	#CAN_F1R2_FB18
 
CAN_F1R2_FB18_Msk


	)

7863 
	#CAN_F1R2_FB19_Pos
 (19U)

	)

7864 
	#CAN_F1R2_FB19_Msk
 (0x1UL << 
CAN_F1R2_FB19_Pos
Ë

	)

7865 
	#CAN_F1R2_FB19
 
CAN_F1R2_FB19_Msk


	)

7866 
	#CAN_F1R2_FB20_Pos
 (20U)

	)

7867 
	#CAN_F1R2_FB20_Msk
 (0x1UL << 
CAN_F1R2_FB20_Pos
Ë

	)

7868 
	#CAN_F1R2_FB20
 
CAN_F1R2_FB20_Msk


	)

7869 
	#CAN_F1R2_FB21_Pos
 (21U)

	)

7870 
	#CAN_F1R2_FB21_Msk
 (0x1UL << 
CAN_F1R2_FB21_Pos
Ë

	)

7871 
	#CAN_F1R2_FB21
 
CAN_F1R2_FB21_Msk


	)

7872 
	#CAN_F1R2_FB22_Pos
 (22U)

	)

7873 
	#CAN_F1R2_FB22_Msk
 (0x1UL << 
CAN_F1R2_FB22_Pos
Ë

	)

7874 
	#CAN_F1R2_FB22
 
CAN_F1R2_FB22_Msk


	)

7875 
	#CAN_F1R2_FB23_Pos
 (23U)

	)

7876 
	#CAN_F1R2_FB23_Msk
 (0x1UL << 
CAN_F1R2_FB23_Pos
Ë

	)

7877 
	#CAN_F1R2_FB23
 
CAN_F1R2_FB23_Msk


	)

7878 
	#CAN_F1R2_FB24_Pos
 (24U)

	)

7879 
	#CAN_F1R2_FB24_Msk
 (0x1UL << 
CAN_F1R2_FB24_Pos
Ë

	)

7880 
	#CAN_F1R2_FB24
 
CAN_F1R2_FB24_Msk


	)

7881 
	#CAN_F1R2_FB25_Pos
 (25U)

	)

7882 
	#CAN_F1R2_FB25_Msk
 (0x1UL << 
CAN_F1R2_FB25_Pos
Ë

	)

7883 
	#CAN_F1R2_FB25
 
CAN_F1R2_FB25_Msk


	)

7884 
	#CAN_F1R2_FB26_Pos
 (26U)

	)

7885 
	#CAN_F1R2_FB26_Msk
 (0x1UL << 
CAN_F1R2_FB26_Pos
Ë

	)

7886 
	#CAN_F1R2_FB26
 
CAN_F1R2_FB26_Msk


	)

7887 
	#CAN_F1R2_FB27_Pos
 (27U)

	)

7888 
	#CAN_F1R2_FB27_Msk
 (0x1UL << 
CAN_F1R2_FB27_Pos
Ë

	)

7889 
	#CAN_F1R2_FB27
 
CAN_F1R2_FB27_Msk


	)

7890 
	#CAN_F1R2_FB28_Pos
 (28U)

	)

7891 
	#CAN_F1R2_FB28_Msk
 (0x1UL << 
CAN_F1R2_FB28_Pos
Ë

	)

7892 
	#CAN_F1R2_FB28
 
CAN_F1R2_FB28_Msk


	)

7893 
	#CAN_F1R2_FB29_Pos
 (29U)

	)

7894 
	#CAN_F1R2_FB29_Msk
 (0x1UL << 
CAN_F1R2_FB29_Pos
Ë

	)

7895 
	#CAN_F1R2_FB29
 
CAN_F1R2_FB29_Msk


	)

7896 
	#CAN_F1R2_FB30_Pos
 (30U)

	)

7897 
	#CAN_F1R2_FB30_Msk
 (0x1UL << 
CAN_F1R2_FB30_Pos
Ë

	)

7898 
	#CAN_F1R2_FB30
 
CAN_F1R2_FB30_Msk


	)

7899 
	#CAN_F1R2_FB31_Pos
 (31U)

	)

7900 
	#CAN_F1R2_FB31_Msk
 (0x1UL << 
CAN_F1R2_FB31_Pos
Ë

	)

7901 
	#CAN_F1R2_FB31
 
CAN_F1R2_FB31_Msk


	)

7904 
	#CAN_F2R2_FB0_Pos
 (0U)

	)

7905 
	#CAN_F2R2_FB0_Msk
 (0x1UL << 
CAN_F2R2_FB0_Pos
Ë

	)

7906 
	#CAN_F2R2_FB0
 
CAN_F2R2_FB0_Msk


	)

7907 
	#CAN_F2R2_FB1_Pos
 (1U)

	)

7908 
	#CAN_F2R2_FB1_Msk
 (0x1UL << 
CAN_F2R2_FB1_Pos
Ë

	)

7909 
	#CAN_F2R2_FB1
 
CAN_F2R2_FB1_Msk


	)

7910 
	#CAN_F2R2_FB2_Pos
 (2U)

	)

7911 
	#CAN_F2R2_FB2_Msk
 (0x1UL << 
CAN_F2R2_FB2_Pos
Ë

	)

7912 
	#CAN_F2R2_FB2
 
CAN_F2R2_FB2_Msk


	)

7913 
	#CAN_F2R2_FB3_Pos
 (3U)

	)

7914 
	#CAN_F2R2_FB3_Msk
 (0x1UL << 
CAN_F2R2_FB3_Pos
Ë

	)

7915 
	#CAN_F2R2_FB3
 
CAN_F2R2_FB3_Msk


	)

7916 
	#CAN_F2R2_FB4_Pos
 (4U)

	)

7917 
	#CAN_F2R2_FB4_Msk
 (0x1UL << 
CAN_F2R2_FB4_Pos
Ë

	)

7918 
	#CAN_F2R2_FB4
 
CAN_F2R2_FB4_Msk


	)

7919 
	#CAN_F2R2_FB5_Pos
 (5U)

	)

7920 
	#CAN_F2R2_FB5_Msk
 (0x1UL << 
CAN_F2R2_FB5_Pos
Ë

	)

7921 
	#CAN_F2R2_FB5
 
CAN_F2R2_FB5_Msk


	)

7922 
	#CAN_F2R2_FB6_Pos
 (6U)

	)

7923 
	#CAN_F2R2_FB6_Msk
 (0x1UL << 
CAN_F2R2_FB6_Pos
Ë

	)

7924 
	#CAN_F2R2_FB6
 
CAN_F2R2_FB6_Msk


	)

7925 
	#CAN_F2R2_FB7_Pos
 (7U)

	)

7926 
	#CAN_F2R2_FB7_Msk
 (0x1UL << 
CAN_F2R2_FB7_Pos
Ë

	)

7927 
	#CAN_F2R2_FB7
 
CAN_F2R2_FB7_Msk


	)

7928 
	#CAN_F2R2_FB8_Pos
 (8U)

	)

7929 
	#CAN_F2R2_FB8_Msk
 (0x1UL << 
CAN_F2R2_FB8_Pos
Ë

	)

7930 
	#CAN_F2R2_FB8
 
CAN_F2R2_FB8_Msk


	)

7931 
	#CAN_F2R2_FB9_Pos
 (9U)

	)

7932 
	#CAN_F2R2_FB9_Msk
 (0x1UL << 
CAN_F2R2_FB9_Pos
Ë

	)

7933 
	#CAN_F2R2_FB9
 
CAN_F2R2_FB9_Msk


	)

7934 
	#CAN_F2R2_FB10_Pos
 (10U)

	)

7935 
	#CAN_F2R2_FB10_Msk
 (0x1UL << 
CAN_F2R2_FB10_Pos
Ë

	)

7936 
	#CAN_F2R2_FB10
 
CAN_F2R2_FB10_Msk


	)

7937 
	#CAN_F2R2_FB11_Pos
 (11U)

	)

7938 
	#CAN_F2R2_FB11_Msk
 (0x1UL << 
CAN_F2R2_FB11_Pos
Ë

	)

7939 
	#CAN_F2R2_FB11
 
CAN_F2R2_FB11_Msk


	)

7940 
	#CAN_F2R2_FB12_Pos
 (12U)

	)

7941 
	#CAN_F2R2_FB12_Msk
 (0x1UL << 
CAN_F2R2_FB12_Pos
Ë

	)

7942 
	#CAN_F2R2_FB12
 
CAN_F2R2_FB12_Msk


	)

7943 
	#CAN_F2R2_FB13_Pos
 (13U)

	)

7944 
	#CAN_F2R2_FB13_Msk
 (0x1UL << 
CAN_F2R2_FB13_Pos
Ë

	)

7945 
	#CAN_F2R2_FB13
 
CAN_F2R2_FB13_Msk


	)

7946 
	#CAN_F2R2_FB14_Pos
 (14U)

	)

7947 
	#CAN_F2R2_FB14_Msk
 (0x1UL << 
CAN_F2R2_FB14_Pos
Ë

	)

7948 
	#CAN_F2R2_FB14
 
CAN_F2R2_FB14_Msk


	)

7949 
	#CAN_F2R2_FB15_Pos
 (15U)

	)

7950 
	#CAN_F2R2_FB15_Msk
 (0x1UL << 
CAN_F2R2_FB15_Pos
Ë

	)

7951 
	#CAN_F2R2_FB15
 
CAN_F2R2_FB15_Msk


	)

7952 
	#CAN_F2R2_FB16_Pos
 (16U)

	)

7953 
	#CAN_F2R2_FB16_Msk
 (0x1UL << 
CAN_F2R2_FB16_Pos
Ë

	)

7954 
	#CAN_F2R2_FB16
 
CAN_F2R2_FB16_Msk


	)

7955 
	#CAN_F2R2_FB17_Pos
 (17U)

	)

7956 
	#CAN_F2R2_FB17_Msk
 (0x1UL << 
CAN_F2R2_FB17_Pos
Ë

	)

7957 
	#CAN_F2R2_FB17
 
CAN_F2R2_FB17_Msk


	)

7958 
	#CAN_F2R2_FB18_Pos
 (18U)

	)

7959 
	#CAN_F2R2_FB18_Msk
 (0x1UL << 
CAN_F2R2_FB18_Pos
Ë

	)

7960 
	#CAN_F2R2_FB18
 
CAN_F2R2_FB18_Msk


	)

7961 
	#CAN_F2R2_FB19_Pos
 (19U)

	)

7962 
	#CAN_F2R2_FB19_Msk
 (0x1UL << 
CAN_F2R2_FB19_Pos
Ë

	)

7963 
	#CAN_F2R2_FB19
 
CAN_F2R2_FB19_Msk


	)

7964 
	#CAN_F2R2_FB20_Pos
 (20U)

	)

7965 
	#CAN_F2R2_FB20_Msk
 (0x1UL << 
CAN_F2R2_FB20_Pos
Ë

	)

7966 
	#CAN_F2R2_FB20
 
CAN_F2R2_FB20_Msk


	)

7967 
	#CAN_F2R2_FB21_Pos
 (21U)

	)

7968 
	#CAN_F2R2_FB21_Msk
 (0x1UL << 
CAN_F2R2_FB21_Pos
Ë

	)

7969 
	#CAN_F2R2_FB21
 
CAN_F2R2_FB21_Msk


	)

7970 
	#CAN_F2R2_FB22_Pos
 (22U)

	)

7971 
	#CAN_F2R2_FB22_Msk
 (0x1UL << 
CAN_F2R2_FB22_Pos
Ë

	)

7972 
	#CAN_F2R2_FB22
 
CAN_F2R2_FB22_Msk


	)

7973 
	#CAN_F2R2_FB23_Pos
 (23U)

	)

7974 
	#CAN_F2R2_FB23_Msk
 (0x1UL << 
CAN_F2R2_FB23_Pos
Ë

	)

7975 
	#CAN_F2R2_FB23
 
CAN_F2R2_FB23_Msk


	)

7976 
	#CAN_F2R2_FB24_Pos
 (24U)

	)

7977 
	#CAN_F2R2_FB24_Msk
 (0x1UL << 
CAN_F2R2_FB24_Pos
Ë

	)

7978 
	#CAN_F2R2_FB24
 
CAN_F2R2_FB24_Msk


	)

7979 
	#CAN_F2R2_FB25_Pos
 (25U)

	)

7980 
	#CAN_F2R2_FB25_Msk
 (0x1UL << 
CAN_F2R2_FB25_Pos
Ë

	)

7981 
	#CAN_F2R2_FB25
 
CAN_F2R2_FB25_Msk


	)

7982 
	#CAN_F2R2_FB26_Pos
 (26U)

	)

7983 
	#CAN_F2R2_FB26_Msk
 (0x1UL << 
CAN_F2R2_FB26_Pos
Ë

	)

7984 
	#CAN_F2R2_FB26
 
CAN_F2R2_FB26_Msk


	)

7985 
	#CAN_F2R2_FB27_Pos
 (27U)

	)

7986 
	#CAN_F2R2_FB27_Msk
 (0x1UL << 
CAN_F2R2_FB27_Pos
Ë

	)

7987 
	#CAN_F2R2_FB27
 
CAN_F2R2_FB27_Msk


	)

7988 
	#CAN_F2R2_FB28_Pos
 (28U)

	)

7989 
	#CAN_F2R2_FB28_Msk
 (0x1UL << 
CAN_F2R2_FB28_Pos
Ë

	)

7990 
	#CAN_F2R2_FB28
 
CAN_F2R2_FB28_Msk


	)

7991 
	#CAN_F2R2_FB29_Pos
 (29U)

	)

7992 
	#CAN_F2R2_FB29_Msk
 (0x1UL << 
CAN_F2R2_FB29_Pos
Ë

	)

7993 
	#CAN_F2R2_FB29
 
CAN_F2R2_FB29_Msk


	)

7994 
	#CAN_F2R2_FB30_Pos
 (30U)

	)

7995 
	#CAN_F2R2_FB30_Msk
 (0x1UL << 
CAN_F2R2_FB30_Pos
Ë

	)

7996 
	#CAN_F2R2_FB30
 
CAN_F2R2_FB30_Msk


	)

7997 
	#CAN_F2R2_FB31_Pos
 (31U)

	)

7998 
	#CAN_F2R2_FB31_Msk
 (0x1UL << 
CAN_F2R2_FB31_Pos
Ë

	)

7999 
	#CAN_F2R2_FB31
 
CAN_F2R2_FB31_Msk


	)

8002 
	#CAN_F3R2_FB0_Pos
 (0U)

	)

8003 
	#CAN_F3R2_FB0_Msk
 (0x1UL << 
CAN_F3R2_FB0_Pos
Ë

	)

8004 
	#CAN_F3R2_FB0
 
CAN_F3R2_FB0_Msk


	)

8005 
	#CAN_F3R2_FB1_Pos
 (1U)

	)

8006 
	#CAN_F3R2_FB1_Msk
 (0x1UL << 
CAN_F3R2_FB1_Pos
Ë

	)

8007 
	#CAN_F3R2_FB1
 
CAN_F3R2_FB1_Msk


	)

8008 
	#CAN_F3R2_FB2_Pos
 (2U)

	)

8009 
	#CAN_F3R2_FB2_Msk
 (0x1UL << 
CAN_F3R2_FB2_Pos
Ë

	)

8010 
	#CAN_F3R2_FB2
 
CAN_F3R2_FB2_Msk


	)

8011 
	#CAN_F3R2_FB3_Pos
 (3U)

	)

8012 
	#CAN_F3R2_FB3_Msk
 (0x1UL << 
CAN_F3R2_FB3_Pos
Ë

	)

8013 
	#CAN_F3R2_FB3
 
CAN_F3R2_FB3_Msk


	)

8014 
	#CAN_F3R2_FB4_Pos
 (4U)

	)

8015 
	#CAN_F3R2_FB4_Msk
 (0x1UL << 
CAN_F3R2_FB4_Pos
Ë

	)

8016 
	#CAN_F3R2_FB4
 
CAN_F3R2_FB4_Msk


	)

8017 
	#CAN_F3R2_FB5_Pos
 (5U)

	)

8018 
	#CAN_F3R2_FB5_Msk
 (0x1UL << 
CAN_F3R2_FB5_Pos
Ë

	)

8019 
	#CAN_F3R2_FB5
 
CAN_F3R2_FB5_Msk


	)

8020 
	#CAN_F3R2_FB6_Pos
 (6U)

	)

8021 
	#CAN_F3R2_FB6_Msk
 (0x1UL << 
CAN_F3R2_FB6_Pos
Ë

	)

8022 
	#CAN_F3R2_FB6
 
CAN_F3R2_FB6_Msk


	)

8023 
	#CAN_F3R2_FB7_Pos
 (7U)

	)

8024 
	#CAN_F3R2_FB7_Msk
 (0x1UL << 
CAN_F3R2_FB7_Pos
Ë

	)

8025 
	#CAN_F3R2_FB7
 
CAN_F3R2_FB7_Msk


	)

8026 
	#CAN_F3R2_FB8_Pos
 (8U)

	)

8027 
	#CAN_F3R2_FB8_Msk
 (0x1UL << 
CAN_F3R2_FB8_Pos
Ë

	)

8028 
	#CAN_F3R2_FB8
 
CAN_F3R2_FB8_Msk


	)

8029 
	#CAN_F3R2_FB9_Pos
 (9U)

	)

8030 
	#CAN_F3R2_FB9_Msk
 (0x1UL << 
CAN_F3R2_FB9_Pos
Ë

	)

8031 
	#CAN_F3R2_FB9
 
CAN_F3R2_FB9_Msk


	)

8032 
	#CAN_F3R2_FB10_Pos
 (10U)

	)

8033 
	#CAN_F3R2_FB10_Msk
 (0x1UL << 
CAN_F3R2_FB10_Pos
Ë

	)

8034 
	#CAN_F3R2_FB10
 
CAN_F3R2_FB10_Msk


	)

8035 
	#CAN_F3R2_FB11_Pos
 (11U)

	)

8036 
	#CAN_F3R2_FB11_Msk
 (0x1UL << 
CAN_F3R2_FB11_Pos
Ë

	)

8037 
	#CAN_F3R2_FB11
 
CAN_F3R2_FB11_Msk


	)

8038 
	#CAN_F3R2_FB12_Pos
 (12U)

	)

8039 
	#CAN_F3R2_FB12_Msk
 (0x1UL << 
CAN_F3R2_FB12_Pos
Ë

	)

8040 
	#CAN_F3R2_FB12
 
CAN_F3R2_FB12_Msk


	)

8041 
	#CAN_F3R2_FB13_Pos
 (13U)

	)

8042 
	#CAN_F3R2_FB13_Msk
 (0x1UL << 
CAN_F3R2_FB13_Pos
Ë

	)

8043 
	#CAN_F3R2_FB13
 
CAN_F3R2_FB13_Msk


	)

8044 
	#CAN_F3R2_FB14_Pos
 (14U)

	)

8045 
	#CAN_F3R2_FB14_Msk
 (0x1UL << 
CAN_F3R2_FB14_Pos
Ë

	)

8046 
	#CAN_F3R2_FB14
 
CAN_F3R2_FB14_Msk


	)

8047 
	#CAN_F3R2_FB15_Pos
 (15U)

	)

8048 
	#CAN_F3R2_FB15_Msk
 (0x1UL << 
CAN_F3R2_FB15_Pos
Ë

	)

8049 
	#CAN_F3R2_FB15
 
CAN_F3R2_FB15_Msk


	)

8050 
	#CAN_F3R2_FB16_Pos
 (16U)

	)

8051 
	#CAN_F3R2_FB16_Msk
 (0x1UL << 
CAN_F3R2_FB16_Pos
Ë

	)

8052 
	#CAN_F3R2_FB16
 
CAN_F3R2_FB16_Msk


	)

8053 
	#CAN_F3R2_FB17_Pos
 (17U)

	)

8054 
	#CAN_F3R2_FB17_Msk
 (0x1UL << 
CAN_F3R2_FB17_Pos
Ë

	)

8055 
	#CAN_F3R2_FB17
 
CAN_F3R2_FB17_Msk


	)

8056 
	#CAN_F3R2_FB18_Pos
 (18U)

	)

8057 
	#CAN_F3R2_FB18_Msk
 (0x1UL << 
CAN_F3R2_FB18_Pos
Ë

	)

8058 
	#CAN_F3R2_FB18
 
CAN_F3R2_FB18_Msk


	)

8059 
	#CAN_F3R2_FB19_Pos
 (19U)

	)

8060 
	#CAN_F3R2_FB19_Msk
 (0x1UL << 
CAN_F3R2_FB19_Pos
Ë

	)

8061 
	#CAN_F3R2_FB19
 
CAN_F3R2_FB19_Msk


	)

8062 
	#CAN_F3R2_FB20_Pos
 (20U)

	)

8063 
	#CAN_F3R2_FB20_Msk
 (0x1UL << 
CAN_F3R2_FB20_Pos
Ë

	)

8064 
	#CAN_F3R2_FB20
 
CAN_F3R2_FB20_Msk


	)

8065 
	#CAN_F3R2_FB21_Pos
 (21U)

	)

8066 
	#CAN_F3R2_FB21_Msk
 (0x1UL << 
CAN_F3R2_FB21_Pos
Ë

	)

8067 
	#CAN_F3R2_FB21
 
CAN_F3R2_FB21_Msk


	)

8068 
	#CAN_F3R2_FB22_Pos
 (22U)

	)

8069 
	#CAN_F3R2_FB22_Msk
 (0x1UL << 
CAN_F3R2_FB22_Pos
Ë

	)

8070 
	#CAN_F3R2_FB22
 
CAN_F3R2_FB22_Msk


	)

8071 
	#CAN_F3R2_FB23_Pos
 (23U)

	)

8072 
	#CAN_F3R2_FB23_Msk
 (0x1UL << 
CAN_F3R2_FB23_Pos
Ë

	)

8073 
	#CAN_F3R2_FB23
 
CAN_F3R2_FB23_Msk


	)

8074 
	#CAN_F3R2_FB24_Pos
 (24U)

	)

8075 
	#CAN_F3R2_FB24_Msk
 (0x1UL << 
CAN_F3R2_FB24_Pos
Ë

	)

8076 
	#CAN_F3R2_FB24
 
CAN_F3R2_FB24_Msk


	)

8077 
	#CAN_F3R2_FB25_Pos
 (25U)

	)

8078 
	#CAN_F3R2_FB25_Msk
 (0x1UL << 
CAN_F3R2_FB25_Pos
Ë

	)

8079 
	#CAN_F3R2_FB25
 
CAN_F3R2_FB25_Msk


	)

8080 
	#CAN_F3R2_FB26_Pos
 (26U)

	)

8081 
	#CAN_F3R2_FB26_Msk
 (0x1UL << 
CAN_F3R2_FB26_Pos
Ë

	)

8082 
	#CAN_F3R2_FB26
 
CAN_F3R2_FB26_Msk


	)

8083 
	#CAN_F3R2_FB27_Pos
 (27U)

	)

8084 
	#CAN_F3R2_FB27_Msk
 (0x1UL << 
CAN_F3R2_FB27_Pos
Ë

	)

8085 
	#CAN_F3R2_FB27
 
CAN_F3R2_FB27_Msk


	)

8086 
	#CAN_F3R2_FB28_Pos
 (28U)

	)

8087 
	#CAN_F3R2_FB28_Msk
 (0x1UL << 
CAN_F3R2_FB28_Pos
Ë

	)

8088 
	#CAN_F3R2_FB28
 
CAN_F3R2_FB28_Msk


	)

8089 
	#CAN_F3R2_FB29_Pos
 (29U)

	)

8090 
	#CAN_F3R2_FB29_Msk
 (0x1UL << 
CAN_F3R2_FB29_Pos
Ë

	)

8091 
	#CAN_F3R2_FB29
 
CAN_F3R2_FB29_Msk


	)

8092 
	#CAN_F3R2_FB30_Pos
 (30U)

	)

8093 
	#CAN_F3R2_FB30_Msk
 (0x1UL << 
CAN_F3R2_FB30_Pos
Ë

	)

8094 
	#CAN_F3R2_FB30
 
CAN_F3R2_FB30_Msk


	)

8095 
	#CAN_F3R2_FB31_Pos
 (31U)

	)

8096 
	#CAN_F3R2_FB31_Msk
 (0x1UL << 
CAN_F3R2_FB31_Pos
Ë

	)

8097 
	#CAN_F3R2_FB31
 
CAN_F3R2_FB31_Msk


	)

8100 
	#CAN_F4R2_FB0_Pos
 (0U)

	)

8101 
	#CAN_F4R2_FB0_Msk
 (0x1UL << 
CAN_F4R2_FB0_Pos
Ë

	)

8102 
	#CAN_F4R2_FB0
 
CAN_F4R2_FB0_Msk


	)

8103 
	#CAN_F4R2_FB1_Pos
 (1U)

	)

8104 
	#CAN_F4R2_FB1_Msk
 (0x1UL << 
CAN_F4R2_FB1_Pos
Ë

	)

8105 
	#CAN_F4R2_FB1
 
CAN_F4R2_FB1_Msk


	)

8106 
	#CAN_F4R2_FB2_Pos
 (2U)

	)

8107 
	#CAN_F4R2_FB2_Msk
 (0x1UL << 
CAN_F4R2_FB2_Pos
Ë

	)

8108 
	#CAN_F4R2_FB2
 
CAN_F4R2_FB2_Msk


	)

8109 
	#CAN_F4R2_FB3_Pos
 (3U)

	)

8110 
	#CAN_F4R2_FB3_Msk
 (0x1UL << 
CAN_F4R2_FB3_Pos
Ë

	)

8111 
	#CAN_F4R2_FB3
 
CAN_F4R2_FB3_Msk


	)

8112 
	#CAN_F4R2_FB4_Pos
 (4U)

	)

8113 
	#CAN_F4R2_FB4_Msk
 (0x1UL << 
CAN_F4R2_FB4_Pos
Ë

	)

8114 
	#CAN_F4R2_FB4
 
CAN_F4R2_FB4_Msk


	)

8115 
	#CAN_F4R2_FB5_Pos
 (5U)

	)

8116 
	#CAN_F4R2_FB5_Msk
 (0x1UL << 
CAN_F4R2_FB5_Pos
Ë

	)

8117 
	#CAN_F4R2_FB5
 
CAN_F4R2_FB5_Msk


	)

8118 
	#CAN_F4R2_FB6_Pos
 (6U)

	)

8119 
	#CAN_F4R2_FB6_Msk
 (0x1UL << 
CAN_F4R2_FB6_Pos
Ë

	)

8120 
	#CAN_F4R2_FB6
 
CAN_F4R2_FB6_Msk


	)

8121 
	#CAN_F4R2_FB7_Pos
 (7U)

	)

8122 
	#CAN_F4R2_FB7_Msk
 (0x1UL << 
CAN_F4R2_FB7_Pos
Ë

	)

8123 
	#CAN_F4R2_FB7
 
CAN_F4R2_FB7_Msk


	)

8124 
	#CAN_F4R2_FB8_Pos
 (8U)

	)

8125 
	#CAN_F4R2_FB8_Msk
 (0x1UL << 
CAN_F4R2_FB8_Pos
Ë

	)

8126 
	#CAN_F4R2_FB8
 
CAN_F4R2_FB8_Msk


	)

8127 
	#CAN_F4R2_FB9_Pos
 (9U)

	)

8128 
	#CAN_F4R2_FB9_Msk
 (0x1UL << 
CAN_F4R2_FB9_Pos
Ë

	)

8129 
	#CAN_F4R2_FB9
 
CAN_F4R2_FB9_Msk


	)

8130 
	#CAN_F4R2_FB10_Pos
 (10U)

	)

8131 
	#CAN_F4R2_FB10_Msk
 (0x1UL << 
CAN_F4R2_FB10_Pos
Ë

	)

8132 
	#CAN_F4R2_FB10
 
CAN_F4R2_FB10_Msk


	)

8133 
	#CAN_F4R2_FB11_Pos
 (11U)

	)

8134 
	#CAN_F4R2_FB11_Msk
 (0x1UL << 
CAN_F4R2_FB11_Pos
Ë

	)

8135 
	#CAN_F4R2_FB11
 
CAN_F4R2_FB11_Msk


	)

8136 
	#CAN_F4R2_FB12_Pos
 (12U)

	)

8137 
	#CAN_F4R2_FB12_Msk
 (0x1UL << 
CAN_F4R2_FB12_Pos
Ë

	)

8138 
	#CAN_F4R2_FB12
 
CAN_F4R2_FB12_Msk


	)

8139 
	#CAN_F4R2_FB13_Pos
 (13U)

	)

8140 
	#CAN_F4R2_FB13_Msk
 (0x1UL << 
CAN_F4R2_FB13_Pos
Ë

	)

8141 
	#CAN_F4R2_FB13
 
CAN_F4R2_FB13_Msk


	)

8142 
	#CAN_F4R2_FB14_Pos
 (14U)

	)

8143 
	#CAN_F4R2_FB14_Msk
 (0x1UL << 
CAN_F4R2_FB14_Pos
Ë

	)

8144 
	#CAN_F4R2_FB14
 
CAN_F4R2_FB14_Msk


	)

8145 
	#CAN_F4R2_FB15_Pos
 (15U)

	)

8146 
	#CAN_F4R2_FB15_Msk
 (0x1UL << 
CAN_F4R2_FB15_Pos
Ë

	)

8147 
	#CAN_F4R2_FB15
 
CAN_F4R2_FB15_Msk


	)

8148 
	#CAN_F4R2_FB16_Pos
 (16U)

	)

8149 
	#CAN_F4R2_FB16_Msk
 (0x1UL << 
CAN_F4R2_FB16_Pos
Ë

	)

8150 
	#CAN_F4R2_FB16
 
CAN_F4R2_FB16_Msk


	)

8151 
	#CAN_F4R2_FB17_Pos
 (17U)

	)

8152 
	#CAN_F4R2_FB17_Msk
 (0x1UL << 
CAN_F4R2_FB17_Pos
Ë

	)

8153 
	#CAN_F4R2_FB17
 
CAN_F4R2_FB17_Msk


	)

8154 
	#CAN_F4R2_FB18_Pos
 (18U)

	)

8155 
	#CAN_F4R2_FB18_Msk
 (0x1UL << 
CAN_F4R2_FB18_Pos
Ë

	)

8156 
	#CAN_F4R2_FB18
 
CAN_F4R2_FB18_Msk


	)

8157 
	#CAN_F4R2_FB19_Pos
 (19U)

	)

8158 
	#CAN_F4R2_FB19_Msk
 (0x1UL << 
CAN_F4R2_FB19_Pos
Ë

	)

8159 
	#CAN_F4R2_FB19
 
CAN_F4R2_FB19_Msk


	)

8160 
	#CAN_F4R2_FB20_Pos
 (20U)

	)

8161 
	#CAN_F4R2_FB20_Msk
 (0x1UL << 
CAN_F4R2_FB20_Pos
Ë

	)

8162 
	#CAN_F4R2_FB20
 
CAN_F4R2_FB20_Msk


	)

8163 
	#CAN_F4R2_FB21_Pos
 (21U)

	)

8164 
	#CAN_F4R2_FB21_Msk
 (0x1UL << 
CAN_F4R2_FB21_Pos
Ë

	)

8165 
	#CAN_F4R2_FB21
 
CAN_F4R2_FB21_Msk


	)

8166 
	#CAN_F4R2_FB22_Pos
 (22U)

	)

8167 
	#CAN_F4R2_FB22_Msk
 (0x1UL << 
CAN_F4R2_FB22_Pos
Ë

	)

8168 
	#CAN_F4R2_FB22
 
CAN_F4R2_FB22_Msk


	)

8169 
	#CAN_F4R2_FB23_Pos
 (23U)

	)

8170 
	#CAN_F4R2_FB23_Msk
 (0x1UL << 
CAN_F4R2_FB23_Pos
Ë

	)

8171 
	#CAN_F4R2_FB23
 
CAN_F4R2_FB23_Msk


	)

8172 
	#CAN_F4R2_FB24_Pos
 (24U)

	)

8173 
	#CAN_F4R2_FB24_Msk
 (0x1UL << 
CAN_F4R2_FB24_Pos
Ë

	)

8174 
	#CAN_F4R2_FB24
 
CAN_F4R2_FB24_Msk


	)

8175 
	#CAN_F4R2_FB25_Pos
 (25U)

	)

8176 
	#CAN_F4R2_FB25_Msk
 (0x1UL << 
CAN_F4R2_FB25_Pos
Ë

	)

8177 
	#CAN_F4R2_FB25
 
CAN_F4R2_FB25_Msk


	)

8178 
	#CAN_F4R2_FB26_Pos
 (26U)

	)

8179 
	#CAN_F4R2_FB26_Msk
 (0x1UL << 
CAN_F4R2_FB26_Pos
Ë

	)

8180 
	#CAN_F4R2_FB26
 
CAN_F4R2_FB26_Msk


	)

8181 
	#CAN_F4R2_FB27_Pos
 (27U)

	)

8182 
	#CAN_F4R2_FB27_Msk
 (0x1UL << 
CAN_F4R2_FB27_Pos
Ë

	)

8183 
	#CAN_F4R2_FB27
 
CAN_F4R2_FB27_Msk


	)

8184 
	#CAN_F4R2_FB28_Pos
 (28U)

	)

8185 
	#CAN_F4R2_FB28_Msk
 (0x1UL << 
CAN_F4R2_FB28_Pos
Ë

	)

8186 
	#CAN_F4R2_FB28
 
CAN_F4R2_FB28_Msk


	)

8187 
	#CAN_F4R2_FB29_Pos
 (29U)

	)

8188 
	#CAN_F4R2_FB29_Msk
 (0x1UL << 
CAN_F4R2_FB29_Pos
Ë

	)

8189 
	#CAN_F4R2_FB29
 
CAN_F4R2_FB29_Msk


	)

8190 
	#CAN_F4R2_FB30_Pos
 (30U)

	)

8191 
	#CAN_F4R2_FB30_Msk
 (0x1UL << 
CAN_F4R2_FB30_Pos
Ë

	)

8192 
	#CAN_F4R2_FB30
 
CAN_F4R2_FB30_Msk


	)

8193 
	#CAN_F4R2_FB31_Pos
 (31U)

	)

8194 
	#CAN_F4R2_FB31_Msk
 (0x1UL << 
CAN_F4R2_FB31_Pos
Ë

	)

8195 
	#CAN_F4R2_FB31
 
CAN_F4R2_FB31_Msk


	)

8198 
	#CAN_F5R2_FB0_Pos
 (0U)

	)

8199 
	#CAN_F5R2_FB0_Msk
 (0x1UL << 
CAN_F5R2_FB0_Pos
Ë

	)

8200 
	#CAN_F5R2_FB0
 
CAN_F5R2_FB0_Msk


	)

8201 
	#CAN_F5R2_FB1_Pos
 (1U)

	)

8202 
	#CAN_F5R2_FB1_Msk
 (0x1UL << 
CAN_F5R2_FB1_Pos
Ë

	)

8203 
	#CAN_F5R2_FB1
 
CAN_F5R2_FB1_Msk


	)

8204 
	#CAN_F5R2_FB2_Pos
 (2U)

	)

8205 
	#CAN_F5R2_FB2_Msk
 (0x1UL << 
CAN_F5R2_FB2_Pos
Ë

	)

8206 
	#CAN_F5R2_FB2
 
CAN_F5R2_FB2_Msk


	)

8207 
	#CAN_F5R2_FB3_Pos
 (3U)

	)

8208 
	#CAN_F5R2_FB3_Msk
 (0x1UL << 
CAN_F5R2_FB3_Pos
Ë

	)

8209 
	#CAN_F5R2_FB3
 
CAN_F5R2_FB3_Msk


	)

8210 
	#CAN_F5R2_FB4_Pos
 (4U)

	)

8211 
	#CAN_F5R2_FB4_Msk
 (0x1UL << 
CAN_F5R2_FB4_Pos
Ë

	)

8212 
	#CAN_F5R2_FB4
 
CAN_F5R2_FB4_Msk


	)

8213 
	#CAN_F5R2_FB5_Pos
 (5U)

	)

8214 
	#CAN_F5R2_FB5_Msk
 (0x1UL << 
CAN_F5R2_FB5_Pos
Ë

	)

8215 
	#CAN_F5R2_FB5
 
CAN_F5R2_FB5_Msk


	)

8216 
	#CAN_F5R2_FB6_Pos
 (6U)

	)

8217 
	#CAN_F5R2_FB6_Msk
 (0x1UL << 
CAN_F5R2_FB6_Pos
Ë

	)

8218 
	#CAN_F5R2_FB6
 
CAN_F5R2_FB6_Msk


	)

8219 
	#CAN_F5R2_FB7_Pos
 (7U)

	)

8220 
	#CAN_F5R2_FB7_Msk
 (0x1UL << 
CAN_F5R2_FB7_Pos
Ë

	)

8221 
	#CAN_F5R2_FB7
 
CAN_F5R2_FB7_Msk


	)

8222 
	#CAN_F5R2_FB8_Pos
 (8U)

	)

8223 
	#CAN_F5R2_FB8_Msk
 (0x1UL << 
CAN_F5R2_FB8_Pos
Ë

	)

8224 
	#CAN_F5R2_FB8
 
CAN_F5R2_FB8_Msk


	)

8225 
	#CAN_F5R2_FB9_Pos
 (9U)

	)

8226 
	#CAN_F5R2_FB9_Msk
 (0x1UL << 
CAN_F5R2_FB9_Pos
Ë

	)

8227 
	#CAN_F5R2_FB9
 
CAN_F5R2_FB9_Msk


	)

8228 
	#CAN_F5R2_FB10_Pos
 (10U)

	)

8229 
	#CAN_F5R2_FB10_Msk
 (0x1UL << 
CAN_F5R2_FB10_Pos
Ë

	)

8230 
	#CAN_F5R2_FB10
 
CAN_F5R2_FB10_Msk


	)

8231 
	#CAN_F5R2_FB11_Pos
 (11U)

	)

8232 
	#CAN_F5R2_FB11_Msk
 (0x1UL << 
CAN_F5R2_FB11_Pos
Ë

	)

8233 
	#CAN_F5R2_FB11
 
CAN_F5R2_FB11_Msk


	)

8234 
	#CAN_F5R2_FB12_Pos
 (12U)

	)

8235 
	#CAN_F5R2_FB12_Msk
 (0x1UL << 
CAN_F5R2_FB12_Pos
Ë

	)

8236 
	#CAN_F5R2_FB12
 
CAN_F5R2_FB12_Msk


	)

8237 
	#CAN_F5R2_FB13_Pos
 (13U)

	)

8238 
	#CAN_F5R2_FB13_Msk
 (0x1UL << 
CAN_F5R2_FB13_Pos
Ë

	)

8239 
	#CAN_F5R2_FB13
 
CAN_F5R2_FB13_Msk


	)

8240 
	#CAN_F5R2_FB14_Pos
 (14U)

	)

8241 
	#CAN_F5R2_FB14_Msk
 (0x1UL << 
CAN_F5R2_FB14_Pos
Ë

	)

8242 
	#CAN_F5R2_FB14
 
CAN_F5R2_FB14_Msk


	)

8243 
	#CAN_F5R2_FB15_Pos
 (15U)

	)

8244 
	#CAN_F5R2_FB15_Msk
 (0x1UL << 
CAN_F5R2_FB15_Pos
Ë

	)

8245 
	#CAN_F5R2_FB15
 
CAN_F5R2_FB15_Msk


	)

8246 
	#CAN_F5R2_FB16_Pos
 (16U)

	)

8247 
	#CAN_F5R2_FB16_Msk
 (0x1UL << 
CAN_F5R2_FB16_Pos
Ë

	)

8248 
	#CAN_F5R2_FB16
 
CAN_F5R2_FB16_Msk


	)

8249 
	#CAN_F5R2_FB17_Pos
 (17U)

	)

8250 
	#CAN_F5R2_FB17_Msk
 (0x1UL << 
CAN_F5R2_FB17_Pos
Ë

	)

8251 
	#CAN_F5R2_FB17
 
CAN_F5R2_FB17_Msk


	)

8252 
	#CAN_F5R2_FB18_Pos
 (18U)

	)

8253 
	#CAN_F5R2_FB18_Msk
 (0x1UL << 
CAN_F5R2_FB18_Pos
Ë

	)

8254 
	#CAN_F5R2_FB18
 
CAN_F5R2_FB18_Msk


	)

8255 
	#CAN_F5R2_FB19_Pos
 (19U)

	)

8256 
	#CAN_F5R2_FB19_Msk
 (0x1UL << 
CAN_F5R2_FB19_Pos
Ë

	)

8257 
	#CAN_F5R2_FB19
 
CAN_F5R2_FB19_Msk


	)

8258 
	#CAN_F5R2_FB20_Pos
 (20U)

	)

8259 
	#CAN_F5R2_FB20_Msk
 (0x1UL << 
CAN_F5R2_FB20_Pos
Ë

	)

8260 
	#CAN_F5R2_FB20
 
CAN_F5R2_FB20_Msk


	)

8261 
	#CAN_F5R2_FB21_Pos
 (21U)

	)

8262 
	#CAN_F5R2_FB21_Msk
 (0x1UL << 
CAN_F5R2_FB21_Pos
Ë

	)

8263 
	#CAN_F5R2_FB21
 
CAN_F5R2_FB21_Msk


	)

8264 
	#CAN_F5R2_FB22_Pos
 (22U)

	)

8265 
	#CAN_F5R2_FB22_Msk
 (0x1UL << 
CAN_F5R2_FB22_Pos
Ë

	)

8266 
	#CAN_F5R2_FB22
 
CAN_F5R2_FB22_Msk


	)

8267 
	#CAN_F5R2_FB23_Pos
 (23U)

	)

8268 
	#CAN_F5R2_FB23_Msk
 (0x1UL << 
CAN_F5R2_FB23_Pos
Ë

	)

8269 
	#CAN_F5R2_FB23
 
CAN_F5R2_FB23_Msk


	)

8270 
	#CAN_F5R2_FB24_Pos
 (24U)

	)

8271 
	#CAN_F5R2_FB24_Msk
 (0x1UL << 
CAN_F5R2_FB24_Pos
Ë

	)

8272 
	#CAN_F5R2_FB24
 
CAN_F5R2_FB24_Msk


	)

8273 
	#CAN_F5R2_FB25_Pos
 (25U)

	)

8274 
	#CAN_F5R2_FB25_Msk
 (0x1UL << 
CAN_F5R2_FB25_Pos
Ë

	)

8275 
	#CAN_F5R2_FB25
 
CAN_F5R2_FB25_Msk


	)

8276 
	#CAN_F5R2_FB26_Pos
 (26U)

	)

8277 
	#CAN_F5R2_FB26_Msk
 (0x1UL << 
CAN_F5R2_FB26_Pos
Ë

	)

8278 
	#CAN_F5R2_FB26
 
CAN_F5R2_FB26_Msk


	)

8279 
	#CAN_F5R2_FB27_Pos
 (27U)

	)

8280 
	#CAN_F5R2_FB27_Msk
 (0x1UL << 
CAN_F5R2_FB27_Pos
Ë

	)

8281 
	#CAN_F5R2_FB27
 
CAN_F5R2_FB27_Msk


	)

8282 
	#CAN_F5R2_FB28_Pos
 (28U)

	)

8283 
	#CAN_F5R2_FB28_Msk
 (0x1UL << 
CAN_F5R2_FB28_Pos
Ë

	)

8284 
	#CAN_F5R2_FB28
 
CAN_F5R2_FB28_Msk


	)

8285 
	#CAN_F5R2_FB29_Pos
 (29U)

	)

8286 
	#CAN_F5R2_FB29_Msk
 (0x1UL << 
CAN_F5R2_FB29_Pos
Ë

	)

8287 
	#CAN_F5R2_FB29
 
CAN_F5R2_FB29_Msk


	)

8288 
	#CAN_F5R2_FB30_Pos
 (30U)

	)

8289 
	#CAN_F5R2_FB30_Msk
 (0x1UL << 
CAN_F5R2_FB30_Pos
Ë

	)

8290 
	#CAN_F5R2_FB30
 
CAN_F5R2_FB30_Msk


	)

8291 
	#CAN_F5R2_FB31_Pos
 (31U)

	)

8292 
	#CAN_F5R2_FB31_Msk
 (0x1UL << 
CAN_F5R2_FB31_Pos
Ë

	)

8293 
	#CAN_F5R2_FB31
 
CAN_F5R2_FB31_Msk


	)

8296 
	#CAN_F6R2_FB0_Pos
 (0U)

	)

8297 
	#CAN_F6R2_FB0_Msk
 (0x1UL << 
CAN_F6R2_FB0_Pos
Ë

	)

8298 
	#CAN_F6R2_FB0
 
CAN_F6R2_FB0_Msk


	)

8299 
	#CAN_F6R2_FB1_Pos
 (1U)

	)

8300 
	#CAN_F6R2_FB1_Msk
 (0x1UL << 
CAN_F6R2_FB1_Pos
Ë

	)

8301 
	#CAN_F6R2_FB1
 
CAN_F6R2_FB1_Msk


	)

8302 
	#CAN_F6R2_FB2_Pos
 (2U)

	)

8303 
	#CAN_F6R2_FB2_Msk
 (0x1UL << 
CAN_F6R2_FB2_Pos
Ë

	)

8304 
	#CAN_F6R2_FB2
 
CAN_F6R2_FB2_Msk


	)

8305 
	#CAN_F6R2_FB3_Pos
 (3U)

	)

8306 
	#CAN_F6R2_FB3_Msk
 (0x1UL << 
CAN_F6R2_FB3_Pos
Ë

	)

8307 
	#CAN_F6R2_FB3
 
CAN_F6R2_FB3_Msk


	)

8308 
	#CAN_F6R2_FB4_Pos
 (4U)

	)

8309 
	#CAN_F6R2_FB4_Msk
 (0x1UL << 
CAN_F6R2_FB4_Pos
Ë

	)

8310 
	#CAN_F6R2_FB4
 
CAN_F6R2_FB4_Msk


	)

8311 
	#CAN_F6R2_FB5_Pos
 (5U)

	)

8312 
	#CAN_F6R2_FB5_Msk
 (0x1UL << 
CAN_F6R2_FB5_Pos
Ë

	)

8313 
	#CAN_F6R2_FB5
 
CAN_F6R2_FB5_Msk


	)

8314 
	#CAN_F6R2_FB6_Pos
 (6U)

	)

8315 
	#CAN_F6R2_FB6_Msk
 (0x1UL << 
CAN_F6R2_FB6_Pos
Ë

	)

8316 
	#CAN_F6R2_FB6
 
CAN_F6R2_FB6_Msk


	)

8317 
	#CAN_F6R2_FB7_Pos
 (7U)

	)

8318 
	#CAN_F6R2_FB7_Msk
 (0x1UL << 
CAN_F6R2_FB7_Pos
Ë

	)

8319 
	#CAN_F6R2_FB7
 
CAN_F6R2_FB7_Msk


	)

8320 
	#CAN_F6R2_FB8_Pos
 (8U)

	)

8321 
	#CAN_F6R2_FB8_Msk
 (0x1UL << 
CAN_F6R2_FB8_Pos
Ë

	)

8322 
	#CAN_F6R2_FB8
 
CAN_F6R2_FB8_Msk


	)

8323 
	#CAN_F6R2_FB9_Pos
 (9U)

	)

8324 
	#CAN_F6R2_FB9_Msk
 (0x1UL << 
CAN_F6R2_FB9_Pos
Ë

	)

8325 
	#CAN_F6R2_FB9
 
CAN_F6R2_FB9_Msk


	)

8326 
	#CAN_F6R2_FB10_Pos
 (10U)

	)

8327 
	#CAN_F6R2_FB10_Msk
 (0x1UL << 
CAN_F6R2_FB10_Pos
Ë

	)

8328 
	#CAN_F6R2_FB10
 
CAN_F6R2_FB10_Msk


	)

8329 
	#CAN_F6R2_FB11_Pos
 (11U)

	)

8330 
	#CAN_F6R2_FB11_Msk
 (0x1UL << 
CAN_F6R2_FB11_Pos
Ë

	)

8331 
	#CAN_F6R2_FB11
 
CAN_F6R2_FB11_Msk


	)

8332 
	#CAN_F6R2_FB12_Pos
 (12U)

	)

8333 
	#CAN_F6R2_FB12_Msk
 (0x1UL << 
CAN_F6R2_FB12_Pos
Ë

	)

8334 
	#CAN_F6R2_FB12
 
CAN_F6R2_FB12_Msk


	)

8335 
	#CAN_F6R2_FB13_Pos
 (13U)

	)

8336 
	#CAN_F6R2_FB13_Msk
 (0x1UL << 
CAN_F6R2_FB13_Pos
Ë

	)

8337 
	#CAN_F6R2_FB13
 
CAN_F6R2_FB13_Msk


	)

8338 
	#CAN_F6R2_FB14_Pos
 (14U)

	)

8339 
	#CAN_F6R2_FB14_Msk
 (0x1UL << 
CAN_F6R2_FB14_Pos
Ë

	)

8340 
	#CAN_F6R2_FB14
 
CAN_F6R2_FB14_Msk


	)

8341 
	#CAN_F6R2_FB15_Pos
 (15U)

	)

8342 
	#CAN_F6R2_FB15_Msk
 (0x1UL << 
CAN_F6R2_FB15_Pos
Ë

	)

8343 
	#CAN_F6R2_FB15
 
CAN_F6R2_FB15_Msk


	)

8344 
	#CAN_F6R2_FB16_Pos
 (16U)

	)

8345 
	#CAN_F6R2_FB16_Msk
 (0x1UL << 
CAN_F6R2_FB16_Pos
Ë

	)

8346 
	#CAN_F6R2_FB16
 
CAN_F6R2_FB16_Msk


	)

8347 
	#CAN_F6R2_FB17_Pos
 (17U)

	)

8348 
	#CAN_F6R2_FB17_Msk
 (0x1UL << 
CAN_F6R2_FB17_Pos
Ë

	)

8349 
	#CAN_F6R2_FB17
 
CAN_F6R2_FB17_Msk


	)

8350 
	#CAN_F6R2_FB18_Pos
 (18U)

	)

8351 
	#CAN_F6R2_FB18_Msk
 (0x1UL << 
CAN_F6R2_FB18_Pos
Ë

	)

8352 
	#CAN_F6R2_FB18
 
CAN_F6R2_FB18_Msk


	)

8353 
	#CAN_F6R2_FB19_Pos
 (19U)

	)

8354 
	#CAN_F6R2_FB19_Msk
 (0x1UL << 
CAN_F6R2_FB19_Pos
Ë

	)

8355 
	#CAN_F6R2_FB19
 
CAN_F6R2_FB19_Msk


	)

8356 
	#CAN_F6R2_FB20_Pos
 (20U)

	)

8357 
	#CAN_F6R2_FB20_Msk
 (0x1UL << 
CAN_F6R2_FB20_Pos
Ë

	)

8358 
	#CAN_F6R2_FB20
 
CAN_F6R2_FB20_Msk


	)

8359 
	#CAN_F6R2_FB21_Pos
 (21U)

	)

8360 
	#CAN_F6R2_FB21_Msk
 (0x1UL << 
CAN_F6R2_FB21_Pos
Ë

	)

8361 
	#CAN_F6R2_FB21
 
CAN_F6R2_FB21_Msk


	)

8362 
	#CAN_F6R2_FB22_Pos
 (22U)

	)

8363 
	#CAN_F6R2_FB22_Msk
 (0x1UL << 
CAN_F6R2_FB22_Pos
Ë

	)

8364 
	#CAN_F6R2_FB22
 
CAN_F6R2_FB22_Msk


	)

8365 
	#CAN_F6R2_FB23_Pos
 (23U)

	)

8366 
	#CAN_F6R2_FB23_Msk
 (0x1UL << 
CAN_F6R2_FB23_Pos
Ë

	)

8367 
	#CAN_F6R2_FB23
 
CAN_F6R2_FB23_Msk


	)

8368 
	#CAN_F6R2_FB24_Pos
 (24U)

	)

8369 
	#CAN_F6R2_FB24_Msk
 (0x1UL << 
CAN_F6R2_FB24_Pos
Ë

	)

8370 
	#CAN_F6R2_FB24
 
CAN_F6R2_FB24_Msk


	)

8371 
	#CAN_F6R2_FB25_Pos
 (25U)

	)

8372 
	#CAN_F6R2_FB25_Msk
 (0x1UL << 
CAN_F6R2_FB25_Pos
Ë

	)

8373 
	#CAN_F6R2_FB25
 
CAN_F6R2_FB25_Msk


	)

8374 
	#CAN_F6R2_FB26_Pos
 (26U)

	)

8375 
	#CAN_F6R2_FB26_Msk
 (0x1UL << 
CAN_F6R2_FB26_Pos
Ë

	)

8376 
	#CAN_F6R2_FB26
 
CAN_F6R2_FB26_Msk


	)

8377 
	#CAN_F6R2_FB27_Pos
 (27U)

	)

8378 
	#CAN_F6R2_FB27_Msk
 (0x1UL << 
CAN_F6R2_FB27_Pos
Ë

	)

8379 
	#CAN_F6R2_FB27
 
CAN_F6R2_FB27_Msk


	)

8380 
	#CAN_F6R2_FB28_Pos
 (28U)

	)

8381 
	#CAN_F6R2_FB28_Msk
 (0x1UL << 
CAN_F6R2_FB28_Pos
Ë

	)

8382 
	#CAN_F6R2_FB28
 
CAN_F6R2_FB28_Msk


	)

8383 
	#CAN_F6R2_FB29_Pos
 (29U)

	)

8384 
	#CAN_F6R2_FB29_Msk
 (0x1UL << 
CAN_F6R2_FB29_Pos
Ë

	)

8385 
	#CAN_F6R2_FB29
 
CAN_F6R2_FB29_Msk


	)

8386 
	#CAN_F6R2_FB30_Pos
 (30U)

	)

8387 
	#CAN_F6R2_FB30_Msk
 (0x1UL << 
CAN_F6R2_FB30_Pos
Ë

	)

8388 
	#CAN_F6R2_FB30
 
CAN_F6R2_FB30_Msk


	)

8389 
	#CAN_F6R2_FB31_Pos
 (31U)

	)

8390 
	#CAN_F6R2_FB31_Msk
 (0x1UL << 
CAN_F6R2_FB31_Pos
Ë

	)

8391 
	#CAN_F6R2_FB31
 
CAN_F6R2_FB31_Msk


	)

8394 
	#CAN_F7R2_FB0_Pos
 (0U)

	)

8395 
	#CAN_F7R2_FB0_Msk
 (0x1UL << 
CAN_F7R2_FB0_Pos
Ë

	)

8396 
	#CAN_F7R2_FB0
 
CAN_F7R2_FB0_Msk


	)

8397 
	#CAN_F7R2_FB1_Pos
 (1U)

	)

8398 
	#CAN_F7R2_FB1_Msk
 (0x1UL << 
CAN_F7R2_FB1_Pos
Ë

	)

8399 
	#CAN_F7R2_FB1
 
CAN_F7R2_FB1_Msk


	)

8400 
	#CAN_F7R2_FB2_Pos
 (2U)

	)

8401 
	#CAN_F7R2_FB2_Msk
 (0x1UL << 
CAN_F7R2_FB2_Pos
Ë

	)

8402 
	#CAN_F7R2_FB2
 
CAN_F7R2_FB2_Msk


	)

8403 
	#CAN_F7R2_FB3_Pos
 (3U)

	)

8404 
	#CAN_F7R2_FB3_Msk
 (0x1UL << 
CAN_F7R2_FB3_Pos
Ë

	)

8405 
	#CAN_F7R2_FB3
 
CAN_F7R2_FB3_Msk


	)

8406 
	#CAN_F7R2_FB4_Pos
 (4U)

	)

8407 
	#CAN_F7R2_FB4_Msk
 (0x1UL << 
CAN_F7R2_FB4_Pos
Ë

	)

8408 
	#CAN_F7R2_FB4
 
CAN_F7R2_FB4_Msk


	)

8409 
	#CAN_F7R2_FB5_Pos
 (5U)

	)

8410 
	#CAN_F7R2_FB5_Msk
 (0x1UL << 
CAN_F7R2_FB5_Pos
Ë

	)

8411 
	#CAN_F7R2_FB5
 
CAN_F7R2_FB5_Msk


	)

8412 
	#CAN_F7R2_FB6_Pos
 (6U)

	)

8413 
	#CAN_F7R2_FB6_Msk
 (0x1UL << 
CAN_F7R2_FB6_Pos
Ë

	)

8414 
	#CAN_F7R2_FB6
 
CAN_F7R2_FB6_Msk


	)

8415 
	#CAN_F7R2_FB7_Pos
 (7U)

	)

8416 
	#CAN_F7R2_FB7_Msk
 (0x1UL << 
CAN_F7R2_FB7_Pos
Ë

	)

8417 
	#CAN_F7R2_FB7
 
CAN_F7R2_FB7_Msk


	)

8418 
	#CAN_F7R2_FB8_Pos
 (8U)

	)

8419 
	#CAN_F7R2_FB8_Msk
 (0x1UL << 
CAN_F7R2_FB8_Pos
Ë

	)

8420 
	#CAN_F7R2_FB8
 
CAN_F7R2_FB8_Msk


	)

8421 
	#CAN_F7R2_FB9_Pos
 (9U)

	)

8422 
	#CAN_F7R2_FB9_Msk
 (0x1UL << 
CAN_F7R2_FB9_Pos
Ë

	)

8423 
	#CAN_F7R2_FB9
 
CAN_F7R2_FB9_Msk


	)

8424 
	#CAN_F7R2_FB10_Pos
 (10U)

	)

8425 
	#CAN_F7R2_FB10_Msk
 (0x1UL << 
CAN_F7R2_FB10_Pos
Ë

	)

8426 
	#CAN_F7R2_FB10
 
CAN_F7R2_FB10_Msk


	)

8427 
	#CAN_F7R2_FB11_Pos
 (11U)

	)

8428 
	#CAN_F7R2_FB11_Msk
 (0x1UL << 
CAN_F7R2_FB11_Pos
Ë

	)

8429 
	#CAN_F7R2_FB11
 
CAN_F7R2_FB11_Msk


	)

8430 
	#CAN_F7R2_FB12_Pos
 (12U)

	)

8431 
	#CAN_F7R2_FB12_Msk
 (0x1UL << 
CAN_F7R2_FB12_Pos
Ë

	)

8432 
	#CAN_F7R2_FB12
 
CAN_F7R2_FB12_Msk


	)

8433 
	#CAN_F7R2_FB13_Pos
 (13U)

	)

8434 
	#CAN_F7R2_FB13_Msk
 (0x1UL << 
CAN_F7R2_FB13_Pos
Ë

	)

8435 
	#CAN_F7R2_FB13
 
CAN_F7R2_FB13_Msk


	)

8436 
	#CAN_F7R2_FB14_Pos
 (14U)

	)

8437 
	#CAN_F7R2_FB14_Msk
 (0x1UL << 
CAN_F7R2_FB14_Pos
Ë

	)

8438 
	#CAN_F7R2_FB14
 
CAN_F7R2_FB14_Msk


	)

8439 
	#CAN_F7R2_FB15_Pos
 (15U)

	)

8440 
	#CAN_F7R2_FB15_Msk
 (0x1UL << 
CAN_F7R2_FB15_Pos
Ë

	)

8441 
	#CAN_F7R2_FB15
 
CAN_F7R2_FB15_Msk


	)

8442 
	#CAN_F7R2_FB16_Pos
 (16U)

	)

8443 
	#CAN_F7R2_FB16_Msk
 (0x1UL << 
CAN_F7R2_FB16_Pos
Ë

	)

8444 
	#CAN_F7R2_FB16
 
CAN_F7R2_FB16_Msk


	)

8445 
	#CAN_F7R2_FB17_Pos
 (17U)

	)

8446 
	#CAN_F7R2_FB17_Msk
 (0x1UL << 
CAN_F7R2_FB17_Pos
Ë

	)

8447 
	#CAN_F7R2_FB17
 
CAN_F7R2_FB17_Msk


	)

8448 
	#CAN_F7R2_FB18_Pos
 (18U)

	)

8449 
	#CAN_F7R2_FB18_Msk
 (0x1UL << 
CAN_F7R2_FB18_Pos
Ë

	)

8450 
	#CAN_F7R2_FB18
 
CAN_F7R2_FB18_Msk


	)

8451 
	#CAN_F7R2_FB19_Pos
 (19U)

	)

8452 
	#CAN_F7R2_FB19_Msk
 (0x1UL << 
CAN_F7R2_FB19_Pos
Ë

	)

8453 
	#CAN_F7R2_FB19
 
CAN_F7R2_FB19_Msk


	)

8454 
	#CAN_F7R2_FB20_Pos
 (20U)

	)

8455 
	#CAN_F7R2_FB20_Msk
 (0x1UL << 
CAN_F7R2_FB20_Pos
Ë

	)

8456 
	#CAN_F7R2_FB20
 
CAN_F7R2_FB20_Msk


	)

8457 
	#CAN_F7R2_FB21_Pos
 (21U)

	)

8458 
	#CAN_F7R2_FB21_Msk
 (0x1UL << 
CAN_F7R2_FB21_Pos
Ë

	)

8459 
	#CAN_F7R2_FB21
 
CAN_F7R2_FB21_Msk


	)

8460 
	#CAN_F7R2_FB22_Pos
 (22U)

	)

8461 
	#CAN_F7R2_FB22_Msk
 (0x1UL << 
CAN_F7R2_FB22_Pos
Ë

	)

8462 
	#CAN_F7R2_FB22
 
CAN_F7R2_FB22_Msk


	)

8463 
	#CAN_F7R2_FB23_Pos
 (23U)

	)

8464 
	#CAN_F7R2_FB23_Msk
 (0x1UL << 
CAN_F7R2_FB23_Pos
Ë

	)

8465 
	#CAN_F7R2_FB23
 
CAN_F7R2_FB23_Msk


	)

8466 
	#CAN_F7R2_FB24_Pos
 (24U)

	)

8467 
	#CAN_F7R2_FB24_Msk
 (0x1UL << 
CAN_F7R2_FB24_Pos
Ë

	)

8468 
	#CAN_F7R2_FB24
 
CAN_F7R2_FB24_Msk


	)

8469 
	#CAN_F7R2_FB25_Pos
 (25U)

	)

8470 
	#CAN_F7R2_FB25_Msk
 (0x1UL << 
CAN_F7R2_FB25_Pos
Ë

	)

8471 
	#CAN_F7R2_FB25
 
CAN_F7R2_FB25_Msk


	)

8472 
	#CAN_F7R2_FB26_Pos
 (26U)

	)

8473 
	#CAN_F7R2_FB26_Msk
 (0x1UL << 
CAN_F7R2_FB26_Pos
Ë

	)

8474 
	#CAN_F7R2_FB26
 
CAN_F7R2_FB26_Msk


	)

8475 
	#CAN_F7R2_FB27_Pos
 (27U)

	)

8476 
	#CAN_F7R2_FB27_Msk
 (0x1UL << 
CAN_F7R2_FB27_Pos
Ë

	)

8477 
	#CAN_F7R2_FB27
 
CAN_F7R2_FB27_Msk


	)

8478 
	#CAN_F7R2_FB28_Pos
 (28U)

	)

8479 
	#CAN_F7R2_FB28_Msk
 (0x1UL << 
CAN_F7R2_FB28_Pos
Ë

	)

8480 
	#CAN_F7R2_FB28
 
CAN_F7R2_FB28_Msk


	)

8481 
	#CAN_F7R2_FB29_Pos
 (29U)

	)

8482 
	#CAN_F7R2_FB29_Msk
 (0x1UL << 
CAN_F7R2_FB29_Pos
Ë

	)

8483 
	#CAN_F7R2_FB29
 
CAN_F7R2_FB29_Msk


	)

8484 
	#CAN_F7R2_FB30_Pos
 (30U)

	)

8485 
	#CAN_F7R2_FB30_Msk
 (0x1UL << 
CAN_F7R2_FB30_Pos
Ë

	)

8486 
	#CAN_F7R2_FB30
 
CAN_F7R2_FB30_Msk


	)

8487 
	#CAN_F7R2_FB31_Pos
 (31U)

	)

8488 
	#CAN_F7R2_FB31_Msk
 (0x1UL << 
CAN_F7R2_FB31_Pos
Ë

	)

8489 
	#CAN_F7R2_FB31
 
CAN_F7R2_FB31_Msk


	)

8492 
	#CAN_F8R2_FB0_Pos
 (0U)

	)

8493 
	#CAN_F8R2_FB0_Msk
 (0x1UL << 
CAN_F8R2_FB0_Pos
Ë

	)

8494 
	#CAN_F8R2_FB0
 
CAN_F8R2_FB0_Msk


	)

8495 
	#CAN_F8R2_FB1_Pos
 (1U)

	)

8496 
	#CAN_F8R2_FB1_Msk
 (0x1UL << 
CAN_F8R2_FB1_Pos
Ë

	)

8497 
	#CAN_F8R2_FB1
 
CAN_F8R2_FB1_Msk


	)

8498 
	#CAN_F8R2_FB2_Pos
 (2U)

	)

8499 
	#CAN_F8R2_FB2_Msk
 (0x1UL << 
CAN_F8R2_FB2_Pos
Ë

	)

8500 
	#CAN_F8R2_FB2
 
CAN_F8R2_FB2_Msk


	)

8501 
	#CAN_F8R2_FB3_Pos
 (3U)

	)

8502 
	#CAN_F8R2_FB3_Msk
 (0x1UL << 
CAN_F8R2_FB3_Pos
Ë

	)

8503 
	#CAN_F8R2_FB3
 
CAN_F8R2_FB3_Msk


	)

8504 
	#CAN_F8R2_FB4_Pos
 (4U)

	)

8505 
	#CAN_F8R2_FB4_Msk
 (0x1UL << 
CAN_F8R2_FB4_Pos
Ë

	)

8506 
	#CAN_F8R2_FB4
 
CAN_F8R2_FB4_Msk


	)

8507 
	#CAN_F8R2_FB5_Pos
 (5U)

	)

8508 
	#CAN_F8R2_FB5_Msk
 (0x1UL << 
CAN_F8R2_FB5_Pos
Ë

	)

8509 
	#CAN_F8R2_FB5
 
CAN_F8R2_FB5_Msk


	)

8510 
	#CAN_F8R2_FB6_Pos
 (6U)

	)

8511 
	#CAN_F8R2_FB6_Msk
 (0x1UL << 
CAN_F8R2_FB6_Pos
Ë

	)

8512 
	#CAN_F8R2_FB6
 
CAN_F8R2_FB6_Msk


	)

8513 
	#CAN_F8R2_FB7_Pos
 (7U)

	)

8514 
	#CAN_F8R2_FB7_Msk
 (0x1UL << 
CAN_F8R2_FB7_Pos
Ë

	)

8515 
	#CAN_F8R2_FB7
 
CAN_F8R2_FB7_Msk


	)

8516 
	#CAN_F8R2_FB8_Pos
 (8U)

	)

8517 
	#CAN_F8R2_FB8_Msk
 (0x1UL << 
CAN_F8R2_FB8_Pos
Ë

	)

8518 
	#CAN_F8R2_FB8
 
CAN_F8R2_FB8_Msk


	)

8519 
	#CAN_F8R2_FB9_Pos
 (9U)

	)

8520 
	#CAN_F8R2_FB9_Msk
 (0x1UL << 
CAN_F8R2_FB9_Pos
Ë

	)

8521 
	#CAN_F8R2_FB9
 
CAN_F8R2_FB9_Msk


	)

8522 
	#CAN_F8R2_FB10_Pos
 (10U)

	)

8523 
	#CAN_F8R2_FB10_Msk
 (0x1UL << 
CAN_F8R2_FB10_Pos
Ë

	)

8524 
	#CAN_F8R2_FB10
 
CAN_F8R2_FB10_Msk


	)

8525 
	#CAN_F8R2_FB11_Pos
 (11U)

	)

8526 
	#CAN_F8R2_FB11_Msk
 (0x1UL << 
CAN_F8R2_FB11_Pos
Ë

	)

8527 
	#CAN_F8R2_FB11
 
CAN_F8R2_FB11_Msk


	)

8528 
	#CAN_F8R2_FB12_Pos
 (12U)

	)

8529 
	#CAN_F8R2_FB12_Msk
 (0x1UL << 
CAN_F8R2_FB12_Pos
Ë

	)

8530 
	#CAN_F8R2_FB12
 
CAN_F8R2_FB12_Msk


	)

8531 
	#CAN_F8R2_FB13_Pos
 (13U)

	)

8532 
	#CAN_F8R2_FB13_Msk
 (0x1UL << 
CAN_F8R2_FB13_Pos
Ë

	)

8533 
	#CAN_F8R2_FB13
 
CAN_F8R2_FB13_Msk


	)

8534 
	#CAN_F8R2_FB14_Pos
 (14U)

	)

8535 
	#CAN_F8R2_FB14_Msk
 (0x1UL << 
CAN_F8R2_FB14_Pos
Ë

	)

8536 
	#CAN_F8R2_FB14
 
CAN_F8R2_FB14_Msk


	)

8537 
	#CAN_F8R2_FB15_Pos
 (15U)

	)

8538 
	#CAN_F8R2_FB15_Msk
 (0x1UL << 
CAN_F8R2_FB15_Pos
Ë

	)

8539 
	#CAN_F8R2_FB15
 
CAN_F8R2_FB15_Msk


	)

8540 
	#CAN_F8R2_FB16_Pos
 (16U)

	)

8541 
	#CAN_F8R2_FB16_Msk
 (0x1UL << 
CAN_F8R2_FB16_Pos
Ë

	)

8542 
	#CAN_F8R2_FB16
 
CAN_F8R2_FB16_Msk


	)

8543 
	#CAN_F8R2_FB17_Pos
 (17U)

	)

8544 
	#CAN_F8R2_FB17_Msk
 (0x1UL << 
CAN_F8R2_FB17_Pos
Ë

	)

8545 
	#CAN_F8R2_FB17
 
CAN_F8R2_FB17_Msk


	)

8546 
	#CAN_F8R2_FB18_Pos
 (18U)

	)

8547 
	#CAN_F8R2_FB18_Msk
 (0x1UL << 
CAN_F8R2_FB18_Pos
Ë

	)

8548 
	#CAN_F8R2_FB18
 
CAN_F8R2_FB18_Msk


	)

8549 
	#CAN_F8R2_FB19_Pos
 (19U)

	)

8550 
	#CAN_F8R2_FB19_Msk
 (0x1UL << 
CAN_F8R2_FB19_Pos
Ë

	)

8551 
	#CAN_F8R2_FB19
 
CAN_F8R2_FB19_Msk


	)

8552 
	#CAN_F8R2_FB20_Pos
 (20U)

	)

8553 
	#CAN_F8R2_FB20_Msk
 (0x1UL << 
CAN_F8R2_FB20_Pos
Ë

	)

8554 
	#CAN_F8R2_FB20
 
CAN_F8R2_FB20_Msk


	)

8555 
	#CAN_F8R2_FB21_Pos
 (21U)

	)

8556 
	#CAN_F8R2_FB21_Msk
 (0x1UL << 
CAN_F8R2_FB21_Pos
Ë

	)

8557 
	#CAN_F8R2_FB21
 
CAN_F8R2_FB21_Msk


	)

8558 
	#CAN_F8R2_FB22_Pos
 (22U)

	)

8559 
	#CAN_F8R2_FB22_Msk
 (0x1UL << 
CAN_F8R2_FB22_Pos
Ë

	)

8560 
	#CAN_F8R2_FB22
 
CAN_F8R2_FB22_Msk


	)

8561 
	#CAN_F8R2_FB23_Pos
 (23U)

	)

8562 
	#CAN_F8R2_FB23_Msk
 (0x1UL << 
CAN_F8R2_FB23_Pos
Ë

	)

8563 
	#CAN_F8R2_FB23
 
CAN_F8R2_FB23_Msk


	)

8564 
	#CAN_F8R2_FB24_Pos
 (24U)

	)

8565 
	#CAN_F8R2_FB24_Msk
 (0x1UL << 
CAN_F8R2_FB24_Pos
Ë

	)

8566 
	#CAN_F8R2_FB24
 
CAN_F8R2_FB24_Msk


	)

8567 
	#CAN_F8R2_FB25_Pos
 (25U)

	)

8568 
	#CAN_F8R2_FB25_Msk
 (0x1UL << 
CAN_F8R2_FB25_Pos
Ë

	)

8569 
	#CAN_F8R2_FB25
 
CAN_F8R2_FB25_Msk


	)

8570 
	#CAN_F8R2_FB26_Pos
 (26U)

	)

8571 
	#CAN_F8R2_FB26_Msk
 (0x1UL << 
CAN_F8R2_FB26_Pos
Ë

	)

8572 
	#CAN_F8R2_FB26
 
CAN_F8R2_FB26_Msk


	)

8573 
	#CAN_F8R2_FB27_Pos
 (27U)

	)

8574 
	#CAN_F8R2_FB27_Msk
 (0x1UL << 
CAN_F8R2_FB27_Pos
Ë

	)

8575 
	#CAN_F8R2_FB27
 
CAN_F8R2_FB27_Msk


	)

8576 
	#CAN_F8R2_FB28_Pos
 (28U)

	)

8577 
	#CAN_F8R2_FB28_Msk
 (0x1UL << 
CAN_F8R2_FB28_Pos
Ë

	)

8578 
	#CAN_F8R2_FB28
 
CAN_F8R2_FB28_Msk


	)

8579 
	#CAN_F8R2_FB29_Pos
 (29U)

	)

8580 
	#CAN_F8R2_FB29_Msk
 (0x1UL << 
CAN_F8R2_FB29_Pos
Ë

	)

8581 
	#CAN_F8R2_FB29
 
CAN_F8R2_FB29_Msk


	)

8582 
	#CAN_F8R2_FB30_Pos
 (30U)

	)

8583 
	#CAN_F8R2_FB30_Msk
 (0x1UL << 
CAN_F8R2_FB30_Pos
Ë

	)

8584 
	#CAN_F8R2_FB30
 
CAN_F8R2_FB30_Msk


	)

8585 
	#CAN_F8R2_FB31_Pos
 (31U)

	)

8586 
	#CAN_F8R2_FB31_Msk
 (0x1UL << 
CAN_F8R2_FB31_Pos
Ë

	)

8587 
	#CAN_F8R2_FB31
 
CAN_F8R2_FB31_Msk


	)

8590 
	#CAN_F9R2_FB0_Pos
 (0U)

	)

8591 
	#CAN_F9R2_FB0_Msk
 (0x1UL << 
CAN_F9R2_FB0_Pos
Ë

	)

8592 
	#CAN_F9R2_FB0
 
CAN_F9R2_FB0_Msk


	)

8593 
	#CAN_F9R2_FB1_Pos
 (1U)

	)

8594 
	#CAN_F9R2_FB1_Msk
 (0x1UL << 
CAN_F9R2_FB1_Pos
Ë

	)

8595 
	#CAN_F9R2_FB1
 
CAN_F9R2_FB1_Msk


	)

8596 
	#CAN_F9R2_FB2_Pos
 (2U)

	)

8597 
	#CAN_F9R2_FB2_Msk
 (0x1UL << 
CAN_F9R2_FB2_Pos
Ë

	)

8598 
	#CAN_F9R2_FB2
 
CAN_F9R2_FB2_Msk


	)

8599 
	#CAN_F9R2_FB3_Pos
 (3U)

	)

8600 
	#CAN_F9R2_FB3_Msk
 (0x1UL << 
CAN_F9R2_FB3_Pos
Ë

	)

8601 
	#CAN_F9R2_FB3
 
CAN_F9R2_FB3_Msk


	)

8602 
	#CAN_F9R2_FB4_Pos
 (4U)

	)

8603 
	#CAN_F9R2_FB4_Msk
 (0x1UL << 
CAN_F9R2_FB4_Pos
Ë

	)

8604 
	#CAN_F9R2_FB4
 
CAN_F9R2_FB4_Msk


	)

8605 
	#CAN_F9R2_FB5_Pos
 (5U)

	)

8606 
	#CAN_F9R2_FB5_Msk
 (0x1UL << 
CAN_F9R2_FB5_Pos
Ë

	)

8607 
	#CAN_F9R2_FB5
 
CAN_F9R2_FB5_Msk


	)

8608 
	#CAN_F9R2_FB6_Pos
 (6U)

	)

8609 
	#CAN_F9R2_FB6_Msk
 (0x1UL << 
CAN_F9R2_FB6_Pos
Ë

	)

8610 
	#CAN_F9R2_FB6
 
CAN_F9R2_FB6_Msk


	)

8611 
	#CAN_F9R2_FB7_Pos
 (7U)

	)

8612 
	#CAN_F9R2_FB7_Msk
 (0x1UL << 
CAN_F9R2_FB7_Pos
Ë

	)

8613 
	#CAN_F9R2_FB7
 
CAN_F9R2_FB7_Msk


	)

8614 
	#CAN_F9R2_FB8_Pos
 (8U)

	)

8615 
	#CAN_F9R2_FB8_Msk
 (0x1UL << 
CAN_F9R2_FB8_Pos
Ë

	)

8616 
	#CAN_F9R2_FB8
 
CAN_F9R2_FB8_Msk


	)

8617 
	#CAN_F9R2_FB9_Pos
 (9U)

	)

8618 
	#CAN_F9R2_FB9_Msk
 (0x1UL << 
CAN_F9R2_FB9_Pos
Ë

	)

8619 
	#CAN_F9R2_FB9
 
CAN_F9R2_FB9_Msk


	)

8620 
	#CAN_F9R2_FB10_Pos
 (10U)

	)

8621 
	#CAN_F9R2_FB10_Msk
 (0x1UL << 
CAN_F9R2_FB10_Pos
Ë

	)

8622 
	#CAN_F9R2_FB10
 
CAN_F9R2_FB10_Msk


	)

8623 
	#CAN_F9R2_FB11_Pos
 (11U)

	)

8624 
	#CAN_F9R2_FB11_Msk
 (0x1UL << 
CAN_F9R2_FB11_Pos
Ë

	)

8625 
	#CAN_F9R2_FB11
 
CAN_F9R2_FB11_Msk


	)

8626 
	#CAN_F9R2_FB12_Pos
 (12U)

	)

8627 
	#CAN_F9R2_FB12_Msk
 (0x1UL << 
CAN_F9R2_FB12_Pos
Ë

	)

8628 
	#CAN_F9R2_FB12
 
CAN_F9R2_FB12_Msk


	)

8629 
	#CAN_F9R2_FB13_Pos
 (13U)

	)

8630 
	#CAN_F9R2_FB13_Msk
 (0x1UL << 
CAN_F9R2_FB13_Pos
Ë

	)

8631 
	#CAN_F9R2_FB13
 
CAN_F9R2_FB13_Msk


	)

8632 
	#CAN_F9R2_FB14_Pos
 (14U)

	)

8633 
	#CAN_F9R2_FB14_Msk
 (0x1UL << 
CAN_F9R2_FB14_Pos
Ë

	)

8634 
	#CAN_F9R2_FB14
 
CAN_F9R2_FB14_Msk


	)

8635 
	#CAN_F9R2_FB15_Pos
 (15U)

	)

8636 
	#CAN_F9R2_FB15_Msk
 (0x1UL << 
CAN_F9R2_FB15_Pos
Ë

	)

8637 
	#CAN_F9R2_FB15
 
CAN_F9R2_FB15_Msk


	)

8638 
	#CAN_F9R2_FB16_Pos
 (16U)

	)

8639 
	#CAN_F9R2_FB16_Msk
 (0x1UL << 
CAN_F9R2_FB16_Pos
Ë

	)

8640 
	#CAN_F9R2_FB16
 
CAN_F9R2_FB16_Msk


	)

8641 
	#CAN_F9R2_FB17_Pos
 (17U)

	)

8642 
	#CAN_F9R2_FB17_Msk
 (0x1UL << 
CAN_F9R2_FB17_Pos
Ë

	)

8643 
	#CAN_F9R2_FB17
 
CAN_F9R2_FB17_Msk


	)

8644 
	#CAN_F9R2_FB18_Pos
 (18U)

	)

8645 
	#CAN_F9R2_FB18_Msk
 (0x1UL << 
CAN_F9R2_FB18_Pos
Ë

	)

8646 
	#CAN_F9R2_FB18
 
CAN_F9R2_FB18_Msk


	)

8647 
	#CAN_F9R2_FB19_Pos
 (19U)

	)

8648 
	#CAN_F9R2_FB19_Msk
 (0x1UL << 
CAN_F9R2_FB19_Pos
Ë

	)

8649 
	#CAN_F9R2_FB19
 
CAN_F9R2_FB19_Msk


	)

8650 
	#CAN_F9R2_FB20_Pos
 (20U)

	)

8651 
	#CAN_F9R2_FB20_Msk
 (0x1UL << 
CAN_F9R2_FB20_Pos
Ë

	)

8652 
	#CAN_F9R2_FB20
 
CAN_F9R2_FB20_Msk


	)

8653 
	#CAN_F9R2_FB21_Pos
 (21U)

	)

8654 
	#CAN_F9R2_FB21_Msk
 (0x1UL << 
CAN_F9R2_FB21_Pos
Ë

	)

8655 
	#CAN_F9R2_FB21
 
CAN_F9R2_FB21_Msk


	)

8656 
	#CAN_F9R2_FB22_Pos
 (22U)

	)

8657 
	#CAN_F9R2_FB22_Msk
 (0x1UL << 
CAN_F9R2_FB22_Pos
Ë

	)

8658 
	#CAN_F9R2_FB22
 
CAN_F9R2_FB22_Msk


	)

8659 
	#CAN_F9R2_FB23_Pos
 (23U)

	)

8660 
	#CAN_F9R2_FB23_Msk
 (0x1UL << 
CAN_F9R2_FB23_Pos
Ë

	)

8661 
	#CAN_F9R2_FB23
 
CAN_F9R2_FB23_Msk


	)

8662 
	#CAN_F9R2_FB24_Pos
 (24U)

	)

8663 
	#CAN_F9R2_FB24_Msk
 (0x1UL << 
CAN_F9R2_FB24_Pos
Ë

	)

8664 
	#CAN_F9R2_FB24
 
CAN_F9R2_FB24_Msk


	)

8665 
	#CAN_F9R2_FB25_Pos
 (25U)

	)

8666 
	#CAN_F9R2_FB25_Msk
 (0x1UL << 
CAN_F9R2_FB25_Pos
Ë

	)

8667 
	#CAN_F9R2_FB25
 
CAN_F9R2_FB25_Msk


	)

8668 
	#CAN_F9R2_FB26_Pos
 (26U)

	)

8669 
	#CAN_F9R2_FB26_Msk
 (0x1UL << 
CAN_F9R2_FB26_Pos
Ë

	)

8670 
	#CAN_F9R2_FB26
 
CAN_F9R2_FB26_Msk


	)

8671 
	#CAN_F9R2_FB27_Pos
 (27U)

	)

8672 
	#CAN_F9R2_FB27_Msk
 (0x1UL << 
CAN_F9R2_FB27_Pos
Ë

	)

8673 
	#CAN_F9R2_FB27
 
CAN_F9R2_FB27_Msk


	)

8674 
	#CAN_F9R2_FB28_Pos
 (28U)

	)

8675 
	#CAN_F9R2_FB28_Msk
 (0x1UL << 
CAN_F9R2_FB28_Pos
Ë

	)

8676 
	#CAN_F9R2_FB28
 
CAN_F9R2_FB28_Msk


	)

8677 
	#CAN_F9R2_FB29_Pos
 (29U)

	)

8678 
	#CAN_F9R2_FB29_Msk
 (0x1UL << 
CAN_F9R2_FB29_Pos
Ë

	)

8679 
	#CAN_F9R2_FB29
 
CAN_F9R2_FB29_Msk


	)

8680 
	#CAN_F9R2_FB30_Pos
 (30U)

	)

8681 
	#CAN_F9R2_FB30_Msk
 (0x1UL << 
CAN_F9R2_FB30_Pos
Ë

	)

8682 
	#CAN_F9R2_FB30
 
CAN_F9R2_FB30_Msk


	)

8683 
	#CAN_F9R2_FB31_Pos
 (31U)

	)

8684 
	#CAN_F9R2_FB31_Msk
 (0x1UL << 
CAN_F9R2_FB31_Pos
Ë

	)

8685 
	#CAN_F9R2_FB31
 
CAN_F9R2_FB31_Msk


	)

8688 
	#CAN_F10R2_FB0_Pos
 (0U)

	)

8689 
	#CAN_F10R2_FB0_Msk
 (0x1UL << 
CAN_F10R2_FB0_Pos
Ë

	)

8690 
	#CAN_F10R2_FB0
 
CAN_F10R2_FB0_Msk


	)

8691 
	#CAN_F10R2_FB1_Pos
 (1U)

	)

8692 
	#CAN_F10R2_FB1_Msk
 (0x1UL << 
CAN_F10R2_FB1_Pos
Ë

	)

8693 
	#CAN_F10R2_FB1
 
CAN_F10R2_FB1_Msk


	)

8694 
	#CAN_F10R2_FB2_Pos
 (2U)

	)

8695 
	#CAN_F10R2_FB2_Msk
 (0x1UL << 
CAN_F10R2_FB2_Pos
Ë

	)

8696 
	#CAN_F10R2_FB2
 
CAN_F10R2_FB2_Msk


	)

8697 
	#CAN_F10R2_FB3_Pos
 (3U)

	)

8698 
	#CAN_F10R2_FB3_Msk
 (0x1UL << 
CAN_F10R2_FB3_Pos
Ë

	)

8699 
	#CAN_F10R2_FB3
 
CAN_F10R2_FB3_Msk


	)

8700 
	#CAN_F10R2_FB4_Pos
 (4U)

	)

8701 
	#CAN_F10R2_FB4_Msk
 (0x1UL << 
CAN_F10R2_FB4_Pos
Ë

	)

8702 
	#CAN_F10R2_FB4
 
CAN_F10R2_FB4_Msk


	)

8703 
	#CAN_F10R2_FB5_Pos
 (5U)

	)

8704 
	#CAN_F10R2_FB5_Msk
 (0x1UL << 
CAN_F10R2_FB5_Pos
Ë

	)

8705 
	#CAN_F10R2_FB5
 
CAN_F10R2_FB5_Msk


	)

8706 
	#CAN_F10R2_FB6_Pos
 (6U)

	)

8707 
	#CAN_F10R2_FB6_Msk
 (0x1UL << 
CAN_F10R2_FB6_Pos
Ë

	)

8708 
	#CAN_F10R2_FB6
 
CAN_F10R2_FB6_Msk


	)

8709 
	#CAN_F10R2_FB7_Pos
 (7U)

	)

8710 
	#CAN_F10R2_FB7_Msk
 (0x1UL << 
CAN_F10R2_FB7_Pos
Ë

	)

8711 
	#CAN_F10R2_FB7
 
CAN_F10R2_FB7_Msk


	)

8712 
	#CAN_F10R2_FB8_Pos
 (8U)

	)

8713 
	#CAN_F10R2_FB8_Msk
 (0x1UL << 
CAN_F10R2_FB8_Pos
Ë

	)

8714 
	#CAN_F10R2_FB8
 
CAN_F10R2_FB8_Msk


	)

8715 
	#CAN_F10R2_FB9_Pos
 (9U)

	)

8716 
	#CAN_F10R2_FB9_Msk
 (0x1UL << 
CAN_F10R2_FB9_Pos
Ë

	)

8717 
	#CAN_F10R2_FB9
 
CAN_F10R2_FB9_Msk


	)

8718 
	#CAN_F10R2_FB10_Pos
 (10U)

	)

8719 
	#CAN_F10R2_FB10_Msk
 (0x1UL << 
CAN_F10R2_FB10_Pos
Ë

	)

8720 
	#CAN_F10R2_FB10
 
CAN_F10R2_FB10_Msk


	)

8721 
	#CAN_F10R2_FB11_Pos
 (11U)

	)

8722 
	#CAN_F10R2_FB11_Msk
 (0x1UL << 
CAN_F10R2_FB11_Pos
Ë

	)

8723 
	#CAN_F10R2_FB11
 
CAN_F10R2_FB11_Msk


	)

8724 
	#CAN_F10R2_FB12_Pos
 (12U)

	)

8725 
	#CAN_F10R2_FB12_Msk
 (0x1UL << 
CAN_F10R2_FB12_Pos
Ë

	)

8726 
	#CAN_F10R2_FB12
 
CAN_F10R2_FB12_Msk


	)

8727 
	#CAN_F10R2_FB13_Pos
 (13U)

	)

8728 
	#CAN_F10R2_FB13_Msk
 (0x1UL << 
CAN_F10R2_FB13_Pos
Ë

	)

8729 
	#CAN_F10R2_FB13
 
CAN_F10R2_FB13_Msk


	)

8730 
	#CAN_F10R2_FB14_Pos
 (14U)

	)

8731 
	#CAN_F10R2_FB14_Msk
 (0x1UL << 
CAN_F10R2_FB14_Pos
Ë

	)

8732 
	#CAN_F10R2_FB14
 
CAN_F10R2_FB14_Msk


	)

8733 
	#CAN_F10R2_FB15_Pos
 (15U)

	)

8734 
	#CAN_F10R2_FB15_Msk
 (0x1UL << 
CAN_F10R2_FB15_Pos
Ë

	)

8735 
	#CAN_F10R2_FB15
 
CAN_F10R2_FB15_Msk


	)

8736 
	#CAN_F10R2_FB16_Pos
 (16U)

	)

8737 
	#CAN_F10R2_FB16_Msk
 (0x1UL << 
CAN_F10R2_FB16_Pos
Ë

	)

8738 
	#CAN_F10R2_FB16
 
CAN_F10R2_FB16_Msk


	)

8739 
	#CAN_F10R2_FB17_Pos
 (17U)

	)

8740 
	#CAN_F10R2_FB17_Msk
 (0x1UL << 
CAN_F10R2_FB17_Pos
Ë

	)

8741 
	#CAN_F10R2_FB17
 
CAN_F10R2_FB17_Msk


	)

8742 
	#CAN_F10R2_FB18_Pos
 (18U)

	)

8743 
	#CAN_F10R2_FB18_Msk
 (0x1UL << 
CAN_F10R2_FB18_Pos
Ë

	)

8744 
	#CAN_F10R2_FB18
 
CAN_F10R2_FB18_Msk


	)

8745 
	#CAN_F10R2_FB19_Pos
 (19U)

	)

8746 
	#CAN_F10R2_FB19_Msk
 (0x1UL << 
CAN_F10R2_FB19_Pos
Ë

	)

8747 
	#CAN_F10R2_FB19
 
CAN_F10R2_FB19_Msk


	)

8748 
	#CAN_F10R2_FB20_Pos
 (20U)

	)

8749 
	#CAN_F10R2_FB20_Msk
 (0x1UL << 
CAN_F10R2_FB20_Pos
Ë

	)

8750 
	#CAN_F10R2_FB20
 
CAN_F10R2_FB20_Msk


	)

8751 
	#CAN_F10R2_FB21_Pos
 (21U)

	)

8752 
	#CAN_F10R2_FB21_Msk
 (0x1UL << 
CAN_F10R2_FB21_Pos
Ë

	)

8753 
	#CAN_F10R2_FB21
 
CAN_F10R2_FB21_Msk


	)

8754 
	#CAN_F10R2_FB22_Pos
 (22U)

	)

8755 
	#CAN_F10R2_FB22_Msk
 (0x1UL << 
CAN_F10R2_FB22_Pos
Ë

	)

8756 
	#CAN_F10R2_FB22
 
CAN_F10R2_FB22_Msk


	)

8757 
	#CAN_F10R2_FB23_Pos
 (23U)

	)

8758 
	#CAN_F10R2_FB23_Msk
 (0x1UL << 
CAN_F10R2_FB23_Pos
Ë

	)

8759 
	#CAN_F10R2_FB23
 
CAN_F10R2_FB23_Msk


	)

8760 
	#CAN_F10R2_FB24_Pos
 (24U)

	)

8761 
	#CAN_F10R2_FB24_Msk
 (0x1UL << 
CAN_F10R2_FB24_Pos
Ë

	)

8762 
	#CAN_F10R2_FB24
 
CAN_F10R2_FB24_Msk


	)

8763 
	#CAN_F10R2_FB25_Pos
 (25U)

	)

8764 
	#CAN_F10R2_FB25_Msk
 (0x1UL << 
CAN_F10R2_FB25_Pos
Ë

	)

8765 
	#CAN_F10R2_FB25
 
CAN_F10R2_FB25_Msk


	)

8766 
	#CAN_F10R2_FB26_Pos
 (26U)

	)

8767 
	#CAN_F10R2_FB26_Msk
 (0x1UL << 
CAN_F10R2_FB26_Pos
Ë

	)

8768 
	#CAN_F10R2_FB26
 
CAN_F10R2_FB26_Msk


	)

8769 
	#CAN_F10R2_FB27_Pos
 (27U)

	)

8770 
	#CAN_F10R2_FB27_Msk
 (0x1UL << 
CAN_F10R2_FB27_Pos
Ë

	)

8771 
	#CAN_F10R2_FB27
 
CAN_F10R2_FB27_Msk


	)

8772 
	#CAN_F10R2_FB28_Pos
 (28U)

	)

8773 
	#CAN_F10R2_FB28_Msk
 (0x1UL << 
CAN_F10R2_FB28_Pos
Ë

	)

8774 
	#CAN_F10R2_FB28
 
CAN_F10R2_FB28_Msk


	)

8775 
	#CAN_F10R2_FB29_Pos
 (29U)

	)

8776 
	#CAN_F10R2_FB29_Msk
 (0x1UL << 
CAN_F10R2_FB29_Pos
Ë

	)

8777 
	#CAN_F10R2_FB29
 
CAN_F10R2_FB29_Msk


	)

8778 
	#CAN_F10R2_FB30_Pos
 (30U)

	)

8779 
	#CAN_F10R2_FB30_Msk
 (0x1UL << 
CAN_F10R2_FB30_Pos
Ë

	)

8780 
	#CAN_F10R2_FB30
 
CAN_F10R2_FB30_Msk


	)

8781 
	#CAN_F10R2_FB31_Pos
 (31U)

	)

8782 
	#CAN_F10R2_FB31_Msk
 (0x1UL << 
CAN_F10R2_FB31_Pos
Ë

	)

8783 
	#CAN_F10R2_FB31
 
CAN_F10R2_FB31_Msk


	)

8786 
	#CAN_F11R2_FB0_Pos
 (0U)

	)

8787 
	#CAN_F11R2_FB0_Msk
 (0x1UL << 
CAN_F11R2_FB0_Pos
Ë

	)

8788 
	#CAN_F11R2_FB0
 
CAN_F11R2_FB0_Msk


	)

8789 
	#CAN_F11R2_FB1_Pos
 (1U)

	)

8790 
	#CAN_F11R2_FB1_Msk
 (0x1UL << 
CAN_F11R2_FB1_Pos
Ë

	)

8791 
	#CAN_F11R2_FB1
 
CAN_F11R2_FB1_Msk


	)

8792 
	#CAN_F11R2_FB2_Pos
 (2U)

	)

8793 
	#CAN_F11R2_FB2_Msk
 (0x1UL << 
CAN_F11R2_FB2_Pos
Ë

	)

8794 
	#CAN_F11R2_FB2
 
CAN_F11R2_FB2_Msk


	)

8795 
	#CAN_F11R2_FB3_Pos
 (3U)

	)

8796 
	#CAN_F11R2_FB3_Msk
 (0x1UL << 
CAN_F11R2_FB3_Pos
Ë

	)

8797 
	#CAN_F11R2_FB3
 
CAN_F11R2_FB3_Msk


	)

8798 
	#CAN_F11R2_FB4_Pos
 (4U)

	)

8799 
	#CAN_F11R2_FB4_Msk
 (0x1UL << 
CAN_F11R2_FB4_Pos
Ë

	)

8800 
	#CAN_F11R2_FB4
 
CAN_F11R2_FB4_Msk


	)

8801 
	#CAN_F11R2_FB5_Pos
 (5U)

	)

8802 
	#CAN_F11R2_FB5_Msk
 (0x1UL << 
CAN_F11R2_FB5_Pos
Ë

	)

8803 
	#CAN_F11R2_FB5
 
CAN_F11R2_FB5_Msk


	)

8804 
	#CAN_F11R2_FB6_Pos
 (6U)

	)

8805 
	#CAN_F11R2_FB6_Msk
 (0x1UL << 
CAN_F11R2_FB6_Pos
Ë

	)

8806 
	#CAN_F11R2_FB6
 
CAN_F11R2_FB6_Msk


	)

8807 
	#CAN_F11R2_FB7_Pos
 (7U)

	)

8808 
	#CAN_F11R2_FB7_Msk
 (0x1UL << 
CAN_F11R2_FB7_Pos
Ë

	)

8809 
	#CAN_F11R2_FB7
 
CAN_F11R2_FB7_Msk


	)

8810 
	#CAN_F11R2_FB8_Pos
 (8U)

	)

8811 
	#CAN_F11R2_FB8_Msk
 (0x1UL << 
CAN_F11R2_FB8_Pos
Ë

	)

8812 
	#CAN_F11R2_FB8
 
CAN_F11R2_FB8_Msk


	)

8813 
	#CAN_F11R2_FB9_Pos
 (9U)

	)

8814 
	#CAN_F11R2_FB9_Msk
 (0x1UL << 
CAN_F11R2_FB9_Pos
Ë

	)

8815 
	#CAN_F11R2_FB9
 
CAN_F11R2_FB9_Msk


	)

8816 
	#CAN_F11R2_FB10_Pos
 (10U)

	)

8817 
	#CAN_F11R2_FB10_Msk
 (0x1UL << 
CAN_F11R2_FB10_Pos
Ë

	)

8818 
	#CAN_F11R2_FB10
 
CAN_F11R2_FB10_Msk


	)

8819 
	#CAN_F11R2_FB11_Pos
 (11U)

	)

8820 
	#CAN_F11R2_FB11_Msk
 (0x1UL << 
CAN_F11R2_FB11_Pos
Ë

	)

8821 
	#CAN_F11R2_FB11
 
CAN_F11R2_FB11_Msk


	)

8822 
	#CAN_F11R2_FB12_Pos
 (12U)

	)

8823 
	#CAN_F11R2_FB12_Msk
 (0x1UL << 
CAN_F11R2_FB12_Pos
Ë

	)

8824 
	#CAN_F11R2_FB12
 
CAN_F11R2_FB12_Msk


	)

8825 
	#CAN_F11R2_FB13_Pos
 (13U)

	)

8826 
	#CAN_F11R2_FB13_Msk
 (0x1UL << 
CAN_F11R2_FB13_Pos
Ë

	)

8827 
	#CAN_F11R2_FB13
 
CAN_F11R2_FB13_Msk


	)

8828 
	#CAN_F11R2_FB14_Pos
 (14U)

	)

8829 
	#CAN_F11R2_FB14_Msk
 (0x1UL << 
CAN_F11R2_FB14_Pos
Ë

	)

8830 
	#CAN_F11R2_FB14
 
CAN_F11R2_FB14_Msk


	)

8831 
	#CAN_F11R2_FB15_Pos
 (15U)

	)

8832 
	#CAN_F11R2_FB15_Msk
 (0x1UL << 
CAN_F11R2_FB15_Pos
Ë

	)

8833 
	#CAN_F11R2_FB15
 
CAN_F11R2_FB15_Msk


	)

8834 
	#CAN_F11R2_FB16_Pos
 (16U)

	)

8835 
	#CAN_F11R2_FB16_Msk
 (0x1UL << 
CAN_F11R2_FB16_Pos
Ë

	)

8836 
	#CAN_F11R2_FB16
 
CAN_F11R2_FB16_Msk


	)

8837 
	#CAN_F11R2_FB17_Pos
 (17U)

	)

8838 
	#CAN_F11R2_FB17_Msk
 (0x1UL << 
CAN_F11R2_FB17_Pos
Ë

	)

8839 
	#CAN_F11R2_FB17
 
CAN_F11R2_FB17_Msk


	)

8840 
	#CAN_F11R2_FB18_Pos
 (18U)

	)

8841 
	#CAN_F11R2_FB18_Msk
 (0x1UL << 
CAN_F11R2_FB18_Pos
Ë

	)

8842 
	#CAN_F11R2_FB18
 
CAN_F11R2_FB18_Msk


	)

8843 
	#CAN_F11R2_FB19_Pos
 (19U)

	)

8844 
	#CAN_F11R2_FB19_Msk
 (0x1UL << 
CAN_F11R2_FB19_Pos
Ë

	)

8845 
	#CAN_F11R2_FB19
 
CAN_F11R2_FB19_Msk


	)

8846 
	#CAN_F11R2_FB20_Pos
 (20U)

	)

8847 
	#CAN_F11R2_FB20_Msk
 (0x1UL << 
CAN_F11R2_FB20_Pos
Ë

	)

8848 
	#CAN_F11R2_FB20
 
CAN_F11R2_FB20_Msk


	)

8849 
	#CAN_F11R2_FB21_Pos
 (21U)

	)

8850 
	#CAN_F11R2_FB21_Msk
 (0x1UL << 
CAN_F11R2_FB21_Pos
Ë

	)

8851 
	#CAN_F11R2_FB21
 
CAN_F11R2_FB21_Msk


	)

8852 
	#CAN_F11R2_FB22_Pos
 (22U)

	)

8853 
	#CAN_F11R2_FB22_Msk
 (0x1UL << 
CAN_F11R2_FB22_Pos
Ë

	)

8854 
	#CAN_F11R2_FB22
 
CAN_F11R2_FB22_Msk


	)

8855 
	#CAN_F11R2_FB23_Pos
 (23U)

	)

8856 
	#CAN_F11R2_FB23_Msk
 (0x1UL << 
CAN_F11R2_FB23_Pos
Ë

	)

8857 
	#CAN_F11R2_FB23
 
CAN_F11R2_FB23_Msk


	)

8858 
	#CAN_F11R2_FB24_Pos
 (24U)

	)

8859 
	#CAN_F11R2_FB24_Msk
 (0x1UL << 
CAN_F11R2_FB24_Pos
Ë

	)

8860 
	#CAN_F11R2_FB24
 
CAN_F11R2_FB24_Msk


	)

8861 
	#CAN_F11R2_FB25_Pos
 (25U)

	)

8862 
	#CAN_F11R2_FB25_Msk
 (0x1UL << 
CAN_F11R2_FB25_Pos
Ë

	)

8863 
	#CAN_F11R2_FB25
 
CAN_F11R2_FB25_Msk


	)

8864 
	#CAN_F11R2_FB26_Pos
 (26U)

	)

8865 
	#CAN_F11R2_FB26_Msk
 (0x1UL << 
CAN_F11R2_FB26_Pos
Ë

	)

8866 
	#CAN_F11R2_FB26
 
CAN_F11R2_FB26_Msk


	)

8867 
	#CAN_F11R2_FB27_Pos
 (27U)

	)

8868 
	#CAN_F11R2_FB27_Msk
 (0x1UL << 
CAN_F11R2_FB27_Pos
Ë

	)

8869 
	#CAN_F11R2_FB27
 
CAN_F11R2_FB27_Msk


	)

8870 
	#CAN_F11R2_FB28_Pos
 (28U)

	)

8871 
	#CAN_F11R2_FB28_Msk
 (0x1UL << 
CAN_F11R2_FB28_Pos
Ë

	)

8872 
	#CAN_F11R2_FB28
 
CAN_F11R2_FB28_Msk


	)

8873 
	#CAN_F11R2_FB29_Pos
 (29U)

	)

8874 
	#CAN_F11R2_FB29_Msk
 (0x1UL << 
CAN_F11R2_FB29_Pos
Ë

	)

8875 
	#CAN_F11R2_FB29
 
CAN_F11R2_FB29_Msk


	)

8876 
	#CAN_F11R2_FB30_Pos
 (30U)

	)

8877 
	#CAN_F11R2_FB30_Msk
 (0x1UL << 
CAN_F11R2_FB30_Pos
Ë

	)

8878 
	#CAN_F11R2_FB30
 
CAN_F11R2_FB30_Msk


	)

8879 
	#CAN_F11R2_FB31_Pos
 (31U)

	)

8880 
	#CAN_F11R2_FB31_Msk
 (0x1UL << 
CAN_F11R2_FB31_Pos
Ë

	)

8881 
	#CAN_F11R2_FB31
 
CAN_F11R2_FB31_Msk


	)

8884 
	#CAN_F12R2_FB0_Pos
 (0U)

	)

8885 
	#CAN_F12R2_FB0_Msk
 (0x1UL << 
CAN_F12R2_FB0_Pos
Ë

	)

8886 
	#CAN_F12R2_FB0
 
CAN_F12R2_FB0_Msk


	)

8887 
	#CAN_F12R2_FB1_Pos
 (1U)

	)

8888 
	#CAN_F12R2_FB1_Msk
 (0x1UL << 
CAN_F12R2_FB1_Pos
Ë

	)

8889 
	#CAN_F12R2_FB1
 
CAN_F12R2_FB1_Msk


	)

8890 
	#CAN_F12R2_FB2_Pos
 (2U)

	)

8891 
	#CAN_F12R2_FB2_Msk
 (0x1UL << 
CAN_F12R2_FB2_Pos
Ë

	)

8892 
	#CAN_F12R2_FB2
 
CAN_F12R2_FB2_Msk


	)

8893 
	#CAN_F12R2_FB3_Pos
 (3U)

	)

8894 
	#CAN_F12R2_FB3_Msk
 (0x1UL << 
CAN_F12R2_FB3_Pos
Ë

	)

8895 
	#CAN_F12R2_FB3
 
CAN_F12R2_FB3_Msk


	)

8896 
	#CAN_F12R2_FB4_Pos
 (4U)

	)

8897 
	#CAN_F12R2_FB4_Msk
 (0x1UL << 
CAN_F12R2_FB4_Pos
Ë

	)

8898 
	#CAN_F12R2_FB4
 
CAN_F12R2_FB4_Msk


	)

8899 
	#CAN_F12R2_FB5_Pos
 (5U)

	)

8900 
	#CAN_F12R2_FB5_Msk
 (0x1UL << 
CAN_F12R2_FB5_Pos
Ë

	)

8901 
	#CAN_F12R2_FB5
 
CAN_F12R2_FB5_Msk


	)

8902 
	#CAN_F12R2_FB6_Pos
 (6U)

	)

8903 
	#CAN_F12R2_FB6_Msk
 (0x1UL << 
CAN_F12R2_FB6_Pos
Ë

	)

8904 
	#CAN_F12R2_FB6
 
CAN_F12R2_FB6_Msk


	)

8905 
	#CAN_F12R2_FB7_Pos
 (7U)

	)

8906 
	#CAN_F12R2_FB7_Msk
 (0x1UL << 
CAN_F12R2_FB7_Pos
Ë

	)

8907 
	#CAN_F12R2_FB7
 
CAN_F12R2_FB7_Msk


	)

8908 
	#CAN_F12R2_FB8_Pos
 (8U)

	)

8909 
	#CAN_F12R2_FB8_Msk
 (0x1UL << 
CAN_F12R2_FB8_Pos
Ë

	)

8910 
	#CAN_F12R2_FB8
 
CAN_F12R2_FB8_Msk


	)

8911 
	#CAN_F12R2_FB9_Pos
 (9U)

	)

8912 
	#CAN_F12R2_FB9_Msk
 (0x1UL << 
CAN_F12R2_FB9_Pos
Ë

	)

8913 
	#CAN_F12R2_FB9
 
CAN_F12R2_FB9_Msk


	)

8914 
	#CAN_F12R2_FB10_Pos
 (10U)

	)

8915 
	#CAN_F12R2_FB10_Msk
 (0x1UL << 
CAN_F12R2_FB10_Pos
Ë

	)

8916 
	#CAN_F12R2_FB10
 
CAN_F12R2_FB10_Msk


	)

8917 
	#CAN_F12R2_FB11_Pos
 (11U)

	)

8918 
	#CAN_F12R2_FB11_Msk
 (0x1UL << 
CAN_F12R2_FB11_Pos
Ë

	)

8919 
	#CAN_F12R2_FB11
 
CAN_F12R2_FB11_Msk


	)

8920 
	#CAN_F12R2_FB12_Pos
 (12U)

	)

8921 
	#CAN_F12R2_FB12_Msk
 (0x1UL << 
CAN_F12R2_FB12_Pos
Ë

	)

8922 
	#CAN_F12R2_FB12
 
CAN_F12R2_FB12_Msk


	)

8923 
	#CAN_F12R2_FB13_Pos
 (13U)

	)

8924 
	#CAN_F12R2_FB13_Msk
 (0x1UL << 
CAN_F12R2_FB13_Pos
Ë

	)

8925 
	#CAN_F12R2_FB13
 
CAN_F12R2_FB13_Msk


	)

8926 
	#CAN_F12R2_FB14_Pos
 (14U)

	)

8927 
	#CAN_F12R2_FB14_Msk
 (0x1UL << 
CAN_F12R2_FB14_Pos
Ë

	)

8928 
	#CAN_F12R2_FB14
 
CAN_F12R2_FB14_Msk


	)

8929 
	#CAN_F12R2_FB15_Pos
 (15U)

	)

8930 
	#CAN_F12R2_FB15_Msk
 (0x1UL << 
CAN_F12R2_FB15_Pos
Ë

	)

8931 
	#CAN_F12R2_FB15
 
CAN_F12R2_FB15_Msk


	)

8932 
	#CAN_F12R2_FB16_Pos
 (16U)

	)

8933 
	#CAN_F12R2_FB16_Msk
 (0x1UL << 
CAN_F12R2_FB16_Pos
Ë

	)

8934 
	#CAN_F12R2_FB16
 
CAN_F12R2_FB16_Msk


	)

8935 
	#CAN_F12R2_FB17_Pos
 (17U)

	)

8936 
	#CAN_F12R2_FB17_Msk
 (0x1UL << 
CAN_F12R2_FB17_Pos
Ë

	)

8937 
	#CAN_F12R2_FB17
 
CAN_F12R2_FB17_Msk


	)

8938 
	#CAN_F12R2_FB18_Pos
 (18U)

	)

8939 
	#CAN_F12R2_FB18_Msk
 (0x1UL << 
CAN_F12R2_FB18_Pos
Ë

	)

8940 
	#CAN_F12R2_FB18
 
CAN_F12R2_FB18_Msk


	)

8941 
	#CAN_F12R2_FB19_Pos
 (19U)

	)

8942 
	#CAN_F12R2_FB19_Msk
 (0x1UL << 
CAN_F12R2_FB19_Pos
Ë

	)

8943 
	#CAN_F12R2_FB19
 
CAN_F12R2_FB19_Msk


	)

8944 
	#CAN_F12R2_FB20_Pos
 (20U)

	)

8945 
	#CAN_F12R2_FB20_Msk
 (0x1UL << 
CAN_F12R2_FB20_Pos
Ë

	)

8946 
	#CAN_F12R2_FB20
 
CAN_F12R2_FB20_Msk


	)

8947 
	#CAN_F12R2_FB21_Pos
 (21U)

	)

8948 
	#CAN_F12R2_FB21_Msk
 (0x1UL << 
CAN_F12R2_FB21_Pos
Ë

	)

8949 
	#CAN_F12R2_FB21
 
CAN_F12R2_FB21_Msk


	)

8950 
	#CAN_F12R2_FB22_Pos
 (22U)

	)

8951 
	#CAN_F12R2_FB22_Msk
 (0x1UL << 
CAN_F12R2_FB22_Pos
Ë

	)

8952 
	#CAN_F12R2_FB22
 
CAN_F12R2_FB22_Msk


	)

8953 
	#CAN_F12R2_FB23_Pos
 (23U)

	)

8954 
	#CAN_F12R2_FB23_Msk
 (0x1UL << 
CAN_F12R2_FB23_Pos
Ë

	)

8955 
	#CAN_F12R2_FB23
 
CAN_F12R2_FB23_Msk


	)

8956 
	#CAN_F12R2_FB24_Pos
 (24U)

	)

8957 
	#CAN_F12R2_FB24_Msk
 (0x1UL << 
CAN_F12R2_FB24_Pos
Ë

	)

8958 
	#CAN_F12R2_FB24
 
CAN_F12R2_FB24_Msk


	)

8959 
	#CAN_F12R2_FB25_Pos
 (25U)

	)

8960 
	#CAN_F12R2_FB25_Msk
 (0x1UL << 
CAN_F12R2_FB25_Pos
Ë

	)

8961 
	#CAN_F12R2_FB25
 
CAN_F12R2_FB25_Msk


	)

8962 
	#CAN_F12R2_FB26_Pos
 (26U)

	)

8963 
	#CAN_F12R2_FB26_Msk
 (0x1UL << 
CAN_F12R2_FB26_Pos
Ë

	)

8964 
	#CAN_F12R2_FB26
 
CAN_F12R2_FB26_Msk


	)

8965 
	#CAN_F12R2_FB27_Pos
 (27U)

	)

8966 
	#CAN_F12R2_FB27_Msk
 (0x1UL << 
CAN_F12R2_FB27_Pos
Ë

	)

8967 
	#CAN_F12R2_FB27
 
CAN_F12R2_FB27_Msk


	)

8968 
	#CAN_F12R2_FB28_Pos
 (28U)

	)

8969 
	#CAN_F12R2_FB28_Msk
 (0x1UL << 
CAN_F12R2_FB28_Pos
Ë

	)

8970 
	#CAN_F12R2_FB28
 
CAN_F12R2_FB28_Msk


	)

8971 
	#CAN_F12R2_FB29_Pos
 (29U)

	)

8972 
	#CAN_F12R2_FB29_Msk
 (0x1UL << 
CAN_F12R2_FB29_Pos
Ë

	)

8973 
	#CAN_F12R2_FB29
 
CAN_F12R2_FB29_Msk


	)

8974 
	#CAN_F12R2_FB30_Pos
 (30U)

	)

8975 
	#CAN_F12R2_FB30_Msk
 (0x1UL << 
CAN_F12R2_FB30_Pos
Ë

	)

8976 
	#CAN_F12R2_FB30
 
CAN_F12R2_FB30_Msk


	)

8977 
	#CAN_F12R2_FB31_Pos
 (31U)

	)

8978 
	#CAN_F12R2_FB31_Msk
 (0x1UL << 
CAN_F12R2_FB31_Pos
Ë

	)

8979 
	#CAN_F12R2_FB31
 
CAN_F12R2_FB31_Msk


	)

8982 
	#CAN_F13R2_FB0_Pos
 (0U)

	)

8983 
	#CAN_F13R2_FB0_Msk
 (0x1UL << 
CAN_F13R2_FB0_Pos
Ë

	)

8984 
	#CAN_F13R2_FB0
 
CAN_F13R2_FB0_Msk


	)

8985 
	#CAN_F13R2_FB1_Pos
 (1U)

	)

8986 
	#CAN_F13R2_FB1_Msk
 (0x1UL << 
CAN_F13R2_FB1_Pos
Ë

	)

8987 
	#CAN_F13R2_FB1
 
CAN_F13R2_FB1_Msk


	)

8988 
	#CAN_F13R2_FB2_Pos
 (2U)

	)

8989 
	#CAN_F13R2_FB2_Msk
 (0x1UL << 
CAN_F13R2_FB2_Pos
Ë

	)

8990 
	#CAN_F13R2_FB2
 
CAN_F13R2_FB2_Msk


	)

8991 
	#CAN_F13R2_FB3_Pos
 (3U)

	)

8992 
	#CAN_F13R2_FB3_Msk
 (0x1UL << 
CAN_F13R2_FB3_Pos
Ë

	)

8993 
	#CAN_F13R2_FB3
 
CAN_F13R2_FB3_Msk


	)

8994 
	#CAN_F13R2_FB4_Pos
 (4U)

	)

8995 
	#CAN_F13R2_FB4_Msk
 (0x1UL << 
CAN_F13R2_FB4_Pos
Ë

	)

8996 
	#CAN_F13R2_FB4
 
CAN_F13R2_FB4_Msk


	)

8997 
	#CAN_F13R2_FB5_Pos
 (5U)

	)

8998 
	#CAN_F13R2_FB5_Msk
 (0x1UL << 
CAN_F13R2_FB5_Pos
Ë

	)

8999 
	#CAN_F13R2_FB5
 
CAN_F13R2_FB5_Msk


	)

9000 
	#CAN_F13R2_FB6_Pos
 (6U)

	)

9001 
	#CAN_F13R2_FB6_Msk
 (0x1UL << 
CAN_F13R2_FB6_Pos
Ë

	)

9002 
	#CAN_F13R2_FB6
 
CAN_F13R2_FB6_Msk


	)

9003 
	#CAN_F13R2_FB7_Pos
 (7U)

	)

9004 
	#CAN_F13R2_FB7_Msk
 (0x1UL << 
CAN_F13R2_FB7_Pos
Ë

	)

9005 
	#CAN_F13R2_FB7
 
CAN_F13R2_FB7_Msk


	)

9006 
	#CAN_F13R2_FB8_Pos
 (8U)

	)

9007 
	#CAN_F13R2_FB8_Msk
 (0x1UL << 
CAN_F13R2_FB8_Pos
Ë

	)

9008 
	#CAN_F13R2_FB8
 
CAN_F13R2_FB8_Msk


	)

9009 
	#CAN_F13R2_FB9_Pos
 (9U)

	)

9010 
	#CAN_F13R2_FB9_Msk
 (0x1UL << 
CAN_F13R2_FB9_Pos
Ë

	)

9011 
	#CAN_F13R2_FB9
 
CAN_F13R2_FB9_Msk


	)

9012 
	#CAN_F13R2_FB10_Pos
 (10U)

	)

9013 
	#CAN_F13R2_FB10_Msk
 (0x1UL << 
CAN_F13R2_FB10_Pos
Ë

	)

9014 
	#CAN_F13R2_FB10
 
CAN_F13R2_FB10_Msk


	)

9015 
	#CAN_F13R2_FB11_Pos
 (11U)

	)

9016 
	#CAN_F13R2_FB11_Msk
 (0x1UL << 
CAN_F13R2_FB11_Pos
Ë

	)

9017 
	#CAN_F13R2_FB11
 
CAN_F13R2_FB11_Msk


	)

9018 
	#CAN_F13R2_FB12_Pos
 (12U)

	)

9019 
	#CAN_F13R2_FB12_Msk
 (0x1UL << 
CAN_F13R2_FB12_Pos
Ë

	)

9020 
	#CAN_F13R2_FB12
 
CAN_F13R2_FB12_Msk


	)

9021 
	#CAN_F13R2_FB13_Pos
 (13U)

	)

9022 
	#CAN_F13R2_FB13_Msk
 (0x1UL << 
CAN_F13R2_FB13_Pos
Ë

	)

9023 
	#CAN_F13R2_FB13
 
CAN_F13R2_FB13_Msk


	)

9024 
	#CAN_F13R2_FB14_Pos
 (14U)

	)

9025 
	#CAN_F13R2_FB14_Msk
 (0x1UL << 
CAN_F13R2_FB14_Pos
Ë

	)

9026 
	#CAN_F13R2_FB14
 
CAN_F13R2_FB14_Msk


	)

9027 
	#CAN_F13R2_FB15_Pos
 (15U)

	)

9028 
	#CAN_F13R2_FB15_Msk
 (0x1UL << 
CAN_F13R2_FB15_Pos
Ë

	)

9029 
	#CAN_F13R2_FB15
 
CAN_F13R2_FB15_Msk


	)

9030 
	#CAN_F13R2_FB16_Pos
 (16U)

	)

9031 
	#CAN_F13R2_FB16_Msk
 (0x1UL << 
CAN_F13R2_FB16_Pos
Ë

	)

9032 
	#CAN_F13R2_FB16
 
CAN_F13R2_FB16_Msk


	)

9033 
	#CAN_F13R2_FB17_Pos
 (17U)

	)

9034 
	#CAN_F13R2_FB17_Msk
 (0x1UL << 
CAN_F13R2_FB17_Pos
Ë

	)

9035 
	#CAN_F13R2_FB17
 
CAN_F13R2_FB17_Msk


	)

9036 
	#CAN_F13R2_FB18_Pos
 (18U)

	)

9037 
	#CAN_F13R2_FB18_Msk
 (0x1UL << 
CAN_F13R2_FB18_Pos
Ë

	)

9038 
	#CAN_F13R2_FB18
 
CAN_F13R2_FB18_Msk


	)

9039 
	#CAN_F13R2_FB19_Pos
 (19U)

	)

9040 
	#CAN_F13R2_FB19_Msk
 (0x1UL << 
CAN_F13R2_FB19_Pos
Ë

	)

9041 
	#CAN_F13R2_FB19
 
CAN_F13R2_FB19_Msk


	)

9042 
	#CAN_F13R2_FB20_Pos
 (20U)

	)

9043 
	#CAN_F13R2_FB20_Msk
 (0x1UL << 
CAN_F13R2_FB20_Pos
Ë

	)

9044 
	#CAN_F13R2_FB20
 
CAN_F13R2_FB20_Msk


	)

9045 
	#CAN_F13R2_FB21_Pos
 (21U)

	)

9046 
	#CAN_F13R2_FB21_Msk
 (0x1UL << 
CAN_F13R2_FB21_Pos
Ë

	)

9047 
	#CAN_F13R2_FB21
 
CAN_F13R2_FB21_Msk


	)

9048 
	#CAN_F13R2_FB22_Pos
 (22U)

	)

9049 
	#CAN_F13R2_FB22_Msk
 (0x1UL << 
CAN_F13R2_FB22_Pos
Ë

	)

9050 
	#CAN_F13R2_FB22
 
CAN_F13R2_FB22_Msk


	)

9051 
	#CAN_F13R2_FB23_Pos
 (23U)

	)

9052 
	#CAN_F13R2_FB23_Msk
 (0x1UL << 
CAN_F13R2_FB23_Pos
Ë

	)

9053 
	#CAN_F13R2_FB23
 
CAN_F13R2_FB23_Msk


	)

9054 
	#CAN_F13R2_FB24_Pos
 (24U)

	)

9055 
	#CAN_F13R2_FB24_Msk
 (0x1UL << 
CAN_F13R2_FB24_Pos
Ë

	)

9056 
	#CAN_F13R2_FB24
 
CAN_F13R2_FB24_Msk


	)

9057 
	#CAN_F13R2_FB25_Pos
 (25U)

	)

9058 
	#CAN_F13R2_FB25_Msk
 (0x1UL << 
CAN_F13R2_FB25_Pos
Ë

	)

9059 
	#CAN_F13R2_FB25
 
CAN_F13R2_FB25_Msk


	)

9060 
	#CAN_F13R2_FB26_Pos
 (26U)

	)

9061 
	#CAN_F13R2_FB26_Msk
 (0x1UL << 
CAN_F13R2_FB26_Pos
Ë

	)

9062 
	#CAN_F13R2_FB26
 
CAN_F13R2_FB26_Msk


	)

9063 
	#CAN_F13R2_FB27_Pos
 (27U)

	)

9064 
	#CAN_F13R2_FB27_Msk
 (0x1UL << 
CAN_F13R2_FB27_Pos
Ë

	)

9065 
	#CAN_F13R2_FB27
 
CAN_F13R2_FB27_Msk


	)

9066 
	#CAN_F13R2_FB28_Pos
 (28U)

	)

9067 
	#CAN_F13R2_FB28_Msk
 (0x1UL << 
CAN_F13R2_FB28_Pos
Ë

	)

9068 
	#CAN_F13R2_FB28
 
CAN_F13R2_FB28_Msk


	)

9069 
	#CAN_F13R2_FB29_Pos
 (29U)

	)

9070 
	#CAN_F13R2_FB29_Msk
 (0x1UL << 
CAN_F13R2_FB29_Pos
Ë

	)

9071 
	#CAN_F13R2_FB29
 
CAN_F13R2_FB29_Msk


	)

9072 
	#CAN_F13R2_FB30_Pos
 (30U)

	)

9073 
	#CAN_F13R2_FB30_Msk
 (0x1UL << 
CAN_F13R2_FB30_Pos
Ë

	)

9074 
	#CAN_F13R2_FB30
 
CAN_F13R2_FB30_Msk


	)

9075 
	#CAN_F13R2_FB31_Pos
 (31U)

	)

9076 
	#CAN_F13R2_FB31_Msk
 (0x1UL << 
CAN_F13R2_FB31_Pos
Ë

	)

9077 
	#CAN_F13R2_FB31
 
CAN_F13R2_FB31_Msk


	)

9086 
	#SPI_CR1_CPHA_Pos
 (0U)

	)

9087 
	#SPI_CR1_CPHA_Msk
 (0x1UL << 
SPI_CR1_CPHA_Pos
Ë

	)

9088 
	#SPI_CR1_CPHA
 
SPI_CR1_CPHA_Msk


	)

9089 
	#SPI_CR1_CPOL_Pos
 (1U)

	)

9090 
	#SPI_CR1_CPOL_Msk
 (0x1UL << 
SPI_CR1_CPOL_Pos
Ë

	)

9091 
	#SPI_CR1_CPOL
 
SPI_CR1_CPOL_Msk


	)

9092 
	#SPI_CR1_MSTR_Pos
 (2U)

	)

9093 
	#SPI_CR1_MSTR_Msk
 (0x1UL << 
SPI_CR1_MSTR_Pos
Ë

	)

9094 
	#SPI_CR1_MSTR
 
SPI_CR1_MSTR_Msk


	)

9096 
	#SPI_CR1_BR_Pos
 (3U)

	)

9097 
	#SPI_CR1_BR_Msk
 (0x7UL << 
SPI_CR1_BR_Pos
Ë

	)

9098 
	#SPI_CR1_BR
 
SPI_CR1_BR_Msk


	)

9099 
	#SPI_CR1_BR_0
 (0x1UL << 
SPI_CR1_BR_Pos
Ë

	)

9100 
	#SPI_CR1_BR_1
 (0x2UL << 
SPI_CR1_BR_Pos
Ë

	)

9101 
	#SPI_CR1_BR_2
 (0x4UL << 
SPI_CR1_BR_Pos
Ë

	)

9103 
	#SPI_CR1_SPE_Pos
 (6U)

	)

9104 
	#SPI_CR1_SPE_Msk
 (0x1UL << 
SPI_CR1_SPE_Pos
Ë

	)

9105 
	#SPI_CR1_SPE
 
SPI_CR1_SPE_Msk


	)

9106 
	#SPI_CR1_LSBFIRST_Pos
 (7U)

	)

9107 
	#SPI_CR1_LSBFIRST_Msk
 (0x1UL << 
SPI_CR1_LSBFIRST_Pos
Ë

	)

9108 
	#SPI_CR1_LSBFIRST
 
SPI_CR1_LSBFIRST_Msk


	)

9109 
	#SPI_CR1_SSI_Pos
 (8U)

	)

9110 
	#SPI_CR1_SSI_Msk
 (0x1UL << 
SPI_CR1_SSI_Pos
Ë

	)

9111 
	#SPI_CR1_SSI
 
SPI_CR1_SSI_Msk


	)

9112 
	#SPI_CR1_SSM_Pos
 (9U)

	)

9113 
	#SPI_CR1_SSM_Msk
 (0x1UL << 
SPI_CR1_SSM_Pos
Ë

	)

9114 
	#SPI_CR1_SSM
 
SPI_CR1_SSM_Msk


	)

9115 
	#SPI_CR1_RXONLY_Pos
 (10U)

	)

9116 
	#SPI_CR1_RXONLY_Msk
 (0x1UL << 
SPI_CR1_RXONLY_Pos
Ë

	)

9117 
	#SPI_CR1_RXONLY
 
SPI_CR1_RXONLY_Msk


	)

9118 
	#SPI_CR1_DFF_Pos
 (11U)

	)

9119 
	#SPI_CR1_DFF_Msk
 (0x1UL << 
SPI_CR1_DFF_Pos
Ë

	)

9120 
	#SPI_CR1_DFF
 
SPI_CR1_DFF_Msk


	)

9121 
	#SPI_CR1_CRCNEXT_Pos
 (12U)

	)

9122 
	#SPI_CR1_CRCNEXT_Msk
 (0x1UL << 
SPI_CR1_CRCNEXT_Pos
Ë

	)

9123 
	#SPI_CR1_CRCNEXT
 
SPI_CR1_CRCNEXT_Msk


	)

9124 
	#SPI_CR1_CRCEN_Pos
 (13U)

	)

9125 
	#SPI_CR1_CRCEN_Msk
 (0x1UL << 
SPI_CR1_CRCEN_Pos
Ë

	)

9126 
	#SPI_CR1_CRCEN
 
SPI_CR1_CRCEN_Msk


	)

9127 
	#SPI_CR1_BIDIOE_Pos
 (14U)

	)

9128 
	#SPI_CR1_BIDIOE_Msk
 (0x1UL << 
SPI_CR1_BIDIOE_Pos
Ë

	)

9129 
	#SPI_CR1_BIDIOE
 
SPI_CR1_BIDIOE_Msk


	)

9130 
	#SPI_CR1_BIDIMODE_Pos
 (15U)

	)

9131 
	#SPI_CR1_BIDIMODE_Msk
 (0x1UL << 
SPI_CR1_BIDIMODE_Pos
Ë

	)

9132 
	#SPI_CR1_BIDIMODE
 
SPI_CR1_BIDIMODE_Msk


	)

9135 
	#SPI_CR2_RXDMAEN_Pos
 (0U)

	)

9136 
	#SPI_CR2_RXDMAEN_Msk
 (0x1UL << 
SPI_CR2_RXDMAEN_Pos
Ë

	)

9137 
	#SPI_CR2_RXDMAEN
 
SPI_CR2_RXDMAEN_Msk


	)

9138 
	#SPI_CR2_TXDMAEN_Pos
 (1U)

	)

9139 
	#SPI_CR2_TXDMAEN_Msk
 (0x1UL << 
SPI_CR2_TXDMAEN_Pos
Ë

	)

9140 
	#SPI_CR2_TXDMAEN
 
SPI_CR2_TXDMAEN_Msk


	)

9141 
	#SPI_CR2_SSOE_Pos
 (2U)

	)

9142 
	#SPI_CR2_SSOE_Msk
 (0x1UL << 
SPI_CR2_SSOE_Pos
Ë

	)

9143 
	#SPI_CR2_SSOE
 
SPI_CR2_SSOE_Msk


	)

9144 
	#SPI_CR2_ERRIE_Pos
 (5U)

	)

9145 
	#SPI_CR2_ERRIE_Msk
 (0x1UL << 
SPI_CR2_ERRIE_Pos
Ë

	)

9146 
	#SPI_CR2_ERRIE
 
SPI_CR2_ERRIE_Msk


	)

9147 
	#SPI_CR2_RXNEIE_Pos
 (6U)

	)

9148 
	#SPI_CR2_RXNEIE_Msk
 (0x1UL << 
SPI_CR2_RXNEIE_Pos
Ë

	)

9149 
	#SPI_CR2_RXNEIE
 
SPI_CR2_RXNEIE_Msk


	)

9150 
	#SPI_CR2_TXEIE_Pos
 (7U)

	)

9151 
	#SPI_CR2_TXEIE_Msk
 (0x1UL << 
SPI_CR2_TXEIE_Pos
Ë

	)

9152 
	#SPI_CR2_TXEIE
 
SPI_CR2_TXEIE_Msk


	)

9155 
	#SPI_SR_RXNE_Pos
 (0U)

	)

9156 
	#SPI_SR_RXNE_Msk
 (0x1UL << 
SPI_SR_RXNE_Pos
Ë

	)

9157 
	#SPI_SR_RXNE
 
SPI_SR_RXNE_Msk


	)

9158 
	#SPI_SR_TXE_Pos
 (1U)

	)

9159 
	#SPI_SR_TXE_Msk
 (0x1UL << 
SPI_SR_TXE_Pos
Ë

	)

9160 
	#SPI_SR_TXE
 
SPI_SR_TXE_Msk


	)

9161 
	#SPI_SR_CHSIDE_Pos
 (2U)

	)

9162 
	#SPI_SR_CHSIDE_Msk
 (0x1UL << 
SPI_SR_CHSIDE_Pos
Ë

	)

9163 
	#SPI_SR_CHSIDE
 
SPI_SR_CHSIDE_Msk


	)

9164 
	#SPI_SR_UDR_Pos
 (3U)

	)

9165 
	#SPI_SR_UDR_Msk
 (0x1UL << 
SPI_SR_UDR_Pos
Ë

	)

9166 
	#SPI_SR_UDR
 
SPI_SR_UDR_Msk


	)

9167 
	#SPI_SR_CRCERR_Pos
 (4U)

	)

9168 
	#SPI_SR_CRCERR_Msk
 (0x1UL << 
SPI_SR_CRCERR_Pos
Ë

	)

9169 
	#SPI_SR_CRCERR
 
SPI_SR_CRCERR_Msk


	)

9170 
	#SPI_SR_MODF_Pos
 (5U)

	)

9171 
	#SPI_SR_MODF_Msk
 (0x1UL << 
SPI_SR_MODF_Pos
Ë

	)

9172 
	#SPI_SR_MODF
 
SPI_SR_MODF_Msk


	)

9173 
	#SPI_SR_OVR_Pos
 (6U)

	)

9174 
	#SPI_SR_OVR_Msk
 (0x1UL << 
SPI_SR_OVR_Pos
Ë

	)

9175 
	#SPI_SR_OVR
 
SPI_SR_OVR_Msk


	)

9176 
	#SPI_SR_BSY_Pos
 (7U)

	)

9177 
	#SPI_SR_BSY_Msk
 (0x1UL << 
SPI_SR_BSY_Pos
Ë

	)

9178 
	#SPI_SR_BSY
 
SPI_SR_BSY_Msk


	)

9181 
	#SPI_DR_DR_Pos
 (0U)

	)

9182 
	#SPI_DR_DR_Msk
 (0xFFFFUL << 
SPI_DR_DR_Pos
Ë

	)

9183 
	#SPI_DR_DR
 
SPI_DR_DR_Msk


	)

9186 
	#SPI_CRCPR_CRCPOLY_Pos
 (0U)

	)

9187 
	#SPI_CRCPR_CRCPOLY_Msk
 (0xFFFFUL << 
SPI_CRCPR_CRCPOLY_Pos
Ë

	)

9188 
	#SPI_CRCPR_CRCPOLY
 
SPI_CRCPR_CRCPOLY_Msk


	)

9191 
	#SPI_RXCRCR_RXCRC_Pos
 (0U)

	)

9192 
	#SPI_RXCRCR_RXCRC_Msk
 (0xFFFFUL << 
SPI_RXCRCR_RXCRC_Pos
Ë

	)

9193 
	#SPI_RXCRCR_RXCRC
 
SPI_RXCRCR_RXCRC_Msk


	)

9196 
	#SPI_TXCRCR_TXCRC_Pos
 (0U)

	)

9197 
	#SPI_TXCRCR_TXCRC_Msk
 (0xFFFFUL << 
SPI_TXCRCR_TXCRC_Pos
Ë

	)

9198 
	#SPI_TXCRCR_TXCRC
 
SPI_TXCRCR_TXCRC_Msk


	)

9200 
	#SPI_I2SCFGR_I2SMOD_Pos
 (11U)

	)

9201 
	#SPI_I2SCFGR_I2SMOD_Msk
 (0x1UL << 
SPI_I2SCFGR_I2SMOD_Pos
Ë

	)

9202 
	#SPI_I2SCFGR_I2SMOD
 
SPI_I2SCFGR_I2SMOD_Msk


	)

9211 
	#I2C_CR1_PE_Pos
 (0U)

	)

9212 
	#I2C_CR1_PE_Msk
 (0x1UL << 
I2C_CR1_PE_Pos
Ë

	)

9213 
	#I2C_CR1_PE
 
I2C_CR1_PE_Msk


	)

9214 
	#I2C_CR1_SMBUS_Pos
 (1U)

	)

9215 
	#I2C_CR1_SMBUS_Msk
 (0x1UL << 
I2C_CR1_SMBUS_Pos
Ë

	)

9216 
	#I2C_CR1_SMBUS
 
I2C_CR1_SMBUS_Msk


	)

9217 
	#I2C_CR1_SMBTYPE_Pos
 (3U)

	)

9218 
	#I2C_CR1_SMBTYPE_Msk
 (0x1UL << 
I2C_CR1_SMBTYPE_Pos
Ë

	)

9219 
	#I2C_CR1_SMBTYPE
 
I2C_CR1_SMBTYPE_Msk


	)

9220 
	#I2C_CR1_ENARP_Pos
 (4U)

	)

9221 
	#I2C_CR1_ENARP_Msk
 (0x1UL << 
I2C_CR1_ENARP_Pos
Ë

	)

9222 
	#I2C_CR1_ENARP
 
I2C_CR1_ENARP_Msk


	)

9223 
	#I2C_CR1_ENPEC_Pos
 (5U)

	)

9224 
	#I2C_CR1_ENPEC_Msk
 (0x1UL << 
I2C_CR1_ENPEC_Pos
Ë

	)

9225 
	#I2C_CR1_ENPEC
 
I2C_CR1_ENPEC_Msk


	)

9226 
	#I2C_CR1_ENGC_Pos
 (6U)

	)

9227 
	#I2C_CR1_ENGC_Msk
 (0x1UL << 
I2C_CR1_ENGC_Pos
Ë

	)

9228 
	#I2C_CR1_ENGC
 
I2C_CR1_ENGC_Msk


	)

9229 
	#I2C_CR1_NOSTRETCH_Pos
 (7U)

	)

9230 
	#I2C_CR1_NOSTRETCH_Msk
 (0x1UL << 
I2C_CR1_NOSTRETCH_Pos
Ë

	)

9231 
	#I2C_CR1_NOSTRETCH
 
I2C_CR1_NOSTRETCH_Msk


	)

9232 
	#I2C_CR1_START_Pos
 (8U)

	)

9233 
	#I2C_CR1_START_Msk
 (0x1UL << 
I2C_CR1_START_Pos
Ë

	)

9234 
	#I2C_CR1_START
 
I2C_CR1_START_Msk


	)

9235 
	#I2C_CR1_STOP_Pos
 (9U)

	)

9236 
	#I2C_CR1_STOP_Msk
 (0x1UL << 
I2C_CR1_STOP_Pos
Ë

	)

9237 
	#I2C_CR1_STOP
 
I2C_CR1_STOP_Msk


	)

9238 
	#I2C_CR1_ACK_Pos
 (10U)

	)

9239 
	#I2C_CR1_ACK_Msk
 (0x1UL << 
I2C_CR1_ACK_Pos
Ë

	)

9240 
	#I2C_CR1_ACK
 
I2C_CR1_ACK_Msk


	)

9241 
	#I2C_CR1_POS_Pos
 (11U)

	)

9242 
	#I2C_CR1_POS_Msk
 (0x1UL << 
I2C_CR1_POS_Pos
Ë

	)

9243 
	#I2C_CR1_POS
 
I2C_CR1_POS_Msk


	)

9244 
	#I2C_CR1_PEC_Pos
 (12U)

	)

9245 
	#I2C_CR1_PEC_Msk
 (0x1UL << 
I2C_CR1_PEC_Pos
Ë

	)

9246 
	#I2C_CR1_PEC
 
I2C_CR1_PEC_Msk


	)

9247 
	#I2C_CR1_ALERT_Pos
 (13U)

	)

9248 
	#I2C_CR1_ALERT_Msk
 (0x1UL << 
I2C_CR1_ALERT_Pos
Ë

	)

9249 
	#I2C_CR1_ALERT
 
I2C_CR1_ALERT_Msk


	)

9250 
	#I2C_CR1_SWRST_Pos
 (15U)

	)

9251 
	#I2C_CR1_SWRST_Msk
 (0x1UL << 
I2C_CR1_SWRST_Pos
Ë

	)

9252 
	#I2C_CR1_SWRST
 
I2C_CR1_SWRST_Msk


	)

9255 
	#I2C_CR2_FREQ_Pos
 (0U)

	)

9256 
	#I2C_CR2_FREQ_Msk
 (0x3FUL << 
I2C_CR2_FREQ_Pos
Ë

	)

9257 
	#I2C_CR2_FREQ
 
I2C_CR2_FREQ_Msk


	)

9258 
	#I2C_CR2_FREQ_0
 (0x01UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9259 
	#I2C_CR2_FREQ_1
 (0x02UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9260 
	#I2C_CR2_FREQ_2
 (0x04UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9261 
	#I2C_CR2_FREQ_3
 (0x08UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9262 
	#I2C_CR2_FREQ_4
 (0x10UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9263 
	#I2C_CR2_FREQ_5
 (0x20UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9265 
	#I2C_CR2_ITERREN_Pos
 (8U)

	)

9266 
	#I2C_CR2_ITERREN_Msk
 (0x1UL << 
I2C_CR2_ITERREN_Pos
Ë

	)

9267 
	#I2C_CR2_ITERREN
 
I2C_CR2_ITERREN_Msk


	)

9268 
	#I2C_CR2_ITEVTEN_Pos
 (9U)

	)

9269 
	#I2C_CR2_ITEVTEN_Msk
 (0x1UL << 
I2C_CR2_ITEVTEN_Pos
Ë

	)

9270 
	#I2C_CR2_ITEVTEN
 
I2C_CR2_ITEVTEN_Msk


	)

9271 
	#I2C_CR2_ITBUFEN_Pos
 (10U)

	)

9272 
	#I2C_CR2_ITBUFEN_Msk
 (0x1UL << 
I2C_CR2_ITBUFEN_Pos
Ë

	)

9273 
	#I2C_CR2_ITBUFEN
 
I2C_CR2_ITBUFEN_Msk


	)

9274 
	#I2C_CR2_DMAEN_Pos
 (11U)

	)

9275 
	#I2C_CR2_DMAEN_Msk
 (0x1UL << 
I2C_CR2_DMAEN_Pos
Ë

	)

9276 
	#I2C_CR2_DMAEN
 
I2C_CR2_DMAEN_Msk


	)

9277 
	#I2C_CR2_LAST_Pos
 (12U)

	)

9278 
	#I2C_CR2_LAST_Msk
 (0x1UL << 
I2C_CR2_LAST_Pos
Ë

	)

9279 
	#I2C_CR2_LAST
 
I2C_CR2_LAST_Msk


	)

9282 
	#I2C_OAR1_ADD1_7
 0x000000FEU

	)

9283 
	#I2C_OAR1_ADD8_9
 0x00000300U

	)

9285 
	#I2C_OAR1_ADD0_Pos
 (0U)

	)

9286 
	#I2C_OAR1_ADD0_Msk
 (0x1UL << 
I2C_OAR1_ADD0_Pos
Ë

	)

9287 
	#I2C_OAR1_ADD0
 
I2C_OAR1_ADD0_Msk


	)

9288 
	#I2C_OAR1_ADD1_Pos
 (1U)

	)

9289 
	#I2C_OAR1_ADD1_Msk
 (0x1UL << 
I2C_OAR1_ADD1_Pos
Ë

	)

9290 
	#I2C_OAR1_ADD1
 
I2C_OAR1_ADD1_Msk


	)

9291 
	#I2C_OAR1_ADD2_Pos
 (2U)

	)

9292 
	#I2C_OAR1_ADD2_Msk
 (0x1UL << 
I2C_OAR1_ADD2_Pos
Ë

	)

9293 
	#I2C_OAR1_ADD2
 
I2C_OAR1_ADD2_Msk


	)

9294 
	#I2C_OAR1_ADD3_Pos
 (3U)

	)

9295 
	#I2C_OAR1_ADD3_Msk
 (0x1UL << 
I2C_OAR1_ADD3_Pos
Ë

	)

9296 
	#I2C_OAR1_ADD3
 
I2C_OAR1_ADD3_Msk


	)

9297 
	#I2C_OAR1_ADD4_Pos
 (4U)

	)

9298 
	#I2C_OAR1_ADD4_Msk
 (0x1UL << 
I2C_OAR1_ADD4_Pos
Ë

	)

9299 
	#I2C_OAR1_ADD4
 
I2C_OAR1_ADD4_Msk


	)

9300 
	#I2C_OAR1_ADD5_Pos
 (5U)

	)

9301 
	#I2C_OAR1_ADD5_Msk
 (0x1UL << 
I2C_OAR1_ADD5_Pos
Ë

	)

9302 
	#I2C_OAR1_ADD5
 
I2C_OAR1_ADD5_Msk


	)

9303 
	#I2C_OAR1_ADD6_Pos
 (6U)

	)

9304 
	#I2C_OAR1_ADD6_Msk
 (0x1UL << 
I2C_OAR1_ADD6_Pos
Ë

	)

9305 
	#I2C_OAR1_ADD6
 
I2C_OAR1_ADD6_Msk


	)

9306 
	#I2C_OAR1_ADD7_Pos
 (7U)

	)

9307 
	#I2C_OAR1_ADD7_Msk
 (0x1UL << 
I2C_OAR1_ADD7_Pos
Ë

	)

9308 
	#I2C_OAR1_ADD7
 
I2C_OAR1_ADD7_Msk


	)

9309 
	#I2C_OAR1_ADD8_Pos
 (8U)

	)

9310 
	#I2C_OAR1_ADD8_Msk
 (0x1UL << 
I2C_OAR1_ADD8_Pos
Ë

	)

9311 
	#I2C_OAR1_ADD8
 
I2C_OAR1_ADD8_Msk


	)

9312 
	#I2C_OAR1_ADD9_Pos
 (9U)

	)

9313 
	#I2C_OAR1_ADD9_Msk
 (0x1UL << 
I2C_OAR1_ADD9_Pos
Ë

	)

9314 
	#I2C_OAR1_ADD9
 
I2C_OAR1_ADD9_Msk


	)

9316 
	#I2C_OAR1_ADDMODE_Pos
 (15U)

	)

9317 
	#I2C_OAR1_ADDMODE_Msk
 (0x1UL << 
I2C_OAR1_ADDMODE_Pos
Ë

	)

9318 
	#I2C_OAR1_ADDMODE
 
I2C_OAR1_ADDMODE_Msk


	)

9321 
	#I2C_OAR2_ENDUAL_Pos
 (0U)

	)

9322 
	#I2C_OAR2_ENDUAL_Msk
 (0x1UL << 
I2C_OAR2_ENDUAL_Pos
Ë

	)

9323 
	#I2C_OAR2_ENDUAL
 
I2C_OAR2_ENDUAL_Msk


	)

9324 
	#I2C_OAR2_ADD2_Pos
 (1U)

	)

9325 
	#I2C_OAR2_ADD2_Msk
 (0x7FUL << 
I2C_OAR2_ADD2_Pos
Ë

	)

9326 
	#I2C_OAR2_ADD2
 
I2C_OAR2_ADD2_Msk


	)

9329 
	#I2C_DR_DR_Pos
 (0U)

	)

9330 
	#I2C_DR_DR_Msk
 (0xFFUL << 
I2C_DR_DR_Pos
Ë

	)

9331 
	#I2C_DR_DR
 
I2C_DR_DR_Msk


	)

9334 
	#I2C_SR1_SB_Pos
 (0U)

	)

9335 
	#I2C_SR1_SB_Msk
 (0x1UL << 
I2C_SR1_SB_Pos
Ë

	)

9336 
	#I2C_SR1_SB
 
I2C_SR1_SB_Msk


	)

9337 
	#I2C_SR1_ADDR_Pos
 (1U)

	)

9338 
	#I2C_SR1_ADDR_Msk
 (0x1UL << 
I2C_SR1_ADDR_Pos
Ë

	)

9339 
	#I2C_SR1_ADDR
 
I2C_SR1_ADDR_Msk


	)

9340 
	#I2C_SR1_BTF_Pos
 (2U)

	)

9341 
	#I2C_SR1_BTF_Msk
 (0x1UL << 
I2C_SR1_BTF_Pos
Ë

	)

9342 
	#I2C_SR1_BTF
 
I2C_SR1_BTF_Msk


	)

9343 
	#I2C_SR1_ADD10_Pos
 (3U)

	)

9344 
	#I2C_SR1_ADD10_Msk
 (0x1UL << 
I2C_SR1_ADD10_Pos
Ë

	)

9345 
	#I2C_SR1_ADD10
 
I2C_SR1_ADD10_Msk


	)

9346 
	#I2C_SR1_STOPF_Pos
 (4U)

	)

9347 
	#I2C_SR1_STOPF_Msk
 (0x1UL << 
I2C_SR1_STOPF_Pos
Ë

	)

9348 
	#I2C_SR1_STOPF
 
I2C_SR1_STOPF_Msk


	)

9349 
	#I2C_SR1_RXNE_Pos
 (6U)

	)

9350 
	#I2C_SR1_RXNE_Msk
 (0x1UL << 
I2C_SR1_RXNE_Pos
Ë

	)

9351 
	#I2C_SR1_RXNE
 
I2C_SR1_RXNE_Msk


	)

9352 
	#I2C_SR1_TXE_Pos
 (7U)

	)

9353 
	#I2C_SR1_TXE_Msk
 (0x1UL << 
I2C_SR1_TXE_Pos
Ë

	)

9354 
	#I2C_SR1_TXE
 
I2C_SR1_TXE_Msk


	)

9355 
	#I2C_SR1_BERR_Pos
 (8U)

	)

9356 
	#I2C_SR1_BERR_Msk
 (0x1UL << 
I2C_SR1_BERR_Pos
Ë

	)

9357 
	#I2C_SR1_BERR
 
I2C_SR1_BERR_Msk


	)

9358 
	#I2C_SR1_ARLO_Pos
 (9U)

	)

9359 
	#I2C_SR1_ARLO_Msk
 (0x1UL << 
I2C_SR1_ARLO_Pos
Ë

	)

9360 
	#I2C_SR1_ARLO
 
I2C_SR1_ARLO_Msk


	)

9361 
	#I2C_SR1_AF_Pos
 (10U)

	)

9362 
	#I2C_SR1_AF_Msk
 (0x1UL << 
I2C_SR1_AF_Pos
Ë

	)

9363 
	#I2C_SR1_AF
 
I2C_SR1_AF_Msk


	)

9364 
	#I2C_SR1_OVR_Pos
 (11U)

	)

9365 
	#I2C_SR1_OVR_Msk
 (0x1UL << 
I2C_SR1_OVR_Pos
Ë

	)

9366 
	#I2C_SR1_OVR
 
I2C_SR1_OVR_Msk


	)

9367 
	#I2C_SR1_PECERR_Pos
 (12U)

	)

9368 
	#I2C_SR1_PECERR_Msk
 (0x1UL << 
I2C_SR1_PECERR_Pos
Ë

	)

9369 
	#I2C_SR1_PECERR
 
I2C_SR1_PECERR_Msk


	)

9370 
	#I2C_SR1_TIMEOUT_Pos
 (14U)

	)

9371 
	#I2C_SR1_TIMEOUT_Msk
 (0x1UL << 
I2C_SR1_TIMEOUT_Pos
Ë

	)

9372 
	#I2C_SR1_TIMEOUT
 
I2C_SR1_TIMEOUT_Msk


	)

9373 
	#I2C_SR1_SMBALERT_Pos
 (15U)

	)

9374 
	#I2C_SR1_SMBALERT_Msk
 (0x1UL << 
I2C_SR1_SMBALERT_Pos
Ë

	)

9375 
	#I2C_SR1_SMBALERT
 
I2C_SR1_SMBALERT_Msk


	)

9378 
	#I2C_SR2_MSL_Pos
 (0U)

	)

9379 
	#I2C_SR2_MSL_Msk
 (0x1UL << 
I2C_SR2_MSL_Pos
Ë

	)

9380 
	#I2C_SR2_MSL
 
I2C_SR2_MSL_Msk


	)

9381 
	#I2C_SR2_BUSY_Pos
 (1U)

	)

9382 
	#I2C_SR2_BUSY_Msk
 (0x1UL << 
I2C_SR2_BUSY_Pos
Ë

	)

9383 
	#I2C_SR2_BUSY
 
I2C_SR2_BUSY_Msk


	)

9384 
	#I2C_SR2_TRA_Pos
 (2U)

	)

9385 
	#I2C_SR2_TRA_Msk
 (0x1UL << 
I2C_SR2_TRA_Pos
Ë

	)

9386 
	#I2C_SR2_TRA
 
I2C_SR2_TRA_Msk


	)

9387 
	#I2C_SR2_GENCALL_Pos
 (4U)

	)

9388 
	#I2C_SR2_GENCALL_Msk
 (0x1UL << 
I2C_SR2_GENCALL_Pos
Ë

	)

9389 
	#I2C_SR2_GENCALL
 
I2C_SR2_GENCALL_Msk


	)

9390 
	#I2C_SR2_SMBDEFAULT_Pos
 (5U)

	)

9391 
	#I2C_SR2_SMBDEFAULT_Msk
 (0x1UL << 
I2C_SR2_SMBDEFAULT_Pos
Ë

	)

9392 
	#I2C_SR2_SMBDEFAULT
 
I2C_SR2_SMBDEFAULT_Msk


	)

9393 
	#I2C_SR2_SMBHOST_Pos
 (6U)

	)

9394 
	#I2C_SR2_SMBHOST_Msk
 (0x1UL << 
I2C_SR2_SMBHOST_Pos
Ë

	)

9395 
	#I2C_SR2_SMBHOST
 
I2C_SR2_SMBHOST_Msk


	)

9396 
	#I2C_SR2_DUALF_Pos
 (7U)

	)

9397 
	#I2C_SR2_DUALF_Msk
 (0x1UL << 
I2C_SR2_DUALF_Pos
Ë

	)

9398 
	#I2C_SR2_DUALF
 
I2C_SR2_DUALF_Msk


	)

9399 
	#I2C_SR2_PEC_Pos
 (8U)

	)

9400 
	#I2C_SR2_PEC_Msk
 (0xFFUL << 
I2C_SR2_PEC_Pos
Ë

	)

9401 
	#I2C_SR2_PEC
 
I2C_SR2_PEC_Msk


	)

9404 
	#I2C_CCR_CCR_Pos
 (0U)

	)

9405 
	#I2C_CCR_CCR_Msk
 (0xFFFUL << 
I2C_CCR_CCR_Pos
Ë

	)

9406 
	#I2C_CCR_CCR
 
I2C_CCR_CCR_Msk


	)

9407 
	#I2C_CCR_DUTY_Pos
 (14U)

	)

9408 
	#I2C_CCR_DUTY_Msk
 (0x1UL << 
I2C_CCR_DUTY_Pos
Ë

	)

9409 
	#I2C_CCR_DUTY
 
I2C_CCR_DUTY_Msk


	)

9410 
	#I2C_CCR_FS_Pos
 (15U)

	)

9411 
	#I2C_CCR_FS_Msk
 (0x1UL << 
I2C_CCR_FS_Pos
Ë

	)

9412 
	#I2C_CCR_FS
 
I2C_CCR_FS_Msk


	)

9415 
	#I2C_TRISE_TRISE_Pos
 (0U)

	)

9416 
	#I2C_TRISE_TRISE_Msk
 (0x3FUL << 
I2C_TRISE_TRISE_Pos
Ë

	)

9417 
	#I2C_TRISE_TRISE
 
I2C_TRISE_TRISE_Msk


	)

9426 
	#USART_SR_PE_Pos
 (0U)

	)

9427 
	#USART_SR_PE_Msk
 (0x1UL << 
USART_SR_PE_Pos
Ë

	)

9428 
	#USART_SR_PE
 
USART_SR_PE_Msk


	)

9429 
	#USART_SR_FE_Pos
 (1U)

	)

9430 
	#USART_SR_FE_Msk
 (0x1UL << 
USART_SR_FE_Pos
Ë

	)

9431 
	#USART_SR_FE
 
USART_SR_FE_Msk


	)

9432 
	#USART_SR_NE_Pos
 (2U)

	)

9433 
	#USART_SR_NE_Msk
 (0x1UL << 
USART_SR_NE_Pos
Ë

	)

9434 
	#USART_SR_NE
 
USART_SR_NE_Msk


	)

9435 
	#USART_SR_ORE_Pos
 (3U)

	)

9436 
	#USART_SR_ORE_Msk
 (0x1UL << 
USART_SR_ORE_Pos
Ë

	)

9437 
	#USART_SR_ORE
 
USART_SR_ORE_Msk


	)

9438 
	#USART_SR_IDLE_Pos
 (4U)

	)

9439 
	#USART_SR_IDLE_Msk
 (0x1UL << 
USART_SR_IDLE_Pos
Ë

	)

9440 
	#USART_SR_IDLE
 
USART_SR_IDLE_Msk


	)

9441 
	#USART_SR_RXNE_Pos
 (5U)

	)

9442 
	#USART_SR_RXNE_Msk
 (0x1UL << 
USART_SR_RXNE_Pos
Ë

	)

9443 
	#USART_SR_RXNE
 
USART_SR_RXNE_Msk


	)

9444 
	#USART_SR_TC_Pos
 (6U)

	)

9445 
	#USART_SR_TC_Msk
 (0x1UL << 
USART_SR_TC_Pos
Ë

	)

9446 
	#USART_SR_TC
 
USART_SR_TC_Msk


	)

9447 
	#USART_SR_TXE_Pos
 (7U)

	)

9448 
	#USART_SR_TXE_Msk
 (0x1UL << 
USART_SR_TXE_Pos
Ë

	)

9449 
	#USART_SR_TXE
 
USART_SR_TXE_Msk


	)

9450 
	#USART_SR_LBD_Pos
 (8U)

	)

9451 
	#USART_SR_LBD_Msk
 (0x1UL << 
USART_SR_LBD_Pos
Ë

	)

9452 
	#USART_SR_LBD
 
USART_SR_LBD_Msk


	)

9453 
	#USART_SR_CTS_Pos
 (9U)

	)

9454 
	#USART_SR_CTS_Msk
 (0x1UL << 
USART_SR_CTS_Pos
Ë

	)

9455 
	#USART_SR_CTS
 
USART_SR_CTS_Msk


	)

9458 
	#USART_DR_DR_Pos
 (0U)

	)

9459 
	#USART_DR_DR_Msk
 (0x1FFUL << 
USART_DR_DR_Pos
Ë

	)

9460 
	#USART_DR_DR
 
USART_DR_DR_Msk


	)

9463 
	#USART_BRR_DIV_Fø˘i⁄_Pos
 (0U)

	)

9464 
	#USART_BRR_DIV_Fø˘i⁄_Msk
 (0xFUL << 
USART_BRR_DIV_Fø˘i⁄_Pos
Ë

	)

9465 
	#USART_BRR_DIV_Fø˘i⁄
 
USART_BRR_DIV_Fø˘i⁄_Msk


	)

9466 
	#USART_BRR_DIV_M™tisß_Pos
 (4U)

	)

9467 
	#USART_BRR_DIV_M™tisß_Msk
 (0xFFFUL << 
USART_BRR_DIV_M™tisß_Pos
Ë

	)

9468 
	#USART_BRR_DIV_M™tisß
 
USART_BRR_DIV_M™tisß_Msk


	)

9471 
	#USART_CR1_SBK_Pos
 (0U)

	)

9472 
	#USART_CR1_SBK_Msk
 (0x1UL << 
USART_CR1_SBK_Pos
Ë

	)

9473 
	#USART_CR1_SBK
 
USART_CR1_SBK_Msk


	)

9474 
	#USART_CR1_RWU_Pos
 (1U)

	)

9475 
	#USART_CR1_RWU_Msk
 (0x1UL << 
USART_CR1_RWU_Pos
Ë

	)

9476 
	#USART_CR1_RWU
 
USART_CR1_RWU_Msk


	)

9477 
	#USART_CR1_RE_Pos
 (2U)

	)

9478 
	#USART_CR1_RE_Msk
 (0x1UL << 
USART_CR1_RE_Pos
Ë

	)

9479 
	#USART_CR1_RE
 
USART_CR1_RE_Msk


	)

9480 
	#USART_CR1_TE_Pos
 (3U)

	)

9481 
	#USART_CR1_TE_Msk
 (0x1UL << 
USART_CR1_TE_Pos
Ë

	)

9482 
	#USART_CR1_TE
 
USART_CR1_TE_Msk


	)

9483 
	#USART_CR1_IDLEIE_Pos
 (4U)

	)

9484 
	#USART_CR1_IDLEIE_Msk
 (0x1UL << 
USART_CR1_IDLEIE_Pos
Ë

	)

9485 
	#USART_CR1_IDLEIE
 
USART_CR1_IDLEIE_Msk


	)

9486 
	#USART_CR1_RXNEIE_Pos
 (5U)

	)

9487 
	#USART_CR1_RXNEIE_Msk
 (0x1UL << 
USART_CR1_RXNEIE_Pos
Ë

	)

9488 
	#USART_CR1_RXNEIE
 
USART_CR1_RXNEIE_Msk


	)

9489 
	#USART_CR1_TCIE_Pos
 (6U)

	)

9490 
	#USART_CR1_TCIE_Msk
 (0x1UL << 
USART_CR1_TCIE_Pos
Ë

	)

9491 
	#USART_CR1_TCIE
 
USART_CR1_TCIE_Msk


	)

9492 
	#USART_CR1_TXEIE_Pos
 (7U)

	)

9493 
	#USART_CR1_TXEIE_Msk
 (0x1UL << 
USART_CR1_TXEIE_Pos
Ë

	)

9494 
	#USART_CR1_TXEIE
 
USART_CR1_TXEIE_Msk


	)

9495 
	#USART_CR1_PEIE_Pos
 (8U)

	)

9496 
	#USART_CR1_PEIE_Msk
 (0x1UL << 
USART_CR1_PEIE_Pos
Ë

	)

9497 
	#USART_CR1_PEIE
 
USART_CR1_PEIE_Msk


	)

9498 
	#USART_CR1_PS_Pos
 (9U)

	)

9499 
	#USART_CR1_PS_Msk
 (0x1UL << 
USART_CR1_PS_Pos
Ë

	)

9500 
	#USART_CR1_PS
 
USART_CR1_PS_Msk


	)

9501 
	#USART_CR1_PCE_Pos
 (10U)

	)

9502 
	#USART_CR1_PCE_Msk
 (0x1UL << 
USART_CR1_PCE_Pos
Ë

	)

9503 
	#USART_CR1_PCE
 
USART_CR1_PCE_Msk


	)

9504 
	#USART_CR1_WAKE_Pos
 (11U)

	)

9505 
	#USART_CR1_WAKE_Msk
 (0x1UL << 
USART_CR1_WAKE_Pos
Ë

	)

9506 
	#USART_CR1_WAKE
 
USART_CR1_WAKE_Msk


	)

9507 
	#USART_CR1_M_Pos
 (12U)

	)

9508 
	#USART_CR1_M_Msk
 (0x1UL << 
USART_CR1_M_Pos
Ë

	)

9509 
	#USART_CR1_M
 
USART_CR1_M_Msk


	)

9510 
	#USART_CR1_UE_Pos
 (13U)

	)

9511 
	#USART_CR1_UE_Msk
 (0x1UL << 
USART_CR1_UE_Pos
Ë

	)

9512 
	#USART_CR1_UE
 
USART_CR1_UE_Msk


	)

9515 
	#USART_CR2_ADD_Pos
 (0U)

	)

9516 
	#USART_CR2_ADD_Msk
 (0xFUL << 
USART_CR2_ADD_Pos
Ë

	)

9517 
	#USART_CR2_ADD
 
USART_CR2_ADD_Msk


	)

9518 
	#USART_CR2_LBDL_Pos
 (5U)

	)

9519 
	#USART_CR2_LBDL_Msk
 (0x1UL << 
USART_CR2_LBDL_Pos
Ë

	)

9520 
	#USART_CR2_LBDL
 
USART_CR2_LBDL_Msk


	)

9521 
	#USART_CR2_LBDIE_Pos
 (6U)

	)

9522 
	#USART_CR2_LBDIE_Msk
 (0x1UL << 
USART_CR2_LBDIE_Pos
Ë

	)

9523 
	#USART_CR2_LBDIE
 
USART_CR2_LBDIE_Msk


	)

9524 
	#USART_CR2_LBCL_Pos
 (8U)

	)

9525 
	#USART_CR2_LBCL_Msk
 (0x1UL << 
USART_CR2_LBCL_Pos
Ë

	)

9526 
	#USART_CR2_LBCL
 
USART_CR2_LBCL_Msk


	)

9527 
	#USART_CR2_CPHA_Pos
 (9U)

	)

9528 
	#USART_CR2_CPHA_Msk
 (0x1UL << 
USART_CR2_CPHA_Pos
Ë

	)

9529 
	#USART_CR2_CPHA
 
USART_CR2_CPHA_Msk


	)

9530 
	#USART_CR2_CPOL_Pos
 (10U)

	)

9531 
	#USART_CR2_CPOL_Msk
 (0x1UL << 
USART_CR2_CPOL_Pos
Ë

	)

9532 
	#USART_CR2_CPOL
 
USART_CR2_CPOL_Msk


	)

9533 
	#USART_CR2_CLKEN_Pos
 (11U)

	)

9534 
	#USART_CR2_CLKEN_Msk
 (0x1UL << 
USART_CR2_CLKEN_Pos
Ë

	)

9535 
	#USART_CR2_CLKEN
 
USART_CR2_CLKEN_Msk


	)

9537 
	#USART_CR2_STOP_Pos
 (12U)

	)

9538 
	#USART_CR2_STOP_Msk
 (0x3UL << 
USART_CR2_STOP_Pos
Ë

	)

9539 
	#USART_CR2_STOP
 
USART_CR2_STOP_Msk


	)

9540 
	#USART_CR2_STOP_0
 (0x1UL << 
USART_CR2_STOP_Pos
Ë

	)

9541 
	#USART_CR2_STOP_1
 (0x2UL << 
USART_CR2_STOP_Pos
Ë

	)

9543 
	#USART_CR2_LINEN_Pos
 (14U)

	)

9544 
	#USART_CR2_LINEN_Msk
 (0x1UL << 
USART_CR2_LINEN_Pos
Ë

	)

9545 
	#USART_CR2_LINEN
 
USART_CR2_LINEN_Msk


	)

9548 
	#USART_CR3_EIE_Pos
 (0U)

	)

9549 
	#USART_CR3_EIE_Msk
 (0x1UL << 
USART_CR3_EIE_Pos
Ë

	)

9550 
	#USART_CR3_EIE
 
USART_CR3_EIE_Msk


	)

9551 
	#USART_CR3_IREN_Pos
 (1U)

	)

9552 
	#USART_CR3_IREN_Msk
 (0x1UL << 
USART_CR3_IREN_Pos
Ë

	)

9553 
	#USART_CR3_IREN
 
USART_CR3_IREN_Msk


	)

9554 
	#USART_CR3_IRLP_Pos
 (2U)

	)

9555 
	#USART_CR3_IRLP_Msk
 (0x1UL << 
USART_CR3_IRLP_Pos
Ë

	)

9556 
	#USART_CR3_IRLP
 
USART_CR3_IRLP_Msk


	)

9557 
	#USART_CR3_HDSEL_Pos
 (3U)

	)

9558 
	#USART_CR3_HDSEL_Msk
 (0x1UL << 
USART_CR3_HDSEL_Pos
Ë

	)

9559 
	#USART_CR3_HDSEL
 
USART_CR3_HDSEL_Msk


	)

9560 
	#USART_CR3_NACK_Pos
 (4U)

	)

9561 
	#USART_CR3_NACK_Msk
 (0x1UL << 
USART_CR3_NACK_Pos
Ë

	)

9562 
	#USART_CR3_NACK
 
USART_CR3_NACK_Msk


	)

9563 
	#USART_CR3_SCEN_Pos
 (5U)

	)

9564 
	#USART_CR3_SCEN_Msk
 (0x1UL << 
USART_CR3_SCEN_Pos
Ë

	)

9565 
	#USART_CR3_SCEN
 
USART_CR3_SCEN_Msk


	)

9566 
	#USART_CR3_DMAR_Pos
 (6U)

	)

9567 
	#USART_CR3_DMAR_Msk
 (0x1UL << 
USART_CR3_DMAR_Pos
Ë

	)

9568 
	#USART_CR3_DMAR
 
USART_CR3_DMAR_Msk


	)

9569 
	#USART_CR3_DMAT_Pos
 (7U)

	)

9570 
	#USART_CR3_DMAT_Msk
 (0x1UL << 
USART_CR3_DMAT_Pos
Ë

	)

9571 
	#USART_CR3_DMAT
 
USART_CR3_DMAT_Msk


	)

9572 
	#USART_CR3_RTSE_Pos
 (8U)

	)

9573 
	#USART_CR3_RTSE_Msk
 (0x1UL << 
USART_CR3_RTSE_Pos
Ë

	)

9574 
	#USART_CR3_RTSE
 
USART_CR3_RTSE_Msk


	)

9575 
	#USART_CR3_CTSE_Pos
 (9U)

	)

9576 
	#USART_CR3_CTSE_Msk
 (0x1UL << 
USART_CR3_CTSE_Pos
Ë

	)

9577 
	#USART_CR3_CTSE
 
USART_CR3_CTSE_Msk


	)

9578 
	#USART_CR3_CTSIE_Pos
 (10U)

	)

9579 
	#USART_CR3_CTSIE_Msk
 (0x1UL << 
USART_CR3_CTSIE_Pos
Ë

	)

9580 
	#USART_CR3_CTSIE
 
USART_CR3_CTSIE_Msk


	)

9583 
	#USART_GTPR_PSC_Pos
 (0U)

	)

9584 
	#USART_GTPR_PSC_Msk
 (0xFFUL << 
USART_GTPR_PSC_Pos
Ë

	)

9585 
	#USART_GTPR_PSC
 
USART_GTPR_PSC_Msk


	)

9586 
	#USART_GTPR_PSC_0
 (0x01UL << 
USART_GTPR_PSC_Pos
Ë

	)

9587 
	#USART_GTPR_PSC_1
 (0x02UL << 
USART_GTPR_PSC_Pos
Ë

	)

9588 
	#USART_GTPR_PSC_2
 (0x04UL << 
USART_GTPR_PSC_Pos
Ë

	)

9589 
	#USART_GTPR_PSC_3
 (0x08UL << 
USART_GTPR_PSC_Pos
Ë

	)

9590 
	#USART_GTPR_PSC_4
 (0x10UL << 
USART_GTPR_PSC_Pos
Ë

	)

9591 
	#USART_GTPR_PSC_5
 (0x20UL << 
USART_GTPR_PSC_Pos
Ë

	)

9592 
	#USART_GTPR_PSC_6
 (0x40UL << 
USART_GTPR_PSC_Pos
Ë

	)

9593 
	#USART_GTPR_PSC_7
 (0x80UL << 
USART_GTPR_PSC_Pos
Ë

	)

9595 
	#USART_GTPR_GT_Pos
 (8U)

	)

9596 
	#USART_GTPR_GT_Msk
 (0xFFUL << 
USART_GTPR_GT_Pos
Ë

	)

9597 
	#USART_GTPR_GT
 
USART_GTPR_GT_Msk


	)

9606 
	#DBGMCU_IDCODE_DEV_ID_Pos
 (0U)

	)

9607 
	#DBGMCU_IDCODE_DEV_ID_Msk
 (0xFFFUL << 
DBGMCU_IDCODE_DEV_ID_Pos
Ë

	)

9608 
	#DBGMCU_IDCODE_DEV_ID
 
DBGMCU_IDCODE_DEV_ID_Msk


	)

9610 
	#DBGMCU_IDCODE_REV_ID_Pos
 (16U)

	)

9611 
	#DBGMCU_IDCODE_REV_ID_Msk
 (0xFFFFUL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9612 
	#DBGMCU_IDCODE_REV_ID
 
DBGMCU_IDCODE_REV_ID_Msk


	)

9613 
	#DBGMCU_IDCODE_REV_ID_0
 (0x0001UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9614 
	#DBGMCU_IDCODE_REV_ID_1
 (0x0002UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9615 
	#DBGMCU_IDCODE_REV_ID_2
 (0x0004UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9616 
	#DBGMCU_IDCODE_REV_ID_3
 (0x0008UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9617 
	#DBGMCU_IDCODE_REV_ID_4
 (0x0010UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9618 
	#DBGMCU_IDCODE_REV_ID_5
 (0x0020UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9619 
	#DBGMCU_IDCODE_REV_ID_6
 (0x0040UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9620 
	#DBGMCU_IDCODE_REV_ID_7
 (0x0080UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9621 
	#DBGMCU_IDCODE_REV_ID_8
 (0x0100UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9622 
	#DBGMCU_IDCODE_REV_ID_9
 (0x0200UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9623 
	#DBGMCU_IDCODE_REV_ID_10
 (0x0400UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9624 
	#DBGMCU_IDCODE_REV_ID_11
 (0x0800UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9625 
	#DBGMCU_IDCODE_REV_ID_12
 (0x1000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9626 
	#DBGMCU_IDCODE_REV_ID_13
 (0x2000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9627 
	#DBGMCU_IDCODE_REV_ID_14
 (0x4000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9628 
	#DBGMCU_IDCODE_REV_ID_15
 (0x8000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9631 
	#DBGMCU_CR_DBG_SLEEP_Pos
 (0U)

	)

9632 
	#DBGMCU_CR_DBG_SLEEP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_SLEEP_Pos
Ë

	)

9633 
	#DBGMCU_CR_DBG_SLEEP
 
DBGMCU_CR_DBG_SLEEP_Msk


	)

9634 
	#DBGMCU_CR_DBG_STOP_Pos
 (1U)

	)

9635 
	#DBGMCU_CR_DBG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_STOP_Pos
Ë

	)

9636 
	#DBGMCU_CR_DBG_STOP
 
DBGMCU_CR_DBG_STOP_Msk


	)

9637 
	#DBGMCU_CR_DBG_STANDBY_Pos
 (2U)

	)

9638 
	#DBGMCU_CR_DBG_STANDBY_Msk
 (0x1UL << 
DBGMCU_CR_DBG_STANDBY_Pos
Ë

	)

9639 
	#DBGMCU_CR_DBG_STANDBY
 
DBGMCU_CR_DBG_STANDBY_Msk


	)

9640 
	#DBGMCU_CR_TRACE_IOEN_Pos
 (5U)

	)

9641 
	#DBGMCU_CR_TRACE_IOEN_Msk
 (0x1UL << 
DBGMCU_CR_TRACE_IOEN_Pos
Ë

	)

9642 
	#DBGMCU_CR_TRACE_IOEN
 
DBGMCU_CR_TRACE_IOEN_Msk


	)

9644 
	#DBGMCU_CR_TRACE_MODE_Pos
 (6U)

	)

9645 
	#DBGMCU_CR_TRACE_MODE_Msk
 (0x3UL << 
DBGMCU_CR_TRACE_MODE_Pos
Ë

	)

9646 
	#DBGMCU_CR_TRACE_MODE
 
DBGMCU_CR_TRACE_MODE_Msk


	)

9647 
	#DBGMCU_CR_TRACE_MODE_0
 (0x1UL << 
DBGMCU_CR_TRACE_MODE_Pos
Ë

	)

9648 
	#DBGMCU_CR_TRACE_MODE_1
 (0x2UL << 
DBGMCU_CR_TRACE_MODE_Pos
Ë

	)

9650 
	#DBGMCU_CR_DBG_IWDG_STOP_Pos
 (8U)

	)

9651 
	#DBGMCU_CR_DBG_IWDG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_IWDG_STOP_Pos
Ë

	)

9652 
	#DBGMCU_CR_DBG_IWDG_STOP
 
DBGMCU_CR_DBG_IWDG_STOP_Msk


	)

9653 
	#DBGMCU_CR_DBG_WWDG_STOP_Pos
 (9U)

	)

9654 
	#DBGMCU_CR_DBG_WWDG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_WWDG_STOP_Pos
Ë

	)

9655 
	#DBGMCU_CR_DBG_WWDG_STOP
 
DBGMCU_CR_DBG_WWDG_STOP_Msk


	)

9656 
	#DBGMCU_CR_DBG_TIM1_STOP_Pos
 (10U)

	)

9657 
	#DBGMCU_CR_DBG_TIM1_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM1_STOP_Pos
Ë

	)

9658 
	#DBGMCU_CR_DBG_TIM1_STOP
 
DBGMCU_CR_DBG_TIM1_STOP_Msk


	)

9659 
	#DBGMCU_CR_DBG_TIM2_STOP_Pos
 (11U)

	)

9660 
	#DBGMCU_CR_DBG_TIM2_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM2_STOP_Pos
Ë

	)

9661 
	#DBGMCU_CR_DBG_TIM2_STOP
 
DBGMCU_CR_DBG_TIM2_STOP_Msk


	)

9662 
	#DBGMCU_CR_DBG_TIM3_STOP_Pos
 (12U)

	)

9663 
	#DBGMCU_CR_DBG_TIM3_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM3_STOP_Pos
Ë

	)

9664 
	#DBGMCU_CR_DBG_TIM3_STOP
 
DBGMCU_CR_DBG_TIM3_STOP_Msk


	)

9665 
	#DBGMCU_CR_DBG_TIM4_STOP_Pos
 (13U)

	)

9666 
	#DBGMCU_CR_DBG_TIM4_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM4_STOP_Pos
Ë

	)

9667 
	#DBGMCU_CR_DBG_TIM4_STOP
 
DBGMCU_CR_DBG_TIM4_STOP_Msk


	)

9668 
	#DBGMCU_CR_DBG_CAN1_STOP_Pos
 (14U)

	)

9669 
	#DBGMCU_CR_DBG_CAN1_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_CAN1_STOP_Pos
Ë

	)

9670 
	#DBGMCU_CR_DBG_CAN1_STOP
 
DBGMCU_CR_DBG_CAN1_STOP_Msk


	)

9671 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos
 (15U)

	)

9672 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk
 (0x1UL << 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos
Ë

	)

9673 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk


	)

9674 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos
 (16U)

	)

9675 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk
 (0x1UL << 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos
Ë

	)

9676 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk


	)

9684 
	#FLASH_ACR_LATENCY_Pos
 (0U)

	)

9685 
	#FLASH_ACR_LATENCY_Msk
 (0x7UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9686 
	#FLASH_ACR_LATENCY
 
FLASH_ACR_LATENCY_Msk


	)

9687 
	#FLASH_ACR_LATENCY_0
 (0x1UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9688 
	#FLASH_ACR_LATENCY_1
 (0x2UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9689 
	#FLASH_ACR_LATENCY_2
 (0x4UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9691 
	#FLASH_ACR_HLFCYA_Pos
 (3U)

	)

9692 
	#FLASH_ACR_HLFCYA_Msk
 (0x1UL << 
FLASH_ACR_HLFCYA_Pos
Ë

	)

9693 
	#FLASH_ACR_HLFCYA
 
FLASH_ACR_HLFCYA_Msk


	)

9694 
	#FLASH_ACR_PRFTBE_Pos
 (4U)

	)

9695 
	#FLASH_ACR_PRFTBE_Msk
 (0x1UL << 
FLASH_ACR_PRFTBE_Pos
Ë

	)

9696 
	#FLASH_ACR_PRFTBE
 
FLASH_ACR_PRFTBE_Msk


	)

9697 
	#FLASH_ACR_PRFTBS_Pos
 (5U)

	)

9698 
	#FLASH_ACR_PRFTBS_Msk
 (0x1UL << 
FLASH_ACR_PRFTBS_Pos
Ë

	)

9699 
	#FLASH_ACR_PRFTBS
 
FLASH_ACR_PRFTBS_Msk


	)

9702 
	#FLASH_KEYR_FKEYR_Pos
 (0U)

	)

9703 
	#FLASH_KEYR_FKEYR_Msk
 (0xFFFFFFFFUL << 
FLASH_KEYR_FKEYR_Pos
Ë

	)

9704 
	#FLASH_KEYR_FKEYR
 
FLASH_KEYR_FKEYR_Msk


	)

9706 
	#RDP_KEY_Pos
 (0U)

	)

9707 
	#RDP_KEY_Msk
 (0xA5UL << 
RDP_KEY_Pos
Ë

	)

9708 
	#RDP_KEY
 
RDP_KEY_Msk


	)

9709 
	#FLASH_KEY1_Pos
 (0U)

	)

9710 
	#FLASH_KEY1_Msk
 (0x45670123UL << 
FLASH_KEY1_Pos
Ë

	)

9711 
	#FLASH_KEY1
 
FLASH_KEY1_Msk


	)

9712 
	#FLASH_KEY2_Pos
 (0U)

	)

9713 
	#FLASH_KEY2_Msk
 (0xCDEF89ABUL << 
FLASH_KEY2_Pos
Ë

	)

9714 
	#FLASH_KEY2
 
FLASH_KEY2_Msk


	)

9717 
	#FLASH_OPTKEYR_OPTKEYR_Pos
 (0U)

	)

9718 
	#FLASH_OPTKEYR_OPTKEYR_Msk
 (0xFFFFFFFFUL << 
FLASH_OPTKEYR_OPTKEYR_Pos
Ë

	)

9719 
	#FLASH_OPTKEYR_OPTKEYR
 
FLASH_OPTKEYR_OPTKEYR_Msk


	)

9721 
	#FLASH_OPTKEY1
 
FLASH_KEY1


	)

9722 
	#FLASH_OPTKEY2
 
FLASH_KEY2


	)

9725 
	#FLASH_SR_BSY_Pos
 (0U)

	)

9726 
	#FLASH_SR_BSY_Msk
 (0x1UL << 
FLASH_SR_BSY_Pos
Ë

	)

9727 
	#FLASH_SR_BSY
 
FLASH_SR_BSY_Msk


	)

9728 
	#FLASH_SR_PGERR_Pos
 (2U)

	)

9729 
	#FLASH_SR_PGERR_Msk
 (0x1UL << 
FLASH_SR_PGERR_Pos
Ë

	)

9730 
	#FLASH_SR_PGERR
 
FLASH_SR_PGERR_Msk


	)

9731 
	#FLASH_SR_WRPRTERR_Pos
 (4U)

	)

9732 
	#FLASH_SR_WRPRTERR_Msk
 (0x1UL << 
FLASH_SR_WRPRTERR_Pos
Ë

	)

9733 
	#FLASH_SR_WRPRTERR
 
FLASH_SR_WRPRTERR_Msk


	)

9734 
	#FLASH_SR_EOP_Pos
 (5U)

	)

9735 
	#FLASH_SR_EOP_Msk
 (0x1UL << 
FLASH_SR_EOP_Pos
Ë

	)

9736 
	#FLASH_SR_EOP
 
FLASH_SR_EOP_Msk


	)

9739 
	#FLASH_CR_PG_Pos
 (0U)

	)

9740 
	#FLASH_CR_PG_Msk
 (0x1UL << 
FLASH_CR_PG_Pos
Ë

	)

9741 
	#FLASH_CR_PG
 
FLASH_CR_PG_Msk


	)

9742 
	#FLASH_CR_PER_Pos
 (1U)

	)

9743 
	#FLASH_CR_PER_Msk
 (0x1UL << 
FLASH_CR_PER_Pos
Ë

	)

9744 
	#FLASH_CR_PER
 
FLASH_CR_PER_Msk


	)

9745 
	#FLASH_CR_MER_Pos
 (2U)

	)

9746 
	#FLASH_CR_MER_Msk
 (0x1UL << 
FLASH_CR_MER_Pos
Ë

	)

9747 
	#FLASH_CR_MER
 
FLASH_CR_MER_Msk


	)

9748 
	#FLASH_CR_OPTPG_Pos
 (4U)

	)

9749 
	#FLASH_CR_OPTPG_Msk
 (0x1UL << 
FLASH_CR_OPTPG_Pos
Ë

	)

9750 
	#FLASH_CR_OPTPG
 
FLASH_CR_OPTPG_Msk


	)

9751 
	#FLASH_CR_OPTER_Pos
 (5U)

	)

9752 
	#FLASH_CR_OPTER_Msk
 (0x1UL << 
FLASH_CR_OPTER_Pos
Ë

	)

9753 
	#FLASH_CR_OPTER
 
FLASH_CR_OPTER_Msk


	)

9754 
	#FLASH_CR_STRT_Pos
 (6U)

	)

9755 
	#FLASH_CR_STRT_Msk
 (0x1UL << 
FLASH_CR_STRT_Pos
Ë

	)

9756 
	#FLASH_CR_STRT
 
FLASH_CR_STRT_Msk


	)

9757 
	#FLASH_CR_LOCK_Pos
 (7U)

	)

9758 
	#FLASH_CR_LOCK_Msk
 (0x1UL << 
FLASH_CR_LOCK_Pos
Ë

	)

9759 
	#FLASH_CR_LOCK
 
FLASH_CR_LOCK_Msk


	)

9760 
	#FLASH_CR_OPTWRE_Pos
 (9U)

	)

9761 
	#FLASH_CR_OPTWRE_Msk
 (0x1UL << 
FLASH_CR_OPTWRE_Pos
Ë

	)

9762 
	#FLASH_CR_OPTWRE
 
FLASH_CR_OPTWRE_Msk


	)

9763 
	#FLASH_CR_ERRIE_Pos
 (10U)

	)

9764 
	#FLASH_CR_ERRIE_Msk
 (0x1UL << 
FLASH_CR_ERRIE_Pos
Ë

	)

9765 
	#FLASH_CR_ERRIE
 
FLASH_CR_ERRIE_Msk


	)

9766 
	#FLASH_CR_EOPIE_Pos
 (12U)

	)

9767 
	#FLASH_CR_EOPIE_Msk
 (0x1UL << 
FLASH_CR_EOPIE_Pos
Ë

	)

9768 
	#FLASH_CR_EOPIE
 
FLASH_CR_EOPIE_Msk


	)

9771 
	#FLASH_AR_FAR_Pos
 (0U)

	)

9772 
	#FLASH_AR_FAR_Msk
 (0xFFFFFFFFUL << 
FLASH_AR_FAR_Pos
Ë

	)

9773 
	#FLASH_AR_FAR
 
FLASH_AR_FAR_Msk


	)

9776 
	#FLASH_OBR_OPTERR_Pos
 (0U)

	)

9777 
	#FLASH_OBR_OPTERR_Msk
 (0x1UL << 
FLASH_OBR_OPTERR_Pos
Ë

	)

9778 
	#FLASH_OBR_OPTERR
 
FLASH_OBR_OPTERR_Msk


	)

9779 
	#FLASH_OBR_RDPRT_Pos
 (1U)

	)

9780 
	#FLASH_OBR_RDPRT_Msk
 (0x1UL << 
FLASH_OBR_RDPRT_Pos
Ë

	)

9781 
	#FLASH_OBR_RDPRT
 
FLASH_OBR_RDPRT_Msk


	)

9783 
	#FLASH_OBR_IWDG_SW_Pos
 (2U)

	)

9784 
	#FLASH_OBR_IWDG_SW_Msk
 (0x1UL << 
FLASH_OBR_IWDG_SW_Pos
Ë

	)

9785 
	#FLASH_OBR_IWDG_SW
 
FLASH_OBR_IWDG_SW_Msk


	)

9786 
	#FLASH_OBR_nRST_STOP_Pos
 (3U)

	)

9787 
	#FLASH_OBR_nRST_STOP_Msk
 (0x1UL << 
FLASH_OBR_nRST_STOP_Pos
Ë

	)

9788 
	#FLASH_OBR_nRST_STOP
 
FLASH_OBR_nRST_STOP_Msk


	)

9789 
	#FLASH_OBR_nRST_STDBY_Pos
 (4U)

	)

9790 
	#FLASH_OBR_nRST_STDBY_Msk
 (0x1UL << 
FLASH_OBR_nRST_STDBY_Pos
Ë

	)

9791 
	#FLASH_OBR_nRST_STDBY
 
FLASH_OBR_nRST_STDBY_Msk


	)

9792 
	#FLASH_OBR_USER_Pos
 (2U)

	)

9793 
	#FLASH_OBR_USER_Msk
 (0x7UL << 
FLASH_OBR_USER_Pos
Ë

	)

9794 
	#FLASH_OBR_USER
 
FLASH_OBR_USER_Msk


	)

9795 
	#FLASH_OBR_DATA0_Pos
 (10U)

	)

9796 
	#FLASH_OBR_DATA0_Msk
 (0xFFUL << 
FLASH_OBR_DATA0_Pos
Ë

	)

9797 
	#FLASH_OBR_DATA0
 
FLASH_OBR_DATA0_Msk


	)

9798 
	#FLASH_OBR_DATA1_Pos
 (18U)

	)

9799 
	#FLASH_OBR_DATA1_Msk
 (0xFFUL << 
FLASH_OBR_DATA1_Pos
Ë

	)

9800 
	#FLASH_OBR_DATA1
 
FLASH_OBR_DATA1_Msk


	)

9803 
	#FLASH_WRPR_WRP_Pos
 (0U)

	)

9804 
	#FLASH_WRPR_WRP_Msk
 (0xFFFFFFFFUL << 
FLASH_WRPR_WRP_Pos
Ë

	)

9805 
	#FLASH_WRPR_WRP
 
FLASH_WRPR_WRP_Msk


	)

9810 
	#FLASH_RDP_RDP_Pos
 (0U)

	)

9811 
	#FLASH_RDP_RDP_Msk
 (0xFFUL << 
FLASH_RDP_RDP_Pos
Ë

	)

9812 
	#FLASH_RDP_RDP
 
FLASH_RDP_RDP_Msk


	)

9813 
	#FLASH_RDP_nRDP_Pos
 (8U)

	)

9814 
	#FLASH_RDP_nRDP_Msk
 (0xFFUL << 
FLASH_RDP_nRDP_Pos
Ë

	)

9815 
	#FLASH_RDP_nRDP
 
FLASH_RDP_nRDP_Msk


	)

9818 
	#FLASH_USER_USER_Pos
 (16U)

	)

9819 
	#FLASH_USER_USER_Msk
 (0xFFUL << 
FLASH_USER_USER_Pos
Ë

	)

9820 
	#FLASH_USER_USER
 
FLASH_USER_USER_Msk


	)

9821 
	#FLASH_USER_nUSER_Pos
 (24U)

	)

9822 
	#FLASH_USER_nUSER_Msk
 (0xFFUL << 
FLASH_USER_nUSER_Pos
Ë

	)

9823 
	#FLASH_USER_nUSER
 
FLASH_USER_nUSER_Msk


	)

9826 
	#FLASH_DATA0_DATA0_Pos
 (0U)

	)

9827 
	#FLASH_DATA0_DATA0_Msk
 (0xFFUL << 
FLASH_DATA0_DATA0_Pos
Ë

	)

9828 
	#FLASH_DATA0_DATA0
 
FLASH_DATA0_DATA0_Msk


	)

9829 
	#FLASH_DATA0_nDATA0_Pos
 (8U)

	)

9830 
	#FLASH_DATA0_nDATA0_Msk
 (0xFFUL << 
FLASH_DATA0_nDATA0_Pos
Ë

	)

9831 
	#FLASH_DATA0_nDATA0
 
FLASH_DATA0_nDATA0_Msk


	)

9834 
	#FLASH_DATA1_DATA1_Pos
 (16U)

	)

9835 
	#FLASH_DATA1_DATA1_Msk
 (0xFFUL << 
FLASH_DATA1_DATA1_Pos
Ë

	)

9836 
	#FLASH_DATA1_DATA1
 
FLASH_DATA1_DATA1_Msk


	)

9837 
	#FLASH_DATA1_nDATA1_Pos
 (24U)

	)

9838 
	#FLASH_DATA1_nDATA1_Msk
 (0xFFUL << 
FLASH_DATA1_nDATA1_Pos
Ë

	)

9839 
	#FLASH_DATA1_nDATA1
 
FLASH_DATA1_nDATA1_Msk


	)

9842 
	#FLASH_WRP0_WRP0_Pos
 (0U)

	)

9843 
	#FLASH_WRP0_WRP0_Msk
 (0xFFUL << 
FLASH_WRP0_WRP0_Pos
Ë

	)

9844 
	#FLASH_WRP0_WRP0
 
FLASH_WRP0_WRP0_Msk


	)

9845 
	#FLASH_WRP0_nWRP0_Pos
 (8U)

	)

9846 
	#FLASH_WRP0_nWRP0_Msk
 (0xFFUL << 
FLASH_WRP0_nWRP0_Pos
Ë

	)

9847 
	#FLASH_WRP0_nWRP0
 
FLASH_WRP0_nWRP0_Msk


	)

9850 
	#FLASH_WRP1_WRP1_Pos
 (16U)

	)

9851 
	#FLASH_WRP1_WRP1_Msk
 (0xFFUL << 
FLASH_WRP1_WRP1_Pos
Ë

	)

9852 
	#FLASH_WRP1_WRP1
 
FLASH_WRP1_WRP1_Msk


	)

9853 
	#FLASH_WRP1_nWRP1_Pos
 (24U)

	)

9854 
	#FLASH_WRP1_nWRP1_Msk
 (0xFFUL << 
FLASH_WRP1_nWRP1_Pos
Ë

	)

9855 
	#FLASH_WRP1_nWRP1
 
FLASH_WRP1_nWRP1_Msk


	)

9858 
	#FLASH_WRP2_WRP2_Pos
 (0U)

	)

9859 
	#FLASH_WRP2_WRP2_Msk
 (0xFFUL << 
FLASH_WRP2_WRP2_Pos
Ë

	)

9860 
	#FLASH_WRP2_WRP2
 
FLASH_WRP2_WRP2_Msk


	)

9861 
	#FLASH_WRP2_nWRP2_Pos
 (8U)

	)

9862 
	#FLASH_WRP2_nWRP2_Msk
 (0xFFUL << 
FLASH_WRP2_nWRP2_Pos
Ë

	)

9863 
	#FLASH_WRP2_nWRP2
 
FLASH_WRP2_nWRP2_Msk


	)

9866 
	#FLASH_WRP3_WRP3_Pos
 (16U)

	)

9867 
	#FLASH_WRP3_WRP3_Msk
 (0xFFUL << 
FLASH_WRP3_WRP3_Pos
Ë

	)

9868 
	#FLASH_WRP3_WRP3
 
FLASH_WRP3_WRP3_Msk


	)

9869 
	#FLASH_WRP3_nWRP3_Pos
 (24U)

	)

9870 
	#FLASH_WRP3_nWRP3_Msk
 (0xFFUL << 
FLASH_WRP3_nWRP3_Pos
Ë

	)

9871 
	#FLASH_WRP3_nWRP3
 
FLASH_WRP3_nWRP3_Msk


	)

9888 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
ADC1
) || \

9889 ((
INSTANCE
Ë=
ADC2
))

	)

9891 
	#IS_ADC_COMMON_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC12_COMMON
)

	)

9893 
	#IS_ADC_MULTIMODE_MASTER_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

9895 
	#IS_ADC_DMA_CAPABILITY_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

9898 
	#IS_CAN_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CAN1
)

	)

9901 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CRC
)

	)

9906 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Ch™√l1
) || \

9907 ((
INSTANCE
Ë=
DMA1_Ch™√l2
) || \

9908 ((
INSTANCE
Ë=
DMA1_Ch™√l3
) || \

9909 ((
INSTANCE
Ë=
DMA1_Ch™√l4
) || \

9910 ((
INSTANCE
Ë=
DMA1_Ch™√l5
) || \

9911 ((
INSTANCE
Ë=
DMA1_Ch™√l6
) || \

9912 ((
INSTANCE
Ë=
DMA1_Ch™√l7
))

	)

9915 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
) || \

9916 ((
INSTANCE
Ë=
GPIOB
) || \

9917 ((
INSTANCE
Ë=
GPIOC
) || \

9918 ((
INSTANCE
Ë=
GPIOD
) || \

9919 ((
INSTANCE
Ë=
GPIOE
))

	)

9922 
	#IS_GPIO_AF_INSTANCE
(
INSTANCE
Ë
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

9925 
	#IS_GPIO_LOCK_INSTANCE
(
INSTANCE
Ë
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

9928 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
) || \

9929 ((
INSTANCE
Ë=
I2C2
))

	)

9932 
	#IS_SMBUS_ALL_INSTANCE
 
IS_I2C_ALL_INSTANCE


	)

9935 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
IWDG
)

	)

9938 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

9939 ((
INSTANCE
Ë=
SPI2
))

	)

9943 
	#IS_TIM_INSTANCE
(
INSTANCE
)\

9944 (((
INSTANCE
Ë=
TIM1
) || \

9945 ((
INSTANCE
Ë=
TIM2
) || \

9946 ((
INSTANCE
Ë=
TIM3
) || \

9947 ((
INSTANCE
Ë=
TIM4
))

	)

9949 
	#IS_TIM_ADVANCED_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM1
)

	)

9951 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
)\

9952 (((
INSTANCE
Ë=
TIM1
) || \

9953 ((
INSTANCE
Ë=
TIM2
) || \

9954 ((
INSTANCE
Ë=
TIM3
) || \

9955 ((
INSTANCE
Ë=
TIM4
))

	)

9957 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
)\

9958 (((
INSTANCE
Ë=
TIM1
) || \

9959 ((
INSTANCE
Ë=
TIM2
) || \

9960 ((
INSTANCE
Ë=
TIM3
) || \

9961 ((
INSTANCE
Ë=
TIM4
))

	)

9963 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
)\

9964 (((
INSTANCE
Ë=
TIM1
) || \

9965 ((
INSTANCE
Ë=
TIM2
) || \

9966 ((
INSTANCE
Ë=
TIM3
) || \

9967 ((
INSTANCE
Ë=
TIM4
))

	)

9969 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
)\

9970 (((
INSTANCE
Ë=
TIM1
) || \

9971 ((
INSTANCE
Ë=
TIM2
) || \

9972 ((
INSTANCE
Ë=
TIM3
) || \

9973 ((
INSTANCE
Ë=
TIM4
))

	)

9975 
	#IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
INSTANCE
)\

9976 (((
INSTANCE
Ë=
TIM1
) || \

9977 ((
INSTANCE
Ë=
TIM2
) || \

9978 ((
INSTANCE
Ë=
TIM3
) || \

9979 ((
INSTANCE
Ë=
TIM4
))

	)

9981 
	#IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
INSTANCE
)\

9982 (((
INSTANCE
Ë=
TIM1
) || \

9983 ((
INSTANCE
Ë=
TIM2
) || \

9984 ((
INSTANCE
Ë=
TIM3
) || \

9985 ((
INSTANCE
Ë=
TIM4
))

	)

9987 
	#IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
INSTANCE
)\

9988 (((
INSTANCE
Ë=
TIM1
) || \

9989 ((
INSTANCE
Ë=
TIM2
) || \

9990 ((
INSTANCE
Ë=
TIM3
) || \

9991 ((
INSTANCE
Ë=
TIM4
))

	)

9993 
	#IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
INSTANCE
)\

9994 (((
INSTANCE
Ë=
TIM1
) || \

9995 ((
INSTANCE
Ë=
TIM2
) || \

9996 ((
INSTANCE
Ë=
TIM3
) || \

9997 ((
INSTANCE
Ë=
TIM4
))

	)

9999 
	#IS_TIM_OCXREF_CLEAR_INSTANCE
(
INSTANCE
)\

10000 (((
INSTANCE
Ë=
TIM1
) || \

10001 ((
INSTANCE
Ë=
TIM2
) || \

10002 ((
INSTANCE
Ë=
TIM3
) || \

10003 ((
INSTANCE
Ë=
TIM4
))

	)

10005 
	#IS_TIM_ENCODER_INTERFACE_INSTANCE
(
INSTANCE
)\

10006 (((
INSTANCE
Ë=
TIM1
) || \

10007 ((
INSTANCE
Ë=
TIM2
) || \

10008 ((
INSTANCE
Ë=
TIM3
) || \

10009 ((
INSTANCE
Ë=
TIM4
))

	)

10011 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
)\

10012 (((
INSTANCE
Ë=
TIM1
) || \

10013 ((
INSTANCE
Ë=
TIM2
) || \

10014 ((
INSTANCE
Ë=
TIM3
) || \

10015 ((
INSTANCE
Ë=
TIM4
))

	)

10017 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
)\

10018 (((
INSTANCE
Ë=
TIM1
) || \

10019 ((
INSTANCE
Ë=
TIM2
) || \

10020 ((
INSTANCE
Ë=
TIM3
) || \

10021 ((
INSTANCE
Ë=
TIM4
))

	)

10023 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
)\

10024 (((
INSTANCE
Ë=
TIM1
) || \

10025 ((
INSTANCE
Ë=
TIM2
) || \

10026 ((
INSTANCE
Ë=
TIM3
) || \

10027 ((
INSTANCE
Ë=
TIM4
))

	)

10029 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
)\

10030 (((
INSTANCE
Ë=
TIM1
) || \

10031 ((
INSTANCE
Ë=
TIM2
) || \

10032 ((
INSTANCE
Ë=
TIM3
) || \

10033 ((
INSTANCE
Ë=
TIM4
))

	)

10035 
	#IS_TIM_BREAK_INSTANCE
(
INSTANCE
)\

10036 ((
INSTANCE
Ë=
TIM1
)

	)

10038 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

10039 ((((
INSTANCE
Ë=
TIM1
) && \

10040 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10041 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10042 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10043 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

10045 (((
INSTANCE
Ë=
TIM2
) && \

10046 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10047 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10048 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10049 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

10051 (((
INSTANCE
Ë=
TIM3
) && \

10052 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10053 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10054 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10055 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

10057 (((
INSTANCE
Ë=
TIM4
) && \

10058 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10059 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10060 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10061 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))))

	)

10063 
	#IS_TIM_CCXN_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

10064 (((
INSTANCE
Ë=
TIM1
) && \

10065 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10066 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10067 ((
CHANNEL
Ë=
TIM_CHANNEL_3
)))

	)

10069 
	#IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
INSTANCE
)\

10070 (((
INSTANCE
Ë=
TIM1
) || \

10071 ((
INSTANCE
Ë=
TIM2
) || \

10072 ((
INSTANCE
Ë=
TIM3
) || \

10073 ((
INSTANCE
Ë=
TIM4
))

	)

10075 
	#IS_TIM_REPETITION_COUNTER_INSTANCE
(
INSTANCE
)\

10076 ((
INSTANCE
Ë=
TIM1
)

	)

10078 
	#IS_TIM_CLOCK_DIVISION_INSTANCE
(
INSTANCE
)\

10079 (((
INSTANCE
Ë=
TIM1
) || \

10080 ((
INSTANCE
Ë=
TIM2
) || \

10081 ((
INSTANCE
Ë=
TIM3
) || \

10082 ((
INSTANCE
Ë=
TIM4
))

	)

10084 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
)\

10085 (((
INSTANCE
Ë=
TIM1
) || \

10086 ((
INSTANCE
Ë=
TIM2
) || \

10087 ((
INSTANCE
Ë=
TIM3
) || \

10088 ((
INSTANCE
Ë=
TIM4
))

	)

10090 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
)\

10091 (((
INSTANCE
Ë=
TIM1
) || \

10092 ((
INSTANCE
Ë=
TIM2
) || \

10093 ((
INSTANCE
Ë=
TIM3
) || \

10094 ((
INSTANCE
Ë=
TIM4
))

	)

10096 
	#IS_TIM_COMMUTATION_EVENT_INSTANCE
(
INSTANCE
)\

10097 ((
INSTANCE
Ë=
TIM1
)

	)

10099 
	#IS_TIM_ETR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

10100 ((
INSTANCE
Ë=
TIM2
) || \

10101 ((
INSTANCE
Ë=
TIM3
) || \

10102 ((
INSTANCE
Ë=
TIM4
))

	)

10104 
	#IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

10105 ((
INSTANCE
Ë=
TIM2
) || \

10106 ((
INSTANCE
Ë=
TIM3
) || \

10107 ((
INSTANCE
Ë=
TIM4
))

	)

10109 
	#IS_TIM_32B_COUNTER_INSTANCE
(
INSTANCE
Ë0U

	)

10115 
	#IS_USART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10116 ((
INSTANCE
Ë=
USART2
) || \

10117 ((
INSTANCE
Ë=
USART3
))

	)

10120 
	#IS_UART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10121 ((
INSTANCE
Ë=
USART2
) || \

10122 ((
INSTANCE
Ë=
USART3
))

	)

10125 
	#IS_UART_HALFDUPLEX_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10126 ((
INSTANCE
Ë=
USART2
) || \

10127 ((
INSTANCE
Ë=
USART3
))

	)

10130 
	#IS_UART_LIN_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10131 ((
INSTANCE
Ë=
USART2
) || \

10132 ((
INSTANCE
Ë=
USART3
))

	)

10135 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10136 ((
INSTANCE
Ë=
USART2
) || \

10137 ((
INSTANCE
Ë=
USART3
))

	)

10140 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10141 ((
INSTANCE
Ë=
USART2
) || \

10142 ((
INSTANCE
Ë=
USART3
))

	)

10145 
	#IS_IRDA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10146 ((
INSTANCE
Ë=
USART2
) || \

10147 ((
INSTANCE
Ë=
USART3
))

	)

10150 
	#IS_UART_MULTIPROCESSOR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10151 ((
INSTANCE
Ë=
USART2
) || \

10152 ((
INSTANCE
Ë=
USART3
))

	)

10155 
	#IS_UART_DMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10156 ((
INSTANCE
Ë=
USART2
) || \

10157 ((
INSTANCE
Ë=
USART3
))

	)

10160 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RTC
)

	)

10163 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
WWDG
)

	)

10166 
	#IS_PCD_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
USB
)

	)

10170 
	#RCC_HSE_MIN
 4000000U

	)

10171 
	#RCC_HSE_MAX
 16000000U

	)

10173 
	#RCC_MAX_FREQUENCY
 72000000U

	)

10187 
	#ADC1_IRQn
 
ADC1_2_IRQn


	)

10188 
	#TIM9_IRQn
 
TIM1_BRK_IRQn


	)

10189 
	#TIM1_BRK_TIM9_IRQn
 
TIM1_BRK_IRQn


	)

10190 
	#TIM1_BRK_TIM15_IRQn
 
TIM1_BRK_IRQn


	)

10191 
	#TIM1_TRG_COM_TIM17_IRQn
 
TIM1_TRG_COM_IRQn


	)

10192 
	#TIM1_TRG_COM_TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

10193 
	#TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

10194 
	#TIM10_IRQn
 
TIM1_UP_IRQn


	)

10195 
	#TIM1_UP_TIM10_IRQn
 
TIM1_UP_IRQn


	)

10196 
	#TIM1_UP_TIM16_IRQn
 
TIM1_UP_IRQn


	)

10197 
	#OTG_FS_WKUP_IRQn
 
USBWakeUp_IRQn


	)

10198 
	#CEC_IRQn
 
USBWakeUp_IRQn


	)

10199 
	#USB_HP_IRQn
 
USB_HP_CAN1_TX_IRQn


	)

10200 
	#CAN1_TX_IRQn
 
USB_HP_CAN1_TX_IRQn


	)

10201 
	#CAN1_RX0_IRQn
 
USB_LP_CAN1_RX0_IRQn


	)

10202 
	#USB_LP_IRQn
 
USB_LP_CAN1_RX0_IRQn


	)

10206 
	#ADC1_IRQH™dÀr
 
ADC1_2_IRQH™dÀr


	)

10207 
	#TIM9_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

10208 
	#TIM1_BRK_TIM9_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

10209 
	#TIM1_BRK_TIM15_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

10210 
	#TIM1_TRG_COM_TIM17_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

10211 
	#TIM1_TRG_COM_TIM11_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

10212 
	#TIM11_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

10213 
	#TIM10_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

10214 
	#TIM1_UP_TIM10_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

10215 
	#TIM1_UP_TIM16_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

10216 
	#OTG_FS_WKUP_IRQH™dÀr
 
USBWakeUp_IRQH™dÀr


	)

10217 
	#CEC_IRQH™dÀr
 
USBWakeUp_IRQH™dÀr


	)

10218 
	#USB_HP_IRQH™dÀr
 
USB_HP_CAN1_TX_IRQH™dÀr


	)

10219 
	#CAN1_TX_IRQH™dÀr
 
USB_HP_CAN1_TX_IRQH™dÀr


	)

10220 
	#CAN1_RX0_IRQH™dÀr
 
USB_LP_CAN1_RX0_IRQH™dÀr


	)

10221 
	#USB_LP_IRQH™dÀr
 
USB_LP_CAN1_RX0_IRQH™dÀr


	)

10233 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h

37 #i‚de‡
__STM32F1XX_H


38 
	#__STM32F1XX_H


	)

40 #ifde‡
__˝lu•lus


51 #i‡!
deföed
 (
STM32F1
)

52 
	#STM32F1


	)

59 #i‡!
deföed
 (
STM32F100xB
Ë&& !deföed (
STM32F100xE
Ë&& !deföed (
STM32F101x6
) && \

60 !
deföed
 (
STM32F101xB
Ë&& !deföed (
STM32F101xE
Ë&& !deföed (
STM32F101xG
Ë&& !deföed (
STM32F102x6
Ë&& !deföed (
STM32F102xB
Ë&& !deföed (
STM32F103x6
) && \

61 !
deföed
 (
STM32F103xB
Ë&& !deföed (
STM32F103xE
Ë&& !deföed (
STM32F103xG
Ë&& !deföed (
STM32F105xC
Ë&& !
	$deföed
 (
STM32F107xC
)

82 #i‡!
	`deföed
 (
USE_HAL_DRIVER
)

94 
	#__STM32F1_CMSIS_VERSION_MAIN
 (0x04Ë

	)

95 
	#__STM32F1_CMSIS_VERSION_SUB1
 (0x03Ë

	)

96 
	#__STM32F1_CMSIS_VERSION_SUB2
 (0x05Ë

	)

97 
	#__STM32F1_CMSIS_VERSION_RC
 (0x00Ë

	)

98 
	#__STM32F1_CMSIS_VERSION
 ((
__STM32F1_CMSIS_VERSION_MAIN
 << 24)\

99 |(
__STM32F1_CMSIS_VERSION_SUB1
 << 16)\

100 |(
__STM32F1_CMSIS_VERSION_SUB2
 << 8 )\

101 |(
__STM32F1_CMSIS_VERSION_RC
))

	)

111 #i‡
	`deföed
(
STM32F100xB
)

112 
	~"°m32f100xb.h
"

113 #ñi‡
	`deföed
(
STM32F100xE
)

114 
	~"°m32f100xe.h
"

115 #ñi‡
	`deföed
(
STM32F101x6
)

116 
	~"°m32f101x6.h
"

117 #ñi‡
	`deföed
(
STM32F101xB
)

118 
	~"°m32f101xb.h
"

119 #ñi‡
	`deföed
(
STM32F101xE
)

120 
	~"°m32f101xe.h
"

121 #ñi‡
	`deföed
(
STM32F101xG
)

122 
	~"°m32f101xg.h
"

123 #ñi‡
	`deföed
(
STM32F102x6
)

124 
	~"°m32f102x6.h
"

125 #ñi‡
	`deföed
(
STM32F102xB
)

126 
	~"°m32f102xb.h
"

127 #ñi‡
	`deföed
(
STM32F103x6
)

128 
	~"°m32f103x6.h
"

129 #ñi‡
	`deföed
(
STM32F103xB
)

130 
	~"°m32f103xb.h
"

131 #ñi‡
	`deföed
(
STM32F103xE
)

132 
	~"°m32f103xe.h
"

133 #ñi‡
	`deföed
(
STM32F103xG
)

134 
	~"°m32f103xg.h
"

135 #ñi‡
	`deföed
(
STM32F105xC
)

136 
	~"°m32f105xc.h
"

137 #ñi‡
	`deföed
(
STM32F107xC
)

138 
	~"°m32f107xc.h
"

152 
RESET
 = 0,

153 
SET
 = !
RESET


154 } 
	tFœgSètus
, 
	tITSètus
;

158 
DISABLE
 = 0,

159 
ENABLE
 = !
DISABLE


160 } 
	tFun˘i⁄ÆSèã
;

161 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

165 
SUCCESS
 = 0U,

166 
ERROR
 = !
SUCCESS


167 } 
	tEº‹Sètus
;

177 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

179 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

181 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

183 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

185 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

187 
	#READ_REG
(
REG
Ë((REG))

	)

189 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

191 
	#POSITION_VAL
(
VAL
Ë(
	`__CLZ
(
	`__RBIT
(VAL)))

	)

195 
	#ATOMIC_SET_BIT
(
REG
, 
BIT
) \

197 
uöt32_t
 
vÆ
; \

199 
vÆ
 = 
	`__LDREXW
((
__IO
 
uöt32_t
 *)&(
REG
)Ë| (
BIT
); \

200 } (
	`__STREXW
(
vÆ
,(
__IO
 
uöt32_t
 *)&(
REG
))) != 0U); \

201 } 0)

	)

204 
	#ATOMIC_CLEAR_BIT
(
REG
, 
BIT
) \

206 
uöt32_t
 
vÆ
; \

208 
vÆ
 = 
	`__LDREXW
((
__IO
 
uöt32_t
 *)&(
REG
)Ë& ~(
BIT
); \

209 } (
	`__STREXW
(
vÆ
,(
__IO
 
uöt32_t
 *)&(
REG
))) != 0U); \

210 } 0)

	)

213 
	#ATOMIC_MODIFY_REG
(
REG
, 
CLEARMSK
, 
SETMASK
) \

215 
uöt32_t
 
vÆ
; \

217 
vÆ
 = (
	`__LDREXW
((
__IO
 
uöt32_t
 *)&(
REG
)Ë& ~(
CLEARMSK
)Ë| (
SETMASK
); \

218 } (
	`__STREXW
(
vÆ
,(
__IO
 
uöt32_t
 *)&(
REG
))) != 0U); \

219 } 0)

	)

222 
	#ATOMIC_SETH_BIT
(
REG
, 
BIT
) \

224 
uöt16_t
 
vÆ
; \

226 
vÆ
 = 
	`__LDREXH
((
__IO
 
uöt16_t
 *)&(
REG
)Ë| (
BIT
); \

227 } (
	`__STREXH
(
vÆ
,(
__IO
 
uöt16_t
 *)&(
REG
))) != 0U); \

228 } 0)

	)

231 
	#ATOMIC_CLEARH_BIT
(
REG
, 
BIT
) \

233 
uöt16_t
 
vÆ
; \

235 
vÆ
 = 
	`__LDREXH
((
__IO
 
uöt16_t
 *)&(
REG
)Ë& ~(
BIT
); \

236 } (
	`__STREXH
(
vÆ
,(
__IO
 
uöt16_t
 *)&(
REG
))) != 0U); \

237 } 0)

	)

240 
	#ATOMIC_MODIFYH_REG
(
REG
, 
CLEARMSK
, 
SETMASK
) \

242 
uöt16_t
 
vÆ
; \

244 
vÆ
 = (
	`__LDREXH
((
__IO
 
uöt16_t
 *)&(
REG
)Ë& ~(
CLEARMSK
)Ë| (
SETMASK
); \

245 } (
	`__STREXH
(
vÆ
,(
__IO
 
uöt16_t
 *)&(
REG
))) != 0U); \

246 } 0)

	)

253 #i‡
	`deföed
 (
USE_HAL_DRIVER
)

254 
	~"°m32f1xx_hÆ.h
"

258 #ifde‡
__˝lu•lus


259 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h

30 #i‚de‡
__SYSTEM_STM32F10X_H


31 
	#__SYSTEM_STM32F10X_H


	)

33 #ifde‡
__˝lu•lus


50 
uöt32_t
 
Sy°emC‹eClock
;

51 c⁄° 
uöt8_t
 
AHBPªscTabÀ
[16U];

52 c⁄° 
uöt8_t
 
APBPªscTabÀ
[8U];

78 
Sy°emInô
();

79 
Sy°emC‹eClockUpd©e
();

84 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_armcc.h

25 #i‚de‡
__CMSIS_ARMCC_H


26 
	#__CMSIS_ARMCC_H


	)

29 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 400677)

34 #i‡((
deföed
 (
__TARGET_ARCH_6_M
 ) && (__TARGET_ARCH_6_M == 1)) || \

35 (
deföed
 (
__TARGET_ARCH_6S_M
 ) && (
	g__TARGET_ARCH_6S_M
 == 1)) )

36 
	#__ARM_ARCH_6M__
 1

	)

39 #i‡(
deföed
 (
__TARGET_ARCH_7_M
 ) && (__TARGET_ARCH_7_M == 1))

40 
	#__ARM_ARCH_7M__
 1

	)

43 #i‡(
deföed
 (
__TARGET_ARCH_7E_M
) && (__TARGET_ARCH_7E_M == 1))

44 
	#__ARM_ARCH_7EM__
 1

	)

52 #i‚de‡ 
__ASM


53 
	#__ASM
 
__asm


	)

55 #i‚de‡ 
__INLINE


56 
	#__INLINE
 
__ölöe


	)

58 #i‚de‡ 
__STATIC_INLINE


59 
	#__STATIC_INLINE
 
__ölöe


	)

61 #i‚de‡ 
__STATIC_FORCEINLINE


62 
	#__STATIC_FORCEINLINE
 
__f‹˚ölöe


	)

64 #i‚de‡ 
__NO_RETURN


65 
	#__NO_RETURN
 
	`__de˛•ec
(
n‹ëu∫
)

	)

67 #i‚de‡ 
__USED


68 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

70 #i‚de‡ 
__WEAK


71 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

73 #i‚de‡ 
__PACKED


74 
	#__PACKED
 
	`__©åibuã__
((
∑cked
))

	)

76 #i‚de‡ 
__PACKED_STRUCT


77 
	#__PACKED_STRUCT
 
__∑cked
 

	)

79 #i‚de‡ 
__PACKED_UNION


80 
	#__PACKED_UNION
 
__∑cked
 

	)

82 #i‚de‡ 
__UNALIGNED_UINT32


83 
	#__UNALIGNED_UINT32
(
x
Ë(*((
__∑cked
 
uöt32_t
 *)(x)))

	)

85 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


86 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë((*((
__∑cked
 
uöt16_t
 *)◊ddr))Ë(vÆ))

	)

88 #i‚de‡ 
__UNALIGNED_UINT16_READ


89 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(*((c⁄° 
__∑cked
 
uöt16_t
 *)◊ddr)))

	)

91 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


92 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë((*((
__∑cked
 
uöt32_t
 *)◊ddr))Ë(vÆ))

	)

94 #i‚de‡ 
__UNALIGNED_UINT32_READ


95 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(*((c⁄° 
__∑cked
 
uöt32_t
 *)◊ddr)))

	)

97 #i‚de‡ 
__ALIGNED


98 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

100 #i‚de‡ 
__RESTRICT


101 
	#__RESTRICT
 
__ª°ri˘


	)

130 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

132 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

133 (
__ªgC⁄åﬁ
);

134 
	}
}

142 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

144 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

145 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

146 
	}
}

154 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

156 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

157 (
__ªgIPSR
);

158 
	}
}

166 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

168 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

169 (
__ªgAPSR
);

170 
	}
}

178 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

180 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

181 (
__ªgXPSR
);

182 
	}
}

190 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

192 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

193 (
__ªgPro˚ssSèckPoöãr
);

194 
	}
}

202 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

204 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

205 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

206 
	}
}

214 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

216 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

217 (
__ªgMaöSèckPoöãr
);

218 
	}
}

226 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

228 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

229 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

230 
	}
}

238 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

240 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

241 (
__ªgPriMask
);

242 
	}
}

250 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

252 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

253 
__ªgPriMask
 = (
¥iMask
);

254 
	}
}

257 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

258 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) )

265 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

273 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

281 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

283 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

284 (
__ªgBa£Pri
);

285 
	}
}

293 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

295 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

296 
__ªgBa£Pri
 = (
ba£Pri
 & 0xFFU);

297 
	}
}

306 
__STATIC_INLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

308 
uöt32_t
 
__ªgBa£PriMax
 
	`__ASM
("basepri_max");

309 
__ªgBa£PriMax
 = (
ba£Pri
 & 0xFFU);

310 
	}
}

318 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

320 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

321 (
__ªgFau…Mask
);

322 
	}
}

330 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

332 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

333 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1U);

334 
	}
}

337 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

345 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

347 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

348 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

349 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

350 (
__ªgÂs¸
);

354 
	}
}

362 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

364 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

365 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

366 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

367 
__ªgÂs¸
 = (
Âs¸
);

369 ()
Âs¸
;

371 
	}
}

387 
	#__NOP
 
__n›


	)

394 
	#__WFI
 
__wfi


	)

402 
	#__WFE
 
__w„


	)

409 
	#__SEV
 
__£v


	)

418 
	#__ISB
() do {\

419 
	`__scheduÀ_b¨rõr
();\

420 
	`__isb
(0xF);\

421 
	`__scheduÀ_b¨rõr
();\

422 } 0U)

	)

429 
	#__DSB
() do {\

430 
	`__scheduÀ_b¨rõr
();\

431 
	`__dsb
(0xF);\

432 
	`__scheduÀ_b¨rõr
();\

433 } 0U)

	)

440 
	#__DMB
() do {\

441 
	`__scheduÀ_b¨rõr
();\

442 
	`__dmb
(0xF);\

443 
	`__scheduÀ_b¨rõr
();\

444 } 0U)

	)

453 
	#__REV
 
__ªv


	)

462 #i‚de‡
__NO_EMBEDDED_ASM


463 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

465 
ªv16
 
r0
,Ñ0

466 
bx
 
Ã


467 
	}
}

477 #i‚de‡
__NO_EMBEDDED_ASM


478 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt16_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

480 
ªvsh
 
r0
,Ñ0

481 
bx
 
Ã


482 
	}
}

493 
	#__ROR
 
__r‹


	)

503 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

512 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

513 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) )

514 
	#__RBIT
 
__rbô


	)

516 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

518 
uöt32_t
 
ªsu…
;

519 
uöt32_t
 
s
 = (4U * 8U) - 1U;

521 
ªsu…
 = 
vÆue
;

522 
vÆue
 >>= 1U; value != 0U; value >>= 1U)

524 
ªsu…
 <<= 1U;

525 
ªsu…
 |
vÆue
 & 1U;

526 
s
--;

528 
ªsu…
 <<
s
;

529  
ªsu…
;

530 
	}
}

540 
	#__CLZ
 
__˛z


	)

543 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

544 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) )

552 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

553 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

555 
	#__LDREXB
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt8_t
 ) 
	`__ldªx
’å)Ë_Pøgma("p›")

	)

565 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

566 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

568 
	#__LDREXH
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt16_t
Ë
	`__ldªx
’å)Ë_Pøgma("p›")

	)

578 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

579 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

581 
	#__LDREXW
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt32_t
 ) 
	`__ldªx
’å)Ë_Pøgma("p›")

	)

593 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

594 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

596 
	#__STREXB
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

608 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

609 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

611 
	#__STREXH
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

623 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

624 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

626 
	#__STREXW
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

634 
	#__CLREX
 
__˛ªx


	)

644 
	#__SSAT
 
__sßt


	)

654 
	#__USAT
 
__ußt


	)

664 #i‚de‡
__NO_EMBEDDED_ASM


665 
__©åibuã__
((
£˘i⁄
(".ºx_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

667 
ºx
 
r0
,Ñ0

668 
bx
 
Ã


669 
	}
}

679 
	#__LDRBT
(
±r
Ë((
uöt8_t
 ) 
	`__ldπ
’å))

	)

688 
	#__LDRHT
(
±r
Ë((
uöt16_t
Ë
	`__ldπ
’å))

	)

697 
	#__LDRT
(
±r
Ë((
uöt32_t
 ) 
	`__ldπ
’å))

	)

706 
	#__STRBT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

715 
	#__STRHT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

724 
	#__STRT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

727 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

736 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

738 i‡((
ßt
 >= 1U) && (sat <= 32U))

740 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

741 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

742 i‡(
vÆ
 > 
max
)

744  
max
;

746 i‡(
vÆ
 < 
mö
)

748  
mö
;

751  
vÆ
;

752 
	}
}

761 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

763 i‡(
ßt
 <= 31U)

765 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

766 i‡(
vÆ
 > (
öt32_t
)
max
)

768  
max
;

770 i‡(
vÆ
 < 0)

775  (
uöt32_t
)
vÆ
;

776 
	}
}

779 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

790 #i‡((
deföed
 (
__ARM_ARCH_7EM__
) && (__ARM_ARCH_7EM__ == 1)) )

792 
	#__SADD8
 
__ßdd8


	)

793 
	#__QADD8
 
__qadd8


	)

794 
	#__SHADD8
 
__shadd8


	)

795 
	#__UADD8
 
__uadd8


	)

796 
	#__UQADD8
 
__uqadd8


	)

797 
	#__UHADD8
 
__uhadd8


	)

798 
	#__SSUB8
 
__ssub8


	)

799 
	#__QSUB8
 
__qsub8


	)

800 
	#__SHSUB8
 
__shsub8


	)

801 
	#__USUB8
 
__usub8


	)

802 
	#__UQSUB8
 
__uqsub8


	)

803 
	#__UHSUB8
 
__uhsub8


	)

804 
	#__SADD16
 
__ßdd16


	)

805 
	#__QADD16
 
__qadd16


	)

806 
	#__SHADD16
 
__shadd16


	)

807 
	#__UADD16
 
__uadd16


	)

808 
	#__UQADD16
 
__uqadd16


	)

809 
	#__UHADD16
 
__uhadd16


	)

810 
	#__SSUB16
 
__ssub16


	)

811 
	#__QSUB16
 
__qsub16


	)

812 
	#__SHSUB16
 
__shsub16


	)

813 
	#__USUB16
 
__usub16


	)

814 
	#__UQSUB16
 
__uqsub16


	)

815 
	#__UHSUB16
 
__uhsub16


	)

816 
	#__SASX
 
__ßsx


	)

817 
	#__QASX
 
__qasx


	)

818 
	#__SHASX
 
__shasx


	)

819 
	#__UASX
 
__uasx


	)

820 
	#__UQASX
 
__uqasx


	)

821 
	#__UHASX
 
__uhasx


	)

822 
	#__SSAX
 
__sßx


	)

823 
	#__QSAX
 
__qßx


	)

824 
	#__SHSAX
 
__shßx


	)

825 
	#__USAX
 
__ußx


	)

826 
	#__UQSAX
 
__uqßx


	)

827 
	#__UHSAX
 
__uhßx


	)

828 
	#__USAD8
 
__ußd8


	)

829 
	#__USADA8
 
__ußda8


	)

830 
	#__SSAT16
 
__sßt16


	)

831 
	#__USAT16
 
__ußt16


	)

832 
	#__UXTB16
 
__uxtb16


	)

833 
	#__UXTAB16
 
__uxèb16


	)

834 
	#__SXTB16
 
__sxtb16


	)

835 
	#__SXTAB16
 
__sxèb16


	)

836 
	#__SMUAD
 
__smuad


	)

837 
	#__SMUADX
 
__smuadx


	)

838 
	#__SMLAD
 
__smœd


	)

839 
	#__SMLADX
 
__smœdx


	)

840 
	#__SMLALD
 
__smœld


	)

841 
	#__SMLALDX
 
__smœldx


	)

842 
	#__SMUSD
 
__smusd


	)

843 
	#__SMUSDX
 
__smusdx


	)

844 
	#__SMLSD
 
__smlsd


	)

845 
	#__SMLSDX
 
__smlsdx


	)

846 
	#__SMLSLD
 
__sml¶d


	)

847 
	#__SMLSLDX
 
__sml¶dx


	)

848 
	#__SEL
 
__£l


	)

849 
	#__QADD
 
__qadd


	)

850 
	#__QSUB
 
__qsub


	)

852 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

853 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

855 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

856 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

858 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1) * (ARG2)) + \

859 ((
öt64_t
)(
ARG3
Ë<< 32UËË>> 32U))

	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_armclang.h

27 #i‚de‡
__CMSIS_ARMCLANG_H


28 
	#__CMSIS_ARMCLANG_H


	)

30 #¥agm®
˛™g
 
sy°em_hódî


32 #i‚de‡
__ARM_COMPAT_H


33 
	~<¨m_com∑t.h
>

37 #i‚de‡ 
__ASM


38 
	#__ASM
 
__asm


	)

40 #i‚de‡ 
__INLINE


41 
	#__INLINE
 
__ölöe


	)

43 #i‚de‡ 
__STATIC_INLINE


44 
	#__STATIC_INLINE
 
__ölöe


	)

46 #i‚de‡ 
__STATIC_FORCEINLINE


47 
	#__STATIC_FORCEINLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
__ölöe


	)

49 #i‚de‡ 
__NO_RETURN


50 
	#__NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

52 #i‚de‡ 
__USED


53 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

55 #i‚de‡ 
__WEAK


56 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

58 #i‚de‡ 
__PACKED


59 
	#__PACKED
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

61 #i‚de‡ 
__PACKED_STRUCT


62 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

64 #i‚de‡ 
__PACKED_UNION


65 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

67 #i‚de‡ 
__UNALIGNED_UINT32


68 #¥agm®
˛™g
 
dügno°ic
 
push


69 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

71 
__©åibuã__
((
∑cked
)Ë
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

72 #¥agm®
˛™g
 
dügno°ic
 
p›


73 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

75 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

79 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

80 #¥agm®
˛™g
 
dügno°ic
 
p›


81 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

83 #i‚de‡ 
__UNALIGNED_UINT16_READ


84 #¥agm®
˛™g
 
dügno°ic
 
push


85 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

87 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

88 #¥agm®
˛™g
 
dügno°ic
 
p›


89 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

91 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


92 #¥agm®
˛™g
 
dügno°ic
 
push


93 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

95 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

96 #¥agm®
˛™g
 
dügno°ic
 
p›


97 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

99 #i‚de‡ 
__UNALIGNED_UINT32_READ


100 #¥agm®
˛™g
 
dügno°ic
 
push


101 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

103 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

104 #¥agm®
˛™g
 
dügno°ic
 
p›


105 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

107 #i‚de‡ 
__ALIGNED


108 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

110 #i‚de‡ 
__RESTRICT


111 
	#__RESTRICT
 
__ª°ri˘


	)

142 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_CONTROL
()

144 
uöt32_t
 
ªsu…
;

146 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

147 (
ªsu…
);

148 
	}
}

151 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

157 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

159 
uöt32_t
 
ªsu…
;

161 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ_ns" : "Ù" (
ªsu…
) );

162 (
ªsu…
);

163 
	}
}

172 
__STATIC_FORCEINLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

174 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

175 
	}
}

178 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

184 
__STATIC_FORCEINLINE
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
c⁄åﬁ
)

186 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ_ns, %0" : : "r" (
c⁄åﬁ
) : "memory");

187 
	}
}

196 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_IPSR
()

198 
uöt32_t
 
ªsu…
;

200 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

201 (
ªsu…
);

202 
	}
}

210 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_APSR
()

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

215 (
ªsu…
);

216 
	}
}

224 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_xPSR
()

226 
uöt32_t
 
ªsu…
;

228 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

229 (
ªsu…
);

230 
	}
}

238 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSP
()

240 
uöt32_t
 
ªsu…
;

242 
__ASM
 vﬁ©ûê("MRS %0,Ö•" : "Ù" (
ªsu…
) );

243 (
ªsu…
);

244 
	}
}

247 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

253 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

255 
uöt32_t
 
ªsu…
;

257 
__ASM
 vﬁ©ûê("MRS %0,Ö•_ns" : "Ù" (
ªsu…
) );

258 (
ªsu…
);

259 
	}
}

268 
__STATIC_FORCEINLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

270 
__ASM
 vﬁ©ûê("MSRÖ•, %0" : : "r" (
t›OfProcSèck
) : );

271 
	}
}

274 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

280 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
t›OfProcSèck
)

282 
__ASM
 vﬁ©ûê("MSRÖ•_ns, %0" : : "r" (
t›OfProcSèck
) : );

283 
	}
}

292 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSP
()

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("MRS %0, m•" : "Ù" (
ªsu…
) );

297 (
ªsu…
);

298 
	}
}

301 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

307 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

309 
uöt32_t
 
ªsu…
;

311 
__ASM
 vﬁ©ûê("MRS %0, m•_ns" : "Ù" (
ªsu…
) );

312 (
ªsu…
);

313 
	}
}

322 
__STATIC_FORCEINLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

324 
__ASM
 vﬁ©ûê("MSR m•, %0" : : "r" (
t›OfMaöSèck
) : );

325 
	}
}

328 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

334 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
t›OfMaöSèck
)

336 
__ASM
 vﬁ©ûê("MSR m•_ns, %0" : : "r" (
t›OfMaöSèck
) : );

337 
	}
}

341 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

347 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_SP_NS
()

349 
uöt32_t
 
ªsu…
;

351 
__ASM
 vﬁ©ûê("MRS %0, sp_ns" : "Ù" (
ªsu…
) );

352 (
ªsu…
);

353 
	}
}

361 
__STATIC_FORCEINLINE
 
	$__TZ_£t_SP_NS
(
uöt32_t
 
t›OfSèck
)

363 
__ASM
 vﬁ©ûê("MSR sp_ns, %0" : : "r" (
t›OfSèck
) : );

364 
	}
}

373 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

382 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

388 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0,Örimask_ns" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__STATIC_FORCEINLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

405 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

406 
	}
}

409 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

415 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
¥iMask
)

417 
__ASM
 vﬁ©ûê("MSRÖrimask_ns, %0" : : "r" (
¥iMask
) : "memory");

418 
	}
}

422 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

423 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

424 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

430 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

438 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

446 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i" : "Ù" (
ªsu…
) );

451 (
ªsu…
);

452 
	}
}

455 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

461 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

463 
uöt32_t
 
ªsu…
;

465 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_ns" : "Ù" (
ªsu…
) );

466 (
ªsu…
);

467 
	}
}

476 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

478 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
ba£Pri
) : "memory");

479 
	}
}

482 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

488 
__STATIC_FORCEINLINE
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
ba£Pri
)

490 
__ASM
 vﬁ©ûê("MSR ba£¥i_ns, %0" : : "r" (
ba£Pri
) : "memory");

491 
	}
}

501 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

503 
__ASM
 vﬁ©ûê("MSR ba£¥i_max, %0" : : "r" (
ba£Pri
) : "memory");

504 
	}
}

512 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

514 
uöt32_t
 
ªsu…
;

516 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

517 (
ªsu…
);

518 
	}
}

521 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

527 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

529 
uöt32_t
 
ªsu…
;

531 
__ASM
 vﬁ©ûê("MRS %0, fau…mask_ns" : "Ù" (
ªsu…
) );

532 (
ªsu…
);

533 
	}
}

542 
__STATIC_FORCEINLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

544 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

545 
	}
}

548 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

554 
__STATIC_FORCEINLINE
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
Áu…Mask
)

556 
__ASM
 vﬁ©ûê("MSR fau…mask_ns, %0" : : "r" (
Áu…Mask
) : "memory");

557 
	}
}

561 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

562 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

565 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

566 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

577 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSPLIM
()

579 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

580 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

584 
uöt32_t
 
ªsu…
;

585 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim" : "Ù" (
ªsu…
) );

586  
ªsu…
;

588 
	}
}

590 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3))

600 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

602 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

606 
uöt32_t
 
ªsu…
;

607 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim_ns" : "Ù" (
ªsu…
) );

608  
ªsu…
;

610 
	}
}

623 
__STATIC_FORCEINLINE
 
	$__£t_PSPLIM
(
uöt32_t
 
ProcSèckPåLimô
)

625 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

626 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

628 ()
ProcSèckPåLimô
;

630 
__ASM
 vﬁ©ûê("MSRÖ•lim, %0" : : "r" (
ProcSèckPåLimô
));

632 
	}
}

635 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

645 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
ProcSèckPåLimô
)

647 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

649 ()
ProcSèckPåLimô
;

651 
__ASM
 vﬁ©ûê("MSRÖ•lim_ns, %0\n" : : "r" (
ProcSèckPåLimô
));

653 
	}
}

665 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSPLIM
()

667 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

668 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

672 
uöt32_t
 
ªsu…
;

673 
__ASM
 vﬁ©ûê("MRS %0, m•lim" : "Ù" (
ªsu…
) );

674  
ªsu…
;

676 
	}
}

679 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

688 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

690 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

694 
uöt32_t
 
ªsu…
;

695 
__ASM
 vﬁ©ûê("MRS %0, m•lim_ns" : "Ù" (
ªsu…
) );

696  
ªsu…
;

698 
	}
}

710 
__STATIC_FORCEINLINE
 
	$__£t_MSPLIM
(
uöt32_t
 
MaöSèckPåLimô
)

712 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

713 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

715 ()
MaöSèckPåLimô
;

717 
__ASM
 vﬁ©ûê("MSR m•lim, %0" : : "r" (
MaöSèckPåLimô
));

719 
	}
}

722 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

731 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
MaöSèckPåLimô
)

733 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

735 ()
MaöSèckPåLimô
;

737 
__ASM
 vﬁ©ûê("MSR m•lim_ns, %0" : : "r" (
MaöSèckPåLimô
));

739 
	}
}

743 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

750 #i‡((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

751 (
deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

752 
	#__gë_FPSCR
 (
uöt32_t
)
__buûtö_¨m_gë_Âs¸


	)

754 
	#__gë_FPSCR
(Ë((
uöt32_t
)0U)

	)

762 #i‡((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

763 (
deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

764 
	#__£t_FPSCR
 
__buûtö_¨m_£t_Âs¸


	)

766 
	#__£t_FPSCR
(
x
Ë(()(x))

	)

782 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

783 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

784 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

786 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

787 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

794 
	#__NOP
 
__buûtö_¨m_n›


	)

800 
	#__WFI
 
__buûtö_¨m_wfi


	)

808 
	#__WFE
 
__buûtö_¨m_w„


	)

815 
	#__SEV
 
__buûtö_¨m_£v


	)

824 
	#__ISB
(Ë
	`__buûtö_¨m_isb
(0xF);

	)

831 
	#__DSB
(Ë
	`__buûtö_¨m_dsb
(0xF);

	)

839 
	#__DMB
(Ë
	`__buûtö_¨m_dmb
(0xF);

	)

848 
	#__REV
(
vÆue
Ë
	`__buûtö_bsw≠32
(vÆue)

	)

857 
	#__REV16
(
vÆue
Ë
	`__ROR
(
	`__REV
(vÆue), 16)

	)

866 
	#__REVSH
(
vÆue
Ë(
öt16_t
)
	`__buûtö_bsw≠16
(vÆue)

	)

876 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

878 
›2
 %= 32U;

879 i‡(
›2
 == 0U)

881  
›1
;

883  (
›1
 >> 
›2
) | (op1 << (32U - op2));

884 
	}
}

894 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

903 
	#__RBIT
 
__buûtö_¨m_rbô


	)

911 
	#__CLZ
 (
uöt8_t
)
__buûtö_˛z


	)

914 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

915 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

916 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

917 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

924 
	#__LDREXB
 (
uöt8_t
)
__buûtö_¨m_ldªx


	)

933 
	#__LDREXH
 (
uöt16_t
)
__buûtö_¨m_ldªx


	)

942 
	#__LDREXW
 (
uöt32_t
)
__buûtö_¨m_ldªx


	)

953 
	#__STREXB
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

964 
	#__STREXH
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

975 
	#__STREXW
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

982 
	#__CLREX
 
__buûtö_¨m_˛ªx


	)

985 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

986 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

987 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) ) */

990 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

991 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

992 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

1001 
	#__SSAT
 
__buûtö_¨m_sßt


	)

1011 
	#__USAT
 
__buûtö_¨m_ußt


	)

1021 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

1023 
uöt32_t
 
ªsu…
;

1025 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

1026 (
ªsu…
);

1027 
	}
}

1036 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
±r
)

1038 
uöt32_t
 
ªsu…
;

1040 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1041  ((
uöt8_t
Ë
ªsu…
);

1042 
	}
}

1051 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
±r
)

1053 
uöt32_t
 
ªsu…
;

1055 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1056  ((
uöt16_t
Ë
ªsu…
);

1057 
	}
}

1066 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
±r
)

1068 
uöt32_t
 
ªsu…
;

1070 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1071 (
ªsu…
);

1072 
	}
}

1081 
__STATIC_FORCEINLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1083 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1084 
	}
}

1093 
__STATIC_FORCEINLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1095 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1096 
	}
}

1105 
__STATIC_FORCEINLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1107 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
±r
Ë: "r" (
vÆue
) );

1108 
	}
}

1111 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1112 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1121 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1123 i‡((
ßt
 >= 1U) && (sat <= 32U))

1125 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

1126 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

1127 i‡(
vÆ
 > 
max
)

1129  
max
;

1131 i‡(
vÆ
 < 
mö
)

1133  
mö
;

1136  
vÆ
;

1137 
	}
}

1146 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1148 i‡(
ßt
 <= 31U)

1150 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

1151 i‡(
vÆ
 > (
öt32_t
)
max
)

1153  
max
;

1155 i‡(
vÆ
 < 0)

1160  (
uöt32_t
)
vÆ
;

1161 
	}
}

1164 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1165 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1168 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1169 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1176 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

1178 
uöt32_t
 
ªsu…
;

1180 
__ASM
 vﬁ©ûê("ldab %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1181  ((
uöt8_t
Ë
ªsu…
);

1182 
	}
}

1191 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

1193 
uöt32_t
 
ªsu…
;

1195 
__ASM
 vﬁ©ûê("ldah %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1196  ((
uöt16_t
Ë
ªsu…
);

1197 
	}
}

1206 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

1208 
uöt32_t
 
ªsu…
;

1210 
__ASM
 vﬁ©ûê("ld®%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1211 (
ªsu…
);

1212 
	}
}

1221 
__STATIC_FORCEINLINE
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1223 
__ASM
 vﬁ©ûê("°lb %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1224 
	}
}

1233 
__STATIC_FORCEINLINE
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1235 
__ASM
 vﬁ©ûê("°lh %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1236 
	}
}

1245 
__STATIC_FORCEINLINE
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1247 
__ASM
 vﬁ©ûê("°»%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1248 
	}
}

1257 
	#__LDAEXB
 (
uöt8_t
)
__buûtö_¨m_ld´x


	)

1266 
	#__LDAEXH
 (
uöt16_t
)
__buûtö_¨m_ld´x


	)

1275 
	#__LDAEX
 (
uöt32_t
)
__buûtö_¨m_ld´x


	)

1286 
	#__STLEXB
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1297 
	#__STLEXH
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1308 
	#__STLEX
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1311 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

1322 #i‡(
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1))

1324 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1326 
uöt32_t
 
ªsu…
;

1328 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1329 (
ªsu…
);

1330 
	}
}

1332 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1334 
uöt32_t
 
ªsu…
;

1336 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1337 (
ªsu…
);

1338 
	}
}

1340 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1342 
uöt32_t
 
ªsu…
;

1344 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1345 (
ªsu…
);

1346 
	}
}

1348 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1350 
uöt32_t
 
ªsu…
;

1352 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1353 (
ªsu…
);

1354 
	}
}

1356 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1358 
uöt32_t
 
ªsu…
;

1360 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1361 (
ªsu…
);

1362 
	}
}

1364 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1366 
uöt32_t
 
ªsu…
;

1368 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1369 (
ªsu…
);

1370 
	}
}

1373 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1375 
uöt32_t
 
ªsu…
;

1377 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1378 (
ªsu…
);

1379 
	}
}

1381 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1383 
uöt32_t
 
ªsu…
;

1385 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1386 (
ªsu…
);

1387 
	}
}

1389 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1391 
uöt32_t
 
ªsu…
;

1393 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1394 (
ªsu…
);

1395 
	}
}

1397 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1399 
uöt32_t
 
ªsu…
;

1401 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1402 (
ªsu…
);

1403 
	}
}

1405 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1407 
uöt32_t
 
ªsu…
;

1409 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1410 (
ªsu…
);

1411 
	}
}

1413 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1415 
uöt32_t
 
ªsu…
;

1417 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1418 (
ªsu…
);

1419 
	}
}

1422 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1424 
uöt32_t
 
ªsu…
;

1426 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1427 (
ªsu…
);

1428 
	}
}

1430 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1432 
uöt32_t
 
ªsu…
;

1434 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1435 (
ªsu…
);

1436 
	}
}

1438 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1440 
uöt32_t
 
ªsu…
;

1442 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1443 (
ªsu…
);

1444 
	}
}

1446 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1448 
uöt32_t
 
ªsu…
;

1450 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1451 (
ªsu…
);

1452 
	}
}

1454 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1456 
uöt32_t
 
ªsu…
;

1458 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1459 (
ªsu…
);

1460 
	}
}

1462 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1464 
uöt32_t
 
ªsu…
;

1466 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1467 (
ªsu…
);

1468 
	}
}

1470 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1472 
uöt32_t
 
ªsu…
;

1474 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1475 (
ªsu…
);

1476 
	}
}

1478 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1480 
uöt32_t
 
ªsu…
;

1482 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1483 (
ªsu…
);

1484 
	}
}

1486 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1488 
uöt32_t
 
ªsu…
;

1490 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1491 (
ªsu…
);

1492 
	}
}

1494 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1496 
uöt32_t
 
ªsu…
;

1498 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1499 (
ªsu…
);

1500 
	}
}

1502 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1504 
uöt32_t
 
ªsu…
;

1506 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1507 (
ªsu…
);

1508 
	}
}

1510 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1512 
uöt32_t
 
ªsu…
;

1514 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1515 (
ªsu…
);

1516 
	}
}

1518 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1520 
uöt32_t
 
ªsu…
;

1522 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1523 (
ªsu…
);

1524 
	}
}

1526 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1528 
uöt32_t
 
ªsu…
;

1530 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1531 (
ªsu…
);

1532 
	}
}

1534 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1536 
uöt32_t
 
ªsu…
;

1538 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1539 (
ªsu…
);

1540 
	}
}

1542 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1544 
uöt32_t
 
ªsu…
;

1546 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1547 (
ªsu…
);

1548 
	}
}

1550 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1552 
uöt32_t
 
ªsu…
;

1554 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1555 (
ªsu…
);

1556 
	}
}

1558 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1560 
uöt32_t
 
ªsu…
;

1562 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1563 (
ªsu…
);

1564 
	}
}

1566 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1568 
uöt32_t
 
ªsu…
;

1570 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1571 (
ªsu…
);

1572 
	}
}

1574 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1576 
uöt32_t
 
ªsu…
;

1578 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1579 (
ªsu…
);

1580 
	}
}

1582 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1584 
uöt32_t
 
ªsu…
;

1586 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1587 (
ªsu…
);

1588 
	}
}

1590 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1592 
uöt32_t
 
ªsu…
;

1594 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1595 (
ªsu…
);

1596 
	}
}

1598 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1600 
uöt32_t
 
ªsu…
;

1602 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1603 (
ªsu…
);

1604 
	}
}

1606 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1608 
uöt32_t
 
ªsu…
;

1610 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1611 (
ªsu…
);

1612 
	}
}

1614 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1616 
uöt32_t
 
ªsu…
;

1618 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1619 (
ªsu…
);

1620 
	}
}

1622 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1624 
uöt32_t
 
ªsu…
;

1626 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1627 (
ªsu…
);

1628 
	}
}

1630 
	#__SSAT16
(
ARG1
,
ARG2
) \

1632 
öt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1633 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1634 
__RES
; \

1635 })

	)

1637 
	#__USAT16
(
ARG1
,
ARG2
) \

1639 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1640 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1641 
__RES
; \

1642 })

	)

1644 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

1646 
uöt32_t
 
ªsu…
;

1648 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1649 (
ªsu…
);

1650 
	}
}

1652 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1654 
uöt32_t
 
ªsu…
;

1656 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1657 (
ªsu…
);

1658 
	}
}

1660 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

1662 
uöt32_t
 
ªsu…
;

1664 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1665 (
ªsu…
);

1666 
	}
}

1668 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1670 
uöt32_t
 
ªsu…
;

1672 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1673 (
ªsu…
);

1674 
	}
}

1676 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1678 
uöt32_t
 
ªsu…
;

1680 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1681 (
ªsu…
);

1682 
	}
}

1684 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1686 
uöt32_t
 
ªsu…
;

1688 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1689 (
ªsu…
);

1690 
	}
}

1692 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1694 
uöt32_t
 
ªsu…
;

1696 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1697 (
ªsu…
);

1698 
	}
}

1700 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1702 
uöt32_t
 
ªsu…
;

1704 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1705 (
ªsu…
);

1706 
	}
}

1708 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1710 
	uŒªg_u
{

1711 
uöt32_t
 
w32
[2];

1712 
uöt64_t
 
w64
;

1713 } 
Œr
;

1714 
Œr
.
w64
 = 
acc
;

1716 #i‚de‡
__ARMEB__


1717 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1719 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1722 (
Œr
.
w64
);

1723 
	}
}

1725 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1727 
	uŒªg_u
{

1728 
uöt32_t
 
w32
[2];

1729 
uöt64_t
 
w64
;

1730 } 
Œr
;

1731 
Œr
.
w64
 = 
acc
;

1733 #i‚de‡
__ARMEB__


1734 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1736 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1739 (
Œr
.
w64
);

1740 
	}
}

1742 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1744 
uöt32_t
 
ªsu…
;

1746 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1747 (
ªsu…
);

1748 
	}
}

1750 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1752 
uöt32_t
 
ªsu…
;

1754 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1755 (
ªsu…
);

1756 
	}
}

1758 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1760 
uöt32_t
 
ªsu…
;

1762 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1763 (
ªsu…
);

1764 
	}
}

1766 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1768 
uöt32_t
 
ªsu…
;

1770 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1771 (
ªsu…
);

1772 
	}
}

1774 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1776 
	uŒªg_u
{

1777 
uöt32_t
 
w32
[2];

1778 
uöt64_t
 
w64
;

1779 } 
Œr
;

1780 
Œr
.
w64
 = 
acc
;

1782 #i‚de‡
__ARMEB__


1783 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1785 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1788 (
Œr
.
w64
);

1789 
	}
}

1791 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1793 
	uŒªg_u
{

1794 
uöt32_t
 
w32
[2];

1795 
uöt64_t
 
w64
;

1796 } 
Œr
;

1797 
Œr
.
w64
 = 
acc
;

1799 #i‚de‡
__ARMEB__


1800 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1802 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1805 (
Œr
.
w64
);

1806 
	}
}

1808 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1810 
uöt32_t
 
ªsu…
;

1812 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1813 (
ªsu…
);

1814 
	}
}

1816 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QADD
–
öt32_t
 
›1
, i¡32_à
›2
)

1818 
öt32_t
 
ªsu…
;

1820 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1821 (
ªsu…
);

1822 
	}
}

1824 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QSUB
–
öt32_t
 
›1
, i¡32_à
›2
)

1826 
öt32_t
 
ªsu…
;

1828 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1829 (
ªsu…
);

1830 
	}
}

1833 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

1835 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

1836 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1837 
__RES
; \

1838 })

	)

1840 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

1842 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

1843 i‡(
ARG3
 == 0) \

1844 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

1846 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1847 
__RES
; \

1848 })

	)

1851 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

1852 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

1854 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

1855 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

1857 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

1859 
öt32_t
 
ªsu…
;

1861 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1862 (
ªsu…
);

1863 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_compiler.h

25 #i‚de‡
__CMSIS_COMPILER_H


26 
	#__CMSIS_COMPILER_H


	)

28 
	~<°döt.h
>

33 #i‡ 
deföed
 ( 
__CC_ARM
 )

34 
	~"cmsis_¨mcc.h
"

40 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

41 
	~"cmsis_¨m˛™g.h
"

47 #ñi‡
deföed
 ( 
__GNUC__
 )

48 
	~"cmsis_gcc.h
"

54 #ñi‡
deföed
 ( 
__ICCARM__
 )

55 
	~<cmsis_icˇrm.h
>

61 #ñi‡
deföed
 ( 
__TI_ARM__
 )

62 
	~<cmsis_ccs.h
>

64 #i‚de‡ 
__ASM


65 
	#__ASM
 
__asm


	)

67 #i‚de‡ 
__INLINE


68 
	#__INLINE
 
ölöe


	)

70 #i‚de‡ 
__STATIC_INLINE


71 
	#__STATIC_INLINE
 
ölöe


	)

73 #i‚de‡ 
__STATIC_FORCEINLINE


74 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

76 #i‚de‡ 
__NO_RETURN


77 
	#__NO_RETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

79 #i‚de‡ 
__USED


80 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

82 #i‚de‡ 
__WEAK


83 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

85 #i‚de‡ 
__PACKED


86 
	#__PACKED
 
	`__©åibuã__
((
∑cked
))

	)

88 #i‚de‡ 
__PACKED_STRUCT


89 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

91 #i‚de‡ 
__PACKED_UNION


92 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
))

	)

94 #i‚de‡ 
__UNALIGNED_UINT32


95 
__©åibuã__
((
∑cked
)Ë
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

96 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

98 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


99 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

100 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

102 #i‚de‡ 
__UNALIGNED_UINT16_READ


103 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

104 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

106 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


107 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

108 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

110 #i‚de‡ 
__UNALIGNED_UINT32_READ


111 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

112 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

114 #i‚de‡ 
__ALIGNED


115 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

117 #i‚de‡ 
__RESTRICT


118 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__RESTRICT
. __RESTRICT 
is
 
ign‹ed
.

119 
	#__RESTRICT


	)

126 #ñi‡
deföed
 ( 
__TASKING__
 )

133 #i‚de‡ 
__ASM


134 
	#__ASM
 
__asm


	)

136 #i‚de‡ 
__INLINE


137 
	#__INLINE
 
ölöe


	)

139 #i‚de‡ 
__STATIC_INLINE


140 
	#__STATIC_INLINE
 
ölöe


	)

142 #i‚de‡ 
__STATIC_FORCEINLINE


143 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

145 #i‚de‡ 
__NO_RETURN


146 
	#__NO_RETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

148 #i‚de‡ 
__USED


149 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

151 #i‚de‡ 
__WEAK


152 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

154 #i‚de‡ 
__PACKED


155 
	#__PACKED
 
__∑cked__


	)

157 #i‚de‡ 
__PACKED_STRUCT


158 
	#__PACKED_STRUCT
 
__∑cked__


	)

160 #i‚de‡ 
__PACKED_UNION


161 
	#__PACKED_UNION
 
__∑cked__


	)

163 #i‚de‡ 
__UNALIGNED_UINT32


164 
__∑cked__
 
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

165 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

167 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


168 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

169 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

171 #i‚de‡ 
__UNALIGNED_UINT16_READ


172 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

173 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

175 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


176 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

177 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

179 #i‚de‡ 
__UNALIGNED_UINT32_READ


180 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

181 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

183 #i‚de‡ 
__ALIGNED


184 
	#__ALIGNED
(
x
Ë
	`__Æign
(x)

	)

186 #i‚de‡ 
__RESTRICT


187 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__RESTRICT
. __RESTRICT 
is
 
ign‹ed
.

188 
	#__RESTRICT


	)

195 #ñi‡
deföed
 ( 
__CSMC__
 )

196 
	~<cmsis_csm.h
>

198 #i‚de‡ 
__ASM


199 
	#__ASM
 
_asm


	)

201 #i‚de‡ 
__INLINE


202 
	#__INLINE
 
ölöe


	)

204 #i‚de‡ 
__STATIC_INLINE


205 
	#__STATIC_INLINE
 
ölöe


	)

207 #i‚de‡ 
__STATIC_FORCEINLINE


208 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

210 #i‚de‡ 
__NO_RETURN


212 
	#__NO_RETURN


	)

214 #i‚de‡ 
__USED


215 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__USED
. __USED 
is
 
ign‹ed
.

216 
	#__USED


	)

218 #i‚de‡ 
__WEAK


219 
	#__WEAK
 
__wók


	)

221 #i‚de‡ 
__PACKED


222 
	#__PACKED
 @
∑cked


	)

224 #i‚de‡ 
__PACKED_STRUCT


225 
	#__PACKED_STRUCT
 @
∑cked
 

	)

227 #i‚de‡ 
__PACKED_UNION


228 
	#__PACKED_UNION
 @
∑cked
 

	)

230 #i‚de‡ 
__UNALIGNED_UINT32


231 @
∑cked
 
	sT_UINT32
 { 
uöt32_t
 
	mv
; };

232 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

234 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


235 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

236 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

238 #i‚de‡ 
__UNALIGNED_UINT16_READ


239 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

240 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

242 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


243 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

244 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

246 #i‚de‡ 
__UNALIGNED_UINT32_READ


247 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

248 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

250 #i‚de‡ 
__ALIGNED


251 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__ALIGNED
. __ALIGNED 
is
 
ign‹ed
.

252 
	#__ALIGNED
(
x
)

	)

254 #i‚de‡ 
__RESTRICT


255 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__RESTRICT
. __RESTRICT 
is
 
ign‹ed
.

256 
	#__RESTRICT


	)

261 #îr‹ 
Unknown
 
compûî
.

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_gcc.h

25 #i‚de‡
__CMSIS_GCC_H


26 
	#__CMSIS_GCC_H


	)

29 #¥agm®
GCC
 
dügno°ic
 
push


30 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-conversion"

31 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wconversion"

32 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

35 #i‚de‡
__has_buûtö


36 
	#__has_buûtö
(
x
Ë(0)

	)

40 #i‚de‡ 
__ASM


41 
	#__ASM
 
__asm


	)

43 #i‚de‡ 
__INLINE


44 
	#__INLINE
 
ölöe


	)

46 #i‚de‡ 
__STATIC_INLINE


47 
	#__STATIC_INLINE
 
ölöe


	)

49 #i‚de‡ 
__STATIC_FORCEINLINE


50 
	#__STATIC_FORCEINLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
ölöe


	)

52 #i‚de‡ 
__NO_RETURN


53 
	#__NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

55 #i‚de‡ 
__USED


56 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

58 #i‚de‡ 
__WEAK


59 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

61 #i‚de‡ 
__PACKED


62 
	#__PACKED
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

64 #i‚de‡ 
__PACKED_STRUCT


65 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

67 #i‚de‡ 
__PACKED_UNION


68 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

70 #i‚de‡ 
__UNALIGNED_UINT32


71 #¥agm®
GCC
 
dügno°ic
 
push


72 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

73 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

74 
__©åibuã__
((
∑cked
)Ë
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

75 #¥agm®
GCC
 
dügno°ic
 
p›


76 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

78 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


79 #¥agm®
GCC
 
dügno°ic
 
push


80 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

81 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

82 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

83 #¥agm®
GCC
 
dügno°ic
 
p›


84 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

86 #i‚de‡ 
__UNALIGNED_UINT16_READ


87 #¥agm®
GCC
 
dügno°ic
 
push


88 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

89 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

90 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

91 #¥agm®
GCC
 
dügno°ic
 
p›


92 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

94 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


95 #¥agm®
GCC
 
dügno°ic
 
push


96 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

97 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

98 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

99 #¥agm®
GCC
 
dügno°ic
 
p›


100 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

102 #i‚de‡ 
__UNALIGNED_UINT32_READ


103 #¥agm®
GCC
 
dügno°ic
 
push


104 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

105 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

106 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

107 #¥agm®
GCC
 
dügno°ic
 
p›


108 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

110 #i‚de‡ 
__ALIGNED


111 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

113 #i‚de‡ 
__RESTRICT


114 
	#__RESTRICT
 
__ª°ri˘


	)

129 
__STATIC_FORCEINLINE
 
	$__íabÀ_úq
()

131 
__ASM
 volatile ("cpsie i" : : : "memory");

132 
	}
}

140 
__STATIC_FORCEINLINE
 
	$__dißbÀ_úq
()

142 
__ASM
 volatile ("cpsid i" : : : "memory");

143 
	}
}

151 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_CONTROL
()

153 
uöt32_t
 
ªsu…
;

155 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

156 (
ªsu…
);

157 
	}
}

160 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

166 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

168 
uöt32_t
 
ªsu…
;

170 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ_ns" : "Ù" (
ªsu…
) );

171 (
ªsu…
);

172 
	}
}

181 
__STATIC_FORCEINLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

183 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

184 
	}
}

187 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

193 
__STATIC_FORCEINLINE
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
c⁄åﬁ
)

195 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ_ns, %0" : : "r" (
c⁄åﬁ
) : "memory");

196 
	}
}

205 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_IPSR
()

207 
uöt32_t
 
ªsu…
;

209 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

210 (
ªsu…
);

211 
	}
}

219 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_APSR
()

221 
uöt32_t
 
ªsu…
;

223 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

224 (
ªsu…
);

225 
	}
}

233 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_xPSR
()

235 
uöt32_t
 
ªsu…
;

237 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

238 (
ªsu…
);

239 
	}
}

247 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSP
()

249 
uöt32_t
 
ªsu…
;

251 
__ASM
 vﬁ©ûê("MRS %0,Ö•" : "Ù" (
ªsu…
) );

252 (
ªsu…
);

253 
	}
}

256 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

262 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

264 
uöt32_t
 
ªsu…
;

266 
__ASM
 vﬁ©ûê("MRS %0,Ö•_ns" : "Ù" (
ªsu…
) );

267 (
ªsu…
);

268 
	}
}

277 
__STATIC_FORCEINLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

279 
__ASM
 vﬁ©ûê("MSRÖ•, %0" : : "r" (
t›OfProcSèck
) : );

280 
	}
}

283 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

289 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
t›OfProcSèck
)

291 
__ASM
 vﬁ©ûê("MSRÖ•_ns, %0" : : "r" (
t›OfProcSèck
) : );

292 
	}
}

301 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSP
()

303 
uöt32_t
 
ªsu…
;

305 
__ASM
 vﬁ©ûê("MRS %0, m•" : "Ù" (
ªsu…
) );

306 (
ªsu…
);

307 
	}
}

310 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

316 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("MRS %0, m•_ns" : "Ù" (
ªsu…
) );

321 (
ªsu…
);

322 
	}
}

331 
__STATIC_FORCEINLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

333 
__ASM
 vﬁ©ûê("MSR m•, %0" : : "r" (
t›OfMaöSèck
) : );

334 
	}
}

337 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

343 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
t›OfMaöSèck
)

345 
__ASM
 vﬁ©ûê("MSR m•_ns, %0" : : "r" (
t›OfMaöSèck
) : );

346 
	}
}

350 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

356 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_SP_NS
()

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("MRS %0, sp_ns" : "Ù" (
ªsu…
) );

361 (
ªsu…
);

362 
	}
}

370 
__STATIC_FORCEINLINE
 
	$__TZ_£t_SP_NS
(
uöt32_t
 
t›OfSèck
)

372 
__ASM
 vﬁ©ûê("MSR sp_ns, %0" : : "r" (
t›OfSèck
) : );

373 
	}
}

382 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

384 
uöt32_t
 
ªsu…
;

386 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) :: "memory");

387 (
ªsu…
);

388 
	}
}

391 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

397 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("MRS %0,Örimask_ns" : "Ù" (
ªsu…
) :: "memory");

402 (
ªsu…
);

403 
	}
}

412 
__STATIC_FORCEINLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

414 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

415 
	}
}

418 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

424 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
¥iMask
)

426 
__ASM
 vﬁ©ûê("MSRÖrimask_ns, %0" : : "r" (
¥iMask
) : "memory");

427 
	}
}

431 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

432 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

433 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

439 
__STATIC_FORCEINLINE
 
	$__íabÀ_Áu…_úq
()

441 
__ASM
 volatile ("cpsie f" : : : "memory");

442 
	}
}

450 
__STATIC_FORCEINLINE
 
	$__dißbÀ_Áu…_úq
()

452 
__ASM
 volatile ("cpsid f" : : : "memory");

453 
	}
}

461 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

463 
uöt32_t
 
ªsu…
;

465 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i" : "Ù" (
ªsu…
) );

466 (
ªsu…
);

467 
	}
}

470 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

476 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_ns" : "Ù" (
ªsu…
) );

481 (
ªsu…
);

482 
	}
}

491 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

493 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
ba£Pri
) : "memory");

494 
	}
}

497 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

503 
__STATIC_FORCEINLINE
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
ba£Pri
)

505 
__ASM
 vﬁ©ûê("MSR ba£¥i_ns, %0" : : "r" (
ba£Pri
) : "memory");

506 
	}
}

516 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

518 
__ASM
 vﬁ©ûê("MSR ba£¥i_max, %0" : : "r" (
ba£Pri
) : "memory");

519 
	}
}

527 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

529 
uöt32_t
 
ªsu…
;

531 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

532 (
ªsu…
);

533 
	}
}

536 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

542 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

544 
uöt32_t
 
ªsu…
;

546 
__ASM
 vﬁ©ûê("MRS %0, fau…mask_ns" : "Ù" (
ªsu…
) );

547 (
ªsu…
);

548 
	}
}

557 
__STATIC_FORCEINLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

559 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

560 
	}
}

563 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

569 
__STATIC_FORCEINLINE
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
Áu…Mask
)

571 
__ASM
 vﬁ©ûê("MSR fau…mask_ns, %0" : : "r" (
Áu…Mask
) : "memory");

572 
	}
}

576 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

577 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

580 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

581 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

592 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSPLIM
()

594 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

595 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

599 
uöt32_t
 
ªsu…
;

600 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim" : "Ù" (
ªsu…
) );

601  
ªsu…
;

603 
	}
}

605 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3))

614 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

616 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

620 
uöt32_t
 
ªsu…
;

621 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim_ns" : "Ù" (
ªsu…
) );

622  
ªsu…
;

624 
	}
}

637 
__STATIC_FORCEINLINE
 
	$__£t_PSPLIM
(
uöt32_t
 
ProcSèckPåLimô
)

639 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

640 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

642 ()
ProcSèckPåLimô
;

644 
__ASM
 vﬁ©ûê("MSRÖ•lim, %0" : : "r" (
ProcSèckPåLimô
));

646 
	}
}

649 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

658 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
ProcSèckPåLimô
)

660 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

662 ()
ProcSèckPåLimô
;

664 
__ASM
 vﬁ©ûê("MSRÖ•lim_ns, %0\n" : : "r" (
ProcSèckPåLimô
));

666 
	}
}

679 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSPLIM
()

681 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

682 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

686 
uöt32_t
 
ªsu…
;

687 
__ASM
 vﬁ©ûê("MRS %0, m•lim" : "Ù" (
ªsu…
) );

688  
ªsu…
;

690 
	}
}

693 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

702 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

704 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

708 
uöt32_t
 
ªsu…
;

709 
__ASM
 vﬁ©ûê("MRS %0, m•lim_ns" : "Ù" (
ªsu…
) );

710  
ªsu…
;

712 
	}
}

725 
__STATIC_FORCEINLINE
 
	$__£t_MSPLIM
(
uöt32_t
 
MaöSèckPåLimô
)

727 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

728 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

730 ()
MaöSèckPåLimô
;

732 
__ASM
 vﬁ©ûê("MSR m•lim, %0" : : "r" (
MaöSèckPåLimô
));

734 
	}
}

737 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

746 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
MaöSèckPåLimô
)

748 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

750 ()
MaöSèckPåLimô
;

752 
__ASM
 vﬁ©ûê("MSR m•lim_ns, %0" : : "r" (
MaöSèckPåLimô
));

754 
	}
}

758 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

766 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_FPSCR
()

768 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

769 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

770 #i‡
	`__has_buûtö
(
__buûtö_¨m_gë_Âs¸
)

774  
	`__buûtö_¨m_gë_Âs¸
();

776 
uöt32_t
 
ªsu…
;

778 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

779 (
ªsu…
);

784 
	}
}

792 
__STATIC_FORCEINLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

794 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

795 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

796 #i‡
	`__has_buûtö
(
__buûtö_¨m_£t_Âs¸
)

800 
	`__buûtö_¨m_£t_Âs¸
(
Âs¸
);

802 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc", "memory");

805 ()
Âs¸
;

807 
	}
}

822 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

823 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

824 
	#__CMSIS_GCC_RW_REG
(
r
Ë"+l" (r)

	)

825 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

827 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

828 
	#__CMSIS_GCC_RW_REG
(
r
Ë"+r" (r)

	)

829 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

836 
	#__NOP
(Ë
__ASM
 vﬁ©ûê("n›")

	)

842 
	#__WFI
(Ë
__ASM
 vﬁ©ûê("wfi")

	)

850 
	#__WFE
(Ë
__ASM
 vﬁ©ûê("w„")

	)

857 
	#__SEV
(Ë
__ASM
 vﬁ©ûê("£v")

	)

866 
__STATIC_FORCEINLINE
 
	$__ISB
()

868 
__ASM
 volatile ("isb 0xF":::"memory");

869 
	}
}

877 
__STATIC_FORCEINLINE
 
	$__DSB
()

879 
__ASM
 volatile ("dsb 0xF":::"memory");

880 
	}
}

888 
__STATIC_FORCEINLINE
 
	$__DMB
()

890 
__ASM
 volatile ("dmb 0xF":::"memory");

891 
	}
}

900 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

902 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

903  
	`__buûtö_bsw≠32
(
vÆue
);

905 
uöt32_t
 
ªsu…
;

907 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

908  
ªsu…
;

910 
	}
}

919 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

921 
uöt32_t
 
ªsu…
;

923 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

924  
ªsu…
;

925 
	}
}

934 
__STATIC_FORCEINLINE
 
öt16_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

936 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

937  (
öt16_t
)
	`__buûtö_bsw≠16
(
vÆue
);

939 
öt16_t
 
ªsu…
;

941 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

942  
ªsu…
;

944 
	}
}

954 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

956 
›2
 %= 32U;

957 i‡(
›2
 == 0U)

959  
›1
;

961  (
›1
 >> 
›2
) | (op1 << (32U - op2));

962 
	}
}

972 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

981 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

983 
uöt32_t
 
ªsu…
;

985 #i‡((
	`deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

986 (
	`deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

987 (
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

988 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

990 
uöt32_t
 
s
 = (4U * 8U) - 1U;

992 
ªsu…
 = 
vÆue
;

993 
vÆue
 >>= 1U; value != 0U; value >>= 1U)

995 
ªsu…
 <<= 1U;

996 
ªsu…
 |
vÆue
 & 1U;

997 
s
--;

999 
ªsu…
 <<
s
;

1001  
ªsu…
;

1002 
	}
}

1011 
	#__CLZ
 (
uöt8_t
)
__buûtö_˛z


	)

1014 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

1015 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1016 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1017 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1024 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

1026 
uöt32_t
 
ªsu…
;

1028 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1029 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

1034 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

1036  ((
uöt8_t
Ë
ªsu…
);

1037 
	}
}

1046 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

1048 
uöt32_t
 
ªsu…
;

1050 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1051 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

1056 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

1058  ((
uöt16_t
Ë
ªsu…
);

1059 
	}
}

1068 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

1070 
uöt32_t
 
ªsu…
;

1072 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

1073 (
ªsu…
);

1074 
	}
}

1085 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

1087 
uöt32_t
 
ªsu…
;

1089 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

1090 (
ªsu…
);

1091 
	}
}

1102 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

1104 
uöt32_t
 
ªsu…
;

1106 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

1107 (
ªsu…
);

1108 
	}
}

1119 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

1121 
uöt32_t
 
ªsu…
;

1123 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

1124 (
ªsu…
);

1125 
	}
}

1132 
__STATIC_FORCEINLINE
 
	$__CLREX
()

1134 
__ASM
 volatile ("clrex" ::: "memory");

1135 
	}
}

1138 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1139 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1140 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) ) */

1143 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

1144 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

1145 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

1153 
	#__SSAT
(
ARG1
,
ARG2
) \

1154 
__exãnsi⁄__
 \

1156 
öt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1157 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1158 
__RES
; \

1159 })

	)

1169 
	#__USAT
(
ARG1
,
ARG2
) \

1170 
__exãnsi⁄__
 \

1172 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1173 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1174 
__RES
; \

1175 })

	)

1185 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

1187 
uöt32_t
 
ªsu…
;

1189 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

1190 (
ªsu…
);

1191 
	}
}

1200 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
±r
)

1202 
uöt32_t
 
ªsu…
;

1204 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1205 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1210 
__ASM
 vﬁ©ûê("ldrbà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
±r
) : "memory" );

1212  ((
uöt8_t
Ë
ªsu…
);

1213 
	}
}

1222 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
±r
)

1224 
uöt32_t
 
ªsu…
;

1226 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1227 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1232 
__ASM
 vﬁ©ûê("ldrhà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
±r
) : "memory" );

1234  ((
uöt16_t
Ë
ªsu…
);

1235 
	}
}

1244 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
±r
)

1246 
uöt32_t
 
ªsu…
;

1248 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1249 (
ªsu…
);

1250 
	}
}

1259 
__STATIC_FORCEINLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1261 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1262 
	}
}

1271 
__STATIC_FORCEINLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1273 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1274 
	}
}

1283 
__STATIC_FORCEINLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1285 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
±r
Ë: "r" (
vÆue
) );

1286 
	}
}

1289 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1290 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1299 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1301 i‡((
ßt
 >= 1U) && (sat <= 32U))

1303 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

1304 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

1305 i‡(
vÆ
 > 
max
)

1307  
max
;

1309 i‡(
vÆ
 < 
mö
)

1311  
mö
;

1314  
vÆ
;

1315 
	}
}

1324 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1326 i‡(
ßt
 <= 31U)

1328 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

1329 i‡(
vÆ
 > (
öt32_t
)
max
)

1331  
max
;

1333 i‡(
vÆ
 < 0)

1338  (
uöt32_t
)
vÆ
;

1339 
	}
}

1342 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1343 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1346 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1347 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1354 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

1356 
uöt32_t
 
ªsu…
;

1358 
__ASM
 vﬁ©ûê("ldab %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1359  ((
uöt8_t
Ë
ªsu…
);

1360 
	}
}

1369 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

1371 
uöt32_t
 
ªsu…
;

1373 
__ASM
 vﬁ©ûê("ldah %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1374  ((
uöt16_t
Ë
ªsu…
);

1375 
	}
}

1384 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

1386 
uöt32_t
 
ªsu…
;

1388 
__ASM
 vﬁ©ûê("ld®%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1389 (
ªsu…
);

1390 
	}
}

1399 
__STATIC_FORCEINLINE
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1401 
__ASM
 vﬁ©ûê("°lb %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1402 
	}
}

1411 
__STATIC_FORCEINLINE
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1413 
__ASM
 vﬁ©ûê("°lh %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1414 
	}
}

1423 
__STATIC_FORCEINLINE
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1425 
__ASM
 vﬁ©ûê("°»%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1426 
	}
}

1435 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDAEXB
(vﬁ©ûê
uöt8_t
 *
±r
)

1437 
uöt32_t
 
ªsu…
;

1439 
__ASM
 vﬁ©ûê("ld´xb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1440  ((
uöt8_t
Ë
ªsu…
);

1441 
	}
}

1450 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDAEXH
(vﬁ©ûê
uöt16_t
 *
±r
)

1452 
uöt32_t
 
ªsu…
;

1454 
__ASM
 vﬁ©ûê("ld´xh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1455  ((
uöt16_t
Ë
ªsu…
);

1456 
	}
}

1465 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDAEX
(vﬁ©ûê
uöt32_t
 *
±r
)

1467 
uöt32_t
 
ªsu…
;

1469 
__ASM
 vﬁ©ûê("ld´x %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1470 (
ªsu…
);

1471 
	}
}

1482 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STLEXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1484 
uöt32_t
 
ªsu…
;

1486 
__ASM
 vﬁ©ûê("°Àxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1487 (
ªsu…
);

1488 
	}
}

1499 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STLEXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1501 
uöt32_t
 
ªsu…
;

1503 
__ASM
 vﬁ©ûê("°Àxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1504 (
ªsu…
);

1505 
	}
}

1516 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STLEX
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1518 
uöt32_t
 
ªsu…
;

1520 
__ASM
 vﬁ©ûê("°Àx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1521 (
ªsu…
);

1522 
	}
}

1525 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

1536 #i‡(
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1))

1538 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1540 
uöt32_t
 
ªsu…
;

1542 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1543 (
ªsu…
);

1544 
	}
}

1546 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1548 
uöt32_t
 
ªsu…
;

1550 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1551 (
ªsu…
);

1552 
	}
}

1554 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1556 
uöt32_t
 
ªsu…
;

1558 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1559 (
ªsu…
);

1560 
	}
}

1562 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1564 
uöt32_t
 
ªsu…
;

1566 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1567 (
ªsu…
);

1568 
	}
}

1570 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1572 
uöt32_t
 
ªsu…
;

1574 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1575 (
ªsu…
);

1576 
	}
}

1578 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1580 
uöt32_t
 
ªsu…
;

1582 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1583 (
ªsu…
);

1584 
	}
}

1587 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1589 
uöt32_t
 
ªsu…
;

1591 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1592 (
ªsu…
);

1593 
	}
}

1595 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1597 
uöt32_t
 
ªsu…
;

1599 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1600 (
ªsu…
);

1601 
	}
}

1603 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1605 
uöt32_t
 
ªsu…
;

1607 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1608 (
ªsu…
);

1609 
	}
}

1611 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1613 
uöt32_t
 
ªsu…
;

1615 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1616 (
ªsu…
);

1617 
	}
}

1619 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1621 
uöt32_t
 
ªsu…
;

1623 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1624 (
ªsu…
);

1625 
	}
}

1627 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1629 
uöt32_t
 
ªsu…
;

1631 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1632 (
ªsu…
);

1633 
	}
}

1636 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1638 
uöt32_t
 
ªsu…
;

1640 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1641 (
ªsu…
);

1642 
	}
}

1644 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1646 
uöt32_t
 
ªsu…
;

1648 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1649 (
ªsu…
);

1650 
	}
}

1652 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1654 
uöt32_t
 
ªsu…
;

1656 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1657 (
ªsu…
);

1658 
	}
}

1660 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1662 
uöt32_t
 
ªsu…
;

1664 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1665 (
ªsu…
);

1666 
	}
}

1668 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1670 
uöt32_t
 
ªsu…
;

1672 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1673 (
ªsu…
);

1674 
	}
}

1676 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1678 
uöt32_t
 
ªsu…
;

1680 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1681 (
ªsu…
);

1682 
	}
}

1684 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1686 
uöt32_t
 
ªsu…
;

1688 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1689 (
ªsu…
);

1690 
	}
}

1692 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1694 
uöt32_t
 
ªsu…
;

1696 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1697 (
ªsu…
);

1698 
	}
}

1700 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1702 
uöt32_t
 
ªsu…
;

1704 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1705 (
ªsu…
);

1706 
	}
}

1708 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1710 
uöt32_t
 
ªsu…
;

1712 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1713 (
ªsu…
);

1714 
	}
}

1716 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1718 
uöt32_t
 
ªsu…
;

1720 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1721 (
ªsu…
);

1722 
	}
}

1724 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1726 
uöt32_t
 
ªsu…
;

1728 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1729 (
ªsu…
);

1730 
	}
}

1732 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1734 
uöt32_t
 
ªsu…
;

1736 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1737 (
ªsu…
);

1738 
	}
}

1740 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1742 
uöt32_t
 
ªsu…
;

1744 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1745 (
ªsu…
);

1746 
	}
}

1748 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1750 
uöt32_t
 
ªsu…
;

1752 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1753 (
ªsu…
);

1754 
	}
}

1756 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1758 
uöt32_t
 
ªsu…
;

1760 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1761 (
ªsu…
);

1762 
	}
}

1764 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1766 
uöt32_t
 
ªsu…
;

1768 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1769 (
ªsu…
);

1770 
	}
}

1772 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1774 
uöt32_t
 
ªsu…
;

1776 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1777 (
ªsu…
);

1778 
	}
}

1780 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1782 
uöt32_t
 
ªsu…
;

1784 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1785 (
ªsu…
);

1786 
	}
}

1788 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1790 
uöt32_t
 
ªsu…
;

1792 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1793 (
ªsu…
);

1794 
	}
}

1796 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1798 
uöt32_t
 
ªsu…
;

1800 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1801 (
ªsu…
);

1802 
	}
}

1804 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1806 
uöt32_t
 
ªsu…
;

1808 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1809 (
ªsu…
);

1810 
	}
}

1812 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1814 
uöt32_t
 
ªsu…
;

1816 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1817 (
ªsu…
);

1818 
	}
}

1820 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1822 
uöt32_t
 
ªsu…
;

1824 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1825 (
ªsu…
);

1826 
	}
}

1828 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1830 
uöt32_t
 
ªsu…
;

1832 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1833 (
ªsu…
);

1834 
	}
}

1836 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1838 
uöt32_t
 
ªsu…
;

1840 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1841 (
ªsu…
);

1842 
	}
}

1844 
	#__SSAT16
(
ARG1
,
ARG2
) \

1846 
öt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1847 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1848 
__RES
; \

1849 })

	)

1851 
	#__USAT16
(
ARG1
,
ARG2
) \

1853 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1854 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1855 
__RES
; \

1856 })

	)

1858 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

1860 
uöt32_t
 
ªsu…
;

1862 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1863 (
ªsu…
);

1864 
	}
}

1866 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1868 
uöt32_t
 
ªsu…
;

1870 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1871 (
ªsu…
);

1872 
	}
}

1874 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

1876 
uöt32_t
 
ªsu…
;

1878 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1879 (
ªsu…
);

1880 
	}
}

1882 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1884 
uöt32_t
 
ªsu…
;

1886 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1887 (
ªsu…
);

1888 
	}
}

1890 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1892 
uöt32_t
 
ªsu…
;

1894 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1895 (
ªsu…
);

1896 
	}
}

1898 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1900 
uöt32_t
 
ªsu…
;

1902 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1903 (
ªsu…
);

1904 
	}
}

1906 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1908 
uöt32_t
 
ªsu…
;

1910 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1911 (
ªsu…
);

1912 
	}
}

1914 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1916 
uöt32_t
 
ªsu…
;

1918 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1919 (
ªsu…
);

1920 
	}
}

1922 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1924 
	uŒªg_u
{

1925 
uöt32_t
 
w32
[2];

1926 
uöt64_t
 
w64
;

1927 } 
Œr
;

1928 
Œr
.
w64
 = 
acc
;

1930 #i‚de‡
__ARMEB__


1931 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1933 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1936 (
Œr
.
w64
);

1937 
	}
}

1939 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1941 
	uŒªg_u
{

1942 
uöt32_t
 
w32
[2];

1943 
uöt64_t
 
w64
;

1944 } 
Œr
;

1945 
Œr
.
w64
 = 
acc
;

1947 #i‚de‡
__ARMEB__


1948 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1950 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1953 (
Œr
.
w64
);

1954 
	}
}

1956 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1958 
uöt32_t
 
ªsu…
;

1960 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1961 (
ªsu…
);

1962 
	}
}

1964 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1966 
uöt32_t
 
ªsu…
;

1968 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1969 (
ªsu…
);

1970 
	}
}

1972 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1974 
uöt32_t
 
ªsu…
;

1976 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1977 (
ªsu…
);

1978 
	}
}

1980 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1982 
uöt32_t
 
ªsu…
;

1984 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1985 (
ªsu…
);

1986 
	}
}

1988 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1990 
	uŒªg_u
{

1991 
uöt32_t
 
w32
[2];

1992 
uöt64_t
 
w64
;

1993 } 
Œr
;

1994 
Œr
.
w64
 = 
acc
;

1996 #i‚de‡
__ARMEB__


1997 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1999 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

2002 (
Œr
.
w64
);

2003 
	}
}

2005 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

2007 
	uŒªg_u
{

2008 
uöt32_t
 
w32
[2];

2009 
uöt64_t
 
w64
;

2010 } 
Œr
;

2011 
Œr
.
w64
 = 
acc
;

2013 #i‚de‡
__ARMEB__


2014 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

2016 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

2019 (
Œr
.
w64
);

2020 
	}
}

2022 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

2024 
uöt32_t
 
ªsu…
;

2026 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

2027 (
ªsu…
);

2028 
	}
}

2030 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QADD
–
öt32_t
 
›1
, i¡32_à
›2
)

2032 
öt32_t
 
ªsu…
;

2034 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

2035 (
ªsu…
);

2036 
	}
}

2038 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QSUB
–
öt32_t
 
›1
, i¡32_à
›2
)

2040 
öt32_t
 
ªsu…
;

2042 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

2043 (
ªsu…
);

2044 
	}
}

2047 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

2049 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

2050 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

2051 
__RES
; \

2052 })

	)

2054 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

2056 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

2057 i‡(
ARG3
 == 0) \

2058 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

2060 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

2061 
__RES
; \

2062 })

	)

2065 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

2066 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

2068 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

2069 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

2071 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

2073 
öt32_t
 
ªsu…
;

2075 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

2076 (
ªsu…
);

2077 
	}
}

2083 #¥agm®
GCC
 
dügno°ic
 
p›


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_iccarm.h

26 #i‚de‡
__CMSIS_ICCARM_H__


27 
	#__CMSIS_ICCARM_H__


	)

29 #i‚de‡
__ICCARM__


30 #îr‹ 
This
 
fûe
 
should
 
⁄ly
 
be
 
compûed
 
by
 
ICCARM


33 #¥agm®
sy°em_ö˛ude


35 
	#__IAR_FT
 
	`_Pøgma
("ölöe=f‹˚d"Ë
__öåösic


	)

37 #i‡(
__VER__
 >= 8000000)

38 
	#__ICCARM_V8
 1

	)

40 
	#__ICCARM_V8
 0

	)

43 #i‚de‡
__ALIGNED


44 #i‡
__ICCARM_V8


45 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

46 #ñi‡(
__VER__
 >= 7080000)

48 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

50 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__ALIGNED
.__ALIGNED 
is
 
ign‹ed
.

51 
	#__ALIGNED
(
x
)

	)

58 #i‡
__ARM_ARCH_6M__
 || 
__ARM_ARCH_7M__
 || 
__ARM_ARCH_7EM__
 || 
__ARM_ARCH_8M_BASE__
 || 
__ARM_ARCH_8M_MAIN__


61 #i‡
deföed
(
__ARM8M_MAINLINE__
Ë|| deföed(
__ARM8EM_MAINLINE__
)

62 
	#__ARM_ARCH_8M_MAIN__
 1

	)

63 #ñi‡
deföed
(
__ARM8M_BASELINE__
)

64 
	#__ARM_ARCH_8M_BASE__
 1

	)

65 #ñi‡
deföed
(
__ARM_ARCH_PROFILE
) && __ARM_ARCH_PROFILE == 'M'

66 #i‡
__ARM_ARCH
 == 6

67 
	#__ARM_ARCH_6M__
 1

	)

68 #ñi‡
__ARM_ARCH
 == 7

69 #i‡
__ARM_FEATURE_DSP


70 
	#__ARM_ARCH_7EM__
 1

	)

72 
	#__ARM_ARCH_7M__
 1

	)

79 #i‡!
deföed
(
__ARM_ARCH_6M__
Ë&& !deföed(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
) && \

80 !
deföed
(
__ARM_ARCH_8M_BASE__
Ë&& !
	$deföed
(
__ARM_ARCH_8M_MAIN__
)

81 #i‡
	`deföed
(
__ARM6M__
Ë&& (
__CORE__
 == __ARM6M__)

82 
	#__ARM_ARCH_6M__
 1

	)

83 #ñi‡
	`deföed
(
__ARM7M__
Ë&& (
__CORE__
 == __ARM7M__)

84 
	#__ARM_ARCH_7M__
 1

	)

85 #ñi‡
	`deföed
(
__ARM7EM__
Ë&& (
__CORE__
 == __ARM7EM__)

86 
	#__ARM_ARCH_7EM__
 1

	)

87 #ñi‡
	`deföed
(
__ARM8M_BASELINE__
Ë&& (
__CORE
 == __ARM8M_BASELINE__)

88 
	#__ARM_ARCH_8M_BASE__
 1

	)

89 #ñi‡
	`deföed
(
__ARM8M_MAINLINE__
Ë&& (
__CORE
 == __ARM8M_MAINLINE__)

90 
	#__ARM_ARCH_8M_MAIN__
 1

	)

91 #ñi‡
	`deföed
(
__ARM8EM_MAINLINE__
Ë&& (
__CORE
 == __ARM8EM_MAINLINE__)

92 
	#__ARM_ARCH_8M_MAIN__
 1

	)

100 #i‡
	`deföed
(
__ARM_ARCH_6M__
) && __ARM_ARCH_6M__==1

101 
	#__IAR_M0_FAMILY
 1

	)

102 #ñi‡
	`deföed
(
__ARM_ARCH_8M_BASE__
) && __ARM_ARCH_8M_BASE__==1

103 
	#__IAR_M0_FAMILY
 1

	)

105 
	#__IAR_M0_FAMILY
 0

	)

109 #i‚de‡
__ASM


110 
	#__ASM
 
__asm


	)

113 #i‚de‡
__INLINE


114 
	#__INLINE
 
ölöe


	)

117 #i‚de‡ 
__NO_RETURN


118 #i‡
__ICCARM_V8


119 
	#__NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

121 
	#__NO_RETURN
 
	`_Pøgma
("obje˘_©åibuã=__n‹ëu∫")

	)

125 #i‚de‡ 
__PACKED


126 #i‡
__ICCARM_V8


127 
	#__PACKED
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

130 
	#__PACKED
 
__∑cked


	)

134 #i‚de‡ 
__PACKED_STRUCT


135 #i‡
__ICCARM_V8


136 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

139 
	#__PACKED_STRUCT
 
__∑cked
 

	)

143 #i‚de‡ 
__PACKED_UNION


144 #i‡
__ICCARM_V8


145 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

148 
	#__PACKED_UNION
 
__∑cked
 

	)

152 #i‚de‡ 
__RESTRICT


153 
	#__RESTRICT
 
__ª°ri˘


	)

156 #i‚de‡ 
__STATIC_INLINE


157 
	#__STATIC_INLINE
 
ölöe


	)

160 #i‚de‡ 
__FORCEINLINE


161 
	#__FORCEINLINE
 
	`_Pøgma
("ölöe=f‹˚d")

	)

164 #i‚de‡ 
__STATIC_FORCEINLINE


165 
	#__STATIC_FORCEINLINE
 
__FORCEINLINE
 
__STATIC_INLINE


	)

168 #i‚de‡
__UNALIGNED_UINT16_READ


169 #¥agm®
œnguage
=
ßve


170 #¥agm®
œnguage
=
exãnded


171 
__IAR_FT
 
uöt16_t
 
	$__ür_uöt16_ªad
(c⁄° *
±r
)

173  *(
__∑cked
 
uöt16_t
*)(
±r
);

174 
	}
}

175 #¥agm®
œnguage
=
ª°‹e


176 
	#__UNALIGNED_UINT16_READ
(
PTR
Ë
	`__ür_uöt16_ªad
(PTR)

	)

180 #i‚de‡
__UNALIGNED_UINT16_WRITE


181 #¥agm®
œnguage
=
ßve


182 #¥agm®
œnguage
=
exãnded


183 
__IAR_FT
 
	$__ür_uöt16_wrôe
(c⁄° *
±r
, 
uöt16_t
 
vÆ
)

185 *(
__∑cked
 
uöt16_t
*)(
±r
Ë
vÆ
;;

186 
	}
}

187 #¥agm®
œnguage
=
ª°‹e


188 
	#__UNALIGNED_UINT16_WRITE
(
PTR
,
VAL
Ë
	`__ür_uöt16_wrôe
(PTR,VAL)

	)

191 #i‚de‡
__UNALIGNED_UINT32_READ


192 #¥agm®
œnguage
=
ßve


193 #¥agm®
œnguage
=
exãnded


194 
__IAR_FT
 
uöt32_t
 
	$__ür_uöt32_ªad
(c⁄° *
±r
)

196  *(
__∑cked
 
uöt32_t
*)(
±r
);

197 
	}
}

198 #¥agm®
œnguage
=
ª°‹e


199 
	#__UNALIGNED_UINT32_READ
(
PTR
Ë
	`__ür_uöt32_ªad
(PTR)

	)

202 #i‚de‡
__UNALIGNED_UINT32_WRITE


203 #¥agm®
œnguage
=
ßve


204 #¥agm®
œnguage
=
exãnded


205 
__IAR_FT
 
	$__ür_uöt32_wrôe
(c⁄° *
±r
, 
uöt32_t
 
vÆ
)

207 *(
__∑cked
 
uöt32_t
*)(
±r
Ë
vÆ
;;

208 
	}
}

209 #¥agm®
œnguage
=
ª°‹e


210 
	#__UNALIGNED_UINT32_WRITE
(
PTR
,
VAL
Ë
	`__ür_uöt32_wrôe
(PTR,VAL)

	)

213 #i‚de‡
__UNALIGNED_UINT32


214 #¥agm®
œnguage
=
ßve


215 #¥agm®
œnguage
=
exãnded


216 
__∑cked
 
	s__ür_u32
 { 
uöt32_t
 
	mv
; };

217 #¥agm®
œnguage
=
ª°‹e


218 
	#__UNALIGNED_UINT32
(
PTR
Ë(((
__ür_u32
 *)(PTR))->
v
)

	)

221 #i‚de‡ 
__USED


222 #i‡
__ICCARM_V8


223 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

225 
	#__USED
 
	`_Pøgma
("__roŸ")

	)

229 #i‚de‡ 
__WEAK


230 #i‡
__ICCARM_V8


231 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

233 
	#__WEAK
 
	`_Pøgma
("__wók")

	)

238 #i‚de‡
__ICCARM_INTRINSICS_VERSION__


239 
	#__ICCARM_INTRINSICS_VERSION__
 0

	)

242 #i‡
__ICCARM_INTRINSICS_VERSION__
 == 2

244 #i‡
deföed
(
__CLZ
)

245 #unde‡
__CLZ


247 #i‡
deföed
(
__REVSH
)

248 #unde‡
__REVSH


250 #i‡
deföed
(
__RBIT
)

251 #unde‡
__RBIT


253 #i‡
deföed
(
__SSAT
)

254 #unde‡
__SSAT


256 #i‡
deföed
(
__USAT
)

257 #unde‡
__USAT


260 
	~"icˇrm_buûtö.h
"

262 
	#__dißbÀ_Áu…_úq
 
__ür_buûtö_dißbÀ_fiq


	)

263 
	#__dißbÀ_úq
 
__ür_buûtö_dißbÀ_öãºu±


	)

264 
	#__íabÀ_Áu…_úq
 
__ür_buûtö_íabÀ_fiq


	)

265 
	#__íabÀ_úq
 
__ür_buûtö_íabÀ_öãºu±


	)

266 
	#__¨m_r§
 
__ür_buûtö_r§


	)

267 
	#__¨m_w§
 
__ür_buûtö_w§


	)

270 
	#__gë_APSR
(Ë(
	`__¨m_r§
("APSR"))

	)

271 
	#__gë_BASEPRI
(Ë(
	`__¨m_r§
("BASEPRI"))

	)

272 
	#__gë_CONTROL
(Ë(
	`__¨m_r§
("CONTROL"))

	)

273 
	#__gë_FAULTMASK
(Ë(
	`__¨m_r§
("FAULTMASK"))

	)

275 #i‡((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

276 (
deföed
 (
__FPU_USED
 ) && (
	g__FPU_USED
 == 1U)) )

277 
	#__gë_FPSCR
(Ë(
	`__¨m_r§
("FPSCR"))

	)

278 
	#__£t_FPSCR
(
VALUE
Ë(
	`__¨m_w§
("FPSCR", (VALUE)))

	)

280 
	#__gë_FPSCR
(Ë–0 )

	)

281 
	#__£t_FPSCR
(
VALUE
Ë(()VALUE)

	)

284 
	#__gë_IPSR
(Ë(
	`__¨m_r§
("IPSR"))

	)

285 
	#__gë_MSP
(Ë(
	`__¨m_r§
("MSP"))

	)

286 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

287 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

289 
	#__gë_MSPLIM
(Ë(0U)

	)

291 
	#__gë_MSPLIM
(Ë(
	`__¨m_r§
("MSPLIM"))

	)

293 
	#__gë_PRIMASK
(Ë(
	`__¨m_r§
("PRIMASK"))

	)

294 
	#__gë_PSP
(Ë(
	`__¨m_r§
("PSP"))

	)

296 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

297 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

299 
	#__gë_PSPLIM
(Ë(0U)

	)

301 
	#__gë_PSPLIM
(Ë(
	`__¨m_r§
("PSPLIM"))

	)

304 
	#__gë_xPSR
(Ë(
	`__¨m_r§
("xPSR"))

	)

306 
	#__£t_BASEPRI
(
VALUE
Ë(
	`__¨m_w§
("BASEPRI", (VALUE)))

	)

307 
	#__£t_BASEPRI_MAX
(
VALUE
Ë(
	`__¨m_w§
("BASEPRI_MAX", (VALUE)))

	)

308 
	#__£t_CONTROL
(
VALUE
Ë(
	`__¨m_w§
("CONTROL", (VALUE)))

	)

309 
	#__£t_FAULTMASK
(
VALUE
Ë(
	`__¨m_w§
("FAULTMASK", (VALUE)))

	)

310 
	#__£t_MSP
(
VALUE
Ë(
	`__¨m_w§
("MSP", (VALUE)))

	)

312 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

313 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

315 
	#__£t_MSPLIM
(
VALUE
Ë(()(VALUE))

	)

317 
	#__£t_MSPLIM
(
VALUE
Ë(
	`__¨m_w§
("MSPLIM", (VALUE)))

	)

319 
	#__£t_PRIMASK
(
VALUE
Ë(
	`__¨m_w§
("PRIMASK", (VALUE)))

	)

320 
	#__£t_PSP
(
VALUE
Ë(
	`__¨m_w§
("PSP", (VALUE)))

	)

321 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

322 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

324 
	#__£t_PSPLIM
(
VALUE
Ë(()(VALUE))

	)

326 
	#__£t_PSPLIM
(
VALUE
Ë(
	`__¨m_w§
("PSPLIM", (VALUE)))

	)

329 
	#__TZ_gë_CONTROL_NS
(Ë(
	`__¨m_r§
("CONTROL_NS"))

	)

330 
	#__TZ_£t_CONTROL_NS
(
VALUE
Ë(
	`__¨m_w§
("CONTROL_NS", (VALUE)))

	)

331 
	#__TZ_gë_PSP_NS
(Ë(
	`__¨m_r§
("PSP_NS"))

	)

332 
	#__TZ_£t_PSP_NS
(
VALUE
Ë(
	`__¨m_w§
("PSP_NS", (VALUE)))

	)

333 
	#__TZ_gë_MSP_NS
(Ë(
	`__¨m_r§
("MSP_NS"))

	)

334 
	#__TZ_£t_MSP_NS
(
VALUE
Ë(
	`__¨m_w§
("MSP_NS", (VALUE)))

	)

335 
	#__TZ_gë_SP_NS
(Ë(
	`__¨m_r§
("SP_NS"))

	)

336 
	#__TZ_£t_SP_NS
(
VALUE
Ë(
	`__¨m_w§
("SP_NS", (VALUE)))

	)

337 
	#__TZ_gë_PRIMASK_NS
(Ë(
	`__¨m_r§
("PRIMASK_NS"))

	)

338 
	#__TZ_£t_PRIMASK_NS
(
VALUE
Ë(
	`__¨m_w§
("PRIMASK_NS", (VALUE)))

	)

339 
	#__TZ_gë_BASEPRI_NS
(Ë(
	`__¨m_r§
("BASEPRI_NS"))

	)

340 
	#__TZ_£t_BASEPRI_NS
(
VALUE
Ë(
	`__¨m_w§
("BASEPRI_NS", (VALUE)))

	)

341 
	#__TZ_gë_FAULTMASK_NS
(Ë(
	`__¨m_r§
("FAULTMASK_NS"))

	)

342 
	#__TZ_£t_FAULTMASK_NS
(
VALUE
)(
	`__¨m_w§
("FAULTMASK_NS", (VALUE)))

	)

344 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

345 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

347 
	#__TZ_gë_PSPLIM_NS
(Ë(0U)

	)

348 
	#__TZ_£t_PSPLIM_NS
(
VALUE
Ë(()(VALUE))

	)

350 
	#__TZ_gë_PSPLIM_NS
(Ë(
	`__¨m_r§
("PSPLIM_NS"))

	)

351 
	#__TZ_£t_PSPLIM_NS
(
VALUE
Ë(
	`__¨m_w§
("PSPLIM_NS", (VALUE)))

	)

354 
	#__TZ_gë_MSPLIM_NS
(Ë(
	`__¨m_r§
("MSPLIM_NS"))

	)

355 
	#__TZ_£t_MSPLIM_NS
(
VALUE
Ë(
	`__¨m_w§
("MSPLIM_NS", (VALUE)))

	)

357 
	#__NOP
 
__ür_buûtö_no_›î©i⁄


	)

359 
	#__CLZ
 
__ür_buûtö_CLZ


	)

360 
	#__CLREX
 
__ür_buûtö_CLREX


	)

362 
	#__DMB
 
__ür_buûtö_DMB


	)

363 
	#__DSB
 
__ür_buûtö_DSB


	)

364 
	#__ISB
 
__ür_buûtö_ISB


	)

366 
	#__LDREXB
 
__ür_buûtö_LDREXB


	)

367 
	#__LDREXH
 
__ür_buûtö_LDREXH


	)

368 
	#__LDREXW
 
__ür_buûtö_LDREX


	)

370 
	#__RBIT
 
__ür_buûtö_RBIT


	)

371 
	#__REV
 
__ür_buûtö_REV


	)

372 
	#__REV16
 
__ür_buûtö_REV16


	)

374 
__IAR_FT
 
öt16_t
 
	$__REVSH
(
öt16_t
 
vÆ
)

376  (
öt16_t
Ë
	`__ür_buûtö_REVSH
(
vÆ
);

377 
	}
}

379 
	#__ROR
 
__ür_buûtö_ROR


	)

380 
	#__RRX
 
__ür_buûtö_RRX


	)

382 
	#__SEV
 
__ür_buûtö_SEV


	)

384 #i‡!
__IAR_M0_FAMILY


385 
	#__SSAT
 
__ür_buûtö_SSAT


	)

388 
	#__STREXB
 
__ür_buûtö_STREXB


	)

389 
	#__STREXH
 
__ür_buûtö_STREXH


	)

390 
	#__STREXW
 
__ür_buûtö_STREX


	)

392 #i‡!
__IAR_M0_FAMILY


393 
	#__USAT
 
__ür_buûtö_USAT


	)

396 
	#__WFE
 
__ür_buûtö_WFE


	)

397 
	#__WFI
 
__ür_buûtö_WFI


	)

399 #i‡
__ARM_MEDIA__


400 
	#__SADD8
 
__ür_buûtö_SADD8


	)

401 
	#__QADD8
 
__ür_buûtö_QADD8


	)

402 
	#__SHADD8
 
__ür_buûtö_SHADD8


	)

403 
	#__UADD8
 
__ür_buûtö_UADD8


	)

404 
	#__UQADD8
 
__ür_buûtö_UQADD8


	)

405 
	#__UHADD8
 
__ür_buûtö_UHADD8


	)

406 
	#__SSUB8
 
__ür_buûtö_SSUB8


	)

407 
	#__QSUB8
 
__ür_buûtö_QSUB8


	)

408 
	#__SHSUB8
 
__ür_buûtö_SHSUB8


	)

409 
	#__USUB8
 
__ür_buûtö_USUB8


	)

410 
	#__UQSUB8
 
__ür_buûtö_UQSUB8


	)

411 
	#__UHSUB8
 
__ür_buûtö_UHSUB8


	)

412 
	#__SADD16
 
__ür_buûtö_SADD16


	)

413 
	#__QADD16
 
__ür_buûtö_QADD16


	)

414 
	#__SHADD16
 
__ür_buûtö_SHADD16


	)

415 
	#__UADD16
 
__ür_buûtö_UADD16


	)

416 
	#__UQADD16
 
__ür_buûtö_UQADD16


	)

417 
	#__UHADD16
 
__ür_buûtö_UHADD16


	)

418 
	#__SSUB16
 
__ür_buûtö_SSUB16


	)

419 
	#__QSUB16
 
__ür_buûtö_QSUB16


	)

420 
	#__SHSUB16
 
__ür_buûtö_SHSUB16


	)

421 
	#__USUB16
 
__ür_buûtö_USUB16


	)

422 
	#__UQSUB16
 
__ür_buûtö_UQSUB16


	)

423 
	#__UHSUB16
 
__ür_buûtö_UHSUB16


	)

424 
	#__SASX
 
__ür_buûtö_SASX


	)

425 
	#__QASX
 
__ür_buûtö_QASX


	)

426 
	#__SHASX
 
__ür_buûtö_SHASX


	)

427 
	#__UASX
 
__ür_buûtö_UASX


	)

428 
	#__UQASX
 
__ür_buûtö_UQASX


	)

429 
	#__UHASX
 
__ür_buûtö_UHASX


	)

430 
	#__SSAX
 
__ür_buûtö_SSAX


	)

431 
	#__QSAX
 
__ür_buûtö_QSAX


	)

432 
	#__SHSAX
 
__ür_buûtö_SHSAX


	)

433 
	#__USAX
 
__ür_buûtö_USAX


	)

434 
	#__UQSAX
 
__ür_buûtö_UQSAX


	)

435 
	#__UHSAX
 
__ür_buûtö_UHSAX


	)

436 
	#__USAD8
 
__ür_buûtö_USAD8


	)

437 
	#__USADA8
 
__ür_buûtö_USADA8


	)

438 
	#__SSAT16
 
__ür_buûtö_SSAT16


	)

439 
	#__USAT16
 
__ür_buûtö_USAT16


	)

440 
	#__UXTB16
 
__ür_buûtö_UXTB16


	)

441 
	#__UXTAB16
 
__ür_buûtö_UXTAB16


	)

442 
	#__SXTB16
 
__ür_buûtö_SXTB16


	)

443 
	#__SXTAB16
 
__ür_buûtö_SXTAB16


	)

444 
	#__SMUAD
 
__ür_buûtö_SMUAD


	)

445 
	#__SMUADX
 
__ür_buûtö_SMUADX


	)

446 
	#__SMMLA
 
__ür_buûtö_SMMLA


	)

447 
	#__SMLAD
 
__ür_buûtö_SMLAD


	)

448 
	#__SMLADX
 
__ür_buûtö_SMLADX


	)

449 
	#__SMLALD
 
__ür_buûtö_SMLALD


	)

450 
	#__SMLALDX
 
__ür_buûtö_SMLALDX


	)

451 
	#__SMUSD
 
__ür_buûtö_SMUSD


	)

452 
	#__SMUSDX
 
__ür_buûtö_SMUSDX


	)

453 
	#__SMLSD
 
__ür_buûtö_SMLSD


	)

454 
	#__SMLSDX
 
__ür_buûtö_SMLSDX


	)

455 
	#__SMLSLD
 
__ür_buûtö_SMLSLD


	)

456 
	#__SMLSLDX
 
__ür_buûtö_SMLSLDX


	)

457 
	#__SEL
 
__ür_buûtö_SEL


	)

458 
	#__QADD
 
__ür_buûtö_QADD


	)

459 
	#__QSUB
 
__ür_buûtö_QSUB


	)

460 
	#__PKHBT
 
__ür_buûtö_PKHBT


	)

461 
	#__PKHTB
 
__ür_buûtö_PKHTB


	)

466 #i‡
__IAR_M0_FAMILY


468 
	#__CLZ
 
__cmsis_ür_˛z_nŸ_a˘ive


	)

469 
	#__SSAT
 
__cmsis_ür_sßt_nŸ_a˘ive


	)

470 
	#__USAT
 
__cmsis_ür_ußt_nŸ_a˘ive


	)

471 
	#__RBIT
 
__cmsis_ür_rbô_nŸ_a˘ive


	)

472 
	#__gë_APSR
 
__cmsis_ür_gë_APSR_nŸ_a˘ive


	)

476 #i‡(!((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

477 (
deföed
 (
__FPU_USED
 ) && (
	g__FPU_USED
 == 1U)) ))

478 
	#__gë_FPSCR
 
__cmsis_ür_gë_FPSR_nŸ_a˘ive


	)

479 
	#__£t_FPSCR
 
__cmsis_ür_£t_FPSR_nŸ_a˘ive


	)

482 #ifde‡
__INTRINSICS_INCLUDED


483 #îr‹ 
öåösics
.
h
 
is
 
Æªady
 
ö˛uded
 
¥eviou¶y
!

486 
	~<öåösics.h
>

488 #i‡
__IAR_M0_FAMILY


490 #unde‡
__CLZ


491 #unde‡
__SSAT


492 #unde‡
__USAT


493 #unde‡
__RBIT


494 #unde‡
__gë_APSR


496 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
d©a
)

498 i‡(
d©a
 == 0U) {  32U; }

500 
uöt32_t
 
cou¡
 = 0U;

501 
uöt32_t
 
mask
 = 0x80000000U;

503 (
d©a
 & 
mask
) == 0U)

505 
cou¡
 += 1U;

506 
mask
 = mask >> 1U;

508  
cou¡
;

509 
	}
}

511 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
v
)

513 
uöt8_t
 
sc
 = 31U;

514 
uöt32_t
 
r
 = 
v
;

515 
v
 >>= 1U; v; v >>= 1U)

517 
r
 <<= 1U;

518 
r
 |
v
 & 1U;

519 
sc
--;

521  (
r
 << 
sc
);

522 
	}
}

524 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

526 
uöt32_t
 
ªs
;

527 
	`__asm
("MRS %0,APSR" : "Ù" (
ªs
));

528  
ªs
;

529 
	}
}

533 #i‡(!((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

534 (
deföed
 (
__FPU_USED
 ) && (
	g__FPU_USED
 == 1U)) ))

535 #unde‡
__gë_FPSCR


536 #unde‡
__£t_FPSCR


537 
	#__gë_FPSCR
(Ë(0)

	)

538 
	#__£t_FPSCR
(
VALUE
Ë(()VALUE)

	)

541 #¥agm®
düg_suµªss
=
Pe940


542 #¥agm®
düg_suµªss
=
Pe177


544 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

545 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

546 
	#__NOP
 
__no_›î©i⁄


	)

548 
	#__gë_xPSR
 
__gë_PSR


	)

550 #i‡(!
deföed
(
__ARM_ARCH_6M__
) || __ARM_ARCH_6M__==0)

552 
__IAR_FT
 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 vﬁ©ûê*
±r
)

554  
	`__LDREX
((*)
±r
);

555 
	}
}

557 
__IAR_FT
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_àvﬁ©ûê*
±r
)

559  
	`__STREX
(
vÆue
, (*)
±r
);

560 
	}
}

565 #i‡(
__CORTEX_M
 >= 0x03)

567 
__IAR_FT
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

569 
uöt32_t
 
ªsu…
;

570 
	`__ASM
("RRX %0, %1" : "Ù"(
ªsu…
Ë: "r" (
vÆue
) : "cc");

571 (
ªsu…
);

572 
	}
}

574 
__IAR_FT
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
vÆue
)

576 
__asm
 vﬁ©ûe("MSR BASEPRI_MAX,%0"::"r" (
vÆue
));

577 
	}
}

580 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

581 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

586 
__IAR_FT
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

588  (
›1
 >> 
›2
) | (op1 << (((op1)*8)-op2));

589 
	}
}

591 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

592 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) )

594 
__IAR_FT
 
uöt32_t
 
	$__gë_MSPLIM
()

596 
uöt32_t
 
ªs
;

597 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

598 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

600 
ªs
 = 0U;

602 
__asm
 vﬁ©ûe("MRS %0,MSPLIM" : "Ù" (
ªs
));

604  
ªs
;

605 
	}
}

607 
__IAR_FT
 
	$__£t_MSPLIM
(
uöt32_t
 
vÆue
)

609 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

610 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

612 ()
vÆue
;

614 
__asm
 vﬁ©ûe("MSR MSPLIM,%0" :: "r" (
vÆue
));

616 
	}
}

618 
__IAR_FT
 
uöt32_t
 
	$__gë_PSPLIM
()

620 
uöt32_t
 
ªs
;

621 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

622 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

624 
ªs
 = 0U;

626 
__asm
 vﬁ©ûe("MRS %0,PSPLIM" : "Ù" (
ªs
));

628  
ªs
;

629 
	}
}

631 
__IAR_FT
 
	$__£t_PSPLIM
(
uöt32_t
 
vÆue
)

633 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

634 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

636 ()
vÆue
;

638 
__asm
 vﬁ©ûe("MSR PSPLIM,%0" :: "r" (
vÆue
));

640 
	}
}

642 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

644 
uöt32_t
 
ªs
;

645 
__asm
 vﬁ©ûe("MRS %0,CONTROL_NS" : "Ù" (
ªs
));

646  
ªs
;

647 
	}
}

649 
__IAR_FT
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
vÆue
)

651 
__asm
 vﬁ©ûe("MSR CONTROL_NS,%0" :: "r" (
vÆue
));

652 
	}
}

654 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

656 
uöt32_t
 
ªs
;

657 
__asm
 vﬁ©ûe("MRS %0,PSP_NS" : "Ù" (
ªs
));

658  
ªs
;

659 
	}
}

661 
__IAR_FT
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
vÆue
)

663 
__asm
 vﬁ©ûe("MSR PSP_NS,%0" :: "r" (
vÆue
));

664 
	}
}

666 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

668 
uöt32_t
 
ªs
;

669 
__asm
 vﬁ©ûe("MRS %0,MSP_NS" : "Ù" (
ªs
));

670  
ªs
;

671 
	}
}

673 
__IAR_FT
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
vÆue
)

675 
__asm
 vﬁ©ûe("MSR MSP_NS,%0" :: "r" (
vÆue
));

676 
	}
}

678 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_SP_NS
()

680 
uöt32_t
 
ªs
;

681 
__asm
 vﬁ©ûe("MRS %0,SP_NS" : "Ù" (
ªs
));

682  
ªs
;

683 
	}
}

684 
__IAR_FT
 
	$__TZ_£t_SP_NS
(
uöt32_t
 
vÆue
)

686 
__asm
 vﬁ©ûe("MSR SP_NS,%0" :: "r" (
vÆue
));

687 
	}
}

689 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

691 
uöt32_t
 
ªs
;

692 
__asm
 vﬁ©ûe("MRS %0,PRIMASK_NS" : "Ù" (
ªs
));

693  
ªs
;

694 
	}
}

696 
__IAR_FT
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
vÆue
)

698 
__asm
 vﬁ©ûe("MSR PRIMASK_NS,%0" :: "r" (
vÆue
));

699 
	}
}

701 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

703 
uöt32_t
 
ªs
;

704 
__asm
 vﬁ©ûe("MRS %0,BASEPRI_NS" : "Ù" (
ªs
));

705  
ªs
;

706 
	}
}

708 
__IAR_FT
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
vÆue
)

710 
__asm
 vﬁ©ûe("MSR BASEPRI_NS,%0" :: "r" (
vÆue
));

711 
	}
}

713 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

715 
uöt32_t
 
ªs
;

716 
__asm
 vﬁ©ûe("MRS %0,FAULTMASK_NS" : "Ù" (
ªs
));

717  
ªs
;

718 
	}
}

720 
__IAR_FT
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
vÆue
)

722 
__asm
 vﬁ©ûe("MSR FAULTMASK_NS,%0" :: "r" (
vÆue
));

723 
	}
}

725 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

727 
uöt32_t
 
ªs
;

728 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

729 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

731 
ªs
 = 0U;

733 
__asm
 vﬁ©ûe("MRS %0,PSPLIM_NS" : "Ù" (
ªs
));

735  
ªs
;

736 
	}
}

738 
__IAR_FT
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
vÆue
)

740 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

741 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

743 ()
vÆue
;

745 
__asm
 vﬁ©ûe("MSR PSPLIM_NS,%0" :: "r" (
vÆue
));

747 
	}
}

749 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

751 
uöt32_t
 
ªs
;

752 
__asm
 vﬁ©ûe("MRS %0,MSPLIM_NS" : "Ù" (
ªs
));

753  
ªs
;

754 
	}
}

756 
__IAR_FT
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
vÆue
)

758 
__asm
 vﬁ©ûe("MSR MSPLIM_NS,%0" :: "r" (
vÆue
));

759 
	}
}

765 
	#__BKPT
(
vÆue
Ë
__asm
 vﬁ©ûê("BKPT %0" : : "i"(vÆue))

	)

767 #i‡
__IAR_M0_FAMILY


768 
__STATIC_INLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

770 i‡((
ßt
 >= 1U) && (sat <= 32U))

772 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

773 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

774 i‡(
vÆ
 > 
max
)

776  
max
;

778 i‡(
vÆ
 < 
mö
)

780  
mö
;

783  
vÆ
;

784 
	}
}

786 
__STATIC_INLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

788 i‡(
ßt
 <= 31U)

790 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

791 i‡(
vÆ
 > (
öt32_t
)
max
)

793  
max
;

795 i‡(
vÆ
 < 0)

800  (
uöt32_t
)
vÆ
;

801 
	}
}

804 #i‡(
__CORTEX_M
 >= 0x03)

806 
__IAR_FT
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
addr
)

808 
uöt32_t
 
ªs
;

809 
	`__ASM
("LDRBT %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
) : "memory");

810  ((
uöt8_t
)
ªs
);

811 
	}
}

813 
__IAR_FT
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
addr
)

815 
uöt32_t
 
ªs
;

816 
	`__ASM
("LDRHT %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
) : "memory");

817  ((
uöt16_t
)
ªs
);

818 
	}
}

820 
__IAR_FT
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
addr
)

822 
uöt32_t
 
ªs
;

823 
	`__ASM
("LDRT %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
) : "memory");

824  
ªs
;

825 
	}
}

827 
__IAR_FT
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

829 
	`__ASM
("STRBT %1, [%0]" : : "r" (
addr
), "r" ((
uöt32_t
)
vÆue
) : "memory");

830 
	}
}

832 
__IAR_FT
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

834 
	`__ASM
("STRHT %1, [%0]" : : "r" (
addr
), "r" ((
uöt32_t
)
vÆue
) : "memory");

835 
	}
}

837 
__IAR_FT
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

839 
	`__ASM
("STRT %1, [%0]" : : "r" (
addr
), "r" (
vÆue
) : "memory");

840 
	}
}

844 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

845 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) )

848 
__IAR_FT
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

850 
uöt32_t
 
ªs
;

851 
__ASM
 vﬁ©ûê("LDAB %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

852  ((
uöt8_t
)
ªs
);

853 
	}
}

855 
__IAR_FT
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

857 
uöt32_t
 
ªs
;

858 
__ASM
 vﬁ©ûê("LDAH %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

859  ((
uöt16_t
)
ªs
);

860 
	}
}

862 
__IAR_FT
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

864 
uöt32_t
 
ªs
;

865 
__ASM
 vﬁ©ûê("LDA %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

866  
ªs
;

867 
	}
}

869 
__IAR_FT
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

871 
__ASM
 vﬁ©ûê("STLB %1, [%0]" :: "r" (
±r
), "r" (
vÆue
) : "memory");

872 
	}
}

874 
__IAR_FT
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

876 
__ASM
 vﬁ©ûê("STLH %1, [%0]" :: "r" (
±r
), "r" (
vÆue
) : "memory");

877 
	}
}

879 
__IAR_FT
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

881 
__ASM
 vﬁ©ûê("STL %1, [%0]" :: "r" (
±r
), "r" (
vÆue
) : "memory");

882 
	}
}

884 
__IAR_FT
 
uöt8_t
 
	$__LDAEXB
(vﬁ©ûê
uöt8_t
 *
±r
)

886 
uöt32_t
 
ªs
;

887 
__ASM
 vﬁ©ûê("LDAEXB %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

888  ((
uöt8_t
)
ªs
);

889 
	}
}

891 
__IAR_FT
 
uöt16_t
 
	$__LDAEXH
(vﬁ©ûê
uöt16_t
 *
±r
)

893 
uöt32_t
 
ªs
;

894 
__ASM
 vﬁ©ûê("LDAEXH %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

895  ((
uöt16_t
)
ªs
);

896 
	}
}

898 
__IAR_FT
 
uöt32_t
 
	$__LDAEX
(vﬁ©ûê
uöt32_t
 *
±r
)

900 
uöt32_t
 
ªs
;

901 
__ASM
 vﬁ©ûê("LDAEX %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

902  
ªs
;

903 
	}
}

905 
__IAR_FT
 
uöt32_t
 
	$__STLEXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

907 
uöt32_t
 
ªs
;

908 
__ASM
 vﬁ©ûê("STLEXB %0, %2, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
), "r" (
vÆue
) : "memory");

909  
ªs
;

910 
	}
}

912 
__IAR_FT
 
uöt32_t
 
	$__STLEXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

914 
uöt32_t
 
ªs
;

915 
__ASM
 vﬁ©ûê("STLEXH %0, %2, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
), "r" (
vÆue
) : "memory");

916  
ªs
;

917 
	}
}

919 
__IAR_FT
 
uöt32_t
 
	$__STLEX
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

921 
uöt32_t
 
ªs
;

922 
__ASM
 vﬁ©ûê("STLEX %0, %2, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
), "r" (
vÆue
) : "memory");

923  
ªs
;

924 
	}
}

928 #unde‡
__IAR_FT


929 #unde‡
__IAR_M0_FAMILY


930 #unde‡
__ICCARM_V8


932 #¥agm®
düg_deÁu…
=
Pe940


933 #¥agm®
düg_deÁu…
=
Pe177


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_version.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CMSIS_VERSION_H


32 
	#__CMSIS_VERSION_H


	)

35 
	#__CM_CMSIS_VERSION_MAIN
 ( 5UË

	)

36 
	#__CM_CMSIS_VERSION_SUB
 ( 1UË

	)

37 
	#__CM_CMSIS_VERSION
 ((
__CM_CMSIS_VERSION_MAIN
 << 16U) | \

38 
__CM_CMSIS_VERSION_SUB
 )

	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_armv8mbl.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_ARMV8MBL_H_GENERIC


32 
	#__CORE_ARMV8MBL_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__ARMv8MBL_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__ARMv8MBL_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__ARMv8MBL_CMSIS_VERSION
 ((
__ARMv8MBL_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__ARMv8MBL_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 ( 2UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_ARMV8MBL_H_DEPENDANT


127 
	#__CORE_ARMV8MBL_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__ARMv8MBL_REV


136 
	#__ARMv8MBL_REV
 0x0000U

	)

140 #i‚de‡
__FPU_PRESENT


141 
	#__FPU_PRESENT
 0U

	)

145 #i‚de‡
__MPU_PRESENT


146 
	#__MPU_PRESENT
 0U

	)

150 #i‚de‡
__SAUREGION_PRESENT


151 
	#__SAUREGION_PRESENT
 0U

	)

155 #i‚de‡
__VTOR_PRESENT


156 
	#__VTOR_PRESENT
 0U

	)

160 #i‚de‡
__NVIC_PRIO_BITS


161 
	#__NVIC_PRIO_BITS
 2U

	)

165 #i‚de‡
__Víd‹_SysTickC⁄fig


166 
	#__Víd‹_SysTickC⁄fig
 0U

	)

170 #i‚de‡
__ETM_PRESENT


171 
	#__ETM_PRESENT
 0U

	)

175 #i‚de‡
__MTB_PRESENT


176 
	#__MTB_PRESENT
 0U

	)

190 #ifde‡
__˝lu•lus


191 
	#__I
 vﬁ©ûê

	)

193 
	#__I
 vﬁ©ûêc⁄°

	)

195 
	#__O
 vﬁ©ûê

	)

196 
	#__IO
 vﬁ©ûê

	)

199 
	#__IM
 vﬁ©ûêc⁄°

	)

200 
	#__OM
 vﬁ©ûê

	)

201 
	#__IOM
 vﬁ©ûê

	)

237 
uöt32_t
 
_ª£rved0
:28;

238 
uöt32_t
 
V
:1;

239 
uöt32_t
 
C
:1;

240 
uöt32_t
 
Z
:1;

241 
uöt32_t
 
N
:1;

242 } 
b
;

243 
uöt32_t
 
w
;

244 } 
	tAPSR_Ty≥
;

247 
	#APSR_N_Pos
 31U

	)

248 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

250 
	#APSR_Z_Pos
 30U

	)

251 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

253 
	#APSR_C_Pos
 29U

	)

254 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

256 
	#APSR_V_Pos
 28U

	)

257 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

267 
uöt32_t
 
ISR
:9;

268 
uöt32_t
 
_ª£rved0
:23;

269 } 
b
;

270 
uöt32_t
 
w
;

271 } 
	tIPSR_Ty≥
;

274 
	#IPSR_ISR_Pos
 0U

	)

275 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

285 
uöt32_t
 
ISR
:9;

286 
uöt32_t
 
_ª£rved0
:15;

287 
uöt32_t
 
T
:1;

288 
uöt32_t
 
_ª£rved1
:3;

289 
uöt32_t
 
V
:1;

290 
uöt32_t
 
C
:1;

291 
uöt32_t
 
Z
:1;

292 
uöt32_t
 
N
:1;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	txPSR_Ty≥
;

298 
	#xPSR_N_Pos
 31U

	)

299 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

301 
	#xPSR_Z_Pos
 30U

	)

302 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

304 
	#xPSR_C_Pos
 29U

	)

305 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

307 
	#xPSR_V_Pos
 28U

	)

308 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

310 
	#xPSR_T_Pos
 24U

	)

311 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

313 
	#xPSR_ISR_Pos
 0U

	)

314 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

324 
uöt32_t
 
nPRIV
:1;

325 
uöt32_t
 
SPSEL
:1;

326 
uöt32_t
 
_ª£rved1
:30;

327 } 
b
;

328 
uöt32_t
 
w
;

329 } 
	tCONTROL_Ty≥
;

332 
	#CONTROL_SPSEL_Pos
 1U

	)

333 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

335 
	#CONTROL_nPRIV_Pos
 0U

	)

336 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

353 
__IOM
 
uöt32_t
 
ISER
[16U];

354 
uöt32_t
 
RESERVED0
[16U];

355 
__IOM
 
uöt32_t
 
ICER
[16U];

356 
uöt32_t
 
RSERVED1
[16U];

357 
__IOM
 
uöt32_t
 
ISPR
[16U];

358 
uöt32_t
 
RESERVED2
[16U];

359 
__IOM
 
uöt32_t
 
ICPR
[16U];

360 
uöt32_t
 
RESERVED3
[16U];

361 
__IOM
 
uöt32_t
 
IABR
[16U];

362 
uöt32_t
 
RESERVED4
[16U];

363 
__IOM
 
uöt32_t
 
ITNS
[16U];

364 
uöt32_t
 
RESERVED5
[16U];

365 
__IOM
 
uöt32_t
 
IPR
[124U];

366 } 
	tNVIC_Ty≥
;

383 
__IM
 
uöt32_t
 
CPUID
;

384 
__IOM
 
uöt32_t
 
ICSR
;

385 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

386 
__IOM
 
uöt32_t
 
VTOR
;

388 
uöt32_t
 
RESERVED0
;

390 
__IOM
 
uöt32_t
 
AIRCR
;

391 
__IOM
 
uöt32_t
 
SCR
;

392 
__IOM
 
uöt32_t
 
CCR
;

393 
uöt32_t
 
RESERVED1
;

394 
__IOM
 
uöt32_t
 
SHPR
[2U];

395 
__IOM
 
uöt32_t
 
SHCSR
;

396 } 
	tSCB_Ty≥
;

399 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

400 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

402 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

403 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

405 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

406 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

408 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

409 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

411 
	#SCB_CPUID_REVISION_Pos
 0U

	)

412 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

415 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

416 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

418 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

419 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

421 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

422 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

424 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

425 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

427 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

428 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

431 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

433 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

434 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

436 
	#SCB_ICSR_STTNS_Pos
 24U

	)

437 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

439 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

440 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

442 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

443 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

445 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

446 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

448 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

449 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

451 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

452 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

454 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

456 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

457 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

461 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

462 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

464 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

465 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

467 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

468 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

470 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

471 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

473 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

474 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

476 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

477 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

479 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

480 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

482 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

483 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

486 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

487 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

489 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

490 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

492 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

493 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

495 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

496 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

499 
	#SCB_CCR_BP_Pos
 18U

	)

500 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

502 
	#SCB_CCR_IC_Pos
 17U

	)

503 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

505 
	#SCB_CCR_DC_Pos
 16U

	)

506 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

508 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

509 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

511 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

512 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

514 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

515 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

517 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

518 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

520 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

521 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

524 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

525 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

527 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

528 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

530 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

531 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

533 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

534 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

536 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

537 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

539 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

540 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

542 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

543 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

560 
__IOM
 
uöt32_t
 
CTRL
;

561 
__IOM
 
uöt32_t
 
LOAD
;

562 
__IOM
 
uöt32_t
 
VAL
;

563 
__IM
 
uöt32_t
 
CALIB
;

564 } 
	tSysTick_Ty≥
;

567 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

568 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

570 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

571 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

573 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

574 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

576 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

577 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

580 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

581 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

584 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

585 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

588 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

589 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

591 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

592 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

594 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

595 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

612 
__IOM
 
uöt32_t
 
CTRL
;

613 
uöt32_t
 
RESERVED0
[6U];

614 
__IM
 
uöt32_t
 
PCSR
;

615 
__IOM
 
uöt32_t
 
COMP0
;

616 
uöt32_t
 
RESERVED1
[1U];

617 
__IOM
 
uöt32_t
 
FUNCTION0
;

618 
uöt32_t
 
RESERVED2
[1U];

619 
__IOM
 
uöt32_t
 
COMP1
;

620 
uöt32_t
 
RESERVED3
[1U];

621 
__IOM
 
uöt32_t
 
FUNCTION1
;

622 
uöt32_t
 
RESERVED4
[1U];

623 
__IOM
 
uöt32_t
 
COMP2
;

624 
uöt32_t
 
RESERVED5
[1U];

625 
__IOM
 
uöt32_t
 
FUNCTION2
;

626 
uöt32_t
 
RESERVED6
[1U];

627 
__IOM
 
uöt32_t
 
COMP3
;

628 
uöt32_t
 
RESERVED7
[1U];

629 
__IOM
 
uöt32_t
 
FUNCTION3
;

630 
uöt32_t
 
RESERVED8
[1U];

631 
__IOM
 
uöt32_t
 
COMP4
;

632 
uöt32_t
 
RESERVED9
[1U];

633 
__IOM
 
uöt32_t
 
FUNCTION4
;

634 
uöt32_t
 
RESERVED10
[1U];

635 
__IOM
 
uöt32_t
 
COMP5
;

636 
uöt32_t
 
RESERVED11
[1U];

637 
__IOM
 
uöt32_t
 
FUNCTION5
;

638 
uöt32_t
 
RESERVED12
[1U];

639 
__IOM
 
uöt32_t
 
COMP6
;

640 
uöt32_t
 
RESERVED13
[1U];

641 
__IOM
 
uöt32_t
 
FUNCTION6
;

642 
uöt32_t
 
RESERVED14
[1U];

643 
__IOM
 
uöt32_t
 
COMP7
;

644 
uöt32_t
 
RESERVED15
[1U];

645 
__IOM
 
uöt32_t
 
FUNCTION7
;

646 
uöt32_t
 
RESERVED16
[1U];

647 
__IOM
 
uöt32_t
 
COMP8
;

648 
uöt32_t
 
RESERVED17
[1U];

649 
__IOM
 
uöt32_t
 
FUNCTION8
;

650 
uöt32_t
 
RESERVED18
[1U];

651 
__IOM
 
uöt32_t
 
COMP9
;

652 
uöt32_t
 
RESERVED19
[1U];

653 
__IOM
 
uöt32_t
 
FUNCTION9
;

654 
uöt32_t
 
RESERVED20
[1U];

655 
__IOM
 
uöt32_t
 
COMP10
;

656 
uöt32_t
 
RESERVED21
[1U];

657 
__IOM
 
uöt32_t
 
FUNCTION10
;

658 
uöt32_t
 
RESERVED22
[1U];

659 
__IOM
 
uöt32_t
 
COMP11
;

660 
uöt32_t
 
RESERVED23
[1U];

661 
__IOM
 
uöt32_t
 
FUNCTION11
;

662 
uöt32_t
 
RESERVED24
[1U];

663 
__IOM
 
uöt32_t
 
COMP12
;

664 
uöt32_t
 
RESERVED25
[1U];

665 
__IOM
 
uöt32_t
 
FUNCTION12
;

666 
uöt32_t
 
RESERVED26
[1U];

667 
__IOM
 
uöt32_t
 
COMP13
;

668 
uöt32_t
 
RESERVED27
[1U];

669 
__IOM
 
uöt32_t
 
FUNCTION13
;

670 
uöt32_t
 
RESERVED28
[1U];

671 
__IOM
 
uöt32_t
 
COMP14
;

672 
uöt32_t
 
RESERVED29
[1U];

673 
__IOM
 
uöt32_t
 
FUNCTION14
;

674 
uöt32_t
 
RESERVED30
[1U];

675 
__IOM
 
uöt32_t
 
COMP15
;

676 
uöt32_t
 
RESERVED31
[1U];

677 
__IOM
 
uöt32_t
 
FUNCTION15
;

678 } 
	tDWT_Ty≥
;

681 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

682 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

684 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

685 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

687 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

688 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

690 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

691 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

693 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

694 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

697 
	#DWT_FUNCTION_ID_Pos
 27U

	)

698 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

700 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

701 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

703 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

704 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

706 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

707 
	#DWT_FUNCTION_ACTION_Msk
 (0x3UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

709 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

710 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

727 
__IM
 
uöt32_t
 
SSPSR
;

728 
__IOM
 
uöt32_t
 
CSPSR
;

729 
uöt32_t
 
RESERVED0
[2U];

730 
__IOM
 
uöt32_t
 
ACPR
;

731 
uöt32_t
 
RESERVED1
[55U];

732 
__IOM
 
uöt32_t
 
SPPR
;

733 
uöt32_t
 
RESERVED2
[131U];

734 
__IM
 
uöt32_t
 
FFSR
;

735 
__IOM
 
uöt32_t
 
FFCR
;

736 
__IOM
 
uöt32_t
 
PSCR
;

737 
uöt32_t
 
RESERVED3
[809U];

738 
__OM
 
uöt32_t
 
LAR
;

739 
__IM
 
uöt32_t
 
LSR
;

740 
uöt32_t
 
RESERVED4
[4U];

741 
__IM
 
uöt32_t
 
TYPE
;

742 
__IM
 
uöt32_t
 
DEVTYPE
;

743 } 
	tTPI_Ty≥
;

746 
	#TPI_ACPR_SWOSCALER_Pos
 0U

	)

747 
	#TPI_ACPR_SWOSCALER_Msk
 (0xFFFFUL )

	)

750 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

751 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

754 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

755 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

757 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

758 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

760 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

761 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

763 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

764 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

767 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

768 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

770 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

771 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

773 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

774 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

777 
	#TPI_PSCR_PSCou¡_Pos
 0U

	)

778 
	#TPI_PSCR_PSCou¡_Msk
 (0x1FUL )

	)

781 
	#TPI_LSR_nTT_Pos
 1U

	)

782 
	#TPI_LSR_nTT_Msk
 (0x1UL << 
TPI_LSR_nTT_Pos
Ë

	)

784 
	#TPI_LSR_SLK_Pos
 1U

	)

785 
	#TPI_LSR_SLK_Msk
 (0x1UL << 
TPI_LSR_SLK_Pos
Ë

	)

787 
	#TPI_LSR_SLI_Pos
 0U

	)

788 
	#TPI_LSR_SLI_Msk
 (0x1UL )

	)

791 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

792 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

794 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

795 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

797 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

798 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

800 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

801 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

804 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

805 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

807 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

808 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

813 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

826 
__IM
 
uöt32_t
 
TYPE
;

827 
__IOM
 
uöt32_t
 
CTRL
;

828 
__IOM
 
uöt32_t
 
RNR
;

829 
__IOM
 
uöt32_t
 
RBAR
;

830 
__IOM
 
uöt32_t
 
RLAR
;

831 
uöt32_t
 
RESERVED0
[7U];

833 
__IOM
 
uöt32_t
 
MAIR
[2];

835 
__IOM
 
uöt32_t
 
MAIR0
;

836 
__IOM
 
uöt32_t
 
MAIR1
;

839 } 
	tMPU_Ty≥
;

841 
	#MPU_TYPE_RALIASES
 1U

	)

844 
	#MPU_TYPE_IREGION_Pos
 16U

	)

845 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

847 
	#MPU_TYPE_DREGION_Pos
 8U

	)

848 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

850 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

851 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

854 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

855 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

857 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

858 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

860 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

861 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

864 
	#MPU_RNR_REGION_Pos
 0U

	)

865 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

868 
	#MPU_RBAR_BASE_Pos
 5U

	)

869 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

871 
	#MPU_RBAR_SH_Pos
 3U

	)

872 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

874 
	#MPU_RBAR_AP_Pos
 1U

	)

875 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

877 
	#MPU_RBAR_XN_Pos
 0U

	)

878 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

881 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

882 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

884 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

885 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

887 
	#MPU_RLAR_EN_Pos
 0U

	)

888 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

891 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

892 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

894 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

895 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

897 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

898 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

900 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

901 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

904 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

905 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

907 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

908 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

910 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

911 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

913 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

914 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

920 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

933 
__IOM
 
uöt32_t
 
CTRL
;

934 
__IM
 
uöt32_t
 
TYPE
;

935 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

936 
__IOM
 
uöt32_t
 
RNR
;

937 
__IOM
 
uöt32_t
 
RBAR
;

938 
__IOM
 
uöt32_t
 
RLAR
;

940 } 
	tSAU_Ty≥
;

943 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

944 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

946 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

947 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

950 
	#SAU_TYPE_SREGION_Pos
 0U

	)

951 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

953 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

955 
	#SAU_RNR_REGION_Pos
 0U

	)

956 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

959 
	#SAU_RBAR_BADDR_Pos
 5U

	)

960 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

963 
	#SAU_RLAR_LADDR_Pos
 5U

	)

964 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

966 
	#SAU_RLAR_NSC_Pos
 1U

	)

967 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

969 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

970 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

990 
__IOM
 
uöt32_t
 
DHCSR
;

991 
__OM
 
uöt32_t
 
DCRSR
;

992 
__IOM
 
uöt32_t
 
DCRDR
;

993 
__IOM
 
uöt32_t
 
DEMCR
;

994 
uöt32_t
 
RESERVED4
[1U];

995 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

996 
__IOM
 
uöt32_t
 
DSCSR
;

997 } 
	tC‹eDebug_Ty≥
;

1000 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1001 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1003 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1004 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1006 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1007 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1009 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1010 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1012 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1013 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1015 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1016 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1018 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1019 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1021 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1022 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1024 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1025 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1027 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1028 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1030 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1031 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1033 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1034 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1037 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1038 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1040 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1041 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1044 
	#C‹eDebug_DEMCR_DWTENA_Pos
 24U

	)

1045 
	#C‹eDebug_DEMCR_DWTENA_Msk
 (1UL << 
C‹eDebug_DEMCR_DWTENA_Pos
Ë

	)

1047 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1048 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1050 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1051 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1054 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1055 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1057 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1058 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1060 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1061 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1063 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1064 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

1067 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

1068 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

1070 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

1071 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

1073 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

1074 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

1092 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1100 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1113 
	#SCS_BASE
 (0xE000E000ULË

	)

1114 
	#DWT_BASE
 (0xE0001000ULË

	)

1115 
	#TPI_BASE
 (0xE0040000ULË

	)

1116 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1117 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1118 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1119 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1122 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1123 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1124 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1125 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1126 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1127 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

1129 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1130 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1131 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1134 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1135 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

1136 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

1139 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1140 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

1141 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

1142 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

1143 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

1144 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

1146 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

1147 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

1148 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

1149 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

1151 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1152 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

1153 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

1182 #ifde‡
CMSIS_NVIC_VIRTUAL


1183 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1184 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1186 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1188 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1189 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1190 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1191 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1192 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1193 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1194 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1195 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1196 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1197 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1198 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1199 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1202 #ifde‡
CMSIS_VECTAB_VIRTUAL


1203 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1204 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1206 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1208 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1209 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1212 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1218 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

1221 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

1222 
	#EXC_RETURN_S
 (0x00000040ULË

	)

1223 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

1224 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

1225 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

1226 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

1227 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

1230 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

1231 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

1233 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

1239 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

1240 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

1241 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

1243 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

1244 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

1252 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1254 i‡((
öt32_t
)(
IRQn
) >= 0)

1256 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1269 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1271 i‡((
öt32_t
)(
IRQn
) >= 0)

1273 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1288 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1290 i‡((
öt32_t
)(
IRQn
) >= 0)

1292 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1293 
__DSB
();

1294 
__ISB
();

1307 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1309 i‡((
öt32_t
)(
IRQn
) >= 0)

1311 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1326 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1328 i‡((
öt32_t
)(
IRQn
) >= 0)

1330 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1341 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1343 i‡((
öt32_t
)(
IRQn
) >= 0)

1345 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1358 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1360 i‡((
öt32_t
)(
IRQn
) >= 0)

1362 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1371 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1380 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1382 i‡((
öt32_t
)(
IRQn
) >= 0)

1384 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1401 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1403 i‡((
öt32_t
)(
IRQn
) >= 0)

1405 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1406 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1423 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1425 i‡((
öt32_t
)(
IRQn
) >= 0)

1427 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1428 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1447 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1449 i‡((
öt32_t
)(
IRQn
) >= 0)

1451 
NVIC
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1452 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1456 
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1457 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1471 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1474 i‡((
öt32_t
)(
IRQn
) >= 0)

1476 ((
uöt32_t
)(((
NVIC
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1480 ((
uöt32_t
)(((
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1496 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1498 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1499 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1500 
uöt32_t
 
SubPri‹ôyBôs
;

1502 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1503 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1506 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1507 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1523 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1525 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1526 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1527 
uöt32_t
 
SubPri‹ôyBôs
;

1529 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1530 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1532 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1533 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1547 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1549 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1550 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1552 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1554 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1566 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1568 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1569 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1571 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1573  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1581 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1583 
__DSB
();

1585 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1586 
SCB_AIRCR_SYSRESETREQ_Msk
);

1587 
__DSB
();

1591 
__NOP
();

1595 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1602 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1604 i‡((
öt32_t
)(
IRQn
) >= 0)

1606 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1619 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1621 i‡((
öt32_t
)(
IRQn
) >= 0)

1623 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1638 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1640 i‡((
öt32_t
)(
IRQn
) >= 0)

1642 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1655 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1657 i‡((
öt32_t
)(
IRQn
) >= 0)

1659 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1674 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1676 i‡((
öt32_t
)(
IRQn
) >= 0)

1678 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1689 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1691 i‡((
öt32_t
)(
IRQn
) >= 0)

1693 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1706 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

1708 i‡((
öt32_t
)(
IRQn
) >= 0)

1710 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1728 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1730 i‡((
öt32_t
)(
IRQn
) >= 0)

1732 
NVIC_NS
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC_NS->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1733 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1737 
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB_NS->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1738 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1751 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

1754 i‡((
öt32_t
)(
IRQn
) >= 0)

1756 ((
uöt32_t
)(((
NVIC_NS
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1760 ((
uöt32_t
)(((
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1769 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1771 
	~"mpu_¨mv8.h
"

1791 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1809 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1815 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

1817 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

1826 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

1828 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

1846 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1859 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1861 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1866 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1867 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1868 
SysTick
->
VAL
 = 0UL;

1869 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1870 
SysTick_CTRL_TICKINT_Msk
 |

1871 
SysTick_CTRL_ENABLE_Msk
;

1875 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1888 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

1890 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1895 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1896 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1897 
SysTick_NS
->
VAL
 = 0UL;

1898 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1899 
SysTick_CTRL_TICKINT_Msk
 |

1900 
SysTick_CTRL_ENABLE_Msk
;

1912 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_armv8mml.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_ARMV8MML_H_GENERIC


32 
	#__CORE_ARMV8MML_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__ARMv8MML_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__ARMv8MML_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__ARMv8MML_CMSIS_VERSION
 ((
__ARMv8MML_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__ARMv8MML_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (81UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #i‡
deföed
(
__ARM_FEATURE_DSP
)

89 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

90 
	#__DSP_USED
 1U

	)

93 
	#__DSP_USED
 0U

	)

96 
	#__DSP_USED
 0U

	)

99 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

100 #i‡
deföed
 
__ARM_PCS_VFP


101 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

102 
	#__FPU_USED
 1U

	)

105 
	#__FPU_USED
 0U

	)

108 
	#__FPU_USED
 0U

	)

111 #i‡
deföed
(
__ARM_FEATURE_DSP
)

112 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

113 
	#__DSP_USED
 1U

	)

116 
	#__DSP_USED
 0U

	)

119 
	#__DSP_USED
 0U

	)

122 #ñi‡
deföed
 ( 
__GNUC__
 )

123 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

124 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

125 
	#__FPU_USED
 1U

	)

128 
	#__FPU_USED
 0U

	)

131 
	#__FPU_USED
 0U

	)

134 #i‡
deföed
(
__ARM_FEATURE_DSP
)

135 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

136 
	#__DSP_USED
 1U

	)

139 
	#__DSP_USED
 0U

	)

142 
	#__DSP_USED
 0U

	)

145 #ñi‡
deföed
 ( 
__ICCARM__
 )

146 #i‡
deföed
 
__ARMVFP__


147 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

148 
	#__FPU_USED
 1U

	)

151 
	#__FPU_USED
 0U

	)

154 
	#__FPU_USED
 0U

	)

157 #i‡
deföed
(
__ARM_FEATURE_DSP
)

158 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

159 
	#__DSP_USED
 1U

	)

162 
	#__DSP_USED
 0U

	)

165 
	#__DSP_USED
 0U

	)

168 #ñi‡
deföed
 ( 
__TI_ARM__
 )

169 #i‡
deföed
 
__TI_VFP_SUPPORT__


170 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

171 
	#__FPU_USED
 1U

	)

174 
	#__FPU_USED
 0U

	)

177 
	#__FPU_USED
 0U

	)

180 #ñi‡
deföed
 ( 
__TASKING__
 )

181 #i‡
deföed
 
__FPU_VFP__


182 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

183 
	#__FPU_USED
 1U

	)

186 
	#__FPU_USED
 0U

	)

189 
	#__FPU_USED
 0U

	)

192 #ñi‡
deföed
 ( 
__CSMC__
 )

193 #i‡–
__CSMC__
 & 0x400U)

194 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

195 
	#__FPU_USED
 1U

	)

198 
	#__FPU_USED
 0U

	)

201 
	#__FPU_USED
 0U

	)

206 
	~"cmsis_compûî.h
"

209 #ifde‡
__˝lu•lus


215 #i‚de‡
__CMSIS_GENERIC


217 #i‚de‡
__CORE_ARMV8MML_H_DEPENDANT


218 
	#__CORE_ARMV8MML_H_DEPENDANT


	)

220 #ifde‡
__˝lu•lus


225 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


226 #i‚de‡
__ARMv8MML_REV


227 
	#__ARMv8MML_REV
 0x0000U

	)

231 #i‚de‡
__FPU_PRESENT


232 
	#__FPU_PRESENT
 0U

	)

236 #i‚de‡
__MPU_PRESENT


237 
	#__MPU_PRESENT
 0U

	)

241 #i‚de‡
__SAUREGION_PRESENT


242 
	#__SAUREGION_PRESENT
 0U

	)

246 #i‚de‡
__DSP_PRESENT


247 
	#__DSP_PRESENT
 0U

	)

251 #i‚de‡
__NVIC_PRIO_BITS


252 
	#__NVIC_PRIO_BITS
 3U

	)

256 #i‚de‡
__Víd‹_SysTickC⁄fig


257 
	#__Víd‹_SysTickC⁄fig
 0U

	)

270 #ifde‡
__˝lu•lus


271 
	#__I
 vﬁ©ûê

	)

273 
	#__I
 vﬁ©ûêc⁄°

	)

275 
	#__O
 vﬁ©ûê

	)

276 
	#__IO
 vﬁ©ûê

	)

279 
	#__IM
 vﬁ©ûêc⁄°

	)

280 
	#__OM
 vﬁ©ûê

	)

281 
	#__IOM
 vﬁ©ûê

	)

318 
uöt32_t
 
_ª£rved0
:16;

319 
uöt32_t
 
GE
:4;

320 
uöt32_t
 
_ª£rved1
:7;

321 
uöt32_t
 
Q
:1;

322 
uöt32_t
 
V
:1;

323 
uöt32_t
 
C
:1;

324 
uöt32_t
 
Z
:1;

325 
uöt32_t
 
N
:1;

326 } 
b
;

327 
uöt32_t
 
w
;

328 } 
	tAPSR_Ty≥
;

331 
	#APSR_N_Pos
 31U

	)

332 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

334 
	#APSR_Z_Pos
 30U

	)

335 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

337 
	#APSR_C_Pos
 29U

	)

338 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

340 
	#APSR_V_Pos
 28U

	)

341 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

343 
	#APSR_Q_Pos
 27U

	)

344 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

346 
	#APSR_GE_Pos
 16U

	)

347 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

357 
uöt32_t
 
ISR
:9;

358 
uöt32_t
 
_ª£rved0
:23;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tIPSR_Ty≥
;

364 
	#IPSR_ISR_Pos
 0U

	)

365 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
ISR
:9;

376 
uöt32_t
 
_ª£rved0
:7;

377 
uöt32_t
 
GE
:4;

378 
uöt32_t
 
_ª£rved1
:4;

379 
uöt32_t
 
T
:1;

380 
uöt32_t
 
IT
:2;

381 
uöt32_t
 
Q
:1;

382 
uöt32_t
 
V
:1;

383 
uöt32_t
 
C
:1;

384 
uöt32_t
 
Z
:1;

385 
uöt32_t
 
N
:1;

386 } 
b
;

387 
uöt32_t
 
w
;

388 } 
	txPSR_Ty≥
;

391 
	#xPSR_N_Pos
 31U

	)

392 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

394 
	#xPSR_Z_Pos
 30U

	)

395 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

397 
	#xPSR_C_Pos
 29U

	)

398 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

400 
	#xPSR_V_Pos
 28U

	)

401 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

403 
	#xPSR_Q_Pos
 27U

	)

404 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

406 
	#xPSR_IT_Pos
 25U

	)

407 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

409 
	#xPSR_T_Pos
 24U

	)

410 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

412 
	#xPSR_GE_Pos
 16U

	)

413 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

415 
	#xPSR_ISR_Pos
 0U

	)

416 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

426 
uöt32_t
 
nPRIV
:1;

427 
uöt32_t
 
SPSEL
:1;

428 
uöt32_t
 
FPCA
:1;

429 
uöt32_t
 
SFPA
:1;

430 
uöt32_t
 
_ª£rved1
:28;

431 } 
b
;

432 
uöt32_t
 
w
;

433 } 
	tCONTROL_Ty≥
;

436 
	#CONTROL_SFPA_Pos
 3U

	)

437 
	#CONTROL_SFPA_Msk
 (1UL << 
CONTROL_SFPA_Pos
Ë

	)

439 
	#CONTROL_FPCA_Pos
 2U

	)

440 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

442 
	#CONTROL_SPSEL_Pos
 1U

	)

443 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

445 
	#CONTROL_nPRIV_Pos
 0U

	)

446 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

463 
__IOM
 
uöt32_t
 
ISER
[16U];

464 
uöt32_t
 
RESERVED0
[16U];

465 
__IOM
 
uöt32_t
 
ICER
[16U];

466 
uöt32_t
 
RSERVED1
[16U];

467 
__IOM
 
uöt32_t
 
ISPR
[16U];

468 
uöt32_t
 
RESERVED2
[16U];

469 
__IOM
 
uöt32_t
 
ICPR
[16U];

470 
uöt32_t
 
RESERVED3
[16U];

471 
__IOM
 
uöt32_t
 
IABR
[16U];

472 
uöt32_t
 
RESERVED4
[16U];

473 
__IOM
 
uöt32_t
 
ITNS
[16U];

474 
uöt32_t
 
RESERVED5
[16U];

475 
__IOM
 
uöt8_t
 
IPR
[496U];

476 
uöt32_t
 
RESERVED6
[580U];

477 
__OM
 
uöt32_t
 
STIR
;

478 } 
	tNVIC_Ty≥
;

481 
	#NVIC_STIR_INTID_Pos
 0U

	)

482 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

499 
__IM
 
uöt32_t
 
CPUID
;

500 
__IOM
 
uöt32_t
 
ICSR
;

501 
__IOM
 
uöt32_t
 
VTOR
;

502 
__IOM
 
uöt32_t
 
AIRCR
;

503 
__IOM
 
uöt32_t
 
SCR
;

504 
__IOM
 
uöt32_t
 
CCR
;

505 
__IOM
 
uöt8_t
 
SHPR
[12U];

506 
__IOM
 
uöt32_t
 
SHCSR
;

507 
__IOM
 
uöt32_t
 
CFSR
;

508 
__IOM
 
uöt32_t
 
HFSR
;

509 
__IOM
 
uöt32_t
 
DFSR
;

510 
__IOM
 
uöt32_t
 
MMFAR
;

511 
__IOM
 
uöt32_t
 
BFAR
;

512 
__IOM
 
uöt32_t
 
AFSR
;

513 
__IM
 
uöt32_t
 
ID_PFR
[2U];

514 
__IM
 
uöt32_t
 
ID_DFR
;

515 
__IM
 
uöt32_t
 
ID_ADR
;

516 
__IM
 
uöt32_t
 
ID_MMFR
[4U];

517 
__IM
 
uöt32_t
 
ID_ISAR
[6U];

518 
__IM
 
uöt32_t
 
CLIDR
;

519 
__IM
 
uöt32_t
 
CTR
;

520 
__IM
 
uöt32_t
 
CCSIDR
;

521 
__IOM
 
uöt32_t
 
CSSELR
;

522 
__IOM
 
uöt32_t
 
CPACR
;

523 
__IOM
 
uöt32_t
 
NSACR
;

524 
uöt32_t
 
RESERVED3
[92U];

525 
__OM
 
uöt32_t
 
STIR
;

526 
uöt32_t
 
RESERVED4
[15U];

527 
__IM
 
uöt32_t
 
MVFR0
;

528 
__IM
 
uöt32_t
 
MVFR1
;

529 
__IM
 
uöt32_t
 
MVFR2
;

530 
uöt32_t
 
RESERVED5
[1U];

531 
__OM
 
uöt32_t
 
ICIALLU
;

532 
uöt32_t
 
RESERVED6
[1U];

533 
__OM
 
uöt32_t
 
ICIMVAU
;

534 
__OM
 
uöt32_t
 
DCIMVAC
;

535 
__OM
 
uöt32_t
 
DCISW
;

536 
__OM
 
uöt32_t
 
DCCMVAU
;

537 
__OM
 
uöt32_t
 
DCCMVAC
;

538 
__OM
 
uöt32_t
 
DCCSW
;

539 
__OM
 
uöt32_t
 
DCCIMVAC
;

540 
__OM
 
uöt32_t
 
DCCISW
;

541 
uöt32_t
 
RESERVED7
[6U];

542 
__IOM
 
uöt32_t
 
ITCMCR
;

543 
__IOM
 
uöt32_t
 
DTCMCR
;

544 
__IOM
 
uöt32_t
 
AHBPCR
;

545 
__IOM
 
uöt32_t
 
CACR
;

546 
__IOM
 
uöt32_t
 
AHBSCR
;

547 
uöt32_t
 
RESERVED8
[1U];

548 
__IOM
 
uöt32_t
 
ABFSR
;

549 } 
	tSCB_Ty≥
;

552 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

553 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

555 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

556 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

558 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

559 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

561 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

562 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

564 
	#SCB_CPUID_REVISION_Pos
 0U

	)

565 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

568 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

569 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

571 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

572 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

574 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

575 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

577 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

578 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

580 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

581 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

583 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

584 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

586 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

587 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

589 
	#SCB_ICSR_STTNS_Pos
 24U

	)

590 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

592 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

593 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

595 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

596 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

598 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

599 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

601 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

602 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

604 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

605 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

608 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

609 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

612 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

613 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

615 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

616 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

618 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

619 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

621 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

622 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

624 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

625 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

627 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

628 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

630 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

631 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

633 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

634 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

636 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

637 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

640 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

641 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

643 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

644 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

646 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

647 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

649 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

650 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

653 
	#SCB_CCR_BP_Pos
 18U

	)

654 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

656 
	#SCB_CCR_IC_Pos
 17U

	)

657 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

659 
	#SCB_CCR_DC_Pos
 16U

	)

660 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

662 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

663 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

665 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

666 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

668 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

669 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

671 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

672 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

674 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

675 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

678 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

679 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

681 
	#SCB_SHCSR_SECUREFAULTPENDED_Pos
 20U

	)

682 
	#SCB_SHCSR_SECUREFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTPENDED_Pos
Ë

	)

684 
	#SCB_SHCSR_SECUREFAULTENA_Pos
 19U

	)

685 
	#SCB_SHCSR_SECUREFAULTENA_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTENA_Pos
Ë

	)

687 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

688 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

690 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

691 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

693 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

694 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

696 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

697 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

699 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

700 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

702 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

703 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

705 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

706 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

708 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

709 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

711 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

712 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

714 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

715 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

717 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

718 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

720 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

721 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

723 
	#SCB_SHCSR_SECUREFAULTACT_Pos
 4U

	)

724 
	#SCB_SHCSR_SECUREFAULTACT_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTACT_Pos
Ë

	)

726 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

727 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

729 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

730 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

732 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

733 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

735 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

736 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

739 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

740 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

742 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

743 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

745 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

746 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

749 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

750 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

752 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

753 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

755 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

756 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

758 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

759 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

761 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

762 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

764 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

765 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

768 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

769 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

771 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

772 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

774 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

775 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

777 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

778 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

780 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

781 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

783 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

784 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

786 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

787 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

790 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

791 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

793 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

794 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

796 
	#SCB_CFSR_STKOF_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 4UË

	)

797 
	#SCB_CFSR_STKOF_Msk
 (1UL << 
SCB_CFSR_STKOF_Pos
Ë

	)

799 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

800 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

802 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

803 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

805 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

806 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

808 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

809 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

812 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

813 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

815 
	#SCB_HFSR_FORCED_Pos
 30U

	)

816 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

818 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

819 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

822 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

823 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

825 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

826 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

828 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

829 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

831 
	#SCB_DFSR_BKPT_Pos
 1U

	)

832 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

834 
	#SCB_DFSR_HALTED_Pos
 0U

	)

835 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

838 
	#SCB_NSACR_CP11_Pos
 11U

	)

839 
	#SCB_NSACR_CP11_Msk
 (1UL << 
SCB_NSACR_CP11_Pos
Ë

	)

841 
	#SCB_NSACR_CP10_Pos
 10U

	)

842 
	#SCB_NSACR_CP10_Msk
 (1UL << 
SCB_NSACR_CP10_Pos
Ë

	)

844 
	#SCB_NSACR_CPn_Pos
 0U

	)

845 
	#SCB_NSACR_CPn_Msk
 (1UL )

	)

848 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

849 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

851 
	#SCB_CLIDR_LOC_Pos
 24U

	)

852 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

855 
	#SCB_CTR_FORMAT_Pos
 29U

	)

856 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

858 
	#SCB_CTR_CWG_Pos
 24U

	)

859 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

861 
	#SCB_CTR_ERG_Pos
 20U

	)

862 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

864 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

865 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

867 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

868 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

871 
	#SCB_CCSIDR_WT_Pos
 31U

	)

872 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

874 
	#SCB_CCSIDR_WB_Pos
 30U

	)

875 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

877 
	#SCB_CCSIDR_RA_Pos
 29U

	)

878 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

880 
	#SCB_CCSIDR_WA_Pos
 28U

	)

881 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

883 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

884 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

886 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

887 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

889 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

890 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

893 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

894 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

896 
	#SCB_CSSELR_IND_Pos
 0U

	)

897 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

900 
	#SCB_STIR_INTID_Pos
 0U

	)

901 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

904 
	#SCB_DCISW_WAY_Pos
 30U

	)

905 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

907 
	#SCB_DCISW_SET_Pos
 5U

	)

908 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

911 
	#SCB_DCCSW_WAY_Pos
 30U

	)

912 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

914 
	#SCB_DCCSW_SET_Pos
 5U

	)

915 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

918 
	#SCB_DCCISW_WAY_Pos
 30U

	)

919 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

921 
	#SCB_DCCISW_SET_Pos
 5U

	)

922 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

925 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

926 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

928 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

929 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

931 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

932 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

934 
	#SCB_ITCMCR_EN_Pos
 0U

	)

935 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

938 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

939 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

941 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

942 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

944 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

945 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

947 
	#SCB_DTCMCR_EN_Pos
 0U

	)

948 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

951 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

952 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

954 
	#SCB_AHBPCR_EN_Pos
 0U

	)

955 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

958 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

959 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

961 
	#SCB_CACR_ECCEN_Pos
 1U

	)

962 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

964 
	#SCB_CACR_SIWT_Pos
 0U

	)

965 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

968 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

969 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

971 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

972 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

974 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

975 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

978 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

979 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

981 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

982 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

984 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

985 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

987 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

988 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

990 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

991 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

993 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

994 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

1011 
uöt32_t
 
RESERVED0
[1U];

1012 
__IM
 
uöt32_t
 
ICTR
;

1013 
__IOM
 
uöt32_t
 
ACTLR
;

1014 
__IOM
 
uöt32_t
 
CPPWR
;

1015 } 
	tSCnSCB_Ty≥
;

1018 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

1019 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

1036 
__IOM
 
uöt32_t
 
CTRL
;

1037 
__IOM
 
uöt32_t
 
LOAD
;

1038 
__IOM
 
uöt32_t
 
VAL
;

1039 
__IM
 
uöt32_t
 
CALIB
;

1040 } 
	tSysTick_Ty≥
;

1043 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

1044 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

1046 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

1047 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

1049 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

1050 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

1052 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

1053 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

1056 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

1057 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

1060 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

1061 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

1064 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

1065 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

1067 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

1068 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

1070 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

1071 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1088 
__OM
 union

1090 
__OM
 
uöt8_t
 
u8
;

1091 
__OM
 
uöt16_t
 
u16
;

1092 
__OM
 
uöt32_t
 
u32
;

1093 } 
PORT
 [32U];

1094 
uöt32_t
 
RESERVED0
[864U];

1095 
__IOM
 
uöt32_t
 
TER
;

1096 
uöt32_t
 
RESERVED1
[15U];

1097 
__IOM
 
uöt32_t
 
TPR
;

1098 
uöt32_t
 
RESERVED2
[15U];

1099 
__IOM
 
uöt32_t
 
TCR
;

1100 
uöt32_t
 
RESERVED3
[29U];

1101 
__OM
 
uöt32_t
 
IWR
;

1102 
__IM
 
uöt32_t
 
IRR
;

1103 
__IOM
 
uöt32_t
 
IMCR
;

1104 
uöt32_t
 
RESERVED4
[43U];

1105 
__OM
 
uöt32_t
 
LAR
;

1106 
__IM
 
uöt32_t
 
LSR
;

1107 
uöt32_t
 
RESERVED5
[1U];

1108 
__IM
 
uöt32_t
 
DEVARCH
;

1109 
uöt32_t
 
RESERVED6
[4U];

1110 
__IM
 
uöt32_t
 
PID4
;

1111 
__IM
 
uöt32_t
 
PID5
;

1112 
__IM
 
uöt32_t
 
PID6
;

1113 
__IM
 
uöt32_t
 
PID7
;

1114 
__IM
 
uöt32_t
 
PID0
;

1115 
__IM
 
uöt32_t
 
PID1
;

1116 
__IM
 
uöt32_t
 
PID2
;

1117 
__IM
 
uöt32_t
 
PID3
;

1118 
__IM
 
uöt32_t
 
CID0
;

1119 
__IM
 
uöt32_t
 
CID1
;

1120 
__IM
 
uöt32_t
 
CID2
;

1121 
__IM
 
uöt32_t
 
CID3
;

1122 } 
	tITM_Ty≥
;

1125 
	#ITM_STIM_DISABLED_Pos
 1U

	)

1126 
	#ITM_STIM_DISABLED_Msk
 (0x1UL << 
ITM_STIM_DISABLED_Pos
Ë

	)

1128 
	#ITM_STIM_FIFOREADY_Pos
 0U

	)

1129 
	#ITM_STIM_FIFOREADY_Msk
 (0x1UL )

	)

1132 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1133 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

1136 
	#ITM_TCR_BUSY_Pos
 23U

	)

1137 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1139 
	#ITM_TCR_TRACEBUSID_Pos
 16U

	)

1140 
	#ITM_TCR_TRACEBUSID_Msk
 (0x7FUL << 
ITM_TCR_TRACEBUSID_Pos
Ë

	)

1142 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1143 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1145 
	#ITM_TCR_TSPRESCALE_Pos
 8U

	)

1146 
	#ITM_TCR_TSPRESCALE_Msk
 (3UL << 
ITM_TCR_TSPRESCALE_Pos
Ë

	)

1148 
	#ITM_TCR_STALLENA_Pos
 5U

	)

1149 
	#ITM_TCR_STALLENA_Msk
 (1UL << 
ITM_TCR_STALLENA_Pos
Ë

	)

1151 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1152 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1154 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1155 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1157 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1158 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1160 
	#ITM_TCR_TSENA_Pos
 1U

	)

1161 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1163 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1164 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1167 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1168 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1171 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1172 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1175 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1176 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1179 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1180 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1182 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1183 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1185 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1186 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1203 
__IOM
 
uöt32_t
 
CTRL
;

1204 
__IOM
 
uöt32_t
 
CYCCNT
;

1205 
__IOM
 
uöt32_t
 
CPICNT
;

1206 
__IOM
 
uöt32_t
 
EXCCNT
;

1207 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1208 
__IOM
 
uöt32_t
 
LSUCNT
;

1209 
__IOM
 
uöt32_t
 
FOLDCNT
;

1210 
__IM
 
uöt32_t
 
PCSR
;

1211 
__IOM
 
uöt32_t
 
COMP0
;

1212 
uöt32_t
 
RESERVED1
[1U];

1213 
__IOM
 
uöt32_t
 
FUNCTION0
;

1214 
uöt32_t
 
RESERVED2
[1U];

1215 
__IOM
 
uöt32_t
 
COMP1
;

1216 
uöt32_t
 
RESERVED3
[1U];

1217 
__IOM
 
uöt32_t
 
FUNCTION1
;

1218 
uöt32_t
 
RESERVED4
[1U];

1219 
__IOM
 
uöt32_t
 
COMP2
;

1220 
uöt32_t
 
RESERVED5
[1U];

1221 
__IOM
 
uöt32_t
 
FUNCTION2
;

1222 
uöt32_t
 
RESERVED6
[1U];

1223 
__IOM
 
uöt32_t
 
COMP3
;

1224 
uöt32_t
 
RESERVED7
[1U];

1225 
__IOM
 
uöt32_t
 
FUNCTION3
;

1226 
uöt32_t
 
RESERVED8
[1U];

1227 
__IOM
 
uöt32_t
 
COMP4
;

1228 
uöt32_t
 
RESERVED9
[1U];

1229 
__IOM
 
uöt32_t
 
FUNCTION4
;

1230 
uöt32_t
 
RESERVED10
[1U];

1231 
__IOM
 
uöt32_t
 
COMP5
;

1232 
uöt32_t
 
RESERVED11
[1U];

1233 
__IOM
 
uöt32_t
 
FUNCTION5
;

1234 
uöt32_t
 
RESERVED12
[1U];

1235 
__IOM
 
uöt32_t
 
COMP6
;

1236 
uöt32_t
 
RESERVED13
[1U];

1237 
__IOM
 
uöt32_t
 
FUNCTION6
;

1238 
uöt32_t
 
RESERVED14
[1U];

1239 
__IOM
 
uöt32_t
 
COMP7
;

1240 
uöt32_t
 
RESERVED15
[1U];

1241 
__IOM
 
uöt32_t
 
FUNCTION7
;

1242 
uöt32_t
 
RESERVED16
[1U];

1243 
__IOM
 
uöt32_t
 
COMP8
;

1244 
uöt32_t
 
RESERVED17
[1U];

1245 
__IOM
 
uöt32_t
 
FUNCTION8
;

1246 
uöt32_t
 
RESERVED18
[1U];

1247 
__IOM
 
uöt32_t
 
COMP9
;

1248 
uöt32_t
 
RESERVED19
[1U];

1249 
__IOM
 
uöt32_t
 
FUNCTION9
;

1250 
uöt32_t
 
RESERVED20
[1U];

1251 
__IOM
 
uöt32_t
 
COMP10
;

1252 
uöt32_t
 
RESERVED21
[1U];

1253 
__IOM
 
uöt32_t
 
FUNCTION10
;

1254 
uöt32_t
 
RESERVED22
[1U];

1255 
__IOM
 
uöt32_t
 
COMP11
;

1256 
uöt32_t
 
RESERVED23
[1U];

1257 
__IOM
 
uöt32_t
 
FUNCTION11
;

1258 
uöt32_t
 
RESERVED24
[1U];

1259 
__IOM
 
uöt32_t
 
COMP12
;

1260 
uöt32_t
 
RESERVED25
[1U];

1261 
__IOM
 
uöt32_t
 
FUNCTION12
;

1262 
uöt32_t
 
RESERVED26
[1U];

1263 
__IOM
 
uöt32_t
 
COMP13
;

1264 
uöt32_t
 
RESERVED27
[1U];

1265 
__IOM
 
uöt32_t
 
FUNCTION13
;

1266 
uöt32_t
 
RESERVED28
[1U];

1267 
__IOM
 
uöt32_t
 
COMP14
;

1268 
uöt32_t
 
RESERVED29
[1U];

1269 
__IOM
 
uöt32_t
 
FUNCTION14
;

1270 
uöt32_t
 
RESERVED30
[1U];

1271 
__IOM
 
uöt32_t
 
COMP15
;

1272 
uöt32_t
 
RESERVED31
[1U];

1273 
__IOM
 
uöt32_t
 
FUNCTION15
;

1274 
uöt32_t
 
RESERVED32
[934U];

1275 
__IM
 
uöt32_t
 
LSR
;

1276 
uöt32_t
 
RESERVED33
[1U];

1277 
__IM
 
uöt32_t
 
DEVARCH
;

1278 } 
	tDWT_Ty≥
;

1281 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1282 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1284 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1285 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1287 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1288 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1290 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1291 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1293 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1294 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1296 
	#DWT_CTRL_CYCDISS_Pos
 23U

	)

1297 
	#DWT_CTRL_CYCDISS_Msk
 (0x1UL << 
DWT_CTRL_CYCDISS_Pos
Ë

	)

1299 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1300 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1302 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1303 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1305 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1306 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1308 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1309 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1311 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1312 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1314 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1315 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1317 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1318 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1320 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1321 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1323 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1324 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1326 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1327 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1329 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1330 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1332 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1333 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1335 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1336 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1339 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1340 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1343 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1344 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1347 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1348 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1351 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1352 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1355 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1356 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1359 
	#DWT_FUNCTION_ID_Pos
 27U

	)

1360 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

1362 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1363 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1365 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1366 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1368 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

1369 
	#DWT_FUNCTION_ACTION_Msk
 (0x1UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

1371 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

1372 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

1389 
__IM
 
uöt32_t
 
SSPSR
;

1390 
__IOM
 
uöt32_t
 
CSPSR
;

1391 
uöt32_t
 
RESERVED0
[2U];

1392 
__IOM
 
uöt32_t
 
ACPR
;

1393 
uöt32_t
 
RESERVED1
[55U];

1394 
__IOM
 
uöt32_t
 
SPPR
;

1395 
uöt32_t
 
RESERVED2
[131U];

1396 
__IM
 
uöt32_t
 
FFSR
;

1397 
__IOM
 
uöt32_t
 
FFCR
;

1398 
__IOM
 
uöt32_t
 
PSCR
;

1399 
uöt32_t
 
RESERVED3
[809U];

1400 
__OM
 
uöt32_t
 
LAR
;

1401 
__IM
 
uöt32_t
 
LSR
;

1402 
uöt32_t
 
RESERVED4
[4U];

1403 
__IM
 
uöt32_t
 
TYPE
;

1404 
__IM
 
uöt32_t
 
DEVTYPE
;

1405 } 
	tTPI_Ty≥
;

1408 
	#TPI_ACPR_SWOSCALER_Pos
 0U

	)

1409 
	#TPI_ACPR_SWOSCALER_Msk
 (0xFFFFUL )

	)

1412 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1413 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1416 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1417 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1419 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1420 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1422 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1423 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1425 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1426 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1429 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1430 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1432 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

1433 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

1435 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1436 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1439 
	#TPI_PSCR_PSCou¡_Pos
 0U

	)

1440 
	#TPI_PSCR_PSCou¡_Msk
 (0x1FUL )

	)

1443 
	#TPI_LSR_nTT_Pos
 1U

	)

1444 
	#TPI_LSR_nTT_Msk
 (0x1UL << 
TPI_LSR_nTT_Pos
Ë

	)

1446 
	#TPI_LSR_SLK_Pos
 1U

	)

1447 
	#TPI_LSR_SLK_Msk
 (0x1UL << 
TPI_LSR_SLK_Pos
Ë

	)

1449 
	#TPI_LSR_SLI_Pos
 0U

	)

1450 
	#TPI_LSR_SLI_Msk
 (0x1UL )

	)

1453 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1454 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1456 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1457 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1459 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1460 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1462 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

1463 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

1466 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1467 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1469 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1470 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1475 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1488 
__IM
 
uöt32_t
 
TYPE
;

1489 
__IOM
 
uöt32_t
 
CTRL
;

1490 
__IOM
 
uöt32_t
 
RNR
;

1491 
__IOM
 
uöt32_t
 
RBAR
;

1492 
__IOM
 
uöt32_t
 
RLAR
;

1493 
__IOM
 
uöt32_t
 
RBAR_A1
;

1494 
__IOM
 
uöt32_t
 
RLAR_A1
;

1495 
__IOM
 
uöt32_t
 
RBAR_A2
;

1496 
__IOM
 
uöt32_t
 
RLAR_A2
;

1497 
__IOM
 
uöt32_t
 
RBAR_A3
;

1498 
__IOM
 
uöt32_t
 
RLAR_A3
;

1499 
uöt32_t
 
RESERVED0
[1];

1501 
__IOM
 
uöt32_t
 
MAIR
[2];

1503 
__IOM
 
uöt32_t
 
MAIR0
;

1504 
__IOM
 
uöt32_t
 
MAIR1
;

1507 } 
	tMPU_Ty≥
;

1509 
	#MPU_TYPE_RALIASES
 4U

	)

1512 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1513 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1515 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1516 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1518 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1519 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1522 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1523 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1525 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1526 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1528 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1529 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1532 
	#MPU_RNR_REGION_Pos
 0U

	)

1533 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1536 
	#MPU_RBAR_BASE_Pos
 5U

	)

1537 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

1539 
	#MPU_RBAR_SH_Pos
 3U

	)

1540 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

1542 
	#MPU_RBAR_AP_Pos
 1U

	)

1543 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

1545 
	#MPU_RBAR_XN_Pos
 0U

	)

1546 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

1549 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

1550 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

1552 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

1553 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

1555 
	#MPU_RLAR_EN_Pos
 0U

	)

1556 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

1559 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

1560 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

1562 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

1563 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

1565 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

1566 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

1568 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

1569 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

1572 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

1573 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

1575 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

1576 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

1578 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

1579 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

1581 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

1582 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

1588 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1601 
__IOM
 
uöt32_t
 
CTRL
;

1602 
__IM
 
uöt32_t
 
TYPE
;

1603 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1604 
__IOM
 
uöt32_t
 
RNR
;

1605 
__IOM
 
uöt32_t
 
RBAR
;

1606 
__IOM
 
uöt32_t
 
RLAR
;

1608 
uöt32_t
 
RESERVED0
[3];

1610 
__IOM
 
uöt32_t
 
SFSR
;

1611 
__IOM
 
uöt32_t
 
SFAR
;

1612 } 
	tSAU_Ty≥
;

1615 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

1616 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

1618 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

1619 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

1622 
	#SAU_TYPE_SREGION_Pos
 0U

	)

1623 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

1625 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1627 
	#SAU_RNR_REGION_Pos
 0U

	)

1628 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

1631 
	#SAU_RBAR_BADDR_Pos
 5U

	)

1632 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

1635 
	#SAU_RLAR_LADDR_Pos
 5U

	)

1636 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

1638 
	#SAU_RLAR_NSC_Pos
 1U

	)

1639 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

1641 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

1642 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

1647 
	#SAU_SFSR_LSERR_Pos
 7U

	)

1648 
	#SAU_SFSR_LSERR_Msk
 (1UL << 
SAU_SFSR_LSERR_Pos
Ë

	)

1650 
	#SAU_SFSR_SFARVALID_Pos
 6U

	)

1651 
	#SAU_SFSR_SFARVALID_Msk
 (1UL << 
SAU_SFSR_SFARVALID_Pos
Ë

	)

1653 
	#SAU_SFSR_LSPERR_Pos
 5U

	)

1654 
	#SAU_SFSR_LSPERR_Msk
 (1UL << 
SAU_SFSR_LSPERR_Pos
Ë

	)

1656 
	#SAU_SFSR_INVTRAN_Pos
 4U

	)

1657 
	#SAU_SFSR_INVTRAN_Msk
 (1UL << 
SAU_SFSR_INVTRAN_Pos
Ë

	)

1659 
	#SAU_SFSR_AUVIOL_Pos
 3U

	)

1660 
	#SAU_SFSR_AUVIOL_Msk
 (1UL << 
SAU_SFSR_AUVIOL_Pos
Ë

	)

1662 
	#SAU_SFSR_INVER_Pos
 2U

	)

1663 
	#SAU_SFSR_INVER_Msk
 (1UL << 
SAU_SFSR_INVER_Pos
Ë

	)

1665 
	#SAU_SFSR_INVIS_Pos
 1U

	)

1666 
	#SAU_SFSR_INVIS_Msk
 (1UL << 
SAU_SFSR_INVIS_Pos
Ë

	)

1668 
	#SAU_SFSR_INVEP_Pos
 0U

	)

1669 
	#SAU_SFSR_INVEP_Msk
 (1UL )

	)

1687 
uöt32_t
 
RESERVED0
[1U];

1688 
__IOM
 
uöt32_t
 
FPCCR
;

1689 
__IOM
 
uöt32_t
 
FPCAR
;

1690 
__IOM
 
uöt32_t
 
FPDSCR
;

1691 
__IM
 
uöt32_t
 
MVFR0
;

1692 
__IM
 
uöt32_t
 
MVFR1
;

1693 } 
	tFPU_Ty≥
;

1696 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1697 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1699 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1700 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1702 
	#FPU_FPCCR_LSPENS_Pos
 29U

	)

1703 
	#FPU_FPCCR_LSPENS_Msk
 (1UL << 
FPU_FPCCR_LSPENS_Pos
Ë

	)

1705 
	#FPU_FPCCR_CLRONRET_Pos
 28U

	)

1706 
	#FPU_FPCCR_CLRONRET_Msk
 (1UL << 
FPU_FPCCR_CLRONRET_Pos
Ë

	)

1708 
	#FPU_FPCCR_CLRONRETS_Pos
 27U

	)

1709 
	#FPU_FPCCR_CLRONRETS_Msk
 (1UL << 
FPU_FPCCR_CLRONRETS_Pos
Ë

	)

1711 
	#FPU_FPCCR_TS_Pos
 26U

	)

1712 
	#FPU_FPCCR_TS_Msk
 (1UL << 
FPU_FPCCR_TS_Pos
Ë

	)

1714 
	#FPU_FPCCR_UFRDY_Pos
 10U

	)

1715 
	#FPU_FPCCR_UFRDY_Msk
 (1UL << 
FPU_FPCCR_UFRDY_Pos
Ë

	)

1717 
	#FPU_FPCCR_SPLIMVIOL_Pos
 9U

	)

1718 
	#FPU_FPCCR_SPLIMVIOL_Msk
 (1UL << 
FPU_FPCCR_SPLIMVIOL_Pos
Ë

	)

1720 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1721 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1723 
	#FPU_FPCCR_SFRDY_Pos
 7U

	)

1724 
	#FPU_FPCCR_SFRDY_Msk
 (1UL << 
FPU_FPCCR_SFRDY_Pos
Ë

	)

1726 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1727 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1729 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1730 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1732 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1733 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1735 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1736 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1738 
	#FPU_FPCCR_S_Pos
 2U

	)

1739 
	#FPU_FPCCR_S_Msk
 (1UL << 
FPU_FPCCR_S_Pos
Ë

	)

1741 
	#FPU_FPCCR_USER_Pos
 1U

	)

1742 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1744 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1745 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1748 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1749 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1752 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1753 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1755 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1756 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1758 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1759 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1761 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1762 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1765 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1766 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1768 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1769 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1771 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1772 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1774 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1775 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1777 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1778 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1780 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1781 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1783 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1784 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1786 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1787 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1790 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1791 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1793 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1794 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1796 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1797 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1799 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1800 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1817 
__IOM
 
uöt32_t
 
DHCSR
;

1818 
__OM
 
uöt32_t
 
DCRSR
;

1819 
__IOM
 
uöt32_t
 
DCRDR
;

1820 
__IOM
 
uöt32_t
 
DEMCR
;

1821 
uöt32_t
 
RESERVED4
[1U];

1822 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

1823 
__IOM
 
uöt32_t
 
DSCSR
;

1824 } 
	tC‹eDebug_Ty≥
;

1827 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1828 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1830 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1831 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1833 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1834 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1836 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1837 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1839 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1840 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1842 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1843 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1845 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1846 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1848 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1849 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1851 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1852 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1854 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1855 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1857 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1858 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1860 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1861 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1863 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1864 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1867 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1868 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1870 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1871 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1874 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1875 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1877 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1878 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1880 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1881 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1883 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1884 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1886 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1887 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1889 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1890 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1892 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1893 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1895 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1896 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1898 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1899 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1901 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1902 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1904 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1905 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1907 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1908 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1910 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1911 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1914 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1915 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1917 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1918 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1920 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1921 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1923 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1924 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

1927 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

1928 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

1930 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

1931 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

1933 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

1934 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

1952 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1960 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1973 
	#SCS_BASE
 (0xE000E000ULË

	)

1974 
	#ITM_BASE
 (0xE0000000ULË

	)

1975 
	#DWT_BASE
 (0xE0001000ULË

	)

1976 
	#TPI_BASE
 (0xE0040000ULË

	)

1977 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1978 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1979 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1980 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1982 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1983 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1984 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1985 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1986 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1987 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1988 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1989 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

1991 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1992 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1993 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1996 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1997 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

1998 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

2001 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

2002 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

2004 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2005 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

2006 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

2007 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

2008 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

2009 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

2011 
	#SCnSCB_NS
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE_NS
 )

	)

2012 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

2013 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

2014 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

2015 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

2017 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2018 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

2019 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

2022 
	#FPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0F30ULË

	)

2023 
	#FPU_NS
 ((
FPU_Ty≥
 *Ë
FPU_BASE_NS
 )

	)

2052 #ifde‡
CMSIS_NVIC_VIRTUAL


2053 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2054 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

2056 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2058 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

2059 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

2060 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

2061 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

2062 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

2063 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

2064 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

2065 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

2066 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

2067 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

2068 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

2069 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

2072 #ifde‡
CMSIS_VECTAB_VIRTUAL


2073 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2074 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

2076 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2078 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

2079 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

2082 
	#NVIC_USER_IRQ_OFFSET
 16

	)

2088 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

2091 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

2092 
	#EXC_RETURN_S
 (0x00000040ULË

	)

2093 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

2094 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

2095 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

2096 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

2097 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

2100 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

2101 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

2103 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

2116 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

2118 
uöt32_t
 
ªg_vÆue
;

2119 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2121 
ªg_vÆue
 = 
SCB
->
AIRCR
;

2122 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2123 
ªg_vÆue
 = (reg_value |

2124 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2125 (
Pri‹ôyGroupTmp
 << 8U) );

2126 
SCB
->
AIRCR
 = 
ªg_vÆue
;

2135 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

2137  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2147 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2149 i‡((
öt32_t
)(
IRQn
) >= 0)

2151 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2164 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2166 i‡((
öt32_t
)(
IRQn
) >= 0)

2168 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2183 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2185 i‡((
öt32_t
)(
IRQn
) >= 0)

2187 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2188 
__DSB
();

2189 
__ISB
();

2202 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2204 i‡((
öt32_t
)(
IRQn
) >= 0)

2206 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2221 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2223 i‡((
öt32_t
)(
IRQn
) >= 0)

2225 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2236 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2238 i‡((
öt32_t
)(
IRQn
) >= 0)

2240 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2253 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

2255 i‡((
öt32_t
)(
IRQn
) >= 0)

2257 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2266 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2275 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2277 i‡((
öt32_t
)(
IRQn
) >= 0)

2279 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2296 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2298 i‡((
öt32_t
)(
IRQn
) >= 0)

2300 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2301 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2318 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2320 i‡((
öt32_t
)(
IRQn
) >= 0)

2322 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2323 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2342 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2344 i‡((
öt32_t
)(
IRQn
) >= 0)

2346 
NVIC
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2350 
SCB
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2364 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

2367 i‡((
öt32_t
)(
IRQn
) >= 0)

2369 (((
uöt32_t
)
NVIC
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2373 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2389 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

2391 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2392 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2393 
uöt32_t
 
SubPri‹ôyBôs
;

2395 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2396 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2399 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

2400 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

2416 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

2418 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2419 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2420 
uöt32_t
 
SubPri‹ôyBôs
;

2422 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2423 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2425 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

2426 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

2439 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

2441 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2442 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

2454 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

2456 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2457  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

2465 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

2467 
__DSB
();

2469 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2470 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2471 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2472 
__DSB
();

2476 
__NOP
();

2480 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2490 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôyGroupög_NS
(
uöt32_t
 
Pri‹ôyGroup
)

2492 
uöt32_t
 
ªg_vÆue
;

2493 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2495 
ªg_vÆue
 = 
SCB_NS
->
AIRCR
;

2496 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2497 
ªg_vÆue
 = (reg_value |

2498 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2499 (
Pri‹ôyGroupTmp
 << 8U) );

2500 
SCB_NS
->
AIRCR
 = 
ªg_vÆue
;

2509 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôyGroupög_NS
()

2511  ((
uöt32_t
)((
SCB_NS
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2521 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2523 i‡((
öt32_t
)(
IRQn
) >= 0)

2525 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2538 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2540 i‡((
öt32_t
)(
IRQn
) >= 0)

2542 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2557 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2559 i‡((
öt32_t
)(
IRQn
) >= 0)

2561 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2574 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2576 i‡((
öt32_t
)(
IRQn
) >= 0)

2578 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2593 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2595 i‡((
öt32_t
)(
IRQn
) >= 0)

2597 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2608 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2610 i‡((
öt32_t
)(
IRQn
) >= 0)

2612 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2625 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

2627 i‡((
öt32_t
)(
IRQn
) >= 0)

2629 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2647 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2649 i‡((
öt32_t
)(
IRQn
) >= 0)

2651 
NVIC_NS
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2655 
SCB_NS
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2668 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

2671 i‡((
öt32_t
)(
IRQn
) >= 0)

2673 (((
uöt32_t
)
NVIC_NS
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2677 (((
uöt32_t
)
SCB_NS
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2686 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2688 
	~"mpu_¨mv8.h
"

2708 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2710 
uöt32_t
 
mv‰0
;

2712 
mv‰0
 = 
FPU
->
MVFR0
;

2713 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x220U)

2717 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2740 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2746 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

2748 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

2757 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

2759 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

2777 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2790 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2792 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2797 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2798 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2799 
SysTick
->
VAL
 = 0UL;

2800 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2801 
SysTick_CTRL_TICKINT_Msk
 |

2802 
SysTick_CTRL_ENABLE_Msk
;

2806 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2819 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

2821 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2826 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2827 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2828 
SysTick_NS
->
VAL
 = 0UL;

2829 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2830 
SysTick_CTRL_TICKINT_Msk
 |

2831 
SysTick_CTRL_ENABLE_Msk
;

2850 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2851 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2862 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2864 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2865 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2867 
ITM
->
PORT
[0U].
u32
 == 0UL)

2869 
__NOP
();

2871 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2873  (
	gch
);

2883 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2885 
öt32_t
 
	gch
 = -1;

2887 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2889 
ch
 = 
ITM_RxBuf„r
;

2890 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2893  (
	gch
);

2903 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2906 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2921 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm0.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM0_H_GENERIC


32 
	#__CORE_CM0_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM0_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM0_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM0_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (0UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM0_H_DEPENDANT


127 
	#__CORE_CM0_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM0_REV


136 
	#__CM0_REV
 0x0000U

	)

140 #i‚de‡
__NVIC_PRIO_BITS


141 
	#__NVIC_PRIO_BITS
 2U

	)

145 #i‚de‡
__Víd‹_SysTickC⁄fig


146 
	#__Víd‹_SysTickC⁄fig
 0U

	)

159 #ifde‡
__˝lu•lus


160 
	#__I
 vﬁ©ûê

	)

162 
	#__I
 vﬁ©ûêc⁄°

	)

164 
	#__O
 vﬁ©ûê

	)

165 
	#__IO
 vﬁ©ûê

	)

168 
	#__IM
 vﬁ©ûêc⁄°

	)

169 
	#__OM
 vﬁ©ûê

	)

170 
	#__IOM
 vﬁ©ûê

	)

203 
uöt32_t
 
_ª£rved0
:28;

204 
uöt32_t
 
V
:1;

205 
uöt32_t
 
C
:1;

206 
uöt32_t
 
Z
:1;

207 
uöt32_t
 
N
:1;

208 } 
b
;

209 
uöt32_t
 
w
;

210 } 
	tAPSR_Ty≥
;

213 
	#APSR_N_Pos
 31U

	)

214 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

216 
	#APSR_Z_Pos
 30U

	)

217 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

219 
	#APSR_C_Pos
 29U

	)

220 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

222 
	#APSR_V_Pos
 28U

	)

223 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
uöt32_t
 
ISR
:9;

234 
uöt32_t
 
_ª£rved0
:23;

235 } 
b
;

236 
uöt32_t
 
w
;

237 } 
	tIPSR_Ty≥
;

240 
	#IPSR_ISR_Pos
 0U

	)

241 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

251 
uöt32_t
 
ISR
:9;

252 
uöt32_t
 
_ª£rved0
:15;

253 
uöt32_t
 
T
:1;

254 
uöt32_t
 
_ª£rved1
:3;

255 
uöt32_t
 
V
:1;

256 
uöt32_t
 
C
:1;

257 
uöt32_t
 
Z
:1;

258 
uöt32_t
 
N
:1;

259 } 
b
;

260 
uöt32_t
 
w
;

261 } 
	txPSR_Ty≥
;

264 
	#xPSR_N_Pos
 31U

	)

265 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

267 
	#xPSR_Z_Pos
 30U

	)

268 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

270 
	#xPSR_C_Pos
 29U

	)

271 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

273 
	#xPSR_V_Pos
 28U

	)

274 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

276 
	#xPSR_T_Pos
 24U

	)

277 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

279 
	#xPSR_ISR_Pos
 0U

	)

280 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

290 
uöt32_t
 
_ª£rved0
:1;

291 
uöt32_t
 
SPSEL
:1;

292 
uöt32_t
 
_ª£rved1
:30;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	tCONTROL_Ty≥
;

298 
	#CONTROL_SPSEL_Pos
 1U

	)

299 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

316 
__IOM
 
uöt32_t
 
ISER
[1U];

317 
uöt32_t
 
RESERVED0
[31U];

318 
__IOM
 
uöt32_t
 
ICER
[1U];

319 
uöt32_t
 
RSERVED1
[31U];

320 
__IOM
 
uöt32_t
 
ISPR
[1U];

321 
uöt32_t
 
RESERVED2
[31U];

322 
__IOM
 
uöt32_t
 
ICPR
[1U];

323 
uöt32_t
 
RESERVED3
[31U];

324 
uöt32_t
 
RESERVED4
[64U];

325 
__IOM
 
uöt32_t
 
IP
[8U];

326 } 
	tNVIC_Ty≥
;

343 
__IM
 
uöt32_t
 
CPUID
;

344 
__IOM
 
uöt32_t
 
ICSR
;

345 
uöt32_t
 
RESERVED0
;

346 
__IOM
 
uöt32_t
 
AIRCR
;

347 
__IOM
 
uöt32_t
 
SCR
;

348 
__IOM
 
uöt32_t
 
CCR
;

349 
uöt32_t
 
RESERVED1
;

350 
__IOM
 
uöt32_t
 
SHP
[2U];

351 
__IOM
 
uöt32_t
 
SHCSR
;

352 } 
	tSCB_Ty≥
;

355 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

356 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

358 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

359 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

361 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

362 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

364 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

365 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

367 
	#SCB_CPUID_REVISION_Pos
 0U

	)

368 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

371 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

372 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

374 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

375 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

377 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

378 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

381 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

384 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

386 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

387 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

389 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

390 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

392 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

393 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

395 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

396 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

399 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

400 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

402 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

403 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

405 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

406 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

408 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

409 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

412 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

415 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

416 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

418 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

419 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

421 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

422 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

425 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

426 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

428 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

429 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

432 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

433 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

450 
__IOM
 
uöt32_t
 
CTRL
;

451 
__IOM
 
uöt32_t
 
LOAD
;

452 
__IOM
 
uöt32_t
 
VAL
;

453 
__IM
 
uöt32_t
 
CALIB
;

454 } 
	tSysTick_Ty≥
;

457 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

458 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

460 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

461 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

463 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

464 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

466 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

467 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

470 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

471 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

474 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

475 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

478 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

479 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

481 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

482 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

484 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

485 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

513 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

521 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

534 
	#SCS_BASE
 (0xE000E000ULË

	)

535 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

536 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

537 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

539 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

540 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

541 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

569 #ifde‡
CMSIS_NVIC_VIRTUAL


570 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


571 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

573 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


575 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

576 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

577 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

578 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

579 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

580 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

581 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

582 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

584 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

585 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

586 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

589 #ifde‡
CMSIS_VECTAB_VIRTUAL


590 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


591 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

593 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


595 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

596 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

599 
	#NVIC_USER_IRQ_OFFSET
 16

	)

603 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

604 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

605 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

610 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

611 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

612 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

614 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

615 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

623 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

625 i‡((
öt32_t
)(
IRQn
) >= 0)

627 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

640 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

642 i‡((
öt32_t
)(
IRQn
) >= 0)

644 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

659 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

661 i‡((
öt32_t
)(
IRQn
) >= 0)

663 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

664 
__DSB
();

665 
__ISB
();

678 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

680 i‡((
öt32_t
)(
IRQn
) >= 0)

682 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

697 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

699 i‡((
öt32_t
)(
IRQn
) >= 0)

701 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

712 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

714 i‡((
öt32_t
)(
IRQn
) >= 0)

716 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

730 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

732 i‡((
öt32_t
)(
IRQn
) >= 0)

734 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

735 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

739 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

740 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

754 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

757 i‡((
öt32_t
)(
IRQn
) >= 0)

759 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

763 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

779 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

781 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

782 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

783 
uöt32_t
 
SubPri‹ôyBôs
;

785 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

786 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

789 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

790 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

806 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

808 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

809 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

810 
uöt32_t
 
SubPri‹ôyBôs
;

812 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

813 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

815 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

816 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

830 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

832 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

833 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

845 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

847 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

848  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

856 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

858 
__DSB
();

860 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

861 
SCB_AIRCR_SYSRESETREQ_Msk
);

862 
__DSB
();

866 
__NOP
();

889 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

907 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

920 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

922 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

927 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

928 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

929 
SysTick
->
VAL
 = 0UL;

930 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

931 
SysTick_CTRL_TICKINT_Msk
 |

932 
SysTick_CTRL_ENABLE_Msk
;

943 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm0plus.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM0PLUS_H_GENERIC


32 
	#__CORE_CM0PLUS_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM0PLUS_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM0PLUS_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM0PLUS_CMSIS_VERSION
 ((
__CM0PLUS_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM0PLUS_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (0UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM0PLUS_H_DEPENDANT


127 
	#__CORE_CM0PLUS_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM0PLUS_REV


136 
	#__CM0PLUS_REV
 0x0000U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__VTOR_PRESENT


146 
	#__VTOR_PRESENT
 0U

	)

150 #i‚de‡
__NVIC_PRIO_BITS


151 
	#__NVIC_PRIO_BITS
 2U

	)

155 #i‚de‡
__Víd‹_SysTickC⁄fig


156 
	#__Víd‹_SysTickC⁄fig
 0U

	)

169 #ifde‡
__˝lu•lus


170 
	#__I
 vﬁ©ûê

	)

172 
	#__I
 vﬁ©ûêc⁄°

	)

174 
	#__O
 vﬁ©ûê

	)

175 
	#__IO
 vﬁ©ûê

	)

178 
	#__IM
 vﬁ©ûêc⁄°

	)

179 
	#__OM
 vﬁ©ûê

	)

180 
	#__IOM
 vﬁ©ûê

	)

214 
uöt32_t
 
_ª£rved0
:28;

215 
uöt32_t
 
V
:1;

216 
uöt32_t
 
C
:1;

217 
uöt32_t
 
Z
:1;

218 
uöt32_t
 
N
:1;

219 } 
b
;

220 
uöt32_t
 
w
;

221 } 
	tAPSR_Ty≥
;

224 
	#APSR_N_Pos
 31U

	)

225 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

227 
	#APSR_Z_Pos
 30U

	)

228 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

230 
	#APSR_C_Pos
 29U

	)

231 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

233 
	#APSR_V_Pos
 28U

	)

234 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

244 
uöt32_t
 
ISR
:9;

245 
uöt32_t
 
_ª£rved0
:23;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tIPSR_Ty≥
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:15;

264 
uöt32_t
 
T
:1;

265 
uöt32_t
 
_ª£rved1
:3;

266 
uöt32_t
 
V
:1;

267 
uöt32_t
 
C
:1;

268 
uöt32_t
 
Z
:1;

269 
uöt32_t
 
N
:1;

270 } 
b
;

271 
uöt32_t
 
w
;

272 } 
	txPSR_Ty≥
;

275 
	#xPSR_N_Pos
 31U

	)

276 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

278 
	#xPSR_Z_Pos
 30U

	)

279 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

281 
	#xPSR_C_Pos
 29U

	)

282 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

284 
	#xPSR_V_Pos
 28U

	)

285 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

287 
	#xPSR_T_Pos
 24U

	)

288 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

290 
	#xPSR_ISR_Pos
 0U

	)

291 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

301 
uöt32_t
 
nPRIV
:1;

302 
uöt32_t
 
SPSEL
:1;

303 
uöt32_t
 
_ª£rved1
:30;

304 } 
b
;

305 
uöt32_t
 
w
;

306 } 
	tCONTROL_Ty≥
;

309 
	#CONTROL_SPSEL_Pos
 1U

	)

310 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

312 
	#CONTROL_nPRIV_Pos
 0U

	)

313 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

330 
__IOM
 
uöt32_t
 
ISER
[1U];

331 
uöt32_t
 
RESERVED0
[31U];

332 
__IOM
 
uöt32_t
 
ICER
[1U];

333 
uöt32_t
 
RSERVED1
[31U];

334 
__IOM
 
uöt32_t
 
ISPR
[1U];

335 
uöt32_t
 
RESERVED2
[31U];

336 
__IOM
 
uöt32_t
 
ICPR
[1U];

337 
uöt32_t
 
RESERVED3
[31U];

338 
uöt32_t
 
RESERVED4
[64U];

339 
__IOM
 
uöt32_t
 
IP
[8U];

340 } 
	tNVIC_Ty≥
;

357 
__IM
 
uöt32_t
 
CPUID
;

358 
__IOM
 
uöt32_t
 
ICSR
;

359 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

360 
__IOM
 
uöt32_t
 
VTOR
;

362 
uöt32_t
 
RESERVED0
;

364 
__IOM
 
uöt32_t
 
AIRCR
;

365 
__IOM
 
uöt32_t
 
SCR
;

366 
__IOM
 
uöt32_t
 
CCR
;

367 
uöt32_t
 
RESERVED1
;

368 
__IOM
 
uöt32_t
 
SHP
[2U];

369 
__IOM
 
uöt32_t
 
SHCSR
;

370 } 
	tSCB_Ty≥
;

373 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

374 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

376 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

377 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

379 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

380 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

382 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

383 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

385 
	#SCB_CPUID_REVISION_Pos
 0U

	)

386 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

389 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

390 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

392 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

393 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

395 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

396 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

398 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

399 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

401 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

402 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

404 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

405 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

407 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

408 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

410 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

411 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

413 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

414 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

416 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

418 
	#SCB_VTOR_TBLOFF_Pos
 8U

	)

419 
	#SCB_VTOR_TBLOFF_Msk
 (0xFFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

423 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

424 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

426 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

427 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

429 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

430 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

432 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

433 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

435 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

436 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

439 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

440 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

442 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

443 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

445 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

446 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

449 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

450 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

452 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

453 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

457 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

474 
__IOM
 
uöt32_t
 
CTRL
;

475 
__IOM
 
uöt32_t
 
LOAD
;

476 
__IOM
 
uöt32_t
 
VAL
;

477 
__IM
 
uöt32_t
 
CALIB
;

478 } 
	tSysTick_Ty≥
;

481 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

482 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

484 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

485 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

487 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

488 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

490 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

491 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

494 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

495 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

498 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

499 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

502 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

503 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

505 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

506 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

508 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

509 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

513 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

526 
__IM
 
uöt32_t
 
TYPE
;

527 
__IOM
 
uöt32_t
 
CTRL
;

528 
__IOM
 
uöt32_t
 
RNR
;

529 
__IOM
 
uöt32_t
 
RBAR
;

530 
__IOM
 
uöt32_t
 
RASR
;

531 } 
	tMPU_Ty≥
;

533 
	#MPU_TYPE_RALIASES
 1U

	)

536 
	#MPU_TYPE_IREGION_Pos
 16U

	)

537 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

539 
	#MPU_TYPE_DREGION_Pos
 8U

	)

540 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

542 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

543 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

546 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

547 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

549 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

550 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

552 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

553 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

556 
	#MPU_RNR_REGION_Pos
 0U

	)

557 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

560 
	#MPU_RBAR_ADDR_Pos
 8U

	)

561 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

563 
	#MPU_RBAR_VALID_Pos
 4U

	)

564 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

566 
	#MPU_RBAR_REGION_Pos
 0U

	)

567 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

570 
	#MPU_RASR_ATTRS_Pos
 16U

	)

571 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

573 
	#MPU_RASR_XN_Pos
 28U

	)

574 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

576 
	#MPU_RASR_AP_Pos
 24U

	)

577 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

579 
	#MPU_RASR_TEX_Pos
 19U

	)

580 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

582 
	#MPU_RASR_S_Pos
 18U

	)

583 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

585 
	#MPU_RASR_C_Pos
 17U

	)

586 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

588 
	#MPU_RASR_B_Pos
 16U

	)

589 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

591 
	#MPU_RASR_SRD_Pos
 8U

	)

592 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

594 
	#MPU_RASR_SIZE_Pos
 1U

	)

595 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

597 
	#MPU_RASR_ENABLE_Pos
 0U

	)

598 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

627 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

635 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

648 
	#SCS_BASE
 (0xE000E000ULË

	)

649 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

650 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

651 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

653 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

654 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

655 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

657 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

658 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

659 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

687 #ifde‡
CMSIS_NVIC_VIRTUAL


688 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


689 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

691 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


693 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

694 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

695 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

696 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

697 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

698 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

699 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

700 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

702 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

703 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

704 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

707 #ifde‡
CMSIS_VECTAB_VIRTUAL


708 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


709 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

711 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


713 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

714 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

717 
	#NVIC_USER_IRQ_OFFSET
 16

	)

721 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

722 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

723 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

728 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

729 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

730 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

732 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

733 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

741 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

743 i‡((
öt32_t
)(
IRQn
) >= 0)

745 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

758 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

760 i‡((
öt32_t
)(
IRQn
) >= 0)

762 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

777 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

779 i‡((
öt32_t
)(
IRQn
) >= 0)

781 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

782 
__DSB
();

783 
__ISB
();

796 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

798 i‡((
öt32_t
)(
IRQn
) >= 0)

800 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

815 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

817 i‡((
öt32_t
)(
IRQn
) >= 0)

819 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

830 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

832 i‡((
öt32_t
)(
IRQn
) >= 0)

834 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

848 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

850 i‡((
öt32_t
)(
IRQn
) >= 0)

852 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

853 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

857 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

858 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

872 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

875 i‡((
öt32_t
)(
IRQn
) >= 0)

877 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

881 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

897 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

899 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

900 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

901 
uöt32_t
 
SubPri‹ôyBôs
;

903 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

904 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

907 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

908 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

924 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

926 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

927 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

928 
uöt32_t
 
SubPri‹ôyBôs
;

930 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

931 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

933 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

934 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

948 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

950 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

951 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

953 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

955 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

967 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

969 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

970 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

972 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

974  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

983 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

985 
__DSB
();

987 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

988 
SCB_AIRCR_SYSRESETREQ_Msk
);

989 
__DSB
();

993 
__NOP
();

1001 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1003 
	~"mpu_¨mv7.h
"

1023 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1041 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1054 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1056 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1061 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1062 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1063 
SysTick
->
VAL
 = 0UL;

1064 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1065 
SysTick_CTRL_TICKINT_Msk
 |

1066 
SysTick_CTRL_ENABLE_Msk
;

1077 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm1.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM1_H_GENERIC


32 
	#__CORE_CM1_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM1_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM1_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM1_CMSIS_VERSION
 ((
__CM1_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM1_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (1UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM1_H_DEPENDANT


127 
	#__CORE_CM1_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM1_REV


136 
	#__CM1_REV
 0x0100U

	)

140 #i‚de‡
__NVIC_PRIO_BITS


141 
	#__NVIC_PRIO_BITS
 2U

	)

145 #i‚de‡
__Víd‹_SysTickC⁄fig


146 
	#__Víd‹_SysTickC⁄fig
 0U

	)

159 #ifde‡
__˝lu•lus


160 
	#__I
 vﬁ©ûê

	)

162 
	#__I
 vﬁ©ûêc⁄°

	)

164 
	#__O
 vﬁ©ûê

	)

165 
	#__IO
 vﬁ©ûê

	)

168 
	#__IM
 vﬁ©ûêc⁄°

	)

169 
	#__OM
 vﬁ©ûê

	)

170 
	#__IOM
 vﬁ©ûê

	)

203 
uöt32_t
 
_ª£rved0
:28;

204 
uöt32_t
 
V
:1;

205 
uöt32_t
 
C
:1;

206 
uöt32_t
 
Z
:1;

207 
uöt32_t
 
N
:1;

208 } 
b
;

209 
uöt32_t
 
w
;

210 } 
	tAPSR_Ty≥
;

213 
	#APSR_N_Pos
 31U

	)

214 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

216 
	#APSR_Z_Pos
 30U

	)

217 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

219 
	#APSR_C_Pos
 29U

	)

220 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

222 
	#APSR_V_Pos
 28U

	)

223 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
uöt32_t
 
ISR
:9;

234 
uöt32_t
 
_ª£rved0
:23;

235 } 
b
;

236 
uöt32_t
 
w
;

237 } 
	tIPSR_Ty≥
;

240 
	#IPSR_ISR_Pos
 0U

	)

241 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

251 
uöt32_t
 
ISR
:9;

252 
uöt32_t
 
_ª£rved0
:15;

253 
uöt32_t
 
T
:1;

254 
uöt32_t
 
_ª£rved1
:3;

255 
uöt32_t
 
V
:1;

256 
uöt32_t
 
C
:1;

257 
uöt32_t
 
Z
:1;

258 
uöt32_t
 
N
:1;

259 } 
b
;

260 
uöt32_t
 
w
;

261 } 
	txPSR_Ty≥
;

264 
	#xPSR_N_Pos
 31U

	)

265 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

267 
	#xPSR_Z_Pos
 30U

	)

268 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

270 
	#xPSR_C_Pos
 29U

	)

271 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

273 
	#xPSR_V_Pos
 28U

	)

274 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

276 
	#xPSR_T_Pos
 24U

	)

277 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

279 
	#xPSR_ISR_Pos
 0U

	)

280 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

290 
uöt32_t
 
_ª£rved0
:1;

291 
uöt32_t
 
SPSEL
:1;

292 
uöt32_t
 
_ª£rved1
:30;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	tCONTROL_Ty≥
;

298 
	#CONTROL_SPSEL_Pos
 1U

	)

299 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

316 
__IOM
 
uöt32_t
 
ISER
[1U];

317 
uöt32_t
 
RESERVED0
[31U];

318 
__IOM
 
uöt32_t
 
ICER
[1U];

319 
uöt32_t
 
RSERVED1
[31U];

320 
__IOM
 
uöt32_t
 
ISPR
[1U];

321 
uöt32_t
 
RESERVED2
[31U];

322 
__IOM
 
uöt32_t
 
ICPR
[1U];

323 
uöt32_t
 
RESERVED3
[31U];

324 
uöt32_t
 
RESERVED4
[64U];

325 
__IOM
 
uöt32_t
 
IP
[8U];

326 } 
	tNVIC_Ty≥
;

343 
__IM
 
uöt32_t
 
CPUID
;

344 
__IOM
 
uöt32_t
 
ICSR
;

345 
uöt32_t
 
RESERVED0
;

346 
__IOM
 
uöt32_t
 
AIRCR
;

347 
__IOM
 
uöt32_t
 
SCR
;

348 
__IOM
 
uöt32_t
 
CCR
;

349 
uöt32_t
 
RESERVED1
;

350 
__IOM
 
uöt32_t
 
SHP
[2U];

351 
__IOM
 
uöt32_t
 
SHCSR
;

352 } 
	tSCB_Ty≥
;

355 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

356 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

358 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

359 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

361 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

362 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

364 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

365 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

367 
	#SCB_CPUID_REVISION_Pos
 0U

	)

368 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

371 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

372 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

374 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

375 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

377 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

378 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

381 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

384 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

386 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

387 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

389 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

390 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

392 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

393 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

395 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

396 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

399 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

400 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

402 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

403 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

405 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

406 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

408 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

409 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

412 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

415 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

416 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

418 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

419 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

421 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

422 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

425 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

426 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

428 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

429 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

432 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

433 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

450 
uöt32_t
 
RESERVED0
[2U];

451 
__IOM
 
uöt32_t
 
ACTLR
;

452 } 
	tSCnSCB_Ty≥
;

455 
	#SCnSCB_ACTLR_ITCMUAEN_Pos
 4U

	)

456 
	#SCnSCB_ACTLR_ITCMUAEN_Msk
 (1UL << 
SCnSCB_ACTLR_ITCMUAEN_Pos
Ë

	)

458 
	#SCnSCB_ACTLR_ITCMLAEN_Pos
 3U

	)

459 
	#SCnSCB_ACTLR_ITCMLAEN_Msk
 (1UL << 
SCnSCB_ACTLR_ITCMLAEN_Pos
Ë

	)

476 
__IOM
 
uöt32_t
 
CTRL
;

477 
__IOM
 
uöt32_t
 
LOAD
;

478 
__IOM
 
uöt32_t
 
VAL
;

479 
__IM
 
uöt32_t
 
CALIB
;

480 } 
	tSysTick_Ty≥
;

483 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

484 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

486 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

487 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

489 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

490 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

492 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

493 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

496 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

497 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

500 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

501 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

504 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

505 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

507 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

508 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

510 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

511 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

539 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

547 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

560 
	#SCS_BASE
 (0xE000E000ULË

	)

561 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

562 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

563 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

565 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

566 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

567 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

568 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

596 #ifde‡
CMSIS_NVIC_VIRTUAL


597 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


598 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

600 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


602 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

603 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

604 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

605 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

606 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

607 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

608 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

609 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

611 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

612 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

613 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

616 #ifde‡
CMSIS_VECTAB_VIRTUAL


617 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


618 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

620 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


622 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

623 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

626 
	#NVIC_USER_IRQ_OFFSET
 16

	)

630 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

631 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

632 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

637 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

638 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

639 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

641 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

642 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

650 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

652 i‡((
öt32_t
)(
IRQn
) >= 0)

654 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

667 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

669 i‡((
öt32_t
)(
IRQn
) >= 0)

671 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

686 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

688 i‡((
öt32_t
)(
IRQn
) >= 0)

690 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

691 
__DSB
();

692 
__ISB
();

705 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

707 i‡((
öt32_t
)(
IRQn
) >= 0)

709 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

724 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

726 i‡((
öt32_t
)(
IRQn
) >= 0)

728 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

739 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

741 i‡((
öt32_t
)(
IRQn
) >= 0)

743 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

757 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

759 i‡((
öt32_t
)(
IRQn
) >= 0)

761 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

762 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

766 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

767 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

781 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

784 i‡((
öt32_t
)(
IRQn
) >= 0)

786 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

790 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

806 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

808 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

809 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

810 
uöt32_t
 
SubPri‹ôyBôs
;

812 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

813 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

816 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

817 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

833 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

835 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

836 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

837 
uöt32_t
 
SubPri‹ôyBôs
;

839 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

840 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

842 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

843 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

857 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

859 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

860 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

872 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

874 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

875  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

883 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

885 
__DSB
();

887 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

888 
SCB_AIRCR_SYSRESETREQ_Msk
);

889 
__DSB
();

893 
__NOP
();

916 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

934 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

947 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

949 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

954 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

955 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

956 
SysTick
->
VAL
 = 0UL;

957 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

958 
SysTick_CTRL_TICKINT_Msk
 |

959 
SysTick_CTRL_ENABLE_Msk
;

970 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm23.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM23_H_GENERIC


32 
	#__CORE_CM23_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM23_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM23_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM23_CMSIS_VERSION
 ((
__CM23_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM23_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (23UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM23_H_DEPENDANT


127 
	#__CORE_CM23_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM23_REV


136 
	#__CM23_REV
 0x0000U

	)

140 #i‚de‡
__FPU_PRESENT


141 
	#__FPU_PRESENT
 0U

	)

145 #i‚de‡
__MPU_PRESENT


146 
	#__MPU_PRESENT
 0U

	)

150 #i‚de‡
__SAUREGION_PRESENT


151 
	#__SAUREGION_PRESENT
 0U

	)

155 #i‚de‡
__VTOR_PRESENT


156 
	#__VTOR_PRESENT
 0U

	)

160 #i‚de‡
__NVIC_PRIO_BITS


161 
	#__NVIC_PRIO_BITS
 2U

	)

165 #i‚de‡
__Víd‹_SysTickC⁄fig


166 
	#__Víd‹_SysTickC⁄fig
 0U

	)

170 #i‚de‡
__ETM_PRESENT


171 
	#__ETM_PRESENT
 0U

	)

175 #i‚de‡
__MTB_PRESENT


176 
	#__MTB_PRESENT
 0U

	)

190 #ifde‡
__˝lu•lus


191 
	#__I
 vﬁ©ûê

	)

193 
	#__I
 vﬁ©ûêc⁄°

	)

195 
	#__O
 vﬁ©ûê

	)

196 
	#__IO
 vﬁ©ûê

	)

199 
	#__IM
 vﬁ©ûêc⁄°

	)

200 
	#__OM
 vﬁ©ûê

	)

201 
	#__IOM
 vﬁ©ûê

	)

237 
uöt32_t
 
_ª£rved0
:28;

238 
uöt32_t
 
V
:1;

239 
uöt32_t
 
C
:1;

240 
uöt32_t
 
Z
:1;

241 
uöt32_t
 
N
:1;

242 } 
b
;

243 
uöt32_t
 
w
;

244 } 
	tAPSR_Ty≥
;

247 
	#APSR_N_Pos
 31U

	)

248 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

250 
	#APSR_Z_Pos
 30U

	)

251 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

253 
	#APSR_C_Pos
 29U

	)

254 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

256 
	#APSR_V_Pos
 28U

	)

257 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

267 
uöt32_t
 
ISR
:9;

268 
uöt32_t
 
_ª£rved0
:23;

269 } 
b
;

270 
uöt32_t
 
w
;

271 } 
	tIPSR_Ty≥
;

274 
	#IPSR_ISR_Pos
 0U

	)

275 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

285 
uöt32_t
 
ISR
:9;

286 
uöt32_t
 
_ª£rved0
:15;

287 
uöt32_t
 
T
:1;

288 
uöt32_t
 
_ª£rved1
:3;

289 
uöt32_t
 
V
:1;

290 
uöt32_t
 
C
:1;

291 
uöt32_t
 
Z
:1;

292 
uöt32_t
 
N
:1;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	txPSR_Ty≥
;

298 
	#xPSR_N_Pos
 31U

	)

299 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

301 
	#xPSR_Z_Pos
 30U

	)

302 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

304 
	#xPSR_C_Pos
 29U

	)

305 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

307 
	#xPSR_V_Pos
 28U

	)

308 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

310 
	#xPSR_T_Pos
 24U

	)

311 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

313 
	#xPSR_ISR_Pos
 0U

	)

314 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

324 
uöt32_t
 
nPRIV
:1;

325 
uöt32_t
 
SPSEL
:1;

326 
uöt32_t
 
_ª£rved1
:30;

327 } 
b
;

328 
uöt32_t
 
w
;

329 } 
	tCONTROL_Ty≥
;

332 
	#CONTROL_SPSEL_Pos
 1U

	)

333 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

335 
	#CONTROL_nPRIV_Pos
 0U

	)

336 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

353 
__IOM
 
uöt32_t
 
ISER
[16U];

354 
uöt32_t
 
RESERVED0
[16U];

355 
__IOM
 
uöt32_t
 
ICER
[16U];

356 
uöt32_t
 
RSERVED1
[16U];

357 
__IOM
 
uöt32_t
 
ISPR
[16U];

358 
uöt32_t
 
RESERVED2
[16U];

359 
__IOM
 
uöt32_t
 
ICPR
[16U];

360 
uöt32_t
 
RESERVED3
[16U];

361 
__IOM
 
uöt32_t
 
IABR
[16U];

362 
uöt32_t
 
RESERVED4
[16U];

363 
__IOM
 
uöt32_t
 
ITNS
[16U];

364 
uöt32_t
 
RESERVED5
[16U];

365 
__IOM
 
uöt32_t
 
IPR
[124U];

366 } 
	tNVIC_Ty≥
;

383 
__IM
 
uöt32_t
 
CPUID
;

384 
__IOM
 
uöt32_t
 
ICSR
;

385 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

386 
__IOM
 
uöt32_t
 
VTOR
;

388 
uöt32_t
 
RESERVED0
;

390 
__IOM
 
uöt32_t
 
AIRCR
;

391 
__IOM
 
uöt32_t
 
SCR
;

392 
__IOM
 
uöt32_t
 
CCR
;

393 
uöt32_t
 
RESERVED1
;

394 
__IOM
 
uöt32_t
 
SHPR
[2U];

395 
__IOM
 
uöt32_t
 
SHCSR
;

396 } 
	tSCB_Ty≥
;

399 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

400 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

402 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

403 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

405 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

406 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

408 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

409 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

411 
	#SCB_CPUID_REVISION_Pos
 0U

	)

412 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

415 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

416 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

418 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

419 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

421 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

422 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

424 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

425 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

427 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

428 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

431 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

433 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

434 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

436 
	#SCB_ICSR_STTNS_Pos
 24U

	)

437 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

439 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

440 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

442 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

443 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

445 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

446 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

448 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

449 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

451 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

452 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

454 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

456 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

457 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

461 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

462 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

464 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

465 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

467 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

468 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

470 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

471 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

473 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

474 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

476 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

477 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

479 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

480 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

482 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

483 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

486 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

487 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

489 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

490 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

492 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

493 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

495 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

496 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

499 
	#SCB_CCR_BP_Pos
 18U

	)

500 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

502 
	#SCB_CCR_IC_Pos
 17U

	)

503 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

505 
	#SCB_CCR_DC_Pos
 16U

	)

506 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

508 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

509 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

511 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

512 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

514 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

515 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

517 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

518 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

520 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

521 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

524 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

525 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

527 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

528 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

530 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

531 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

533 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

534 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

536 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

537 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

539 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

540 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

542 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

543 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

560 
__IOM
 
uöt32_t
 
CTRL
;

561 
__IOM
 
uöt32_t
 
LOAD
;

562 
__IOM
 
uöt32_t
 
VAL
;

563 
__IM
 
uöt32_t
 
CALIB
;

564 } 
	tSysTick_Ty≥
;

567 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

568 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

570 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

571 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

573 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

574 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

576 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

577 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

580 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

581 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

584 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

585 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

588 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

589 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

591 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

592 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

594 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

595 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

612 
__IOM
 
uöt32_t
 
CTRL
;

613 
uöt32_t
 
RESERVED0
[6U];

614 
__IM
 
uöt32_t
 
PCSR
;

615 
__IOM
 
uöt32_t
 
COMP0
;

616 
uöt32_t
 
RESERVED1
[1U];

617 
__IOM
 
uöt32_t
 
FUNCTION0
;

618 
uöt32_t
 
RESERVED2
[1U];

619 
__IOM
 
uöt32_t
 
COMP1
;

620 
uöt32_t
 
RESERVED3
[1U];

621 
__IOM
 
uöt32_t
 
FUNCTION1
;

622 
uöt32_t
 
RESERVED4
[1U];

623 
__IOM
 
uöt32_t
 
COMP2
;

624 
uöt32_t
 
RESERVED5
[1U];

625 
__IOM
 
uöt32_t
 
FUNCTION2
;

626 
uöt32_t
 
RESERVED6
[1U];

627 
__IOM
 
uöt32_t
 
COMP3
;

628 
uöt32_t
 
RESERVED7
[1U];

629 
__IOM
 
uöt32_t
 
FUNCTION3
;

630 
uöt32_t
 
RESERVED8
[1U];

631 
__IOM
 
uöt32_t
 
COMP4
;

632 
uöt32_t
 
RESERVED9
[1U];

633 
__IOM
 
uöt32_t
 
FUNCTION4
;

634 
uöt32_t
 
RESERVED10
[1U];

635 
__IOM
 
uöt32_t
 
COMP5
;

636 
uöt32_t
 
RESERVED11
[1U];

637 
__IOM
 
uöt32_t
 
FUNCTION5
;

638 
uöt32_t
 
RESERVED12
[1U];

639 
__IOM
 
uöt32_t
 
COMP6
;

640 
uöt32_t
 
RESERVED13
[1U];

641 
__IOM
 
uöt32_t
 
FUNCTION6
;

642 
uöt32_t
 
RESERVED14
[1U];

643 
__IOM
 
uöt32_t
 
COMP7
;

644 
uöt32_t
 
RESERVED15
[1U];

645 
__IOM
 
uöt32_t
 
FUNCTION7
;

646 
uöt32_t
 
RESERVED16
[1U];

647 
__IOM
 
uöt32_t
 
COMP8
;

648 
uöt32_t
 
RESERVED17
[1U];

649 
__IOM
 
uöt32_t
 
FUNCTION8
;

650 
uöt32_t
 
RESERVED18
[1U];

651 
__IOM
 
uöt32_t
 
COMP9
;

652 
uöt32_t
 
RESERVED19
[1U];

653 
__IOM
 
uöt32_t
 
FUNCTION9
;

654 
uöt32_t
 
RESERVED20
[1U];

655 
__IOM
 
uöt32_t
 
COMP10
;

656 
uöt32_t
 
RESERVED21
[1U];

657 
__IOM
 
uöt32_t
 
FUNCTION10
;

658 
uöt32_t
 
RESERVED22
[1U];

659 
__IOM
 
uöt32_t
 
COMP11
;

660 
uöt32_t
 
RESERVED23
[1U];

661 
__IOM
 
uöt32_t
 
FUNCTION11
;

662 
uöt32_t
 
RESERVED24
[1U];

663 
__IOM
 
uöt32_t
 
COMP12
;

664 
uöt32_t
 
RESERVED25
[1U];

665 
__IOM
 
uöt32_t
 
FUNCTION12
;

666 
uöt32_t
 
RESERVED26
[1U];

667 
__IOM
 
uöt32_t
 
COMP13
;

668 
uöt32_t
 
RESERVED27
[1U];

669 
__IOM
 
uöt32_t
 
FUNCTION13
;

670 
uöt32_t
 
RESERVED28
[1U];

671 
__IOM
 
uöt32_t
 
COMP14
;

672 
uöt32_t
 
RESERVED29
[1U];

673 
__IOM
 
uöt32_t
 
FUNCTION14
;

674 
uöt32_t
 
RESERVED30
[1U];

675 
__IOM
 
uöt32_t
 
COMP15
;

676 
uöt32_t
 
RESERVED31
[1U];

677 
__IOM
 
uöt32_t
 
FUNCTION15
;

678 } 
	tDWT_Ty≥
;

681 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

682 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

684 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

685 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

687 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

688 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

690 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

691 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

693 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

694 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

697 
	#DWT_FUNCTION_ID_Pos
 27U

	)

698 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

700 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

701 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

703 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

704 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

706 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

707 
	#DWT_FUNCTION_ACTION_Msk
 (0x3UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

709 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

710 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

727 
__IM
 
uöt32_t
 
SSPSR
;

728 
__IOM
 
uöt32_t
 
CSPSR
;

729 
uöt32_t
 
RESERVED0
[2U];

730 
__IOM
 
uöt32_t
 
ACPR
;

731 
uöt32_t
 
RESERVED1
[55U];

732 
__IOM
 
uöt32_t
 
SPPR
;

733 
uöt32_t
 
RESERVED2
[131U];

734 
__IM
 
uöt32_t
 
FFSR
;

735 
__IOM
 
uöt32_t
 
FFCR
;

736 
__IOM
 
uöt32_t
 
PSCR
;

737 
uöt32_t
 
RESERVED3
[759U];

738 
__IM
 
uöt32_t
 
TRIGGER
;

739 
__IM
 
uöt32_t
 
ITFTTD0
;

740 
__IOM
 
uöt32_t
 
ITATBCTR2
;

741 
uöt32_t
 
RESERVED4
[1U];

742 
__IM
 
uöt32_t
 
ITATBCTR0
;

743 
__IM
 
uöt32_t
 
ITFTTD1
;

744 
__IOM
 
uöt32_t
 
ITCTRL
;

745 
uöt32_t
 
RESERVED5
[39U];

746 
__IOM
 
uöt32_t
 
CLAIMSET
;

747 
__IOM
 
uöt32_t
 
CLAIMCLR
;

748 
uöt32_t
 
RESERVED7
[8U];

749 
__IM
 
uöt32_t
 
DEVID
;

750 
__IM
 
uöt32_t
 
DEVTYPE
;

751 } 
	tTPI_Ty≥
;

754 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

755 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

758 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

759 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

762 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

763 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

765 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

766 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

768 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

769 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

771 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

772 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

775 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

776 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

778 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

779 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

781 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

782 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

785 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

786 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

789 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
 29U

	)

790 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
Ë

	)

792 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
 27U

	)

793 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
Ë

	)

795 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
 26U

	)

796 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
Ë

	)

798 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
 24U

	)

799 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
Ë

	)

801 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Pos
 16U

	)

802 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

804 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Pos
 8U

	)

805 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

807 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Pos
 0U

	)

808 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Msk
 (0xFFUL )

	)

811 
	#TPI_ITATBCTR2_AFVALID2S_Pos
 1U

	)

812 
	#TPI_ITATBCTR2_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID2S_Pos
Ë

	)

814 
	#TPI_ITATBCTR2_AFVALID1S_Pos
 1U

	)

815 
	#TPI_ITATBCTR2_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID1S_Pos
Ë

	)

817 
	#TPI_ITATBCTR2_ATREADY2S_Pos
 0U

	)

818 
	#TPI_ITATBCTR2_ATREADY2S_Msk
 (0x1UL )

	)

820 
	#TPI_ITATBCTR2_ATREADY1S_Pos
 0U

	)

821 
	#TPI_ITATBCTR2_ATREADY1S_Msk
 (0x1UL )

	)

824 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
 29U

	)

825 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
Ë

	)

827 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
 27U

	)

828 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
Ë

	)

830 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
 26U

	)

831 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
Ë

	)

833 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
 24U

	)

834 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
Ë

	)

836 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Pos
 16U

	)

837 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

839 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Pos
 8U

	)

840 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

842 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Pos
 0U

	)

843 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Msk
 (0xFFUL )

	)

846 
	#TPI_ITATBCTR0_AFVALID2S_Pos
 1U

	)

847 
	#TPI_ITATBCTR0_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID2S_Pos
Ë

	)

849 
	#TPI_ITATBCTR0_AFVALID1S_Pos
 1U

	)

850 
	#TPI_ITATBCTR0_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID1S_Pos
Ë

	)

852 
	#TPI_ITATBCTR0_ATREADY2S_Pos
 0U

	)

853 
	#TPI_ITATBCTR0_ATREADY2S_Msk
 (0x1UL )

	)

855 
	#TPI_ITATBCTR0_ATREADY1S_Pos
 0U

	)

856 
	#TPI_ITATBCTR0_ATREADY1S_Msk
 (0x1UL )

	)

859 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

860 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

863 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

864 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

866 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

867 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

869 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

870 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

872 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

873 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

875 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

876 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x3FUL )

	)

879 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

880 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

882 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

883 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

888 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

901 
__IM
 
uöt32_t
 
TYPE
;

902 
__IOM
 
uöt32_t
 
CTRL
;

903 
__IOM
 
uöt32_t
 
RNR
;

904 
__IOM
 
uöt32_t
 
RBAR
;

905 
__IOM
 
uöt32_t
 
RLAR
;

906 
uöt32_t
 
RESERVED0
[7U];

908 
__IOM
 
uöt32_t
 
MAIR
[2];

910 
__IOM
 
uöt32_t
 
MAIR0
;

911 
__IOM
 
uöt32_t
 
MAIR1
;

914 } 
	tMPU_Ty≥
;

916 
	#MPU_TYPE_RALIASES
 1U

	)

919 
	#MPU_TYPE_IREGION_Pos
 16U

	)

920 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

922 
	#MPU_TYPE_DREGION_Pos
 8U

	)

923 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

925 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

926 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

929 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

930 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

932 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

933 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

935 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

936 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

939 
	#MPU_RNR_REGION_Pos
 0U

	)

940 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

943 
	#MPU_RBAR_BASE_Pos
 5U

	)

944 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

946 
	#MPU_RBAR_SH_Pos
 3U

	)

947 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

949 
	#MPU_RBAR_AP_Pos
 1U

	)

950 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

952 
	#MPU_RBAR_XN_Pos
 0U

	)

953 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

956 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

957 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

959 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

960 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

962 
	#MPU_RLAR_EN_Pos
 0U

	)

963 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

966 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

967 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

969 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

970 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

972 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

973 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

975 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

976 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

979 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

980 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

982 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

983 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

985 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

986 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

988 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

989 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

995 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1008 
__IOM
 
uöt32_t
 
CTRL
;

1009 
__IM
 
uöt32_t
 
TYPE
;

1010 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1011 
__IOM
 
uöt32_t
 
RNR
;

1012 
__IOM
 
uöt32_t
 
RBAR
;

1013 
__IOM
 
uöt32_t
 
RLAR
;

1015 } 
	tSAU_Ty≥
;

1018 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

1019 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

1021 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

1022 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

1025 
	#SAU_TYPE_SREGION_Pos
 0U

	)

1026 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

1028 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1030 
	#SAU_RNR_REGION_Pos
 0U

	)

1031 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

1034 
	#SAU_RBAR_BADDR_Pos
 5U

	)

1035 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

1038 
	#SAU_RLAR_LADDR_Pos
 5U

	)

1039 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

1041 
	#SAU_RLAR_NSC_Pos
 1U

	)

1042 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

1044 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

1045 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

1065 
__IOM
 
uöt32_t
 
DHCSR
;

1066 
__OM
 
uöt32_t
 
DCRSR
;

1067 
__IOM
 
uöt32_t
 
DCRDR
;

1068 
__IOM
 
uöt32_t
 
DEMCR
;

1069 
uöt32_t
 
RESERVED4
[1U];

1070 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

1071 
__IOM
 
uöt32_t
 
DSCSR
;

1072 } 
	tC‹eDebug_Ty≥
;

1075 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1076 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1078 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1079 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1081 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1082 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1084 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1085 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1087 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1088 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1090 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1091 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1093 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1094 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1096 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1097 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1099 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1100 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1102 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1103 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1105 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1106 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1108 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1109 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1112 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1113 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1115 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1116 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1119 
	#C‹eDebug_DEMCR_DWTENA_Pos
 24U

	)

1120 
	#C‹eDebug_DEMCR_DWTENA_Msk
 (1UL << 
C‹eDebug_DEMCR_DWTENA_Pos
Ë

	)

1122 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1123 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1125 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1126 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1129 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1130 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1132 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1133 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1135 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1136 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1138 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1139 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

1142 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

1143 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

1145 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

1146 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

1148 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

1149 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

1167 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1175 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1188 
	#SCS_BASE
 (0xE000E000ULË

	)

1189 
	#DWT_BASE
 (0xE0001000ULË

	)

1190 
	#TPI_BASE
 (0xE0040000ULË

	)

1191 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1192 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1193 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1194 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1197 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1198 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1199 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1200 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1201 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1202 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

1204 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1205 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1206 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1209 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1210 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

1211 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

1214 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1215 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

1216 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

1217 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

1218 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

1219 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

1221 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

1222 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

1223 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

1224 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

1226 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1227 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

1228 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

1257 #ifde‡
CMSIS_NVIC_VIRTUAL


1258 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1259 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1261 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1265 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1266 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1267 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1268 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1269 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1270 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1271 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1272 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1273 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1274 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1277 #ifde‡
CMSIS_VECTAB_VIRTUAL


1278 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1279 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1281 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1283 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1284 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1287 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1293 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

1296 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

1297 
	#EXC_RETURN_S
 (0x00000040ULË

	)

1298 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

1299 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

1300 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

1301 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

1302 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

1305 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

1306 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

1308 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

1314 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

1315 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

1316 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

1318 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

1319 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

1327 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1329 i‡((
öt32_t
)(
IRQn
) >= 0)

1331 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1344 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1346 i‡((
öt32_t
)(
IRQn
) >= 0)

1348 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1363 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1365 i‡((
öt32_t
)(
IRQn
) >= 0)

1367 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1368 
__DSB
();

1369 
__ISB
();

1382 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1384 i‡((
öt32_t
)(
IRQn
) >= 0)

1386 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1401 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1403 i‡((
öt32_t
)(
IRQn
) >= 0)

1405 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1416 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1418 i‡((
öt32_t
)(
IRQn
) >= 0)

1420 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1433 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1435 i‡((
öt32_t
)(
IRQn
) >= 0)

1437 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1446 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1455 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1457 i‡((
öt32_t
)(
IRQn
) >= 0)

1459 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1476 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1478 i‡((
öt32_t
)(
IRQn
) >= 0)

1480 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1481 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1498 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1500 i‡((
öt32_t
)(
IRQn
) >= 0)

1502 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1503 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1522 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1524 i‡((
öt32_t
)(
IRQn
) >= 0)

1526 
NVIC
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1527 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1531 
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1532 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1546 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) >= 0)

1551 ((
uöt32_t
)(((
NVIC
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1555 ((
uöt32_t
)(((
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1571 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1573 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1574 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1575 
uöt32_t
 
SubPri‹ôyBôs
;

1577 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1578 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1581 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1582 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1598 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1600 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1601 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1602 
uöt32_t
 
SubPri‹ôyBôs
;

1604 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1605 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1607 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1608 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1622 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1624 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1625 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1627 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1629 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1641 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1643 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1644 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1646 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1648  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1656 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1658 
__DSB
();

1660 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1661 
SCB_AIRCR_SYSRESETREQ_Msk
);

1662 
__DSB
();

1666 
__NOP
();

1670 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1677 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1679 i‡((
öt32_t
)(
IRQn
) >= 0)

1681 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1694 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1696 i‡((
öt32_t
)(
IRQn
) >= 0)

1698 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1713 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1715 i‡((
öt32_t
)(
IRQn
) >= 0)

1717 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1730 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1732 i‡((
öt32_t
)(
IRQn
) >= 0)

1734 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1749 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1751 i‡((
öt32_t
)(
IRQn
) >= 0)

1753 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1764 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1766 i‡((
öt32_t
)(
IRQn
) >= 0)

1768 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1781 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

1783 i‡((
öt32_t
)(
IRQn
) >= 0)

1785 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1803 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1805 i‡((
öt32_t
)(
IRQn
) >= 0)

1807 
NVIC_NS
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC_NS->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1808 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1812 
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB_NS->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1813 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1826 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

1829 i‡((
öt32_t
)(
IRQn
) >= 0)

1831 ((
uöt32_t
)(((
NVIC_NS
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1835 ((
uöt32_t
)(((
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1844 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1846 
	~"mpu_¨mv8.h
"

1866 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1884 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1890 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

1892 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

1901 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

1903 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

1921 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1934 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1936 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1941 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1942 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1943 
SysTick
->
VAL
 = 0UL;

1944 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1945 
SysTick_CTRL_TICKINT_Msk
 |

1946 
SysTick_CTRL_ENABLE_Msk
;

1950 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1963 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

1965 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1970 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1971 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1972 
SysTick_NS
->
VAL
 = 0UL;

1973 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1974 
SysTick_CTRL_TICKINT_Msk
 |

1975 
SysTick_CTRL_ENABLE_Msk
;

1987 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm3.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM3_H_GENERIC


32 
	#__CORE_CM3_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM3_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM3_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM3_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (3UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM3_H_DEPENDANT


127 
	#__CORE_CM3_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM3_REV


136 
	#__CM3_REV
 0x0200U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 3U

	)

150 #i‚de‡
__Víd‹_SysTickC⁄fig


151 
	#__Víd‹_SysTickC⁄fig
 0U

	)

164 #ifde‡
__˝lu•lus


165 
	#__I
 vﬁ©ûê

	)

167 
	#__I
 vﬁ©ûêc⁄°

	)

169 
	#__O
 vﬁ©ûê

	)

170 
	#__IO
 vﬁ©ûê

	)

173 
	#__IM
 vﬁ©ûêc⁄°

	)

174 
	#__OM
 vﬁ©ûê

	)

175 
	#__IOM
 vﬁ©ûê

	)

210 
uöt32_t
 
_ª£rved0
:27;

211 
uöt32_t
 
Q
:1;

212 
uöt32_t
 
V
:1;

213 
uöt32_t
 
C
:1;

214 
uöt32_t
 
Z
:1;

215 
uöt32_t
 
N
:1;

216 } 
b
;

217 
uöt32_t
 
w
;

218 } 
	tAPSR_Ty≥
;

221 
	#APSR_N_Pos
 31U

	)

222 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

224 
	#APSR_Z_Pos
 30U

	)

225 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

227 
	#APSR_C_Pos
 29U

	)

228 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

230 
	#APSR_V_Pos
 28U

	)

231 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
	#APSR_Q_Pos
 27U

	)

234 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

244 
uöt32_t
 
ISR
:9;

245 
uöt32_t
 
_ª£rved0
:23;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tIPSR_Ty≥
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:1;

264 
uöt32_t
 
ICI_IT_1
:6;

265 
uöt32_t
 
_ª£rved1
:8;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
ICI_IT_2
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

278 
	#xPSR_N_Pos
 31U

	)

279 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

281 
	#xPSR_Z_Pos
 30U

	)

282 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

284 
	#xPSR_C_Pos
 29U

	)

285 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

287 
	#xPSR_V_Pos
 28U

	)

288 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

290 
	#xPSR_Q_Pos
 27U

	)

291 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

293 
	#xPSR_ICI_IT_2_Pos
 25U

	)

294 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

296 
	#xPSR_T_Pos
 24U

	)

297 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

299 
	#xPSR_ICI_IT_1_Pos
 10U

	)

300 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

302 
	#xPSR_ISR_Pos
 0U

	)

303 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

313 
uöt32_t
 
nPRIV
:1;

314 
uöt32_t
 
SPSEL
:1;

315 
uöt32_t
 
_ª£rved1
:30;

316 } 
b
;

317 
uöt32_t
 
w
;

318 } 
	tCONTROL_Ty≥
;

321 
	#CONTROL_SPSEL_Pos
 1U

	)

322 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

324 
	#CONTROL_nPRIV_Pos
 0U

	)

325 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

342 
__IOM
 
uöt32_t
 
ISER
[8U];

343 
uöt32_t
 
RESERVED0
[24U];

344 
__IOM
 
uöt32_t
 
ICER
[8U];

345 
uöt32_t
 
RSERVED1
[24U];

346 
__IOM
 
uöt32_t
 
ISPR
[8U];

347 
uöt32_t
 
RESERVED2
[24U];

348 
__IOM
 
uöt32_t
 
ICPR
[8U];

349 
uöt32_t
 
RESERVED3
[24U];

350 
__IOM
 
uöt32_t
 
IABR
[8U];

351 
uöt32_t
 
RESERVED4
[56U];

352 
__IOM
 
uöt8_t
 
IP
[240U];

353 
uöt32_t
 
RESERVED5
[644U];

354 
__OM
 
uöt32_t
 
STIR
;

355 } 
	tNVIC_Ty≥
;

358 
	#NVIC_STIR_INTID_Pos
 0U

	)

359 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

376 
__IM
 
uöt32_t
 
CPUID
;

377 
__IOM
 
uöt32_t
 
ICSR
;

378 
__IOM
 
uöt32_t
 
VTOR
;

379 
__IOM
 
uöt32_t
 
AIRCR
;

380 
__IOM
 
uöt32_t
 
SCR
;

381 
__IOM
 
uöt32_t
 
CCR
;

382 
__IOM
 
uöt8_t
 
SHP
[12U];

383 
__IOM
 
uöt32_t
 
SHCSR
;

384 
__IOM
 
uöt32_t
 
CFSR
;

385 
__IOM
 
uöt32_t
 
HFSR
;

386 
__IOM
 
uöt32_t
 
DFSR
;

387 
__IOM
 
uöt32_t
 
MMFAR
;

388 
__IOM
 
uöt32_t
 
BFAR
;

389 
__IOM
 
uöt32_t
 
AFSR
;

390 
__IM
 
uöt32_t
 
PFR
[2U];

391 
__IM
 
uöt32_t
 
DFR
;

392 
__IM
 
uöt32_t
 
ADR
;

393 
__IM
 
uöt32_t
 
MMFR
[4U];

394 
__IM
 
uöt32_t
 
ISAR
[5U];

395 
uöt32_t
 
RESERVED0
[5U];

396 
__IOM
 
uöt32_t
 
CPACR
;

397 } 
	tSCB_Ty≥
;

400 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

401 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

403 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

404 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

406 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

407 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

409 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

410 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

412 
	#SCB_CPUID_REVISION_Pos
 0U

	)

413 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

416 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

417 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

419 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

420 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

422 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

423 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

425 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

426 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

428 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

429 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

431 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

432 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

434 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

435 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

437 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

438 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

440 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

441 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

443 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

444 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

447 #i‡
deföed
 (
__CM3_REV
) && (__CM3_REV < 0x0201U)

448 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

449 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

451 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

452 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

454 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

455 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

459 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

460 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

462 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

463 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

465 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

466 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

468 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

469 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

471 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

472 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

474 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

475 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

477 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

478 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

481 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

482 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

484 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

485 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

487 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

488 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

491 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

492 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

494 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

495 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

497 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

498 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

500 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

501 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

503 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

504 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

506 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

507 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

510 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

511 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

513 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

514 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

516 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

517 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

519 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

520 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

522 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

523 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

525 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

526 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

528 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

529 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

531 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

532 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

534 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

535 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

537 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

538 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

540 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

541 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

543 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

544 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

546 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

547 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

549 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

550 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

553 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

554 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

556 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

557 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

559 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

560 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

563 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

564 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

566 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

567 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

569 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

570 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

572 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

573 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

575 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

576 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

579 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

580 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

582 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

583 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

585 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

586 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

588 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

589 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

591 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

592 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

594 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

595 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

598 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

599 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

601 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

602 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

604 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

605 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

607 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

608 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

610 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

611 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

613 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

614 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

617 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

618 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

620 
	#SCB_HFSR_FORCED_Pos
 30U

	)

621 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

623 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

624 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

627 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

628 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

630 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

631 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

633 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

634 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

636 
	#SCB_DFSR_BKPT_Pos
 1U

	)

637 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

639 
	#SCB_DFSR_HALTED_Pos
 0U

	)

640 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

657 
uöt32_t
 
RESERVED0
[1U];

658 
__IM
 
uöt32_t
 
ICTR
;

659 #i‡
deföed
 (
__CM3_REV
) && (__CM3_REV >= 0x200U)

660 
__IOM
 
uöt32_t
 
ACTLR
;

662 
uöt32_t
 
RESERVED1
[1U];

664 } 
	tSCnSCB_Ty≥
;

667 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

668 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

672 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

673 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

675 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

676 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

678 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

679 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

696 
__IOM
 
uöt32_t
 
CTRL
;

697 
__IOM
 
uöt32_t
 
LOAD
;

698 
__IOM
 
uöt32_t
 
VAL
;

699 
__IM
 
uöt32_t
 
CALIB
;

700 } 
	tSysTick_Ty≥
;

703 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

704 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

706 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

707 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

709 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

710 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

712 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

713 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

716 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

717 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

720 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

721 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

724 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

725 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

727 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

728 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

730 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

731 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

748 
__OM
 union

750 
__OM
 
uöt8_t
 
u8
;

751 
__OM
 
uöt16_t
 
u16
;

752 
__OM
 
uöt32_t
 
u32
;

753 } 
PORT
 [32U];

754 
uöt32_t
 
RESERVED0
[864U];

755 
__IOM
 
uöt32_t
 
TER
;

756 
uöt32_t
 
RESERVED1
[15U];

757 
__IOM
 
uöt32_t
 
TPR
;

758 
uöt32_t
 
RESERVED2
[15U];

759 
__IOM
 
uöt32_t
 
TCR
;

760 
uöt32_t
 
RESERVED3
[29U];

761 
__OM
 
uöt32_t
 
IWR
;

762 
__IM
 
uöt32_t
 
IRR
;

763 
__IOM
 
uöt32_t
 
IMCR
;

764 
uöt32_t
 
RESERVED4
[43U];

765 
__OM
 
uöt32_t
 
LAR
;

766 
__IM
 
uöt32_t
 
LSR
;

767 
uöt32_t
 
RESERVED5
[6U];

768 
__IM
 
uöt32_t
 
PID4
;

769 
__IM
 
uöt32_t
 
PID5
;

770 
__IM
 
uöt32_t
 
PID6
;

771 
__IM
 
uöt32_t
 
PID7
;

772 
__IM
 
uöt32_t
 
PID0
;

773 
__IM
 
uöt32_t
 
PID1
;

774 
__IM
 
uöt32_t
 
PID2
;

775 
__IM
 
uöt32_t
 
PID3
;

776 
__IM
 
uöt32_t
 
CID0
;

777 
__IM
 
uöt32_t
 
CID1
;

778 
__IM
 
uöt32_t
 
CID2
;

779 
__IM
 
uöt32_t
 
CID3
;

780 } 
	tITM_Ty≥
;

783 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

784 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

787 
	#ITM_TCR_BUSY_Pos
 23U

	)

788 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

790 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

791 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

793 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

794 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

796 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

797 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

799 
	#ITM_TCR_SWOENA_Pos
 4U

	)

800 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

802 
	#ITM_TCR_DWTENA_Pos
 3U

	)

803 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

805 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

806 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

808 
	#ITM_TCR_TSENA_Pos
 1U

	)

809 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

811 
	#ITM_TCR_ITMENA_Pos
 0U

	)

812 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

815 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

816 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

819 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

820 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

823 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

824 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

827 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

828 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

830 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

831 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

833 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

834 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

851 
__IOM
 
uöt32_t
 
CTRL
;

852 
__IOM
 
uöt32_t
 
CYCCNT
;

853 
__IOM
 
uöt32_t
 
CPICNT
;

854 
__IOM
 
uöt32_t
 
EXCCNT
;

855 
__IOM
 
uöt32_t
 
SLEEPCNT
;

856 
__IOM
 
uöt32_t
 
LSUCNT
;

857 
__IOM
 
uöt32_t
 
FOLDCNT
;

858 
__IM
 
uöt32_t
 
PCSR
;

859 
__IOM
 
uöt32_t
 
COMP0
;

860 
__IOM
 
uöt32_t
 
MASK0
;

861 
__IOM
 
uöt32_t
 
FUNCTION0
;

862 
uöt32_t
 
RESERVED0
[1U];

863 
__IOM
 
uöt32_t
 
COMP1
;

864 
__IOM
 
uöt32_t
 
MASK1
;

865 
__IOM
 
uöt32_t
 
FUNCTION1
;

866 
uöt32_t
 
RESERVED1
[1U];

867 
__IOM
 
uöt32_t
 
COMP2
;

868 
__IOM
 
uöt32_t
 
MASK2
;

869 
__IOM
 
uöt32_t
 
FUNCTION2
;

870 
uöt32_t
 
RESERVED2
[1U];

871 
__IOM
 
uöt32_t
 
COMP3
;

872 
__IOM
 
uöt32_t
 
MASK3
;

873 
__IOM
 
uöt32_t
 
FUNCTION3
;

874 } 
	tDWT_Ty≥
;

877 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

878 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

880 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

881 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

883 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

884 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

886 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

887 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

889 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

890 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

892 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

893 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

895 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

896 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

898 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

899 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

901 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

902 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

904 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

905 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

907 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

908 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

910 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

911 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

913 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

914 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

916 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

917 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

919 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

920 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

922 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

923 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

925 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

926 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

928 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

929 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

932 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

933 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

936 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

937 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

940 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

941 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

944 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

945 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

948 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

949 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

952 
	#DWT_MASK_MASK_Pos
 0U

	)

953 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

956 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

957 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

959 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

960 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

962 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

963 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

965 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

966 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

968 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

969 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

971 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

972 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

974 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

975 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

977 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

978 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

980 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

981 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

998 
__IM
 
uöt32_t
 
SSPSR
;

999 
__IOM
 
uöt32_t
 
CSPSR
;

1000 
uöt32_t
 
RESERVED0
[2U];

1001 
__IOM
 
uöt32_t
 
ACPR
;

1002 
uöt32_t
 
RESERVED1
[55U];

1003 
__IOM
 
uöt32_t
 
SPPR
;

1004 
uöt32_t
 
RESERVED2
[131U];

1005 
__IM
 
uöt32_t
 
FFSR
;

1006 
__IOM
 
uöt32_t
 
FFCR
;

1007 
__IM
 
uöt32_t
 
FSCR
;

1008 
uöt32_t
 
RESERVED3
[759U];

1009 
__IM
 
uöt32_t
 
TRIGGER
;

1010 
__IM
 
uöt32_t
 
FIFO0
;

1011 
__IM
 
uöt32_t
 
ITATBCTR2
;

1012 
uöt32_t
 
RESERVED4
[1U];

1013 
__IM
 
uöt32_t
 
ITATBCTR0
;

1014 
__IM
 
uöt32_t
 
FIFO1
;

1015 
__IOM
 
uöt32_t
 
ITCTRL
;

1016 
uöt32_t
 
RESERVED5
[39U];

1017 
__IOM
 
uöt32_t
 
CLAIMSET
;

1018 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1019 
uöt32_t
 
RESERVED7
[8U];

1020 
__IM
 
uöt32_t
 
DEVID
;

1021 
__IM
 
uöt32_t
 
DEVTYPE
;

1022 } 
	tTPI_Ty≥
;

1025 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1026 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1029 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1030 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1033 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1034 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1036 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1037 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1039 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1040 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1042 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1043 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1046 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1047 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1049 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1050 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1053 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1054 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1057 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1058 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1060 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1061 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1063 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1064 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1066 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1067 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1069 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1070 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1072 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1073 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1075 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1076 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1079 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1080 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1082 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1083 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1086 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1087 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1089 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1090 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1092 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1093 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1095 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1096 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1098 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1099 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1101 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1102 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1104 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1105 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1108 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1109 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1111 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1112 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1115 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1116 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1119 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1120 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1122 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1123 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1125 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1126 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1128 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1129 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1131 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1132 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1134 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1135 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1138 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1139 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1141 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1142 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1147 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1160 
__IM
 
uöt32_t
 
TYPE
;

1161 
__IOM
 
uöt32_t
 
CTRL
;

1162 
__IOM
 
uöt32_t
 
RNR
;

1163 
__IOM
 
uöt32_t
 
RBAR
;

1164 
__IOM
 
uöt32_t
 
RASR
;

1165 
__IOM
 
uöt32_t
 
RBAR_A1
;

1166 
__IOM
 
uöt32_t
 
RASR_A1
;

1167 
__IOM
 
uöt32_t
 
RBAR_A2
;

1168 
__IOM
 
uöt32_t
 
RASR_A2
;

1169 
__IOM
 
uöt32_t
 
RBAR_A3
;

1170 
__IOM
 
uöt32_t
 
RASR_A3
;

1171 } 
	tMPU_Ty≥
;

1173 
	#MPU_TYPE_RALIASES
 4U

	)

1176 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1177 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1179 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1180 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1182 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1183 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1186 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1187 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1189 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1190 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1192 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1193 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1196 
	#MPU_RNR_REGION_Pos
 0U

	)

1197 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1200 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1201 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1203 
	#MPU_RBAR_VALID_Pos
 4U

	)

1204 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1206 
	#MPU_RBAR_REGION_Pos
 0U

	)

1207 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1210 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1211 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1213 
	#MPU_RASR_XN_Pos
 28U

	)

1214 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1216 
	#MPU_RASR_AP_Pos
 24U

	)

1217 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1219 
	#MPU_RASR_TEX_Pos
 19U

	)

1220 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1222 
	#MPU_RASR_S_Pos
 18U

	)

1223 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1225 
	#MPU_RASR_C_Pos
 17U

	)

1226 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1228 
	#MPU_RASR_B_Pos
 16U

	)

1229 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1231 
	#MPU_RASR_SRD_Pos
 8U

	)

1232 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1234 
	#MPU_RASR_SIZE_Pos
 1U

	)

1235 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1237 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1238 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1256 
__IOM
 
uöt32_t
 
DHCSR
;

1257 
__OM
 
uöt32_t
 
DCRSR
;

1258 
__IOM
 
uöt32_t
 
DCRDR
;

1259 
__IOM
 
uöt32_t
 
DEMCR
;

1260 } 
	tC‹eDebug_Ty≥
;

1263 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1264 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1266 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1267 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1269 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1270 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1272 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1273 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1275 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1276 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1278 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1279 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1281 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1282 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1284 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1285 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1287 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1288 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1290 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1291 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1293 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1294 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1296 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1297 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1300 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1301 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1303 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1304 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1307 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1308 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1310 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1311 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1313 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1314 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1316 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1317 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1319 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1320 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1322 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1323 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1325 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1326 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1328 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1329 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1331 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1332 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1334 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1335 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1337 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1338 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1340 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1341 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1343 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1344 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1362 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1370 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1383 
	#SCS_BASE
 (0xE000E000ULË

	)

1384 
	#ITM_BASE
 (0xE0000000ULË

	)

1385 
	#DWT_BASE
 (0xE0001000ULË

	)

1386 
	#TPI_BASE
 (0xE0040000ULË

	)

1387 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1388 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1389 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1390 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1392 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1393 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1394 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1395 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1396 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1397 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1398 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1399 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1401 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1402 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1403 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1432 #ifde‡
CMSIS_NVIC_VIRTUAL


1433 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1434 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1436 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1438 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1439 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1440 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1441 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1442 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1443 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1444 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1445 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1446 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1447 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1448 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1449 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1452 #ifde‡
CMSIS_VECTAB_VIRTUAL


1453 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1454 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1456 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1458 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1459 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1462 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1466 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1467 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1468 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1480 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1482 
uöt32_t
 
ªg_vÆue
;

1483 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1485 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1486 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1487 
ªg_vÆue
 = (reg_value |

1488 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1489 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1490 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1499 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1501  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1511 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1513 i‡((
öt32_t
)(
IRQn
) >= 0)

1515 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1528 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1530 i‡((
öt32_t
)(
IRQn
) >= 0)

1532 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1547 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) >= 0)

1551 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1552 
__DSB
();

1553 
__ISB
();

1566 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1568 i‡((
öt32_t
)(
IRQn
) >= 0)

1570 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1585 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1587 i‡((
öt32_t
)(
IRQn
) >= 0)

1589 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1600 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1602 i‡((
öt32_t
)(
IRQn
) >= 0)

1604 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1617 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1619 i‡((
öt32_t
)(
IRQn
) >= 0)

1621 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1639 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1641 i‡((
öt32_t
)(
IRQn
) >= 0)

1643 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1647 
SCB
->
SHP
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1661 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1664 i‡((
öt32_t
)(
IRQn
) >= 0)

1666 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1670 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1686 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1688 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1689 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1690 
uöt32_t
 
SubPri‹ôyBôs
;

1692 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1693 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1696 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1697 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1713 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1715 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1716 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1717 
uöt32_t
 
SubPri‹ôyBôs
;

1719 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1720 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1722 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1723 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1736 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1738 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1739 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1751 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1753 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1754  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1762 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1764 
__DSB
();

1766 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1767 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1768 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1769 
__DSB
();

1773 
__NOP
();

1781 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1783 
	~"mpu_¨mv7.h
"

1803 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1821 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1834 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1836 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1841 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1842 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1843 
SysTick
->
VAL
 = 0UL;

1844 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1845 
SysTick_CTRL_TICKINT_Msk
 |

1846 
SysTick_CTRL_ENABLE_Msk
;

1864 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1865 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

1876 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1878 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1879 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1881 
ITM
->
PORT
[0U].
u32
 == 0UL)

1883 
__NOP
();

1885 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1887  (
	gch
);

1897 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1899 
öt32_t
 
	gch
 = -1;

1901 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1903 
ch
 = 
ITM_RxBuf„r
;

1904 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1907  (
	gch
);

1917 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1920 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1935 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm33.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM33_H_GENERIC


32 
	#__CORE_CM33_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM33_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM33_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM33_CMSIS_VERSION
 ((
__CM33_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM33_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (33UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 (
__TARGET_FPU_VFP
)

78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

89 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

90 
	#__DSP_USED
 1U

	)

93 
	#__DSP_USED
 0U

	)

96 
	#__DSP_USED
 0U

	)

99 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

100 #i‡
deföed
 (
__ARM_PCS_VFP
)

101 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

102 
	#__FPU_USED
 1U

	)

105 
	#__FPU_USED
 0U

	)

108 
	#__FPU_USED
 0U

	)

111 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

112 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

113 
	#__DSP_USED
 1U

	)

116 
	#__DSP_USED
 0U

	)

119 
	#__DSP_USED
 0U

	)

122 #ñi‡
deföed
 ( 
__GNUC__
 )

123 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

124 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

125 
	#__FPU_USED
 1U

	)

128 
	#__FPU_USED
 0U

	)

131 
	#__FPU_USED
 0U

	)

134 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

135 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

136 
	#__DSP_USED
 1U

	)

139 
	#__DSP_USED
 0U

	)

142 
	#__DSP_USED
 0U

	)

145 #ñi‡
deföed
 ( 
__ICCARM__
 )

146 #i‡
deföed
 (
__ARMVFP__
)

147 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

148 
	#__FPU_USED
 1U

	)

151 
	#__FPU_USED
 0U

	)

154 
	#__FPU_USED
 0U

	)

157 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

158 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

159 
	#__DSP_USED
 1U

	)

162 
	#__DSP_USED
 0U

	)

165 
	#__DSP_USED
 0U

	)

168 #ñi‡
deföed
 ( 
__TI_ARM__
 )

169 #i‡
deföed
 (
__TI_VFP_SUPPORT__
)

170 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

171 
	#__FPU_USED
 1U

	)

174 
	#__FPU_USED
 0U

	)

177 
	#__FPU_USED
 0U

	)

180 #ñi‡
deföed
 ( 
__TASKING__
 )

181 #i‡
deföed
 (
__FPU_VFP__
)

182 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

183 
	#__FPU_USED
 1U

	)

186 
	#__FPU_USED
 0U

	)

189 
	#__FPU_USED
 0U

	)

192 #ñi‡
deföed
 ( 
__CSMC__
 )

193 #i‡–
__CSMC__
 & 0x400U)

194 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

195 
	#__FPU_USED
 1U

	)

198 
	#__FPU_USED
 0U

	)

201 
	#__FPU_USED
 0U

	)

206 
	~"cmsis_compûî.h
"

209 #ifde‡
__˝lu•lus


215 #i‚de‡
__CMSIS_GENERIC


217 #i‚de‡
__CORE_CM33_H_DEPENDANT


218 
	#__CORE_CM33_H_DEPENDANT


	)

220 #ifde‡
__˝lu•lus


225 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


226 #i‚de‡
__CM33_REV


227 
	#__CM33_REV
 0x0000U

	)

231 #i‚de‡
__FPU_PRESENT


232 
	#__FPU_PRESENT
 0U

	)

236 #i‚de‡
__MPU_PRESENT


237 
	#__MPU_PRESENT
 0U

	)

241 #i‚de‡
__SAUREGION_PRESENT


242 
	#__SAUREGION_PRESENT
 0U

	)

246 #i‚de‡
__DSP_PRESENT


247 
	#__DSP_PRESENT
 0U

	)

251 #i‚de‡
__NVIC_PRIO_BITS


252 
	#__NVIC_PRIO_BITS
 3U

	)

256 #i‚de‡
__Víd‹_SysTickC⁄fig


257 
	#__Víd‹_SysTickC⁄fig
 0U

	)

270 #ifde‡
__˝lu•lus


271 
	#__I
 vﬁ©ûê

	)

273 
	#__I
 vﬁ©ûêc⁄°

	)

275 
	#__O
 vﬁ©ûê

	)

276 
	#__IO
 vﬁ©ûê

	)

279 
	#__IM
 vﬁ©ûêc⁄°

	)

280 
	#__OM
 vﬁ©ûê

	)

281 
	#__IOM
 vﬁ©ûê

	)

318 
uöt32_t
 
_ª£rved0
:16;

319 
uöt32_t
 
GE
:4;

320 
uöt32_t
 
_ª£rved1
:7;

321 
uöt32_t
 
Q
:1;

322 
uöt32_t
 
V
:1;

323 
uöt32_t
 
C
:1;

324 
uöt32_t
 
Z
:1;

325 
uöt32_t
 
N
:1;

326 } 
b
;

327 
uöt32_t
 
w
;

328 } 
	tAPSR_Ty≥
;

331 
	#APSR_N_Pos
 31U

	)

332 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

334 
	#APSR_Z_Pos
 30U

	)

335 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

337 
	#APSR_C_Pos
 29U

	)

338 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

340 
	#APSR_V_Pos
 28U

	)

341 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

343 
	#APSR_Q_Pos
 27U

	)

344 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

346 
	#APSR_GE_Pos
 16U

	)

347 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

357 
uöt32_t
 
ISR
:9;

358 
uöt32_t
 
_ª£rved0
:23;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tIPSR_Ty≥
;

364 
	#IPSR_ISR_Pos
 0U

	)

365 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
ISR
:9;

376 
uöt32_t
 
_ª£rved0
:7;

377 
uöt32_t
 
GE
:4;

378 
uöt32_t
 
_ª£rved1
:4;

379 
uöt32_t
 
T
:1;

380 
uöt32_t
 
IT
:2;

381 
uöt32_t
 
Q
:1;

382 
uöt32_t
 
V
:1;

383 
uöt32_t
 
C
:1;

384 
uöt32_t
 
Z
:1;

385 
uöt32_t
 
N
:1;

386 } 
b
;

387 
uöt32_t
 
w
;

388 } 
	txPSR_Ty≥
;

391 
	#xPSR_N_Pos
 31U

	)

392 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

394 
	#xPSR_Z_Pos
 30U

	)

395 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

397 
	#xPSR_C_Pos
 29U

	)

398 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

400 
	#xPSR_V_Pos
 28U

	)

401 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

403 
	#xPSR_Q_Pos
 27U

	)

404 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

406 
	#xPSR_IT_Pos
 25U

	)

407 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

409 
	#xPSR_T_Pos
 24U

	)

410 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

412 
	#xPSR_GE_Pos
 16U

	)

413 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

415 
	#xPSR_ISR_Pos
 0U

	)

416 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

426 
uöt32_t
 
nPRIV
:1;

427 
uöt32_t
 
SPSEL
:1;

428 
uöt32_t
 
FPCA
:1;

429 
uöt32_t
 
SFPA
:1;

430 
uöt32_t
 
_ª£rved1
:28;

431 } 
b
;

432 
uöt32_t
 
w
;

433 } 
	tCONTROL_Ty≥
;

436 
	#CONTROL_SFPA_Pos
 3U

	)

437 
	#CONTROL_SFPA_Msk
 (1UL << 
CONTROL_SFPA_Pos
Ë

	)

439 
	#CONTROL_FPCA_Pos
 2U

	)

440 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

442 
	#CONTROL_SPSEL_Pos
 1U

	)

443 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

445 
	#CONTROL_nPRIV_Pos
 0U

	)

446 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

463 
__IOM
 
uöt32_t
 
ISER
[16U];

464 
uöt32_t
 
RESERVED0
[16U];

465 
__IOM
 
uöt32_t
 
ICER
[16U];

466 
uöt32_t
 
RSERVED1
[16U];

467 
__IOM
 
uöt32_t
 
ISPR
[16U];

468 
uöt32_t
 
RESERVED2
[16U];

469 
__IOM
 
uöt32_t
 
ICPR
[16U];

470 
uöt32_t
 
RESERVED3
[16U];

471 
__IOM
 
uöt32_t
 
IABR
[16U];

472 
uöt32_t
 
RESERVED4
[16U];

473 
__IOM
 
uöt32_t
 
ITNS
[16U];

474 
uöt32_t
 
RESERVED5
[16U];

475 
__IOM
 
uöt8_t
 
IPR
[496U];

476 
uöt32_t
 
RESERVED6
[580U];

477 
__OM
 
uöt32_t
 
STIR
;

478 } 
	tNVIC_Ty≥
;

481 
	#NVIC_STIR_INTID_Pos
 0U

	)

482 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

499 
__IM
 
uöt32_t
 
CPUID
;

500 
__IOM
 
uöt32_t
 
ICSR
;

501 
__IOM
 
uöt32_t
 
VTOR
;

502 
__IOM
 
uöt32_t
 
AIRCR
;

503 
__IOM
 
uöt32_t
 
SCR
;

504 
__IOM
 
uöt32_t
 
CCR
;

505 
__IOM
 
uöt8_t
 
SHPR
[12U];

506 
__IOM
 
uöt32_t
 
SHCSR
;

507 
__IOM
 
uöt32_t
 
CFSR
;

508 
__IOM
 
uöt32_t
 
HFSR
;

509 
__IOM
 
uöt32_t
 
DFSR
;

510 
__IOM
 
uöt32_t
 
MMFAR
;

511 
__IOM
 
uöt32_t
 
BFAR
;

512 
__IOM
 
uöt32_t
 
AFSR
;

513 
__IM
 
uöt32_t
 
ID_PFR
[2U];

514 
__IM
 
uöt32_t
 
ID_DFR
;

515 
__IM
 
uöt32_t
 
ID_ADR
;

516 
__IM
 
uöt32_t
 
ID_MMFR
[4U];

517 
__IM
 
uöt32_t
 
ID_ISAR
[6U];

518 
__IM
 
uöt32_t
 
CLIDR
;

519 
__IM
 
uöt32_t
 
CTR
;

520 
__IM
 
uöt32_t
 
CCSIDR
;

521 
__IOM
 
uöt32_t
 
CSSELR
;

522 
__IOM
 
uöt32_t
 
CPACR
;

523 
__IOM
 
uöt32_t
 
NSACR
;

524 
uöt32_t
 
RESERVED3
[92U];

525 
__OM
 
uöt32_t
 
STIR
;

526 
uöt32_t
 
RESERVED4
[15U];

527 
__IM
 
uöt32_t
 
MVFR0
;

528 
__IM
 
uöt32_t
 
MVFR1
;

529 
__IM
 
uöt32_t
 
MVFR2
;

530 
uöt32_t
 
RESERVED5
[1U];

531 
__OM
 
uöt32_t
 
ICIALLU
;

532 
uöt32_t
 
RESERVED6
[1U];

533 
__OM
 
uöt32_t
 
ICIMVAU
;

534 
__OM
 
uöt32_t
 
DCIMVAC
;

535 
__OM
 
uöt32_t
 
DCISW
;

536 
__OM
 
uöt32_t
 
DCCMVAU
;

537 
__OM
 
uöt32_t
 
DCCMVAC
;

538 
__OM
 
uöt32_t
 
DCCSW
;

539 
__OM
 
uöt32_t
 
DCCIMVAC
;

540 
__OM
 
uöt32_t
 
DCCISW
;

541 
uöt32_t
 
RESERVED7
[6U];

542 
__IOM
 
uöt32_t
 
ITCMCR
;

543 
__IOM
 
uöt32_t
 
DTCMCR
;

544 
__IOM
 
uöt32_t
 
AHBPCR
;

545 
__IOM
 
uöt32_t
 
CACR
;

546 
__IOM
 
uöt32_t
 
AHBSCR
;

547 
uöt32_t
 
RESERVED8
[1U];

548 
__IOM
 
uöt32_t
 
ABFSR
;

549 } 
	tSCB_Ty≥
;

552 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

553 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

555 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

556 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

558 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

559 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

561 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

562 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

564 
	#SCB_CPUID_REVISION_Pos
 0U

	)

565 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

568 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

569 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

571 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

572 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

574 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

575 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

577 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

578 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

580 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

581 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

583 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

584 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

586 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

587 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

589 
	#SCB_ICSR_STTNS_Pos
 24U

	)

590 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

592 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

593 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

595 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

596 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

598 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

599 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

601 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

602 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

604 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

605 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

608 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

609 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

612 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

613 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

615 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

616 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

618 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

619 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

621 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

622 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

624 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

625 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

627 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

628 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

630 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

631 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

633 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

634 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

636 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

637 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

640 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

641 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

643 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

644 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

646 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

647 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

649 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

650 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

653 
	#SCB_CCR_BP_Pos
 18U

	)

654 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

656 
	#SCB_CCR_IC_Pos
 17U

	)

657 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

659 
	#SCB_CCR_DC_Pos
 16U

	)

660 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

662 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

663 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

665 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

666 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

668 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

669 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

671 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

672 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

674 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

675 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

678 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

679 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

681 
	#SCB_SHCSR_SECUREFAULTPENDED_Pos
 20U

	)

682 
	#SCB_SHCSR_SECUREFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTPENDED_Pos
Ë

	)

684 
	#SCB_SHCSR_SECUREFAULTENA_Pos
 19U

	)

685 
	#SCB_SHCSR_SECUREFAULTENA_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTENA_Pos
Ë

	)

687 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

688 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

690 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

691 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

693 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

694 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

696 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

697 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

699 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

700 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

702 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

703 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

705 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

706 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

708 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

709 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

711 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

712 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

714 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

715 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

717 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

718 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

720 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

721 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

723 
	#SCB_SHCSR_SECUREFAULTACT_Pos
 4U

	)

724 
	#SCB_SHCSR_SECUREFAULTACT_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTACT_Pos
Ë

	)

726 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

727 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

729 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

730 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

732 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

733 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

735 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

736 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

739 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

740 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

742 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

743 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

745 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

746 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

749 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

750 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

752 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

753 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

755 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

756 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

758 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

759 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

761 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

762 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

764 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

765 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

768 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

769 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

771 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

772 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

774 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

775 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

777 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

778 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

780 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

781 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

783 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

784 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

786 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

787 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

790 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

791 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

793 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

794 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

796 
	#SCB_CFSR_STKOF_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 4UË

	)

797 
	#SCB_CFSR_STKOF_Msk
 (1UL << 
SCB_CFSR_STKOF_Pos
Ë

	)

799 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

800 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

802 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

803 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

805 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

806 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

808 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

809 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

812 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

813 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

815 
	#SCB_HFSR_FORCED_Pos
 30U

	)

816 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

818 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

819 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

822 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

823 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

825 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

826 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

828 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

829 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

831 
	#SCB_DFSR_BKPT_Pos
 1U

	)

832 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

834 
	#SCB_DFSR_HALTED_Pos
 0U

	)

835 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

838 
	#SCB_NSACR_CP11_Pos
 11U

	)

839 
	#SCB_NSACR_CP11_Msk
 (1UL << 
SCB_NSACR_CP11_Pos
Ë

	)

841 
	#SCB_NSACR_CP10_Pos
 10U

	)

842 
	#SCB_NSACR_CP10_Msk
 (1UL << 
SCB_NSACR_CP10_Pos
Ë

	)

844 
	#SCB_NSACR_CPn_Pos
 0U

	)

845 
	#SCB_NSACR_CPn_Msk
 (1UL )

	)

848 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

849 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

851 
	#SCB_CLIDR_LOC_Pos
 24U

	)

852 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

855 
	#SCB_CTR_FORMAT_Pos
 29U

	)

856 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

858 
	#SCB_CTR_CWG_Pos
 24U

	)

859 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

861 
	#SCB_CTR_ERG_Pos
 20U

	)

862 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

864 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

865 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

867 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

868 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

871 
	#SCB_CCSIDR_WT_Pos
 31U

	)

872 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

874 
	#SCB_CCSIDR_WB_Pos
 30U

	)

875 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

877 
	#SCB_CCSIDR_RA_Pos
 29U

	)

878 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

880 
	#SCB_CCSIDR_WA_Pos
 28U

	)

881 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

883 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

884 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

886 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

887 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

889 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

890 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

893 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

894 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

896 
	#SCB_CSSELR_IND_Pos
 0U

	)

897 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

900 
	#SCB_STIR_INTID_Pos
 0U

	)

901 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

904 
	#SCB_DCISW_WAY_Pos
 30U

	)

905 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

907 
	#SCB_DCISW_SET_Pos
 5U

	)

908 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

911 
	#SCB_DCCSW_WAY_Pos
 30U

	)

912 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

914 
	#SCB_DCCSW_SET_Pos
 5U

	)

915 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

918 
	#SCB_DCCISW_WAY_Pos
 30U

	)

919 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

921 
	#SCB_DCCISW_SET_Pos
 5U

	)

922 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

925 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

926 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

928 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

929 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

931 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

932 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

934 
	#SCB_ITCMCR_EN_Pos
 0U

	)

935 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

938 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

939 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

941 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

942 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

944 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

945 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

947 
	#SCB_DTCMCR_EN_Pos
 0U

	)

948 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

951 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

952 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

954 
	#SCB_AHBPCR_EN_Pos
 0U

	)

955 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

958 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

959 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

961 
	#SCB_CACR_ECCEN_Pos
 1U

	)

962 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

964 
	#SCB_CACR_SIWT_Pos
 0U

	)

965 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

968 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

969 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

971 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

972 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

974 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

975 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

978 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

979 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

981 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

982 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

984 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

985 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

987 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

988 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

990 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

991 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

993 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

994 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

1011 
uöt32_t
 
RESERVED0
[1U];

1012 
__IM
 
uöt32_t
 
ICTR
;

1013 
__IOM
 
uöt32_t
 
ACTLR
;

1014 
__IOM
 
uöt32_t
 
CPPWR
;

1015 } 
	tSCnSCB_Ty≥
;

1018 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

1019 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

1036 
__IOM
 
uöt32_t
 
CTRL
;

1037 
__IOM
 
uöt32_t
 
LOAD
;

1038 
__IOM
 
uöt32_t
 
VAL
;

1039 
__IM
 
uöt32_t
 
CALIB
;

1040 } 
	tSysTick_Ty≥
;

1043 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

1044 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

1046 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

1047 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

1049 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

1050 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

1052 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

1053 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

1056 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

1057 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

1060 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

1061 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

1064 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

1065 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

1067 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

1068 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

1070 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

1071 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1088 
__OM
 union

1090 
__OM
 
uöt8_t
 
u8
;

1091 
__OM
 
uöt16_t
 
u16
;

1092 
__OM
 
uöt32_t
 
u32
;

1093 } 
PORT
 [32U];

1094 
uöt32_t
 
RESERVED0
[864U];

1095 
__IOM
 
uöt32_t
 
TER
;

1096 
uöt32_t
 
RESERVED1
[15U];

1097 
__IOM
 
uöt32_t
 
TPR
;

1098 
uöt32_t
 
RESERVED2
[15U];

1099 
__IOM
 
uöt32_t
 
TCR
;

1100 
uöt32_t
 
RESERVED3
[29U];

1101 
__OM
 
uöt32_t
 
IWR
;

1102 
__IM
 
uöt32_t
 
IRR
;

1103 
__IOM
 
uöt32_t
 
IMCR
;

1104 
uöt32_t
 
RESERVED4
[43U];

1105 
__OM
 
uöt32_t
 
LAR
;

1106 
__IM
 
uöt32_t
 
LSR
;

1107 
uöt32_t
 
RESERVED5
[1U];

1108 
__IM
 
uöt32_t
 
DEVARCH
;

1109 
uöt32_t
 
RESERVED6
[4U];

1110 
__IM
 
uöt32_t
 
PID4
;

1111 
__IM
 
uöt32_t
 
PID5
;

1112 
__IM
 
uöt32_t
 
PID6
;

1113 
__IM
 
uöt32_t
 
PID7
;

1114 
__IM
 
uöt32_t
 
PID0
;

1115 
__IM
 
uöt32_t
 
PID1
;

1116 
__IM
 
uöt32_t
 
PID2
;

1117 
__IM
 
uöt32_t
 
PID3
;

1118 
__IM
 
uöt32_t
 
CID0
;

1119 
__IM
 
uöt32_t
 
CID1
;

1120 
__IM
 
uöt32_t
 
CID2
;

1121 
__IM
 
uöt32_t
 
CID3
;

1122 } 
	tITM_Ty≥
;

1125 
	#ITM_STIM_DISABLED_Pos
 1U

	)

1126 
	#ITM_STIM_DISABLED_Msk
 (0x1UL << 
ITM_STIM_DISABLED_Pos
Ë

	)

1128 
	#ITM_STIM_FIFOREADY_Pos
 0U

	)

1129 
	#ITM_STIM_FIFOREADY_Msk
 (0x1UL )

	)

1132 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1133 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

1136 
	#ITM_TCR_BUSY_Pos
 23U

	)

1137 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1139 
	#ITM_TCR_TRACEBUSID_Pos
 16U

	)

1140 
	#ITM_TCR_TRACEBUSID_Msk
 (0x7FUL << 
ITM_TCR_TRACEBUSID_Pos
Ë

	)

1142 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1143 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1145 
	#ITM_TCR_TSPRESCALE_Pos
 8U

	)

1146 
	#ITM_TCR_TSPRESCALE_Msk
 (3UL << 
ITM_TCR_TSPRESCALE_Pos
Ë

	)

1148 
	#ITM_TCR_STALLENA_Pos
 5U

	)

1149 
	#ITM_TCR_STALLENA_Msk
 (1UL << 
ITM_TCR_STALLENA_Pos
Ë

	)

1151 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1152 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1154 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1155 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1157 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1158 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1160 
	#ITM_TCR_TSENA_Pos
 1U

	)

1161 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1163 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1164 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1167 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1168 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1171 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1172 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1175 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1176 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1179 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1180 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1182 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1183 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1185 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1186 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1203 
__IOM
 
uöt32_t
 
CTRL
;

1204 
__IOM
 
uöt32_t
 
CYCCNT
;

1205 
__IOM
 
uöt32_t
 
CPICNT
;

1206 
__IOM
 
uöt32_t
 
EXCCNT
;

1207 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1208 
__IOM
 
uöt32_t
 
LSUCNT
;

1209 
__IOM
 
uöt32_t
 
FOLDCNT
;

1210 
__IM
 
uöt32_t
 
PCSR
;

1211 
__IOM
 
uöt32_t
 
COMP0
;

1212 
uöt32_t
 
RESERVED1
[1U];

1213 
__IOM
 
uöt32_t
 
FUNCTION0
;

1214 
uöt32_t
 
RESERVED2
[1U];

1215 
__IOM
 
uöt32_t
 
COMP1
;

1216 
uöt32_t
 
RESERVED3
[1U];

1217 
__IOM
 
uöt32_t
 
FUNCTION1
;

1218 
uöt32_t
 
RESERVED4
[1U];

1219 
__IOM
 
uöt32_t
 
COMP2
;

1220 
uöt32_t
 
RESERVED5
[1U];

1221 
__IOM
 
uöt32_t
 
FUNCTION2
;

1222 
uöt32_t
 
RESERVED6
[1U];

1223 
__IOM
 
uöt32_t
 
COMP3
;

1224 
uöt32_t
 
RESERVED7
[1U];

1225 
__IOM
 
uöt32_t
 
FUNCTION3
;

1226 
uöt32_t
 
RESERVED8
[1U];

1227 
__IOM
 
uöt32_t
 
COMP4
;

1228 
uöt32_t
 
RESERVED9
[1U];

1229 
__IOM
 
uöt32_t
 
FUNCTION4
;

1230 
uöt32_t
 
RESERVED10
[1U];

1231 
__IOM
 
uöt32_t
 
COMP5
;

1232 
uöt32_t
 
RESERVED11
[1U];

1233 
__IOM
 
uöt32_t
 
FUNCTION5
;

1234 
uöt32_t
 
RESERVED12
[1U];

1235 
__IOM
 
uöt32_t
 
COMP6
;

1236 
uöt32_t
 
RESERVED13
[1U];

1237 
__IOM
 
uöt32_t
 
FUNCTION6
;

1238 
uöt32_t
 
RESERVED14
[1U];

1239 
__IOM
 
uöt32_t
 
COMP7
;

1240 
uöt32_t
 
RESERVED15
[1U];

1241 
__IOM
 
uöt32_t
 
FUNCTION7
;

1242 
uöt32_t
 
RESERVED16
[1U];

1243 
__IOM
 
uöt32_t
 
COMP8
;

1244 
uöt32_t
 
RESERVED17
[1U];

1245 
__IOM
 
uöt32_t
 
FUNCTION8
;

1246 
uöt32_t
 
RESERVED18
[1U];

1247 
__IOM
 
uöt32_t
 
COMP9
;

1248 
uöt32_t
 
RESERVED19
[1U];

1249 
__IOM
 
uöt32_t
 
FUNCTION9
;

1250 
uöt32_t
 
RESERVED20
[1U];

1251 
__IOM
 
uöt32_t
 
COMP10
;

1252 
uöt32_t
 
RESERVED21
[1U];

1253 
__IOM
 
uöt32_t
 
FUNCTION10
;

1254 
uöt32_t
 
RESERVED22
[1U];

1255 
__IOM
 
uöt32_t
 
COMP11
;

1256 
uöt32_t
 
RESERVED23
[1U];

1257 
__IOM
 
uöt32_t
 
FUNCTION11
;

1258 
uöt32_t
 
RESERVED24
[1U];

1259 
__IOM
 
uöt32_t
 
COMP12
;

1260 
uöt32_t
 
RESERVED25
[1U];

1261 
__IOM
 
uöt32_t
 
FUNCTION12
;

1262 
uöt32_t
 
RESERVED26
[1U];

1263 
__IOM
 
uöt32_t
 
COMP13
;

1264 
uöt32_t
 
RESERVED27
[1U];

1265 
__IOM
 
uöt32_t
 
FUNCTION13
;

1266 
uöt32_t
 
RESERVED28
[1U];

1267 
__IOM
 
uöt32_t
 
COMP14
;

1268 
uöt32_t
 
RESERVED29
[1U];

1269 
__IOM
 
uöt32_t
 
FUNCTION14
;

1270 
uöt32_t
 
RESERVED30
[1U];

1271 
__IOM
 
uöt32_t
 
COMP15
;

1272 
uöt32_t
 
RESERVED31
[1U];

1273 
__IOM
 
uöt32_t
 
FUNCTION15
;

1274 
uöt32_t
 
RESERVED32
[934U];

1275 
__IM
 
uöt32_t
 
LSR
;

1276 
uöt32_t
 
RESERVED33
[1U];

1277 
__IM
 
uöt32_t
 
DEVARCH
;

1278 } 
	tDWT_Ty≥
;

1281 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1282 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1284 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1285 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1287 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1288 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1290 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1291 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1293 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1294 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1296 
	#DWT_CTRL_CYCDISS_Pos
 23U

	)

1297 
	#DWT_CTRL_CYCDISS_Msk
 (0x1UL << 
DWT_CTRL_CYCDISS_Pos
Ë

	)

1299 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1300 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1302 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1303 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1305 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1306 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1308 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1309 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1311 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1312 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1314 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1315 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1317 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1318 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1320 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1321 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1323 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1324 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1326 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1327 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1329 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1330 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1332 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1333 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1335 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1336 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1339 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1340 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1343 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1344 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1347 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1348 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1351 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1352 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1355 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1356 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1359 
	#DWT_FUNCTION_ID_Pos
 27U

	)

1360 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

1362 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1363 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1365 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1366 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1368 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

1369 
	#DWT_FUNCTION_ACTION_Msk
 (0x1UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

1371 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

1372 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

1389 
__IM
 
uöt32_t
 
SSPSR
;

1390 
__IOM
 
uöt32_t
 
CSPSR
;

1391 
uöt32_t
 
RESERVED0
[2U];

1392 
__IOM
 
uöt32_t
 
ACPR
;

1393 
uöt32_t
 
RESERVED1
[55U];

1394 
__IOM
 
uöt32_t
 
SPPR
;

1395 
uöt32_t
 
RESERVED2
[131U];

1396 
__IM
 
uöt32_t
 
FFSR
;

1397 
__IOM
 
uöt32_t
 
FFCR
;

1398 
__IOM
 
uöt32_t
 
PSCR
;

1399 
uöt32_t
 
RESERVED3
[759U];

1400 
__IM
 
uöt32_t
 
TRIGGER
;

1401 
__IM
 
uöt32_t
 
ITFTTD0
;

1402 
__IOM
 
uöt32_t
 
ITATBCTR2
;

1403 
uöt32_t
 
RESERVED4
[1U];

1404 
__IM
 
uöt32_t
 
ITATBCTR0
;

1405 
__IM
 
uöt32_t
 
ITFTTD1
;

1406 
__IOM
 
uöt32_t
 
ITCTRL
;

1407 
uöt32_t
 
RESERVED5
[39U];

1408 
__IOM
 
uöt32_t
 
CLAIMSET
;

1409 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1410 
uöt32_t
 
RESERVED7
[8U];

1411 
__IM
 
uöt32_t
 
DEVID
;

1412 
__IM
 
uöt32_t
 
DEVTYPE
;

1413 } 
	tTPI_Ty≥
;

1416 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1417 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1420 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1421 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1424 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1425 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1427 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1428 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1430 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1431 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1433 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1434 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1437 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1438 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1440 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

1441 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

1443 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1444 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1447 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1448 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1451 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
 29U

	)

1452 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
Ë

	)

1454 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
 27U

	)

1455 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
Ë

	)

1457 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
 26U

	)

1458 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
Ë

	)

1460 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
 24U

	)

1461 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
Ë

	)

1463 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Pos
 16U

	)

1464 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

1466 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Pos
 8U

	)

1467 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

1469 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Pos
 0U

	)

1470 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Msk
 (0xFFUL )

	)

1473 
	#TPI_ITATBCTR2_AFVALID2S_Pos
 1U

	)

1474 
	#TPI_ITATBCTR2_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID2S_Pos
Ë

	)

1476 
	#TPI_ITATBCTR2_AFVALID1S_Pos
 1U

	)

1477 
	#TPI_ITATBCTR2_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID1S_Pos
Ë

	)

1479 
	#TPI_ITATBCTR2_ATREADY2S_Pos
 0U

	)

1480 
	#TPI_ITATBCTR2_ATREADY2S_Msk
 (0x1UL )

	)

1482 
	#TPI_ITATBCTR2_ATREADY1S_Pos
 0U

	)

1483 
	#TPI_ITATBCTR2_ATREADY1S_Msk
 (0x1UL )

	)

1486 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
 29U

	)

1487 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
Ë

	)

1489 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
 27U

	)

1490 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
Ë

	)

1492 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
 26U

	)

1493 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
Ë

	)

1495 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
 24U

	)

1496 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
Ë

	)

1498 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Pos
 16U

	)

1499 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

1501 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Pos
 8U

	)

1502 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

1504 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Pos
 0U

	)

1505 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Msk
 (0xFFUL )

	)

1508 
	#TPI_ITATBCTR0_AFVALID2S_Pos
 1U

	)

1509 
	#TPI_ITATBCTR0_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID2S_Pos
Ë

	)

1511 
	#TPI_ITATBCTR0_AFVALID1S_Pos
 1U

	)

1512 
	#TPI_ITATBCTR0_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID1S_Pos
Ë

	)

1514 
	#TPI_ITATBCTR0_ATREADY2S_Pos
 0U

	)

1515 
	#TPI_ITATBCTR0_ATREADY2S_Msk
 (0x1UL )

	)

1517 
	#TPI_ITATBCTR0_ATREADY1S_Pos
 0U

	)

1518 
	#TPI_ITATBCTR0_ATREADY1S_Msk
 (0x1UL )

	)

1521 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1522 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1525 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1526 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1528 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1529 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1531 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1532 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1534 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

1535 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

1537 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1538 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x3FUL )

	)

1541 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1542 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1544 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1545 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1550 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1563 
__IM
 
uöt32_t
 
TYPE
;

1564 
__IOM
 
uöt32_t
 
CTRL
;

1565 
__IOM
 
uöt32_t
 
RNR
;

1566 
__IOM
 
uöt32_t
 
RBAR
;

1567 
__IOM
 
uöt32_t
 
RLAR
;

1568 
__IOM
 
uöt32_t
 
RBAR_A1
;

1569 
__IOM
 
uöt32_t
 
RLAR_A1
;

1570 
__IOM
 
uöt32_t
 
RBAR_A2
;

1571 
__IOM
 
uöt32_t
 
RLAR_A2
;

1572 
__IOM
 
uöt32_t
 
RBAR_A3
;

1573 
__IOM
 
uöt32_t
 
RLAR_A3
;

1574 
uöt32_t
 
RESERVED0
[1];

1576 
__IOM
 
uöt32_t
 
MAIR
[2];

1578 
__IOM
 
uöt32_t
 
MAIR0
;

1579 
__IOM
 
uöt32_t
 
MAIR1
;

1582 } 
	tMPU_Ty≥
;

1584 
	#MPU_TYPE_RALIASES
 4U

	)

1587 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1588 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1590 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1591 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1593 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1594 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1597 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1598 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1600 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1601 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1603 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1604 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1607 
	#MPU_RNR_REGION_Pos
 0U

	)

1608 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1611 
	#MPU_RBAR_BASE_Pos
 5U

	)

1612 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

1614 
	#MPU_RBAR_SH_Pos
 3U

	)

1615 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

1617 
	#MPU_RBAR_AP_Pos
 1U

	)

1618 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

1620 
	#MPU_RBAR_XN_Pos
 0U

	)

1621 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

1624 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

1625 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

1627 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

1628 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

1630 
	#MPU_RLAR_EN_Pos
 0U

	)

1631 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

1634 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

1635 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

1637 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

1638 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

1640 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

1641 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

1643 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

1644 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

1647 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

1648 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

1650 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

1651 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

1653 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

1654 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

1656 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

1657 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

1663 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1676 
__IOM
 
uöt32_t
 
CTRL
;

1677 
__IM
 
uöt32_t
 
TYPE
;

1678 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1679 
__IOM
 
uöt32_t
 
RNR
;

1680 
__IOM
 
uöt32_t
 
RBAR
;

1681 
__IOM
 
uöt32_t
 
RLAR
;

1683 
uöt32_t
 
RESERVED0
[3];

1685 
__IOM
 
uöt32_t
 
SFSR
;

1686 
__IOM
 
uöt32_t
 
SFAR
;

1687 } 
	tSAU_Ty≥
;

1690 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

1691 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

1693 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

1694 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

1697 
	#SAU_TYPE_SREGION_Pos
 0U

	)

1698 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

1700 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1702 
	#SAU_RNR_REGION_Pos
 0U

	)

1703 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

1706 
	#SAU_RBAR_BADDR_Pos
 5U

	)

1707 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

1710 
	#SAU_RLAR_LADDR_Pos
 5U

	)

1711 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

1713 
	#SAU_RLAR_NSC_Pos
 1U

	)

1714 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

1716 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

1717 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

1722 
	#SAU_SFSR_LSERR_Pos
 7U

	)

1723 
	#SAU_SFSR_LSERR_Msk
 (1UL << 
SAU_SFSR_LSERR_Pos
Ë

	)

1725 
	#SAU_SFSR_SFARVALID_Pos
 6U

	)

1726 
	#SAU_SFSR_SFARVALID_Msk
 (1UL << 
SAU_SFSR_SFARVALID_Pos
Ë

	)

1728 
	#SAU_SFSR_LSPERR_Pos
 5U

	)

1729 
	#SAU_SFSR_LSPERR_Msk
 (1UL << 
SAU_SFSR_LSPERR_Pos
Ë

	)

1731 
	#SAU_SFSR_INVTRAN_Pos
 4U

	)

1732 
	#SAU_SFSR_INVTRAN_Msk
 (1UL << 
SAU_SFSR_INVTRAN_Pos
Ë

	)

1734 
	#SAU_SFSR_AUVIOL_Pos
 3U

	)

1735 
	#SAU_SFSR_AUVIOL_Msk
 (1UL << 
SAU_SFSR_AUVIOL_Pos
Ë

	)

1737 
	#SAU_SFSR_INVER_Pos
 2U

	)

1738 
	#SAU_SFSR_INVER_Msk
 (1UL << 
SAU_SFSR_INVER_Pos
Ë

	)

1740 
	#SAU_SFSR_INVIS_Pos
 1U

	)

1741 
	#SAU_SFSR_INVIS_Msk
 (1UL << 
SAU_SFSR_INVIS_Pos
Ë

	)

1743 
	#SAU_SFSR_INVEP_Pos
 0U

	)

1744 
	#SAU_SFSR_INVEP_Msk
 (1UL )

	)

1762 
uöt32_t
 
RESERVED0
[1U];

1763 
__IOM
 
uöt32_t
 
FPCCR
;

1764 
__IOM
 
uöt32_t
 
FPCAR
;

1765 
__IOM
 
uöt32_t
 
FPDSCR
;

1766 
__IM
 
uöt32_t
 
MVFR0
;

1767 
__IM
 
uöt32_t
 
MVFR1
;

1768 } 
	tFPU_Ty≥
;

1771 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1772 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1774 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1775 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1777 
	#FPU_FPCCR_LSPENS_Pos
 29U

	)

1778 
	#FPU_FPCCR_LSPENS_Msk
 (1UL << 
FPU_FPCCR_LSPENS_Pos
Ë

	)

1780 
	#FPU_FPCCR_CLRONRET_Pos
 28U

	)

1781 
	#FPU_FPCCR_CLRONRET_Msk
 (1UL << 
FPU_FPCCR_CLRONRET_Pos
Ë

	)

1783 
	#FPU_FPCCR_CLRONRETS_Pos
 27U

	)

1784 
	#FPU_FPCCR_CLRONRETS_Msk
 (1UL << 
FPU_FPCCR_CLRONRETS_Pos
Ë

	)

1786 
	#FPU_FPCCR_TS_Pos
 26U

	)

1787 
	#FPU_FPCCR_TS_Msk
 (1UL << 
FPU_FPCCR_TS_Pos
Ë

	)

1789 
	#FPU_FPCCR_UFRDY_Pos
 10U

	)

1790 
	#FPU_FPCCR_UFRDY_Msk
 (1UL << 
FPU_FPCCR_UFRDY_Pos
Ë

	)

1792 
	#FPU_FPCCR_SPLIMVIOL_Pos
 9U

	)

1793 
	#FPU_FPCCR_SPLIMVIOL_Msk
 (1UL << 
FPU_FPCCR_SPLIMVIOL_Pos
Ë

	)

1795 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1796 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1798 
	#FPU_FPCCR_SFRDY_Pos
 7U

	)

1799 
	#FPU_FPCCR_SFRDY_Msk
 (1UL << 
FPU_FPCCR_SFRDY_Pos
Ë

	)

1801 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1802 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1804 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1805 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1807 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1808 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1810 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1811 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1813 
	#FPU_FPCCR_S_Pos
 2U

	)

1814 
	#FPU_FPCCR_S_Msk
 (1UL << 
FPU_FPCCR_S_Pos
Ë

	)

1816 
	#FPU_FPCCR_USER_Pos
 1U

	)

1817 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1819 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1820 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1823 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1824 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1827 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1828 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1830 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1831 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1833 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1834 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1836 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1837 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1840 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1841 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1843 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1844 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1846 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1847 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1849 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1850 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1852 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1853 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1855 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1856 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1858 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1859 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1861 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1862 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1865 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1866 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1868 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1869 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1871 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1872 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1874 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1875 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1892 
__IOM
 
uöt32_t
 
DHCSR
;

1893 
__OM
 
uöt32_t
 
DCRSR
;

1894 
__IOM
 
uöt32_t
 
DCRDR
;

1895 
__IOM
 
uöt32_t
 
DEMCR
;

1896 
uöt32_t
 
RESERVED4
[1U];

1897 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

1898 
__IOM
 
uöt32_t
 
DSCSR
;

1899 } 
	tC‹eDebug_Ty≥
;

1902 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1903 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1905 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1906 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1908 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1909 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1911 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1912 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1914 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1915 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1917 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1918 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1920 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1921 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1923 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1924 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1926 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1927 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1929 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1930 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1932 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1933 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1935 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1936 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1938 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1939 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1942 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1943 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1945 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1946 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1949 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1950 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1952 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1953 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1955 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1956 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1958 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1959 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1961 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1962 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1964 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1965 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1967 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1968 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1970 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1971 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1973 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1974 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1976 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1977 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1979 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1980 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1982 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1983 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1985 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1986 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1989 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1990 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1992 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1993 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1995 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1996 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1998 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1999 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

2002 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

2003 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

2005 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

2006 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

2008 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

2009 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

2027 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

2035 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

2048 
	#SCS_BASE
 (0xE000E000ULË

	)

2049 
	#ITM_BASE
 (0xE0000000ULË

	)

2050 
	#DWT_BASE
 (0xE0001000ULË

	)

2051 
	#TPI_BASE
 (0xE0040000ULË

	)

2052 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

2053 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

2054 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

2055 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

2057 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

2058 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

2059 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

2060 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

2061 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

2062 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

2063 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

2064 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

2066 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2067 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

2068 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

2071 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2072 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

2073 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

2076 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

2077 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

2079 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2080 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

2081 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

2082 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

2083 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

2084 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

2086 
	#SCnSCB_NS
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE_NS
 )

	)

2087 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

2088 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

2089 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

2090 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

2092 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2093 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

2094 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

2097 
	#FPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0F30ULË

	)

2098 
	#FPU_NS
 ((
FPU_Ty≥
 *Ë
FPU_BASE_NS
 )

	)

2127 #ifde‡
CMSIS_NVIC_VIRTUAL


2128 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2129 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

2131 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2133 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

2134 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

2135 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

2136 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

2137 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

2138 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

2139 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

2140 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

2141 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

2142 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

2143 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

2144 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

2147 #ifde‡
CMSIS_VECTAB_VIRTUAL


2148 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2149 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

2151 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2153 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

2154 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

2157 
	#NVIC_USER_IRQ_OFFSET
 16

	)

2163 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

2166 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

2167 
	#EXC_RETURN_S
 (0x00000040ULË

	)

2168 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

2169 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

2170 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

2171 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

2172 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

2175 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

2176 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

2178 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

2191 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

2193 
uöt32_t
 
ªg_vÆue
;

2194 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2196 
ªg_vÆue
 = 
SCB
->
AIRCR
;

2197 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2198 
ªg_vÆue
 = (reg_value |

2199 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2200 (
Pri‹ôyGroupTmp
 << 8U) );

2201 
SCB
->
AIRCR
 = 
ªg_vÆue
;

2210 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

2212  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2222 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2224 i‡((
öt32_t
)(
IRQn
) >= 0)

2226 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2239 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2241 i‡((
öt32_t
)(
IRQn
) >= 0)

2243 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2258 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2260 i‡((
öt32_t
)(
IRQn
) >= 0)

2262 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2263 
__DSB
();

2264 
__ISB
();

2277 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2279 i‡((
öt32_t
)(
IRQn
) >= 0)

2281 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2296 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2298 i‡((
öt32_t
)(
IRQn
) >= 0)

2300 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2311 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2313 i‡((
öt32_t
)(
IRQn
) >= 0)

2315 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2328 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

2330 i‡((
öt32_t
)(
IRQn
) >= 0)

2332 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2341 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2350 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2352 i‡((
öt32_t
)(
IRQn
) >= 0)

2354 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2371 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2373 i‡((
öt32_t
)(
IRQn
) >= 0)

2375 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2376 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2393 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2395 i‡((
öt32_t
)(
IRQn
) >= 0)

2397 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2398 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2417 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2419 i‡((
öt32_t
)(
IRQn
) >= 0)

2421 
NVIC
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2425 
SCB
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2439 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

2442 i‡((
öt32_t
)(
IRQn
) >= 0)

2444 (((
uöt32_t
)
NVIC
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2448 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2464 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

2466 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2467 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2468 
uöt32_t
 
SubPri‹ôyBôs
;

2470 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2471 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2474 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

2475 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

2491 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

2493 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2494 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2495 
uöt32_t
 
SubPri‹ôyBôs
;

2497 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2498 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2500 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

2501 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

2514 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

2516 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2517 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

2529 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

2531 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2532  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

2540 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

2542 
__DSB
();

2544 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2545 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2546 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2547 
__DSB
();

2551 
__NOP
();

2555 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2565 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôyGroupög_NS
(
uöt32_t
 
Pri‹ôyGroup
)

2567 
uöt32_t
 
ªg_vÆue
;

2568 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2570 
ªg_vÆue
 = 
SCB_NS
->
AIRCR
;

2571 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2572 
ªg_vÆue
 = (reg_value |

2573 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2574 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

2575 
SCB_NS
->
AIRCR
 = 
ªg_vÆue
;

2584 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôyGroupög_NS
()

2586  ((
uöt32_t
)((
SCB_NS
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2596 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2598 i‡((
öt32_t
)(
IRQn
) >= 0)

2600 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2613 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2615 i‡((
öt32_t
)(
IRQn
) >= 0)

2617 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2632 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2634 i‡((
öt32_t
)(
IRQn
) >= 0)

2636 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2649 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2651 i‡((
öt32_t
)(
IRQn
) >= 0)

2653 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2668 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2670 i‡((
öt32_t
)(
IRQn
) >= 0)

2672 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2683 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2685 i‡((
öt32_t
)(
IRQn
) >= 0)

2687 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2700 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

2702 i‡((
öt32_t
)(
IRQn
) >= 0)

2704 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2722 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2724 i‡((
öt32_t
)(
IRQn
) >= 0)

2726 
NVIC_NS
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2730 
SCB_NS
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2743 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

2746 i‡((
öt32_t
)(
IRQn
) >= 0)

2748 (((
uöt32_t
)
NVIC_NS
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2752 (((
uöt32_t
)
SCB_NS
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2761 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2763 
	~"mpu_¨mv8.h
"

2783 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2785 
uöt32_t
 
mv‰0
;

2787 
mv‰0
 = 
FPU
->
MVFR0
;

2788 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x220U)

2792 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2815 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2821 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

2823 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

2832 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

2834 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

2852 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2865 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2867 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2872 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2873 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2874 
SysTick
->
VAL
 = 0UL;

2875 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2876 
SysTick_CTRL_TICKINT_Msk
 |

2877 
SysTick_CTRL_ENABLE_Msk
;

2881 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2894 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

2896 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2901 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2902 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2903 
SysTick_NS
->
VAL
 = 0UL;

2904 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2905 
SysTick_CTRL_TICKINT_Msk
 |

2906 
SysTick_CTRL_ENABLE_Msk
;

2925 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2926 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2937 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2939 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2940 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2942 
ITM
->
PORT
[0U].
u32
 == 0UL)

2944 
__NOP
();

2946 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2948  (
	gch
);

2958 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2960 
öt32_t
 
	gch
 = -1;

2962 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2964 
ch
 = 
ITM_RxBuf„r
;

2965 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2968  (
	gch
);

2978 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2981 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2996 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm4.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM4_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM4_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM4_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (4UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

89 #i‡
deföed
 
__ARM_PCS_VFP


90 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

91 
	#__FPU_USED
 1U

	)

94 
	#__FPU_USED
 0U

	)

97 
	#__FPU_USED
 0U

	)

100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

102 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

103 
	#__FPU_USED
 1U

	)

106 
	#__FPU_USED
 0U

	)

109 
	#__FPU_USED
 0U

	)

112 #ñi‡
deföed
 ( 
__ICCARM__
 )

113 #i‡
deföed
 
__ARMVFP__


114 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

115 
	#__FPU_USED
 1U

	)

118 
	#__FPU_USED
 0U

	)

121 
	#__FPU_USED
 0U

	)

124 #ñi‡
deföed
 ( 
__TI_ARM__
 )

125 #i‡
deföed
 
__TI_VFP_SUPPORT__


126 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


138 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__CSMC__
 )

149 #i‡–
__CSMC__
 & 0x400U)

150 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

162 
	~"cmsis_compûî.h
"

165 #ifde‡
__˝lu•lus


171 #i‚de‡
__CMSIS_GENERIC


173 #i‚de‡
__CORE_CM4_H_DEPENDANT


174 
	#__CORE_CM4_H_DEPENDANT


	)

176 #ifde‡
__˝lu•lus


181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM4_REV


183 
	#__CM4_REV
 0x0000U

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0U

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0U

	)

197 #i‚de‡
__NVIC_PRIO_BITS


198 
	#__NVIC_PRIO_BITS
 3U

	)

202 #i‚de‡
__Víd‹_SysTickC⁄fig


203 
	#__Víd‹_SysTickC⁄fig
 0U

	)

216 #ifde‡
__˝lu•lus


217 
	#__I
 vﬁ©ûê

	)

219 
	#__I
 vﬁ©ûêc⁄°

	)

221 
	#__O
 vﬁ©ûê

	)

222 
	#__IO
 vﬁ©ûê

	)

225 
	#__IM
 vﬁ©ûêc⁄°

	)

226 
	#__OM
 vﬁ©ûê

	)

227 
	#__IOM
 vﬁ©ûê

	)

263 
uöt32_t
 
_ª£rved0
:16;

264 
uöt32_t
 
GE
:4;

265 
uöt32_t
 
_ª£rved1
:7;

266 
uöt32_t
 
Q
:1;

267 
uöt32_t
 
V
:1;

268 
uöt32_t
 
C
:1;

269 
uöt32_t
 
Z
:1;

270 
uöt32_t
 
N
:1;

271 } 
b
;

272 
uöt32_t
 
w
;

273 } 
	tAPSR_Ty≥
;

276 
	#APSR_N_Pos
 31U

	)

277 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

279 
	#APSR_Z_Pos
 30U

	)

280 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

282 
	#APSR_C_Pos
 29U

	)

283 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

285 
	#APSR_V_Pos
 28U

	)

286 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

288 
	#APSR_Q_Pos
 27U

	)

289 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

291 
	#APSR_GE_Pos
 16U

	)

292 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

302 
uöt32_t
 
ISR
:9;

303 
uöt32_t
 
_ª£rved0
:23;

304 } 
b
;

305 
uöt32_t
 
w
;

306 } 
	tIPSR_Ty≥
;

309 
	#IPSR_ISR_Pos
 0U

	)

310 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

320 
uöt32_t
 
ISR
:9;

321 
uöt32_t
 
_ª£rved0
:1;

322 
uöt32_t
 
ICI_IT_1
:6;

323 
uöt32_t
 
GE
:4;

324 
uöt32_t
 
_ª£rved1
:4;

325 
uöt32_t
 
T
:1;

326 
uöt32_t
 
ICI_IT_2
:2;

327 
uöt32_t
 
Q
:1;

328 
uöt32_t
 
V
:1;

329 
uöt32_t
 
C
:1;

330 
uöt32_t
 
Z
:1;

331 
uöt32_t
 
N
:1;

332 } 
b
;

333 
uöt32_t
 
w
;

334 } 
	txPSR_Ty≥
;

337 
	#xPSR_N_Pos
 31U

	)

338 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

340 
	#xPSR_Z_Pos
 30U

	)

341 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

343 
	#xPSR_C_Pos
 29U

	)

344 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

346 
	#xPSR_V_Pos
 28U

	)

347 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

349 
	#xPSR_Q_Pos
 27U

	)

350 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

352 
	#xPSR_ICI_IT_2_Pos
 25U

	)

353 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

355 
	#xPSR_T_Pos
 24U

	)

356 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

358 
	#xPSR_GE_Pos
 16U

	)

359 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

361 
	#xPSR_ICI_IT_1_Pos
 10U

	)

362 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

364 
	#xPSR_ISR_Pos
 0U

	)

365 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
nPRIV
:1;

376 
uöt32_t
 
SPSEL
:1;

377 
uöt32_t
 
FPCA
:1;

378 
uöt32_t
 
_ª£rved0
:29;

379 } 
b
;

380 
uöt32_t
 
w
;

381 } 
	tCONTROL_Ty≥
;

384 
	#CONTROL_FPCA_Pos
 2U

	)

385 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

387 
	#CONTROL_SPSEL_Pos
 1U

	)

388 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

390 
	#CONTROL_nPRIV_Pos
 0U

	)

391 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

408 
__IOM
 
uöt32_t
 
ISER
[8U];

409 
uöt32_t
 
RESERVED0
[24U];

410 
__IOM
 
uöt32_t
 
ICER
[8U];

411 
uöt32_t
 
RSERVED1
[24U];

412 
__IOM
 
uöt32_t
 
ISPR
[8U];

413 
uöt32_t
 
RESERVED2
[24U];

414 
__IOM
 
uöt32_t
 
ICPR
[8U];

415 
uöt32_t
 
RESERVED3
[24U];

416 
__IOM
 
uöt32_t
 
IABR
[8U];

417 
uöt32_t
 
RESERVED4
[56U];

418 
__IOM
 
uöt8_t
 
IP
[240U];

419 
uöt32_t
 
RESERVED5
[644U];

420 
__OM
 
uöt32_t
 
STIR
;

421 } 
	tNVIC_Ty≥
;

424 
	#NVIC_STIR_INTID_Pos
 0U

	)

425 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

442 
__IM
 
uöt32_t
 
CPUID
;

443 
__IOM
 
uöt32_t
 
ICSR
;

444 
__IOM
 
uöt32_t
 
VTOR
;

445 
__IOM
 
uöt32_t
 
AIRCR
;

446 
__IOM
 
uöt32_t
 
SCR
;

447 
__IOM
 
uöt32_t
 
CCR
;

448 
__IOM
 
uöt8_t
 
SHP
[12U];

449 
__IOM
 
uöt32_t
 
SHCSR
;

450 
__IOM
 
uöt32_t
 
CFSR
;

451 
__IOM
 
uöt32_t
 
HFSR
;

452 
__IOM
 
uöt32_t
 
DFSR
;

453 
__IOM
 
uöt32_t
 
MMFAR
;

454 
__IOM
 
uöt32_t
 
BFAR
;

455 
__IOM
 
uöt32_t
 
AFSR
;

456 
__IM
 
uöt32_t
 
PFR
[2U];

457 
__IM
 
uöt32_t
 
DFR
;

458 
__IM
 
uöt32_t
 
ADR
;

459 
__IM
 
uöt32_t
 
MMFR
[4U];

460 
__IM
 
uöt32_t
 
ISAR
[5U];

461 
uöt32_t
 
RESERVED0
[5U];

462 
__IOM
 
uöt32_t
 
CPACR
;

463 } 
	tSCB_Ty≥
;

466 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

467 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

469 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

470 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

472 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

473 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

475 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

476 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

478 
	#SCB_CPUID_REVISION_Pos
 0U

	)

479 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

482 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

483 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

485 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

486 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

488 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

489 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

491 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

492 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

494 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

495 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

497 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

498 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

500 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

501 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

503 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

504 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

506 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

507 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

509 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

510 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

513 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

514 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

517 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

518 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

520 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

521 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

523 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

524 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

526 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

527 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

529 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

530 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

532 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

533 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

535 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

536 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

539 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

540 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

542 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

543 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

545 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

546 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

549 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

550 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

552 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

553 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

555 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

556 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

558 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

559 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

561 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

562 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

564 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

565 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

568 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

569 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

571 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

572 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

574 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

575 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

577 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

578 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

580 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

581 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

583 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

584 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

586 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

587 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

589 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

590 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

592 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

593 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

595 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

596 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

598 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

599 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

601 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

602 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

604 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

605 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

607 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

608 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

611 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

612 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

614 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

615 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

617 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

618 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

621 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

622 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

624 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

625 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

627 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

628 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

630 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

631 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

633 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

634 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

636 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

637 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

640 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

641 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

643 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

644 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

646 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

647 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

649 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

650 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

652 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

653 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

655 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

656 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

658 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

659 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

662 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

663 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

665 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

666 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

668 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

669 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

671 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

672 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

674 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

675 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

677 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

678 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

681 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

682 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

684 
	#SCB_HFSR_FORCED_Pos
 30U

	)

685 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

687 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

688 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

691 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

692 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

694 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

695 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

697 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

698 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

700 
	#SCB_DFSR_BKPT_Pos
 1U

	)

701 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

703 
	#SCB_DFSR_HALTED_Pos
 0U

	)

704 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

721 
uöt32_t
 
RESERVED0
[1U];

722 
__IM
 
uöt32_t
 
ICTR
;

723 
__IOM
 
uöt32_t
 
ACTLR
;

724 } 
	tSCnSCB_Ty≥
;

727 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

728 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

731 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9U

	)

732 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

734 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8U

	)

735 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

737 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

738 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

740 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

741 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

743 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

744 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

761 
__IOM
 
uöt32_t
 
CTRL
;

762 
__IOM
 
uöt32_t
 
LOAD
;

763 
__IOM
 
uöt32_t
 
VAL
;

764 
__IM
 
uöt32_t
 
CALIB
;

765 } 
	tSysTick_Ty≥
;

768 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

769 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

771 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

772 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

774 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

775 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

777 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

778 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

781 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

782 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

785 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

786 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

789 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

790 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

792 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

793 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

795 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

796 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

813 
__OM
 union

815 
__OM
 
uöt8_t
 
u8
;

816 
__OM
 
uöt16_t
 
u16
;

817 
__OM
 
uöt32_t
 
u32
;

818 } 
PORT
 [32U];

819 
uöt32_t
 
RESERVED0
[864U];

820 
__IOM
 
uöt32_t
 
TER
;

821 
uöt32_t
 
RESERVED1
[15U];

822 
__IOM
 
uöt32_t
 
TPR
;

823 
uöt32_t
 
RESERVED2
[15U];

824 
__IOM
 
uöt32_t
 
TCR
;

825 
uöt32_t
 
RESERVED3
[29U];

826 
__OM
 
uöt32_t
 
IWR
;

827 
__IM
 
uöt32_t
 
IRR
;

828 
__IOM
 
uöt32_t
 
IMCR
;

829 
uöt32_t
 
RESERVED4
[43U];

830 
__OM
 
uöt32_t
 
LAR
;

831 
__IM
 
uöt32_t
 
LSR
;

832 
uöt32_t
 
RESERVED5
[6U];

833 
__IM
 
uöt32_t
 
PID4
;

834 
__IM
 
uöt32_t
 
PID5
;

835 
__IM
 
uöt32_t
 
PID6
;

836 
__IM
 
uöt32_t
 
PID7
;

837 
__IM
 
uöt32_t
 
PID0
;

838 
__IM
 
uöt32_t
 
PID1
;

839 
__IM
 
uöt32_t
 
PID2
;

840 
__IM
 
uöt32_t
 
PID3
;

841 
__IM
 
uöt32_t
 
CID0
;

842 
__IM
 
uöt32_t
 
CID1
;

843 
__IM
 
uöt32_t
 
CID2
;

844 
__IM
 
uöt32_t
 
CID3
;

845 } 
	tITM_Ty≥
;

848 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

849 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

852 
	#ITM_TCR_BUSY_Pos
 23U

	)

853 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

855 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

856 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

858 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

859 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

861 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

862 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

864 
	#ITM_TCR_SWOENA_Pos
 4U

	)

865 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

867 
	#ITM_TCR_DWTENA_Pos
 3U

	)

868 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

870 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

871 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

873 
	#ITM_TCR_TSENA_Pos
 1U

	)

874 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

876 
	#ITM_TCR_ITMENA_Pos
 0U

	)

877 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

880 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

881 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

884 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

885 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

888 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

889 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

892 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

893 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

895 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

896 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

898 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

899 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

916 
__IOM
 
uöt32_t
 
CTRL
;

917 
__IOM
 
uöt32_t
 
CYCCNT
;

918 
__IOM
 
uöt32_t
 
CPICNT
;

919 
__IOM
 
uöt32_t
 
EXCCNT
;

920 
__IOM
 
uöt32_t
 
SLEEPCNT
;

921 
__IOM
 
uöt32_t
 
LSUCNT
;

922 
__IOM
 
uöt32_t
 
FOLDCNT
;

923 
__IM
 
uöt32_t
 
PCSR
;

924 
__IOM
 
uöt32_t
 
COMP0
;

925 
__IOM
 
uöt32_t
 
MASK0
;

926 
__IOM
 
uöt32_t
 
FUNCTION0
;

927 
uöt32_t
 
RESERVED0
[1U];

928 
__IOM
 
uöt32_t
 
COMP1
;

929 
__IOM
 
uöt32_t
 
MASK1
;

930 
__IOM
 
uöt32_t
 
FUNCTION1
;

931 
uöt32_t
 
RESERVED1
[1U];

932 
__IOM
 
uöt32_t
 
COMP2
;

933 
__IOM
 
uöt32_t
 
MASK2
;

934 
__IOM
 
uöt32_t
 
FUNCTION2
;

935 
uöt32_t
 
RESERVED2
[1U];

936 
__IOM
 
uöt32_t
 
COMP3
;

937 
__IOM
 
uöt32_t
 
MASK3
;

938 
__IOM
 
uöt32_t
 
FUNCTION3
;

939 } 
	tDWT_Ty≥
;

942 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

943 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

945 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

946 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

948 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

949 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

951 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

952 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

954 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

955 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

957 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

958 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

960 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

961 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

963 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

964 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

966 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

967 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

969 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

970 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

972 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

973 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

975 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

976 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

978 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

979 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

981 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

982 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

984 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

985 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

987 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

988 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

990 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

991 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

993 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

994 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

997 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

998 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1001 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1002 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1005 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1006 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1009 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1010 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1013 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1014 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1017 
	#DWT_MASK_MASK_Pos
 0U

	)

1018 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1021 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1022 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1024 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1025 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1027 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1028 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1030 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1031 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1033 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1034 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1036 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1037 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1039 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1040 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1042 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1043 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1045 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1046 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1063 
__IM
 
uöt32_t
 
SSPSR
;

1064 
__IOM
 
uöt32_t
 
CSPSR
;

1065 
uöt32_t
 
RESERVED0
[2U];

1066 
__IOM
 
uöt32_t
 
ACPR
;

1067 
uöt32_t
 
RESERVED1
[55U];

1068 
__IOM
 
uöt32_t
 
SPPR
;

1069 
uöt32_t
 
RESERVED2
[131U];

1070 
__IM
 
uöt32_t
 
FFSR
;

1071 
__IOM
 
uöt32_t
 
FFCR
;

1072 
__IM
 
uöt32_t
 
FSCR
;

1073 
uöt32_t
 
RESERVED3
[759U];

1074 
__IM
 
uöt32_t
 
TRIGGER
;

1075 
__IM
 
uöt32_t
 
FIFO0
;

1076 
__IM
 
uöt32_t
 
ITATBCTR2
;

1077 
uöt32_t
 
RESERVED4
[1U];

1078 
__IM
 
uöt32_t
 
ITATBCTR0
;

1079 
__IM
 
uöt32_t
 
FIFO1
;

1080 
__IOM
 
uöt32_t
 
ITCTRL
;

1081 
uöt32_t
 
RESERVED5
[39U];

1082 
__IOM
 
uöt32_t
 
CLAIMSET
;

1083 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1084 
uöt32_t
 
RESERVED7
[8U];

1085 
__IM
 
uöt32_t
 
DEVID
;

1086 
__IM
 
uöt32_t
 
DEVTYPE
;

1087 } 
	tTPI_Ty≥
;

1090 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1091 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1094 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1095 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1098 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1099 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1101 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1102 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1104 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1105 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1107 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1108 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1111 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1112 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1114 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1115 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1118 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1119 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1122 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1123 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1125 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1126 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1128 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1129 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1131 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1132 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1134 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1135 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1137 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1138 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1140 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1141 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1144 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1145 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1147 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1148 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1151 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1152 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1154 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1155 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1157 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1158 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1160 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1161 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1163 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1164 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1166 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1167 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1169 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1170 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1173 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1174 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1176 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1177 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1180 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1181 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1184 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1185 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1187 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1188 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1190 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1191 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1193 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1194 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1196 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1197 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1199 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1200 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1203 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1204 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1206 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1207 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1212 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1225 
__IM
 
uöt32_t
 
TYPE
;

1226 
__IOM
 
uöt32_t
 
CTRL
;

1227 
__IOM
 
uöt32_t
 
RNR
;

1228 
__IOM
 
uöt32_t
 
RBAR
;

1229 
__IOM
 
uöt32_t
 
RASR
;

1230 
__IOM
 
uöt32_t
 
RBAR_A1
;

1231 
__IOM
 
uöt32_t
 
RASR_A1
;

1232 
__IOM
 
uöt32_t
 
RBAR_A2
;

1233 
__IOM
 
uöt32_t
 
RASR_A2
;

1234 
__IOM
 
uöt32_t
 
RBAR_A3
;

1235 
__IOM
 
uöt32_t
 
RASR_A3
;

1236 } 
	tMPU_Ty≥
;

1238 
	#MPU_TYPE_RALIASES
 4U

	)

1241 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1242 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1244 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1245 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1247 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1248 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1251 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1252 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1254 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1255 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1257 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1258 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1261 
	#MPU_RNR_REGION_Pos
 0U

	)

1262 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1265 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1266 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1268 
	#MPU_RBAR_VALID_Pos
 4U

	)

1269 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1271 
	#MPU_RBAR_REGION_Pos
 0U

	)

1272 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1275 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1276 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1278 
	#MPU_RASR_XN_Pos
 28U

	)

1279 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1281 
	#MPU_RASR_AP_Pos
 24U

	)

1282 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1284 
	#MPU_RASR_TEX_Pos
 19U

	)

1285 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1287 
	#MPU_RASR_S_Pos
 18U

	)

1288 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1290 
	#MPU_RASR_C_Pos
 17U

	)

1291 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1293 
	#MPU_RASR_B_Pos
 16U

	)

1294 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1296 
	#MPU_RASR_SRD_Pos
 8U

	)

1297 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1299 
	#MPU_RASR_SIZE_Pos
 1U

	)

1300 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1302 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1303 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1321 
uöt32_t
 
RESERVED0
[1U];

1322 
__IOM
 
uöt32_t
 
FPCCR
;

1323 
__IOM
 
uöt32_t
 
FPCAR
;

1324 
__IOM
 
uöt32_t
 
FPDSCR
;

1325 
__IM
 
uöt32_t
 
MVFR0
;

1326 
__IM
 
uöt32_t
 
MVFR1
;

1327 } 
	tFPU_Ty≥
;

1330 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1331 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1333 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1334 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1336 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1337 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1339 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1340 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1342 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1343 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1345 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1346 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1348 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1349 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1351 
	#FPU_FPCCR_USER_Pos
 1U

	)

1352 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1354 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1355 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1358 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1359 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1362 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1363 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1365 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1366 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1368 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1369 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1371 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1372 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1375 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1376 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1378 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1379 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1381 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1382 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1384 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1385 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1387 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1388 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1390 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1391 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1393 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1394 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1396 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1397 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1400 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1401 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1403 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1404 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1406 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1407 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1409 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1410 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1427 
__IOM
 
uöt32_t
 
DHCSR
;

1428 
__OM
 
uöt32_t
 
DCRSR
;

1429 
__IOM
 
uöt32_t
 
DCRDR
;

1430 
__IOM
 
uöt32_t
 
DEMCR
;

1431 } 
	tC‹eDebug_Ty≥
;

1434 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1435 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1437 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1438 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1440 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1441 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1443 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1444 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1446 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1447 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1449 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1450 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1452 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1453 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1455 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1456 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1458 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1459 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1461 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1462 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1464 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1465 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1467 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1468 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1471 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1472 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1474 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1475 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1478 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1479 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1481 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1482 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1484 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1485 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1487 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1488 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1490 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1491 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1493 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1494 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1496 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1497 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1499 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1500 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1502 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1503 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1505 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1506 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1508 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1509 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1511 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1512 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1514 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1515 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1533 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1541 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1554 
	#SCS_BASE
 (0xE000E000ULË

	)

1555 
	#ITM_BASE
 (0xE0000000ULË

	)

1556 
	#DWT_BASE
 (0xE0001000ULË

	)

1557 
	#TPI_BASE
 (0xE0040000ULË

	)

1558 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1559 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1560 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1561 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1563 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1564 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1565 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1566 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1567 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1568 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1569 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1570 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1572 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1573 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1574 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1577 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1578 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1606 #ifde‡
CMSIS_NVIC_VIRTUAL


1607 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1608 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1610 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1612 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1613 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1614 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1615 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1616 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1617 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1618 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1619 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1620 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1621 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1622 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1623 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1626 #ifde‡
CMSIS_VECTAB_VIRTUAL


1627 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1628 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1630 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1632 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1633 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1636 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1640 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1641 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1642 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1643 
	#EXC_RETURN_HANDLER_FPU
 (0xFFFFFFE1ULË

	)

1644 
	#EXC_RETURN_THREAD_MSP_FPU
 (0xFFFFFFE9ULË

	)

1645 
	#EXC_RETURN_THREAD_PSP_FPU
 (0xFFFFFFEDULË

	)

1657 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1659 
uöt32_t
 
ªg_vÆue
;

1660 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1662 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1663 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1664 
ªg_vÆue
 = (reg_value |

1665 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1666 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1667 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1676 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1678  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1688 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1690 i‡((
öt32_t
)(
IRQn
) >= 0)

1692 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1705 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1707 i‡((
öt32_t
)(
IRQn
) >= 0)

1709 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1724 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1726 i‡((
öt32_t
)(
IRQn
) >= 0)

1728 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1729 
__DSB
();

1730 
__ISB
();

1743 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1745 i‡((
öt32_t
)(
IRQn
) >= 0)

1747 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1762 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1764 i‡((
öt32_t
)(
IRQn
) >= 0)

1766 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1777 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1779 i‡((
öt32_t
)(
IRQn
) >= 0)

1781 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1794 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1796 i‡((
öt32_t
)(
IRQn
) >= 0)

1798 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1816 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1818 i‡((
öt32_t
)(
IRQn
) >= 0)

1820 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1824 
SCB
->
SHP
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1838 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1841 i‡((
öt32_t
)(
IRQn
) >= 0)

1843 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1847 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1863 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1865 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1866 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1867 
uöt32_t
 
SubPri‹ôyBôs
;

1869 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1870 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1873 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1874 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1890 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1892 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1893 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1894 
uöt32_t
 
SubPri‹ôyBôs
;

1896 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1897 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1899 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1900 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1913 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1915 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1916 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1928 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1930 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1931  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1939 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1941 
__DSB
();

1943 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1944 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1945 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1946 
__DSB
();

1950 
__NOP
();

1958 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1960 
	~"mpu_¨mv7.h
"

1981 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1983 
uöt32_t
 
mv‰0
;

1985 
mv‰0
 = 
FPU
->
MVFR0
;

1986 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2009 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2022 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2024 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2029 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2030 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2031 
SysTick
->
VAL
 = 0UL;

2032 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2033 
SysTick_CTRL_TICKINT_Msk
 |

2034 
SysTick_CTRL_ENABLE_Msk
;

2052 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2053 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2064 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2066 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2067 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2069 
ITM
->
PORT
[0U].
u32
 == 0UL)

2071 
__NOP
();

2073 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2075  (
	gch
);

2085 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2087 
öt32_t
 
	gch
 = -1;

2089 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2091 
ch
 = 
ITM_RxBuf„r
;

2092 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2095  (
	gch
);

2105 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2108 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2123 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm7.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM7_H_GENERIC


32 
	#__CORE_CM7_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM7_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM7_CMSIS_VERSION_SUB
 ( 
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM7_CMSIS_VERSION
 ((
__CM7_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM7_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (7UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

89 #i‡
deföed
 
__ARM_PCS_VFP


90 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

91 
	#__FPU_USED
 1U

	)

94 
	#__FPU_USED
 0U

	)

97 
	#__FPU_USED
 0U

	)

100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

102 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

103 
	#__FPU_USED
 1U

	)

106 
	#__FPU_USED
 0U

	)

109 
	#__FPU_USED
 0U

	)

112 #ñi‡
deföed
 ( 
__ICCARM__
 )

113 #i‡
deföed
 
__ARMVFP__


114 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

115 
	#__FPU_USED
 1U

	)

118 
	#__FPU_USED
 0U

	)

121 
	#__FPU_USED
 0U

	)

124 #ñi‡
deföed
 ( 
__TI_ARM__
 )

125 #i‡
deföed
 
__TI_VFP_SUPPORT__


126 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


138 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__CSMC__
 )

149 #i‡–
__CSMC__
 & 0x400U)

150 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

162 
	~"cmsis_compûî.h
"

165 #ifde‡
__˝lu•lus


171 #i‚de‡
__CMSIS_GENERIC


173 #i‚de‡
__CORE_CM7_H_DEPENDANT


174 
	#__CORE_CM7_H_DEPENDANT


	)

176 #ifde‡
__˝lu•lus


181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM7_REV


183 
	#__CM7_REV
 0x0000U

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0U

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0U

	)

197 #i‚de‡
__ICACHE_PRESENT


198 
	#__ICACHE_PRESENT
 0U

	)

202 #i‚de‡
__DCACHE_PRESENT


203 
	#__DCACHE_PRESENT
 0U

	)

207 #i‚de‡
__DTCM_PRESENT


208 
	#__DTCM_PRESENT
 0U

	)

212 #i‚de‡
__NVIC_PRIO_BITS


213 
	#__NVIC_PRIO_BITS
 3U

	)

217 #i‚de‡
__Víd‹_SysTickC⁄fig


218 
	#__Víd‹_SysTickC⁄fig
 0U

	)

231 #ifde‡
__˝lu•lus


232 
	#__I
 vﬁ©ûê

	)

234 
	#__I
 vﬁ©ûêc⁄°

	)

236 
	#__O
 vﬁ©ûê

	)

237 
	#__IO
 vﬁ©ûê

	)

240 
	#__IM
 vﬁ©ûêc⁄°

	)

241 
	#__OM
 vﬁ©ûê

	)

242 
	#__IOM
 vﬁ©ûê

	)

278 
uöt32_t
 
_ª£rved0
:16;

279 
uöt32_t
 
GE
:4;

280 
uöt32_t
 
_ª£rved1
:7;

281 
uöt32_t
 
Q
:1;

282 
uöt32_t
 
V
:1;

283 
uöt32_t
 
C
:1;

284 
uöt32_t
 
Z
:1;

285 
uöt32_t
 
N
:1;

286 } 
b
;

287 
uöt32_t
 
w
;

288 } 
	tAPSR_Ty≥
;

291 
	#APSR_N_Pos
 31U

	)

292 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

294 
	#APSR_Z_Pos
 30U

	)

295 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

297 
	#APSR_C_Pos
 29U

	)

298 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

300 
	#APSR_V_Pos
 28U

	)

301 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

303 
	#APSR_Q_Pos
 27U

	)

304 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

306 
	#APSR_GE_Pos
 16U

	)

307 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

317 
uöt32_t
 
ISR
:9;

318 
uöt32_t
 
_ª£rved0
:23;

319 } 
b
;

320 
uöt32_t
 
w
;

321 } 
	tIPSR_Ty≥
;

324 
	#IPSR_ISR_Pos
 0U

	)

325 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

335 
uöt32_t
 
ISR
:9;

336 
uöt32_t
 
_ª£rved0
:1;

337 
uöt32_t
 
ICI_IT_1
:6;

338 
uöt32_t
 
GE
:4;

339 
uöt32_t
 
_ª£rved1
:4;

340 
uöt32_t
 
T
:1;

341 
uöt32_t
 
ICI_IT_2
:2;

342 
uöt32_t
 
Q
:1;

343 
uöt32_t
 
V
:1;

344 
uöt32_t
 
C
:1;

345 
uöt32_t
 
Z
:1;

346 
uöt32_t
 
N
:1;

347 } 
b
;

348 
uöt32_t
 
w
;

349 } 
	txPSR_Ty≥
;

352 
	#xPSR_N_Pos
 31U

	)

353 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

355 
	#xPSR_Z_Pos
 30U

	)

356 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

358 
	#xPSR_C_Pos
 29U

	)

359 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

361 
	#xPSR_V_Pos
 28U

	)

362 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

364 
	#xPSR_Q_Pos
 27U

	)

365 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

367 
	#xPSR_ICI_IT_2_Pos
 25U

	)

368 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

370 
	#xPSR_T_Pos
 24U

	)

371 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

373 
	#xPSR_GE_Pos
 16U

	)

374 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

376 
	#xPSR_ICI_IT_1_Pos
 10U

	)

377 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

379 
	#xPSR_ISR_Pos
 0U

	)

380 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

390 
uöt32_t
 
nPRIV
:1;

391 
uöt32_t
 
SPSEL
:1;

392 
uöt32_t
 
FPCA
:1;

393 
uöt32_t
 
_ª£rved0
:29;

394 } 
b
;

395 
uöt32_t
 
w
;

396 } 
	tCONTROL_Ty≥
;

399 
	#CONTROL_FPCA_Pos
 2U

	)

400 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

402 
	#CONTROL_SPSEL_Pos
 1U

	)

403 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

405 
	#CONTROL_nPRIV_Pos
 0U

	)

406 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

423 
__IOM
 
uöt32_t
 
ISER
[8U];

424 
uöt32_t
 
RESERVED0
[24U];

425 
__IOM
 
uöt32_t
 
ICER
[8U];

426 
uöt32_t
 
RSERVED1
[24U];

427 
__IOM
 
uöt32_t
 
ISPR
[8U];

428 
uöt32_t
 
RESERVED2
[24U];

429 
__IOM
 
uöt32_t
 
ICPR
[8U];

430 
uöt32_t
 
RESERVED3
[24U];

431 
__IOM
 
uöt32_t
 
IABR
[8U];

432 
uöt32_t
 
RESERVED4
[56U];

433 
__IOM
 
uöt8_t
 
IP
[240U];

434 
uöt32_t
 
RESERVED5
[644U];

435 
__OM
 
uöt32_t
 
STIR
;

436 } 
	tNVIC_Ty≥
;

439 
	#NVIC_STIR_INTID_Pos
 0U

	)

440 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

457 
__IM
 
uöt32_t
 
CPUID
;

458 
__IOM
 
uöt32_t
 
ICSR
;

459 
__IOM
 
uöt32_t
 
VTOR
;

460 
__IOM
 
uöt32_t
 
AIRCR
;

461 
__IOM
 
uöt32_t
 
SCR
;

462 
__IOM
 
uöt32_t
 
CCR
;

463 
__IOM
 
uöt8_t
 
SHPR
[12U];

464 
__IOM
 
uöt32_t
 
SHCSR
;

465 
__IOM
 
uöt32_t
 
CFSR
;

466 
__IOM
 
uöt32_t
 
HFSR
;

467 
__IOM
 
uöt32_t
 
DFSR
;

468 
__IOM
 
uöt32_t
 
MMFAR
;

469 
__IOM
 
uöt32_t
 
BFAR
;

470 
__IOM
 
uöt32_t
 
AFSR
;

471 
__IM
 
uöt32_t
 
ID_PFR
[2U];

472 
__IM
 
uöt32_t
 
ID_DFR
;

473 
__IM
 
uöt32_t
 
ID_AFR
;

474 
__IM
 
uöt32_t
 
ID_MFR
[4U];

475 
__IM
 
uöt32_t
 
ID_ISAR
[5U];

476 
uöt32_t
 
RESERVED0
[1U];

477 
__IM
 
uöt32_t
 
CLIDR
;

478 
__IM
 
uöt32_t
 
CTR
;

479 
__IM
 
uöt32_t
 
CCSIDR
;

480 
__IOM
 
uöt32_t
 
CSSELR
;

481 
__IOM
 
uöt32_t
 
CPACR
;

482 
uöt32_t
 
RESERVED3
[93U];

483 
__OM
 
uöt32_t
 
STIR
;

484 
uöt32_t
 
RESERVED4
[15U];

485 
__IM
 
uöt32_t
 
MVFR0
;

486 
__IM
 
uöt32_t
 
MVFR1
;

487 
__IM
 
uöt32_t
 
MVFR2
;

488 
uöt32_t
 
RESERVED5
[1U];

489 
__OM
 
uöt32_t
 
ICIALLU
;

490 
uöt32_t
 
RESERVED6
[1U];

491 
__OM
 
uöt32_t
 
ICIMVAU
;

492 
__OM
 
uöt32_t
 
DCIMVAC
;

493 
__OM
 
uöt32_t
 
DCISW
;

494 
__OM
 
uöt32_t
 
DCCMVAU
;

495 
__OM
 
uöt32_t
 
DCCMVAC
;

496 
__OM
 
uöt32_t
 
DCCSW
;

497 
__OM
 
uöt32_t
 
DCCIMVAC
;

498 
__OM
 
uöt32_t
 
DCCISW
;

499 
uöt32_t
 
RESERVED7
[6U];

500 
__IOM
 
uöt32_t
 
ITCMCR
;

501 
__IOM
 
uöt32_t
 
DTCMCR
;

502 
__IOM
 
uöt32_t
 
AHBPCR
;

503 
__IOM
 
uöt32_t
 
CACR
;

504 
__IOM
 
uöt32_t
 
AHBSCR
;

505 
uöt32_t
 
RESERVED8
[1U];

506 
__IOM
 
uöt32_t
 
ABFSR
;

507 } 
	tSCB_Ty≥
;

510 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

511 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

513 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

514 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

516 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

517 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

519 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

520 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

522 
	#SCB_CPUID_REVISION_Pos
 0U

	)

523 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

526 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

527 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

529 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

530 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

532 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

533 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

535 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

536 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

538 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

539 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

541 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

542 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

544 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

545 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

547 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

548 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

550 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

551 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

553 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

554 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

557 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

558 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

561 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

562 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

564 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

565 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

567 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

568 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

570 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

571 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

573 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

574 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

576 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

577 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

579 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

580 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

583 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

584 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

586 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

587 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

589 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

590 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

593 
	#SCB_CCR_BP_Pos
 18U

	)

594 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

596 
	#SCB_CCR_IC_Pos
 17U

	)

597 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

599 
	#SCB_CCR_DC_Pos
 16U

	)

600 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

602 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

603 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

605 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

606 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

608 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

609 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

611 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

612 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

614 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

615 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

617 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

618 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

621 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

622 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

624 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

625 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

627 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

628 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

630 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

631 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

633 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

634 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

636 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

637 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

639 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

640 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

642 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

643 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

645 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

646 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

648 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

649 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

651 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

652 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

654 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

655 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

657 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

658 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

660 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

661 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

664 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

665 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

667 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

668 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

670 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

671 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

674 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

675 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

677 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

678 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

680 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

681 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

683 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

684 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

686 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

687 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

689 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

690 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

693 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

694 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

696 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

697 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

699 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

700 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

702 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

703 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

705 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

706 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

708 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

709 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

711 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

712 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

715 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

716 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

718 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

719 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

721 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

722 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

724 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

725 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

727 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

728 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

730 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

731 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

734 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

735 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

737 
	#SCB_HFSR_FORCED_Pos
 30U

	)

738 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

740 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

741 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

744 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

745 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

747 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

748 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

750 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

751 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

753 
	#SCB_DFSR_BKPT_Pos
 1U

	)

754 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

756 
	#SCB_DFSR_HALTED_Pos
 0U

	)

757 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

760 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

761 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

763 
	#SCB_CLIDR_LOC_Pos
 24U

	)

764 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

767 
	#SCB_CTR_FORMAT_Pos
 29U

	)

768 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

770 
	#SCB_CTR_CWG_Pos
 24U

	)

771 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

773 
	#SCB_CTR_ERG_Pos
 20U

	)

774 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

776 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

777 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

779 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

780 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

783 
	#SCB_CCSIDR_WT_Pos
 31U

	)

784 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

786 
	#SCB_CCSIDR_WB_Pos
 30U

	)

787 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

789 
	#SCB_CCSIDR_RA_Pos
 29U

	)

790 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

792 
	#SCB_CCSIDR_WA_Pos
 28U

	)

793 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

795 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

796 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

798 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

799 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

801 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

802 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

805 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

806 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

808 
	#SCB_CSSELR_IND_Pos
 0U

	)

809 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

812 
	#SCB_STIR_INTID_Pos
 0U

	)

813 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

816 
	#SCB_DCISW_WAY_Pos
 30U

	)

817 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

819 
	#SCB_DCISW_SET_Pos
 5U

	)

820 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

823 
	#SCB_DCCSW_WAY_Pos
 30U

	)

824 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

826 
	#SCB_DCCSW_SET_Pos
 5U

	)

827 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

830 
	#SCB_DCCISW_WAY_Pos
 30U

	)

831 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

833 
	#SCB_DCCISW_SET_Pos
 5U

	)

834 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

837 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

838 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

840 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

841 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

843 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

844 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

846 
	#SCB_ITCMCR_EN_Pos
 0U

	)

847 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

850 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

851 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

853 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

854 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

856 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

857 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

859 
	#SCB_DTCMCR_EN_Pos
 0U

	)

860 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

863 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

864 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

866 
	#SCB_AHBPCR_EN_Pos
 0U

	)

867 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

870 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

871 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

873 
	#SCB_CACR_ECCEN_Pos
 1U

	)

874 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

876 
	#SCB_CACR_SIWT_Pos
 0U

	)

877 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

880 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

881 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

883 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

884 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

886 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

887 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

890 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

891 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

893 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

894 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

896 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

897 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

899 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

900 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

902 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

903 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

905 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

906 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

923 
uöt32_t
 
RESERVED0
[1U];

924 
__IM
 
uöt32_t
 
ICTR
;

925 
__IOM
 
uöt32_t
 
ACTLR
;

926 } 
	tSCnSCB_Ty≥
;

929 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

930 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

933 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Pos
 12U

	)

934 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Msk
 (1UL << 
SCnSCB_ACTLR_DISITMATBFLUSH_Pos
Ë

	)

936 
	#SCnSCB_ACTLR_DISRAMODE_Pos
 11U

	)

937 
	#SCnSCB_ACTLR_DISRAMODE_Msk
 (1UL << 
SCnSCB_ACTLR_DISRAMODE_Pos
Ë

	)

939 
	#SCnSCB_ACTLR_FPEXCODIS_Pos
 10U

	)

940 
	#SCnSCB_ACTLR_FPEXCODIS_Msk
 (1UL << 
SCnSCB_ACTLR_FPEXCODIS_Pos
Ë

	)

942 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

943 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

945 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

946 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

963 
__IOM
 
uöt32_t
 
CTRL
;

964 
__IOM
 
uöt32_t
 
LOAD
;

965 
__IOM
 
uöt32_t
 
VAL
;

966 
__IM
 
uöt32_t
 
CALIB
;

967 } 
	tSysTick_Ty≥
;

970 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

971 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

973 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

974 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

976 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

977 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

979 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

980 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

983 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

984 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

987 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

988 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

991 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

992 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

994 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

995 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

997 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

998 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1015 
__OM
 union

1017 
__OM
 
uöt8_t
 
u8
;

1018 
__OM
 
uöt16_t
 
u16
;

1019 
__OM
 
uöt32_t
 
u32
;

1020 } 
PORT
 [32U];

1021 
uöt32_t
 
RESERVED0
[864U];

1022 
__IOM
 
uöt32_t
 
TER
;

1023 
uöt32_t
 
RESERVED1
[15U];

1024 
__IOM
 
uöt32_t
 
TPR
;

1025 
uöt32_t
 
RESERVED2
[15U];

1026 
__IOM
 
uöt32_t
 
TCR
;

1027 
uöt32_t
 
RESERVED3
[29U];

1028 
__OM
 
uöt32_t
 
IWR
;

1029 
__IM
 
uöt32_t
 
IRR
;

1030 
__IOM
 
uöt32_t
 
IMCR
;

1031 
uöt32_t
 
RESERVED4
[43U];

1032 
__OM
 
uöt32_t
 
LAR
;

1033 
__IM
 
uöt32_t
 
LSR
;

1034 
uöt32_t
 
RESERVED5
[6U];

1035 
__IM
 
uöt32_t
 
PID4
;

1036 
__IM
 
uöt32_t
 
PID5
;

1037 
__IM
 
uöt32_t
 
PID6
;

1038 
__IM
 
uöt32_t
 
PID7
;

1039 
__IM
 
uöt32_t
 
PID0
;

1040 
__IM
 
uöt32_t
 
PID1
;

1041 
__IM
 
uöt32_t
 
PID2
;

1042 
__IM
 
uöt32_t
 
PID3
;

1043 
__IM
 
uöt32_t
 
CID0
;

1044 
__IM
 
uöt32_t
 
CID1
;

1045 
__IM
 
uöt32_t
 
CID2
;

1046 
__IM
 
uöt32_t
 
CID3
;

1047 } 
	tITM_Ty≥
;

1050 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1051 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

1054 
	#ITM_TCR_BUSY_Pos
 23U

	)

1055 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1057 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

1058 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

1060 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1061 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1063 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

1064 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

1066 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1067 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1069 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1070 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1072 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1073 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1075 
	#ITM_TCR_TSENA_Pos
 1U

	)

1076 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1078 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1079 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1082 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1083 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1086 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1087 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1090 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1091 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1094 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1095 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1097 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1098 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1100 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1101 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1118 
__IOM
 
uöt32_t
 
CTRL
;

1119 
__IOM
 
uöt32_t
 
CYCCNT
;

1120 
__IOM
 
uöt32_t
 
CPICNT
;

1121 
__IOM
 
uöt32_t
 
EXCCNT
;

1122 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1123 
__IOM
 
uöt32_t
 
LSUCNT
;

1124 
__IOM
 
uöt32_t
 
FOLDCNT
;

1125 
__IM
 
uöt32_t
 
PCSR
;

1126 
__IOM
 
uöt32_t
 
COMP0
;

1127 
__IOM
 
uöt32_t
 
MASK0
;

1128 
__IOM
 
uöt32_t
 
FUNCTION0
;

1129 
uöt32_t
 
RESERVED0
[1U];

1130 
__IOM
 
uöt32_t
 
COMP1
;

1131 
__IOM
 
uöt32_t
 
MASK1
;

1132 
__IOM
 
uöt32_t
 
FUNCTION1
;

1133 
uöt32_t
 
RESERVED1
[1U];

1134 
__IOM
 
uöt32_t
 
COMP2
;

1135 
__IOM
 
uöt32_t
 
MASK2
;

1136 
__IOM
 
uöt32_t
 
FUNCTION2
;

1137 
uöt32_t
 
RESERVED2
[1U];

1138 
__IOM
 
uöt32_t
 
COMP3
;

1139 
__IOM
 
uöt32_t
 
MASK3
;

1140 
__IOM
 
uöt32_t
 
FUNCTION3
;

1141 
uöt32_t
 
RESERVED3
[981U];

1142 
__OM
 
uöt32_t
 
LAR
;

1143 
__IM
 
uöt32_t
 
LSR
;

1144 } 
	tDWT_Ty≥
;

1147 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1148 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1150 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1151 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1153 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1154 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1156 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1157 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1159 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1160 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1162 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1163 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1165 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1166 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1168 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1169 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1171 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1172 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1174 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1175 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1177 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1178 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1180 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1181 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1183 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1184 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1186 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1187 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1189 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1190 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1192 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1193 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1195 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1196 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1198 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1199 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1202 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1203 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1206 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1207 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1210 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1211 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1214 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1215 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1218 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1219 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1222 
	#DWT_MASK_MASK_Pos
 0U

	)

1223 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1226 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1227 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1229 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1230 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1232 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1233 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1235 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1236 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1238 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1239 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1241 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1242 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1244 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1245 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1247 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1248 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1250 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1251 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1268 
__IM
 
uöt32_t
 
SSPSR
;

1269 
__IOM
 
uöt32_t
 
CSPSR
;

1270 
uöt32_t
 
RESERVED0
[2U];

1271 
__IOM
 
uöt32_t
 
ACPR
;

1272 
uöt32_t
 
RESERVED1
[55U];

1273 
__IOM
 
uöt32_t
 
SPPR
;

1274 
uöt32_t
 
RESERVED2
[131U];

1275 
__IM
 
uöt32_t
 
FFSR
;

1276 
__IOM
 
uöt32_t
 
FFCR
;

1277 
__IM
 
uöt32_t
 
FSCR
;

1278 
uöt32_t
 
RESERVED3
[759U];

1279 
__IM
 
uöt32_t
 
TRIGGER
;

1280 
__IM
 
uöt32_t
 
FIFO0
;

1281 
__IM
 
uöt32_t
 
ITATBCTR2
;

1282 
uöt32_t
 
RESERVED4
[1U];

1283 
__IM
 
uöt32_t
 
ITATBCTR0
;

1284 
__IM
 
uöt32_t
 
FIFO1
;

1285 
__IOM
 
uöt32_t
 
ITCTRL
;

1286 
uöt32_t
 
RESERVED5
[39U];

1287 
__IOM
 
uöt32_t
 
CLAIMSET
;

1288 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1289 
uöt32_t
 
RESERVED7
[8U];

1290 
__IM
 
uöt32_t
 
DEVID
;

1291 
__IM
 
uöt32_t
 
DEVTYPE
;

1292 } 
	tTPI_Ty≥
;

1295 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1296 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1299 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1300 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1303 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1304 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1306 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1307 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1309 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1310 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1312 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1313 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1316 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1317 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1319 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1320 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1323 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1324 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1327 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1328 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1330 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1331 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1333 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1334 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1336 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1337 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1339 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1340 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1342 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1343 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1345 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1346 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1349 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1350 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1352 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1353 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1356 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1357 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1359 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1360 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1362 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1363 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1365 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1366 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1368 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1369 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1371 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1372 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1374 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1375 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1378 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1379 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1381 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1382 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1385 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1386 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1389 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1390 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1392 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1393 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1395 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1396 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1398 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1399 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1401 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1402 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1404 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1405 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1408 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1409 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1411 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1412 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1417 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1430 
__IM
 
uöt32_t
 
TYPE
;

1431 
__IOM
 
uöt32_t
 
CTRL
;

1432 
__IOM
 
uöt32_t
 
RNR
;

1433 
__IOM
 
uöt32_t
 
RBAR
;

1434 
__IOM
 
uöt32_t
 
RASR
;

1435 
__IOM
 
uöt32_t
 
RBAR_A1
;

1436 
__IOM
 
uöt32_t
 
RASR_A1
;

1437 
__IOM
 
uöt32_t
 
RBAR_A2
;

1438 
__IOM
 
uöt32_t
 
RASR_A2
;

1439 
__IOM
 
uöt32_t
 
RBAR_A3
;

1440 
__IOM
 
uöt32_t
 
RASR_A3
;

1441 } 
	tMPU_Ty≥
;

1443 
	#MPU_TYPE_RALIASES
 4U

	)

1446 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1447 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1449 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1450 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1452 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1453 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1456 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1457 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1459 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1460 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1462 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1463 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1466 
	#MPU_RNR_REGION_Pos
 0U

	)

1467 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1470 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1471 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1473 
	#MPU_RBAR_VALID_Pos
 4U

	)

1474 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1476 
	#MPU_RBAR_REGION_Pos
 0U

	)

1477 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1480 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1481 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1483 
	#MPU_RASR_XN_Pos
 28U

	)

1484 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1486 
	#MPU_RASR_AP_Pos
 24U

	)

1487 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1489 
	#MPU_RASR_TEX_Pos
 19U

	)

1490 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1492 
	#MPU_RASR_S_Pos
 18U

	)

1493 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1495 
	#MPU_RASR_C_Pos
 17U

	)

1496 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1498 
	#MPU_RASR_B_Pos
 16U

	)

1499 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1501 
	#MPU_RASR_SRD_Pos
 8U

	)

1502 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1504 
	#MPU_RASR_SIZE_Pos
 1U

	)

1505 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1507 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1508 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1526 
uöt32_t
 
RESERVED0
[1U];

1527 
__IOM
 
uöt32_t
 
FPCCR
;

1528 
__IOM
 
uöt32_t
 
FPCAR
;

1529 
__IOM
 
uöt32_t
 
FPDSCR
;

1530 
__IM
 
uöt32_t
 
MVFR0
;

1531 
__IM
 
uöt32_t
 
MVFR1
;

1532 
__IM
 
uöt32_t
 
MVFR2
;

1533 } 
	tFPU_Ty≥
;

1536 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1537 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1539 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1540 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1542 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1543 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1545 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1546 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1548 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1549 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1551 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1552 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1554 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1555 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1557 
	#FPU_FPCCR_USER_Pos
 1U

	)

1558 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1560 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1561 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1564 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1565 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1568 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1569 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1571 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1572 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1574 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1575 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1577 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1578 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1581 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1582 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1584 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1585 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1587 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1588 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1590 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1591 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1593 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1594 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1596 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1597 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1599 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1600 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1602 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1603 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1606 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1607 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1609 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1610 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1612 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1613 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1615 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1616 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1635 
__IOM
 
uöt32_t
 
DHCSR
;

1636 
__OM
 
uöt32_t
 
DCRSR
;

1637 
__IOM
 
uöt32_t
 
DCRDR
;

1638 
__IOM
 
uöt32_t
 
DEMCR
;

1639 } 
	tC‹eDebug_Ty≥
;

1642 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1643 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1645 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1646 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1648 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1649 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1651 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1652 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1654 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1655 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1657 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1658 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1660 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1661 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1663 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1664 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1666 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1667 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1669 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1670 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1672 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1673 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1675 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1676 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1679 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1680 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1682 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1683 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1686 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1687 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1689 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1690 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1692 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1693 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1695 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1696 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1698 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1699 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1701 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1702 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1704 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1705 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1707 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1708 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1710 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1711 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1713 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1714 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1716 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1717 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1719 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1720 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1722 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1723 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1741 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1749 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1762 
	#SCS_BASE
 (0xE000E000ULË

	)

1763 
	#ITM_BASE
 (0xE0000000ULË

	)

1764 
	#DWT_BASE
 (0xE0001000ULË

	)

1765 
	#TPI_BASE
 (0xE0040000ULË

	)

1766 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1767 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1768 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1769 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1771 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1772 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1773 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1774 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1775 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1776 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1777 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1778 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1780 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1781 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1782 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1785 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1786 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1814 #ifde‡
CMSIS_NVIC_VIRTUAL


1815 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1816 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1818 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1820 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1821 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1822 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1823 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1824 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1825 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1826 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1827 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1828 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1829 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1830 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1831 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1834 #ifde‡
CMSIS_VECTAB_VIRTUAL


1835 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1836 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1838 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1840 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1841 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1844 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1848 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1849 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1850 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1851 
	#EXC_RETURN_HANDLER_FPU
 (0xFFFFFFE1ULË

	)

1852 
	#EXC_RETURN_THREAD_MSP_FPU
 (0xFFFFFFE9ULË

	)

1853 
	#EXC_RETURN_THREAD_PSP_FPU
 (0xFFFFFFEDULË

	)

1865 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1867 
uöt32_t
 
ªg_vÆue
;

1868 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1870 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1871 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1872 
ªg_vÆue
 = (reg_value |

1873 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1874 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1875 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1884 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1886  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1896 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1898 i‡((
öt32_t
)(
IRQn
) >= 0)

1900 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1913 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1915 i‡((
öt32_t
)(
IRQn
) >= 0)

1917 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1932 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1934 i‡((
öt32_t
)(
IRQn
) >= 0)

1936 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1937 
__DSB
();

1938 
__ISB
();

1951 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1953 i‡((
öt32_t
)(
IRQn
) >= 0)

1955 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1970 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1972 i‡((
öt32_t
)(
IRQn
) >= 0)

1974 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1985 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1987 i‡((
öt32_t
)(
IRQn
) >= 0)

1989 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2002 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

2004 i‡((
öt32_t
)(
IRQn
) >= 0)

2006 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2024 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2026 i‡((
öt32_t
)(
IRQn
) >= 0)

2028 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2032 
SCB
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2046 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

2049 i‡((
öt32_t
)(
IRQn
) >= 0)

2051 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2055 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2071 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

2073 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2074 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2075 
uöt32_t
 
SubPri‹ôyBôs
;

2077 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2078 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2081 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

2082 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

2098 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

2100 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2101 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2102 
uöt32_t
 
SubPri‹ôyBôs
;

2104 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2105 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2107 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

2108 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

2121 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

2123 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2124 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

2136 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

2138 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2139  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

2147 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

2149 
__DSB
();

2151 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2152 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2153 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2154 
__DSB
();

2158 
__NOP
();

2166 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2168 
	~"mpu_¨mv7.h
"

2188 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2190 
uöt32_t
 
mv‰0
;

2192 
mv‰0
 = 
SCB
->
MVFR0
;

2193 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x220U)

2197 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2221 
	#CCSIDR_WAYS
(
x
Ë(((xË& 
SCB_CCSIDR_ASSOCIATIVITY_Msk
Ë>> 
SCB_CCSIDR_ASSOCIATIVITY_Pos
)

	)

2222 
	#CCSIDR_SETS
(
x
Ë(((xË& 
SCB_CCSIDR_NUMSETS_Msk
 ) >> 
SCB_CCSIDR_NUMSETS_Pos
 )

	)

2229 
__STATIC_INLINE
 
SCB_E«bÀICache
 ()

2231 #i‡
deföed
 (
__ICACHE_PRESENT
) && (__ICACHE_PRESENT == 1U)

2232 
__DSB
();

2233 
__ISB
();

2234 
SCB
->
ICIALLU
 = 0UL;

2235 
__DSB
();

2236 
__ISB
();

2237 
SCB
->
CCR
 |(
uöt32_t
)
SCB_CCR_IC_Msk
;

2238 
__DSB
();

2239 
__ISB
();

2248 
__STATIC_INLINE
 
SCB_DißbÀICache
 ()

2250 #i‡
deföed
 (
__ICACHE_PRESENT
) && (__ICACHE_PRESENT == 1U)

2251 
__DSB
();

2252 
__ISB
();

2253 
SCB
->
CCR
 &~(
uöt32_t
)
SCB_CCR_IC_Msk
;

2254 
SCB
->
ICIALLU
 = 0UL;

2255 
__DSB
();

2256 
__ISB
();

2265 
__STATIC_INLINE
 
SCB_InvÆid©eICache
 ()

2267 #i‡
deföed
 (
__ICACHE_PRESENT
) && (__ICACHE_PRESENT == 1U)

2268 
__DSB
();

2269 
__ISB
();

2270 
SCB
->
ICIALLU
 = 0UL;

2271 
__DSB
();

2272 
__ISB
();

2281 
__STATIC_INLINE
 
SCB_E«bÀDCache
 ()

2283 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2284 
uöt32_t
 
ccsidr
;

2285 
uöt32_t
 
£ts
;

2286 
uöt32_t
 
ways
;

2288 
SCB
->
CSSELR
 = 0U;

2289 
__DSB
();

2291 
ccsidr
 = 
SCB
->
CCSIDR
;

2294 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2296 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2298 
SCB
->
DCISW
 = (((
£ts
 << 
SCB_DCISW_SET_Pos
Ë& 
SCB_DCISW_SET_Msk
) |

2299 ((
ways
 << 
SCB_DCISW_WAY_Pos
Ë& 
SCB_DCISW_WAY_Msk
) );

2300 #i‡
deföed
 ( 
__CC_ARM
 )

2301 
__scheduÀ_b¨rõr
();

2303 } 
ways
-- != 0U);

2304 } 
£ts
-- != 0U);

2305 
__DSB
();

2307 
SCB
->
CCR
 |(
uöt32_t
)
SCB_CCR_DC_Msk
;

2309 
__DSB
();

2310 
__ISB
();

2319 
__STATIC_INLINE
 
SCB_DißbÀDCache
 ()

2321 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2322 
uöt32_t
 
ccsidr
;

2323 
uöt32_t
 
£ts
;

2324 
uöt32_t
 
ways
;

2326 
SCB
->
CSSELR
 = 0U;

2327 
__DSB
();

2329 
SCB
->
CCR
 &~(
uöt32_t
)
SCB_CCR_DC_Msk
;

2330 
__DSB
();

2332 
ccsidr
 = 
SCB
->
CCSIDR
;

2335 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2337 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2339 
SCB
->
DCCISW
 = (((
£ts
 << 
SCB_DCCISW_SET_Pos
Ë& 
SCB_DCCISW_SET_Msk
) |

2340 ((
ways
 << 
SCB_DCCISW_WAY_Pos
Ë& 
SCB_DCCISW_WAY_Msk
) );

2341 #i‡
deföed
 ( 
__CC_ARM
 )

2342 
__scheduÀ_b¨rõr
();

2344 } 
ways
-- != 0U);

2345 } 
£ts
-- != 0U);

2347 
__DSB
();

2348 
__ISB
();

2357 
__STATIC_INLINE
 
SCB_InvÆid©eDCache
 ()

2359 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2360 
uöt32_t
 
ccsidr
;

2361 
uöt32_t
 
£ts
;

2362 
uöt32_t
 
ways
;

2364 
SCB
->
CSSELR
 = 0U;

2365 
__DSB
();

2367 
ccsidr
 = 
SCB
->
CCSIDR
;

2370 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2372 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2374 
SCB
->
DCISW
 = (((
£ts
 << 
SCB_DCISW_SET_Pos
Ë& 
SCB_DCISW_SET_Msk
) |

2375 ((
ways
 << 
SCB_DCISW_WAY_Pos
Ë& 
SCB_DCISW_WAY_Msk
) );

2376 #i‡
deföed
 ( 
__CC_ARM
 )

2377 
__scheduÀ_b¨rõr
();

2379 } 
ways
-- != 0U);

2380 } 
£ts
-- != 0U);

2382 
__DSB
();

2383 
__ISB
();

2392 
__STATIC_INLINE
 
SCB_CÀ™DCache
 ()

2394 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2395 
uöt32_t
 
ccsidr
;

2396 
uöt32_t
 
£ts
;

2397 
uöt32_t
 
ways
;

2399 
SCB
->
CSSELR
 = 0U;

2400 
__DSB
();

2402 
ccsidr
 = 
SCB
->
CCSIDR
;

2405 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2407 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2409 
SCB
->
DCCSW
 = (((
£ts
 << 
SCB_DCCSW_SET_Pos
Ë& 
SCB_DCCSW_SET_Msk
) |

2410 ((
ways
 << 
SCB_DCCSW_WAY_Pos
Ë& 
SCB_DCCSW_WAY_Msk
) );

2411 #i‡
deföed
 ( 
__CC_ARM
 )

2412 
__scheduÀ_b¨rõr
();

2414 } 
ways
-- != 0U);

2415 } 
£ts
-- != 0U);

2417 
__DSB
();

2418 
__ISB
();

2427 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache
 ()

2429 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2430 
uöt32_t
 
ccsidr
;

2431 
uöt32_t
 
£ts
;

2432 
uöt32_t
 
ways
;

2434 
SCB
->
CSSELR
 = 0U;

2435 
__DSB
();

2437 
ccsidr
 = 
SCB
->
CCSIDR
;

2440 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2442 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2444 
SCB
->
DCCISW
 = (((
£ts
 << 
SCB_DCCISW_SET_Pos
Ë& 
SCB_DCCISW_SET_Msk
) |

2445 ((
ways
 << 
SCB_DCCISW_WAY_Pos
Ë& 
SCB_DCCISW_WAY_Msk
) );

2446 #i‡
deföed
 ( 
__CC_ARM
 )

2447 
__scheduÀ_b¨rõr
();

2449 } 
ways
-- != 0U);

2450 } 
£ts
-- != 0U);

2452 
__DSB
();

2453 
__ISB
();

2464 
__STATIC_INLINE
 
SCB_InvÆid©eDCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2466 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2467 
öt32_t
 
›_size
 = 
dsize
;

2468 
uöt32_t
 
›_addr
 = (uöt32_t)
addr
;

2469 
öt32_t
 
löesize
 = 32;

2471 
__DSB
();

2473 
›_size
 > 0) {

2474 
SCB
->
DCIMVAC
 = 
›_addr
;

2475 
›_addr
 +(
uöt32_t
)
löesize
;

2476 
›_size
 -
löesize
;

2479 
__DSB
();

2480 
__ISB
();

2491 
__STATIC_INLINE
 
SCB_CÀ™DCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2493 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2494 
öt32_t
 
›_size
 = 
dsize
;

2495 
uöt32_t
 
›_addr
 = (uöt32_tË
addr
;

2496 
öt32_t
 
löesize
 = 32;

2498 
__DSB
();

2500 
›_size
 > 0) {

2501 
SCB
->
DCCMVAC
 = 
›_addr
;

2502 
›_addr
 +(
uöt32_t
)
löesize
;

2503 
›_size
 -
löesize
;

2506 
__DSB
();

2507 
__ISB
();

2518 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2520 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2521 
öt32_t
 
›_size
 = 
dsize
;

2522 
uöt32_t
 
›_addr
 = (uöt32_tË
addr
;

2523 
öt32_t
 
löesize
 = 32;

2525 
__DSB
();

2527 
›_size
 > 0) {

2528 
SCB
->
DCCIMVAC
 = 
›_addr
;

2529 
›_addr
 +(
uöt32_t
)
löesize
;

2530 
›_size
 -
löesize
;

2533 
__DSB
();

2534 
__ISB
();

2551 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2564 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2566 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2571 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2572 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2573 
SysTick
->
VAL
 = 0UL;

2574 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2575 
SysTick_CTRL_TICKINT_Msk
 |

2576 
SysTick_CTRL_ENABLE_Msk
;

2594 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2595 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2606 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2608 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2609 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2611 
ITM
->
PORT
[0U].
u32
 == 0UL)

2613 
__NOP
();

2615 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2617  (
	gch
);

2627 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2629 
öt32_t
 
	gch
 = -1;

2631 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2633 
ch
 = 
ITM_RxBuf„r
;

2634 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2637  (
	gch
);

2647 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2650 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2665 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_sc000.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_SC000_H_GENERIC


32 
	#__CORE_SC000_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__SC000_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__SC000_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__SC000_CMSIS_VERSION
 ((
__SC000_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__SC000_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_SC
 (000UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_SC000_H_DEPENDANT


127 
	#__CORE_SC000_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__SC000_REV


136 
	#__SC000_REV
 0x0000U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 2U

	)

150 #i‚de‡
__Víd‹_SysTickC⁄fig


151 
	#__Víd‹_SysTickC⁄fig
 0U

	)

164 #ifde‡
__˝lu•lus


165 
	#__I
 vﬁ©ûê

	)

167 
	#__I
 vﬁ©ûêc⁄°

	)

169 
	#__O
 vﬁ©ûê

	)

170 
	#__IO
 vﬁ©ûê

	)

173 
	#__IM
 vﬁ©ûêc⁄°

	)

174 
	#__OM
 vﬁ©ûê

	)

175 
	#__IOM
 vﬁ©ûê

	)

209 
uöt32_t
 
_ª£rved0
:28;

210 
uöt32_t
 
V
:1;

211 
uöt32_t
 
C
:1;

212 
uöt32_t
 
Z
:1;

213 
uöt32_t
 
N
:1;

214 } 
b
;

215 
uöt32_t
 
w
;

216 } 
	tAPSR_Ty≥
;

219 
	#APSR_N_Pos
 31U

	)

220 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

222 
	#APSR_Z_Pos
 30U

	)

223 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

225 
	#APSR_C_Pos
 29U

	)

226 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

228 
	#APSR_V_Pos
 28U

	)

229 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

239 
uöt32_t
 
ISR
:9;

240 
uöt32_t
 
_ª£rved0
:23;

241 } 
b
;

242 
uöt32_t
 
w
;

243 } 
	tIPSR_Ty≥
;

246 
	#IPSR_ISR_Pos
 0U

	)

247 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

257 
uöt32_t
 
ISR
:9;

258 
uöt32_t
 
_ª£rved0
:15;

259 
uöt32_t
 
T
:1;

260 
uöt32_t
 
_ª£rved1
:3;

261 
uöt32_t
 
V
:1;

262 
uöt32_t
 
C
:1;

263 
uöt32_t
 
Z
:1;

264 
uöt32_t
 
N
:1;

265 } 
b
;

266 
uöt32_t
 
w
;

267 } 
	txPSR_Ty≥
;

270 
	#xPSR_N_Pos
 31U

	)

271 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

273 
	#xPSR_Z_Pos
 30U

	)

274 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

276 
	#xPSR_C_Pos
 29U

	)

277 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

279 
	#xPSR_V_Pos
 28U

	)

280 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

282 
	#xPSR_T_Pos
 24U

	)

283 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

285 
	#xPSR_ISR_Pos
 0U

	)

286 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

296 
uöt32_t
 
_ª£rved0
:1;

297 
uöt32_t
 
SPSEL
:1;

298 
uöt32_t
 
_ª£rved1
:30;

299 } 
b
;

300 
uöt32_t
 
w
;

301 } 
	tCONTROL_Ty≥
;

304 
	#CONTROL_SPSEL_Pos
 1U

	)

305 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

322 
__IOM
 
uöt32_t
 
ISER
[1U];

323 
uöt32_t
 
RESERVED0
[31U];

324 
__IOM
 
uöt32_t
 
ICER
[1U];

325 
uöt32_t
 
RSERVED1
[31U];

326 
__IOM
 
uöt32_t
 
ISPR
[1U];

327 
uöt32_t
 
RESERVED2
[31U];

328 
__IOM
 
uöt32_t
 
ICPR
[1U];

329 
uöt32_t
 
RESERVED3
[31U];

330 
uöt32_t
 
RESERVED4
[64U];

331 
__IOM
 
uöt32_t
 
IP
[8U];

332 } 
	tNVIC_Ty≥
;

349 
__IM
 
uöt32_t
 
CPUID
;

350 
__IOM
 
uöt32_t
 
ICSR
;

351 
__IOM
 
uöt32_t
 
VTOR
;

352 
__IOM
 
uöt32_t
 
AIRCR
;

353 
__IOM
 
uöt32_t
 
SCR
;

354 
__IOM
 
uöt32_t
 
CCR
;

355 
uöt32_t
 
RESERVED0
[1U];

356 
__IOM
 
uöt32_t
 
SHP
[2U];

357 
__IOM
 
uöt32_t
 
SHCSR
;

358 
uöt32_t
 
RESERVED1
[154U];

359 
__IOM
 
uöt32_t
 
SFCR
;

360 } 
	tSCB_Ty≥
;

363 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

364 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

366 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

367 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

369 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

370 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

372 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

373 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

375 
	#SCB_CPUID_REVISION_Pos
 0U

	)

376 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

379 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

380 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

382 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

383 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

385 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

386 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

388 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

389 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

391 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

392 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

394 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

395 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

397 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

398 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

400 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

401 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

403 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

404 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

407 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

408 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

412 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

414 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

417 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

418 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

420 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

421 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

423 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

424 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

427 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

428 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

430 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

431 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

433 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

434 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

437 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

438 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

440 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

441 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

444 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

445 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

462 
uöt32_t
 
RESERVED0
[2U];

463 
__IOM
 
uöt32_t
 
ACTLR
;

464 } 
	tSCnSCB_Ty≥
;

467 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

468 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

485 
__IOM
 
uöt32_t
 
CTRL
;

486 
__IOM
 
uöt32_t
 
LOAD
;

487 
__IOM
 
uöt32_t
 
VAL
;

488 
__IM
 
uöt32_t
 
CALIB
;

489 } 
	tSysTick_Ty≥
;

492 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

493 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

495 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

496 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

498 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

499 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

501 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

502 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

505 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

506 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

509 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

510 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

513 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

514 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

516 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

517 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

519 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

520 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

524 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

537 
__IM
 
uöt32_t
 
TYPE
;

538 
__IOM
 
uöt32_t
 
CTRL
;

539 
__IOM
 
uöt32_t
 
RNR
;

540 
__IOM
 
uöt32_t
 
RBAR
;

541 
__IOM
 
uöt32_t
 
RASR
;

542 } 
	tMPU_Ty≥
;

545 
	#MPU_TYPE_IREGION_Pos
 16U

	)

546 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

548 
	#MPU_TYPE_DREGION_Pos
 8U

	)

549 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

551 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

552 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

555 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

556 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

558 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

559 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

561 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

562 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

565 
	#MPU_RNR_REGION_Pos
 0U

	)

566 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

569 
	#MPU_RBAR_ADDR_Pos
 8U

	)

570 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

572 
	#MPU_RBAR_VALID_Pos
 4U

	)

573 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

575 
	#MPU_RBAR_REGION_Pos
 0U

	)

576 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

579 
	#MPU_RASR_ATTRS_Pos
 16U

	)

580 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

582 
	#MPU_RASR_XN_Pos
 28U

	)

583 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

585 
	#MPU_RASR_AP_Pos
 24U

	)

586 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

588 
	#MPU_RASR_TEX_Pos
 19U

	)

589 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

591 
	#MPU_RASR_S_Pos
 18U

	)

592 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

594 
	#MPU_RASR_C_Pos
 17U

	)

595 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

597 
	#MPU_RASR_B_Pos
 16U

	)

598 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

600 
	#MPU_RASR_SRD_Pos
 8U

	)

601 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

603 
	#MPU_RASR_SIZE_Pos
 1U

	)

604 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

606 
	#MPU_RASR_ENABLE_Pos
 0U

	)

607 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

636 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

644 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

657 
	#SCS_BASE
 (0xE000E000ULË

	)

658 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

659 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

660 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

662 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

663 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

664 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

665 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

667 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

668 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

669 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

697 #ifde‡
CMSIS_NVIC_VIRTUAL


698 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


699 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

701 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


705 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

706 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

707 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

708 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

709 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

710 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

712 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

713 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

714 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

717 #ifde‡
CMSIS_VECTAB_VIRTUAL


718 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


719 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

721 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


723 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

724 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

727 
	#NVIC_USER_IRQ_OFFSET
 16

	)

731 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

732 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

733 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

738 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

739 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

740 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

749 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

751 i‡((
öt32_t
)(
IRQn
) >= 0)

753 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

766 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

768 i‡((
öt32_t
)(
IRQn
) >= 0)

770 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

785 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

787 i‡((
öt32_t
)(
IRQn
) >= 0)

789 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

790 
__DSB
();

791 
__ISB
();

804 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

806 i‡((
öt32_t
)(
IRQn
) >= 0)

808 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

823 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

825 i‡((
öt32_t
)(
IRQn
) >= 0)

827 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

838 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

840 i‡((
öt32_t
)(
IRQn
) >= 0)

842 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

856 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

858 i‡((
öt32_t
)(
IRQn
) >= 0)

860 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

861 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

865 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

866 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

880 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

883 i‡((
öt32_t
)(
IRQn
) >= 0)

885 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

889 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

903 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

905 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

906 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

918 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

920 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

921  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

929 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

931 
__DSB
();

933 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

934 
SCB_AIRCR_SYSRESETREQ_Msk
);

935 
__DSB
();

939 
__NOP
();

962 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

980 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

993 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

995 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1000 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1001 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1002 
SysTick
->
VAL
 = 0UL;

1003 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1004 
SysTick_CTRL_TICKINT_Msk
 |

1005 
SysTick_CTRL_ENABLE_Msk
;

1016 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_sc300.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_SC300_H_GENERIC


32 
	#__CORE_SC300_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__SC300_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__SC300_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__SC300_CMSIS_VERSION
 ((
__SC300_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__SC300_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_SC
 (300UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_SC300_H_DEPENDANT


127 
	#__CORE_SC300_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__SC300_REV


136 
	#__SC300_REV
 0x0000U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 3U

	)

150 #i‚de‡
__Víd‹_SysTickC⁄fig


151 
	#__Víd‹_SysTickC⁄fig
 0U

	)

164 #ifde‡
__˝lu•lus


165 
	#__I
 vﬁ©ûê

	)

167 
	#__I
 vﬁ©ûêc⁄°

	)

169 
	#__O
 vﬁ©ûê

	)

170 
	#__IO
 vﬁ©ûê

	)

173 
	#__IM
 vﬁ©ûêc⁄°

	)

174 
	#__OM
 vﬁ©ûê

	)

175 
	#__IOM
 vﬁ©ûê

	)

210 
uöt32_t
 
_ª£rved0
:27;

211 
uöt32_t
 
Q
:1;

212 
uöt32_t
 
V
:1;

213 
uöt32_t
 
C
:1;

214 
uöt32_t
 
Z
:1;

215 
uöt32_t
 
N
:1;

216 } 
b
;

217 
uöt32_t
 
w
;

218 } 
	tAPSR_Ty≥
;

221 
	#APSR_N_Pos
 31U

	)

222 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

224 
	#APSR_Z_Pos
 30U

	)

225 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

227 
	#APSR_C_Pos
 29U

	)

228 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

230 
	#APSR_V_Pos
 28U

	)

231 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
	#APSR_Q_Pos
 27U

	)

234 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

244 
uöt32_t
 
ISR
:9;

245 
uöt32_t
 
_ª£rved0
:23;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tIPSR_Ty≥
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:1;

264 
uöt32_t
 
ICI_IT_1
:6;

265 
uöt32_t
 
_ª£rved1
:8;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
ICI_IT_2
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

278 
	#xPSR_N_Pos
 31U

	)

279 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

281 
	#xPSR_Z_Pos
 30U

	)

282 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

284 
	#xPSR_C_Pos
 29U

	)

285 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

287 
	#xPSR_V_Pos
 28U

	)

288 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

290 
	#xPSR_Q_Pos
 27U

	)

291 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

293 
	#xPSR_ICI_IT_2_Pos
 25U

	)

294 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

296 
	#xPSR_T_Pos
 24U

	)

297 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

299 
	#xPSR_ICI_IT_1_Pos
 10U

	)

300 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

302 
	#xPSR_ISR_Pos
 0U

	)

303 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

313 
uöt32_t
 
nPRIV
:1;

314 
uöt32_t
 
SPSEL
:1;

315 
uöt32_t
 
_ª£rved1
:30;

316 } 
b
;

317 
uöt32_t
 
w
;

318 } 
	tCONTROL_Ty≥
;

321 
	#CONTROL_SPSEL_Pos
 1U

	)

322 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

324 
	#CONTROL_nPRIV_Pos
 0U

	)

325 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

342 
__IOM
 
uöt32_t
 
ISER
[8U];

343 
uöt32_t
 
RESERVED0
[24U];

344 
__IOM
 
uöt32_t
 
ICER
[8U];

345 
uöt32_t
 
RSERVED1
[24U];

346 
__IOM
 
uöt32_t
 
ISPR
[8U];

347 
uöt32_t
 
RESERVED2
[24U];

348 
__IOM
 
uöt32_t
 
ICPR
[8U];

349 
uöt32_t
 
RESERVED3
[24U];

350 
__IOM
 
uöt32_t
 
IABR
[8U];

351 
uöt32_t
 
RESERVED4
[56U];

352 
__IOM
 
uöt8_t
 
IP
[240U];

353 
uöt32_t
 
RESERVED5
[644U];

354 
__OM
 
uöt32_t
 
STIR
;

355 } 
	tNVIC_Ty≥
;

358 
	#NVIC_STIR_INTID_Pos
 0U

	)

359 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

376 
__IM
 
uöt32_t
 
CPUID
;

377 
__IOM
 
uöt32_t
 
ICSR
;

378 
__IOM
 
uöt32_t
 
VTOR
;

379 
__IOM
 
uöt32_t
 
AIRCR
;

380 
__IOM
 
uöt32_t
 
SCR
;

381 
__IOM
 
uöt32_t
 
CCR
;

382 
__IOM
 
uöt8_t
 
SHP
[12U];

383 
__IOM
 
uöt32_t
 
SHCSR
;

384 
__IOM
 
uöt32_t
 
CFSR
;

385 
__IOM
 
uöt32_t
 
HFSR
;

386 
__IOM
 
uöt32_t
 
DFSR
;

387 
__IOM
 
uöt32_t
 
MMFAR
;

388 
__IOM
 
uöt32_t
 
BFAR
;

389 
__IOM
 
uöt32_t
 
AFSR
;

390 
__IM
 
uöt32_t
 
PFR
[2U];

391 
__IM
 
uöt32_t
 
DFR
;

392 
__IM
 
uöt32_t
 
ADR
;

393 
__IM
 
uöt32_t
 
MMFR
[4U];

394 
__IM
 
uöt32_t
 
ISAR
[5U];

395 
uöt32_t
 
RESERVED0
[5U];

396 
__IOM
 
uöt32_t
 
CPACR
;

397 
uöt32_t
 
RESERVED1
[129U];

398 
__IOM
 
uöt32_t
 
SFCR
;

399 } 
	tSCB_Ty≥
;

402 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

403 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

405 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

406 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

408 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

409 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

411 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

412 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

414 
	#SCB_CPUID_REVISION_Pos
 0U

	)

415 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

418 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

419 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

421 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

422 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

424 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

425 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

427 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

428 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

431 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

433 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

434 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

436 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

437 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

439 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

440 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

442 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

443 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

445 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

446 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

449 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

450 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

452 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

453 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

456 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

457 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

459 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

460 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

462 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

463 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

465 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

466 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

468 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

469 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

471 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

472 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

474 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

475 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

478 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

479 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

481 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

482 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

484 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

485 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

488 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

489 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

491 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

492 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

494 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

495 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

497 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

498 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

500 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

501 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

503 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

504 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

507 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

508 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

510 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

511 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

513 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

514 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

516 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

517 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

519 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

520 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

522 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

523 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

525 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

526 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

528 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

529 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

531 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

532 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

534 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

535 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

537 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

538 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

540 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

541 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

543 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

544 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

546 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

547 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

550 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

551 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

553 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

554 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

556 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

557 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

560 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

561 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

563 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

564 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

566 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

567 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

569 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

570 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

572 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

573 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

576 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

577 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

579 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

580 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

582 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

583 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

585 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

586 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

588 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

589 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

591 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

592 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

595 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

596 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

598 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

599 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

601 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

602 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

604 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

605 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

607 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

608 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

610 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

611 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

614 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

615 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

617 
	#SCB_HFSR_FORCED_Pos
 30U

	)

618 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

620 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

621 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

624 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

625 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

627 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

628 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

630 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

631 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

633 
	#SCB_DFSR_BKPT_Pos
 1U

	)

634 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

636 
	#SCB_DFSR_HALTED_Pos
 0U

	)

637 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

654 
uöt32_t
 
RESERVED0
[1U];

655 
__IM
 
uöt32_t
 
ICTR
;

656 
uöt32_t
 
RESERVED1
[1U];

657 } 
	tSCnSCB_Ty≥
;

660 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

661 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

678 
__IOM
 
uöt32_t
 
CTRL
;

679 
__IOM
 
uöt32_t
 
LOAD
;

680 
__IOM
 
uöt32_t
 
VAL
;

681 
__IM
 
uöt32_t
 
CALIB
;

682 } 
	tSysTick_Ty≥
;

685 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

686 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

688 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

689 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

691 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

692 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

694 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

695 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

698 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

699 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

702 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

703 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

706 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

707 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

709 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

710 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

712 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

713 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

730 
__OM
 union

732 
__OM
 
uöt8_t
 
u8
;

733 
__OM
 
uöt16_t
 
u16
;

734 
__OM
 
uöt32_t
 
u32
;

735 } 
PORT
 [32U];

736 
uöt32_t
 
RESERVED0
[864U];

737 
__IOM
 
uöt32_t
 
TER
;

738 
uöt32_t
 
RESERVED1
[15U];

739 
__IOM
 
uöt32_t
 
TPR
;

740 
uöt32_t
 
RESERVED2
[15U];

741 
__IOM
 
uöt32_t
 
TCR
;

742 
uöt32_t
 
RESERVED3
[29U];

743 
__OM
 
uöt32_t
 
IWR
;

744 
__IM
 
uöt32_t
 
IRR
;

745 
__IOM
 
uöt32_t
 
IMCR
;

746 
uöt32_t
 
RESERVED4
[43U];

747 
__OM
 
uöt32_t
 
LAR
;

748 
__IM
 
uöt32_t
 
LSR
;

749 
uöt32_t
 
RESERVED5
[6U];

750 
__IM
 
uöt32_t
 
PID4
;

751 
__IM
 
uöt32_t
 
PID5
;

752 
__IM
 
uöt32_t
 
PID6
;

753 
__IM
 
uöt32_t
 
PID7
;

754 
__IM
 
uöt32_t
 
PID0
;

755 
__IM
 
uöt32_t
 
PID1
;

756 
__IM
 
uöt32_t
 
PID2
;

757 
__IM
 
uöt32_t
 
PID3
;

758 
__IM
 
uöt32_t
 
CID0
;

759 
__IM
 
uöt32_t
 
CID1
;

760 
__IM
 
uöt32_t
 
CID2
;

761 
__IM
 
uöt32_t
 
CID3
;

762 } 
	tITM_Ty≥
;

765 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

766 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

769 
	#ITM_TCR_BUSY_Pos
 23U

	)

770 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

772 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

773 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

775 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

776 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

778 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

779 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

781 
	#ITM_TCR_SWOENA_Pos
 4U

	)

782 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

784 
	#ITM_TCR_DWTENA_Pos
 3U

	)

785 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

787 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

788 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

790 
	#ITM_TCR_TSENA_Pos
 1U

	)

791 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

793 
	#ITM_TCR_ITMENA_Pos
 0U

	)

794 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

797 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

798 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

801 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

802 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

805 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

806 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

809 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

810 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

812 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

813 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

815 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

816 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

833 
__IOM
 
uöt32_t
 
CTRL
;

834 
__IOM
 
uöt32_t
 
CYCCNT
;

835 
__IOM
 
uöt32_t
 
CPICNT
;

836 
__IOM
 
uöt32_t
 
EXCCNT
;

837 
__IOM
 
uöt32_t
 
SLEEPCNT
;

838 
__IOM
 
uöt32_t
 
LSUCNT
;

839 
__IOM
 
uöt32_t
 
FOLDCNT
;

840 
__IM
 
uöt32_t
 
PCSR
;

841 
__IOM
 
uöt32_t
 
COMP0
;

842 
__IOM
 
uöt32_t
 
MASK0
;

843 
__IOM
 
uöt32_t
 
FUNCTION0
;

844 
uöt32_t
 
RESERVED0
[1U];

845 
__IOM
 
uöt32_t
 
COMP1
;

846 
__IOM
 
uöt32_t
 
MASK1
;

847 
__IOM
 
uöt32_t
 
FUNCTION1
;

848 
uöt32_t
 
RESERVED1
[1U];

849 
__IOM
 
uöt32_t
 
COMP2
;

850 
__IOM
 
uöt32_t
 
MASK2
;

851 
__IOM
 
uöt32_t
 
FUNCTION2
;

852 
uöt32_t
 
RESERVED2
[1U];

853 
__IOM
 
uöt32_t
 
COMP3
;

854 
__IOM
 
uöt32_t
 
MASK3
;

855 
__IOM
 
uöt32_t
 
FUNCTION3
;

856 } 
	tDWT_Ty≥
;

859 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

860 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

862 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

863 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

865 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

866 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

868 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

869 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

871 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

872 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

874 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

875 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

877 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

878 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

880 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

881 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

883 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

884 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

886 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

887 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

889 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

890 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

892 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

893 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

895 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

896 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

898 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

899 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

901 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

902 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

904 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

905 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

907 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

908 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

910 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

911 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

914 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

915 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

918 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

919 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

922 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

923 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

926 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

927 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

930 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

931 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

934 
	#DWT_MASK_MASK_Pos
 0U

	)

935 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

938 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

939 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

941 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

942 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

944 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

945 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

947 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

948 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

950 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

951 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

953 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

954 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

956 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

957 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

959 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

960 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

962 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

963 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

980 
__IM
 
uöt32_t
 
SSPSR
;

981 
__IOM
 
uöt32_t
 
CSPSR
;

982 
uöt32_t
 
RESERVED0
[2U];

983 
__IOM
 
uöt32_t
 
ACPR
;

984 
uöt32_t
 
RESERVED1
[55U];

985 
__IOM
 
uöt32_t
 
SPPR
;

986 
uöt32_t
 
RESERVED2
[131U];

987 
__IM
 
uöt32_t
 
FFSR
;

988 
__IOM
 
uöt32_t
 
FFCR
;

989 
__IM
 
uöt32_t
 
FSCR
;

990 
uöt32_t
 
RESERVED3
[759U];

991 
__IM
 
uöt32_t
 
TRIGGER
;

992 
__IM
 
uöt32_t
 
FIFO0
;

993 
__IM
 
uöt32_t
 
ITATBCTR2
;

994 
uöt32_t
 
RESERVED4
[1U];

995 
__IM
 
uöt32_t
 
ITATBCTR0
;

996 
__IM
 
uöt32_t
 
FIFO1
;

997 
__IOM
 
uöt32_t
 
ITCTRL
;

998 
uöt32_t
 
RESERVED5
[39U];

999 
__IOM
 
uöt32_t
 
CLAIMSET
;

1000 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1001 
uöt32_t
 
RESERVED7
[8U];

1002 
__IM
 
uöt32_t
 
DEVID
;

1003 
__IM
 
uöt32_t
 
DEVTYPE
;

1004 } 
	tTPI_Ty≥
;

1007 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1008 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1011 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1012 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1015 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1016 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1018 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1019 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1021 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1022 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1024 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1025 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1028 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1029 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1031 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1032 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1035 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1036 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1039 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1040 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1042 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1043 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1045 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1046 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1048 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1049 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1051 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1052 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1054 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1055 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1057 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1058 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1061 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1062 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1064 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1065 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1068 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1069 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1071 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1072 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1074 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1075 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1077 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1078 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1080 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1081 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1083 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1084 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1086 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1087 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1090 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1091 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1093 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1094 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1097 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1098 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1101 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1102 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1104 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1105 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1107 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1108 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1110 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1111 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1113 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1114 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1116 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1117 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1120 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1121 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1123 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1124 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1129 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1142 
__IM
 
uöt32_t
 
TYPE
;

1143 
__IOM
 
uöt32_t
 
CTRL
;

1144 
__IOM
 
uöt32_t
 
RNR
;

1145 
__IOM
 
uöt32_t
 
RBAR
;

1146 
__IOM
 
uöt32_t
 
RASR
;

1147 
__IOM
 
uöt32_t
 
RBAR_A1
;

1148 
__IOM
 
uöt32_t
 
RASR_A1
;

1149 
__IOM
 
uöt32_t
 
RBAR_A2
;

1150 
__IOM
 
uöt32_t
 
RASR_A2
;

1151 
__IOM
 
uöt32_t
 
RBAR_A3
;

1152 
__IOM
 
uöt32_t
 
RASR_A3
;

1153 } 
	tMPU_Ty≥
;

1156 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1157 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1159 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1160 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1162 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1163 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1166 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1167 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1169 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1170 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1172 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1173 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1176 
	#MPU_RNR_REGION_Pos
 0U

	)

1177 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1180 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1181 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1183 
	#MPU_RBAR_VALID_Pos
 4U

	)

1184 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1186 
	#MPU_RBAR_REGION_Pos
 0U

	)

1187 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1190 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1191 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1193 
	#MPU_RASR_XN_Pos
 28U

	)

1194 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1196 
	#MPU_RASR_AP_Pos
 24U

	)

1197 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1199 
	#MPU_RASR_TEX_Pos
 19U

	)

1200 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1202 
	#MPU_RASR_S_Pos
 18U

	)

1203 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1205 
	#MPU_RASR_C_Pos
 17U

	)

1206 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1208 
	#MPU_RASR_B_Pos
 16U

	)

1209 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1211 
	#MPU_RASR_SRD_Pos
 8U

	)

1212 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1214 
	#MPU_RASR_SIZE_Pos
 1U

	)

1215 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1217 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1218 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1236 
__IOM
 
uöt32_t
 
DHCSR
;

1237 
__OM
 
uöt32_t
 
DCRSR
;

1238 
__IOM
 
uöt32_t
 
DCRDR
;

1239 
__IOM
 
uöt32_t
 
DEMCR
;

1240 } 
	tC‹eDebug_Ty≥
;

1243 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1244 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1246 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1247 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1249 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1250 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1252 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1253 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1255 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1256 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1258 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1259 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1261 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1262 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1264 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1265 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1267 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1268 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1270 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1271 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1273 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1274 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1276 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1277 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1280 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1281 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1283 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1284 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1287 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1288 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1290 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1291 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1293 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1294 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1296 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1297 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1299 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1300 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1302 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1303 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1305 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1306 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1308 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1309 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1311 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1312 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1314 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1315 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1317 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1318 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1320 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1321 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1323 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1324 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1342 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1350 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1363 
	#SCS_BASE
 (0xE000E000ULË

	)

1364 
	#ITM_BASE
 (0xE0000000ULË

	)

1365 
	#DWT_BASE
 (0xE0001000ULË

	)

1366 
	#TPI_BASE
 (0xE0040000ULË

	)

1367 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1368 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1369 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1370 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1372 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1373 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1374 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1375 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1376 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1377 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1378 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1379 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1381 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1382 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1383 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1412 #ifde‡
CMSIS_NVIC_VIRTUAL


1413 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1414 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1416 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1418 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1419 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1420 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1421 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1422 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1423 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1424 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1425 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1426 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1427 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1428 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1429 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1432 #ifde‡
CMSIS_VECTAB_VIRTUAL


1433 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1434 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1436 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1438 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1439 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1442 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1446 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1447 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1448 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1461 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1463 
uöt32_t
 
ªg_vÆue
;

1464 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1466 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1467 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1468 
ªg_vÆue
 = (reg_value |

1469 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1470 (
Pri‹ôyGroupTmp
 << 8U) );

1471 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1480 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1482  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1492 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1494 i‡((
öt32_t
)(
IRQn
) >= 0)

1496 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1509 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1511 i‡((
öt32_t
)(
IRQn
) >= 0)

1513 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1528 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1530 i‡((
öt32_t
)(
IRQn
) >= 0)

1532 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1533 
__DSB
();

1534 
__ISB
();

1547 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) >= 0)

1551 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1566 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1568 i‡((
öt32_t
)(
IRQn
) >= 0)

1570 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1581 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1583 i‡((
öt32_t
)(
IRQn
) >= 0)

1585 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1598 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1600 i‡((
öt32_t
)(
IRQn
) >= 0)

1602 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1620 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1622 i‡((
öt32_t
)(
IRQn
) >= 0)

1624 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1628 
SCB
->
SHP
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1642 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1645 i‡((
öt32_t
)(
IRQn
) >= 0)

1647 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1651 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1667 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1669 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1670 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1671 
uöt32_t
 
SubPri‹ôyBôs
;

1673 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1674 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1677 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1678 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1694 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1696 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1697 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1698 
uöt32_t
 
SubPri‹ôyBôs
;

1700 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1701 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1703 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1704 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1717 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1719 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1720 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1732 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1734 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1735  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1743 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1745 
__DSB
();

1747 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1748 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1749 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1750 
__DSB
();

1754 
__NOP
();

1777 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1795 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1808 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1810 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1815 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1816 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1817 
SysTick
->
VAL
 = 0UL;

1818 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1819 
SysTick_CTRL_TICKINT_Msk
 |

1820 
SysTick_CTRL_ENABLE_Msk
;

1838 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1839 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

1850 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1852 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1853 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1855 
ITM
->
PORT
[0U].
u32
 == 0UL)

1857 
__NOP
();

1859 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1861  (
	gch
);

1871 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1873 
öt32_t
 
	gch
 = -1;

1875 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1877 
ch
 = 
ITM_RxBuf„r
;

1878 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1881  (
	gch
);

1891 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1894 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1909 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/mpu_armv7.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
ARM_MPU_ARMV7_H


32 
	#ARM_MPU_ARMV7_H


	)

34 
	#ARM_MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04U)

35 
	#ARM_MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05U)

36 
	#ARM_MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06U)

37 
	#ARM_MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07U)

38 
	#ARM_MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08U)

39 
	#ARM_MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09U)

40 
	#ARM_MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0AU)

41 
	#ARM_MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0BU)

42 
	#ARM_MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0CU)

43 
	#ARM_MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0DU)

44 
	#ARM_MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0EU)

45 
	#ARM_MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0FU)

46 
	#ARM_MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10U)

47 
	#ARM_MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11U)

48 
	#ARM_MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12U)

49 
	#ARM_MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13U)

50 
	#ARM_MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14U)

51 
	#ARM_MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15U)

52 
	#ARM_MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16U)

53 
	#ARM_MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17U)

54 
	#ARM_MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18U)

55 
	#ARM_MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19U)

56 
	#ARM_MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1AU)

57 
	#ARM_MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1BU)

58 
	#ARM_MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1CU)

59 
	#ARM_MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1DU)

60 
	#ARM_MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1EU)

61 
	#ARM_MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1FU)

62 

	)

63 
	#ARM_MPU_AP_NONE
 0U

64 
	#ARM_MPU_AP_PRIV
 1U

65 
	#ARM_MPU_AP_URO
 2U

66 
	#ARM_MPU_AP_FULL
 3U

67 
	#ARM_MPU_AP_PRO
 5U

68 
	#ARM_MPU_AP_RO
 6U

69 

	)

75 
	#ARM_MPU_RBAR
(
Regi⁄
, 
Ba£Addªss
) \

76 (((
Ba£Addªss
Ë& 
MPU_RBAR_ADDR_Msk
) | \

77 ((
Regi⁄
Ë& 
MPU_RBAR_REGION_Msk
) | \

78 (
MPU_RBAR_VALID_Msk
))

	)

88 
	#ARM_MPU_ACCESS_
(
Ty≥ExtFõld
, 
IsSh¨óbÀ
, 
IsCachóbÀ
, 
IsBuf„øbÀ
) \

89 ((((
Ty≥ExtFõld
 ) << 
MPU_RASR_TEX_Pos
Ë& 
MPU_RASR_TEX_Msk
) | \

90 (((
IsSh¨óbÀ
 ) << 
MPU_RASR_S_Pos
Ë& 
MPU_RASR_S_Msk
) | \

91 (((
IsCachóbÀ
 ) << 
MPU_RASR_C_Pos
Ë& 
MPU_RASR_C_Msk
) | \

92 (((
IsBuf„øbÀ
 ) << 
MPU_RASR_B_Pos
Ë& 
MPU_RASR_B_Msk
))

	)

103 
	#ARM_MPU_RASR_EX
(
DißbÀExec
, 
Ac˚ssPîmissi⁄
, 
Ac˚ssAâribuãs
, 
SubRegi⁄DißbÀ
, 
Size
) \

104 ((((
DißbÀExec
 ) << 
MPU_RASR_XN_Pos
Ë& 
MPU_RASR_XN_Msk
) | \

105 (((
Ac˚ssPîmissi⁄
Ë<< 
MPU_RASR_AP_Pos
Ë& 
MPU_RASR_AP_Msk
) | \

106 (((
Ac˚ssAâribuãs
ËË& (
MPU_RASR_TEX_Msk
 | 
MPU_RASR_S_Msk
 | 
MPU_RASR_C_Msk
 | 
MPU_RASR_B_Msk
)))

	)

120 
	#ARM_MPU_RASR
(
DißbÀExec
, 
Ac˚ssPîmissi⁄
, 
Ty≥ExtFõld
, 
IsSh¨óbÀ
, 
IsCachóbÀ
, 
IsBuf„øbÀ
, 
SubRegi⁄DißbÀ
, 
Size
) \

121 
	`ARM_MPU_RASR_EX
(
DißbÀExec
, 
Ac˚ssPîmissi⁄
, 
	`ARM_MPU_ACCESS_
(
Ty≥ExtFõld
, 
IsSh¨óbÀ
, 
IsCachóbÀ
, 
IsBuf„øbÀ
), 
SubRegi⁄DißbÀ
, 
Size
)

	)

130 
	#ARM_MPU_ACCESS_ORDERED
 
	`ARM_MPU_ACCESS_
(0U, 1U, 0U, 0U)

	)

141 
	#ARM_MPU_ACCESS_DEVICE
(
IsSh¨óbÀ
Ë((IsSh¨óbÀË? 
	`ARM_MPU_ACCESS_
(0U, 1U, 0U, 1UË: ARM_MPU_ACCESS_(2U, 0U, 0U, 0U))

	)

154 
	#ARM_MPU_ACCESS_NORMAL
(
OuãrCp
, 
I¬îCp
, 
IsSh¨óbÀ
Ë
	`ARM_MPU_ACCESS_
((4U | (OuãrCp)), IsSh¨óbÀ, ((I¬îCpË& 2U), ((I¬îCpË& 1U))

	)

159 
	#ARM_MPU_CACHEP_NOCACHE
 0U

	)

164 
	#ARM_MPU_CACHEP_WB_WRA
 1U

	)

169 
	#ARM_MPU_CACHEP_WT_NWA
 2U

	)

174 
	#ARM_MPU_CACHEP_WB_NWA
 3U

	)

181 
uöt32_t
 
	mRBAR
;

182 
uöt32_t
 
	mRASR
;

183 } 
	tARM_MPU_Regi⁄_t
;

188 
__STATIC_INLINE
 
	$ARM_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

190 
	`__DSB
();

191 
	`__ISB
();

192 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

193 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


194 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

196 
	}
}

200 
__STATIC_INLINE
 
	$ARM_MPU_DißbÀ
()

202 
	`__DSB
();

203 
	`__ISB
();

204 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


205 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

207 
MPU
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

208 
	}
}

213 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄
(
uöt32_t
 
∫r
)

215 
MPU
->
RNR
 = 
∫r
;

216 
MPU
->
RASR
 = 0U;

217 
	}
}

223 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄
(
uöt32_t
 
rb¨
, uöt32_à
ø§
)

225 
MPU
->
RBAR
 = 
rb¨
;

226 
MPU
->
RASR
 = 
ø§
;

227 
	}
}

234 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄Ex
(
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
ø§
)

236 
MPU
->
RNR
 = 
∫r
;

237 
MPU
->
RBAR
 = 
rb¨
;

238 
MPU
->
RASR
 = 
ø§
;

239 
	}
}

246 
__STATIC_INLINE
 
	$‹dîedCpy
(vﬁ©ûê
uöt32_t
* 
d°
, c⁄° uöt32_t* 
__RESTRICT
 
§c
, uöt32_à
Àn
)

248 
uöt32_t
 
i
;

249 
i
 = 0U; i < 
Àn
; ++i)

251 
d°
[
i
] = 
§c
[i];

253 
	}
}

259 
__STATIC_INLINE
 
	$ARM_MPU_Lﬂd
(
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, 
uöt32_t
 
˙t
)

261 c⁄° 
uöt32_t
 
rowW‹dSize
 = (
ARM_MPU_Regi⁄_t
)/4U;

262 
˙t
 > 
MPU_TYPE_RALIASES
) {

263 
	`‹dîedCpy
(&(
MPU
->
RBAR
), &(
èbÀ
->RBAR), 
MPU_TYPE_RALIASES
*
rowW‹dSize
);

264 
èbÀ
 +
MPU_TYPE_RALIASES
;

265 
˙t
 -
MPU_TYPE_RALIASES
;

267 
	`‹dîedCpy
(&(
MPU
->
RBAR
), &(
èbÀ
->RBAR), 
˙t
*
rowW‹dSize
);

268 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/mpu_armv8.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
ARM_MPU_ARMV8_H


32 
	#ARM_MPU_ARMV8_H


	)

35 
	#ARM_MPU_ATTR_DEVICE
 ( 0U )

	)

38 
	#ARM_MPU_ATTR_NON_CACHEABLE
 ( 4U )

	)

46 
	#ARM_MPU_ATTR_MEMORY_
(
NT
, 
WB
, 
RA
, 
WA
) \

47 (((
NT
 & 1UË<< 3UË| ((
WB
 & 1UË<< 2UË| ((
RA
 & 1UË<< 1UË| (
WA
 & 1U))

	)

50 
	#ARM_MPU_ATTR_DEVICE_nGnRnE
 (0U)

	)

53 
	#ARM_MPU_ATTR_DEVICE_nGnRE
 (1U)

	)

56 
	#ARM_MPU_ATTR_DEVICE_nGRE
 (2U)

	)

59 
	#ARM_MPU_ATTR_DEVICE_GRE
 (3U)

	)

65 
	#ARM_MPU_ATTR
(
O
, 
I
Ë(((O & 0xFUË<< 4UË| (((O & 0xFUË!0UË? (I & 0xFUË: ((I & 0x3UË<< 2U)))

	)

68 
	#ARM_MPU_SH_NON
 (0U)

	)

71 
	#ARM_MPU_SH_OUTER
 (2U)

	)

74 
	#ARM_MPU_SH_INNER
 (3U)

	)

80 
	#ARM_MPU_AP_
(
RO
, 
NP
Ë(((RO & 1UË<< 1UË| (NP & 1U))

	)

89 
	#ARM_MPU_RBAR
(
BASE
, 
SH
, 
RO
, 
NP
, 
XN
) \

90 ((
BASE
 & 
MPU_RBAR_BASE_Msk
) | \

91 ((
SH
 << 
MPU_RBAR_SH_Pos
Ë& 
MPU_RBAR_SH_Msk
) | \

92 ((
	`ARM_MPU_AP_
(
RO
, 
NP
Ë<< 
MPU_RBAR_AP_Pos
Ë& 
MPU_RBAR_AP_Msk
) | \

93 ((
XN
 << 
MPU_RBAR_XN_Pos
Ë& 
MPU_RBAR_XN_Msk
))

	)

99 
	#ARM_MPU_RLAR
(
LIMIT
, 
IDX
) \

100 ((
LIMIT
 & 
MPU_RLAR_LIMIT_Msk
) | \

101 ((
IDX
 << 
MPU_RLAR_AârIndx_Pos
Ë& 
MPU_RLAR_AârIndx_Msk
) | \

102 (
MPU_RLAR_EN_Msk
))

	)

108 
uöt32_t
 
	mRBAR
;

109 
uöt32_t
 
	mRLAR
;

110 } 
	tARM_MPU_Regi⁄_t
;

115 
__STATIC_INLINE
 
	$ARM_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

117 
	`__DSB
();

118 
	`__ISB
();

119 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

120 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


121 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

123 
	}
}

127 
__STATIC_INLINE
 
	$ARM_MPU_DißbÀ
()

129 
	`__DSB
();

130 
	`__ISB
();

131 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


132 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

134 
MPU
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

135 
	}
}

137 #ifde‡
MPU_NS


141 
__STATIC_INLINE
 
	$ARM_MPU_E«bÀ_NS
(
uöt32_t
 
MPU_C⁄åﬁ
)

143 
	`__DSB
();

144 
	`__ISB
();

145 
MPU_NS
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

146 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


147 
SCB_NS
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

149 
	}
}

153 
__STATIC_INLINE
 
	$ARM_MPU_DißbÀ_NS
()

155 
	`__DSB
();

156 
	`__ISB
();

157 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


158 
SCB_NS
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

160 
MPU_NS
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

161 
	}
}

169 
__STATIC_INLINE
 
	$ARM_MPU_SëMemAârEx
(
MPU_Ty≥
* 
mpu
, 
uöt8_t
 
idx
, uöt8_à
©å
)

171 c⁄° 
uöt8_t
 
ªg
 = 
idx
 / 4U;

172 c⁄° 
uöt32_t
 
pos
 = ((
idx
 % 4U) * 8U);

173 c⁄° 
uöt32_t
 
mask
 = 0xFFU << 
pos
;

175 i‡(
ªg
 >((
mpu
->
MAIR
) / (mpu->MAIR[0]))) {

179 
mpu
->
MAIR
[
ªg
] = ((mpu->MAIR[ªg] & ~
mask
Ë| ((
©å
 << 
pos
) & mask));

180 
	}
}

186 
__STATIC_INLINE
 
	$ARM_MPU_SëMemAâr
(
uöt8_t
 
idx
, uöt8_à
©å
)

188 
	`ARM_MPU_SëMemAârEx
(
MPU
, 
idx
, 
©å
);

189 
	}
}

191 #ifde‡
MPU_NS


196 
__STATIC_INLINE
 
	$ARM_MPU_SëMemAâr_NS
(
uöt8_t
 
idx
, uöt8_à
©å
)

198 
	`ARM_MPU_SëMemAârEx
(
MPU_NS
, 
idx
, 
©å
);

199 
	}
}

206 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄Ex
(
MPU_Ty≥
* 
mpu
, 
uöt32_t
 
∫r
)

208 
mpu
->
RNR
 = 
∫r
;

209 
mpu
->
RLAR
 = 0U;

210 
	}
}

215 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄
(
uöt32_t
 
∫r
)

217 
	`ARM_MPU_CÃRegi⁄Ex
(
MPU
, 
∫r
);

218 
	}
}

220 #ifde‡
MPU_NS


224 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄_NS
(
uöt32_t
 
∫r
)

226 
	`ARM_MPU_CÃRegi⁄Ex
(
MPU_NS
, 
∫r
);

227 
	}
}

236 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄Ex
(
MPU_Ty≥
* 
mpu
, 
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
æ¨
)

238 
mpu
->
RNR
 = 
∫r
;

239 
mpu
->
RBAR
 = 
rb¨
;

240 
mpu
->
RLAR
 = 
æ¨
;

241 
	}
}

248 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄
(
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
æ¨
)

250 
	`ARM_MPU_SëRegi⁄Ex
(
MPU
, 
∫r
, 
rb¨
, 
æ¨
);

251 
	}
}

253 #ifde‡
MPU_NS


259 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄_NS
(
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
æ¨
)

261 
	`ARM_MPU_SëRegi⁄Ex
(
MPU_NS
, 
∫r
, 
rb¨
, 
æ¨
);

262 
	}
}

270 
__STATIC_INLINE
 
	$‹dîedCpy
(vﬁ©ûê
uöt32_t
* 
d°
, c⁄° uöt32_t* 
__RESTRICT
 
§c
, uöt32_à
Àn
)

272 
uöt32_t
 
i
;

273 
i
 = 0U; i < 
Àn
; ++i)

275 
d°
[
i
] = 
§c
[i];

277 
	}
}

285 
__STATIC_INLINE
 
	$ARM_MPU_LﬂdEx
(
MPU_Ty≥
* 
mpu
, 
uöt32_t
 
∫r
, 
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, uöt32_à
˙t
)

287 c⁄° 
uöt32_t
 
rowW‹dSize
 = (
ARM_MPU_Regi⁄_t
)/4U;

288 i‡(
˙t
 == 1U) {

289 
mpu
->
RNR
 = 
∫r
;

290 
	`‹dîedCpy
(&(
mpu
->
RBAR
), &(
èbÀ
->RBAR), 
rowW‹dSize
);

292 
uöt32_t
 
∫rBa£
 = 
∫r
 & ~(
MPU_TYPE_RALIASES
-1U);

293 
uöt32_t
 
∫rOff£t
 = 
∫r
 % 
MPU_TYPE_RALIASES
;

295 
mpu
->
RNR
 = 
∫rBa£
;

296 (
∫rOff£t
 + 
˙t
Ë> 
MPU_TYPE_RALIASES
) {

297 
uöt32_t
 
c
 = 
MPU_TYPE_RALIASES
 - 
∫rOff£t
;

298 
	`‹dîedCpy
(&(
mpu
->
RBAR
)+(
∫rOff£t
*2U), &(
èbÀ
->RBAR), 
c
*
rowW‹dSize
);

299 
èbÀ
 +
c
;

300 
˙t
 -
c
;

301 
∫rOff£t
 = 0U;

302 
∫rBa£
 +
MPU_TYPE_RALIASES
;

303 
mpu
->
RNR
 = 
∫rBa£
;

306 
	`‹dîedCpy
(&(
mpu
->
RBAR
)+(
∫rOff£t
*2U), &(
èbÀ
->RBAR), 
˙t
*
rowW‹dSize
);

308 
	}
}

315 
__STATIC_INLINE
 
	$ARM_MPU_Lﬂd
(
uöt32_t
 
∫r
, 
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, uöt32_à
˙t
)

317 
	`ARM_MPU_LﬂdEx
(
MPU
, 
∫r
, 
èbÀ
, 
˙t
);

318 
	}
}

320 #ifde‡
MPU_NS


326 
__STATIC_INLINE
 
	$ARM_MPU_Lﬂd_NS
(
uöt32_t
 
∫r
, 
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, uöt32_à
˙t
)

328 
	`ARM_MPU_LﬂdEx
(
MPU_NS
, 
∫r
, 
èbÀ
, 
˙t
);

329 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/tz_context.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
TZ_CONTEXT_H


32 
	#TZ_CONTEXT_H


	)

34 
	~<°döt.h
>

36 #i‚de‡
TZ_MODULEID_T


37 
	#TZ_MODULEID_T


	)

39 
uöt32_t
 
	tTZ_ModuÀId_t
;

43 
uöt32_t
 
	tTZ_Mem‹yId_t
;

47 
uöt32_t
 
TZ_InôC⁄ãxtSy°em_S
 ();

53 
TZ_Mem‹yId_t
 
TZ_AŒocModuÀC⁄ãxt_S
 (
TZ_ModuÀId_t
 
moduÀ
);

58 
uöt32_t
 
TZ_FªeModuÀC⁄ãxt_S
 (
TZ_Mem‹yId_t
 
id
);

63 
uöt32_t
 
TZ_LﬂdC⁄ãxt_S
 (
TZ_Mem‹yId_t
 
id
);

68 
uöt32_t
 
TZ_St‹eC⁄ãxt_S
 (
TZ_Mem‹yId_t
 
id
);

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h

21 #i‚de‡
STM32_HAL_LEGACY


22 
	#STM32_HAL_LEGACY


	)

24 #ifde‡
__˝lu•lus


35 
	#AES_FLAG_RDERR
 
CRYP_FLAG_RDERR


	)

36 
	#AES_FLAG_WRERR
 
CRYP_FLAG_WRERR


	)

37 
	#AES_CLEARFLAG_CCF
 
CRYP_CLEARFLAG_CCF


	)

38 
	#AES_CLEARFLAG_RDERR
 
CRYP_CLEARFLAG_RDERR


	)

39 
	#AES_CLEARFLAG_WRERR
 
CRYP_CLEARFLAG_WRERR


	)

40 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32MP1
)

41 
	#CRYP_DATATYPE_32B
 
CRYP_NO_SWAP


	)

42 
	#CRYP_DATATYPE_16B
 
CRYP_HALFWORD_SWAP


	)

43 
	#CRYP_DATATYPE_8B
 
CRYP_BYTE_SWAP


	)

44 
	#CRYP_DATATYPE_1B
 
CRYP_BIT_SWAP


	)

53 
	#ADC_RESOLUTION12b
 
ADC_RESOLUTION_12B


	)

54 
	#ADC_RESOLUTION10b
 
ADC_RESOLUTION_10B


	)

55 
	#ADC_RESOLUTION8b
 
ADC_RESOLUTION_8B


	)

56 
	#ADC_RESOLUTION6b
 
ADC_RESOLUTION_6B


	)

57 
	#OVR_DATA_OVERWRITTEN
 
ADC_OVR_DATA_OVERWRITTEN


	)

58 
	#OVR_DATA_PRESERVED
 
ADC_OVR_DATA_PRESERVED


	)

59 
	#EOC_SINGLE_CONV
 
ADC_EOC_SINGLE_CONV


	)

60 
	#EOC_SEQ_CONV
 
ADC_EOC_SEQ_CONV


	)

61 
	#EOC_SINGLE_SEQ_CONV
 
ADC_EOC_SINGLE_SEQ_CONV


	)

62 
	#REGULAR_GROUP
 
ADC_REGULAR_GROUP


	)

63 
	#INJECTED_GROUP
 
ADC_INJECTED_GROUP


	)

64 
	#REGULAR_INJECTED_GROUP
 
ADC_REGULAR_INJECTED_GROUP


	)

65 
	#AWD_EVENT
 
ADC_AWD_EVENT


	)

66 
	#AWD1_EVENT
 
ADC_AWD1_EVENT


	)

67 
	#AWD2_EVENT
 
ADC_AWD2_EVENT


	)

68 
	#AWD3_EVENT
 
ADC_AWD3_EVENT


	)

69 
	#OVR_EVENT
 
ADC_OVR_EVENT


	)

70 
	#JQOVF_EVENT
 
ADC_JQOVF_EVENT


	)

71 
	#ALL_CHANNELS
 
ADC_ALL_CHANNELS


	)

72 
	#REGULAR_CHANNELS
 
ADC_REGULAR_CHANNELS


	)

73 
	#INJECTED_CHANNELS
 
ADC_INJECTED_CHANNELS


	)

74 
	#SYSCFG_FLAG_SENSOR_ADC
 
ADC_FLAG_SENSOR


	)

75 
	#SYSCFG_FLAG_VREF_ADC
 
ADC_FLAG_VREFINT


	)

76 
	#ADC_CLOCKPRESCALER_PCLK_DIV1
 
ADC_CLOCK_SYNC_PCLK_DIV1


	)

77 
	#ADC_CLOCKPRESCALER_PCLK_DIV2
 
ADC_CLOCK_SYNC_PCLK_DIV2


	)

78 
	#ADC_CLOCKPRESCALER_PCLK_DIV4
 
ADC_CLOCK_SYNC_PCLK_DIV4


	)

79 
	#ADC_CLOCKPRESCALER_PCLK_DIV6
 
ADC_CLOCK_SYNC_PCLK_DIV6


	)

80 
	#ADC_CLOCKPRESCALER_PCLK_DIV8
 
ADC_CLOCK_SYNC_PCLK_DIV8


	)

81 
	#ADC_EXTERNALTRIG0_T6_TRGO
 
ADC_EXTERNALTRIGCONV_T6_TRGO


	)

82 
	#ADC_EXTERNALTRIG1_T21_CC2
 
ADC_EXTERNALTRIGCONV_T21_CC2


	)

83 
	#ADC_EXTERNALTRIG2_T2_TRGO
 
ADC_EXTERNALTRIGCONV_T2_TRGO


	)

84 
	#ADC_EXTERNALTRIG3_T2_CC4
 
ADC_EXTERNALTRIGCONV_T2_CC4


	)

85 
	#ADC_EXTERNALTRIG4_T22_TRGO
 
ADC_EXTERNALTRIGCONV_T22_TRGO


	)

86 
	#ADC_EXTERNALTRIG7_EXT_IT11
 
ADC_EXTERNALTRIGCONV_EXT_IT11


	)

87 
	#ADC_CLOCK_ASYNC
 
ADC_CLOCK_ASYNC_DIV1


	)

88 
	#ADC_EXTERNALTRIG_EDGE_NONE
 
ADC_EXTERNALTRIGCONVEDGE_NONE


	)

89 
	#ADC_EXTERNALTRIG_EDGE_RISING
 
ADC_EXTERNALTRIGCONVEDGE_RISING


	)

90 
	#ADC_EXTERNALTRIG_EDGE_FALLING
 
ADC_EXTERNALTRIGCONVEDGE_FALLING


	)

91 
	#ADC_EXTERNALTRIG_EDGE_RISINGFALLING
 
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING


	)

92 
	#ADC_SAMPLETIME_2CYCLE_5
 
ADC_SAMPLETIME_2CYCLES_5


	)

94 
	#HAL_ADC_STATE_BUSY_REG
 
HAL_ADC_STATE_REG_BUSY


	)

95 
	#HAL_ADC_STATE_BUSY_INJ
 
HAL_ADC_STATE_INJ_BUSY


	)

96 
	#HAL_ADC_STATE_EOC_REG
 
HAL_ADC_STATE_REG_EOC


	)

97 
	#HAL_ADC_STATE_EOC_INJ
 
HAL_ADC_STATE_INJ_EOC


	)

98 
	#HAL_ADC_STATE_ERROR
 
HAL_ADC_STATE_ERROR_INTERNAL


	)

99 
	#HAL_ADC_STATE_BUSY
 
HAL_ADC_STATE_BUSY_INTERNAL


	)

100 
	#HAL_ADC_STATE_AWD
 
HAL_ADC_STATE_AWD1


	)

102 #i‡
deföed
(
STM32H7
)

103 
	#ADC_CHANNEL_VBAT_DIV4
 
ADC_CHANNEL_VBAT


	)

106 #i‡
deföed
(
STM32U5
)

107 
	#ADC_SAMPLETIME_5CYCLE
 
ADC_SAMPLETIME_5CYCLES


	)

108 
	#ADC_SAMPLETIME_391CYCLES_5
 
ADC_SAMPLETIME_391CYCLES


	)

109 
	#ADC4_SAMPLETIME_160CYCLES_5
 
ADC4_SAMPLETIME_814CYCLES_5


	)

112 #i‡
deföed
(
STM32H5
)

113 
	#ADC_CHANNEL_VCORE
 
ADC_CHANNEL_VDDCORE


	)

123 
	#__HAL_CEC_GET_IT
 
__HAL_CEC_GET_FLAG


	)

132 
	#COMP_WINDOWMODE_DISABLED
 
COMP_WINDOWMODE_DISABLE


	)

133 
	#COMP_WINDOWMODE_ENABLED
 
COMP_WINDOWMODE_ENABLE


	)

134 
	#COMP_EXTI_LINE_COMP1_EVENT
 
COMP_EXTI_LINE_COMP1


	)

135 
	#COMP_EXTI_LINE_COMP2_EVENT
 
COMP_EXTI_LINE_COMP2


	)

136 
	#COMP_EXTI_LINE_COMP3_EVENT
 
COMP_EXTI_LINE_COMP3


	)

137 
	#COMP_EXTI_LINE_COMP4_EVENT
 
COMP_EXTI_LINE_COMP4


	)

138 
	#COMP_EXTI_LINE_COMP5_EVENT
 
COMP_EXTI_LINE_COMP5


	)

139 
	#COMP_EXTI_LINE_COMP6_EVENT
 
COMP_EXTI_LINE_COMP6


	)

140 
	#COMP_EXTI_LINE_COMP7_EVENT
 
COMP_EXTI_LINE_COMP7


	)

141 #i‡
deföed
(
STM32L0
)

142 
	#COMP_LPTIMCONNECTION_ENABLED
 ((
uöt32_t
)0x00000003UË

	)

145 
	#COMP_OUTPUT_COMP6TIM2OCREFCLR
 
COMP_OUTPUT_COMP6_TIM2OCREFCLR


	)

146 #i‡
deföed
(
STM32F373xC
Ë|| deföed(
STM32F378xx
)

147 
	#COMP_OUTPUT_TIM3IC1
 
COMP_OUTPUT_COMP1_TIM3IC1


	)

148 
	#COMP_OUTPUT_TIM3OCREFCLR
 
COMP_OUTPUT_COMP1_TIM3OCREFCLR


	)

151 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

152 
	#COMP_WINDOWMODE_ENABLE
 
COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON


	)

154 
	#COMP_NONINVERTINGINPUT_IO1
 
COMP_INPUT_PLUS_IO1


	)

155 
	#COMP_NONINVERTINGINPUT_IO2
 
COMP_INPUT_PLUS_IO2


	)

156 
	#COMP_NONINVERTINGINPUT_IO3
 
COMP_INPUT_PLUS_IO3


	)

157 
	#COMP_NONINVERTINGINPUT_IO4
 
COMP_INPUT_PLUS_IO4


	)

158 
	#COMP_NONINVERTINGINPUT_IO5
 
COMP_INPUT_PLUS_IO5


	)

159 
	#COMP_NONINVERTINGINPUT_IO6
 
COMP_INPUT_PLUS_IO6


	)

161 
	#COMP_INVERTINGINPUT_1_4VREFINT
 
COMP_INPUT_MINUS_1_4VREFINT


	)

162 
	#COMP_INVERTINGINPUT_1_2VREFINT
 
COMP_INPUT_MINUS_1_2VREFINT


	)

163 
	#COMP_INVERTINGINPUT_3_4VREFINT
 
COMP_INPUT_MINUS_3_4VREFINT


	)

164 
	#COMP_INVERTINGINPUT_VREFINT
 
COMP_INPUT_MINUS_VREFINT


	)

165 
	#COMP_INVERTINGINPUT_DAC1_CH1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

166 
	#COMP_INVERTINGINPUT_DAC1_CH2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

167 
	#COMP_INVERTINGINPUT_DAC1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

168 
	#COMP_INVERTINGINPUT_DAC2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

169 
	#COMP_INVERTINGINPUT_IO1
 
COMP_INPUT_MINUS_IO1


	)

170 #i‡
deföed
(
STM32L0
)

174 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

175 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO2


	)

177 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_IO2


	)

178 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO3


	)

180 
	#COMP_INVERTINGINPUT_IO4
 
COMP_INPUT_MINUS_IO4


	)

181 
	#COMP_INVERTINGINPUT_IO5
 
COMP_INPUT_MINUS_IO5


	)

183 
	#COMP_OUTPUTLEVEL_LOW
 
COMP_OUTPUT_LEVEL_LOW


	)

184 
	#COMP_OUTPUTLEVEL_HIGH
 
COMP_OUTPUT_LEVEL_HIGH


	)

188 #i‡
deföed
(
COMP_CSR_LOCK
)

189 
	#COMP_FLAG_LOCK
 
COMP_CSR_LOCK


	)

190 #ñi‡
deföed
(
COMP_CSR_COMP1LOCK
)

191 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMP1LOCK


	)

192 #ñi‡
deföed
(
COMP_CSR_COMPxLOCK
)

193 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMPxLOCK


	)

196 #i‡
deföed
(
STM32L4
)

197 
	#COMP_BLANKINGSRCE_TIM1OC5
 
COMP_BLANKINGSRC_TIM1_OC5_COMP1


	)

198 
	#COMP_BLANKINGSRCE_TIM2OC3
 
COMP_BLANKINGSRC_TIM2_OC3_COMP1


	)

199 
	#COMP_BLANKINGSRCE_TIM3OC3
 
COMP_BLANKINGSRC_TIM3_OC3_COMP1


	)

200 
	#COMP_BLANKINGSRCE_TIM3OC4
 
COMP_BLANKINGSRC_TIM3_OC4_COMP2


	)

201 
	#COMP_BLANKINGSRCE_TIM8OC5
 
COMP_BLANKINGSRC_TIM8_OC5_COMP2


	)

202 
	#COMP_BLANKINGSRCE_TIM15OC1
 
COMP_BLANKINGSRC_TIM15_OC1_COMP2


	)

203 
	#COMP_BLANKINGSRCE_NONE
 
COMP_BLANKINGSRC_NONE


	)

206 #i‡
deföed
(
STM32L0
)

207 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

208 
	#COMP_MODE_LOWSPEED
 
COMP_POWERMODE_ULTRALOWPOWER


	)

210 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_HIGHSPEED


	)

211 
	#COMP_MODE_MEDIUMSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

212 
	#COMP_MODE_LOWPOWER
 
COMP_POWERMODE_LOWPOWER


	)

213 
	#COMP_MODE_ULTRALOWPOWER
 
COMP_POWERMODE_ULTRALOWPOWER


	)

218 #i‡
deföed
(
STM32U5
)

219 
	#__HAL_COMP_COMP1_EXTI_CLEAR_RASING_FLAG
 
__HAL_COMP_COMP1_EXTI_CLEAR_RISING_FLAG


	)

229 
	#__HAL_CORTEX_SYSTICKCLK_CONFIG
 
HAL_SYSTICK_CLKSour˚C⁄fig


	)

230 #i‡
deföed
(
STM32U5
)

231 
	#MPU_DEVICE_nGnRnE
 
MPU_DEVICE_NGNRNE


	)

232 
	#MPU_DEVICE_nGnRE
 
MPU_DEVICE_NGNRE


	)

233 
	#MPU_DEVICE_nGRE
 
MPU_DEVICE_NGRE


	)

242 #i‡
deföed
(
STM32H5
Ë|| deföed(
STM32C0
)

244 
	#HAL_CRC_I≈ut_D©a_Revî£
 
HAL_CRCEx_I≈ut_D©a_Revî£


	)

246 
	#HAL_CRC_Ouçut_D©a_Revî£
 
HAL_CRCEx_Ouçut_D©a_Revî£


	)

257 
	#CRC_OUTPUTDATA_INVERSION_DISABLED
 
CRC_OUTPUTDATA_INVERSION_DISABLE


	)

258 
	#CRC_OUTPUTDATA_INVERSION_ENABLED
 
CRC_OUTPUTDATA_INVERSION_ENABLE


	)

268 
	#DAC1_CHANNEL_1
 
DAC_CHANNEL_1


	)

269 
	#DAC1_CHANNEL_2
 
DAC_CHANNEL_2


	)

270 
	#DAC2_CHANNEL_1
 
DAC_CHANNEL_1


	)

271 
	#DAC_WAVE_NONE
 0x00000000U

	)

272 
	#DAC_WAVE_NOISE
 
DAC_CR_WAVE1_0


	)

273 
	#DAC_WAVE_TRIANGLE
 
DAC_CR_WAVE1_1


	)

274 
	#DAC_WAVEGENERATION_NONE
 
DAC_WAVE_NONE


	)

275 
	#DAC_WAVEGENERATION_NOISE
 
DAC_WAVE_NOISE


	)

276 
	#DAC_WAVEGENERATION_TRIANGLE
 
DAC_WAVE_TRIANGLE


	)

278 #i‡
deföed
(
STM32G4
Ë|| deföed(
STM32H7
Ë|| deföed (
STM32U5
)

279 
	#DAC_CHIPCONNECT_DISABLE
 
DAC_CHIPCONNECT_EXTERNAL


	)

280 
	#DAC_CHIPCONNECT_ENABLE
 
DAC_CHIPCONNECT_INTERNAL


	)

283 #i‡
deföed
(
STM32U5
)

284 
	#DAC_TRIGGER_STOP_LPTIM1_OUT
 
DAC_TRIGGER_STOP_LPTIM1_CH1


	)

285 
	#DAC_TRIGGER_STOP_LPTIM3_OUT
 
DAC_TRIGGER_STOP_LPTIM3_CH1


	)

286 
	#DAC_TRIGGER_LPTIM1_OUT
 
DAC_TRIGGER_LPTIM1_CH1


	)

287 
	#DAC_TRIGGER_LPTIM3_OUT
 
DAC_TRIGGER_LPTIM3_CH1


	)

290 #i‡
deföed
(
STM32H5
)

291 
	#DAC_TRIGGER_LPTIM1_OUT
 
DAC_TRIGGER_LPTIM1_CH1


	)

292 
	#DAC_TRIGGER_LPTIM2_OUT
 
DAC_TRIGGER_LPTIM2_CH1


	)

295 #i‡
deföed
(
STM32L1
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32H7
) || \

296 
deföed
(
STM32F4
Ë|| deföed(
STM32G4
)

297 
	#HAL_DAC_MSP_INIT_CB_ID
 
HAL_DAC_MSPINIT_CB_ID


	)

298 
	#HAL_DAC_MSP_DEINIT_CB_ID
 
HAL_DAC_MSPDEINIT_CB_ID


	)

308 
	#HAL_REMAPDMA_ADC_DMA_CH2
 
DMA_REMAP_ADC_DMA_CH2


	)

309 
	#HAL_REMAPDMA_USART1_TX_DMA_CH4
 
DMA_REMAP_USART1_TX_DMA_CH4


	)

310 
	#HAL_REMAPDMA_USART1_RX_DMA_CH5
 
DMA_REMAP_USART1_RX_DMA_CH5


	)

311 
	#HAL_REMAPDMA_TIM16_DMA_CH4
 
DMA_REMAP_TIM16_DMA_CH4


	)

312 
	#HAL_REMAPDMA_TIM17_DMA_CH2
 
DMA_REMAP_TIM17_DMA_CH2


	)

313 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

314 
	#HAL_REMAPDMA_TIM16_DMA_CH6
 
DMA_REMAP_TIM16_DMA_CH6


	)

315 
	#HAL_REMAPDMA_TIM17_DMA_CH7
 
DMA_REMAP_TIM17_DMA_CH7


	)

316 
	#HAL_REMAPDMA_SPI2_DMA_CH67
 
DMA_REMAP_SPI2_DMA_CH67


	)

317 
	#HAL_REMAPDMA_USART2_DMA_CH67
 
DMA_REMAP_USART2_DMA_CH67


	)

318 
	#HAL_REMAPDMA_I2C1_DMA_CH76
 
DMA_REMAP_I2C1_DMA_CH76


	)

319 
	#HAL_REMAPDMA_TIM1_DMA_CH6
 
DMA_REMAP_TIM1_DMA_CH6


	)

320 
	#HAL_REMAPDMA_TIM2_DMA_CH7
 
DMA_REMAP_TIM2_DMA_CH7


	)

321 
	#HAL_REMAPDMA_TIM3_DMA_CH6
 
DMA_REMAP_TIM3_DMA_CH6


	)

323 
	#IS_HAL_REMAPDMA
 
IS_DMA_REMAP


	)

324 
	#__HAL_REMAPDMA_CHANNEL_ENABLE
 
__HAL_DMA_REMAP_CHANNEL_ENABLE


	)

325 
	#__HAL_REMAPDMA_CHANNEL_DISABLE
 
__HAL_DMA_REMAP_CHANNEL_DISABLE


	)

327 #i‡
deföed
(
STM32L4
)

329 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

330 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI1
 
HAL_DMAMUX1_REQ_GEN_EXTI1


	)

331 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI2
 
HAL_DMAMUX1_REQ_GEN_EXTI2


	)

332 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI3
 
HAL_DMAMUX1_REQ_GEN_EXTI3


	)

333 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI4
 
HAL_DMAMUX1_REQ_GEN_EXTI4


	)

334 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI5
 
HAL_DMAMUX1_REQ_GEN_EXTI5


	)

335 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI6
 
HAL_DMAMUX1_REQ_GEN_EXTI6


	)

336 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI7
 
HAL_DMAMUX1_REQ_GEN_EXTI7


	)

337 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI8
 
HAL_DMAMUX1_REQ_GEN_EXTI8


	)

338 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI9
 
HAL_DMAMUX1_REQ_GEN_EXTI9


	)

339 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI10
 
HAL_DMAMUX1_REQ_GEN_EXTI10


	)

340 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI11
 
HAL_DMAMUX1_REQ_GEN_EXTI11


	)

341 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI12
 
HAL_DMAMUX1_REQ_GEN_EXTI12


	)

342 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI13
 
HAL_DMAMUX1_REQ_GEN_EXTI13


	)

343 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI14
 
HAL_DMAMUX1_REQ_GEN_EXTI14


	)

344 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI15
 
HAL_DMAMUX1_REQ_GEN_EXTI15


	)

345 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

346 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

347 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

348 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH3_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH3_EVT


	)

349 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

350 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

351 
	#HAL_DMAMUX1_REQUEST_GEN_DSI_TE
 
HAL_DMAMUX1_REQ_GEN_DSI_TE


	)

352 
	#HAL_DMAMUX1_REQUEST_GEN_DSI_EOT
 
HAL_DMAMUX1_REQ_GEN_DSI_EOT


	)

353 
	#HAL_DMAMUX1_REQUEST_GEN_DMA2D_EOT
 
HAL_DMAMUX1_REQ_GEN_DMA2D_EOT


	)

354 
	#HAL_DMAMUX1_REQUEST_GEN_LTDC_IT
 
HAL_DMAMUX1_REQ_GEN_LTDC_IT


	)

356 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

357 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

358 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

359 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

361 #i‡
deföed
(
STM32L4R5xx
Ë|| deföed(
STM32L4R9xx
Ë|| deföed(STM32L4R9xxË|| deföed(
STM32L4S5xx
) || \

362 
deföed
(
STM32L4S7xx
Ë|| deföed(
STM32L4S9xx
)

363 
	#DMA_REQUEST_DCMI_PSSI
 
DMA_REQUEST_DCMI


	)

368 #i‡
deföed
(
STM32G0
)

369 
	#DMA_REQUEST_DAC1_CHANNEL1
 
DMA_REQUEST_DAC1_CH1


	)

370 
	#DMA_REQUEST_DAC1_CHANNEL2
 
DMA_REQUEST_DAC1_CH2


	)

371 
	#DMA_REQUEST_TIM16_TRIG_COM
 
DMA_REQUEST_TIM16_COM


	)

372 
	#DMA_REQUEST_TIM17_TRIG_COM
 
DMA_REQUEST_TIM17_COM


	)

374 
	#LL_DMAMUX_REQ_TIM16_TRIG_COM
 
LL_DMAMUX_REQ_TIM16_COM


	)

375 
	#LL_DMAMUX_REQ_TIM17_TRIG_COM
 
LL_DMAMUX_REQ_TIM17_COM


	)

378 #i‡
deföed
(
STM32H7
)

380 
	#DMA_REQUEST_DAC1
 
DMA_REQUEST_DAC1_CH1


	)

381 
	#DMA_REQUEST_DAC2
 
DMA_REQUEST_DAC1_CH2


	)

383 
	#BDMA_REQUEST_LP_UART1_RX
 
BDMA_REQUEST_LPUART1_RX


	)

384 
	#BDMA_REQUEST_LP_UART1_TX
 
BDMA_REQUEST_LPUART1_TX


	)

386 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

387 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

388 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

389 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

390 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

391 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM3_OUT


	)

392 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

393 
	#HAL_DMAMUX1_REQUEST_GEN_TIM12_TRGO
 
HAL_DMAMUX1_REQ_GEN_TIM12_TRGO


	)

395 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH0_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH0_EVT


	)

396 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH1_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH1_EVT


	)

397 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH2_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH2_EVT


	)

398 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH3_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH3_EVT


	)

399 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH4_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH4_EVT


	)

400 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH5_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH5_EVT


	)

401 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH6_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH6_EVT


	)

402 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_WKUP


	)

403 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_WKUP


	)

404 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_WKUP


	)

405 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_OUT


	)

406 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_WKUP


	)

407 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_OUT


	)

408 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM4_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM4_WKUP


	)

409 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM5_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM5_WKUP


	)

410 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_WKUP
 
HAL_DMAMUX2_REQ_GEN_I2C4_WKUP


	)

411 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_WKUP
 
HAL_DMAMUX2_REQ_GEN_SPI6_WKUP


	)

412 
	#HAL_DMAMUX2_REQUEST_GEN_COMP1_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP1_OUT


	)

413 
	#HAL_DMAMUX2_REQUEST_GEN_COMP2_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP2_OUT


	)

414 
	#HAL_DMAMUX2_REQUEST_GEN_RTC_WKUP
 
HAL_DMAMUX2_REQ_GEN_RTC_WKUP


	)

415 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI0
 
HAL_DMAMUX2_REQ_GEN_EXTI0


	)

416 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI2
 
HAL_DMAMUX2_REQ_GEN_EXTI2


	)

417 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_IT_EVT
 
HAL_DMAMUX2_REQ_GEN_I2C4_IT_EVT


	)

418 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_IT
 
HAL_DMAMUX2_REQ_GEN_SPI6_IT


	)

419 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_IT


	)

420 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_IT


	)

421 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_IT
 
HAL_DMAMUX2_REQ_GEN_ADC3_IT


	)

422 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_AWD1_OUT
 
HAL_DMAMUX2_REQ_GEN_ADC3_AWD1_OUT


	)

423 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH0_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH0_IT


	)

424 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH1_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH1_IT


	)

426 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

427 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

428 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

429 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

431 
	#DFSDM_FILTER_EXT_TRIG_LPTIM1
 
DFSDM_FILTER_EXT_TRIG_LPTIM1_OUT


	)

432 
	#DFSDM_FILTER_EXT_TRIG_LPTIM2
 
DFSDM_FILTER_EXT_TRIG_LPTIM2_OUT


	)

433 
	#DFSDM_FILTER_EXT_TRIG_LPTIM3
 
DFSDM_FILTER_EXT_TRIG_LPTIM3_OUT


	)

435 
	#DAC_TRIGGER_LP1_OUT
 
DAC_TRIGGER_LPTIM1_OUT


	)

436 
	#DAC_TRIGGER_LP2_OUT
 
DAC_TRIGGER_LPTIM2_OUT


	)

440 #i‡
deföed
(
STM32U5
)

441 
	#GPDMA1_REQUEST_DCMI
 
GPDMA1_REQUEST_DCMI_PSSI


	)

451 
	#TYPEPROGRAM_BYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

452 
	#TYPEPROGRAM_HALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

453 
	#TYPEPROGRAM_WORD
 
FLASH_TYPEPROGRAM_WORD


	)

454 
	#TYPEPROGRAM_DOUBLEWORD
 
FLASH_TYPEPROGRAM_DOUBLEWORD


	)

455 
	#TYPEERASE_SECTORS
 
FLASH_TYPEERASE_SECTORS


	)

456 
	#TYPEERASE_PAGES
 
FLASH_TYPEERASE_PAGES


	)

457 
	#TYPEERASE_PAGEERASE
 
FLASH_TYPEERASE_PAGES


	)

458 
	#TYPEERASE_MASSERASE
 
FLASH_TYPEERASE_MASSERASE


	)

459 
	#WRPSTATE_DISABLE
 
OB_WRPSTATE_DISABLE


	)

460 
	#WRPSTATE_ENABLE
 
OB_WRPSTATE_ENABLE


	)

461 
	#HAL_FLASH_TIMEOUT_VALUE
 
FLASH_TIMEOUT_VALUE


	)

462 
	#OBEX_PCROP
 
OPTIONBYTE_PCROP


	)

463 
	#OBEX_BOOTCONFIG
 
OPTIONBYTE_BOOTCONFIG


	)

464 
	#PCROPSTATE_DISABLE
 
OB_PCROP_STATE_DISABLE


	)

465 
	#PCROPSTATE_ENABLE
 
OB_PCROP_STATE_ENABLE


	)

466 
	#TYPEERASEDATA_BYTE
 
FLASH_TYPEERASEDATA_BYTE


	)

467 
	#TYPEERASEDATA_HALFWORD
 
FLASH_TYPEERASEDATA_HALFWORD


	)

468 
	#TYPEERASEDATA_WORD
 
FLASH_TYPEERASEDATA_WORD


	)

469 
	#TYPEPROGRAMDATA_BYTE
 
FLASH_TYPEPROGRAMDATA_BYTE


	)

470 
	#TYPEPROGRAMDATA_HALFWORD
 
FLASH_TYPEPROGRAMDATA_HALFWORD


	)

471 
	#TYPEPROGRAMDATA_WORD
 
FLASH_TYPEPROGRAMDATA_WORD


	)

472 
	#TYPEPROGRAMDATA_FASTBYTE
 
FLASH_TYPEPROGRAMDATA_FASTBYTE


	)

473 
	#TYPEPROGRAMDATA_FASTHALFWORD
 
FLASH_TYPEPROGRAMDATA_FASTHALFWORD


	)

474 
	#TYPEPROGRAMDATA_FASTWORD
 
FLASH_TYPEPROGRAMDATA_FASTWORD


	)

475 #i‡!
deföed
(
STM32F2
Ë&& !deföed(
STM32F4
Ë&& !deföed(
STM32F7
Ë&& !deföed(
STM32H7
)

476 
	#PAGESIZE
 
FLASH_PAGE_SIZE


	)

478 
	#TYPEPROGRAM_FASTBYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

479 
	#TYPEPROGRAM_FASTHALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

480 
	#TYPEPROGRAM_FASTWORD
 
FLASH_TYPEPROGRAM_WORD


	)

481 
	#VOLTAGE_RANGE_1
 
FLASH_VOLTAGE_RANGE_1


	)

482 
	#VOLTAGE_RANGE_2
 
FLASH_VOLTAGE_RANGE_2


	)

483 
	#VOLTAGE_RANGE_3
 
FLASH_VOLTAGE_RANGE_3


	)

484 
	#VOLTAGE_RANGE_4
 
FLASH_VOLTAGE_RANGE_4


	)

485 
	#TYPEPROGRAM_FAST
 
FLASH_TYPEPROGRAM_FAST


	)

486 
	#TYPEPROGRAM_FAST_AND_LAST
 
FLASH_TYPEPROGRAM_FAST_AND_LAST


	)

487 
	#WRPAREA_BANK1_AREAA
 
OB_WRPAREA_BANK1_AREAA


	)

488 
	#WRPAREA_BANK1_AREAB
 
OB_WRPAREA_BANK1_AREAB


	)

489 
	#WRPAREA_BANK2_AREAA
 
OB_WRPAREA_BANK2_AREAA


	)

490 
	#WRPAREA_BANK2_AREAB
 
OB_WRPAREA_BANK2_AREAB


	)

491 
	#IWDG_STDBY_FREEZE
 
OB_IWDG_STDBY_FREEZE


	)

492 
	#IWDG_STDBY_ACTIVE
 
OB_IWDG_STDBY_RUN


	)

493 
	#IWDG_STOP_FREEZE
 
OB_IWDG_STOP_FREEZE


	)

494 
	#IWDG_STOP_ACTIVE
 
OB_IWDG_STOP_RUN


	)

495 
	#FLASH_ERROR_NONE
 
HAL_FLASH_ERROR_NONE


	)

496 
	#FLASH_ERROR_RD
 
HAL_FLASH_ERROR_RD


	)

497 
	#FLASH_ERROR_PG
 
HAL_FLASH_ERROR_PROG


	)

498 
	#FLASH_ERROR_PGP
 
HAL_FLASH_ERROR_PGS


	)

499 
	#FLASH_ERROR_WRP
 
HAL_FLASH_ERROR_WRP


	)

500 
	#FLASH_ERROR_OPTV
 
HAL_FLASH_ERROR_OPTV


	)

501 
	#FLASH_ERROR_OPTVUSR
 
HAL_FLASH_ERROR_OPTVUSR


	)

502 
	#FLASH_ERROR_PROG
 
HAL_FLASH_ERROR_PROG


	)

503 
	#FLASH_ERROR_OP
 
HAL_FLASH_ERROR_OPERATION


	)

504 
	#FLASH_ERROR_PGA
 
HAL_FLASH_ERROR_PGA


	)

505 
	#FLASH_ERROR_SIZE
 
HAL_FLASH_ERROR_SIZE


	)

506 
	#FLASH_ERROR_SIZ
 
HAL_FLASH_ERROR_SIZE


	)

507 
	#FLASH_ERROR_PGS
 
HAL_FLASH_ERROR_PGS


	)

508 
	#FLASH_ERROR_MIS
 
HAL_FLASH_ERROR_MIS


	)

509 
	#FLASH_ERROR_FAST
 
HAL_FLASH_ERROR_FAST


	)

510 
	#FLASH_ERROR_FWWERR
 
HAL_FLASH_ERROR_FWWERR


	)

511 
	#FLASH_ERROR_NOTZERO
 
HAL_FLASH_ERROR_NOTZERO


	)

512 
	#FLASH_ERROR_OPERATION
 
HAL_FLASH_ERROR_OPERATION


	)

513 
	#FLASH_ERROR_ERS
 
HAL_FLASH_ERROR_ERS


	)

514 
	#OB_WDG_SW
 
OB_IWDG_SW


	)

515 
	#OB_WDG_HW
 
OB_IWDG_HW


	)

516 
	#OB_SDADC12_VDD_MONITOR_SET
 
OB_SDACD_VDD_MONITOR_SET


	)

517 
	#OB_SDADC12_VDD_MONITOR_RESET
 
OB_SDACD_VDD_MONITOR_RESET


	)

518 
	#OB_RAM_PARITY_CHECK_SET
 
OB_SRAM_PARITY_SET


	)

519 
	#OB_RAM_PARITY_CHECK_RESET
 
OB_SRAM_PARITY_RESET


	)

520 
	#IS_OB_SDADC12_VDD_MONITOR
 
IS_OB_SDACD_VDD_MONITOR


	)

521 
	#OB_RDP_LEVEL0
 
OB_RDP_LEVEL_0


	)

522 
	#OB_RDP_LEVEL1
 
OB_RDP_LEVEL_1


	)

523 
	#OB_RDP_LEVEL2
 
OB_RDP_LEVEL_2


	)

524 #i‡
deföed
(
STM32G0
Ë|| deföed(
STM32C0
)

525 
	#OB_BOOT_LOCK_DISABLE
 
OB_BOOT_ENTRY_FORCED_NONE


	)

526 
	#OB_BOOT_LOCK_ENABLE
 
OB_BOOT_ENTRY_FORCED_FLASH


	)

528 
	#OB_BOOT_ENTRY_FORCED_NONE
 
OB_BOOT_LOCK_DISABLE


	)

529 
	#OB_BOOT_ENTRY_FORCED_FLASH
 
OB_BOOT_LOCK_ENABLE


	)

531 #i‡
deföed
(
STM32H7
)

532 
	#FLASH_FLAG_SNECCE_BANK1RR
 
FLASH_FLAG_SNECCERR_BANK1


	)

533 
	#FLASH_FLAG_DBECCE_BANK1RR
 
FLASH_FLAG_DBECCERR_BANK1


	)

534 
	#FLASH_FLAG_STRBER_BANK1R
 
FLASH_FLAG_STRBERR_BANK1


	)

535 
	#FLASH_FLAG_SNECCE_BANK2RR
 
FLASH_FLAG_SNECCERR_BANK2


	)

536 
	#FLASH_FLAG_DBECCE_BANK2RR
 
FLASH_FLAG_DBECCERR_BANK2


	)

537 
	#FLASH_FLAG_STRBER_BANK2R
 
FLASH_FLAG_STRBERR_BANK2


	)

538 
	#FLASH_FLAG_WDW
 
FLASH_FLAG_WBNE


	)

539 
	#OB_WRP_SECTOR_AŒ
 
OB_WRP_SECTOR_ALL


	)

541 #i‡
deföed
(
STM32U5
)

542 
	#OB_USER_nRST_STOP
 
OB_USER_NRST_STOP


	)

543 
	#OB_USER_nRST_STDBY
 
OB_USER_NRST_STDBY


	)

544 
	#OB_USER_nRST_SHDW
 
OB_USER_NRST_SHDW


	)

545 
	#OB_USER_nSWBOOT0
 
OB_USER_NSWBOOT0


	)

546 
	#OB_USER_nBOOT0
 
OB_USER_NBOOT0


	)

547 
	#OB_nBOOT0_RESET
 
OB_NBOOT0_RESET


	)

548 
	#OB_nBOOT0_SET
 
OB_NBOOT0_SET


	)

549 
	#OB_USER_SRAM134_RST
 
OB_USER_SRAM_RST


	)

550 
	#OB_SRAM134_RST_ERASE
 
OB_SRAM_RST_ERASE


	)

551 
	#OB_SRAM134_RST_NOT_ERASE
 
OB_SRAM_RST_NOT_ERASE


	)

553 #i‡
deföed
(
STM32U0
)

554 
	#OB_USER_nRST_STOP
 
OB_USER_NRST_STOP


	)

555 
	#OB_USER_nRST_STDBY
 
OB_USER_NRST_STDBY


	)

556 
	#OB_USER_nRST_SHDW
 
OB_USER_NRST_SHDW


	)

557 
	#OB_USER_nBOOT_SEL
 
OB_USER_NBOOT_SEL


	)

558 
	#OB_USER_nBOOT0
 
OB_USER_NBOOT0


	)

559 
	#OB_USER_nBOOT1
 
OB_USER_NBOOT1


	)

560 
	#OB_nBOOT0_RESET
 
OB_NBOOT0_RESET


	)

561 
	#OB_nBOOT0_SET
 
OB_NBOOT0_SET


	)

572 #i‡
deföed
(
STM32H7
)

573 
	#__HAL_RCC_JPEG_CLK_ENABLE
 
__HAL_RCC_JPGDECEN_CLK_ENABLE


	)

574 
	#__HAL_RCC_JPEG_CLK_DISABLE
 
__HAL_RCC_JPGDECEN_CLK_DISABLE


	)

575 
	#__HAL_RCC_JPEG_FORCE_RESET
 
__HAL_RCC_JPGDECRST_FORCE_RESET


	)

576 
	#__HAL_RCC_JPEG_RELEASE_RESET
 
__HAL_RCC_JPGDECRST_RELEASE_RESET


	)

577 
	#__HAL_RCC_JPEG_CLK_SLEEP_ENABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_ENABLE


	)

578 
	#__HAL_RCC_JPEG_CLK_SLEEP_DISABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_DISABLE


	)

589 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA9
 
I2C_FASTMODEPLUS_PA9


	)

590 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA10
 
I2C_FASTMODEPLUS_PA10


	)

591 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB6
 
I2C_FASTMODEPLUS_PB6


	)

592 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB7
 
I2C_FASTMODEPLUS_PB7


	)

593 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB8
 
I2C_FASTMODEPLUS_PB8


	)

594 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB9
 
I2C_FASTMODEPLUS_PB9


	)

595 
	#HAL_SYSCFG_FASTMODEPLUS_I2C1
 
I2C_FASTMODEPLUS_I2C1


	)

596 
	#HAL_SYSCFG_FASTMODEPLUS_I2C2
 
I2C_FASTMODEPLUS_I2C2


	)

597 
	#HAL_SYSCFG_FASTMODEPLUS_I2C3
 
I2C_FASTMODEPLUS_I2C3


	)

598 #i‡
deföed
(
STM32G4
)

600 
	#HAL_SYSCFG_E«bÀIOA«logSwôchBoo°î
 
HAL_SYSCFG_E«bÀIOSwôchBoo°î


	)

601 
	#HAL_SYSCFG_DißbÀIOA«logSwôchBoo°î
 
HAL_SYSCFG_DißbÀIOSwôchBoo°î


	)

602 
	#HAL_SYSCFG_E«bÀIOA«logSwôchVDD
 
HAL_SYSCFG_E«bÀIOSwôchVDD


	)

603 
	#HAL_SYSCFG_DißbÀIOA«logSwôchVDD
 
HAL_SYSCFG_DißbÀIOSwôchVDD


	)

606 #i‡
deföed
(
STM32H5
)

607 
	#SYSCFG_IT_FPU_IOC
 
SBS_IT_FPU_IOC


	)

608 
	#SYSCFG_IT_FPU_DZC
 
SBS_IT_FPU_DZC


	)

609 
	#SYSCFG_IT_FPU_UFC
 
SBS_IT_FPU_UFC


	)

610 
	#SYSCFG_IT_FPU_OFC
 
SBS_IT_FPU_OFC


	)

611 
	#SYSCFG_IT_FPU_IDC
 
SBS_IT_FPU_IDC


	)

612 
	#SYSCFG_IT_FPU_IXC
 
SBS_IT_FPU_IXC


	)

614 
	#SYSCFG_BREAK_FLASH_ECC
 
SBS_BREAK_FLASH_ECC


	)

615 
	#SYSCFG_BREAK_PVD
 
SBS_BREAK_PVD


	)

616 
	#SYSCFG_BREAK_SRAM_ECC
 
SBS_BREAK_SRAM_ECC


	)

617 
	#SYSCFG_BREAK_LOCKUP
 
SBS_BREAK_LOCKUP


	)

619 
	#SYSCFG_VREFBUF_VOLTAGE_SCALE0
 
VREFBUF_VOLTAGE_SCALE0


	)

620 
	#SYSCFG_VREFBUF_VOLTAGE_SCALE1
 
VREFBUF_VOLTAGE_SCALE1


	)

621 
	#SYSCFG_VREFBUF_VOLTAGE_SCALE2
 
VREFBUF_VOLTAGE_SCALE2


	)

622 
	#SYSCFG_VREFBUF_VOLTAGE_SCALE3
 
VREFBUF_VOLTAGE_SCALE3


	)

624 
	#SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE
 
VREFBUF_HIGH_IMPEDANCE_DISABLE


	)

625 
	#SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE
 
VREFBUF_HIGH_IMPEDANCE_ENABLE


	)

627 
	#SYSCFG_FASTMODEPLUS_PB6
 
SBS_FASTMODEPLUS_PB6


	)

628 
	#SYSCFG_FASTMODEPLUS_PB7
 
SBS_FASTMODEPLUS_PB7


	)

629 
	#SYSCFG_FASTMODEPLUS_PB8
 
SBS_FASTMODEPLUS_PB8


	)

630 
	#SYSCFG_FASTMODEPLUS_PB9
 
SBS_FASTMODEPLUS_PB9


	)

632 
	#SYSCFG_ETH_MII
 
SBS_ETH_MII


	)

633 
	#SYSCFG_ETH_RMII
 
SBS_ETH_RMII


	)

634 
	#IS_SYSCFG_ETHERNET_CONFIG
 
IS_SBS_ETHERNET_CONFIG


	)

636 
	#SYSCFG_MEMORIES_ERASE_FLAG_IPMEE
 
SBS_MEMORIES_ERASE_FLAG_IPMEE


	)

637 
	#SYSCFG_MEMORIES_ERASE_FLAG_MCLR
 
SBS_MEMORIES_ERASE_FLAG_MCLR


	)

638 
	#IS_SYSCFG_MEMORIES_ERASE_FLAG
 
IS_SBS_MEMORIES_ERASE_FLAG


	)

640 
	#IS_SYSCFG_CODE_CONFIG
 
IS_SBS_CODE_CONFIG


	)

642 
	#SYSCFG_MPU_NSEC
 
SBS_MPU_NSEC


	)

643 
	#SYSCFG_VTOR_NSEC
 
SBS_VTOR_NSEC


	)

644 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

645 
	#SYSCFG_SAU
 
SBS_SAU


	)

646 
	#SYSCFG_MPU_SEC
 
SBS_MPU_SEC


	)

647 
	#SYSCFG_VTOR_AIRCR_SEC
 
SBS_VTOR_AIRCR_SEC


	)

648 
	#SYSCFG_LOCK_ALL
 
SBS_LOCK_ALL


	)

650 
	#SYSCFG_LOCK_ALL
 
SBS_LOCK_ALL


	)

653 
	#SYSCFG_CLK
 
SBS_CLK


	)

654 
	#SYSCFG_CLASSB
 
SBS_CLASSB


	)

655 
	#SYSCFG_FPU
 
SBS_FPU


	)

656 
	#SYSCFG_ALL
 
SBS_ALL


	)

658 
	#SYSCFG_SEC
 
SBS_SEC


	)

659 
	#SYSCFG_NSEC
 
SBS_NSEC


	)

661 
	#__HAL_SYSCFG_FPU_INTERRUPT_ENABLE
 
__HAL_SBS_FPU_INTERRUPT_ENABLE


	)

662 
	#__HAL_SYSCFG_FPU_INTERRUPT_DISABLE
 
__HAL_SBS_FPU_INTERRUPT_DISABLE


	)

664 
	#__HAL_SYSCFG_BREAK_ECC_LOCK
 
__HAL_SBS_BREAK_ECC_LOCK


	)

665 
	#__HAL_SYSCFG_BREAK_LOCKUP_LOCK
 
__HAL_SBS_BREAK_LOCKUP_LOCK


	)

666 
	#__HAL_SYSCFG_BREAK_PVD_LOCK
 
__HAL_SBS_BREAK_PVD_LOCK


	)

667 
	#__HAL_SYSCFG_BREAK_SRAM_ECC_LOCK
 
__HAL_SBS_BREAK_SRAM_ECC_LOCK


	)

669 
	#__HAL_SYSCFG_FASTMODEPLUS_ENABLE
 
__HAL_SBS_FASTMODEPLUS_ENABLE


	)

670 
	#__HAL_SYSCFG_FASTMODEPLUS_DISABLE
 
__HAL_SBS_FASTMODEPLUS_DISABLE


	)

672 
	#__HAL_SYSCFG_GET_MEMORIES_ERASE_STATUS
 
__HAL_SBS_GET_MEMORIES_ERASE_STATUS


	)

673 
	#__HAL_SYSCFG_CLEAR_MEMORIES_ERASE_STATUS
 
__HAL_SBS_CLEAR_MEMORIES_ERASE_STATUS


	)

675 
	#IS_SYSCFG_FPU_INTERRUPT
 
IS_SBS_FPU_INTERRUPT


	)

676 
	#IS_SYSCFG_BREAK_CONFIG
 
IS_SBS_BREAK_CONFIG


	)

677 
	#IS_SYSCFG_VREFBUF_VOLTAGE_SCALE
 
IS_VREFBUF_VOLTAGE_SCALE


	)

678 
	#IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE
 
IS_VREFBUF_HIGH_IMPEDANCE


	)

679 
	#IS_SYSCFG_VREFBUF_TRIMMING
 
IS_VREFBUF_TRIMMING


	)

680 
	#IS_SYSCFG_FASTMODEPLUS
 
IS_SBS_FASTMODEPLUS


	)

681 
	#IS_SYSCFG_ITEMS_ATTRIBUTES
 
IS_SBS_ITEMS_ATTRIBUTES


	)

682 
	#IS_SYSCFG_ATTRIBUTES
 
IS_SBS_ATTRIBUTES


	)

683 
	#IS_SYSCFG_LOCK_ITEMS
 
IS_SBS_LOCK_ITEMS


	)

685 
	#HAL_SYSCFG_VREFBUF_VﬁègeSˇlögC⁄fig
 
HAL_VREFBUF_VﬁègeSˇlögC⁄fig


	)

686 
	#HAL_SYSCFG_VREFBUF_HighIm≥d™˚C⁄fig
 
HAL_VREFBUF_HighIm≥d™˚C⁄fig


	)

687 
	#HAL_SYSCFG_VREFBUF_TrimmögC⁄fig
 
HAL_VREFBUF_TrimmögC⁄fig


	)

688 
	#HAL_SYSCFG_E«bÀVREFBUF
 
HAL_E«bÀVREFBUF


	)

689 
	#HAL_SYSCFG_DißbÀVREFBUF
 
HAL_DißbÀVREFBUF


	)

691 
	#HAL_SYSCFG_E«bÀIOA«logSwôchBoo°î
 
HAL_SBS_E«bÀIOA«logSwôchBoo°î


	)

692 
	#HAL_SYSCFG_DißbÀIOA«logSwôchBoo°î
 
HAL_SBS_DißbÀIOA«logSwôchBoo°î


	)

693 
	#HAL_SYSCFG_ETHI¡îÁ˚Sñe˘
 
HAL_SBS_ETHI¡îÁ˚Sñe˘


	)

695 
	#HAL_SYSCFG_Lock
 
HAL_SBS_Lock


	)

696 
	#HAL_SYSCFG_GëLock
 
HAL_SBS_GëLock


	)

698 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

699 
	#HAL_SYSCFG_C⁄figAâribuãs
 
HAL_SBS_C⁄figAâribuãs


	)

700 
	#HAL_SYSCFG_GëC⁄figAâribuãs
 
HAL_SBS_GëC⁄figAâribuãs


	)

714 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32G4
)

715 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 
FMC_NAND_WAIT_FEATURE_DISABLE


	)

716 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 
FMC_NAND_WAIT_FEATURE_ENABLE


	)

717 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 
FMC_NAND_MEM_BUS_WIDTH_8


	)

718 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 
FMC_NAND_MEM_BUS_WIDTH_16


	)

719 #ñi‡
deföed
(
STM32F1
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F4
)

720 
	#FMC_NAND_WAIT_FEATURE_DISABLE
 
FMC_NAND_PCC_WAIT_FEATURE_DISABLE


	)

721 
	#FMC_NAND_WAIT_FEATURE_ENABLE
 
FMC_NAND_PCC_WAIT_FEATURE_ENABLE


	)

722 
	#FMC_NAND_MEM_BUS_WIDTH_8
 
FMC_NAND_PCC_MEM_BUS_WIDTH_8


	)

723 
	#FMC_NAND_MEM_BUS_WIDTH_16
 
FMC_NAND_PCC_MEM_BUS_WIDTH_16


	)

733 
	#FSMC_NORSRAM_TYPEDEF
 
FSMC_NORSRAM_Ty≥Def


	)

734 
	#FSMC_NORSRAM_EXTENDED_TYPEDEF
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

742 
	#GET_GPIO_SOURCE
 
GPIO_GET_INDEX


	)

743 
	#GET_GPIO_INDEX
 
GPIO_GET_INDEX


	)

745 #i‡
deföed
(
STM32F4
)

746 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDIO


	)

747 
	#GPIO_AF12_SDMMC1
 
GPIO_AF12_SDIO


	)

750 #i‡
deföed
(
STM32F7
)

751 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

752 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

755 #i‡
deföed
(
STM32L4
)

756 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

757 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

760 #i‡
deföed
(
STM32H7
)

761 
	#GPIO_AF7_SDIO1
 
GPIO_AF7_SDMMC1


	)

762 
	#GPIO_AF8_SDIO1
 
GPIO_AF8_SDMMC1


	)

763 
	#GPIO_AF12_SDIO1
 
GPIO_AF12_SDMMC1


	)

764 
	#GPIO_AF9_SDIO2
 
GPIO_AF9_SDMMC2


	)

765 
	#GPIO_AF10_SDIO2
 
GPIO_AF10_SDMMC2


	)

766 
	#GPIO_AF11_SDIO2
 
GPIO_AF11_SDMMC2


	)

768 #i‡
deföed
 (
STM32H743xx
Ë|| deföed (
STM32H753xx
Ë|| deföed (
STM32H750xx
Ë|| deföed (
STM32H742xx
) || \

769 
deföed
 (
STM32H745xx
Ë|| deföed (
STM32H755xx
Ë|| deföed (
STM32H747xx
Ë|| deföed (
STM32H757xx
)

770 
	#GPIO_AF10_OTG2_HS
 
GPIO_AF10_OTG2_FS


	)

771 
	#GPIO_AF10_OTG1_FS
 
GPIO_AF10_OTG1_HS


	)

772 
	#GPIO_AF12_OTG2_FS
 
GPIO_AF12_OTG1_FS


	)

774 
STM32H757xx
 */

777 
	#GPIO_AF0_LPTIM
 
GPIO_AF0_LPTIM1


	)

778 
	#GPIO_AF1_LPTIM
 
GPIO_AF1_LPTIM1


	)

779 
	#GPIO_AF2_LPTIM
 
GPIO_AF2_LPTIM1


	)

781 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F7
) || \

782 
deföed
(
STM32G4
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32U5
)

783 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

784 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

785 
	#GPIO_SPEED_FAST
 
GPIO_SPEED_FREQ_HIGH


	)

786 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

789 #i‡
deföed
(
STM32L1
)

790 
	#GPIO_SPEED_VERY_LOW
 
GPIO_SPEED_FREQ_LOW


	)

791 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_MEDIUM


	)

792 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_HIGH


	)

793 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

796 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F1
)

797 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

798 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

799 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_HIGH


	)

802 
	#GPIO_AF6_DFSDM
 
GPIO_AF6_DFSDM1


	)

804 #i‡
deföed
(
STM32U5
Ë|| deföed(
STM32H5
)

805 
	#GPIO_AF0_RTC_50Hz
 
GPIO_AF0_RTC_50HZ


	)

807 #i‡
deföed
(
STM32U5
)

808 
	#GPIO_AF0_S2DSTOP
 
GPIO_AF0_SRDSTOP


	)

809 
	#GPIO_AF11_LPGPIO
 
GPIO_AF11_LPGPIO1


	)

812 #i‡
deföed
(
STM32WBA
)

813 
	#GPIO_AF11_RF_ANTSW0
 
GPIO_AF11_RF


	)

814 
	#GPIO_AF11_RF_ANTSW1
 
GPIO_AF11_RF


	)

815 
	#GPIO_AF11_RF_ANTSW2
 
GPIO_AF11_RF


	)

816 
	#GPIO_AF11_RF_IO1
 
GPIO_AF11_RF


	)

817 
	#GPIO_AF11_RF_IO2
 
GPIO_AF11_RF


	)

818 
	#GPIO_AF11_RF_IO3
 
GPIO_AF11_RF


	)

819 
	#GPIO_AF11_RF_IO4
 
GPIO_AF11_RF


	)

820 
	#GPIO_AF11_RF_IO5
 
GPIO_AF11_RF


	)

821 
	#GPIO_AF11_RF_IO6
 
GPIO_AF11_RF


	)

822 
	#GPIO_AF11_RF_IO7
 
GPIO_AF11_RF


	)

823 
	#GPIO_AF11_RF_IO8
 
GPIO_AF11_RF


	)

824 
	#GPIO_AF11_RF_IO9
 
GPIO_AF11_RF


	)

833 #i‡
deföed
(
STM32U5
)

834 
	#GTZC_PERIPH_DCMI
 
GTZC_PERIPH_DCMI_PSSI


	)

835 
	#GTZC_PERIPH_LTDC
 
GTZC_PERIPH_LTDCUSB


	)

837 #i‡
deföed
(
STM32H5
)

838 
	#GTZC_PERIPH_DAC12
 
GTZC_PERIPH_DAC1


	)

839 
	#GTZC_PERIPH_ADC12
 
GTZC_PERIPH_ADC


	)

840 
	#GTZC_PERIPH_USBFS
 
GTZC_PERIPH_USB


	)

842 #i‡
deföed
(
STM32H5
Ë|| deföed(
STM32U5
)

843 
	#GTZC_MCPBB_NB_VCTR_REG_MAX
 
GTZC_MPCBB_NB_VCTR_REG_MAX


	)

844 
	#GTZC_MCPBB_NB_LCK_VCTR_REG_MAX
 
GTZC_MPCBB_NB_LCK_VCTR_REG_MAX


	)

845 
	#GTZC_MCPBB_SUPERBLOCK_UNLOCKED
 
GTZC_MPCBB_SUPERBLOCK_UNLOCKED


	)

846 
	#GTZC_MCPBB_SUPERBLOCK_LOCKED
 
GTZC_MPCBB_SUPERBLOCK_LOCKED


	)

847 
	#GTZC_MCPBB_BLOCK_NSEC
 
GTZC_MPCBB_BLOCK_NSEC


	)

848 
	#GTZC_MCPBB_BLOCK_SEC
 
GTZC_MPCBB_BLOCK_SEC


	)

849 
	#GTZC_MCPBB_BLOCK_NPRIV
 
GTZC_MPCBB_BLOCK_NPRIV


	)

850 
	#GTZC_MCPBB_BLOCK_PRIV
 
GTZC_MPCBB_BLOCK_PRIV


	)

851 
	#GTZC_MCPBB_LOCK_OFF
 
GTZC_MPCBB_LOCK_OFF


	)

852 
	#GTZC_MCPBB_LOCK_ON
 
GTZC_MPCBB_LOCK_ON


	)

861 
	#HRTIM_TIMDELAYEDPROTECTION_DISABLED
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED


	)

862 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6


	)

863 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6


	)

864 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6


	)

865 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6


	)

866 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7


	)

867 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7


	)

868 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7


	)

869 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7


	)

871 
	#__HAL_HRTIM_SëCou¡î
 
__HAL_HRTIM_SETCOUNTER


	)

872 
	#__HAL_HRTIM_GëCou¡î
 
__HAL_HRTIM_GETCOUNTER


	)

873 
	#__HAL_HRTIM_SëPîiod
 
__HAL_HRTIM_SETPERIOD


	)

874 
	#__HAL_HRTIM_GëPîiod
 
__HAL_HRTIM_GETPERIOD


	)

875 
	#__HAL_HRTIM_SëClockPªsˇÀr
 
__HAL_HRTIM_SETCLOCKPRESCALER


	)

876 
	#__HAL_HRTIM_GëClockPªsˇÀr
 
__HAL_HRTIM_GETCLOCKPRESCALER


	)

877 
	#__HAL_HRTIM_SëCom∑ª
 
__HAL_HRTIM_SETCOMPARE


	)

878 
	#__HAL_HRTIM_GëCom∑ª
 
__HAL_HRTIM_GETCOMPARE


	)

880 #i‡
deföed
(
STM32G4
)

881 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îC⁄fig
 
HAL_HRTIM_ExtEvítCou¡îC⁄fig


	)

882 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îE«bÀ
 
HAL_HRTIM_ExtEvítCou¡îE«bÀ


	)

883 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îDißbÀ
 
HAL_HRTIM_ExtEvítCou¡îDißbÀ


	)

884 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îRe£t
 
HAL_HRTIM_ExtEvítCou¡îRe£t


	)

885 
	#HRTIM_TIMEEVENT_A
 
HRTIM_EVENTCOUNTER_A


	)

886 
	#HRTIM_TIMEEVENT_B
 
HRTIM_EVENTCOUNTER_B


	)

887 
	#HRTIM_TIMEEVENTRESETMODE_UNCONDITIONAL
 
HRTIM_EVENTCOUNTER_RSTMODE_UNCONDITIONAL


	)

888 
	#HRTIM_TIMEEVENTRESETMODE_CONDITIONAL
 
HRTIM_EVENTCOUNTER_RSTMODE_CONDITIONAL


	)

891 #i‡
deföed
(
STM32H7
)

892 
	#HRTIM_OUTPUTSET_TIMAEV1_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

893 
	#HRTIM_OUTPUTSET_TIMAEV2_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

894 
	#HRTIM_OUTPUTSET_TIMAEV3_TIMCCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

895 
	#HRTIM_OUTPUTSET_TIMAEV4_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

896 
	#HRTIM_OUTPUTSET_TIMAEV5_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_5


	)

897 
	#HRTIM_OUTPUTSET_TIMAEV6_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_6


	)

898 
	#HRTIM_OUTPUTSET_TIMAEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

899 
	#HRTIM_OUTPUTSET_TIMAEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

900 
	#HRTIM_OUTPUTSET_TIMAEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

901 
	#HRTIM_OUTPUTSET_TIMBEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

902 
	#HRTIM_OUTPUTSET_TIMBEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

903 
	#HRTIM_OUTPUTSET_TIMBEV3_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_3


	)

904 
	#HRTIM_OUTPUTSET_TIMBEV4_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

905 
	#HRTIM_OUTPUTSET_TIMBEV5_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_5


	)

906 
	#HRTIM_OUTPUTSET_TIMBEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

907 
	#HRTIM_OUTPUTSET_TIMBEV7_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_7


	)

908 
	#HRTIM_OUTPUTSET_TIMBEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

909 
	#HRTIM_OUTPUTSET_TIMBEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

910 
	#HRTIM_OUTPUTSET_TIMCEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

911 
	#HRTIM_OUTPUTSET_TIMCEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

912 
	#HRTIM_OUTPUTSET_TIMCEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

913 
	#HRTIM_OUTPUTSET_TIMCEV4_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

914 
	#HRTIM_OUTPUTSET_TIMCEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

915 
	#HRTIM_OUTPUTSET_TIMCEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

916 
	#HRTIM_OUTPUTSET_TIMCEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

917 
	#HRTIM_OUTPUTSET_TIMCEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

918 
	#HRTIM_OUTPUTSET_TIMCEV9_TIMFCMP2
 
HRTIM_OUTPUTSET_TIMEV_9


	)

919 
	#HRTIM_OUTPUTSET_TIMDEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

920 
	#HRTIM_OUTPUTSET_TIMDEV2_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_2


	)

921 
	#HRTIM_OUTPUTSET_TIMDEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

922 
	#HRTIM_OUTPUTSET_TIMDEV4_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

923 
	#HRTIM_OUTPUTSET_TIMDEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

924 
	#HRTIM_OUTPUTSET_TIMDEV6_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

925 
	#HRTIM_OUTPUTSET_TIMDEV7_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

926 
	#HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1
 
HRTIM_OUTPUTSET_TIMEV_8


	)

927 
	#HRTIM_OUTPUTSET_TIMDEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

928 
	#HRTIM_OUTPUTSET_TIMEEV1_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_1


	)

929 
	#HRTIM_OUTPUTSET_TIMEEV2_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_2


	)

930 
	#HRTIM_OUTPUTSET_TIMEEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

931 
	#HRTIM_OUTPUTSET_TIMEEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

932 
	#HRTIM_OUTPUTSET_TIMEEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

933 
	#HRTIM_OUTPUTSET_TIMEEV6_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

934 
	#HRTIM_OUTPUTSET_TIMEEV7_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_7


	)

935 
	#HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_8


	)

936 
	#HRTIM_OUTPUTSET_TIMEEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

937 
	#HRTIM_OUTPUTSET_TIMFEV1_TIMACMP3
 
HRTIM_OUTPUTSET_TIMEV_1


	)

938 
	#HRTIM_OUTPUTSET_TIMFEV2_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_2


	)

939 
	#HRTIM_OUTPUTSET_TIMFEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

940 
	#HRTIM_OUTPUTSET_TIMFEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

941 
	#HRTIM_OUTPUTSET_TIMFEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

942 
	#HRTIM_OUTPUTSET_TIMFEV6_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_6


	)

943 
	#HRTIM_OUTPUTSET_TIMFEV7_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

944 
	#HRTIM_OUTPUTSET_TIMFEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

945 
	#HRTIM_OUTPUTSET_TIMFEV9_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

947 
	#HRTIM_OUTPUTRESET_TIMAEV1_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

948 
	#HRTIM_OUTPUTRESET_TIMAEV2_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

949 
	#HRTIM_OUTPUTRESET_TIMAEV3_TIMCCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

950 
	#HRTIM_OUTPUTRESET_TIMAEV4_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

951 
	#HRTIM_OUTPUTRESET_TIMAEV5_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_5


	)

952 
	#HRTIM_OUTPUTRESET_TIMAEV6_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_6


	)

953 
	#HRTIM_OUTPUTRESET_TIMAEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

954 
	#HRTIM_OUTPUTRESET_TIMAEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

955 
	#HRTIM_OUTPUTRESET_TIMAEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

956 
	#HRTIM_OUTPUTRESET_TIMBEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

957 
	#HRTIM_OUTPUTRESET_TIMBEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

958 
	#HRTIM_OUTPUTRESET_TIMBEV3_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_3


	)

959 
	#HRTIM_OUTPUTRESET_TIMBEV4_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

960 
	#HRTIM_OUTPUTRESET_TIMBEV5_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_5


	)

961 
	#HRTIM_OUTPUTRESET_TIMBEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

962 
	#HRTIM_OUTPUTRESET_TIMBEV7_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_7


	)

963 
	#HRTIM_OUTPUTRESET_TIMBEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

964 
	#HRTIM_OUTPUTRESET_TIMBEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

965 
	#HRTIM_OUTPUTRESET_TIMCEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

966 
	#HRTIM_OUTPUTRESET_TIMCEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

967 
	#HRTIM_OUTPUTRESET_TIMCEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

968 
	#HRTIM_OUTPUTRESET_TIMCEV4_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

969 
	#HRTIM_OUTPUTRESET_TIMCEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

970 
	#HRTIM_OUTPUTRESET_TIMCEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

971 
	#HRTIM_OUTPUTRESET_TIMCEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

972 
	#HRTIM_OUTPUTRESET_TIMCEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

973 
	#HRTIM_OUTPUTRESET_TIMCEV9_TIMFCMP2
 
HRTIM_OUTPUTSET_TIMEV_9


	)

974 
	#HRTIM_OUTPUTRESET_TIMDEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

975 
	#HRTIM_OUTPUTRESET_TIMDEV2_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_2


	)

976 
	#HRTIM_OUTPUTRESET_TIMDEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

977 
	#HRTIM_OUTPUTRESET_TIMDEV4_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

978 
	#HRTIM_OUTPUTRESET_TIMDEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

979 
	#HRTIM_OUTPUTRESET_TIMDEV6_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

980 
	#HRTIM_OUTPUTRESET_TIMDEV7_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

981 
	#HRTIM_OUTPUTRESET_TIMDEV8_TIMFCMP1
 
HRTIM_OUTPUTSET_TIMEV_8


	)

982 
	#HRTIM_OUTPUTRESET_TIMDEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

983 
	#HRTIM_OUTPUTRESET_TIMEEV1_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_1


	)

984 
	#HRTIM_OUTPUTRESET_TIMEEV2_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_2


	)

985 
	#HRTIM_OUTPUTRESET_TIMEEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

986 
	#HRTIM_OUTPUTRESET_TIMEEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

987 
	#HRTIM_OUTPUTRESET_TIMEEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

988 
	#HRTIM_OUTPUTRESET_TIMEEV6_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

989 
	#HRTIM_OUTPUTRESET_TIMEEV7_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_7


	)

990 
	#HRTIM_OUTPUTRESET_TIMEEV8_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_8


	)

991 
	#HRTIM_OUTPUTRESET_TIMEEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

992 
	#HRTIM_OUTPUTRESET_TIMFEV1_TIMACMP3
 
HRTIM_OUTPUTSET_TIMEV_1


	)

993 
	#HRTIM_OUTPUTRESET_TIMFEV2_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_2


	)

994 
	#HRTIM_OUTPUTRESET_TIMFEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

995 
	#HRTIM_OUTPUTRESET_TIMFEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

996 
	#HRTIM_OUTPUTRESET_TIMFEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

997 
	#HRTIM_OUTPUTRESET_TIMFEV6_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_6


	)

998 
	#HRTIM_OUTPUTRESET_TIMFEV7_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

999 
	#HRTIM_OUTPUTRESET_TIMFEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

1000 
	#HRTIM_OUTPUTRESET_TIMFEV9_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

1003 #i‡
deföed
(
STM32F3
)

1006 
	#HRTIM_EVENTSRC_1
 (0x00000000U)

	)

1007 
	#HRTIM_EVENTSRC_2
 (
HRTIM_EECR1_EE1SRC_0
)

	)

1008 
	#HRTIM_EVENTSRC_3
 (
HRTIM_EECR1_EE1SRC_1
)

	)

1009 
	#HRTIM_EVENTSRC_4
 (
HRTIM_EECR1_EE1SRC_1
 | 
HRTIM_EECR1_EE1SRC_0
)

	)

1013 
	#HRTIM_CALIBRATIONRATE_7300
 0x00000000U

	)

1014 
	#HRTIM_CALIBRATIONRATE_910
 (
HRTIM_DLLCR_CALRTE_0
)

	)

1015 
	#HRTIM_CALIBRATIONRATE_114
 (
HRTIM_DLLCR_CALRTE_1
)

	)

1016 
	#HRTIM_CALIBRATIONRATE_14
 (
HRTIM_DLLCR_CALRTE_1
 | 
HRTIM_DLLCR_CALRTE_0
)

	)

1026 
	#I2C_DUALADDRESS_DISABLED
 
I2C_DUALADDRESS_DISABLE


	)

1027 
	#I2C_DUALADDRESS_ENABLED
 
I2C_DUALADDRESS_ENABLE


	)

1028 
	#I2C_GENERALCALL_DISABLED
 
I2C_GENERALCALL_DISABLE


	)

1029 
	#I2C_GENERALCALL_ENABLED
 
I2C_GENERALCALL_ENABLE


	)

1030 
	#I2C_NOSTRETCH_DISABLED
 
I2C_NOSTRETCH_DISABLE


	)

1031 
	#I2C_NOSTRETCH_ENABLED
 
I2C_NOSTRETCH_ENABLE


	)

1032 
	#I2C_ANALOGFILTER_ENABLED
 
I2C_ANALOGFILTER_ENABLE


	)

1033 
	#I2C_ANALOGFILTER_DISABLED
 
I2C_ANALOGFILTER_DISABLE


	)

1034 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F1
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32L4
) || \

1035 
deföed
(
STM32L1
Ë|| deföed(
STM32F7
)

1036 
	#HAL_I2C_STATE_MEM_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

1037 
	#HAL_I2C_STATE_MEM_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

1038 
	#HAL_I2C_STATE_MASTER_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

1039 
	#HAL_I2C_STATE_MASTER_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

1040 
	#HAL_I2C_STATE_SLAVE_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

1041 
	#HAL_I2C_STATE_SLAVE_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

1050 
	#IRDA_ONE_BIT_SAMPLE_DISABLED
 
IRDA_ONE_BIT_SAMPLE_DISABLE


	)

1051 
	#IRDA_ONE_BIT_SAMPLE_ENABLED
 
IRDA_ONE_BIT_SAMPLE_ENABLE


	)

1060 
	#KR_KEY_RELOAD
 
IWDG_KEY_RELOAD


	)

1061 
	#KR_KEY_ENABLE
 
IWDG_KEY_ENABLE


	)

1062 
	#KR_KEY_EWA
 
IWDG_KEY_WRITE_ACCESS_ENABLE


	)

1063 
	#KR_KEY_DWA
 
IWDG_KEY_WRITE_ACCESS_DISABLE


	)

1072 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION


	)

1073 
	#LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS


	)

1074 
	#LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS


	)

1075 
	#LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS


	)

1077 
	#LPTIM_CLOCKPOLARITY_RISINGEDGE
 
LPTIM_CLOCKPOLARITY_RISING


	)

1078 
	#LPTIM_CLOCKPOLARITY_FALLINGEDGE
 
LPTIM_CLOCKPOLARITY_FALLING


	)

1079 
	#LPTIM_CLOCKPOLARITY_BOTHEDGES
 
LPTIM_CLOCKPOLARITY_RISING_FALLING


	)

1081 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION


	)

1082 
	#LPTIM_TRIGSAMPLETIME_2TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

1083 
	#LPTIM_TRIGSAMPLETIME_4TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

1084 
	#LPTIM_TRIGSAMPLETIME_8TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

1088 
	#LPTIM_TRIGSAMPLETIME_2TRANSITION
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

1089 
	#LPTIM_TRIGSAMPLETIME_4TRANSITION
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

1090 
	#LPTIM_TRIGSAMPLETIME_8TRANSITION
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

1096 
	#HAL_LPTIM_RódCom∑ª
 
HAL_LPTIM_RódC≠tuªdVÆue


	)

1101 #i‡
deföed
(
STM32U5
)

1102 
	#LPTIM_ISR_CC1
 
LPTIM_ISR_CC1IF


	)

1103 
	#LPTIM_ISR_CC2
 
LPTIM_ISR_CC2IF


	)

1104 
	#LPTIM_CHANNEL_ALL
 0x00000000U

	)

1113 
	#HAL_NAND_Ród_Page
 
HAL_NAND_Ród_Page_8b


	)

1114 
	#HAL_NAND_Wrôe_Page
 
HAL_NAND_Wrôe_Page_8b


	)

1115 
	#HAL_NAND_Ród_S∑ªAªa
 
HAL_NAND_Ród_S∑ªAªa_8b


	)

1116 
	#HAL_NAND_Wrôe_S∑ªAªa
 
HAL_NAND_Wrôe_S∑ªAªa_8b


	)

1118 
	#NAND_AddªssTy≥def
 
NAND_AddªssTy≥Def


	)

1120 
	#__ARRAY_ADDRESS
 
ARRAY_ADDRESS


	)

1121 
	#__ADDR_1°_CYCLE
 
ADDR_1ST_CYCLE


	)

1122 
	#__ADDR_2nd_CYCLE
 
ADDR_2ND_CYCLE


	)

1123 
	#__ADDR_3rd_CYCLE
 
ADDR_3RD_CYCLE


	)

1124 
	#__ADDR_4th_CYCLE
 
ADDR_4TH_CYCLE


	)

1132 
	#NOR_SètusTy≥def
 
HAL_NOR_SètusTy≥Def


	)

1133 
	#NOR_SUCCESS
 
HAL_NOR_STATUS_SUCCESS


	)

1134 
	#NOR_ONGOING
 
HAL_NOR_STATUS_ONGOING


	)

1135 
	#NOR_ERROR
 
HAL_NOR_STATUS_ERROR


	)

1136 
	#NOR_TIMEOUT
 
HAL_NOR_STATUS_TIMEOUT


	)

1138 
	#__NOR_WRITE
 
NOR_WRITE


	)

1139 
	#__NOR_ADDR_SHIFT
 
NOR_ADDR_SHIFT


	)

1148 
	#OPAMP_NONINVERTINGINPUT_VP0
 
OPAMP_NONINVERTINGINPUT_IO0


	)

1149 
	#OPAMP_NONINVERTINGINPUT_VP1
 
OPAMP_NONINVERTINGINPUT_IO1


	)

1150 
	#OPAMP_NONINVERTINGINPUT_VP2
 
OPAMP_NONINVERTINGINPUT_IO2


	)

1151 
	#OPAMP_NONINVERTINGINPUT_VP3
 
OPAMP_NONINVERTINGINPUT_IO3


	)

1153 
	#OPAMP_SEC_NONINVERTINGINPUT_VP0
 
OPAMP_SEC_NONINVERTINGINPUT_IO0


	)

1154 
	#OPAMP_SEC_NONINVERTINGINPUT_VP1
 
OPAMP_SEC_NONINVERTINGINPUT_IO1


	)

1155 
	#OPAMP_SEC_NONINVERTINGINPUT_VP2
 
OPAMP_SEC_NONINVERTINGINPUT_IO2


	)

1156 
	#OPAMP_SEC_NONINVERTINGINPUT_VP3
 
OPAMP_SEC_NONINVERTINGINPUT_IO3


	)

1158 
	#OPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

1159 
	#OPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

1161 
	#IOPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

1162 
	#IOPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

1164 
	#OPAMP_SEC_INVERTINGINPUT_VM0
 
OPAMP_SEC_INVERTINGINPUT_IO0


	)

1165 
	#OPAMP_SEC_INVERTINGINPUT_VM1
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

1167 
	#OPAMP_INVERTINGINPUT_VINM
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

1169 
	#OPAMP_PGACONNECT_NO
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_NO


	)

1170 
	#OPAMP_PGACONNECT_VM0
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0


	)

1171 
	#OPAMP_PGACONNECT_VM1
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1


	)

1173 #i‡
deföed
(
STM32L1
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32G4
Ë|| deföed(
STM32U5
)

1174 
	#HAL_OPAMP_MSP_INIT_CB_ID
 
HAL_OPAMP_MSPINIT_CB_ID


	)

1175 
	#HAL_OPAMP_MSP_DEINIT_CB_ID
 
HAL_OPAMP_MSPDEINIT_CB_ID


	)

1178 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32L5
)

1179 
	#OPAMP_POWERMODE_NORMAL
 
OPAMP_POWERMODE_NORMALPOWER


	)

1180 #ñi‡
deföed
(
STM32G4
)

1181 
	#OPAMP_POWERMODE_NORMAL
 
OPAMP_POWERMODE_NORMALSPEED


	)

1191 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

1193 #i‡
deföed
(
STM32H7
)

1194 
	#I2S_IT_TXE
 
I2S_IT_TXP


	)

1195 
	#I2S_IT_RXNE
 
I2S_IT_RXP


	)

1197 
	#I2S_FLAG_TXE
 
I2S_FLAG_TXP


	)

1198 
	#I2S_FLAG_RXNE
 
I2S_FLAG_RXP


	)

1201 #i‡
deföed
(
STM32F7
)

1202 
	#I2S_CLOCK_SYSCLK
 
I2S_CLOCK_PLL


	)

1213 
	#CF_DATA
 
ATA_DATA


	)

1214 
	#CF_SECTOR_COUNT
 
ATA_SECTOR_COUNT


	)

1215 
	#CF_SECTOR_NUMBER
 
ATA_SECTOR_NUMBER


	)

1216 
	#CF_CYLINDER_LOW
 
ATA_CYLINDER_LOW


	)

1217 
	#CF_CYLINDER_HIGH
 
ATA_CYLINDER_HIGH


	)

1218 
	#CF_CARD_HEAD
 
ATA_CARD_HEAD


	)

1219 
	#CF_STATUS_CMD
 
ATA_STATUS_CMD


	)

1220 
	#CF_STATUS_CMD_ALTERNATE
 
ATA_STATUS_CMD_ALTERNATE


	)

1221 
	#CF_COMMON_DATA_AREA
 
ATA_COMMON_DATA_AREA


	)

1224 
	#CF_READ_SECTOR_CMD
 
ATA_READ_SECTOR_CMD


	)

1225 
	#CF_WRITE_SECTOR_CMD
 
ATA_WRITE_SECTOR_CMD


	)

1226 
	#CF_ERASE_SECTOR_CMD
 
ATA_ERASE_SECTOR_CMD


	)

1227 
	#CF_IDENTIFY_CMD
 
ATA_IDENTIFY_CMD


	)

1229 
	#PCCARD_SètusTy≥def
 
HAL_PCCARD_SètusTy≥Def


	)

1230 
	#PCCARD_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

1231 
	#PCCARD_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

1232 
	#PCCARD_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

1233 
	#PCCARD_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

1242 
	#FORMAT_BIN
 
RTC_FORMAT_BIN


	)

1243 
	#FORMAT_BCD
 
RTC_FORMAT_BCD


	)

1245 
	#RTC_ALARMSUBSECONDMASK_N⁄e
 
RTC_ALARMSUBSECONDMASK_NONE


	)

1246 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

1247 
	#RTC_TAMPERMASK_FLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

1248 
	#RTC_TAMPERMASK_FLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

1250 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

1251 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

1252 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

1253 
	#RTC_TAMPER1_2_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

1254 
	#RTC_TAMPER1_2_3_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

1256 
	#RTC_TIMESTAMPPIN_PC13
 
RTC_TIMESTAMPPIN_DEFAULT


	)

1257 
	#RTC_TIMESTAMPPIN_PA0
 
RTC_TIMESTAMPPIN_POS1


	)

1258 
	#RTC_TIMESTAMPPIN_PI8
 
RTC_TIMESTAMPPIN_POS1


	)

1259 
	#RTC_TIMESTAMPPIN_PC1
 
RTC_TIMESTAMPPIN_POS2


	)

1261 
	#RTC_OUTPUT_REMAP_PC13
 
RTC_OUTPUT_REMAP_NONE


	)

1262 
	#RTC_OUTPUT_REMAP_PB14
 
RTC_OUTPUT_REMAP_POS1


	)

1263 
	#RTC_OUTPUT_REMAP_PB2
 
RTC_OUTPUT_REMAP_POS1


	)

1265 
	#RTC_TAMPERPIN_PC13
 
RTC_TAMPERPIN_DEFAULT


	)

1266 
	#RTC_TAMPERPIN_PA0
 
RTC_TAMPERPIN_POS1


	)

1267 
	#RTC_TAMPERPIN_PI8
 
RTC_TAMPERPIN_POS1


	)

1269 #i‡
deföed
(
STM32H5
Ë|| deföed(
STM32H7RS
)

1270 
	#TAMP_SECRETDEVICE_ERASE_NONE
 
TAMP_DEVICESECRETS_ERASE_NONE


	)

1271 
	#TAMP_SECRETDEVICE_ERASE_BKP_SRAM
 
TAMP_DEVICESECRETS_ERASE_BKPSRAM


	)

1274 #i‡
deföed
(
STM32WBA
)

1275 
	#TAMP_SECRETDEVICE_ERASE_NONE
 
TAMP_DEVICESECRETS_ERASE_NONE


	)

1276 
	#TAMP_SECRETDEVICE_ERASE_SRAM2
 
TAMP_DEVICESECRETS_ERASE_SRAM2


	)

1277 
	#TAMP_SECRETDEVICE_ERASE_RHUK
 
TAMP_DEVICESECRETS_ERASE_RHUK


	)

1278 
	#TAMP_SECRETDEVICE_ERASE_ICACHE
 
TAMP_DEVICESECRETS_ERASE_ICACHE


	)

1279 
	#TAMP_SECRETDEVICE_ERASE_SAES_AES_HASH
 
TAMP_DEVICESECRETS_ERASE_SAES_AES_HASH


	)

1280 
	#TAMP_SECRETDEVICE_ERASE_PKA_SRAM
 
TAMP_DEVICESECRETS_ERASE_PKA_SRAM


	)

1281 
	#TAMP_SECRETDEVICE_ERASE_ALL
 
TAMP_DEVICESECRETS_ERASE_ALL


	)

1284 #i‡
deföed
(
STM32H5
Ë|| deföed(
STM32WBA
Ë|| deföed(
STM32H7RS
)

1285 
	#TAMP_SECRETDEVICE_ERASE_DISABLE
 
TAMP_DEVICESECRETS_ERASE_NONE


	)

1286 
	#TAMP_SECRETDEVICE_ERASE_ENABLE
 
TAMP_SECRETDEVICE_ERASE_ALL


	)

1289 #i‡
deföed
(
STM32F7
)

1290 
	#RTC_TAMPCR_TAMPXE
 
RTC_TAMPER_ENABLE_BITS_MASK


	)

1291 
	#RTC_TAMPCR_TAMPXIE
 
RTC_TAMPER_IT_ENABLE_BITS_MASK


	)

1294 #i‡
deföed
(
STM32H7
)

1295 
	#RTC_TAMPCR_TAMPXE
 
RTC_TAMPER_X


	)

1296 
	#RTC_TAMPCR_TAMPXIE
 
RTC_TAMPER_X_INTERRUPT


	)

1299 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32L0
)

1300 
	#RTC_TAMPER1_INTERRUPT
 
RTC_IT_TAMP1


	)

1301 
	#RTC_TAMPER2_INTERRUPT
 
RTC_IT_TAMP2


	)

1302 
	#RTC_TAMPER3_INTERRUPT
 
RTC_IT_TAMP3


	)

1303 
	#RTC_ALL_TAMPER_INTERRUPT
 
RTC_IT_TAMP


	)

1314 
	#SMARTCARD_NACK_ENABLED
 
SMARTCARD_NACK_ENABLE


	)

1315 
	#SMARTCARD_NACK_DISABLED
 
SMARTCARD_NACK_DISABLE


	)

1317 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLED
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

1318 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLED
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

1319 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLE
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

1320 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLE
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

1322 
	#SMARTCARD_TIMEOUT_DISABLED
 
SMARTCARD_TIMEOUT_DISABLE


	)

1323 
	#SMARTCARD_TIMEOUT_ENABLED
 
SMARTCARD_TIMEOUT_ENABLE


	)

1325 
	#SMARTCARD_LASTBIT_DISABLED
 
SMARTCARD_LASTBIT_DISABLE


	)

1326 
	#SMARTCARD_LASTBIT_ENABLED
 
SMARTCARD_LASTBIT_ENABLE


	)

1335 
	#SMBUS_DUALADDRESS_DISABLED
 
SMBUS_DUALADDRESS_DISABLE


	)

1336 
	#SMBUS_DUALADDRESS_ENABLED
 
SMBUS_DUALADDRESS_ENABLE


	)

1337 
	#SMBUS_GENERALCALL_DISABLED
 
SMBUS_GENERALCALL_DISABLE


	)

1338 
	#SMBUS_GENERALCALL_ENABLED
 
SMBUS_GENERALCALL_ENABLE


	)

1339 
	#SMBUS_NOSTRETCH_DISABLED
 
SMBUS_NOSTRETCH_DISABLE


	)

1340 
	#SMBUS_NOSTRETCH_ENABLED
 
SMBUS_NOSTRETCH_ENABLE


	)

1341 
	#SMBUS_ANALOGFILTER_ENABLED
 
SMBUS_ANALOGFILTER_ENABLE


	)

1342 
	#SMBUS_ANALOGFILTER_DISABLED
 
SMBUS_ANALOGFILTER_DISABLE


	)

1343 
	#SMBUS_PEC_DISABLED
 
SMBUS_PEC_DISABLE


	)

1344 
	#SMBUS_PEC_ENABLED
 
SMBUS_PEC_ENABLE


	)

1345 
	#HAL_SMBUS_STATE_SLAVE_LISTEN
 
HAL_SMBUS_STATE_LISTEN


	)

1353 
	#SPI_TIMODE_DISABLED
 
SPI_TIMODE_DISABLE


	)

1354 
	#SPI_TIMODE_ENABLED
 
SPI_TIMODE_ENABLE


	)

1356 
	#SPI_CRCCALCULATION_DISABLED
 
SPI_CRCCALCULATION_DISABLE


	)

1357 
	#SPI_CRCCALCULATION_ENABLED
 
SPI_CRCCALCULATION_ENABLE


	)

1359 
	#SPI_NSS_PULSE_DISABLED
 
SPI_NSS_PULSE_DISABLE


	)

1360 
	#SPI_NSS_PULSE_ENABLED
 
SPI_NSS_PULSE_ENABLE


	)

1362 #i‡
deföed
(
STM32H7
)

1364 
	#SPI_FLAG_TXE
 
SPI_FLAG_TXP


	)

1365 
	#SPI_FLAG_RXNE
 
SPI_FLAG_RXP


	)

1367 
	#SPI_IT_TXE
 
SPI_IT_TXP


	)

1368 
	#SPI_IT_RXNE
 
SPI_IT_RXP


	)

1370 
	#SPI_FRLVL_EMPTY
 
SPI_RX_FIFO_0PACKET


	)

1371 
	#SPI_FRLVL_QUARTER_FULL
 
SPI_RX_FIFO_1PACKET


	)

1372 
	#SPI_FRLVL_HALF_FULL
 
SPI_RX_FIFO_2PACKET


	)

1373 
	#SPI_FRLVL_FULL
 
SPI_RX_FIFO_3PACKET


	)

1384 
	#CCER_CCxE_MASK
 
TIM_CCER_CCxE_MASK


	)

1385 
	#CCER_CCxNE_MASK
 
TIM_CCER_CCxNE_MASK


	)

1387 
	#TIM_DMABa£_CR1
 
TIM_DMABASE_CR1


	)

1388 
	#TIM_DMABa£_CR2
 
TIM_DMABASE_CR2


	)

1389 
	#TIM_DMABa£_SMCR
 
TIM_DMABASE_SMCR


	)

1390 
	#TIM_DMABa£_DIER
 
TIM_DMABASE_DIER


	)

1391 
	#TIM_DMABa£_SR
 
TIM_DMABASE_SR


	)

1392 
	#TIM_DMABa£_EGR
 
TIM_DMABASE_EGR


	)

1393 
	#TIM_DMABa£_CCMR1
 
TIM_DMABASE_CCMR1


	)

1394 
	#TIM_DMABa£_CCMR2
 
TIM_DMABASE_CCMR2


	)

1395 
	#TIM_DMABa£_CCER
 
TIM_DMABASE_CCER


	)

1396 
	#TIM_DMABa£_CNT
 
TIM_DMABASE_CNT


	)

1397 
	#TIM_DMABa£_PSC
 
TIM_DMABASE_PSC


	)

1398 
	#TIM_DMABa£_ARR
 
TIM_DMABASE_ARR


	)

1399 
	#TIM_DMABa£_RCR
 
TIM_DMABASE_RCR


	)

1400 
	#TIM_DMABa£_CCR1
 
TIM_DMABASE_CCR1


	)

1401 
	#TIM_DMABa£_CCR2
 
TIM_DMABASE_CCR2


	)

1402 
	#TIM_DMABa£_CCR3
 
TIM_DMABASE_CCR3


	)

1403 
	#TIM_DMABa£_CCR4
 
TIM_DMABASE_CCR4


	)

1404 
	#TIM_DMABa£_BDTR
 
TIM_DMABASE_BDTR


	)

1405 
	#TIM_DMABa£_DCR
 
TIM_DMABASE_DCR


	)

1406 
	#TIM_DMABa£_DMAR
 
TIM_DMABASE_DMAR


	)

1407 
	#TIM_DMABa£_OR1
 
TIM_DMABASE_OR1


	)

1408 
	#TIM_DMABa£_CCMR3
 
TIM_DMABASE_CCMR3


	)

1409 
	#TIM_DMABa£_CCR5
 
TIM_DMABASE_CCR5


	)

1410 
	#TIM_DMABa£_CCR6
 
TIM_DMABASE_CCR6


	)

1411 
	#TIM_DMABa£_OR2
 
TIM_DMABASE_OR2


	)

1412 
	#TIM_DMABa£_OR3
 
TIM_DMABASE_OR3


	)

1413 
	#TIM_DMABa£_OR
 
TIM_DMABASE_OR


	)

1415 
	#TIM_EvítSour˚_Upd©e
 
TIM_EVENTSOURCE_UPDATE


	)

1416 
	#TIM_EvítSour˚_CC1
 
TIM_EVENTSOURCE_CC1


	)

1417 
	#TIM_EvítSour˚_CC2
 
TIM_EVENTSOURCE_CC2


	)

1418 
	#TIM_EvítSour˚_CC3
 
TIM_EVENTSOURCE_CC3


	)

1419 
	#TIM_EvítSour˚_CC4
 
TIM_EVENTSOURCE_CC4


	)

1420 
	#TIM_EvítSour˚_COM
 
TIM_EVENTSOURCE_COM


	)

1421 
	#TIM_EvítSour˚_Triggî
 
TIM_EVENTSOURCE_TRIGGER


	)

1422 
	#TIM_EvítSour˚_Bªak
 
TIM_EVENTSOURCE_BREAK


	)

1423 
	#TIM_EvítSour˚_Bªak2
 
TIM_EVENTSOURCE_BREAK2


	)

1425 
	#TIM_DMABur°Lígth_1Tøns„r
 
TIM_DMABURSTLENGTH_1TRANSFER


	)

1426 
	#TIM_DMABur°Lígth_2Tøns„rs
 
TIM_DMABURSTLENGTH_2TRANSFERS


	)

1427 
	#TIM_DMABur°Lígth_3Tøns„rs
 
TIM_DMABURSTLENGTH_3TRANSFERS


	)

1428 
	#TIM_DMABur°Lígth_4Tøns„rs
 
TIM_DMABURSTLENGTH_4TRANSFERS


	)

1429 
	#TIM_DMABur°Lígth_5Tøns„rs
 
TIM_DMABURSTLENGTH_5TRANSFERS


	)

1430 
	#TIM_DMABur°Lígth_6Tøns„rs
 
TIM_DMABURSTLENGTH_6TRANSFERS


	)

1431 
	#TIM_DMABur°Lígth_7Tøns„rs
 
TIM_DMABURSTLENGTH_7TRANSFERS


	)

1432 
	#TIM_DMABur°Lígth_8Tøns„rs
 
TIM_DMABURSTLENGTH_8TRANSFERS


	)

1433 
	#TIM_DMABur°Lígth_9Tøns„rs
 
TIM_DMABURSTLENGTH_9TRANSFERS


	)

1434 
	#TIM_DMABur°Lígth_10Tøns„rs
 
TIM_DMABURSTLENGTH_10TRANSFERS


	)

1435 
	#TIM_DMABur°Lígth_11Tøns„rs
 
TIM_DMABURSTLENGTH_11TRANSFERS


	)

1436 
	#TIM_DMABur°Lígth_12Tøns„rs
 
TIM_DMABURSTLENGTH_12TRANSFERS


	)

1437 
	#TIM_DMABur°Lígth_13Tøns„rs
 
TIM_DMABURSTLENGTH_13TRANSFERS


	)

1438 
	#TIM_DMABur°Lígth_14Tøns„rs
 
TIM_DMABURSTLENGTH_14TRANSFERS


	)

1439 
	#TIM_DMABur°Lígth_15Tøns„rs
 
TIM_DMABURSTLENGTH_15TRANSFERS


	)

1440 
	#TIM_DMABur°Lígth_16Tøns„rs
 
TIM_DMABURSTLENGTH_16TRANSFERS


	)

1441 
	#TIM_DMABur°Lígth_17Tøns„rs
 
TIM_DMABURSTLENGTH_17TRANSFERS


	)

1442 
	#TIM_DMABur°Lígth_18Tøns„rs
 
TIM_DMABURSTLENGTH_18TRANSFERS


	)

1444 #i‡
deföed
(
STM32L0
)

1445 
	#TIM22_TI1_GPIO1
 
TIM22_TI1_GPIO


	)

1446 
	#TIM22_TI1_GPIO2
 
TIM22_TI1_GPIO


	)

1449 #i‡
deföed
(
STM32F3
)

1450 
	#IS_TIM_HALL_INTERFACE_INSTANCE
 
IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE


	)

1453 #i‡
deföed
(
STM32H7
)

1454 
	#TIM_TIM1_ETR_COMP1_OUT
 
TIM_TIM1_ETR_COMP1


	)

1455 
	#TIM_TIM1_ETR_COMP2_OUT
 
TIM_TIM1_ETR_COMP2


	)

1456 
	#TIM_TIM8_ETR_COMP1_OUT
 
TIM_TIM8_ETR_COMP1


	)

1457 
	#TIM_TIM8_ETR_COMP2_OUT
 
TIM_TIM8_ETR_COMP2


	)

1458 
	#TIM_TIM2_ETR_COMP1_OUT
 
TIM_TIM2_ETR_COMP1


	)

1459 
	#TIM_TIM2_ETR_COMP2_OUT
 
TIM_TIM2_ETR_COMP2


	)

1460 
	#TIM_TIM3_ETR_COMP1_OUT
 
TIM_TIM3_ETR_COMP1


	)

1461 
	#TIM_TIM1_TI1_COMP1_OUT
 
TIM_TIM1_TI1_COMP1


	)

1462 
	#TIM_TIM8_TI1_COMP2_OUT
 
TIM_TIM8_TI1_COMP2


	)

1463 
	#TIM_TIM2_TI4_COMP1_OUT
 
TIM_TIM2_TI4_COMP1


	)

1464 
	#TIM_TIM2_TI4_COMP2_OUT
 
TIM_TIM2_TI4_COMP2


	)

1465 
	#TIM_TIM2_TI4_COMP1COMP2_OUT
 
TIM_TIM2_TI4_COMP1_COMP2


	)

1466 
	#TIM_TIM3_TI1_COMP1_OUT
 
TIM_TIM3_TI1_COMP1


	)

1467 
	#TIM_TIM3_TI1_COMP2_OUT
 
TIM_TIM3_TI1_COMP2


	)

1468 
	#TIM_TIM3_TI1_COMP1COMP2_OUT
 
TIM_TIM3_TI1_COMP1_COMP2


	)

1471 #i‡
deföed
(
STM32U5
)

1472 
	#OCREF_CLEAR_SELECT_Pos
 
OCREF_CLEAR_SELECT_POS


	)

1473 
	#OCREF_CLEAR_SELECT_Msk
 
OCREF_CLEAR_SELECT_MSK


	)

1482 
	#TSC_SYNC_POL_FALL
 
TSC_SYNC_POLARITY_FALLING


	)

1483 
	#TSC_SYNC_POL_RISE_HIGH
 
TSC_SYNC_POLARITY_RISING


	)

1491 
	#UART_ONEBIT_SAMPLING_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

1492 
	#UART_ONEBIT_SAMPLING_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

1493 
	#UART_ONE_BIT_SAMPLE_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

1494 
	#UART_ONE_BIT_SAMPLE_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

1496 
	#__HAL_UART_ONEBIT_ENABLE
 
__HAL_UART_ONE_BIT_SAMPLE_ENABLE


	)

1497 
	#__HAL_UART_ONEBIT_DISABLE
 
__HAL_UART_ONE_BIT_SAMPLE_DISABLE


	)

1499 
	#__DIV_SAMPLING16
 
UART_DIV_SAMPLING16


	)

1500 
	#__DIVMANT_SAMPLING16
 
UART_DIVMANT_SAMPLING16


	)

1501 
	#__DIVFRAQ_SAMPLING16
 
UART_DIVFRAQ_SAMPLING16


	)

1502 
	#__UART_BRR_SAMPLING16
 
UART_BRR_SAMPLING16


	)

1504 
	#__DIV_SAMPLING8
 
UART_DIV_SAMPLING8


	)

1505 
	#__DIVMANT_SAMPLING8
 
UART_DIVMANT_SAMPLING8


	)

1506 
	#__DIVFRAQ_SAMPLING8
 
UART_DIVFRAQ_SAMPLING8


	)

1507 
	#__UART_BRR_SAMPLING8
 
UART_BRR_SAMPLING8


	)

1509 
	#__DIV_LPUART
 
UART_DIV_LPUART


	)

1511 
	#UART_WAKEUPMETHODE_IDLELINE
 
UART_WAKEUPMETHOD_IDLELINE


	)

1512 
	#UART_WAKEUPMETHODE_ADDRESSMARK
 
UART_WAKEUPMETHOD_ADDRESSMARK


	)

1523 
	#USART_CLOCK_DISABLED
 
USART_CLOCK_DISABLE


	)

1524 
	#USART_CLOCK_ENABLED
 
USART_CLOCK_ENABLE


	)

1526 
	#USARTNACK_ENABLED
 
USART_NACK_ENABLE


	)

1527 
	#USARTNACK_DISABLED
 
USART_NACK_DISABLE


	)

1535 
	#CFR_BASE
 
WWDG_CFR_BASE


	)

1544 
	#CAN_FûãrFIFO0
 
CAN_FILTER_FIFO0


	)

1545 
	#CAN_FûãrFIFO1
 
CAN_FILTER_FIFO1


	)

1546 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

1547 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

1548 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

1549 
	#INAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

1550 
	#SLAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

1551 
	#CAN_TXSTATUS_FAILED
 ((
uöt8_t
)0x00U)

	)

1552 
	#CAN_TXSTATUS_OK
 ((
uöt8_t
)0x01U)

	)

1553 
	#CAN_TXSTATUS_PENDING
 ((
uöt8_t
)0x02U)

	)

1563 
	#VLAN_TAG
 
ETH_VLAN_TAG


	)

1564 
	#MIN_ETH_PAYLOAD
 
ETH_MIN_ETH_PAYLOAD


	)

1565 
	#MAX_ETH_PAYLOAD
 
ETH_MAX_ETH_PAYLOAD


	)

1566 
	#JUMBO_FRAME_PAYLOAD
 
ETH_JUMBO_FRAME_PAYLOAD


	)

1567 
	#MACMIIAR_CR_MASK
 
ETH_MACMIIAR_CR_MASK


	)

1568 
	#MACCR_CLEAR_MASK
 
ETH_MACCR_CLEAR_MASK


	)

1569 
	#MACFCR_CLEAR_MASK
 
ETH_MACFCR_CLEAR_MASK


	)

1570 
	#DMAOMR_CLEAR_MASK
 
ETH_DMAOMR_CLEAR_MASK


	)

1572 
	#ETH_MMCCR
 0x00000100U

	)

1573 
	#ETH_MMCRIR
 0x00000104U

	)

1574 
	#ETH_MMCTIR
 0x00000108U

	)

1575 
	#ETH_MMCRIMR
 0x0000010CU

	)

1576 
	#ETH_MMCTIMR
 0x00000110U

	)

1577 
	#ETH_MMCTGFSCCR
 0x0000014CU

	)

1578 
	#ETH_MMCTGFMSCCR
 0x00000150U

	)

1579 
	#ETH_MMCTGFCR
 0x00000168U

	)

1580 
	#ETH_MMCRFCECR
 0x00000194U

	)

1581 
	#ETH_MMCRFAECR
 0x00000198U

	)

1582 
	#ETH_MMCRGUFCR
 0x000001C4U

	)

1584 
	#ETH_MAC_TXFIFO_FULL
 0x02000000U

	)

1585 
	#ETH_MAC_TXFIFONOT_EMPTY
 0x01000000U

	)

1586 
	#ETH_MAC_TXFIFO_WRITE_ACTIVE
 0x00400000U

	)

1587 
	#ETH_MAC_TXFIFO_IDLE
 0x00000000U

	)

1588 
	#ETH_MAC_TXFIFO_READ
 0x00100000U

	)

1590 
	#ETH_MAC_TXFIFO_WAITING
 0x00200000U

	)

1592 
	#ETH_MAC_TXFIFO_WRITING
 0x00300000U

	)

1594 
	#ETH_MAC_TRANSMISSION_PAUSE
 0x00080000U

	)

1595 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE
 0x00000000U

	)

1596 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING
 0x00020000U

	)

1598 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF
 0x00040000U

	)

1600 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING
 0x00060000U

	)

1602 
	#ETH_MAC_MII_TRANSMIT_ACTIVE
 0x00010000U

	)

1603 
	#ETH_MAC_RXFIFO_EMPTY
 0x00000000U

	)

1604 
	#ETH_MAC_RXFIFO_BELOW_THRESHOLD
 0x00000100U

	)

1606 
	#ETH_MAC_RXFIFO_ABOVE_THRESHOLD
 0x00000200U

	)

1608 
	#ETH_MAC_RXFIFO_FULL
 0x00000300U

	)

1609 #i‡
deföed
(
STM32F1
)

1611 
	#ETH_MAC_READCONTROLLER_IDLE
 0x00000000U

	)

1612 
	#ETH_MAC_READCONTROLLER_READING_DATA
 0x00000020U

	)

1613 
	#ETH_MAC_READCONTROLLER_READING_STATUS
 0x00000040U

	)

1616 
	#ETH_MAC_READCONTROLLER_FLUSHING
 0x00000060U

	)

1618 
	#ETH_MAC_RXFIFO_WRITE_ACTIVE
 0x00000010U

	)

1619 
	#ETH_MAC_SMALL_FIFO_NOTACTIVE
 0x00000000U

	)

1620 
	#ETH_MAC_SMALL_FIFO_READ_ACTIVE
 0x00000002U

	)

1621 
	#ETH_MAC_SMALL_FIFO_WRITE_ACTIVE
 0x00000004U

	)

1622 
	#ETH_MAC_SMALL_FIFO_RW_ACTIVE
 0x00000006U

	)

1623 
	#ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE
 0x00000001U

	)

1625 
	#ETH_TxPackëC⁄fig
 
ETH_TxPackëC⁄figTy≥Def


	)

1634 
	#HAL_DCMI_ERROR_OVF
 
HAL_DCMI_ERROR_OVR


	)

1635 
	#DCMI_IT_OVF
 
DCMI_IT_OVR


	)

1636 
	#DCMI_FLAG_OVFRI
 
DCMI_FLAG_OVRRI


	)

1637 
	#DCMI_FLAG_OVFMI
 
DCMI_FLAG_OVRMI


	)

1639 
	#HAL_DCMI_C⁄figCROP
 
HAL_DCMI_C⁄figCr›


	)

1640 
	#HAL_DCMI_E«bÀCROP
 
HAL_DCMI_E«bÀCr›


	)

1641 
	#HAL_DCMI_DißbÀCROP
 
HAL_DCMI_DißbÀCr›


	)

1647 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) \

1648 || 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
) \

1649 || 
deföed
(
STM32H7
)

1653 
	#DMA2D_ARGB8888
 
DMA2D_OUTPUT_ARGB8888


	)

1654 
	#DMA2D_RGB888
 
DMA2D_OUTPUT_RGB888


	)

1655 
	#DMA2D_RGB565
 
DMA2D_OUTPUT_RGB565


	)

1656 
	#DMA2D_ARGB1555
 
DMA2D_OUTPUT_ARGB1555


	)

1657 
	#DMA2D_ARGB4444
 
DMA2D_OUTPUT_ARGB4444


	)

1659 
	#CM_ARGB8888
 
DMA2D_INPUT_ARGB8888


	)

1660 
	#CM_RGB888
 
DMA2D_INPUT_RGB888


	)

1661 
	#CM_RGB565
 
DMA2D_INPUT_RGB565


	)

1662 
	#CM_ARGB1555
 
DMA2D_INPUT_ARGB1555


	)

1663 
	#CM_ARGB4444
 
DMA2D_INPUT_ARGB4444


	)

1664 
	#CM_L8
 
DMA2D_INPUT_L8


	)

1665 
	#CM_AL44
 
DMA2D_INPUT_AL44


	)

1666 
	#CM_AL88
 
DMA2D_INPUT_AL88


	)

1667 
	#CM_L4
 
DMA2D_INPUT_L4


	)

1668 
	#CM_A8
 
DMA2D_INPUT_A8


	)

1669 
	#CM_A4
 
DMA2D_INPUT_A4


	)

1675 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) \

1676 || 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
) \

1677 || 
deföed
(
STM32H7
Ë|| deföed(
STM32U5
)

1681 
	#HAL_DMA2D_DißbÀCLUT
 
HAL_DMA2D_CLUTLﬂdög_Ab‹t


	)

1702 
	#HAL_CRYP_Compuèti⁄C∂tCÆlback
 
HAL_CRYPEx_Compuèti⁄C∂tCÆlback


	)

1711 #i‡
deföed
(
STM32U5
)

1712 
	#HAL_DCACHE_CÀ™InvÆid©eByAddr
 
HAL_DCACHE_CÀ™InvÆidByAddr


	)

1713 
	#HAL_DCACHE_CÀ™InvÆid©eByAddr_IT
 
HAL_DCACHE_CÀ™InvÆidByAddr_IT


	)

1720 #i‡!
deföed
(
STM32F2
)

1724 
	#HAL_HASHEx_IRQH™dÀr
 
HAL_HASH_IRQH™dÀr


	)

1733 
	#HAL_HASH_STATETy≥Def
 
HAL_HASH_SèãTy≥Def


	)

1734 
	#HAL_HASHPha£Ty≥Def
 
HAL_HASH_Pha£Ty≥Def


	)

1735 
	#HAL_HMAC_MD5_Föish
 
HAL_HASH_MD5_Föish


	)

1736 
	#HAL_HMAC_SHA1_Föish
 
HAL_HASH_SHA1_Föish


	)

1737 
	#HAL_HMAC_SHA224_Föish
 
HAL_HASH_SHA224_Föish


	)

1738 
	#HAL_HMAC_SHA256_Föish
 
HAL_HASH_SHA256_Föish


	)

1742 
	#HASH_AlgoSñe˘i⁄_SHA1
 
HASH_ALGOSELECTION_SHA1


	)

1743 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_ALGOSELECTION_SHA224


	)

1744 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_ALGOSELECTION_SHA256


	)

1745 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_ALGOSELECTION_MD5


	)

1747 
	#HASH_AlgoMode_HASH
 
HASH_ALGOMODE_HASH


	)

1748 
	#HASH_AlgoMode_HMAC
 
HASH_ALGOMODE_HMAC


	)

1750 
	#HASH_HMACKeyTy≥_Sh‹tKey
 
HASH_HMAC_KEYTYPE_SHORTKEY


	)

1751 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_HMAC_KEYTYPE_LONGKEY


	)

1753 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32H7
)

1755 
	#HAL_HASH_MD5_Accumuœã
 
HAL_HASH_MD5_Accm…


	)

1756 
	#HAL_HASH_MD5_Accumuœã_End
 
HAL_HASH_MD5_Accm…_End


	)

1757 
	#HAL_HASH_MD5_Accumuœã_IT
 
HAL_HASH_MD5_Accm…_IT


	)

1758 
	#HAL_HASH_MD5_Accumuœã_End_IT
 
HAL_HASH_MD5_Accm…_End_IT


	)

1760 
	#HAL_HASH_SHA1_Accumuœã
 
HAL_HASH_SHA1_Accm…


	)

1761 
	#HAL_HASH_SHA1_Accumuœã_End
 
HAL_HASH_SHA1_Accm…_End


	)

1762 
	#HAL_HASH_SHA1_Accumuœã_IT
 
HAL_HASH_SHA1_Accm…_IT


	)

1763 
	#HAL_HASH_SHA1_Accumuœã_End_IT
 
HAL_HASH_SHA1_Accm…_End_IT


	)

1765 
	#HAL_HASHEx_SHA224_Accumuœã
 
HAL_HASHEx_SHA224_Accm…


	)

1766 
	#HAL_HASHEx_SHA224_Accumuœã_End
 
HAL_HASHEx_SHA224_Accm…_End


	)

1767 
	#HAL_HASHEx_SHA224_Accumuœã_IT
 
HAL_HASHEx_SHA224_Accm…_IT


	)

1768 
	#HAL_HASHEx_SHA224_Accumuœã_End_IT
 
HAL_HASHEx_SHA224_Accm…_End_IT


	)

1770 
	#HAL_HASHEx_SHA256_Accumuœã
 
HAL_HASHEx_SHA256_Accm…


	)

1771 
	#HAL_HASHEx_SHA256_Accumuœã_End
 
HAL_HASHEx_SHA256_Accm…_End


	)

1772 
	#HAL_HASHEx_SHA256_Accumuœã_IT
 
HAL_HASHEx_SHA256_Accm…_IT


	)

1773 
	#HAL_HASHEx_SHA256_Accumuœã_End_IT
 
HAL_HASHEx_SHA256_Accm…_End_IT


	)

1783 
	#HAL_E«bÀDBGSÀïMode
 
HAL_DBGMCU_E«bÀDBGSÀïMode


	)

1784 
	#HAL_DißbÀDBGSÀïMode
 
HAL_DBGMCU_DißbÀDBGSÀïMode


	)

1785 
	#HAL_E«bÀDBGSt›Mode
 
HAL_DBGMCU_E«bÀDBGSt›Mode


	)

1786 
	#HAL_DißbÀDBGSt›Mode
 
HAL_DBGMCU_DißbÀDBGSt›Mode


	)

1787 
	#HAL_E«bÀDBGSèndbyMode
 
HAL_DBGMCU_E«bÀDBGSèndbyMode


	)

1788 
	#HAL_DißbÀDBGSèndbyMode
 
HAL_DBGMCU_DißbÀDBGSèndbyMode


	)

1789 
	#HAL_DBG_LowPowîC⁄fig
(
Pîùh
, 
cmd
) (((cmd\

1790 )==
ENABLE
)? 
	`HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(
Pîùh
) : \

1791 
	`HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(
Pîùh
))

	)

1792 
	#HAL_VREFINT_OuçutSñe˘
 
HAL_SYSCFG_VREFINT_OuçutSñe˘


	)

1793 
	#HAL_Lock_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_SYSCFG_E«bÀ_Lock_VREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀ_Lock_VREFINT
())

	)

1794 #i‡
deföed
(
STM32L0
)

1796 
	#HAL_VREFINT_Cmd
(
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_SYSCFG_E«bÀVREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀVREFINT
())

	)

1798 
	#HAL_ADC_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINT
(Ë: 
	`HAL_ADCEx_DißbÀVREFINT
())

	)

1799 
	#HAL_ADC_E«bÀBuf„rSís‹_Cmd
(
cmd
) (((cmd\

1800 )==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINTTempSís‹
() : \

1801 
	`HAL_ADCEx_DißbÀVREFINTTempSís‹
())

	)

1802 #i‡
deföed
(
STM32H7A3xx
Ë|| deföed(
STM32H7B3xx
Ë|| deföed(
STM32H7B0xx
Ë|| deföed(
STM32H7A3xxQ
) || \

1803 
deföed
(
STM32H7B3xxQ
Ë|| deföed(
STM32H7B0xxQ
)

1804 
	#HAL_E«bÀSRDomaöDBGSt›Mode
 
HAL_E«bÀDomaö3DBGSt›Mode


	)

1805 
	#HAL_DißbÀSRDomaöDBGSt›Mode
 
HAL_DißbÀDomaö3DBGSt›Mode


	)

1806 
	#HAL_E«bÀSRDomaöDBGSèndbyMode
 
HAL_E«bÀDomaö3DBGSèndbyMode


	)

1807 
	#HAL_DißbÀSRDomaöDBGSèndbyMode
 
HAL_DißbÀDomaö3DBGSèndbyMode


	)

1817 
	#FLASH_HÆfPageProgøm
 
HAL_FLASHEx_HÆfPageProgøm


	)

1818 
	#FLASH_E«bÀRunPowîDown
 
HAL_FLASHEx_E«bÀRunPowîDown


	)

1819 
	#FLASH_DißbÀRunPowîDown
 
HAL_FLASHEx_DißbÀRunPowîDown


	)

1820 
	#HAL_DATA_EEPROMEx_U∆ock
 
HAL_FLASHEx_DATAEEPROM_U∆ock


	)

1821 
	#HAL_DATA_EEPROMEx_Lock
 
HAL_FLASHEx_DATAEEPROM_Lock


	)

1822 
	#HAL_DATA_EEPROMEx_Eø£
 
HAL_FLASHEx_DATAEEPROM_Eø£


	)

1823 
	#HAL_DATA_EEPROMEx_Progøm
 
HAL_FLASHEx_DATAEEPROM_Progøm


	)

1832 
	#HAL_I2CEx_A«logFûãr_C⁄fig
 
HAL_I2CEx_C⁄figA«logFûãr


	)

1833 
	#HAL_I2CEx_DigôÆFûãr_C⁄fig
 
HAL_I2CEx_C⁄figDigôÆFûãr


	)

1834 
	#HAL_FMPI2CEx_A«logFûãr_C⁄fig
 
HAL_FMPI2CEx_C⁄figA«logFûãr


	)

1835 
	#HAL_FMPI2CEx_DigôÆFûãr_C⁄fig
 
HAL_FMPI2CEx_C⁄figDigôÆFûãr


	)

1837 
	#HAL_I2CFa°ModePlusC⁄fig
(
SYSCFG_I2CFa°ModePlus
, 
cmd
Ë(((cmdË=
ENABLE
)? \

1838 
	`HAL_I2CEx_E«bÀFa°ModePlus
(
SYSCFG_I2CFa°ModePlus
): \

1839 
	`HAL_I2CEx_DißbÀFa°ModePlus
(
SYSCFG_I2CFa°ModePlus
))

	)

1841 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32F0
Ë|| deföed(
STM32F1
) || \

1842 
deföed
(
STM32F2
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32L0
) || \

1843 
deföed
(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32G4
Ë|| deföed(
STM32L1
)

1844 
	#HAL_I2C_Ma°î_Sequítül_Tønsmô_IT
 
HAL_I2C_Ma°î_Seq_Tønsmô_IT


	)

1845 
	#HAL_I2C_Ma°î_Sequítül_Re˚ive_IT
 
HAL_I2C_Ma°î_Seq_Re˚ive_IT


	)

1846 
	#HAL_I2C_Sœve_Sequítül_Tønsmô_IT
 
HAL_I2C_Sœve_Seq_Tønsmô_IT


	)

1847 
	#HAL_I2C_Sœve_Sequítül_Re˚ive_IT
 
HAL_I2C_Sœve_Seq_Re˚ive_IT


	)

1849 
STM32L4
 || 
STM32L5
 || 
STM32G4
 || 
STM32L1
 */

1850 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
) || \

1851 
deföed
(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32G4
)|| deföed(
STM32L1
)

1852 
	#HAL_I2C_Ma°î_Sequítül_Tønsmô_DMA
 
HAL_I2C_Ma°î_Seq_Tønsmô_DMA


	)

1853 
	#HAL_I2C_Ma°î_Sequítül_Re˚ive_DMA
 
HAL_I2C_Ma°î_Seq_Re˚ive_DMA


	)

1854 
	#HAL_I2C_Sœve_Sequítül_Tønsmô_DMA
 
HAL_I2C_Sœve_Seq_Tønsmô_DMA


	)

1855 
	#HAL_I2C_Sœve_Sequítül_Re˚ive_DMA
 
HAL_I2C_Sœve_Seq_Re˚ive_DMA


	)

1858 #i‡
deföed
(
STM32F4
)

1859 
	#HAL_FMPI2C_Ma°î_Sequítül_Tønsmô_IT
 
HAL_FMPI2C_Ma°î_Seq_Tønsmô_IT


	)

1860 
	#HAL_FMPI2C_Ma°î_Sequítül_Re˚ive_IT
 
HAL_FMPI2C_Ma°î_Seq_Re˚ive_IT


	)

1861 
	#HAL_FMPI2C_Sœve_Sequítül_Tønsmô_IT
 
HAL_FMPI2C_Sœve_Seq_Tønsmô_IT


	)

1862 
	#HAL_FMPI2C_Sœve_Sequítül_Re˚ive_IT
 
HAL_FMPI2C_Sœve_Seq_Re˚ive_IT


	)

1863 
	#HAL_FMPI2C_Ma°î_Sequítül_Tønsmô_DMA
 
HAL_FMPI2C_Ma°î_Seq_Tønsmô_DMA


	)

1864 
	#HAL_FMPI2C_Ma°î_Sequítül_Re˚ive_DMA
 
HAL_FMPI2C_Ma°î_Seq_Re˚ive_DMA


	)

1865 
	#HAL_FMPI2C_Sœve_Sequítül_Tønsmô_DMA
 
HAL_FMPI2C_Sœve_Seq_Tønsmô_DMA


	)

1866 
	#HAL_FMPI2C_Sœve_Sequítül_Re˚ive_DMA
 
HAL_FMPI2C_Sœve_Seq_Re˚ive_DMA


	)

1876 #i‡
deföed
(
STM32G0
)

1877 
	#HAL_PWR_C⁄figPVD
 
HAL_PWREx_C⁄figPVD


	)

1878 
	#HAL_PWR_E«bÀPVD
 
HAL_PWREx_E«bÀPVD


	)

1879 
	#HAL_PWR_DißbÀPVD
 
HAL_PWREx_DißbÀPVD


	)

1880 
	#HAL_PWR_PVD_IRQH™dÀr
 
HAL_PWREx_PVD_IRQH™dÀr


	)

1882 
	#HAL_PWR_PVDC⁄fig
 
HAL_PWR_C⁄figPVD


	)

1883 
	#HAL_PWR_DißbÀBkUpReg
 
HAL_PWREx_DißbÀBkUpReg


	)

1884 
	#HAL_PWR_DißbÀFœshPowîDown
 
HAL_PWREx_DißbÀFœshPowîDown


	)

1885 
	#HAL_PWR_DißbÀVddio2M⁄ô‹
 
HAL_PWREx_DißbÀVddio2M⁄ô‹


	)

1886 
	#HAL_PWR_E«bÀBkUpReg
 
HAL_PWREx_E«bÀBkUpReg


	)

1887 
	#HAL_PWR_E«bÀFœshPowîDown
 
HAL_PWREx_E«bÀFœshPowîDown


	)

1888 
	#HAL_PWR_E«bÀVddio2M⁄ô‹
 
HAL_PWREx_E«bÀVddio2M⁄ô‹


	)

1889 
	#HAL_PWR_PVD_PVM_IRQH™dÀr
 
HAL_PWREx_PVD_PVM_IRQH™dÀr


	)

1890 
	#HAL_PWR_PVDLevñC⁄fig
 
HAL_PWR_C⁄figPVD


	)

1891 
	#HAL_PWR_Vddio2M⁄ô‹_IRQH™dÀr
 
HAL_PWREx_Vddio2M⁄ô‹_IRQH™dÀr


	)

1892 
	#HAL_PWR_Vddio2M⁄ô‹CÆlback
 
HAL_PWREx_Vddio2M⁄ô‹CÆlback


	)

1893 
	#HAL_PWREx_A˘iv©eOvîDrive
 
HAL_PWREx_E«bÀOvîDrive


	)

1894 
	#HAL_PWREx_Dó˘iv©eOvîDrive
 
HAL_PWREx_DißbÀOvîDrive


	)

1895 
	#HAL_PWREx_DißbÀSDADCA«log
 
HAL_PWREx_DißbÀSDADC


	)

1896 
	#HAL_PWREx_E«bÀSDADCA«log
 
HAL_PWREx_E«bÀSDADC


	)

1897 
	#HAL_PWREx_PVMC⁄fig
 
HAL_PWREx_C⁄figPVM


	)

1899 
	#PWR_MODE_NORMAL
 
PWR_PVD_MODE_NORMAL


	)

1900 
	#PWR_MODE_IT_RISING
 
PWR_PVD_MODE_IT_RISING


	)

1901 
	#PWR_MODE_IT_FALLING
 
PWR_PVD_MODE_IT_FALLING


	)

1902 
	#PWR_MODE_IT_RISING_FALLING
 
PWR_PVD_MODE_IT_RISING_FALLING


	)

1903 
	#PWR_MODE_EVENT_RISING
 
PWR_PVD_MODE_EVENT_RISING


	)

1904 
	#PWR_MODE_EVENT_FALLING
 
PWR_PVD_MODE_EVENT_FALLING


	)

1905 
	#PWR_MODE_EVENT_RISING_FALLING
 
PWR_PVD_MODE_EVENT_RISING_FALLING


	)

1907 
	#CR_OFFSET_BB
 
PWR_CR_OFFSET_BB


	)

1908 
	#CSR_OFFSET_BB
 
PWR_CSR_OFFSET_BB


	)

1909 
	#PMODE_BIT_NUMBER
 
VOS_BIT_NUMBER


	)

1910 
	#CR_PMODE_BB
 
CR_VOS_BB


	)

1912 
	#DBP_BôNumbî
 
DBP_BIT_NUMBER


	)

1913 
	#PVDE_BôNumbî
 
PVDE_BIT_NUMBER


	)

1914 
	#PMODE_BôNumbî
 
PMODE_BIT_NUMBER


	)

1915 
	#EWUP_BôNumbî
 
EWUP_BIT_NUMBER


	)

1916 
	#FPDS_BôNumbî
 
FPDS_BIT_NUMBER


	)

1917 
	#ODEN_BôNumbî
 
ODEN_BIT_NUMBER


	)

1918 
	#ODSWEN_BôNumbî
 
ODSWEN_BIT_NUMBER


	)

1919 
	#MRLVDS_BôNumbî
 
MRLVDS_BIT_NUMBER


	)

1920 
	#LPLVDS_BôNumbî
 
LPLVDS_BIT_NUMBER


	)

1921 
	#BRE_BôNumbî
 
BRE_BIT_NUMBER


	)

1923 
	#PWR_MODE_EVT
 
PWR_PVD_MODE_NORMAL


	)

1925 #i‡
deföed
 (
STM32U5
)

1926 
	#PWR_SRAM1_PAGE1_STOP_RETENTION
 
PWR_SRAM1_PAGE1_STOP


	)

1927 
	#PWR_SRAM1_PAGE2_STOP_RETENTION
 
PWR_SRAM1_PAGE2_STOP


	)

1928 
	#PWR_SRAM1_PAGE3_STOP_RETENTION
 
PWR_SRAM1_PAGE3_STOP


	)

1929 
	#PWR_SRAM1_PAGE4_STOP_RETENTION
 
PWR_SRAM1_PAGE4_STOP


	)

1930 
	#PWR_SRAM1_PAGE5_STOP_RETENTION
 
PWR_SRAM1_PAGE5_STOP


	)

1931 
	#PWR_SRAM1_PAGE6_STOP_RETENTION
 
PWR_SRAM1_PAGE6_STOP


	)

1932 
	#PWR_SRAM1_PAGE7_STOP_RETENTION
 
PWR_SRAM1_PAGE7_STOP


	)

1933 
	#PWR_SRAM1_PAGE8_STOP_RETENTION
 
PWR_SRAM1_PAGE8_STOP


	)

1934 
	#PWR_SRAM1_PAGE9_STOP_RETENTION
 
PWR_SRAM1_PAGE9_STOP


	)

1935 
	#PWR_SRAM1_PAGE10_STOP_RETENTION
 
PWR_SRAM1_PAGE10_STOP


	)

1936 
	#PWR_SRAM1_PAGE11_STOP_RETENTION
 
PWR_SRAM1_PAGE11_STOP


	)

1937 
	#PWR_SRAM1_PAGE12_STOP_RETENTION
 
PWR_SRAM1_PAGE12_STOP


	)

1938 
	#PWR_SRAM1_FULL_STOP_RETENTION
 
PWR_SRAM1_FULL_STOP


	)

1940 
	#PWR_SRAM2_PAGE1_STOP_RETENTION
 
PWR_SRAM2_PAGE1_STOP


	)

1941 
	#PWR_SRAM2_PAGE2_STOP_RETENTION
 
PWR_SRAM2_PAGE2_STOP


	)

1942 
	#PWR_SRAM2_FULL_STOP_RETENTION
 
PWR_SRAM2_FULL_STOP


	)

1944 
	#PWR_SRAM3_PAGE1_STOP_RETENTION
 
PWR_SRAM3_PAGE1_STOP


	)

1945 
	#PWR_SRAM3_PAGE2_STOP_RETENTION
 
PWR_SRAM3_PAGE2_STOP


	)

1946 
	#PWR_SRAM3_PAGE3_STOP_RETENTION
 
PWR_SRAM3_PAGE3_STOP


	)

1947 
	#PWR_SRAM3_PAGE4_STOP_RETENTION
 
PWR_SRAM3_PAGE4_STOP


	)

1948 
	#PWR_SRAM3_PAGE5_STOP_RETENTION
 
PWR_SRAM3_PAGE5_STOP


	)

1949 
	#PWR_SRAM3_PAGE6_STOP_RETENTION
 
PWR_SRAM3_PAGE6_STOP


	)

1950 
	#PWR_SRAM3_PAGE7_STOP_RETENTION
 
PWR_SRAM3_PAGE7_STOP


	)

1951 
	#PWR_SRAM3_PAGE8_STOP_RETENTION
 
PWR_SRAM3_PAGE8_STOP


	)

1952 
	#PWR_SRAM3_PAGE9_STOP_RETENTION
 
PWR_SRAM3_PAGE9_STOP


	)

1953 
	#PWR_SRAM3_PAGE10_STOP_RETENTION
 
PWR_SRAM3_PAGE10_STOP


	)

1954 
	#PWR_SRAM3_PAGE11_STOP_RETENTION
 
PWR_SRAM3_PAGE11_STOP


	)

1955 
	#PWR_SRAM3_PAGE12_STOP_RETENTION
 
PWR_SRAM3_PAGE12_STOP


	)

1956 
	#PWR_SRAM3_PAGE13_STOP_RETENTION
 
PWR_SRAM3_PAGE13_STOP


	)

1957 
	#PWR_SRAM3_FULL_STOP_RETENTION
 
PWR_SRAM3_FULL_STOP


	)

1959 
	#PWR_SRAM4_FULL_STOP_RETENTION
 
PWR_SRAM4_FULL_STOP


	)

1961 
	#PWR_SRAM5_PAGE1_STOP_RETENTION
 
PWR_SRAM5_PAGE1_STOP


	)

1962 
	#PWR_SRAM5_PAGE2_STOP_RETENTION
 
PWR_SRAM5_PAGE2_STOP


	)

1963 
	#PWR_SRAM5_PAGE3_STOP_RETENTION
 
PWR_SRAM5_PAGE3_STOP


	)

1964 
	#PWR_SRAM5_PAGE4_STOP_RETENTION
 
PWR_SRAM5_PAGE4_STOP


	)

1965 
	#PWR_SRAM5_PAGE5_STOP_RETENTION
 
PWR_SRAM5_PAGE5_STOP


	)

1966 
	#PWR_SRAM5_PAGE6_STOP_RETENTION
 
PWR_SRAM5_PAGE6_STOP


	)

1967 
	#PWR_SRAM5_PAGE7_STOP_RETENTION
 
PWR_SRAM5_PAGE7_STOP


	)

1968 
	#PWR_SRAM5_PAGE8_STOP_RETENTION
 
PWR_SRAM5_PAGE8_STOP


	)

1969 
	#PWR_SRAM5_PAGE9_STOP_RETENTION
 
PWR_SRAM5_PAGE9_STOP


	)

1970 
	#PWR_SRAM5_PAGE10_STOP_RETENTION
 
PWR_SRAM5_PAGE10_STOP


	)

1971 
	#PWR_SRAM5_PAGE11_STOP_RETENTION
 
PWR_SRAM5_PAGE11_STOP


	)

1972 
	#PWR_SRAM5_PAGE12_STOP_RETENTION
 
PWR_SRAM5_PAGE12_STOP


	)

1973 
	#PWR_SRAM5_PAGE13_STOP_RETENTION
 
PWR_SRAM5_PAGE13_STOP


	)

1974 
	#PWR_SRAM5_FULL_STOP_RETENTION
 
PWR_SRAM5_FULL_STOP


	)

1976 
	#PWR_SRAM6_PAGE1_STOP_RETENTION
 
PWR_SRAM6_PAGE1_STOP


	)

1977 
	#PWR_SRAM6_PAGE2_STOP_RETENTION
 
PWR_SRAM6_PAGE2_STOP


	)

1978 
	#PWR_SRAM6_PAGE3_STOP_RETENTION
 
PWR_SRAM6_PAGE3_STOP


	)

1979 
	#PWR_SRAM6_PAGE4_STOP_RETENTION
 
PWR_SRAM6_PAGE4_STOP


	)

1980 
	#PWR_SRAM6_PAGE5_STOP_RETENTION
 
PWR_SRAM6_PAGE5_STOP


	)

1981 
	#PWR_SRAM6_PAGE6_STOP_RETENTION
 
PWR_SRAM6_PAGE6_STOP


	)

1982 
	#PWR_SRAM6_PAGE7_STOP_RETENTION
 
PWR_SRAM6_PAGE7_STOP


	)

1983 
	#PWR_SRAM6_PAGE8_STOP_RETENTION
 
PWR_SRAM6_PAGE8_STOP


	)

1984 
	#PWR_SRAM6_FULL_STOP_RETENTION
 
PWR_SRAM6_FULL_STOP


	)

1987 
	#PWR_ICACHE_FULL_STOP_RETENTION
 
PWR_ICACHE_FULL_STOP


	)

1988 
	#PWR_DCACHE1_FULL_STOP_RETENTION
 
PWR_DCACHE1_FULL_STOP


	)

1989 
	#PWR_DCACHE2_FULL_STOP_RETENTION
 
PWR_DCACHE2_FULL_STOP


	)

1990 
	#PWR_DMA2DRAM_FULL_STOP_RETENTION
 
PWR_DMA2DRAM_FULL_STOP


	)

1991 
	#PWR_PERIPHRAM_FULL_STOP_RETENTION
 
PWR_PERIPHRAM_FULL_STOP


	)

1992 
	#PWR_PKA32RAM_FULL_STOP_RETENTION
 
PWR_PKA32RAM_FULL_STOP


	)

1993 
	#PWR_GRAPHICPRAM_FULL_STOP_RETENTION
 
PWR_GRAPHICPRAM_FULL_STOP


	)

1994 
	#PWR_DSIRAM_FULL_STOP_RETENTION
 
PWR_DSIRAM_FULL_STOP


	)

1995 
	#PWR_JPEGRAM_FULL_STOP_RETENTION
 
PWR_JPEGRAM_FULL_STOP


	)

1998 
	#PWR_SRAM2_PAGE1_STANDBY_RETENTION
 
PWR_SRAM2_PAGE1_STANDBY


	)

1999 
	#PWR_SRAM2_PAGE2_STANDBY_RETENTION
 
PWR_SRAM2_PAGE2_STANDBY


	)

2000 
	#PWR_SRAM2_FULL_STANDBY_RETENTION
 
PWR_SRAM2_FULL_STANDBY


	)

2002 
	#PWR_SRAM1_FULL_RUN_RETENTION
 
PWR_SRAM1_FULL_RUN


	)

2003 
	#PWR_SRAM2_FULL_RUN_RETENTION
 
PWR_SRAM2_FULL_RUN


	)

2004 
	#PWR_SRAM3_FULL_RUN_RETENTION
 
PWR_SRAM3_FULL_RUN


	)

2005 
	#PWR_SRAM4_FULL_RUN_RETENTION
 
PWR_SRAM4_FULL_RUN


	)

2006 
	#PWR_SRAM5_FULL_RUN_RETENTION
 
PWR_SRAM5_FULL_RUN


	)

2007 
	#PWR_SRAM6_FULL_RUN_RETENTION
 
PWR_SRAM6_FULL_RUN


	)

2009 
	#PWR_ALL_RAM_RUN_RETENTION_MASK
 
PWR_ALL_RAM_RUN_MASK


	)

2019 #i‡
deföed
(
STM32H5
Ë|| deföed(
STM32WBA
Ë|| deföed(
STM32H7RS
)

2020 
	#HAL_RTCEx_SëBoŸh¨dw¨eKey
 
HAL_RTCEx_LockBoŸH¨dw¨eKey


	)

2021 
	#HAL_RTCEx_BKUPBlock_E«bÀ
 
HAL_RTCEx_BKUPBlock


	)

2022 
	#HAL_RTCEx_BKUPBlock_DißbÀ
 
HAL_RTCEx_BKUPUnblock


	)

2023 
	#HAL_RTCEx_Eø£_Se¸ëDev_C⁄f
 
HAL_RTCEx_C⁄figEø£Devi˚Se¸ës


	)

2033 
	#HAL_SMBUS_Sœve_Li°í_IT
 
HAL_SMBUS_E«bÀLi°í_IT


	)

2034 
	#HAL_SMBUS_SœveAddrCÆlback
 
HAL_SMBUS_AddrCÆlback


	)

2035 
	#HAL_SMBUS_SœveLi°íC∂tCÆlback
 
HAL_SMBUS_Li°íC∂tCÆlback


	)

2043 
	#HAL_SPI_FlushRxFifo
 
HAL_SPIEx_FlushRxFifo


	)

2051 
	#HAL_TIM_DMADñayPul£C∂t
 
TIM_DMADñayPul£C∂t


	)

2052 
	#HAL_TIM_DMAEº‹
 
TIM_DMAEº‹


	)

2053 
	#HAL_TIM_DMAC≠tuªC∂t
 
TIM_DMAC≠tuªC∂t


	)

2054 
	#HAL_TIMEx_DMACommuèti⁄C∂t
 
TIMEx_DMACommuèti⁄C∂t


	)

2055 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32F0
Ë|| deföed(
STM32F1
Ë|| deföed(
STM32F2
) || \

2056 
deföed
(
STM32F3
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32L0
Ë|| deföed(
STM32L4
)

2057 
	#HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄
 
HAL_TIM_SœveC⁄figSynchro


	)

2058 
	#HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄_IT
 
HAL_TIM_SœveC⁄figSynchro_IT


	)

2059 
	#HAL_TIMEx_Commuèti⁄CÆlback
 
HAL_TIMEx_CommutCÆlback


	)

2060 
	#HAL_TIMEx_C⁄figCommuèti⁄Evít
 
HAL_TIMEx_C⁄figCommutEvít


	)

2061 
	#HAL_TIMEx_C⁄figCommuèti⁄Evít_IT
 
HAL_TIMEx_C⁄figCommutEvít_IT


	)

2062 
	#HAL_TIMEx_C⁄figCommuèti⁄Evít_DMA
 
HAL_TIMEx_C⁄figCommutEvít_DMA


	)

2071 
	#HAL_UART_WakeupCÆlback
 
HAL_UARTEx_WakeupCÆlback


	)

2079 
	#HAL_LTDC_LöeEvíCÆlback
 
HAL_LTDC_LöeEvítCÆlback


	)

2080 
	#HAL_LTDC_Rñaod
 
HAL_LTDC_Rñﬂd


	)

2081 
	#HAL_LTDC_Såu˘InôFromVideoC⁄fig
 
HAL_LTDCEx_Såu˘InôFromVideoC⁄fig


	)

2082 
	#HAL_LTDC_Såu˘InôFromAd≠ãdComm™dC⁄fig
 
HAL_LTDCEx_Såu˘InôFromAd≠ãdComm™dC⁄fig


	)

2101 
	#AES_IT_CC
 
CRYP_IT_CC


	)

2102 
	#AES_IT_ERR
 
CRYP_IT_ERR


	)

2103 
	#AES_FLAG_CCF
 
CRYP_FLAG_CCF


	)

2111 
	#__HAL_GET_BOOT_MODE
 
__HAL_SYSCFG_GET_BOOT_MODE


	)

2112 
	#__HAL_REMAPMEMORY_FLASH
 
__HAL_SYSCFG_REMAPMEMORY_FLASH


	)

2113 
	#__HAL_REMAPMEMORY_SYSTEMFLASH
 
__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH


	)

2114 
	#__HAL_REMAPMEMORY_SRAM
 
__HAL_SYSCFG_REMAPMEMORY_SRAM


	)

2115 
	#__HAL_REMAPMEMORY_FMC
 
__HAL_SYSCFG_REMAPMEMORY_FMC


	)

2116 
	#__HAL_REMAPMEMORY_FMC_SDRAM
 
__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM


	)

2117 
	#__HAL_REMAPMEMORY_FSMC
 
__HAL_SYSCFG_REMAPMEMORY_FSMC


	)

2118 
	#__HAL_REMAPMEMORY_QUADSPI
 
__HAL_SYSCFG_REMAPMEMORY_QUADSPI


	)

2119 
	#__HAL_FMC_BANK
 
__HAL_SYSCFG_FMC_BANK


	)

2120 
	#__HAL_GET_FLAG
 
__HAL_SYSCFG_GET_FLAG


	)

2121 
	#__HAL_CLEAR_FLAG
 
__HAL_SYSCFG_CLEAR_FLAG


	)

2122 
	#__HAL_VREFINT_OUT_ENABLE
 
__HAL_SYSCFG_VREFINT_OUT_ENABLE


	)

2123 
	#__HAL_VREFINT_OUT_DISABLE
 
__HAL_SYSCFG_VREFINT_OUT_DISABLE


	)

2124 
	#__HAL_SYSCFG_SRAM2_WRP_ENABLE
 
__HAL_SYSCFG_SRAM2_WRP_0_31_ENABLE


	)

2126 
	#SYSCFG_FLAG_VREF_READY
 
SYSCFG_FLAG_VREFINT_READY


	)

2127 
	#SYSCFG_FLAG_RC48
 
RCC_FLAG_HSI48


	)

2128 
	#IS_SYSCFG_FASTMODEPLUS_CONFIG
 
IS_I2C_FASTMODEPLUS


	)

2129 
	#UFB_MODE_BôNumbî
 
UFB_MODE_BIT_NUMBER


	)

2130 
	#CMP_PD_BôNumbî
 
CMP_PD_BIT_NUMBER


	)

2140 
	#__ADC_ENABLE
 
__HAL_ADC_ENABLE


	)

2141 
	#__ADC_DISABLE
 
__HAL_ADC_DISABLE


	)

2142 
	#__HAL_ADC_ENABLING_CONDITIONS
 
ADC_ENABLING_CONDITIONS


	)

2143 
	#__HAL_ADC_DISABLING_CONDITIONS
 
ADC_DISABLING_CONDITIONS


	)

2144 
	#__HAL_ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

2145 
	#__ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

2146 
	#__HAL_ADC_IS_SOFTWARE_START_REGULAR
 
ADC_IS_SOFTWARE_START_REGULAR


	)

2147 
	#__HAL_ADC_IS_SOFTWARE_START_INJECTED
 
ADC_IS_SOFTWARE_START_INJECTED


	)

2148 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
 
ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED


	)

2149 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR
 
ADC_IS_CONVERSION_ONGOING_REGULAR


	)

2150 
	#__HAL_ADC_IS_CONVERSION_ONGOING_INJECTED
 
ADC_IS_CONVERSION_ONGOING_INJECTED


	)

2151 
	#__HAL_ADC_IS_CONVERSION_ONGOING
 
ADC_IS_CONVERSION_ONGOING


	)

2152 
	#__HAL_ADC_CLEAR_ERRORCODE
 
ADC_CLEAR_ERRORCODE


	)

2154 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

2155 
	#__HAL_ADC_JSQR_RK
 
ADC_JSQR_RK


	)

2156 
	#__HAL_ADC_CFGR_AWD1CH
 
ADC_CFGR_AWD1CH_SHIFT


	)

2157 
	#__HAL_ADC_CFGR_AWD23CR
 
ADC_CFGR_AWD23CR


	)

2158 
	#__HAL_ADC_CFGR_INJECT_AUTO_CONVERSION
 
ADC_CFGR_INJECT_AUTO_CONVERSION


	)

2159 
	#__HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE
 
ADC_CFGR_INJECT_CONTEXT_QUEUE


	)

2160 
	#__HAL_ADC_CFGR_INJECT_DISCCONTINUOUS
 
ADC_CFGR_INJECT_DISCCONTINUOUS


	)

2161 
	#__HAL_ADC_CFGR_REG_DISCCONTINUOUS
 
ADC_CFGR_REG_DISCCONTINUOUS


	)

2162 
	#__HAL_ADC_CFGR_DISCONTINUOUS_NUM
 
ADC_CFGR_DISCONTINUOUS_NUM


	)

2163 
	#__HAL_ADC_CFGR_AUTOWAIT
 
ADC_CFGR_AUTOWAIT


	)

2164 
	#__HAL_ADC_CFGR_CONTINUOUS
 
ADC_CFGR_CONTINUOUS


	)

2165 
	#__HAL_ADC_CFGR_OVERRUN
 
ADC_CFGR_OVERRUN


	)

2166 
	#__HAL_ADC_CFGR_DMACONTREQ
 
ADC_CFGR_DMACONTREQ


	)

2167 
	#__HAL_ADC_CFGR_EXTSEL
 
ADC_CFGR_EXTSEL_SET


	)

2168 
	#__HAL_ADC_JSQR_JEXTSEL
 
ADC_JSQR_JEXTSEL_SET


	)

2169 
	#__HAL_ADC_OFR_CHANNEL
 
ADC_OFR_CHANNEL


	)

2170 
	#__HAL_ADC_DIFSEL_CHANNEL
 
ADC_DIFSEL_CHANNEL


	)

2171 
	#__HAL_ADC_CALFACT_DIFF_SET
 
ADC_CALFACT_DIFF_SET


	)

2172 
	#__HAL_ADC_CALFACT_DIFF_GET
 
ADC_CALFACT_DIFF_GET


	)

2173 
	#__HAL_ADC_TRX_HIGHTHRESHOLD
 
ADC_TRX_HIGHTHRESHOLD


	)

2175 
	#__HAL_ADC_OFFSET_SHIFT_RESOLUTION
 
ADC_OFFSET_SHIFT_RESOLUTION


	)

2176 
	#__HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD1THRESHOLD_SHIFT_RESOLUTION


	)

2177 
	#__HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD23THRESHOLD_SHIFT_RESOLUTION


	)

2178 
	#__HAL_ADC_COMMON_REGISTER
 
ADC_COMMON_REGISTER


	)

2179 
	#__HAL_ADC_COMMON_CCR_MULTI
 
ADC_COMMON_CCR_MULTI


	)

2180 
	#__HAL_ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

2181 
	#__ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

2182 
	#__HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER
 
ADC_NONMULTIMODE_OR_MULTIMODEMASTER


	)

2183 
	#__HAL_ADC_COMMON_ADC_OTHER
 
ADC_COMMON_ADC_OTHER


	)

2184 
	#__HAL_ADC_MULTI_SLAVE
 
ADC_MULTI_SLAVE


	)

2186 
	#__HAL_ADC_SQR1_L
 
ADC_SQR1_L_SHIFT


	)

2187 
	#__HAL_ADC_JSQR_JL
 
ADC_JSQR_JL_SHIFT


	)

2188 
	#__HAL_ADC_JSQR_RK_JL
 
ADC_JSQR_RK_JL


	)

2189 
	#__HAL_ADC_CR1_DISCONTINUOUS_NUM
 
ADC_CR1_DISCONTINUOUS_NUM


	)

2190 
	#__HAL_ADC_CR1_SCAN
 
ADC_CR1_SCAN_SET


	)

2191 
	#__HAL_ADC_CONVCYCLES_MAX_RANGE
 
ADC_CONVCYCLES_MAX_RANGE


	)

2192 
	#__HAL_ADC_CLOCK_PRESCALER_RANGE
 
ADC_CLOCK_PRESCALER_RANGE


	)

2193 
	#__HAL_ADC_GET_CLOCK_PRESCALER
 
ADC_GET_CLOCK_PRESCALER


	)

2195 
	#__HAL_ADC_SQR1
 
ADC_SQR1


	)

2196 
	#__HAL_ADC_SMPR1
 
ADC_SMPR1


	)

2197 
	#__HAL_ADC_SMPR2
 
ADC_SMPR2


	)

2198 
	#__HAL_ADC_SQR3_RK
 
ADC_SQR3_RK


	)

2199 
	#__HAL_ADC_SQR2_RK
 
ADC_SQR2_RK


	)

2200 
	#__HAL_ADC_SQR1_RK
 
ADC_SQR1_RK


	)

2201 
	#__HAL_ADC_CR2_CONTINUOUS
 
ADC_CR2_CONTINUOUS


	)

2202 
	#__HAL_ADC_CR1_DISCONTINUOUS
 
ADC_CR1_DISCONTINUOUS


	)

2203 
	#__HAL_ADC_CR1_SCANCONV
 
ADC_CR1_SCANCONV


	)

2204 
	#__HAL_ADC_CR2_EOCSñe˘i⁄
 
ADC_CR2_EOCSñe˘i⁄


	)

2205 
	#__HAL_ADC_CR2_DMAC⁄tReq
 
ADC_CR2_DMAC⁄tReq


	)

2206 
	#__HAL_ADC_JSQR
 
ADC_JSQR


	)

2208 
	#__HAL_ADC_CHSELR_CHANNEL
 
ADC_CHSELR_CHANNEL


	)

2209 
	#__HAL_ADC_CFGR1_REG_DISCCONTINUOUS
 
ADC_CFGR1_REG_DISCCONTINUOUS


	)

2210 
	#__HAL_ADC_CFGR1_AUTOOFF
 
ADC_CFGR1_AUTOOFF


	)

2211 
	#__HAL_ADC_CFGR1_AUTOWAIT
 
ADC_CFGR1_AUTOWAIT


	)

2212 
	#__HAL_ADC_CFGR1_CONTINUOUS
 
ADC_CFGR1_CONTINUOUS


	)

2213 
	#__HAL_ADC_CFGR1_OVERRUN
 
ADC_CFGR1_OVERRUN


	)

2214 
	#__HAL_ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR


	)

2215 
	#__HAL_ADC_CFGR1_DMACONTREQ
 
ADC_CFGR1_DMACONTREQ


	)

2224 
	#__HAL_DHR12R1_ALIGNEMENT
 
DAC_DHR12R1_ALIGNMENT


	)

2225 
	#__HAL_DHR12R2_ALIGNEMENT
 
DAC_DHR12R2_ALIGNMENT


	)

2226 
	#__HAL_DHR12RD_ALIGNEMENT
 
DAC_DHR12RD_ALIGNMENT


	)

2227 
	#IS_DAC_GENERATE_WAVE
 
IS_DAC_WAVE


	)

2236 
	#__HAL_FREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM1


	)

2237 
	#__HAL_UNFREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM1


	)

2238 
	#__HAL_FREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM2


	)

2239 
	#__HAL_UNFREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM2


	)

2240 
	#__HAL_FREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM3


	)

2241 
	#__HAL_UNFREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM3


	)

2242 
	#__HAL_FREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM4


	)

2243 
	#__HAL_UNFREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM4


	)

2244 
	#__HAL_FREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM5


	)

2245 
	#__HAL_UNFREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM5


	)

2246 
	#__HAL_FREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM6


	)

2247 
	#__HAL_UNFREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM6


	)

2248 
	#__HAL_FREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM7


	)

2249 
	#__HAL_UNFREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM7


	)

2250 
	#__HAL_FREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM8


	)

2251 
	#__HAL_UNFREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM8


	)

2253 
	#__HAL_FREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM9


	)

2254 
	#__HAL_UNFREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM9


	)

2255 
	#__HAL_FREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM10


	)

2256 
	#__HAL_UNFREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM10


	)

2257 
	#__HAL_FREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM11


	)

2258 
	#__HAL_UNFREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM11


	)

2259 
	#__HAL_FREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM12


	)

2260 
	#__HAL_UNFREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM12


	)

2261 
	#__HAL_FREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM13


	)

2262 
	#__HAL_UNFREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM13


	)

2263 
	#__HAL_FREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM14


	)

2264 
	#__HAL_UNFREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM14


	)

2265 
	#__HAL_FREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN2


	)

2266 
	#__HAL_UNFREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN2


	)

2269 
	#__HAL_FREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM15


	)

2270 
	#__HAL_UNFREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM15


	)

2271 
	#__HAL_FREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM16


	)

2272 
	#__HAL_UNFREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM16


	)

2273 
	#__HAL_FREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM17


	)

2274 
	#__HAL_UNFREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM17


	)

2275 
	#__HAL_FREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_FREEZE_RTC


	)

2276 
	#__HAL_UNFREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_RTC


	)

2277 #i‡
deföed
(
STM32H7
)

2278 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG1


	)

2279 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UnFªeze_WWDG1


	)

2280 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG1


	)

2281 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UnFªeze_IWDG1


	)

2283 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG


	)

2284 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_WWDG


	)

2285 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG


	)

2286 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_IWDG


	)

2288 
	#__HAL_FREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT


	)

2289 
	#__HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT


	)

2290 
	#__HAL_FREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT


	)

2291 
	#__HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT


	)

2292 
	#__HAL_FREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT


	)

2293 
	#__HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT


	)

2294 
	#__HAL_FREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN1


	)

2295 
	#__HAL_UNFREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN1


	)

2296 
	#__HAL_FREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM1


	)

2297 
	#__HAL_UNFREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM1


	)

2298 
	#__HAL_FREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM2


	)

2299 
	#__HAL_UNFREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM2


	)

2308 #i‡
deföed
(
STM32F3
)

2309 
	#COMP_START
 
__HAL_COMP_ENABLE


	)

2310 
	#COMP_STOP
 
__HAL_COMP_DISABLE


	)

2311 
	#COMP_LOCK
 
__HAL_COMP_LOCK


	)

2313 #i‡
deföed
(
STM32F301x8
Ë|| deföed(
STM32F302x8
Ë|| deföed(
STM32F318xx
Ë|| deföed(
STM32F303x8
) || \

2314 
deföed
(
STM32F334x8
Ë|| deföed(
STM32F328xx
)

2315 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

2316 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

2317 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

2318 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

2319 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

2320 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

2321 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

2322 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

2323 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

2324 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

2325 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

2326 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

2327 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

2328 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

2329 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

2330 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

2331 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

2332 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

2333 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

2334 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

2335 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

2336 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

2337 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

2338 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

2340 #i‡
deföed
(
STM32F302xE
Ë|| deföed(
STM32F302xC
)

2341 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2342 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

2343 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

2344 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

2345 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2346 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

2347 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

2348 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

2349 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2350 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

2351 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

2352 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

2353 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2354 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

2355 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

2356 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

2357 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2358 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

2359 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

2360 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

2361 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2362 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

2363 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

2364 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

2365 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2366 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

2367 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

2368 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

2369 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2370 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

2371 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

2372 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

2374 #i‡
deföed
(
STM32F303xE
Ë|| deföed(
STM32F398xx
Ë|| deföed(
STM32F303xC
Ë|| deföed(
STM32F358xx
)

2375 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2376 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

2377 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE
() : \

2378 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

2379 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE
() : \

2380 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
() : \

2381 
	`__HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE
())

	)

2382 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2383 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

2384 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE
() : \

2385 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

2386 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE
() : \

2387 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
() : \

2388 
	`__HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE
())

	)

2389 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2390 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

2391 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE
() : \

2392 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

2393 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE
() : \

2394 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
() : \

2395 
	`__HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE
())

	)

2396 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2397 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

2398 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE
() : \

2399 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

2400 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE
() : \

2401 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
() : \

2402 
	`__HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE
())

	)

2403 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2404 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

2405 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_IT
() : \

2406 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

2407 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_IT
() : \

2408 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
() : \

2409 
	`__HAL_COMP_COMP7_EXTI_ENABLE_IT
())

	)

2410 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2411 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

2412 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_IT
() : \

2413 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

2414 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_IT
() : \

2415 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
() : \

2416 
	`__HAL_COMP_COMP7_EXTI_DISABLE_IT
())

	)

2417 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2418 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

2419 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_GET_FLAG
() : \

2420 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

2421 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_GET_FLAG
() : \

2422 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
() : \

2423 
	`__HAL_COMP_COMP7_EXTI_GET_FLAG
())

	)

2424 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2425 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

2426 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_CLEAR_FLAG
() : \

2427 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

2428 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_CLEAR_FLAG
() : \

2429 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
() : \

2430 
	`__HAL_COMP_COMP7_EXTI_CLEAR_FLAG
())

	)

2432 #i‡
deföed
(
STM32F373xC
Ë||deföed(
STM32F378xx
)

2433 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2434 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

2435 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2436 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

2437 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2438 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

2439 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2440 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

2441 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2442 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

2443 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2444 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

2445 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2446 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

2447 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2448 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

2451 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2452 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

2453 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2454 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

2455 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2456 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

2457 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2458 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

2459 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2460 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

2461 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2462 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

2463 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2464 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

2465 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2466 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

2469 
	#__HAL_COMP_GET_EXTI_LINE
 
COMP_GET_EXTI_LINE


	)

2471 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

2476 
	#__HAL_COMP_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
	`__HAL_COMP_IS_LOCKED
(__HANDLE__))

	)

2482 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

2486 
	#HAL_COMP_Sèπ_IT
 
HAL_COMP_Sèπ


	)

2488 
	#HAL_COMP_St›_IT
 
HAL_COMP_St›


	)

2499 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WAVE_NONE
) || \

2500 ((
WAVE
Ë=
DAC_WAVE_NOISE
)|| \

2501 ((
WAVE
Ë=
DAC_WAVE_TRIANGLE
))

	)

2511 
	#IS_WRPAREA
 
IS_OB_WRPAREA


	)

2512 
	#IS_TYPEPROGRAM
 
IS_FLASH_TYPEPROGRAM


	)

2513 
	#IS_TYPEPROGRAMFLASH
 
IS_FLASH_TYPEPROGRAM


	)

2514 
	#IS_TYPEERASE
 
IS_FLASH_TYPEERASE


	)

2515 
	#IS_NBSECTORS
 
IS_FLASH_NBSECTORS


	)

2516 
	#IS_OB_WDG_SOURCE
 
IS_OB_IWDG_SOURCE


	)

2526 
	#__HAL_I2C_RESET_CR2
 
I2C_RESET_CR2


	)

2527 
	#__HAL_I2C_GENERATE_START
 
I2C_GENERATE_START


	)

2528 #i‡
deföed
(
STM32F1
)

2529 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQRANGE


	)

2531 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQ_RANGE


	)

2533 
	#__HAL_I2C_RISE_TIME
 
I2C_RISE_TIME


	)

2534 
	#__HAL_I2C_SPEED_STANDARD
 
I2C_SPEED_STANDARD


	)

2535 
	#__HAL_I2C_SPEED_FAST
 
I2C_SPEED_FAST


	)

2536 
	#__HAL_I2C_SPEED
 
I2C_SPEED


	)

2537 
	#__HAL_I2C_7BIT_ADD_WRITE
 
I2C_7BIT_ADD_WRITE


	)

2538 
	#__HAL_I2C_7BIT_ADD_READ
 
I2C_7BIT_ADD_READ


	)

2539 
	#__HAL_I2C_10BIT_ADDRESS
 
I2C_10BIT_ADDRESS


	)

2540 
	#__HAL_I2C_10BIT_HEADER_WRITE
 
I2C_10BIT_HEADER_WRITE


	)

2541 
	#__HAL_I2C_10BIT_HEADER_READ
 
I2C_10BIT_HEADER_READ


	)

2542 
	#__HAL_I2C_MEM_ADD_MSB
 
I2C_MEM_ADD_MSB


	)

2543 
	#__HAL_I2C_MEM_ADD_LSB
 
I2C_MEM_ADD_LSB


	)

2544 
	#__HAL_I2C_FREQRANGE
 
I2C_FREQRANGE


	)

2553 
	#IS_I2S_INSTANCE
 
IS_I2S_ALL_INSTANCE


	)

2554 
	#IS_I2S_INSTANCE_EXT
 
IS_I2S_ALL_INSTANCE_EXT


	)

2556 #i‡
deföed
(
STM32H7
)

2557 
	#__HAL_I2S_CLEAR_FREFLAG
 
__HAL_I2S_CLEAR_TIFREFLAG


	)

2568 
	#__IRDA_DISABLE
 
__HAL_IRDA_DISABLE


	)

2569 
	#__IRDA_ENABLE
 
__HAL_IRDA_ENABLE


	)

2571 
	#__HAL_IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

2572 
	#__HAL_IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

2573 
	#__IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

2574 
	#__IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

2576 
	#IS_IRDA_ONEBIT_SAMPLE
 
IS_IRDA_ONE_BIT_SAMPLE


	)

2587 
	#__HAL_IWDG_ENABLE_WRITE_ACCESS
 
IWDG_ENABLE_WRITE_ACCESS


	)

2588 
	#__HAL_IWDG_DISABLE_WRITE_ACCESS
 
IWDG_DISABLE_WRITE_ACCESS


	)

2598 
	#__HAL_LPTIM_ENABLE_INTERRUPT
 
__HAL_LPTIM_ENABLE_IT


	)

2599 
	#__HAL_LPTIM_DISABLE_INTERRUPT
 
__HAL_LPTIM_DISABLE_IT


	)

2600 
	#__HAL_LPTIM_GET_ITSTATUS
 
__HAL_LPTIM_GET_IT_SOURCE


	)

2610 
	#__OPAMP_CSR_OPAXPD
 
OPAMP_CSR_OPAXPD


	)

2611 
	#__OPAMP_CSR_S3SELX
 
OPAMP_CSR_S3SELX


	)

2612 
	#__OPAMP_CSR_S4SELX
 
OPAMP_CSR_S4SELX


	)

2613 
	#__OPAMP_CSR_S5SELX
 
OPAMP_CSR_S5SELX


	)

2614 
	#__OPAMP_CSR_S6SELX
 
OPAMP_CSR_S6SELX


	)

2615 
	#__OPAMP_CSR_OPAXCAL_L
 
OPAMP_CSR_OPAXCAL_L


	)

2616 
	#__OPAMP_CSR_OPAXCAL_H
 
OPAMP_CSR_OPAXCAL_H


	)

2617 
	#__OPAMP_CSR_OPAXLPM
 
OPAMP_CSR_OPAXLPM


	)

2618 
	#__OPAMP_CSR_ALL_SWITCHES
 
OPAMP_CSR_ALL_SWITCHES


	)

2619 
	#__OPAMP_CSR_ANAWSELX
 
OPAMP_CSR_ANAWSELX


	)

2620 
	#__OPAMP_CSR_OPAXCALOUT
 
OPAMP_CSR_OPAXCALOUT


	)

2621 
	#__OPAMP_OFFSET_TRIM_BITSPOSITION
 
OPAMP_OFFSET_TRIM_BITSPOSITION


	)

2622 
	#__OPAMP_OFFSET_TRIM_SET
 
OPAMP_OFFSET_TRIM_SET


	)

2632 
	#__HAL_PVD_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

2633 
	#__HAL_PVD_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

2634 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

2635 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2636 
	#__HAL_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

2637 
	#__HAL_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2638 
	#__HAL_PVM_EVENT_DISABLE
 
__HAL_PWR_PVM_EVENT_DISABLE


	)

2639 
	#__HAL_PVM_EVENT_ENABLE
 
__HAL_PWR_PVM_EVENT_ENABLE


	)

2640 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE


	)

2641 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE


	)

2642 
	#__HAL_PVM_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE


	)

2643 
	#__HAL_PVM_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE


	)

2644 
	#__HAL_PWR_INTERNALWAKEUP_DISABLE
 
HAL_PWREx_DißbÀI¡î«lWakeUpLöe


	)

2645 
	#__HAL_PWR_INTERNALWAKEUP_ENABLE
 
HAL_PWREx_E«bÀI¡î«lWakeUpLöe


	)

2646 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE
 
HAL_PWREx_DißbÀPuŒUpPuŒDownC⁄fig


	)

2647 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE
 
HAL_PWREx_E«bÀPuŒUpPuŒDownC⁄fig


	)

2648 
	#__HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER
(Ëdÿ{ 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(); \

2649 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(); \

2650 } 0)

	)

2651 
	#__HAL_PWR_PVD_EXTI_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

2652 
	#__HAL_PWR_PVD_EXTI_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

2653 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

2654 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2655 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

2656 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2657 
	#__HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2658 
	#__HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2659 
	#__HAL_PWR_PVM_DISABLE
(Ëdÿ{ 
	`HAL_PWREx_DißbÀPVM1
();
	`HAL_PWREx_DißbÀPVM2
(); \

2660 
	`HAL_PWREx_DißbÀPVM3
();
	`HAL_PWREx_DißbÀPVM4
(); \

2661 } 0)

	)

2662 
	#__HAL_PWR_PVM_ENABLE
(Ëdÿ{ 
	`HAL_PWREx_E«bÀPVM1
();
	`HAL_PWREx_E«bÀPVM2
(); \

2663 
	`HAL_PWREx_E«bÀPVM3
();
	`HAL_PWREx_E«bÀPVM4
(); \

2664 } 0)

	)

2665 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE
 
HAL_PWREx_DißbÀSRAM2C⁄ã¡Rëíti⁄


	)

2666 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE
 
HAL_PWREx_E«bÀSRAM2C⁄ã¡Rëíti⁄


	)

2667 
	#__HAL_PWR_VDDIO2_DISABLE
 
HAL_PWREx_DißbÀVddIO2


	)

2668 
	#__HAL_PWR_VDDIO2_ENABLE
 
HAL_PWREx_E«bÀVddIO2


	)

2669 
	#__HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE


	)

2670 
	#__HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE


	)

2671 
	#__HAL_PWR_VDDUSB_DISABLE
 
HAL_PWREx_DißbÀVddUSB


	)

2672 
	#__HAL_PWR_VDDUSB_ENABLE
 
HAL_PWREx_E«bÀVddUSB


	)

2674 #i‡
deföed
 (
STM32F4
)

2675 
	#__HAL_PVD_EXTI_ENABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
()

	)

2676 
	#__HAL_PVD_EXTI_DISABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
()

	)

2677 
	#__HAL_PVD_EXTI_GET_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GET_FLAG
()

	)

2678 
	#__HAL_PVD_EXTI_CLEAR_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
()

	)

2679 
	#__HAL_PVD_EXTI_GENERATE_SWIT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GENERATE_SWIT
()

	)

2681 
	#__HAL_PVD_EXTI_CLEAR_FLAG
 
__HAL_PWR_PVD_EXTI_CLEAR_FLAG


	)

2682 
	#__HAL_PVD_EXTI_DISABLE_IT
 
__HAL_PWR_PVD_EXTI_DISABLE_IT


	)

2683 
	#__HAL_PVD_EXTI_ENABLE_IT
 
__HAL_PWR_PVD_EXTI_ENABLE_IT


	)

2684 
	#__HAL_PVD_EXTI_GENERATE_SWIT
 
__HAL_PWR_PVD_EXTI_GENERATE_SWIT


	)

2685 
	#__HAL_PVD_EXTI_GET_FLAG
 
__HAL_PWR_PVD_EXTI_GET_FLAG


	)

2696 
	#RCC_St›WakeUpClock_MSI
 
RCC_STOP_WAKEUPCLOCK_MSI


	)

2697 
	#RCC_St›WakeUpClock_HSI
 
RCC_STOP_WAKEUPCLOCK_HSI


	)

2699 
	#HAL_RCC_CCSCÆlback
 
HAL_RCC_CSSCÆlback


	)

2700 
	#HAL_RC48_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
) ? \

2701 
	`HAL_RCCEx_E«bÀHSI48_VREFINT
(Ë: 
	`HAL_RCCEx_DißbÀHSI48_VREFINT
())

	)

2703 
	#__ADC_CLK_DISABLE
 
__HAL_RCC_ADC_CLK_DISABLE


	)

2704 
	#__ADC_CLK_ENABLE
 
__HAL_RCC_ADC_CLK_ENABLE


	)

2705 
	#__ADC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC_CLK_SLEEP_DISABLE


	)

2706 
	#__ADC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC_CLK_SLEEP_ENABLE


	)

2707 
	#__ADC_FORCE_RESET
 
__HAL_RCC_ADC_FORCE_RESET


	)

2708 
	#__ADC_RELEASE_RESET
 
__HAL_RCC_ADC_RELEASE_RESET


	)

2709 
	#__ADC1_CLK_DISABLE
 
__HAL_RCC_ADC1_CLK_DISABLE


	)

2710 
	#__ADC1_CLK_ENABLE
 
__HAL_RCC_ADC1_CLK_ENABLE


	)

2711 
	#__ADC1_FORCE_RESET
 
__HAL_RCC_ADC1_FORCE_RESET


	)

2712 
	#__ADC1_RELEASE_RESET
 
__HAL_RCC_ADC1_RELEASE_RESET


	)

2713 
	#__ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_ENABLE


	)

2714 
	#__ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_DISABLE


	)

2715 
	#__ADC2_CLK_DISABLE
 
__HAL_RCC_ADC2_CLK_DISABLE


	)

2716 
	#__ADC2_CLK_ENABLE
 
__HAL_RCC_ADC2_CLK_ENABLE


	)

2717 
	#__ADC2_FORCE_RESET
 
__HAL_RCC_ADC2_FORCE_RESET


	)

2718 
	#__ADC2_RELEASE_RESET
 
__HAL_RCC_ADC2_RELEASE_RESET


	)

2719 
	#__ADC3_CLK_DISABLE
 
__HAL_RCC_ADC3_CLK_DISABLE


	)

2720 
	#__ADC3_CLK_ENABLE
 
__HAL_RCC_ADC3_CLK_ENABLE


	)

2721 
	#__ADC3_FORCE_RESET
 
__HAL_RCC_ADC3_FORCE_RESET


	)

2722 
	#__ADC3_RELEASE_RESET
 
__HAL_RCC_ADC3_RELEASE_RESET


	)

2723 
	#__AES_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

2724 
	#__AES_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

2725 
	#__AES_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

2726 
	#__AES_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

2727 
	#__AES_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

2728 
	#__AES_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

2729 
	#__CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_ENABLE


	)

2730 
	#__CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_DISABLE


	)

2731 
	#__CRYP_CLK_ENABLE
 
__HAL_RCC_CRYP_CLK_ENABLE


	)

2732 
	#__CRYP_CLK_DISABLE
 
__HAL_RCC_CRYP_CLK_DISABLE


	)

2733 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

2734 
	#__CRYP_RELEASE_RESET
 
__HAL_RCC_CRYP_RELEASE_RESET


	)

2735 
	#__AFIO_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

2736 
	#__AFIO_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

2737 
	#__AFIO_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

2738 
	#__AFIO_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

2739 
	#__AHB_FORCE_RESET
 
__HAL_RCC_AHB_FORCE_RESET


	)

2740 
	#__AHB_RELEASE_RESET
 
__HAL_RCC_AHB_RELEASE_RESET


	)

2741 
	#__AHB1_FORCE_RESET
 
__HAL_RCC_AHB1_FORCE_RESET


	)

2742 
	#__AHB1_RELEASE_RESET
 
__HAL_RCC_AHB1_RELEASE_RESET


	)

2743 
	#__AHB2_FORCE_RESET
 
__HAL_RCC_AHB2_FORCE_RESET


	)

2744 
	#__AHB2_RELEASE_RESET
 
__HAL_RCC_AHB2_RELEASE_RESET


	)

2745 
	#__AHB3_FORCE_RESET
 
__HAL_RCC_AHB3_FORCE_RESET


	)

2746 
	#__AHB3_RELEASE_RESET
 
__HAL_RCC_AHB3_RELEASE_RESET


	)

2747 
	#__APB1_FORCE_RESET
 
__HAL_RCC_APB1_FORCE_RESET


	)

2748 
	#__APB1_RELEASE_RESET
 
__HAL_RCC_APB1_RELEASE_RESET


	)

2749 
	#__APB2_FORCE_RESET
 
__HAL_RCC_APB2_FORCE_RESET


	)

2750 
	#__APB2_RELEASE_RESET
 
__HAL_RCC_APB2_RELEASE_RESET


	)

2751 #i‡
deföed
(
STM32C0
)

2752 
	#__HAL_RCC_APB1_FORCE_RESET
 
__HAL_RCC_APB1_GRP1_FORCE_RESET


	)

2753 
	#__HAL_RCC_APB1_RELEASE_RESET
 
__HAL_RCC_APB1_GRP1_RELEASE_RESET


	)

2754 
	#__HAL_RCC_APB2_FORCE_RESET
 
__HAL_RCC_APB1_GRP2_FORCE_RESET


	)

2755 
	#__HAL_RCC_APB2_RELEASE_RESET
 
__HAL_RCC_APB1_GRP2_RELEASE_RESET


	)

2757 
	#__BKP_CLK_DISABLE
 
__HAL_RCC_BKP_CLK_DISABLE


	)

2758 
	#__BKP_CLK_ENABLE
 
__HAL_RCC_BKP_CLK_ENABLE


	)

2759 
	#__BKP_FORCE_RESET
 
__HAL_RCC_BKP_FORCE_RESET


	)

2760 
	#__BKP_RELEASE_RESET
 
__HAL_RCC_BKP_RELEASE_RESET


	)

2761 
	#__CAN1_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

2762 
	#__CAN1_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

2763 
	#__CAN1_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_DISABLE


	)

2764 
	#__CAN1_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_ENABLE


	)

2765 
	#__CAN1_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

2766 
	#__CAN1_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

2767 
	#__CAN_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

2768 
	#__CAN_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

2769 
	#__CAN_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

2770 
	#__CAN_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

2771 
	#__CAN2_CLK_DISABLE
 
__HAL_RCC_CAN2_CLK_DISABLE


	)

2772 
	#__CAN2_CLK_ENABLE
 
__HAL_RCC_CAN2_CLK_ENABLE


	)

2773 
	#__CAN2_FORCE_RESET
 
__HAL_RCC_CAN2_FORCE_RESET


	)

2774 
	#__CAN2_RELEASE_RESET
 
__HAL_RCC_CAN2_RELEASE_RESET


	)

2775 
	#__CEC_CLK_DISABLE
 
__HAL_RCC_CEC_CLK_DISABLE


	)

2776 
	#__CEC_CLK_ENABLE
 
__HAL_RCC_CEC_CLK_ENABLE


	)

2777 
	#__COMP_CLK_DISABLE
 
__HAL_RCC_COMP_CLK_DISABLE


	)

2778 
	#__COMP_CLK_ENABLE
 
__HAL_RCC_COMP_CLK_ENABLE


	)

2779 
	#__COMP_FORCE_RESET
 
__HAL_RCC_COMP_FORCE_RESET


	)

2780 
	#__COMP_RELEASE_RESET
 
__HAL_RCC_COMP_RELEASE_RESET


	)

2781 
	#__COMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_COMP_CLK_SLEEP_ENABLE


	)

2782 
	#__COMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_COMP_CLK_SLEEP_DISABLE


	)

2783 
	#__CEC_FORCE_RESET
 
__HAL_RCC_CEC_FORCE_RESET


	)

2784 
	#__CEC_RELEASE_RESET
 
__HAL_RCC_CEC_RELEASE_RESET


	)

2785 
	#__CRC_CLK_DISABLE
 
__HAL_RCC_CRC_CLK_DISABLE


	)

2786 
	#__CRC_CLK_ENABLE
 
__HAL_RCC_CRC_CLK_ENABLE


	)

2787 
	#__CRC_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRC_CLK_SLEEP_DISABLE


	)

2788 
	#__CRC_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRC_CLK_SLEEP_ENABLE


	)

2789 
	#__CRC_FORCE_RESET
 
__HAL_RCC_CRC_FORCE_RESET


	)

2790 
	#__CRC_RELEASE_RESET
 
__HAL_RCC_CRC_RELEASE_RESET


	)

2791 
	#__DAC_CLK_DISABLE
 
__HAL_RCC_DAC_CLK_DISABLE


	)

2792 
	#__DAC_CLK_ENABLE
 
__HAL_RCC_DAC_CLK_ENABLE


	)

2793 
	#__DAC_FORCE_RESET
 
__HAL_RCC_DAC_FORCE_RESET


	)

2794 
	#__DAC_RELEASE_RESET
 
__HAL_RCC_DAC_RELEASE_RESET


	)

2795 
	#__DAC1_CLK_DISABLE
 
__HAL_RCC_DAC1_CLK_DISABLE


	)

2796 
	#__DAC1_CLK_ENABLE
 
__HAL_RCC_DAC1_CLK_ENABLE


	)

2797 
	#__DAC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_DISABLE


	)

2798 
	#__DAC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_ENABLE


	)

2799 
	#__DAC1_FORCE_RESET
 
__HAL_RCC_DAC1_FORCE_RESET


	)

2800 
	#__DAC1_RELEASE_RESET
 
__HAL_RCC_DAC1_RELEASE_RESET


	)

2801 
	#__DBGMCU_CLK_ENABLE
 
__HAL_RCC_DBGMCU_CLK_ENABLE


	)

2802 
	#__DBGMCU_CLK_DISABLE
 
__HAL_RCC_DBGMCU_CLK_DISABLE


	)

2803 
	#__DBGMCU_FORCE_RESET
 
__HAL_RCC_DBGMCU_FORCE_RESET


	)

2804 
	#__DBGMCU_RELEASE_RESET
 
__HAL_RCC_DBGMCU_RELEASE_RESET


	)

2805 
	#__DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM_CLK_DISABLE


	)

2806 
	#__DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM_CLK_ENABLE


	)

2807 
	#__DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE


	)

2808 
	#__DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE


	)

2809 
	#__DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM_FORCE_RESET


	)

2810 
	#__DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM_RELEASE_RESET


	)

2811 
	#__DMA1_CLK_DISABLE
 
__HAL_RCC_DMA1_CLK_DISABLE


	)

2812 
	#__DMA1_CLK_ENABLE
 
__HAL_RCC_DMA1_CLK_ENABLE


	)

2813 
	#__DMA1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_DISABLE


	)

2814 
	#__DMA1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_ENABLE


	)

2815 
	#__DMA1_FORCE_RESET
 
__HAL_RCC_DMA1_FORCE_RESET


	)

2816 
	#__DMA1_RELEASE_RESET
 
__HAL_RCC_DMA1_RELEASE_RESET


	)

2817 
	#__DMA2_CLK_DISABLE
 
__HAL_RCC_DMA2_CLK_DISABLE


	)

2818 
	#__DMA2_CLK_ENABLE
 
__HAL_RCC_DMA2_CLK_ENABLE


	)

2819 
	#__DMA2_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_DISABLE


	)

2820 
	#__DMA2_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_ENABLE


	)

2821 
	#__DMA2_FORCE_RESET
 
__HAL_RCC_DMA2_FORCE_RESET


	)

2822 
	#__DMA2_RELEASE_RESET
 
__HAL_RCC_DMA2_RELEASE_RESET


	)

2823 
	#__ETHMAC_CLK_DISABLE
 
__HAL_RCC_ETHMAC_CLK_DISABLE


	)

2824 
	#__ETHMAC_CLK_ENABLE
 
__HAL_RCC_ETHMAC_CLK_ENABLE


	)

2825 
	#__ETHMAC_FORCE_RESET
 
__HAL_RCC_ETHMAC_FORCE_RESET


	)

2826 
	#__ETHMAC_RELEASE_RESET
 
__HAL_RCC_ETHMAC_RELEASE_RESET


	)

2827 
	#__ETHMACRX_CLK_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_DISABLE


	)

2828 
	#__ETHMACRX_CLK_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_ENABLE


	)

2829 
	#__ETHMACTX_CLK_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_DISABLE


	)

2830 
	#__ETHMACTX_CLK_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_ENABLE


	)

2831 
	#__FIREWALL_CLK_DISABLE
 
__HAL_RCC_FIREWALL_CLK_DISABLE


	)

2832 
	#__FIREWALL_CLK_ENABLE
 
__HAL_RCC_FIREWALL_CLK_ENABLE


	)

2833 
	#__FLASH_CLK_DISABLE
 
__HAL_RCC_FLASH_CLK_DISABLE


	)

2834 
	#__FLASH_CLK_ENABLE
 
__HAL_RCC_FLASH_CLK_ENABLE


	)

2835 
	#__FLASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_DISABLE


	)

2836 
	#__FLASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_ENABLE


	)

2837 
	#__FLASH_FORCE_RESET
 
__HAL_RCC_FLASH_FORCE_RESET


	)

2838 
	#__FLASH_RELEASE_RESET
 
__HAL_RCC_FLASH_RELEASE_RESET


	)

2839 
	#__FLITF_CLK_DISABLE
 
__HAL_RCC_FLITF_CLK_DISABLE


	)

2840 
	#__FLITF_CLK_ENABLE
 
__HAL_RCC_FLITF_CLK_ENABLE


	)

2841 
	#__FLITF_FORCE_RESET
 
__HAL_RCC_FLITF_FORCE_RESET


	)

2842 
	#__FLITF_RELEASE_RESET
 
__HAL_RCC_FLITF_RELEASE_RESET


	)

2843 
	#__FLITF_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_ENABLE


	)

2844 
	#__FLITF_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_DISABLE


	)

2845 
	#__FMC_CLK_DISABLE
 
__HAL_RCC_FMC_CLK_DISABLE


	)

2846 
	#__FMC_CLK_ENABLE
 
__HAL_RCC_FMC_CLK_ENABLE


	)

2847 
	#__FMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FMC_CLK_SLEEP_DISABLE


	)

2848 
	#__FMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FMC_CLK_SLEEP_ENABLE


	)

2849 
	#__FMC_FORCE_RESET
 
__HAL_RCC_FMC_FORCE_RESET


	)

2850 
	#__FMC_RELEASE_RESET
 
__HAL_RCC_FMC_RELEASE_RESET


	)

2851 
	#__FSMC_CLK_DISABLE
 
__HAL_RCC_FSMC_CLK_DISABLE


	)

2852 
	#__FSMC_CLK_ENABLE
 
__HAL_RCC_FSMC_CLK_ENABLE


	)

2853 
	#__GPIOA_CLK_DISABLE
 
__HAL_RCC_GPIOA_CLK_DISABLE


	)

2854 
	#__GPIOA_CLK_ENABLE
 
__HAL_RCC_GPIOA_CLK_ENABLE


	)

2855 
	#__GPIOA_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE


	)

2856 
	#__GPIOA_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE


	)

2857 
	#__GPIOA_FORCE_RESET
 
__HAL_RCC_GPIOA_FORCE_RESET


	)

2858 
	#__GPIOA_RELEASE_RESET
 
__HAL_RCC_GPIOA_RELEASE_RESET


	)

2859 
	#__GPIOB_CLK_DISABLE
 
__HAL_RCC_GPIOB_CLK_DISABLE


	)

2860 
	#__GPIOB_CLK_ENABLE
 
__HAL_RCC_GPIOB_CLK_ENABLE


	)

2861 
	#__GPIOB_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE


	)

2862 
	#__GPIOB_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE


	)

2863 
	#__GPIOB_FORCE_RESET
 
__HAL_RCC_GPIOB_FORCE_RESET


	)

2864 
	#__GPIOB_RELEASE_RESET
 
__HAL_RCC_GPIOB_RELEASE_RESET


	)

2865 
	#__GPIOC_CLK_DISABLE
 
__HAL_RCC_GPIOC_CLK_DISABLE


	)

2866 
	#__GPIOC_CLK_ENABLE
 
__HAL_RCC_GPIOC_CLK_ENABLE


	)

2867 
	#__GPIOC_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE


	)

2868 
	#__GPIOC_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE


	)

2869 
	#__GPIOC_FORCE_RESET
 
__HAL_RCC_GPIOC_FORCE_RESET


	)

2870 
	#__GPIOC_RELEASE_RESET
 
__HAL_RCC_GPIOC_RELEASE_RESET


	)

2871 
	#__GPIOD_CLK_DISABLE
 
__HAL_RCC_GPIOD_CLK_DISABLE


	)

2872 
	#__GPIOD_CLK_ENABLE
 
__HAL_RCC_GPIOD_CLK_ENABLE


	)

2873 
	#__GPIOD_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE


	)

2874 
	#__GPIOD_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE


	)

2875 
	#__GPIOD_FORCE_RESET
 
__HAL_RCC_GPIOD_FORCE_RESET


	)

2876 
	#__GPIOD_RELEASE_RESET
 
__HAL_RCC_GPIOD_RELEASE_RESET


	)

2877 
	#__GPIOE_CLK_DISABLE
 
__HAL_RCC_GPIOE_CLK_DISABLE


	)

2878 
	#__GPIOE_CLK_ENABLE
 
__HAL_RCC_GPIOE_CLK_ENABLE


	)

2879 
	#__GPIOE_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE


	)

2880 
	#__GPIOE_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE


	)

2881 
	#__GPIOE_FORCE_RESET
 
__HAL_RCC_GPIOE_FORCE_RESET


	)

2882 
	#__GPIOE_RELEASE_RESET
 
__HAL_RCC_GPIOE_RELEASE_RESET


	)

2883 
	#__GPIOF_CLK_DISABLE
 
__HAL_RCC_GPIOF_CLK_DISABLE


	)

2884 
	#__GPIOF_CLK_ENABLE
 
__HAL_RCC_GPIOF_CLK_ENABLE


	)

2885 
	#__GPIOF_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE


	)

2886 
	#__GPIOF_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE


	)

2887 
	#__GPIOF_FORCE_RESET
 
__HAL_RCC_GPIOF_FORCE_RESET


	)

2888 
	#__GPIOF_RELEASE_RESET
 
__HAL_RCC_GPIOF_RELEASE_RESET


	)

2889 
	#__GPIOG_CLK_DISABLE
 
__HAL_RCC_GPIOG_CLK_DISABLE


	)

2890 
	#__GPIOG_CLK_ENABLE
 
__HAL_RCC_GPIOG_CLK_ENABLE


	)

2891 
	#__GPIOG_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE


	)

2892 
	#__GPIOG_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE


	)

2893 
	#__GPIOG_FORCE_RESET
 
__HAL_RCC_GPIOG_FORCE_RESET


	)

2894 
	#__GPIOG_RELEASE_RESET
 
__HAL_RCC_GPIOG_RELEASE_RESET


	)

2895 
	#__GPIOH_CLK_DISABLE
 
__HAL_RCC_GPIOH_CLK_DISABLE


	)

2896 
	#__GPIOH_CLK_ENABLE
 
__HAL_RCC_GPIOH_CLK_ENABLE


	)

2897 
	#__GPIOH_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE


	)

2898 
	#__GPIOH_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE


	)

2899 
	#__GPIOH_FORCE_RESET
 
__HAL_RCC_GPIOH_FORCE_RESET


	)

2900 
	#__GPIOH_RELEASE_RESET
 
__HAL_RCC_GPIOH_RELEASE_RESET


	)

2901 
	#__I2C1_CLK_DISABLE
 
__HAL_RCC_I2C1_CLK_DISABLE


	)

2902 
	#__I2C1_CLK_ENABLE
 
__HAL_RCC_I2C1_CLK_ENABLE


	)

2903 
	#__I2C1_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_DISABLE


	)

2904 
	#__I2C1_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_ENABLE


	)

2905 
	#__I2C1_FORCE_RESET
 
__HAL_RCC_I2C1_FORCE_RESET


	)

2906 
	#__I2C1_RELEASE_RESET
 
__HAL_RCC_I2C1_RELEASE_RESET


	)

2907 
	#__I2C2_CLK_DISABLE
 
__HAL_RCC_I2C2_CLK_DISABLE


	)

2908 
	#__I2C2_CLK_ENABLE
 
__HAL_RCC_I2C2_CLK_ENABLE


	)

2909 
	#__I2C2_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_DISABLE


	)

2910 
	#__I2C2_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_ENABLE


	)

2911 
	#__I2C2_FORCE_RESET
 
__HAL_RCC_I2C2_FORCE_RESET


	)

2912 
	#__I2C2_RELEASE_RESET
 
__HAL_RCC_I2C2_RELEASE_RESET


	)

2913 
	#__I2C3_CLK_DISABLE
 
__HAL_RCC_I2C3_CLK_DISABLE


	)

2914 
	#__I2C3_CLK_ENABLE
 
__HAL_RCC_I2C3_CLK_ENABLE


	)

2915 
	#__I2C3_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_DISABLE


	)

2916 
	#__I2C3_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_ENABLE


	)

2917 
	#__I2C3_FORCE_RESET
 
__HAL_RCC_I2C3_FORCE_RESET


	)

2918 
	#__I2C3_RELEASE_RESET
 
__HAL_RCC_I2C3_RELEASE_RESET


	)

2919 
	#__LCD_CLK_DISABLE
 
__HAL_RCC_LCD_CLK_DISABLE


	)

2920 
	#__LCD_CLK_ENABLE
 
__HAL_RCC_LCD_CLK_ENABLE


	)

2921 
	#__LCD_CLK_SLEEP_DISABLE
 
__HAL_RCC_LCD_CLK_SLEEP_DISABLE


	)

2922 
	#__LCD_CLK_SLEEP_ENABLE
 
__HAL_RCC_LCD_CLK_SLEEP_ENABLE


	)

2923 
	#__LCD_FORCE_RESET
 
__HAL_RCC_LCD_FORCE_RESET


	)

2924 
	#__LCD_RELEASE_RESET
 
__HAL_RCC_LCD_RELEASE_RESET


	)

2925 
	#__LPTIM1_CLK_DISABLE
 
__HAL_RCC_LPTIM1_CLK_DISABLE


	)

2926 
	#__LPTIM1_CLK_ENABLE
 
__HAL_RCC_LPTIM1_CLK_ENABLE


	)

2927 
	#__LPTIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE


	)

2928 
	#__LPTIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE


	)

2929 
	#__LPTIM1_FORCE_RESET
 
__HAL_RCC_LPTIM1_FORCE_RESET


	)

2930 
	#__LPTIM1_RELEASE_RESET
 
__HAL_RCC_LPTIM1_RELEASE_RESET


	)

2931 
	#__LPTIM2_CLK_DISABLE
 
__HAL_RCC_LPTIM2_CLK_DISABLE


	)

2932 
	#__LPTIM2_CLK_ENABLE
 
__HAL_RCC_LPTIM2_CLK_ENABLE


	)

2933 
	#__LPTIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE


	)

2934 
	#__LPTIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE


	)

2935 
	#__LPTIM2_FORCE_RESET
 
__HAL_RCC_LPTIM2_FORCE_RESET


	)

2936 
	#__LPTIM2_RELEASE_RESET
 
__HAL_RCC_LPTIM2_RELEASE_RESET


	)

2937 
	#__LPUART1_CLK_DISABLE
 
__HAL_RCC_LPUART1_CLK_DISABLE


	)

2938 
	#__LPUART1_CLK_ENABLE
 
__HAL_RCC_LPUART1_CLK_ENABLE


	)

2939 
	#__LPUART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE


	)

2940 
	#__LPUART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE


	)

2941 
	#__LPUART1_FORCE_RESET
 
__HAL_RCC_LPUART1_FORCE_RESET


	)

2942 
	#__LPUART1_RELEASE_RESET
 
__HAL_RCC_LPUART1_RELEASE_RESET


	)

2943 
	#__OPAMP_CLK_DISABLE
 
__HAL_RCC_OPAMP_CLK_DISABLE


	)

2944 
	#__OPAMP_CLK_ENABLE
 
__HAL_RCC_OPAMP_CLK_ENABLE


	)

2945 
	#__OPAMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE


	)

2946 
	#__OPAMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE


	)

2947 
	#__OPAMP_FORCE_RESET
 
__HAL_RCC_OPAMP_FORCE_RESET


	)

2948 
	#__OPAMP_RELEASE_RESET
 
__HAL_RCC_OPAMP_RELEASE_RESET


	)

2949 
	#__OTGFS_CLK_DISABLE
 
__HAL_RCC_OTGFS_CLK_DISABLE


	)

2950 
	#__OTGFS_CLK_ENABLE
 
__HAL_RCC_OTGFS_CLK_ENABLE


	)

2951 
	#__OTGFS_CLK_SLEEP_DISABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE


	)

2952 
	#__OTGFS_CLK_SLEEP_ENABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE


	)

2953 
	#__OTGFS_FORCE_RESET
 
__HAL_RCC_OTGFS_FORCE_RESET


	)

2954 
	#__OTGFS_RELEASE_RESET
 
__HAL_RCC_OTGFS_RELEASE_RESET


	)

2955 
	#__PWR_CLK_DISABLE
 
__HAL_RCC_PWR_CLK_DISABLE


	)

2956 
	#__PWR_CLK_ENABLE
 
__HAL_RCC_PWR_CLK_ENABLE


	)

2957 
	#__PWR_CLK_SLEEP_DISABLE
 
__HAL_RCC_PWR_CLK_SLEEP_DISABLE


	)

2958 
	#__PWR_CLK_SLEEP_ENABLE
 
__HAL_RCC_PWR_CLK_SLEEP_ENABLE


	)

2959 
	#__PWR_FORCE_RESET
 
__HAL_RCC_PWR_FORCE_RESET


	)

2960 
	#__PWR_RELEASE_RESET
 
__HAL_RCC_PWR_RELEASE_RESET


	)

2961 
	#__QSPI_CLK_DISABLE
 
__HAL_RCC_QSPI_CLK_DISABLE


	)

2962 
	#__QSPI_CLK_ENABLE
 
__HAL_RCC_QSPI_CLK_ENABLE


	)

2963 
	#__QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_DISABLE


	)

2964 
	#__QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_ENABLE


	)

2965 
	#__QSPI_FORCE_RESET
 
__HAL_RCC_QSPI_FORCE_RESET


	)

2966 
	#__QSPI_RELEASE_RESET
 
__HAL_RCC_QSPI_RELEASE_RESET


	)

2968 #i‡
deföed
(
STM32WB
)

2969 
	#__HAL_RCC_QSPI_CLK_DISABLE
 
__HAL_RCC_QUADSPI_CLK_DISABLE


	)

2970 
	#__HAL_RCC_QSPI_CLK_ENABLE
 
__HAL_RCC_QUADSPI_CLK_ENABLE


	)

2971 
	#__HAL_RCC_QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QUADSPI_CLK_SLEEP_DISABLE


	)

2972 
	#__HAL_RCC_QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QUADSPI_CLK_SLEEP_ENABLE


	)

2973 
	#__HAL_RCC_QSPI_FORCE_RESET
 
__HAL_RCC_QUADSPI_FORCE_RESET


	)

2974 
	#__HAL_RCC_QSPI_RELEASE_RESET
 
__HAL_RCC_QUADSPI_RELEASE_RESET


	)

2975 
	#__HAL_RCC_QSPI_IS_CLK_ENABLED
 
__HAL_RCC_QUADSPI_IS_CLK_ENABLED


	)

2976 
	#__HAL_RCC_QSPI_IS_CLK_DISABLED
 
__HAL_RCC_QUADSPI_IS_CLK_DISABLED


	)

2977 
	#__HAL_RCC_QSPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_QUADSPI_IS_CLK_SLEEP_ENABLED


	)

2978 
	#__HAL_RCC_QSPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_QUADSPI_IS_CLK_SLEEP_DISABLED


	)

2979 
	#QSPI_IRQH™dÀr
 
QUADSPI_IRQH™dÀr


	)

2982 
	#__RNG_CLK_DISABLE
 
__HAL_RCC_RNG_CLK_DISABLE


	)

2983 
	#__RNG_CLK_ENABLE
 
__HAL_RCC_RNG_CLK_ENABLE


	)

2984 
	#__RNG_CLK_SLEEP_DISABLE
 
__HAL_RCC_RNG_CLK_SLEEP_DISABLE


	)

2985 
	#__RNG_CLK_SLEEP_ENABLE
 
__HAL_RCC_RNG_CLK_SLEEP_ENABLE


	)

2986 
	#__RNG_FORCE_RESET
 
__HAL_RCC_RNG_FORCE_RESET


	)

2987 
	#__RNG_RELEASE_RESET
 
__HAL_RCC_RNG_RELEASE_RESET


	)

2988 
	#__SAI1_CLK_DISABLE
 
__HAL_RCC_SAI1_CLK_DISABLE


	)

2989 
	#__SAI1_CLK_ENABLE
 
__HAL_RCC_SAI1_CLK_ENABLE


	)

2990 
	#__SAI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_DISABLE


	)

2991 
	#__SAI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_ENABLE


	)

2992 
	#__SAI1_FORCE_RESET
 
__HAL_RCC_SAI1_FORCE_RESET


	)

2993 
	#__SAI1_RELEASE_RESET
 
__HAL_RCC_SAI1_RELEASE_RESET


	)

2994 
	#__SAI2_CLK_DISABLE
 
__HAL_RCC_SAI2_CLK_DISABLE


	)

2995 
	#__SAI2_CLK_ENABLE
 
__HAL_RCC_SAI2_CLK_ENABLE


	)

2996 
	#__SAI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_DISABLE


	)

2997 
	#__SAI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_ENABLE


	)

2998 
	#__SAI2_FORCE_RESET
 
__HAL_RCC_SAI2_FORCE_RESET


	)

2999 
	#__SAI2_RELEASE_RESET
 
__HAL_RCC_SAI2_RELEASE_RESET


	)

3000 
	#__SDIO_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

3001 
	#__SDIO_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

3002 
	#__SDMMC_CLK_DISABLE
 
__HAL_RCC_SDMMC_CLK_DISABLE


	)

3003 
	#__SDMMC_CLK_ENABLE
 
__HAL_RCC_SDMMC_CLK_ENABLE


	)

3004 
	#__SDMMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE


	)

3005 
	#__SDMMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE


	)

3006 
	#__SDMMC_FORCE_RESET
 
__HAL_RCC_SDMMC_FORCE_RESET


	)

3007 
	#__SDMMC_RELEASE_RESET
 
__HAL_RCC_SDMMC_RELEASE_RESET


	)

3008 
	#__SPI1_CLK_DISABLE
 
__HAL_RCC_SPI1_CLK_DISABLE


	)

3009 
	#__SPI1_CLK_ENABLE
 
__HAL_RCC_SPI1_CLK_ENABLE


	)

3010 
	#__SPI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_DISABLE


	)

3011 
	#__SPI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_ENABLE


	)

3012 
	#__SPI1_FORCE_RESET
 
__HAL_RCC_SPI1_FORCE_RESET


	)

3013 
	#__SPI1_RELEASE_RESET
 
__HAL_RCC_SPI1_RELEASE_RESET


	)

3014 
	#__SPI2_CLK_DISABLE
 
__HAL_RCC_SPI2_CLK_DISABLE


	)

3015 
	#__SPI2_CLK_ENABLE
 
__HAL_RCC_SPI2_CLK_ENABLE


	)

3016 
	#__SPI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_DISABLE


	)

3017 
	#__SPI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_ENABLE


	)

3018 
	#__SPI2_FORCE_RESET
 
__HAL_RCC_SPI2_FORCE_RESET


	)

3019 
	#__SPI2_RELEASE_RESET
 
__HAL_RCC_SPI2_RELEASE_RESET


	)

3020 
	#__SPI3_CLK_DISABLE
 
__HAL_RCC_SPI3_CLK_DISABLE


	)

3021 
	#__SPI3_CLK_ENABLE
 
__HAL_RCC_SPI3_CLK_ENABLE


	)

3022 
	#__SPI3_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_DISABLE


	)

3023 
	#__SPI3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_ENABLE


	)

3024 
	#__SPI3_FORCE_RESET
 
__HAL_RCC_SPI3_FORCE_RESET


	)

3025 
	#__SPI3_RELEASE_RESET
 
__HAL_RCC_SPI3_RELEASE_RESET


	)

3026 
	#__SRAM_CLK_DISABLE
 
__HAL_RCC_SRAM_CLK_DISABLE


	)

3027 
	#__SRAM_CLK_ENABLE
 
__HAL_RCC_SRAM_CLK_ENABLE


	)

3028 
	#__SRAM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE


	)

3029 
	#__SRAM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE


	)

3030 
	#__SRAM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE


	)

3031 
	#__SRAM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE


	)

3032 
	#__SWPMI1_CLK_DISABLE
 
__HAL_RCC_SWPMI1_CLK_DISABLE


	)

3033 
	#__SWPMI1_CLK_ENABLE
 
__HAL_RCC_SWPMI1_CLK_ENABLE


	)

3034 
	#__SWPMI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE


	)

3035 
	#__SWPMI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE


	)

3036 
	#__SWPMI1_FORCE_RESET
 
__HAL_RCC_SWPMI1_FORCE_RESET


	)

3037 
	#__SWPMI1_RELEASE_RESET
 
__HAL_RCC_SWPMI1_RELEASE_RESET


	)

3038 
	#__SYSCFG_CLK_DISABLE
 
__HAL_RCC_SYSCFG_CLK_DISABLE


	)

3039 
	#__SYSCFG_CLK_ENABLE
 
__HAL_RCC_SYSCFG_CLK_ENABLE


	)

3040 
	#__SYSCFG_CLK_SLEEP_DISABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE


	)

3041 
	#__SYSCFG_CLK_SLEEP_ENABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE


	)

3042 
	#__SYSCFG_FORCE_RESET
 
__HAL_RCC_SYSCFG_FORCE_RESET


	)

3043 
	#__SYSCFG_RELEASE_RESET
 
__HAL_RCC_SYSCFG_RELEASE_RESET


	)

3044 
	#__TIM1_CLK_DISABLE
 
__HAL_RCC_TIM1_CLK_DISABLE


	)

3045 
	#__TIM1_CLK_ENABLE
 
__HAL_RCC_TIM1_CLK_ENABLE


	)

3046 
	#__TIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_DISABLE


	)

3047 
	#__TIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_ENABLE


	)

3048 
	#__TIM1_FORCE_RESET
 
__HAL_RCC_TIM1_FORCE_RESET


	)

3049 
	#__TIM1_RELEASE_RESET
 
__HAL_RCC_TIM1_RELEASE_RESET


	)

3050 
	#__TIM10_CLK_DISABLE
 
__HAL_RCC_TIM10_CLK_DISABLE


	)

3051 
	#__TIM10_CLK_ENABLE
 
__HAL_RCC_TIM10_CLK_ENABLE


	)

3052 
	#__TIM10_FORCE_RESET
 
__HAL_RCC_TIM10_FORCE_RESET


	)

3053 
	#__TIM10_RELEASE_RESET
 
__HAL_RCC_TIM10_RELEASE_RESET


	)

3054 
	#__TIM11_CLK_DISABLE
 
__HAL_RCC_TIM11_CLK_DISABLE


	)

3055 
	#__TIM11_CLK_ENABLE
 
__HAL_RCC_TIM11_CLK_ENABLE


	)

3056 
	#__TIM11_FORCE_RESET
 
__HAL_RCC_TIM11_FORCE_RESET


	)

3057 
	#__TIM11_RELEASE_RESET
 
__HAL_RCC_TIM11_RELEASE_RESET


	)

3058 
	#__TIM12_CLK_DISABLE
 
__HAL_RCC_TIM12_CLK_DISABLE


	)

3059 
	#__TIM12_CLK_ENABLE
 
__HAL_RCC_TIM12_CLK_ENABLE


	)

3060 
	#__TIM12_FORCE_RESET
 
__HAL_RCC_TIM12_FORCE_RESET


	)

3061 
	#__TIM12_RELEASE_RESET
 
__HAL_RCC_TIM12_RELEASE_RESET


	)

3062 
	#__TIM13_CLK_DISABLE
 
__HAL_RCC_TIM13_CLK_DISABLE


	)

3063 
	#__TIM13_CLK_ENABLE
 
__HAL_RCC_TIM13_CLK_ENABLE


	)

3064 
	#__TIM13_FORCE_RESET
 
__HAL_RCC_TIM13_FORCE_RESET


	)

3065 
	#__TIM13_RELEASE_RESET
 
__HAL_RCC_TIM13_RELEASE_RESET


	)

3066 
	#__TIM14_CLK_DISABLE
 
__HAL_RCC_TIM14_CLK_DISABLE


	)

3067 
	#__TIM14_CLK_ENABLE
 
__HAL_RCC_TIM14_CLK_ENABLE


	)

3068 
	#__TIM14_FORCE_RESET
 
__HAL_RCC_TIM14_FORCE_RESET


	)

3069 
	#__TIM14_RELEASE_RESET
 
__HAL_RCC_TIM14_RELEASE_RESET


	)

3070 
	#__TIM15_CLK_DISABLE
 
__HAL_RCC_TIM15_CLK_DISABLE


	)

3071 
	#__TIM15_CLK_ENABLE
 
__HAL_RCC_TIM15_CLK_ENABLE


	)

3072 
	#__TIM15_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_DISABLE


	)

3073 
	#__TIM15_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_ENABLE


	)

3074 
	#__TIM15_FORCE_RESET
 
__HAL_RCC_TIM15_FORCE_RESET


	)

3075 
	#__TIM15_RELEASE_RESET
 
__HAL_RCC_TIM15_RELEASE_RESET


	)

3076 
	#__TIM16_CLK_DISABLE
 
__HAL_RCC_TIM16_CLK_DISABLE


	)

3077 
	#__TIM16_CLK_ENABLE
 
__HAL_RCC_TIM16_CLK_ENABLE


	)

3078 
	#__TIM16_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_DISABLE


	)

3079 
	#__TIM16_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_ENABLE


	)

3080 
	#__TIM16_FORCE_RESET
 
__HAL_RCC_TIM16_FORCE_RESET


	)

3081 
	#__TIM16_RELEASE_RESET
 
__HAL_RCC_TIM16_RELEASE_RESET


	)

3082 
	#__TIM17_CLK_DISABLE
 
__HAL_RCC_TIM17_CLK_DISABLE


	)

3083 
	#__TIM17_CLK_ENABLE
 
__HAL_RCC_TIM17_CLK_ENABLE


	)

3084 
	#__TIM17_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_DISABLE


	)

3085 
	#__TIM17_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_ENABLE


	)

3086 
	#__TIM17_FORCE_RESET
 
__HAL_RCC_TIM17_FORCE_RESET


	)

3087 
	#__TIM17_RELEASE_RESET
 
__HAL_RCC_TIM17_RELEASE_RESET


	)

3088 
	#__TIM2_CLK_DISABLE
 
__HAL_RCC_TIM2_CLK_DISABLE


	)

3089 
	#__TIM2_CLK_ENABLE
 
__HAL_RCC_TIM2_CLK_ENABLE


	)

3090 
	#__TIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_DISABLE


	)

3091 
	#__TIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_ENABLE


	)

3092 
	#__TIM2_FORCE_RESET
 
__HAL_RCC_TIM2_FORCE_RESET


	)

3093 
	#__TIM2_RELEASE_RESET
 
__HAL_RCC_TIM2_RELEASE_RESET


	)

3094 
	#__TIM3_CLK_DISABLE
 
__HAL_RCC_TIM3_CLK_DISABLE


	)

3095 
	#__TIM3_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

3096 
	#__TIM3_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_DISABLE


	)

3097 
	#__TIM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_ENABLE


	)

3098 
	#__TIM3_FORCE_RESET
 
__HAL_RCC_TIM3_FORCE_RESET


	)

3099 
	#__TIM3_RELEASE_RESET
 
__HAL_RCC_TIM3_RELEASE_RESET


	)

3100 
	#__TIM4_CLK_DISABLE
 
__HAL_RCC_TIM4_CLK_DISABLE


	)

3101 
	#__TIM4_CLK_ENABLE
 
__HAL_RCC_TIM4_CLK_ENABLE


	)

3102 
	#__TIM4_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_DISABLE


	)

3103 
	#__TIM4_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_ENABLE


	)

3104 
	#__TIM4_FORCE_RESET
 
__HAL_RCC_TIM4_FORCE_RESET


	)

3105 
	#__TIM4_RELEASE_RESET
 
__HAL_RCC_TIM4_RELEASE_RESET


	)

3106 
	#__TIM5_CLK_DISABLE
 
__HAL_RCC_TIM5_CLK_DISABLE


	)

3107 
	#__TIM5_CLK_ENABLE
 
__HAL_RCC_TIM5_CLK_ENABLE


	)

3108 
	#__TIM5_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_DISABLE


	)

3109 
	#__TIM5_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_ENABLE


	)

3110 
	#__TIM5_FORCE_RESET
 
__HAL_RCC_TIM5_FORCE_RESET


	)

3111 
	#__TIM5_RELEASE_RESET
 
__HAL_RCC_TIM5_RELEASE_RESET


	)

3112 
	#__TIM6_CLK_DISABLE
 
__HAL_RCC_TIM6_CLK_DISABLE


	)

3113 
	#__TIM6_CLK_ENABLE
 
__HAL_RCC_TIM6_CLK_ENABLE


	)

3114 
	#__TIM6_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_DISABLE


	)

3115 
	#__TIM6_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_ENABLE


	)

3116 
	#__TIM6_FORCE_RESET
 
__HAL_RCC_TIM6_FORCE_RESET


	)

3117 
	#__TIM6_RELEASE_RESET
 
__HAL_RCC_TIM6_RELEASE_RESET


	)

3118 
	#__TIM7_CLK_DISABLE
 
__HAL_RCC_TIM7_CLK_DISABLE


	)

3119 
	#__TIM7_CLK_ENABLE
 
__HAL_RCC_TIM7_CLK_ENABLE


	)

3120 
	#__TIM7_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_DISABLE


	)

3121 
	#__TIM7_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_ENABLE


	)

3122 
	#__TIM7_FORCE_RESET
 
__HAL_RCC_TIM7_FORCE_RESET


	)

3123 
	#__TIM7_RELEASE_RESET
 
__HAL_RCC_TIM7_RELEASE_RESET


	)

3124 
	#__TIM8_CLK_DISABLE
 
__HAL_RCC_TIM8_CLK_DISABLE


	)

3125 
	#__TIM8_CLK_ENABLE
 
__HAL_RCC_TIM8_CLK_ENABLE


	)

3126 
	#__TIM8_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_DISABLE


	)

3127 
	#__TIM8_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_ENABLE


	)

3128 
	#__TIM8_FORCE_RESET
 
__HAL_RCC_TIM8_FORCE_RESET


	)

3129 
	#__TIM8_RELEASE_RESET
 
__HAL_RCC_TIM8_RELEASE_RESET


	)

3130 
	#__TIM9_CLK_DISABLE
 
__HAL_RCC_TIM9_CLK_DISABLE


	)

3131 
	#__TIM9_CLK_ENABLE
 
__HAL_RCC_TIM9_CLK_ENABLE


	)

3132 
	#__TIM9_FORCE_RESET
 
__HAL_RCC_TIM9_FORCE_RESET


	)

3133 
	#__TIM9_RELEASE_RESET
 
__HAL_RCC_TIM9_RELEASE_RESET


	)

3134 
	#__TSC_CLK_DISABLE
 
__HAL_RCC_TSC_CLK_DISABLE


	)

3135 
	#__TSC_CLK_ENABLE
 
__HAL_RCC_TSC_CLK_ENABLE


	)

3136 
	#__TSC_CLK_SLEEP_DISABLE
 
__HAL_RCC_TSC_CLK_SLEEP_DISABLE


	)

3137 
	#__TSC_CLK_SLEEP_ENABLE
 
__HAL_RCC_TSC_CLK_SLEEP_ENABLE


	)

3138 
	#__TSC_FORCE_RESET
 
__HAL_RCC_TSC_FORCE_RESET


	)

3139 
	#__TSC_RELEASE_RESET
 
__HAL_RCC_TSC_RELEASE_RESET


	)

3140 
	#__UART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

3141 
	#__UART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

3142 
	#__UART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

3143 
	#__UART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

3144 
	#__UART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

3145 
	#__UART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

3146 
	#__UART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

3147 
	#__UART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

3148 
	#__UART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

3149 
	#__UART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

3150 
	#__UART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

3151 
	#__UART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

3152 
	#__USART1_CLK_DISABLE
 
__HAL_RCC_USART1_CLK_DISABLE


	)

3153 
	#__USART1_CLK_ENABLE
 
__HAL_RCC_USART1_CLK_ENABLE


	)

3154 
	#__USART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART1_CLK_SLEEP_DISABLE


	)

3155 
	#__USART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART1_CLK_SLEEP_ENABLE


	)

3156 
	#__USART1_FORCE_RESET
 
__HAL_RCC_USART1_FORCE_RESET


	)

3157 
	#__USART1_RELEASE_RESET
 
__HAL_RCC_USART1_RELEASE_RESET


	)

3158 
	#__USART2_CLK_DISABLE
 
__HAL_RCC_USART2_CLK_DISABLE


	)

3159 
	#__USART2_CLK_ENABLE
 
__HAL_RCC_USART2_CLK_ENABLE


	)

3160 
	#__USART2_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART2_CLK_SLEEP_DISABLE


	)

3161 
	#__USART2_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART2_CLK_SLEEP_ENABLE


	)

3162 
	#__USART2_FORCE_RESET
 
__HAL_RCC_USART2_FORCE_RESET


	)

3163 
	#__USART2_RELEASE_RESET
 
__HAL_RCC_USART2_RELEASE_RESET


	)

3164 
	#__USART3_CLK_DISABLE
 
__HAL_RCC_USART3_CLK_DISABLE


	)

3165 
	#__USART3_CLK_ENABLE
 
__HAL_RCC_USART3_CLK_ENABLE


	)

3166 
	#__USART3_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART3_CLK_SLEEP_DISABLE


	)

3167 
	#__USART3_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART3_CLK_SLEEP_ENABLE


	)

3168 
	#__USART3_FORCE_RESET
 
__HAL_RCC_USART3_FORCE_RESET


	)

3169 
	#__USART3_RELEASE_RESET
 
__HAL_RCC_USART3_RELEASE_RESET


	)

3170 
	#__USART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

3171 
	#__USART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

3172 
	#__USART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

3173 
	#__USART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

3174 
	#__USART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

3175 
	#__USART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

3176 
	#__USART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

3177 
	#__USART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

3178 
	#__USART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

3179 
	#__USART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

3180 
	#__USART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

3181 
	#__USART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

3182 
	#__USART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

3183 
	#__USART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

3184 
	#__USART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

3185 
	#__USART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

3186 
	#__USART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

3187 
	#__USART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

3188 
	#__USART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

3189 
	#__USART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

3190 
	#__USB_CLK_DISABLE
 
__HAL_RCC_USB_CLK_DISABLE


	)

3191 
	#__USB_CLK_ENABLE
 
__HAL_RCC_USB_CLK_ENABLE


	)

3192 
	#__USB_FORCE_RESET
 
__HAL_RCC_USB_FORCE_RESET


	)

3193 
	#__USB_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_CLK_SLEEP_ENABLE


	)

3194 
	#__USB_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_CLK_SLEEP_DISABLE


	)

3195 
	#__USB_OTG_FS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_DISABLE


	)

3196 
	#__USB_OTG_FS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_ENABLE


	)

3197 
	#__USB_RELEASE_RESET
 
__HAL_RCC_USB_RELEASE_RESET


	)

3199 #i‡
deföed
(
STM32H7
)

3200 
	#__HAL_RCC_WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG1_CLK_DISABLE


	)

3201 
	#__HAL_RCC_WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG1_CLK_ENABLE


	)

3202 
	#__HAL_RCC_WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG1_CLK_SLEEP_DISABLE


	)

3203 
	#__HAL_RCC_WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG1_CLK_SLEEP_ENABLE


	)

3205 
	#__HAL_RCC_WWDG_FORCE_RESET
 (()0UË

	)

3206 
	#__HAL_RCC_WWDG_RELEASE_RESET
 (()0UË

	)

3209 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG1_IS_CLK_ENABLED


	)

3210 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG1_IS_CLK_DISABLED


	)

3211 
	#RCC_SPI4CLKSOURCE_D2PCLK1
 
RCC_SPI4CLKSOURCE_D2PCLK2


	)

3212 
	#RCC_SPI5CLKSOURCE_D2PCLK1
 
RCC_SPI5CLKSOURCE_D2PCLK2


	)

3213 
	#RCC_SPI45CLKSOURCE_D2PCLK1
 
RCC_SPI45CLKSOURCE_D2PCLK2


	)

3214 
	#RCC_SPI45CLKSOURCE_CDPCLK1
 
RCC_SPI45CLKSOURCE_CDPCLK2


	)

3215 
	#RCC_SPI45CLKSOURCE_PCLK1
 
RCC_SPI45CLKSOURCE_PCLK2


	)

3218 
	#__WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG_CLK_DISABLE


	)

3219 
	#__WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG_CLK_ENABLE


	)

3220 
	#__WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_DISABLE


	)

3221 
	#__WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_ENABLE


	)

3222 
	#__WWDG_FORCE_RESET
 
__HAL_RCC_WWDG_FORCE_RESET


	)

3223 
	#__WWDG_RELEASE_RESET
 
__HAL_RCC_WWDG_RELEASE_RESET


	)

3225 
	#__TIM21_CLK_ENABLE
 
__HAL_RCC_TIM21_CLK_ENABLE


	)

3226 
	#__TIM21_CLK_DISABLE
 
__HAL_RCC_TIM21_CLK_DISABLE


	)

3227 
	#__TIM21_FORCE_RESET
 
__HAL_RCC_TIM21_FORCE_RESET


	)

3228 
	#__TIM21_RELEASE_RESET
 
__HAL_RCC_TIM21_RELEASE_RESET


	)

3229 
	#__TIM21_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_ENABLE


	)

3230 
	#__TIM21_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_DISABLE


	)

3231 
	#__TIM22_CLK_ENABLE
 
__HAL_RCC_TIM22_CLK_ENABLE


	)

3232 
	#__TIM22_CLK_DISABLE
 
__HAL_RCC_TIM22_CLK_DISABLE


	)

3233 
	#__TIM22_FORCE_RESET
 
__HAL_RCC_TIM22_FORCE_RESET


	)

3234 
	#__TIM22_RELEASE_RESET
 
__HAL_RCC_TIM22_RELEASE_RESET


	)

3235 
	#__TIM22_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_ENABLE


	)

3236 
	#__TIM22_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_DISABLE


	)

3237 
	#__CRS_CLK_DISABLE
 
__HAL_RCC_CRS_CLK_DISABLE


	)

3238 
	#__CRS_CLK_ENABLE
 
__HAL_RCC_CRS_CLK_ENABLE


	)

3239 
	#__CRS_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRS_CLK_SLEEP_DISABLE


	)

3240 
	#__CRS_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRS_CLK_SLEEP_ENABLE


	)

3241 
	#__CRS_FORCE_RESET
 
__HAL_RCC_CRS_FORCE_RESET


	)

3242 
	#__CRS_RELEASE_RESET
 
__HAL_RCC_CRS_RELEASE_RESET


	)

3243 
	#__RCC_BACKUPRESET_FORCE
 
__HAL_RCC_BACKUPRESET_FORCE


	)

3244 
	#__RCC_BACKUPRESET_RELEASE
 
__HAL_RCC_BACKUPRESET_RELEASE


	)

3246 
	#__USB_OTG_FS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

3247 
	#__USB_OTG_FS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

3248 
	#__USB_OTG_FS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE


	)

3249 
	#__USB_OTG_FS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE


	)

3250 
	#__USB_OTG_HS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_DISABLE


	)

3251 
	#__USB_OTG_HS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_ENABLE


	)

3252 
	#__USB_OTG_HS_ULPI_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE


	)

3253 
	#__USB_OTG_HS_ULPI_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE


	)

3254 
	#__TIM9_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_ENABLE


	)

3255 
	#__TIM9_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_DISABLE


	)

3256 
	#__TIM10_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_ENABLE


	)

3257 
	#__TIM10_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_DISABLE


	)

3258 
	#__TIM11_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_ENABLE


	)

3259 
	#__TIM11_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_DISABLE


	)

3260 
	#__ETHMACPTP_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE


	)

3261 
	#__ETHMACPTP_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE


	)

3262 
	#__ETHMACPTP_CLK_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_ENABLE


	)

3263 
	#__ETHMACPTP_CLK_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_DISABLE


	)

3264 
	#__HASH_CLK_ENABLE
 
__HAL_RCC_HASH_CLK_ENABLE


	)

3265 
	#__HASH_FORCE_RESET
 
__HAL_RCC_HASH_FORCE_RESET


	)

3266 
	#__HASH_RELEASE_RESET
 
__HAL_RCC_HASH_RELEASE_RESET


	)

3267 
	#__HASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_HASH_CLK_SLEEP_ENABLE


	)

3268 
	#__HASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_HASH_CLK_SLEEP_DISABLE


	)

3269 
	#__HASH_CLK_DISABLE
 
__HAL_RCC_HASH_CLK_DISABLE


	)

3270 
	#__SPI5_CLK_ENABLE
 
__HAL_RCC_SPI5_CLK_ENABLE


	)

3271 
	#__SPI5_CLK_DISABLE
 
__HAL_RCC_SPI5_CLK_DISABLE


	)

3272 
	#__SPI5_FORCE_RESET
 
__HAL_RCC_SPI5_FORCE_RESET


	)

3273 
	#__SPI5_RELEASE_RESET
 
__HAL_RCC_SPI5_RELEASE_RESET


	)

3274 
	#__SPI5_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_ENABLE


	)

3275 
	#__SPI5_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_DISABLE


	)

3276 
	#__SPI6_CLK_ENABLE
 
__HAL_RCC_SPI6_CLK_ENABLE


	)

3277 
	#__SPI6_CLK_DISABLE
 
__HAL_RCC_SPI6_CLK_DISABLE


	)

3278 
	#__SPI6_FORCE_RESET
 
__HAL_RCC_SPI6_FORCE_RESET


	)

3279 
	#__SPI6_RELEASE_RESET
 
__HAL_RCC_SPI6_RELEASE_RESET


	)

3280 
	#__SPI6_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_ENABLE


	)

3281 
	#__SPI6_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_DISABLE


	)

3282 
	#__LTDC_CLK_ENABLE
 
__HAL_RCC_LTDC_CLK_ENABLE


	)

3283 
	#__LTDC_CLK_DISABLE
 
__HAL_RCC_LTDC_CLK_DISABLE


	)

3284 
	#__LTDC_FORCE_RESET
 
__HAL_RCC_LTDC_FORCE_RESET


	)

3285 
	#__LTDC_RELEASE_RESET
 
__HAL_RCC_LTDC_RELEASE_RESET


	)

3286 
	#__LTDC_CLK_SLEEP_ENABLE
 
__HAL_RCC_LTDC_CLK_SLEEP_ENABLE


	)

3287 
	#__ETHMAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE


	)

3288 
	#__ETHMAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE


	)

3289 
	#__ETHMACTX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE


	)

3290 
	#__ETHMACTX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE


	)

3291 
	#__ETHMACRX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE


	)

3292 
	#__ETHMACRX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE


	)

3293 
	#__TIM12_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_ENABLE


	)

3294 
	#__TIM12_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_DISABLE


	)

3295 
	#__TIM13_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_ENABLE


	)

3296 
	#__TIM13_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_DISABLE


	)

3297 
	#__TIM14_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_ENABLE


	)

3298 
	#__TIM14_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_DISABLE


	)

3299 
	#__BKPSRAM_CLK_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_ENABLE


	)

3300 
	#__BKPSRAM_CLK_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_DISABLE


	)

3301 
	#__BKPSRAM_CLK_SLEEP_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE


	)

3302 
	#__BKPSRAM_CLK_SLEEP_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE


	)

3303 
	#__CCMDATARAMEN_CLK_ENABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_ENABLE


	)

3304 
	#__CCMDATARAMEN_CLK_DISABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_DISABLE


	)

3305 
	#__USART6_CLK_ENABLE
 
__HAL_RCC_USART6_CLK_ENABLE


	)

3306 
	#__USART6_CLK_DISABLE
 
__HAL_RCC_USART6_CLK_DISABLE


	)

3307 
	#__USART6_FORCE_RESET
 
__HAL_RCC_USART6_FORCE_RESET


	)

3308 
	#__USART6_RELEASE_RESET
 
__HAL_RCC_USART6_RELEASE_RESET


	)

3309 
	#__USART6_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART6_CLK_SLEEP_ENABLE


	)

3310 
	#__USART6_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART6_CLK_SLEEP_DISABLE


	)

3311 
	#__SPI4_CLK_ENABLE
 
__HAL_RCC_SPI4_CLK_ENABLE


	)

3312 
	#__SPI4_CLK_DISABLE
 
__HAL_RCC_SPI4_CLK_DISABLE


	)

3313 
	#__SPI4_FORCE_RESET
 
__HAL_RCC_SPI4_FORCE_RESET


	)

3314 
	#__SPI4_RELEASE_RESET
 
__HAL_RCC_SPI4_RELEASE_RESET


	)

3315 
	#__SPI4_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_ENABLE


	)

3316 
	#__SPI4_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_DISABLE


	)

3317 
	#__GPIOI_CLK_ENABLE
 
__HAL_RCC_GPIOI_CLK_ENABLE


	)

3318 
	#__GPIOI_CLK_DISABLE
 
__HAL_RCC_GPIOI_CLK_DISABLE


	)

3319 
	#__GPIOI_FORCE_RESET
 
__HAL_RCC_GPIOI_FORCE_RESET


	)

3320 
	#__GPIOI_RELEASE_RESET
 
__HAL_RCC_GPIOI_RELEASE_RESET


	)

3321 
	#__GPIOI_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE


	)

3322 
	#__GPIOI_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE


	)

3323 
	#__GPIOJ_CLK_ENABLE
 
__HAL_RCC_GPIOJ_CLK_ENABLE


	)

3324 
	#__GPIOJ_CLK_DISABLE
 
__HAL_RCC_GPIOJ_CLK_DISABLE


	)

3325 
	#__GPIOJ_FORCE_RESET
 
__HAL_RCC_GPIOJ_FORCE_RESET


	)

3326 
	#__GPIOJ_RELEASE_RESET
 
__HAL_RCC_GPIOJ_RELEASE_RESET


	)

3327 
	#__GPIOJ_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE


	)

3328 
	#__GPIOJ_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE


	)

3329 
	#__GPIOK_CLK_ENABLE
 
__HAL_RCC_GPIOK_CLK_ENABLE


	)

3330 
	#__GPIOK_CLK_DISABLE
 
__HAL_RCC_GPIOK_CLK_DISABLE


	)

3331 
	#__GPIOK_RELEASE_RESET
 
__HAL_RCC_GPIOK_RELEASE_RESET


	)

3332 
	#__GPIOK_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE


	)

3333 
	#__GPIOK_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE


	)

3334 
	#__ETH_CLK_ENABLE
 
__HAL_RCC_ETH_CLK_ENABLE


	)

3335 
	#__ETH_CLK_DISABLE
 
__HAL_RCC_ETH_CLK_DISABLE


	)

3336 
	#__DCMI_CLK_ENABLE
 
__HAL_RCC_DCMI_CLK_ENABLE


	)

3337 
	#__DCMI_CLK_DISABLE
 
__HAL_RCC_DCMI_CLK_DISABLE


	)

3338 
	#__DCMI_FORCE_RESET
 
__HAL_RCC_DCMI_FORCE_RESET


	)

3339 
	#__DCMI_RELEASE_RESET
 
__HAL_RCC_DCMI_RELEASE_RESET


	)

3340 
	#__DCMI_CLK_SLEEP_ENABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_ENABLE


	)

3341 
	#__DCMI_CLK_SLEEP_DISABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_DISABLE


	)

3342 
	#__UART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

3343 
	#__UART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

3344 
	#__UART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

3345 
	#__UART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

3346 
	#__UART7_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART7_CLK_SLEEP_ENABLE


	)

3347 
	#__UART7_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART7_CLK_SLEEP_DISABLE


	)

3348 
	#__UART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

3349 
	#__UART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

3350 
	#__UART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

3351 
	#__UART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

3352 
	#__UART8_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART8_CLK_SLEEP_ENABLE


	)

3353 
	#__UART8_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART8_CLK_SLEEP_DISABLE


	)

3354 
	#__OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

3355 
	#__OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

3356 
	#__OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

3357 
	#__OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

3358 
	#__OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

3359 
	#__OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

3360 
	#__HAL_RCC_OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

3361 
	#__HAL_RCC_OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

3362 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED


	)

3363 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED


	)

3364 
	#__HAL_RCC_OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

3365 
	#__HAL_RCC_OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

3366 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

3367 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

3368 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED


	)

3369 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED


	)

3370 
	#__SRAM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE


	)

3371 
	#__CAN2_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_ENABLE


	)

3372 
	#__CAN2_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_DISABLE


	)

3373 
	#__DAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC_CLK_SLEEP_ENABLE


	)

3374 
	#__DAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC_CLK_SLEEP_DISABLE


	)

3375 
	#__ADC2_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_ENABLE


	)

3376 
	#__ADC2_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_DISABLE


	)

3377 
	#__ADC3_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_ENABLE


	)

3378 
	#__ADC3_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_DISABLE


	)

3379 
	#__FSMC_FORCE_RESET
 
__HAL_RCC_FSMC_FORCE_RESET


	)

3380 
	#__FSMC_RELEASE_RESET
 
__HAL_RCC_FSMC_RELEASE_RESET


	)

3381 
	#__FSMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_ENABLE


	)

3382 
	#__FSMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_DISABLE


	)

3383 
	#__SDIO_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

3384 
	#__SDIO_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

3385 
	#__SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

3386 
	#__SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

3387 
	#__DMA2D_CLK_ENABLE
 
__HAL_RCC_DMA2D_CLK_ENABLE


	)

3388 
	#__DMA2D_CLK_DISABLE
 
__HAL_RCC_DMA2D_CLK_DISABLE


	)

3389 
	#__DMA2D_FORCE_RESET
 
__HAL_RCC_DMA2D_FORCE_RESET


	)

3390 
	#__DMA2D_RELEASE_RESET
 
__HAL_RCC_DMA2D_RELEASE_RESET


	)

3391 
	#__DMA2D_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE


	)

3392 
	#__DMA2D_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE


	)

3395 
	#__HAL_RCC_OTGFS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

3396 
	#__HAL_RCC_OTGFS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

3398 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

3399 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

3400 
	#__ADC34_CLK_ENABLE
 
__HAL_RCC_ADC34_CLK_ENABLE


	)

3401 
	#__ADC34_CLK_DISABLE
 
__HAL_RCC_ADC34_CLK_DISABLE


	)

3402 
	#__DAC2_CLK_ENABLE
 
__HAL_RCC_DAC2_CLK_ENABLE


	)

3403 
	#__DAC2_CLK_DISABLE
 
__HAL_RCC_DAC2_CLK_DISABLE


	)

3404 
	#__TIM18_CLK_ENABLE
 
__HAL_RCC_TIM18_CLK_ENABLE


	)

3405 
	#__TIM18_CLK_DISABLE
 
__HAL_RCC_TIM18_CLK_DISABLE


	)

3406 
	#__TIM19_CLK_ENABLE
 
__HAL_RCC_TIM19_CLK_ENABLE


	)

3407 
	#__TIM19_CLK_DISABLE
 
__HAL_RCC_TIM19_CLK_DISABLE


	)

3408 
	#__TIM20_CLK_ENABLE
 
__HAL_RCC_TIM20_CLK_ENABLE


	)

3409 
	#__TIM20_CLK_DISABLE
 
__HAL_RCC_TIM20_CLK_DISABLE


	)

3410 
	#__HRTIM1_CLK_ENABLE
 
__HAL_RCC_HRTIM1_CLK_ENABLE


	)

3411 
	#__HRTIM1_CLK_DISABLE
 
__HAL_RCC_HRTIM1_CLK_DISABLE


	)

3412 
	#__SDADC1_CLK_ENABLE
 
__HAL_RCC_SDADC1_CLK_ENABLE


	)

3413 
	#__SDADC2_CLK_ENABLE
 
__HAL_RCC_SDADC2_CLK_ENABLE


	)

3414 
	#__SDADC3_CLK_ENABLE
 
__HAL_RCC_SDADC3_CLK_ENABLE


	)

3415 
	#__SDADC1_CLK_DISABLE
 
__HAL_RCC_SDADC1_CLK_DISABLE


	)

3416 
	#__SDADC2_CLK_DISABLE
 
__HAL_RCC_SDADC2_CLK_DISABLE


	)

3417 
	#__SDADC3_CLK_DISABLE
 
__HAL_RCC_SDADC3_CLK_DISABLE


	)

3419 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

3420 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

3421 
	#__ADC34_FORCE_RESET
 
__HAL_RCC_ADC34_FORCE_RESET


	)

3422 
	#__ADC34_RELEASE_RESET
 
__HAL_RCC_ADC34_RELEASE_RESET


	)

3423 
	#__DAC2_FORCE_RESET
 
__HAL_RCC_DAC2_FORCE_RESET


	)

3424 
	#__DAC2_RELEASE_RESET
 
__HAL_RCC_DAC2_RELEASE_RESET


	)

3425 
	#__TIM18_FORCE_RESET
 
__HAL_RCC_TIM18_FORCE_RESET


	)

3426 
	#__TIM18_RELEASE_RESET
 
__HAL_RCC_TIM18_RELEASE_RESET


	)

3427 
	#__TIM19_FORCE_RESET
 
__HAL_RCC_TIM19_FORCE_RESET


	)

3428 
	#__TIM19_RELEASE_RESET
 
__HAL_RCC_TIM19_RELEASE_RESET


	)

3429 
	#__TIM20_FORCE_RESET
 
__HAL_RCC_TIM20_FORCE_RESET


	)

3430 
	#__TIM20_RELEASE_RESET
 
__HAL_RCC_TIM20_RELEASE_RESET


	)

3431 
	#__HRTIM1_FORCE_RESET
 
__HAL_RCC_HRTIM1_FORCE_RESET


	)

3432 
	#__HRTIM1_RELEASE_RESET
 
__HAL_RCC_HRTIM1_RELEASE_RESET


	)

3433 
	#__SDADC1_FORCE_RESET
 
__HAL_RCC_SDADC1_FORCE_RESET


	)

3434 
	#__SDADC2_FORCE_RESET
 
__HAL_RCC_SDADC2_FORCE_RESET


	)

3435 
	#__SDADC3_FORCE_RESET
 
__HAL_RCC_SDADC3_FORCE_RESET


	)

3436 
	#__SDADC1_RELEASE_RESET
 
__HAL_RCC_SDADC1_RELEASE_RESET


	)

3437 
	#__SDADC2_RELEASE_RESET
 
__HAL_RCC_SDADC2_RELEASE_RESET


	)

3438 
	#__SDADC3_RELEASE_RESET
 
__HAL_RCC_SDADC3_RELEASE_RESET


	)

3440 
	#__ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC1_IS_CLK_ENABLED


	)

3441 
	#__ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC1_IS_CLK_DISABLED


	)

3442 
	#__ADC12_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

3443 
	#__ADC12_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

3444 
	#__ADC34_IS_CLK_ENABLED
 
__HAL_RCC_ADC34_IS_CLK_ENABLED


	)

3445 
	#__ADC34_IS_CLK_DISABLED
 
__HAL_RCC_ADC34_IS_CLK_DISABLED


	)

3446 
	#__CEC_IS_CLK_ENABLED
 
__HAL_RCC_CEC_IS_CLK_ENABLED


	)

3447 
	#__CEC_IS_CLK_DISABLED
 
__HAL_RCC_CEC_IS_CLK_DISABLED


	)

3448 
	#__CRC_IS_CLK_ENABLED
 
__HAL_RCC_CRC_IS_CLK_ENABLED


	)

3449 
	#__CRC_IS_CLK_DISABLED
 
__HAL_RCC_CRC_IS_CLK_DISABLED


	)

3450 
	#__DAC1_IS_CLK_ENABLED
 
__HAL_RCC_DAC1_IS_CLK_ENABLED


	)

3451 
	#__DAC1_IS_CLK_DISABLED
 
__HAL_RCC_DAC1_IS_CLK_DISABLED


	)

3452 
	#__DAC2_IS_CLK_ENABLED
 
__HAL_RCC_DAC2_IS_CLK_ENABLED


	)

3453 
	#__DAC2_IS_CLK_DISABLED
 
__HAL_RCC_DAC2_IS_CLK_DISABLED


	)

3454 
	#__DMA1_IS_CLK_ENABLED
 
__HAL_RCC_DMA1_IS_CLK_ENABLED


	)

3455 
	#__DMA1_IS_CLK_DISABLED
 
__HAL_RCC_DMA1_IS_CLK_DISABLED


	)

3456 
	#__DMA2_IS_CLK_ENABLED
 
__HAL_RCC_DMA2_IS_CLK_ENABLED


	)

3457 
	#__DMA2_IS_CLK_DISABLED
 
__HAL_RCC_DMA2_IS_CLK_DISABLED


	)

3458 
	#__FLITF_IS_CLK_ENABLED
 
__HAL_RCC_FLITF_IS_CLK_ENABLED


	)

3459 
	#__FLITF_IS_CLK_DISABLED
 
__HAL_RCC_FLITF_IS_CLK_DISABLED


	)

3460 
	#__FMC_IS_CLK_ENABLED
 
__HAL_RCC_FMC_IS_CLK_ENABLED


	)

3461 
	#__FMC_IS_CLK_DISABLED
 
__HAL_RCC_FMC_IS_CLK_DISABLED


	)

3462 
	#__GPIOA_IS_CLK_ENABLED
 
__HAL_RCC_GPIOA_IS_CLK_ENABLED


	)

3463 
	#__GPIOA_IS_CLK_DISABLED
 
__HAL_RCC_GPIOA_IS_CLK_DISABLED


	)

3464 
	#__GPIOB_IS_CLK_ENABLED
 
__HAL_RCC_GPIOB_IS_CLK_ENABLED


	)

3465 
	#__GPIOB_IS_CLK_DISABLED
 
__HAL_RCC_GPIOB_IS_CLK_DISABLED


	)

3466 
	#__GPIOC_IS_CLK_ENABLED
 
__HAL_RCC_GPIOC_IS_CLK_ENABLED


	)

3467 
	#__GPIOC_IS_CLK_DISABLED
 
__HAL_RCC_GPIOC_IS_CLK_DISABLED


	)

3468 
	#__GPIOD_IS_CLK_ENABLED
 
__HAL_RCC_GPIOD_IS_CLK_ENABLED


	)

3469 
	#__GPIOD_IS_CLK_DISABLED
 
__HAL_RCC_GPIOD_IS_CLK_DISABLED


	)

3470 
	#__GPIOE_IS_CLK_ENABLED
 
__HAL_RCC_GPIOE_IS_CLK_ENABLED


	)

3471 
	#__GPIOE_IS_CLK_DISABLED
 
__HAL_RCC_GPIOE_IS_CLK_DISABLED


	)

3472 
	#__GPIOF_IS_CLK_ENABLED
 
__HAL_RCC_GPIOF_IS_CLK_ENABLED


	)

3473 
	#__GPIOF_IS_CLK_DISABLED
 
__HAL_RCC_GPIOF_IS_CLK_DISABLED


	)

3474 
	#__GPIOG_IS_CLK_ENABLED
 
__HAL_RCC_GPIOG_IS_CLK_ENABLED


	)

3475 
	#__GPIOG_IS_CLK_DISABLED
 
__HAL_RCC_GPIOG_IS_CLK_DISABLED


	)

3476 
	#__GPIOH_IS_CLK_ENABLED
 
__HAL_RCC_GPIOH_IS_CLK_ENABLED


	)

3477 
	#__GPIOH_IS_CLK_DISABLED
 
__HAL_RCC_GPIOH_IS_CLK_DISABLED


	)

3478 
	#__HRTIM1_IS_CLK_ENABLED
 
__HAL_RCC_HRTIM1_IS_CLK_ENABLED


	)

3479 
	#__HRTIM1_IS_CLK_DISABLED
 
__HAL_RCC_HRTIM1_IS_CLK_DISABLED


	)

3480 
	#__I2C1_IS_CLK_ENABLED
 
__HAL_RCC_I2C1_IS_CLK_ENABLED


	)

3481 
	#__I2C1_IS_CLK_DISABLED
 
__HAL_RCC_I2C1_IS_CLK_DISABLED


	)

3482 
	#__I2C2_IS_CLK_ENABLED
 
__HAL_RCC_I2C2_IS_CLK_ENABLED


	)

3483 
	#__I2C2_IS_CLK_DISABLED
 
__HAL_RCC_I2C2_IS_CLK_DISABLED


	)

3484 
	#__I2C3_IS_CLK_ENABLED
 
__HAL_RCC_I2C3_IS_CLK_ENABLED


	)

3485 
	#__I2C3_IS_CLK_DISABLED
 
__HAL_RCC_I2C3_IS_CLK_DISABLED


	)

3486 
	#__PWR_IS_CLK_ENABLED
 
__HAL_RCC_PWR_IS_CLK_ENABLED


	)

3487 
	#__PWR_IS_CLK_DISABLED
 
__HAL_RCC_PWR_IS_CLK_DISABLED


	)

3488 
	#__SYSCFG_IS_CLK_ENABLED
 
__HAL_RCC_SYSCFG_IS_CLK_ENABLED


	)

3489 
	#__SYSCFG_IS_CLK_DISABLED
 
__HAL_RCC_SYSCFG_IS_CLK_DISABLED


	)

3490 
	#__SPI1_IS_CLK_ENABLED
 
__HAL_RCC_SPI1_IS_CLK_ENABLED


	)

3491 
	#__SPI1_IS_CLK_DISABLED
 
__HAL_RCC_SPI1_IS_CLK_DISABLED


	)

3492 
	#__SPI2_IS_CLK_ENABLED
 
__HAL_RCC_SPI2_IS_CLK_ENABLED


	)

3493 
	#__SPI2_IS_CLK_DISABLED
 
__HAL_RCC_SPI2_IS_CLK_DISABLED


	)

3494 
	#__SPI3_IS_CLK_ENABLED
 
__HAL_RCC_SPI3_IS_CLK_ENABLED


	)

3495 
	#__SPI3_IS_CLK_DISABLED
 
__HAL_RCC_SPI3_IS_CLK_DISABLED


	)

3496 
	#__SPI4_IS_CLK_ENABLED
 
__HAL_RCC_SPI4_IS_CLK_ENABLED


	)

3497 
	#__SPI4_IS_CLK_DISABLED
 
__HAL_RCC_SPI4_IS_CLK_DISABLED


	)

3498 
	#__SDADC1_IS_CLK_ENABLED
 
__HAL_RCC_SDADC1_IS_CLK_ENABLED


	)

3499 
	#__SDADC1_IS_CLK_DISABLED
 
__HAL_RCC_SDADC1_IS_CLK_DISABLED


	)

3500 
	#__SDADC2_IS_CLK_ENABLED
 
__HAL_RCC_SDADC2_IS_CLK_ENABLED


	)

3501 
	#__SDADC2_IS_CLK_DISABLED
 
__HAL_RCC_SDADC2_IS_CLK_DISABLED


	)

3502 
	#__SDADC3_IS_CLK_ENABLED
 
__HAL_RCC_SDADC3_IS_CLK_ENABLED


	)

3503 
	#__SDADC3_IS_CLK_DISABLED
 
__HAL_RCC_SDADC3_IS_CLK_DISABLED


	)

3504 
	#__SRAM_IS_CLK_ENABLED
 
__HAL_RCC_SRAM_IS_CLK_ENABLED


	)

3505 
	#__SRAM_IS_CLK_DISABLED
 
__HAL_RCC_SRAM_IS_CLK_DISABLED


	)

3506 
	#__TIM1_IS_CLK_ENABLED
 
__HAL_RCC_TIM1_IS_CLK_ENABLED


	)

3507 
	#__TIM1_IS_CLK_DISABLED
 
__HAL_RCC_TIM1_IS_CLK_DISABLED


	)

3508 
	#__TIM2_IS_CLK_ENABLED
 
__HAL_RCC_TIM2_IS_CLK_ENABLED


	)

3509 
	#__TIM2_IS_CLK_DISABLED
 
__HAL_RCC_TIM2_IS_CLK_DISABLED


	)

3510 
	#__TIM3_IS_CLK_ENABLED
 
__HAL_RCC_TIM3_IS_CLK_ENABLED


	)

3511 
	#__TIM3_IS_CLK_DISABLED
 
__HAL_RCC_TIM3_IS_CLK_DISABLED


	)

3512 
	#__TIM4_IS_CLK_ENABLED
 
__HAL_RCC_TIM4_IS_CLK_ENABLED


	)

3513 
	#__TIM4_IS_CLK_DISABLED
 
__HAL_RCC_TIM4_IS_CLK_DISABLED


	)

3514 
	#__TIM5_IS_CLK_ENABLED
 
__HAL_RCC_TIM5_IS_CLK_ENABLED


	)

3515 
	#__TIM5_IS_CLK_DISABLED
 
__HAL_RCC_TIM5_IS_CLK_DISABLED


	)

3516 
	#__TIM6_IS_CLK_ENABLED
 
__HAL_RCC_TIM6_IS_CLK_ENABLED


	)

3517 
	#__TIM6_IS_CLK_DISABLED
 
__HAL_RCC_TIM6_IS_CLK_DISABLED


	)

3518 
	#__TIM7_IS_CLK_ENABLED
 
__HAL_RCC_TIM7_IS_CLK_ENABLED


	)

3519 
	#__TIM7_IS_CLK_DISABLED
 
__HAL_RCC_TIM7_IS_CLK_DISABLED


	)

3520 
	#__TIM8_IS_CLK_ENABLED
 
__HAL_RCC_TIM8_IS_CLK_ENABLED


	)

3521 
	#__TIM8_IS_CLK_DISABLED
 
__HAL_RCC_TIM8_IS_CLK_DISABLED


	)

3522 
	#__TIM12_IS_CLK_ENABLED
 
__HAL_RCC_TIM12_IS_CLK_ENABLED


	)

3523 
	#__TIM12_IS_CLK_DISABLED
 
__HAL_RCC_TIM12_IS_CLK_DISABLED


	)

3524 
	#__TIM13_IS_CLK_ENABLED
 
__HAL_RCC_TIM13_IS_CLK_ENABLED


	)

3525 
	#__TIM13_IS_CLK_DISABLED
 
__HAL_RCC_TIM13_IS_CLK_DISABLED


	)

3526 
	#__TIM14_IS_CLK_ENABLED
 
__HAL_RCC_TIM14_IS_CLK_ENABLED


	)

3527 
	#__TIM14_IS_CLK_DISABLED
 
__HAL_RCC_TIM14_IS_CLK_DISABLED


	)

3528 
	#__TIM15_IS_CLK_ENABLED
 
__HAL_RCC_TIM15_IS_CLK_ENABLED


	)

3529 
	#__TIM15_IS_CLK_DISABLED
 
__HAL_RCC_TIM15_IS_CLK_DISABLED


	)

3530 
	#__TIM16_IS_CLK_ENABLED
 
__HAL_RCC_TIM16_IS_CLK_ENABLED


	)

3531 
	#__TIM16_IS_CLK_DISABLED
 
__HAL_RCC_TIM16_IS_CLK_DISABLED


	)

3532 
	#__TIM17_IS_CLK_ENABLED
 
__HAL_RCC_TIM17_IS_CLK_ENABLED


	)

3533 
	#__TIM17_IS_CLK_DISABLED
 
__HAL_RCC_TIM17_IS_CLK_DISABLED


	)

3534 
	#__TIM18_IS_CLK_ENABLED
 
__HAL_RCC_TIM18_IS_CLK_ENABLED


	)

3535 
	#__TIM18_IS_CLK_DISABLED
 
__HAL_RCC_TIM18_IS_CLK_DISABLED


	)

3536 
	#__TIM19_IS_CLK_ENABLED
 
__HAL_RCC_TIM19_IS_CLK_ENABLED


	)

3537 
	#__TIM19_IS_CLK_DISABLED
 
__HAL_RCC_TIM19_IS_CLK_DISABLED


	)

3538 
	#__TIM20_IS_CLK_ENABLED
 
__HAL_RCC_TIM20_IS_CLK_ENABLED


	)

3539 
	#__TIM20_IS_CLK_DISABLED
 
__HAL_RCC_TIM20_IS_CLK_DISABLED


	)

3540 
	#__TSC_IS_CLK_ENABLED
 
__HAL_RCC_TSC_IS_CLK_ENABLED


	)

3541 
	#__TSC_IS_CLK_DISABLED
 
__HAL_RCC_TSC_IS_CLK_DISABLED


	)

3542 
	#__UART4_IS_CLK_ENABLED
 
__HAL_RCC_UART4_IS_CLK_ENABLED


	)

3543 
	#__UART4_IS_CLK_DISABLED
 
__HAL_RCC_UART4_IS_CLK_DISABLED


	)

3544 
	#__UART5_IS_CLK_ENABLED
 
__HAL_RCC_UART5_IS_CLK_ENABLED


	)

3545 
	#__UART5_IS_CLK_DISABLED
 
__HAL_RCC_UART5_IS_CLK_DISABLED


	)

3546 
	#__USART1_IS_CLK_ENABLED
 
__HAL_RCC_USART1_IS_CLK_ENABLED


	)

3547 
	#__USART1_IS_CLK_DISABLED
 
__HAL_RCC_USART1_IS_CLK_DISABLED


	)

3548 
	#__USART2_IS_CLK_ENABLED
 
__HAL_RCC_USART2_IS_CLK_ENABLED


	)

3549 
	#__USART2_IS_CLK_DISABLED
 
__HAL_RCC_USART2_IS_CLK_DISABLED


	)

3550 
	#__USART3_IS_CLK_ENABLED
 
__HAL_RCC_USART3_IS_CLK_ENABLED


	)

3551 
	#__USART3_IS_CLK_DISABLED
 
__HAL_RCC_USART3_IS_CLK_DISABLED


	)

3552 
	#__USB_IS_CLK_ENABLED
 
__HAL_RCC_USB_IS_CLK_ENABLED


	)

3553 
	#__USB_IS_CLK_DISABLED
 
__HAL_RCC_USB_IS_CLK_DISABLED


	)

3554 
	#__WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG_IS_CLK_ENABLED


	)

3555 
	#__WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG_IS_CLK_DISABLED


	)

3557 #i‡
deföed
(
STM32L1
)

3558 
	#__HAL_RCC_CRYP_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

3559 
	#__HAL_RCC_CRYP_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

3560 
	#__HAL_RCC_CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

3561 
	#__HAL_RCC_CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

3562 
	#__HAL_RCC_CRYP_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

3563 
	#__HAL_RCC_CRYP_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

3566 #i‡
deföed
(
STM32F4
)

3567 
	#__HAL_RCC_SDMMC1_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

3568 
	#__HAL_RCC_SDMMC1_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

3569 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

3570 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

3571 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

3572 
	#__HAL_RCC_SDMMC1_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

3573 
	#__HAL_RCC_SDMMC1_IS_CLK_ENABLED
 
__HAL_RCC_SDIO_IS_CLK_ENABLED


	)

3574 
	#__HAL_RCC_SDMMC1_IS_CLK_DISABLED
 
__HAL_RCC_SDIO_IS_CLK_DISABLED


	)

3575 
	#Sdmmc1ClockSñe˘i⁄
 
SdioClockSñe˘i⁄


	)

3576 
	#RCC_PERIPHCLK_SDMMC1
 
RCC_PERIPHCLK_SDIO


	)

3577 
	#RCC_SDMMC1CLKSOURCE_CLK48
 
RCC_SDIOCLKSOURCE_CK48


	)

3578 
	#RCC_SDMMC1CLKSOURCE_SYSCLK
 
RCC_SDIOCLKSOURCE_SYSCLK


	)

3579 
	#__HAL_RCC_SDMMC1_CONFIG
 
__HAL_RCC_SDIO_CONFIG


	)

3580 
	#__HAL_RCC_GET_SDMMC1_SOURCE
 
__HAL_RCC_GET_SDIO_SOURCE


	)

3583 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

3584 
	#__HAL_RCC_SDIO_FORCE_RESET
 
__HAL_RCC_SDMMC1_FORCE_RESET


	)

3585 
	#__HAL_RCC_SDIO_RELEASE_RESET
 
__HAL_RCC_SDMMC1_RELEASE_RESET


	)

3586 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE


	)

3587 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE


	)

3588 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

3589 
	#__HAL_RCC_SDIO_CLK_DISABLE
 
__HAL_RCC_SDMMC1_CLK_DISABLE


	)

3590 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
 
__HAL_RCC_SDMMC1_IS_CLK_ENABLED


	)

3591 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
 
__HAL_RCC_SDMMC1_IS_CLK_DISABLED


	)

3592 
	#SdioClockSñe˘i⁄
 
Sdmmc1ClockSñe˘i⁄


	)

3593 
	#RCC_PERIPHCLK_SDIO
 
RCC_PERIPHCLK_SDMMC1


	)

3594 
	#__HAL_RCC_SDIO_CONFIG
 
__HAL_RCC_SDMMC1_CONFIG


	)

3595 
	#__HAL_RCC_GET_SDIO_SOURCE
 
__HAL_RCC_GET_SDMMC1_SOURCE


	)

3598 #i‡
deföed
(
STM32F7
)

3599 
	#RCC_SDIOCLKSOURCE_CLK48
 
RCC_SDMMC1CLKSOURCE_CLK48


	)

3600 
	#RCC_SDIOCLKSOURCE_SYSCLK
 
RCC_SDMMC1CLKSOURCE_SYSCLK


	)

3603 #i‡
deföed
(
STM32H7
)

3604 
	#__HAL_RCC_USB_OTG_HS_CLK_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_ENABLE
()

	)

3605 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_ENABLE
()

	)

3606 
	#__HAL_RCC_USB_OTG_HS_CLK_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_DISABLE
()

	)

3607 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_DISABLE
()

	)

3608 
	#__HAL_RCC_USB_OTG_HS_FORCE_RESET
(Ë
	`__HAL_RCC_USB1_OTG_HS_FORCE_RESET
()

	)

3609 
	#__HAL_RCC_USB_OTG_HS_RELEASE_RESET
(Ë
	`__HAL_RCC_USB1_OTG_HS_RELEASE_RESET
()

	)

3610 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_SLEEP_ENABLE
()

	)

3611 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_SLEEP_ENABLE
()

	)

3612 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_SLEEP_DISABLE
()

	)

3613 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_SLEEP_DISABLE
()

	)

3615 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_ENABLE
()

	)

3616 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_ENABLE
()

	)

3617 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_DISABLE
()

	)

3618 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_DISABLE
()

	)

3619 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë
	`__HAL_RCC_USB2_OTG_FS_FORCE_RESET
()

	)

3620 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë
	`__HAL_RCC_USB2_OTG_FS_RELEASE_RESET
()

	)

3621 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_SLEEP_ENABLE
()

	)

3622 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_SLEEP_ENABLE
()

	)

3623 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_SLEEP_DISABLE
()

	)

3624 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_SLEEP_DISABLE
()

	)

3627 
	#__HAL_RCC_I2SCLK
 
__HAL_RCC_I2S_CONFIG


	)

3628 
	#__HAL_RCC_I2SCLK_CONFIG
 
__HAL_RCC_I2S_CONFIG


	)

3630 
	#__RCC_PLLSRC
 
RCC_GET_PLL_OSCSOURCE


	)

3632 
	#IS_RCC_MSIRANGE
 
IS_RCC_MSI_CLOCK_RANGE


	)

3633 
	#IS_RCC_RTCCLK_SOURCE
 
IS_RCC_RTCCLKSOURCE


	)

3634 
	#IS_RCC_SYSCLK_DIV
 
IS_RCC_HCLK


	)

3635 
	#IS_RCC_HCLK_DIV
 
IS_RCC_PCLK


	)

3636 
	#IS_RCC_PERIPHCLK
 
IS_RCC_PERIPHCLOCK


	)

3638 
	#RCC_IT_HSI14
 
RCC_IT_HSI14RDY


	)

3640 
	#RCC_IT_CSSLSE
 
RCC_IT_LSECSS


	)

3641 
	#RCC_IT_CSSHSE
 
RCC_IT_CSS


	)

3643 
	#RCC_PLLMUL_3
 
RCC_PLL_MUL3


	)

3644 
	#RCC_PLLMUL_4
 
RCC_PLL_MUL4


	)

3645 
	#RCC_PLLMUL_6
 
RCC_PLL_MUL6


	)

3646 
	#RCC_PLLMUL_8
 
RCC_PLL_MUL8


	)

3647 
	#RCC_PLLMUL_12
 
RCC_PLL_MUL12


	)

3648 
	#RCC_PLLMUL_16
 
RCC_PLL_MUL16


	)

3649 
	#RCC_PLLMUL_24
 
RCC_PLL_MUL24


	)

3650 
	#RCC_PLLMUL_32
 
RCC_PLL_MUL32


	)

3651 
	#RCC_PLLMUL_48
 
RCC_PLL_MUL48


	)

3653 
	#RCC_PLLDIV_2
 
RCC_PLL_DIV2


	)

3654 
	#RCC_PLLDIV_3
 
RCC_PLL_DIV3


	)

3655 
	#RCC_PLLDIV_4
 
RCC_PLL_DIV4


	)

3657 
	#IS_RCC_MCOSOURCE
 
IS_RCC_MCO1SOURCE


	)

3658 
	#__HAL_RCC_MCO_CONFIG
 
__HAL_RCC_MCO1_CONFIG


	)

3659 
	#RCC_MCO_NODIV
 
RCC_MCODIV_1


	)

3660 
	#RCC_MCO_DIV1
 
RCC_MCODIV_1


	)

3661 
	#RCC_MCO_DIV2
 
RCC_MCODIV_2


	)

3662 
	#RCC_MCO_DIV4
 
RCC_MCODIV_4


	)

3663 
	#RCC_MCO_DIV8
 
RCC_MCODIV_8


	)

3664 
	#RCC_MCO_DIV16
 
RCC_MCODIV_16


	)

3665 
	#RCC_MCO_DIV32
 
RCC_MCODIV_32


	)

3666 
	#RCC_MCO_DIV64
 
RCC_MCODIV_64


	)

3667 
	#RCC_MCO_DIV128
 
RCC_MCODIV_128


	)

3668 
	#RCC_MCOSOURCE_NONE
 
RCC_MCO1SOURCE_NOCLOCK


	)

3669 
	#RCC_MCOSOURCE_LSI
 
RCC_MCO1SOURCE_LSI


	)

3670 
	#RCC_MCOSOURCE_LSE
 
RCC_MCO1SOURCE_LSE


	)

3671 
	#RCC_MCOSOURCE_SYSCLK
 
RCC_MCO1SOURCE_SYSCLK


	)

3672 
	#RCC_MCOSOURCE_HSI
 
RCC_MCO1SOURCE_HSI


	)

3673 
	#RCC_MCOSOURCE_HSI14
 
RCC_MCO1SOURCE_HSI14


	)

3674 
	#RCC_MCOSOURCE_HSI48
 
RCC_MCO1SOURCE_HSI48


	)

3675 
	#RCC_MCOSOURCE_HSE
 
RCC_MCO1SOURCE_HSE


	)

3676 
	#RCC_MCOSOURCE_PLLCLK_DIV1
 
RCC_MCO1SOURCE_PLLCLK


	)

3677 
	#RCC_MCOSOURCE_PLLCLK_NODIV
 
RCC_MCO1SOURCE_PLLCLK


	)

3678 
	#RCC_MCOSOURCE_PLLCLK_DIV2
 
RCC_MCO1SOURCE_PLLCLK_DIV2


	)

3680 #i‡
deföed
(
STM32U0
)

3681 
	#RCC_SYSCLKSOURCE_STATUS_PLLR
 
RCC_SYSCLKSOURCE_STATUS_PLLCLK


	)

3684 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32G4
Ë|| deföed(
STM32L5
) || \

3685 
deföed
(
STM32WL
Ë|| deföed(
STM32C0
Ë|| deföed(
STM32H7RS
Ë|| deföed(
STM32U0
)

3686 
	#RCC_RTCCLKSOURCE_NO_CLK
 
RCC_RTCCLKSOURCE_NONE


	)

3688 
	#RCC_RTCCLKSOURCE_NONE
 
RCC_RTCCLKSOURCE_NO_CLK


	)

3691 
	#RCC_USBCLK_PLLSAI1
 
RCC_USBCLKSOURCE_PLLSAI1


	)

3692 
	#RCC_USBCLK_PLL
 
RCC_USBCLKSOURCE_PLL


	)

3693 
	#RCC_USBCLK_MSI
 
RCC_USBCLKSOURCE_MSI


	)

3694 
	#RCC_USBCLKSOURCE_PLLCLK
 
RCC_USBCLKSOURCE_PLL


	)

3695 
	#RCC_USBPLLCLK_DIV1
 
RCC_USBCLKSOURCE_PLL


	)

3696 
	#RCC_USBPLLCLK_DIV1_5
 
RCC_USBCLKSOURCE_PLL_DIV1_5


	)

3697 
	#RCC_USBPLLCLK_DIV2
 
RCC_USBCLKSOURCE_PLL_DIV2


	)

3698 
	#RCC_USBPLLCLK_DIV3
 
RCC_USBCLKSOURCE_PLL_DIV3


	)

3700 
	#HSION_BôNumbî
 
RCC_HSION_BIT_NUMBER


	)

3701 
	#HSION_BITNUMBER
 
RCC_HSION_BIT_NUMBER


	)

3702 
	#HSEON_BôNumbî
 
RCC_HSEON_BIT_NUMBER


	)

3703 
	#HSEON_BITNUMBER
 
RCC_HSEON_BIT_NUMBER


	)

3704 
	#MSION_BITNUMBER
 
RCC_MSION_BIT_NUMBER


	)

3705 
	#CSSON_BôNumbî
 
RCC_CSSON_BIT_NUMBER


	)

3706 
	#CSSON_BITNUMBER
 
RCC_CSSON_BIT_NUMBER


	)

3707 
	#PLLON_BôNumbî
 
RCC_PLLON_BIT_NUMBER


	)

3708 
	#PLLON_BITNUMBER
 
RCC_PLLON_BIT_NUMBER


	)

3709 
	#PLLI2SON_BôNumbî
 
RCC_PLLI2SON_BIT_NUMBER


	)

3710 
	#I2SSRC_BôNumbî
 
RCC_I2SSRC_BIT_NUMBER


	)

3711 
	#RTCEN_BôNumbî
 
RCC_RTCEN_BIT_NUMBER


	)

3712 
	#RTCEN_BITNUMBER
 
RCC_RTCEN_BIT_NUMBER


	)

3713 
	#BDRST_BôNumbî
 
RCC_BDRST_BIT_NUMBER


	)

3714 
	#BDRST_BITNUMBER
 
RCC_BDRST_BIT_NUMBER


	)

3715 
	#RTCRST_BITNUMBER
 
RCC_RTCRST_BIT_NUMBER


	)

3716 
	#LSION_BôNumbî
 
RCC_LSION_BIT_NUMBER


	)

3717 
	#LSION_BITNUMBER
 
RCC_LSION_BIT_NUMBER


	)

3718 
	#LSEON_BôNumbî
 
RCC_LSEON_BIT_NUMBER


	)

3719 
	#LSEON_BITNUMBER
 
RCC_LSEON_BIT_NUMBER


	)

3720 
	#LSEBYP_BITNUMBER
 
RCC_LSEBYP_BIT_NUMBER


	)

3721 
	#PLLSAION_BôNumbî
 
RCC_PLLSAION_BIT_NUMBER


	)

3722 
	#TIMPRE_BôNumbî
 
RCC_TIMPRE_BIT_NUMBER


	)

3723 
	#RMVF_BôNumbî
 
RCC_RMVF_BIT_NUMBER


	)

3724 
	#RMVF_BITNUMBER
 
RCC_RMVF_BIT_NUMBER


	)

3725 
	#RCC_CR2_HSI14TRIM_BôNumbî
 
RCC_HSI14TRIM_BIT_NUMBER


	)

3726 
	#CR_BYTE2_ADDRESS
 
RCC_CR_BYTE2_ADDRESS


	)

3727 
	#CIR_BYTE1_ADDRESS
 
RCC_CIR_BYTE1_ADDRESS


	)

3728 
	#CIR_BYTE2_ADDRESS
 
RCC_CIR_BYTE2_ADDRESS


	)

3729 
	#BDCR_BYTE0_ADDRESS
 
RCC_BDCR_BYTE0_ADDRESS


	)

3730 
	#DBP_TIMEOUT_VALUE
 
RCC_DBP_TIMEOUT_VALUE


	)

3731 
	#LSE_TIMEOUT_VALUE
 
RCC_LSE_TIMEOUT_VALUE


	)

3733 
	#CR_HSION_BB
 
RCC_CR_HSION_BB


	)

3734 
	#CR_CSSON_BB
 
RCC_CR_CSSON_BB


	)

3735 
	#CR_PLLON_BB
 
RCC_CR_PLLON_BB


	)

3736 
	#CR_PLLI2SON_BB
 
RCC_CR_PLLI2SON_BB


	)

3737 
	#CR_MSION_BB
 
RCC_CR_MSION_BB


	)

3738 
	#CSR_LSION_BB
 
RCC_CSR_LSION_BB


	)

3739 
	#CSR_LSEON_BB
 
RCC_CSR_LSEON_BB


	)

3740 
	#CSR_LSEBYP_BB
 
RCC_CSR_LSEBYP_BB


	)

3741 
	#CSR_RTCEN_BB
 
RCC_CSR_RTCEN_BB


	)

3742 
	#CSR_RTCRST_BB
 
RCC_CSR_RTCRST_BB


	)

3743 
	#CFGR_I2SSRC_BB
 
RCC_CFGR_I2SSRC_BB


	)

3744 
	#BDCR_RTCEN_BB
 
RCC_BDCR_RTCEN_BB


	)

3745 
	#BDCR_BDRST_BB
 
RCC_BDCR_BDRST_BB


	)

3746 
	#CR_HSEON_BB
 
RCC_CR_HSEON_BB


	)

3747 
	#CSR_RMVF_BB
 
RCC_CSR_RMVF_BB


	)

3748 
	#CR_PLLSAION_BB
 
RCC_CR_PLLSAION_BB


	)

3749 
	#DCKCFGR_TIMPRE_BB
 
RCC_DCKCFGR_TIMPRE_BB


	)

3751 
	#__HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE


	)

3752 
	#__HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE


	)

3753 
	#__HAL_RCC_CRS_ENABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE


	)

3754 
	#__HAL_RCC_CRS_DISABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE


	)

3755 
	#__HAL_RCC_CRS_CALCULATE_RELOADVALUE
 
__HAL_RCC_CRS_RELOADVALUE_CALCULATE


	)

3757 
	#__HAL_RCC_GET_IT_SOURCE
 
__HAL_RCC_GET_IT


	)

3759 
	#RCC_CRS_SYNCWARM
 
RCC_CRS_SYNCWARN


	)

3760 
	#RCC_CRS_TRIMOV
 
RCC_CRS_TRIMOVF


	)

3762 
	#RCC_PERIPHCLK_CK48
 
RCC_PERIPHCLK_CLK48


	)

3763 
	#RCC_CK48CLKSOURCE_PLLQ
 
RCC_CLK48CLKSOURCE_PLLQ


	)

3764 
	#RCC_CK48CLKSOURCE_PLLSAIP
 
RCC_CLK48CLKSOURCE_PLLSAIP


	)

3765 
	#RCC_CK48CLKSOURCE_PLLI2SQ
 
RCC_CLK48CLKSOURCE_PLLI2SQ


	)

3766 
	#IS_RCC_CK48CLKSOURCE
 
IS_RCC_CLK48CLKSOURCE


	)

3767 
	#RCC_SDIOCLKSOURCE_CK48
 
RCC_SDIOCLKSOURCE_CLK48


	)

3769 
	#__HAL_RCC_DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM1_CLK_ENABLE


	)

3770 
	#__HAL_RCC_DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM1_CLK_DISABLE


	)

3771 
	#__HAL_RCC_DFSDM_IS_CLK_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_ENABLED


	)

3772 
	#__HAL_RCC_DFSDM_IS_CLK_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_DISABLED


	)

3773 
	#__HAL_RCC_DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM1_FORCE_RESET


	)

3774 
	#__HAL_RCC_DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM1_RELEASE_RESET


	)

3775 
	#__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_ENABLE


	)

3776 
	#__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_DISABLE


	)

3777 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_ENABLED


	)

3778 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_DISABLED


	)

3779 
	#DfsdmClockSñe˘i⁄
 
Dfsdm1ClockSñe˘i⁄


	)

3780 
	#RCC_PERIPHCLK_DFSDM
 
RCC_PERIPHCLK_DFSDM1


	)

3781 
	#RCC_DFSDMCLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3782 
	#RCC_DFSDMCLKSOURCE_SYSCLK
 
RCC_DFSDM1CLKSOURCE_SYSCLK


	)

3783 
	#__HAL_RCC_DFSDM_CONFIG
 
__HAL_RCC_DFSDM1_CONFIG


	)

3784 
	#__HAL_RCC_GET_DFSDM_SOURCE
 
__HAL_RCC_GET_DFSDM1_SOURCE


	)

3785 
	#RCC_DFSDM1CLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3786 
	#RCC_SWPMI1CLKSOURCE_PCLK
 
RCC_SWPMI1CLKSOURCE_PCLK1


	)

3787 #i‡!
deföed
(
STM32U0
)

3788 
	#RCC_LPTIM1CLKSOURCE_PCLK
 
RCC_LPTIM1CLKSOURCE_PCLK1


	)

3789 
	#RCC_LPTIM2CLKSOURCE_PCLK
 
RCC_LPTIM2CLKSOURCE_PCLK1


	)

3792 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1
 
RCC_DFSDM1AUDIOCLKSOURCE_I2S1


	)

3793 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2
 
RCC_DFSDM1AUDIOCLKSOURCE_I2S2


	)

3794 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1
 
RCC_DFSDM2AUDIOCLKSOURCE_I2S1


	)

3795 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2
 
RCC_DFSDM2AUDIOCLKSOURCE_I2S2


	)

3796 
	#RCC_DFSDM1CLKSOURCE_APB2
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3797 
	#RCC_DFSDM2CLKSOURCE_APB2
 
RCC_DFSDM2CLKSOURCE_PCLK2


	)

3798 
	#RCC_FMPI2C1CLKSOURCE_APB
 
RCC_FMPI2C1CLKSOURCE_PCLK1


	)

3799 #i‡
deföed
(
STM32U5
)

3800 
	#MSIKPLLModeSEL
 
RCC_MSIKPLL_MODE_SEL


	)

3801 
	#MSISPLLModeSEL
 
RCC_MSISPLL_MODE_SEL


	)

3802 
	#__HAL_RCC_AHB21_CLK_DISABLE
 
__HAL_RCC_AHB2_1_CLK_DISABLE


	)

3803 
	#__HAL_RCC_AHB22_CLK_DISABLE
 
__HAL_RCC_AHB2_2_CLK_DISABLE


	)

3804 
	#__HAL_RCC_AHB1_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_AHB1_CLK_ENABLE


	)

3805 
	#__HAL_RCC_AHB21_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_AHB2_1_CLK_ENABLE


	)

3806 
	#__HAL_RCC_AHB22_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_AHB2_2_CLK_ENABLE


	)

3807 
	#__HAL_RCC_AHB3_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_AHB3_CLK_ENABLE


	)

3808 
	#__HAL_RCC_APB1_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_APB1_CLK_ENABLE


	)

3809 
	#__HAL_RCC_APB2_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_APB2_CLK_ENABLE


	)

3810 
	#__HAL_RCC_APB3_CLK_DißbÀ_CÀ¨
 
__HAL_RCC_APB3_CLK_ENABLE


	)

3811 
	#IS_RCC_MSIPLLModeSñe˘i⁄
 
IS_RCC_MSIPLLMODE_SELECT


	)

3812 
	#RCC_PERIPHCLK_CLK48
 
RCC_PERIPHCLK_ICLK


	)

3813 
	#RCC_CLK48CLKSOURCE_HSI48
 
RCC_ICLK_CLKSOURCE_HSI48


	)

3814 
	#RCC_CLK48CLKSOURCE_PLL2
 
RCC_ICLK_CLKSOURCE_PLL2


	)

3815 
	#RCC_CLK48CLKSOURCE_PLL1
 
RCC_ICLK_CLKSOURCE_PLL1


	)

3816 
	#RCC_CLK48CLKSOURCE_MSIK
 
RCC_ICLK_CLKSOURCE_MSIK


	)

3817 
	#__HAL_RCC_ADC1_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

3818 
	#__HAL_RCC_ADC1_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

3819 
	#__HAL_RCC_ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

3820 
	#__HAL_RCC_ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

3821 
	#__HAL_RCC_ADC1_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

3822 
	#__HAL_RCC_ADC1_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

3823 
	#__HAL_RCC_ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC12_CLK_SLEEP_ENABLE


	)

3824 
	#__HAL_RCC_ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC12_CLK_SLEEP_DISABLE


	)

3825 
	#__HAL_RCC_GET_CLK48_SOURCE
 
__HAL_RCC_GET_ICLK_SOURCE


	)

3826 
	#__HAL_RCC_PLLFRACN_ENABLE
 
__HAL_RCC_PLL_FRACN_ENABLE


	)

3827 
	#__HAL_RCC_PLLFRACN_DISABLE
 
__HAL_RCC_PLL_FRACN_DISABLE


	)

3828 
	#__HAL_RCC_PLLFRACN_CONFIG
 
__HAL_RCC_PLL_FRACN_CONFIG


	)

3829 
	#IS_RCC_PLLFRACN_VALUE
 
IS_RCC_PLL_FRACN_VALUE


	)

3832 #i‡
deföed
(
STM32H5
)

3833 
	#__HAL_RCC_PLLFRACN_ENABLE
 
__HAL_RCC_PLL_FRACN_ENABLE


	)

3834 
	#__HAL_RCC_PLLFRACN_DISABLE
 
__HAL_RCC_PLL_FRACN_DISABLE


	)

3835 
	#__HAL_RCC_PLLFRACN_CONFIG
 
__HAL_RCC_PLL_FRACN_CONFIG


	)

3836 
	#IS_RCC_PLLFRACN_VALUE
 
IS_RCC_PLL_FRACN_VALUE


	)

3838 
	#RCC_PLLSOURCE_NONE
 
RCC_PLL1_SOURCE_NONE


	)

3839 
	#RCC_PLLSOURCE_HSI
 
RCC_PLL1_SOURCE_HSI


	)

3840 
	#RCC_PLLSOURCE_CSI
 
RCC_PLL1_SOURCE_CSI


	)

3841 
	#RCC_PLLSOURCE_HSE
 
RCC_PLL1_SOURCE_HSE


	)

3842 
	#RCC_PLLVCIRANGE_0
 
RCC_PLL1_VCIRANGE_0


	)

3843 
	#RCC_PLLVCIRANGE_1
 
RCC_PLL1_VCIRANGE_1


	)

3844 
	#RCC_PLLVCIRANGE_2
 
RCC_PLL1_VCIRANGE_2


	)

3845 
	#RCC_PLLVCIRANGE_3
 
RCC_PLL1_VCIRANGE_3


	)

3846 
	#RCC_PLL1VCOWIDE
 
RCC_PLL1_VCORANGE_WIDE


	)

3847 
	#RCC_PLL1VCOMEDIUM
 
RCC_PLL1_VCORANGE_MEDIUM


	)

3849 
	#IS_RCC_PLLSOURCE
 
IS_RCC_PLL1_SOURCE


	)

3850 
	#IS_RCC_PLLRGE_VALUE
 
IS_RCC_PLL1_VCIRGE_VALUE


	)

3851 
	#IS_RCC_PLLVCORGE_VALUE
 
IS_RCC_PLL1_VCORGE_VALUE


	)

3852 
	#IS_RCC_PLLCLOCKOUT_VALUE
 
IS_RCC_PLL1_CLOCKOUT_VALUE


	)

3853 
	#IS_RCC_PLL_FRACN_VALUE
 
IS_RCC_PLL1_FRACN_VALUE


	)

3854 
	#IS_RCC_PLLM_VALUE
 
IS_RCC_PLL1_DIVM_VALUE


	)

3855 
	#IS_RCC_PLLN_VALUE
 
IS_RCC_PLL1_MULN_VALUE


	)

3856 
	#IS_RCC_PLLP_VALUE
 
IS_RCC_PLL1_DIVP_VALUE


	)

3857 
	#IS_RCC_PLLQ_VALUE
 
IS_RCC_PLL1_DIVQ_VALUE


	)

3858 
	#IS_RCC_PLLR_VALUE
 
IS_RCC_PLL1_DIVR_VALUE


	)

3860 
	#__HAL_RCC_PLL_ENABLE
 
__HAL_RCC_PLL1_ENABLE


	)

3861 
	#__HAL_RCC_PLL_DISABLE
 
__HAL_RCC_PLL1_DISABLE


	)

3862 
	#__HAL_RCC_PLL_FRACN_ENABLE
 
__HAL_RCC_PLL1_FRACN_ENABLE


	)

3863 
	#__HAL_RCC_PLL_FRACN_DISABLE
 
__HAL_RCC_PLL1_FRACN_DISABLE


	)

3864 
	#__HAL_RCC_PLL_CONFIG
 
__HAL_RCC_PLL1_CONFIG


	)

3865 
	#__HAL_RCC_PLL_PLLSOURCE_CONFIG
 
__HAL_RCC_PLL1_PLLSOURCE_CONFIG


	)

3866 
	#__HAL_RCC_PLL_DIVM_CONFIG
 
__HAL_RCC_PLL1_DIVM_CONFIG


	)

3867 
	#__HAL_RCC_PLL_FRACN_CONFIG
 
__HAL_RCC_PLL1_FRACN_CONFIG


	)

3868 
	#__HAL_RCC_PLL_VCIRANGE
 
__HAL_RCC_PLL1_VCIRANGE


	)

3869 
	#__HAL_RCC_PLL_VCORANGE
 
__HAL_RCC_PLL1_VCORANGE


	)

3870 
	#__HAL_RCC_GET_PLL_OSCSOURCE
 
__HAL_RCC_GET_PLL1_OSCSOURCE


	)

3871 
	#__HAL_RCC_PLLCLKOUT_ENABLE
 
__HAL_RCC_PLL1_CLKOUT_ENABLE


	)

3872 
	#__HAL_RCC_PLLCLKOUT_DISABLE
 
__HAL_RCC_PLL1_CLKOUT_DISABLE


	)

3873 
	#__HAL_RCC_GET_PLLCLKOUT_CONFIG
 
__HAL_RCC_GET_PLL1_CLKOUT_CONFIG


	)

3875 
	#__HAL_RCC_PLL2FRACN_ENABLE
 
__HAL_RCC_PLL2_FRACN_ENABLE


	)

3876 
	#__HAL_RCC_PLL2FRACN_DISABLE
 
__HAL_RCC_PLL2_FRACN_DISABLE


	)

3877 
	#__HAL_RCC_PLL2CLKOUT_ENABLE
 
__HAL_RCC_PLL2_CLKOUT_ENABLE


	)

3878 
	#__HAL_RCC_PLL2CLKOUT_DISABLE
 
__HAL_RCC_PLL2_CLKOUT_DISABLE


	)

3879 
	#__HAL_RCC_PLL2FRACN_CONFIG
 
__HAL_RCC_PLL2_FRACN_CONFIG


	)

3880 
	#__HAL_RCC_GET_PLL2CLKOUT_CONFIG
 
__HAL_RCC_GET_PLL2_CLKOUT_CONFIG


	)

3882 
	#__HAL_RCC_PLL3FRACN_ENABLE
 
__HAL_RCC_PLL3_FRACN_ENABLE


	)

3883 
	#__HAL_RCC_PLL3FRACN_DISABLE
 
__HAL_RCC_PLL3_FRACN_DISABLE


	)

3884 
	#__HAL_RCC_PLL3CLKOUT_ENABLE
 
__HAL_RCC_PLL3_CLKOUT_ENABLE


	)

3885 
	#__HAL_RCC_PLL3CLKOUT_DISABLE
 
__HAL_RCC_PLL3_CLKOUT_DISABLE


	)

3886 
	#__HAL_RCC_PLL3FRACN_CONFIG
 
__HAL_RCC_PLL3_FRACN_CONFIG


	)

3887 
	#__HAL_RCC_GET_PLL3CLKOUT_CONFIG
 
__HAL_RCC_GET_PLL3_CLKOUT_CONFIG


	)

3889 
	#RCC_PLL2VCIRANGE_0
 
RCC_PLL2_VCIRANGE_0


	)

3890 
	#RCC_PLL2VCIRANGE_1
 
RCC_PLL2_VCIRANGE_1


	)

3891 
	#RCC_PLL2VCIRANGE_2
 
RCC_PLL2_VCIRANGE_2


	)

3892 
	#RCC_PLL2VCIRANGE_3
 
RCC_PLL2_VCIRANGE_3


	)

3894 
	#RCC_PLL2VCOWIDE
 
RCC_PLL2_VCORANGE_WIDE


	)

3895 
	#RCC_PLL2VCOMEDIUM
 
RCC_PLL2_VCORANGE_MEDIUM


	)

3897 
	#RCC_PLL2SOURCE_NONE
 
RCC_PLL2_SOURCE_NONE


	)

3898 
	#RCC_PLL2SOURCE_HSI
 
RCC_PLL2_SOURCE_HSI


	)

3899 
	#RCC_PLL2SOURCE_CSI
 
RCC_PLL2_SOURCE_CSI


	)

3900 
	#RCC_PLL2SOURCE_HSE
 
RCC_PLL2_SOURCE_HSE


	)

3902 
	#RCC_PLL3VCIRANGE_0
 
RCC_PLL3_VCIRANGE_0


	)

3903 
	#RCC_PLL3VCIRANGE_1
 
RCC_PLL3_VCIRANGE_1


	)

3904 
	#RCC_PLL3VCIRANGE_2
 
RCC_PLL3_VCIRANGE_2


	)

3905 
	#RCC_PLL3VCIRANGE_3
 
RCC_PLL3_VCIRANGE_3


	)

3907 
	#RCC_PLL3VCOWIDE
 
RCC_PLL3_VCORANGE_WIDE


	)

3908 
	#RCC_PLL3VCOMEDIUM
 
RCC_PLL3_VCORANGE_MEDIUM


	)

3910 
	#RCC_PLL3SOURCE_NONE
 
RCC_PLL3_SOURCE_NONE


	)

3911 
	#RCC_PLL3SOURCE_HSI
 
RCC_PLL3_SOURCE_HSI


	)

3912 
	#RCC_PLL3SOURCE_CSI
 
RCC_PLL3_SOURCE_CSI


	)

3913 
	#RCC_PLL3SOURCE_HSE
 
RCC_PLL3_SOURCE_HSE


	)

3925 
	#HAL_RNG_RódyCÆlback
(
__HANDLE__
Ë
	`HAL_RNG_RódyD©aCÆlback
((__HANDLE__), 
uöt32_t
 
øndom32bô
)

	)

3934 #i‡
deföed
 (
STM32G0
Ë|| deföed (
STM32L5
Ë|| deföed (
STM32L412xx
Ë|| deföed (
STM32L422xx
) || \

3935 
deföed
 (
STM32L4P5xx
)|| deföed (
STM32L4Q5xx
Ë|| deföed (
STM32G4
Ë|| deföed (
STM32WL
Ë|| deföed (
STM32U5
) || \

3936 
deföed
 (
STM32WBA
Ë|| deföed (
STM32H5
) || \

3937 
deföed
 (
STM32C0
Ë|| deföed (
STM32H7RS
Ë|| deföed (
STM32U0
)

3939 
	#__HAL_RTC_CLEAR_FLAG
 
__HAL_RTC_EXTI_CLEAR_FLAG


	)

3941 
	#__HAL_RTC_DISABLE_IT
 
__HAL_RTC_EXTI_DISABLE_IT


	)

3942 
	#__HAL_RTC_ENABLE_IT
 
__HAL_RTC_EXTI_ENABLE_IT


	)

3944 #i‡
deföed
 (
STM32F1
)

3945 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
()

	)

3947 
	#__HAL_RTC_EXTI_ENABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
()

	)

3949 
	#__HAL_RTC_EXTI_DISABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
()

	)

3951 
	#__HAL_RTC_EXTI_GET_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
()

	)

3953 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
()

	)

3955 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
() : \

3956 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
() : \

3957 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
()))

	)

3958 
	#__HAL_RTC_EXTI_ENABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
() : \

3959 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
() : \

3960 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
()))

	)

3961 
	#__HAL_RTC_EXTI_DISABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
() : \

3962 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
() : \

3963 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
()))

	)

3964 
	#__HAL_RTC_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
() : \

3965 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
() : \

3966 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
()))

	)

3967 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
() : \

3968 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
() : \

3969 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
()))

	)

3972 #i‡
deföed
 (
STM32F0
Ë|| deföed (
STM32F2
Ë|| deföed (
STM32F3
Ë|| deföed (
STM32F4
Ë|| deföed (
STM32F7
) || \

3973 
deföed
 (
STM32H7
) || \

3974 
deföed
 (
STM32L0
Ë|| deföed (
STM32L1
) || \

3975 
deföed
 (
STM32WB
)

3976 
	#__HAL_RTC_TAMPER_GET_IT
 
__HAL_RTC_TAMPER_GET_FLAG


	)

3979 
	#IS_ALARM
 
IS_RTC_ALARM


	)

3980 
	#IS_ALARM_MASK
 
IS_RTC_ALARM_MASK


	)

3981 
	#IS_TAMPER
 
IS_RTC_TAMPER


	)

3982 
	#IS_TAMPER_ERASE_MODE
 
IS_RTC_TAMPER_ERASE_MODE


	)

3983 
	#IS_TAMPER_FILTER
 
IS_RTC_TAMPER_FILTER


	)

3984 
	#IS_TAMPER_INTERRUPT
 
IS_RTC_TAMPER_INTERRUPT


	)

3985 
	#IS_TAMPER_MASKFLAG_STATE
 
IS_RTC_TAMPER_MASKFLAG_STATE


	)

3986 
	#IS_TAMPER_PRECHARGE_DURATION
 
IS_RTC_TAMPER_PRECHARGE_DURATION


	)

3987 
	#IS_TAMPER_PULLUP_STATE
 
IS_RTC_TAMPER_PULLUP_STATE


	)

3988 
	#IS_TAMPER_SAMPLING_FREQ
 
IS_RTC_TAMPER_SAMPLING_FREQ


	)

3989 
	#IS_TAMPER_TIMESTAMPONTAMPER_DETECTION
 
IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION


	)

3990 
	#IS_TAMPER_TRIGGER
 
IS_RTC_TAMPER_TRIGGER


	)

3991 
	#IS_WAKEUP_CLOCK
 
IS_RTC_WAKEUP_CLOCK


	)

3992 
	#IS_WAKEUP_COUNTER
 
IS_RTC_WAKEUP_COUNTER


	)

3994 
	#__RTC_WRITEPROTECTION_ENABLE
 
__HAL_RTC_WRITEPROTECTION_ENABLE


	)

3995 
	#__RTC_WRITEPROTECTION_DISABLE
 
__HAL_RTC_WRITEPROTECTION_DISABLE


	)

3997 #i‡
deföed
 (
STM32H5
)

3998 
	#__HAL_RCC_RTCAPB_CLK_ENABLE
 
__HAL_RCC_RTC_CLK_ENABLE


	)

3999 
	#__HAL_RCC_RTCAPB_CLK_DISABLE
 
__HAL_RCC_RTC_CLK_DISABLE


	)

4010 
	#SD_OCR_CID_CSD_OVERWRIETE
 
SD_OCR_CID_CSD_OVERWRITE


	)

4011 
	#SD_CMD_SD_APP_STAUS
 
SD_CMD_SD_APP_STATUS


	)

4013 #i‡!
deföed
(
STM32F1
Ë&& !deföed(
STM32F2
Ë&& !deföed(
STM32F4
Ë&& !deföed(
STM32L1
)

4014 
	#eMMC_HIGH_VOLTAGE_RANGE
 
EMMC_HIGH_VOLTAGE_RANGE


	)

4015 
	#eMMC_DUAL_VOLTAGE_RANGE
 
EMMC_DUAL_VOLTAGE_RANGE


	)

4016 
	#eMMC_LOW_VOLTAGE_RANGE
 
EMMC_LOW_VOLTAGE_RANGE


	)

4018 
	#SDMMC_NS≥ed_CLK_DIV
 
SDMMC_NSPEED_CLK_DIV


	)

4019 
	#SDMMC_HS≥ed_CLK_DIV
 
SDMMC_HSPEED_CLK_DIV


	)

4022 #i‡
deföed
(
STM32F4
Ë|| deföed(
STM32F2
)

4023 
	#SD_SDMMC_DISABLED
 
SD_SDIO_DISABLED


	)

4024 
	#SD_SDMMC_FUNCTION_BUSY
 
SD_SDIO_FUNCTION_BUSY


	)

4025 
	#SD_SDMMC_FUNCTION_FAILED
 
SD_SDIO_FUNCTION_FAILED


	)

4026 
	#SD_SDMMC_UNKNOWN_FUNCTION
 
SD_SDIO_UNKNOWN_FUNCTION


	)

4027 
	#SD_CMD_SDMMC_SEN_OP_COND
 
SD_CMD_SDIO_SEN_OP_COND


	)

4028 
	#SD_CMD_SDMMC_RW_DIRECT
 
SD_CMD_SDIO_RW_DIRECT


	)

4029 
	#SD_CMD_SDMMC_RW_EXTENDED
 
SD_CMD_SDIO_RW_EXTENDED


	)

4030 
	#__HAL_SD_SDMMC_ENABLE
 
__HAL_SD_SDIO_ENABLE


	)

4031 
	#__HAL_SD_SDMMC_DISABLE
 
__HAL_SD_SDIO_DISABLE


	)

4032 
	#__HAL_SD_SDMMC_DMA_ENABLE
 
__HAL_SD_SDIO_DMA_ENABLE


	)

4033 
	#__HAL_SD_SDMMC_DMA_DISABLE
 
__HAL_SD_SDIO_DMA_DISABL


	)

4034 
	#__HAL_SD_SDMMC_ENABLE_IT
 
__HAL_SD_SDIO_ENABLE_IT


	)

4035 
	#__HAL_SD_SDMMC_DISABLE_IT
 
__HAL_SD_SDIO_DISABLE_IT


	)

4036 
	#__HAL_SD_SDMMC_GET_FLAG
 
__HAL_SD_SDIO_GET_FLAG


	)

4037 
	#__HAL_SD_SDMMC_CLEAR_FLAG
 
__HAL_SD_SDIO_CLEAR_FLAG


	)

4038 
	#__HAL_SD_SDMMC_GET_IT
 
__HAL_SD_SDIO_GET_IT


	)

4039 
	#__HAL_SD_SDMMC_CLEAR_IT
 
__HAL_SD_SDIO_CLEAR_IT


	)

4040 
	#SDMMC_STATIC_FLAGS
 
SDIO_STATIC_FLAGS


	)

4041 
	#SDMMC_CMD0TIMEOUT
 
SDIO_CMD0TIMEOUT


	)

4042 
	#SD_SDMMC_SEND_IF_COND
 
SD_SDIO_SEND_IF_COND


	)

4044 
	#SDMMC1_IRQn
 
SDIO_IRQn


	)

4045 
	#SDMMC1_IRQH™dÀr
 
SDIO_IRQH™dÀr


	)

4048 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

4049 
	#SD_SDIO_DISABLED
 
SD_SDMMC_DISABLED


	)

4050 
	#SD_SDIO_FUNCTION_BUSY
 
SD_SDMMC_FUNCTION_BUSY


	)

4051 
	#SD_SDIO_FUNCTION_FAILED
 
SD_SDMMC_FUNCTION_FAILED


	)

4052 
	#SD_SDIO_UNKNOWN_FUNCTION
 
SD_SDMMC_UNKNOWN_FUNCTION


	)

4053 
	#SD_CMD_SDIO_SEN_OP_COND
 
SD_CMD_SDMMC_SEN_OP_COND


	)

4054 
	#SD_CMD_SDIO_RW_DIRECT
 
SD_CMD_SDMMC_RW_DIRECT


	)

4055 
	#SD_CMD_SDIO_RW_EXTENDED
 
SD_CMD_SDMMC_RW_EXTENDED


	)

4056 
	#__HAL_SD_SDIO_ENABLE
 
__HAL_SD_SDMMC_ENABLE


	)

4057 
	#__HAL_SD_SDIO_DISABLE
 
__HAL_SD_SDMMC_DISABLE


	)

4058 
	#__HAL_SD_SDIO_DMA_ENABLE
 
__HAL_SD_SDMMC_DMA_ENABLE


	)

4059 
	#__HAL_SD_SDIO_DMA_DISABL
 
__HAL_SD_SDMMC_DMA_DISABLE


	)

4060 
	#__HAL_SD_SDIO_ENABLE_IT
 
__HAL_SD_SDMMC_ENABLE_IT


	)

4061 
	#__HAL_SD_SDIO_DISABLE_IT
 
__HAL_SD_SDMMC_DISABLE_IT


	)

4062 
	#__HAL_SD_SDIO_GET_FLAG
 
__HAL_SD_SDMMC_GET_FLAG


	)

4063 
	#__HAL_SD_SDIO_CLEAR_FLAG
 
__HAL_SD_SDMMC_CLEAR_FLAG


	)

4064 
	#__HAL_SD_SDIO_GET_IT
 
__HAL_SD_SDMMC_GET_IT


	)

4065 
	#__HAL_SD_SDIO_CLEAR_IT
 
__HAL_SD_SDMMC_CLEAR_IT


	)

4066 
	#SDIO_STATIC_FLAGS
 
SDMMC_STATIC_FLAGS


	)

4067 
	#SDIO_CMD0TIMEOUT
 
SDMMC_CMD0TIMEOUT


	)

4068 
	#SD_SDIO_SEND_IF_COND
 
SD_SDMMC_SEND_IF_COND


	)

4070 
	#SDIO_IRQn
 
SDMMC1_IRQn


	)

4071 
	#SDIO_IRQH™dÀr
 
SDMMC1_IRQH™dÀr


	)

4074 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32H7
)

4075 
	#HAL_SD_C¨dCIDTy≥def
 
HAL_SD_C¨dCIDTy≥Def


	)

4076 
	#HAL_SD_C¨dCSDTy≥def
 
HAL_SD_C¨dCSDTy≥Def


	)

4077 
	#HAL_SD_C¨dSètusTy≥def
 
HAL_SD_C¨dSètusTy≥Def


	)

4078 
	#HAL_SD_C¨dSèãTy≥def
 
HAL_SD_C¨dSèãTy≥Def


	)

4081 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32L5
)

4082 
	#HAL_MMCEx_Ród_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_MMCEx_Ród_DMADoubÀBuf0C∂tCÆlback


	)

4083 
	#HAL_MMCEx_Ród_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_MMCEx_Ród_DMADoubÀBuf1C∂tCÆlback


	)

4084 
	#HAL_MMCEx_Wrôe_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_MMCEx_Wrôe_DMADoubÀBuf0C∂tCÆlback


	)

4085 
	#HAL_MMCEx_Wrôe_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_MMCEx_Wrôe_DMADoubÀBuf1C∂tCÆlback


	)

4086 
	#HAL_SDEx_Ród_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_SDEx_Ród_DMADoubÀBuf0C∂tCÆlback


	)

4087 
	#HAL_SDEx_Ród_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_SDEx_Ród_DMADoubÀBuf1C∂tCÆlback


	)

4088 
	#HAL_SDEx_Wrôe_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_SDEx_Wrôe_DMADoubÀBuf0C∂tCÆlback


	)

4089 
	#HAL_SDEx_Wrôe_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_SDEx_Wrôe_DMADoubÀBuf1C∂tCÆlback


	)

4090 
	#HAL_SD_DriveTønscivî_1_8V_CÆlback
 
HAL_SD_DriveTøns˚ivî_1_8V_CÆlback


	)

4100 
	#__SMARTCARD_ENABLE_IT
 
__HAL_SMARTCARD_ENABLE_IT


	)

4101 
	#__SMARTCARD_DISABLE_IT
 
__HAL_SMARTCARD_DISABLE_IT


	)

4102 
	#__SMARTCARD_ENABLE
 
__HAL_SMARTCARD_ENABLE


	)

4103 
	#__SMARTCARD_DISABLE
 
__HAL_SMARTCARD_DISABLE


	)

4104 
	#__SMARTCARD_DMA_REQUEST_ENABLE
 
__HAL_SMARTCARD_DMA_REQUEST_ENABLE


	)

4105 
	#__SMARTCARD_DMA_REQUEST_DISABLE
 
__HAL_SMARTCARD_DMA_REQUEST_DISABLE


	)

4107 
	#__HAL_SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

4108 
	#__SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

4110 
	#IS_SMARTCARD_ONEBIT_SAMPLING
 
IS_SMARTCARD_ONE_BIT_SAMPLE


	)

4119 
	#__HAL_SMBUS_RESET_CR1
 
SMBUS_RESET_CR1


	)

4120 
	#__HAL_SMBUS_RESET_CR2
 
SMBUS_RESET_CR2


	)

4121 
	#__HAL_SMBUS_GENERATE_START
 
SMBUS_GENERATE_START


	)

4122 
	#__HAL_SMBUS_GET_ADDR_MATCH
 
SMBUS_GET_ADDR_MATCH


	)

4123 
	#__HAL_SMBUS_GET_DIR
 
SMBUS_GET_DIR


	)

4124 
	#__HAL_SMBUS_GET_STOP_MODE
 
SMBUS_GET_STOP_MODE


	)

4125 
	#__HAL_SMBUS_GET_PEC_MODE
 
SMBUS_GET_PEC_MODE


	)

4126 
	#__HAL_SMBUS_GET_ALERT_ENABLED
 
SMBUS_GET_ALERT_ENABLED


	)

4135 
	#__HAL_SPI_1LINE_TX
 
SPI_1LINE_TX


	)

4136 
	#__HAL_SPI_1LINE_RX
 
SPI_1LINE_RX


	)

4137 
	#__HAL_SPI_RESET_CRC
 
SPI_RESET_CRC


	)

4147 
	#__HAL_UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

4148 
	#__HAL_UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

4149 
	#__UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

4150 
	#__UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

4152 
	#IS_UART_WAKEUPMETHODE
 
IS_UART_WAKEUPMETHOD


	)

4154 
	#IS_UART_ONEBIT_SAMPLE
 
IS_UART_ONE_BIT_SAMPLE


	)

4155 
	#IS_UART_ONEBIT_SAMPLING
 
IS_UART_ONE_BIT_SAMPLE


	)

4166 
	#__USART_ENABLE_IT
 
__HAL_USART_ENABLE_IT


	)

4167 
	#__USART_DISABLE_IT
 
__HAL_USART_DISABLE_IT


	)

4168 
	#__USART_ENABLE
 
__HAL_USART_ENABLE


	)

4169 
	#__USART_DISABLE
 
__HAL_USART_DISABLE


	)

4171 
	#__HAL_USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

4172 
	#__USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

4174 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F7
)

4175 
	#USART_OVERSAMPLING_16
 0x00000000U

	)

4176 
	#USART_OVERSAMPLING_8
 
USART_CR1_OVER8


	)

4178 
	#IS_USART_OVERSAMPLING
(
__SAMPLING__
Ë(((__SAMPLING__Ë=
USART_OVERSAMPLING_16
) || \

4179 ((
__SAMPLING__
Ë=
USART_OVERSAMPLING_8
))

	)

4188 
	#USB_EXTI_LINE_WAKEUP
 
USB_WAKEUP_EXTI_LINE


	)

4190 
	#USB_FS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE


	)

4191 
	#USB_FS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE


	)

4192 
	#USB_FS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

4193 
	#USB_FS_EXTI_LINE_WAKEUP
 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

4195 
	#USB_HS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE


	)

4196 
	#USB_HS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE


	)

4197 
	#USB_HS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

4198 
	#USB_HS_EXTI_LINE_WAKEUP
 
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

4200 
	#__HAL_USB_EXTI_ENABLE_IT
 
__HAL_USB_WAKEUP_EXTI_ENABLE_IT


	)

4201 
	#__HAL_USB_EXTI_DISABLE_IT
 
__HAL_USB_WAKEUP_EXTI_DISABLE_IT


	)

4202 
	#__HAL_USB_EXTI_GET_FLAG
 
__HAL_USB_WAKEUP_EXTI_GET_FLAG


	)

4203 
	#__HAL_USB_EXTI_CLEAR_FLAG
 
__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG


	)

4204 
	#__HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

4205 
	#__HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

4206 
	#__HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

4208 
	#__HAL_USB_FS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT


	)

4209 
	#__HAL_USB_FS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT


	)

4210 
	#__HAL_USB_FS_EXTI_GET_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG


	)

4211 
	#__HAL_USB_FS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG


	)

4212 
	#__HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

4213 
	#__HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

4214 
	#__HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

4215 
	#__HAL_USB_FS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT


	)

4217 
	#__HAL_USB_HS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT


	)

4218 
	#__HAL_USB_HS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT


	)

4219 
	#__HAL_USB_HS_EXTI_GET_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG


	)

4220 
	#__HAL_USB_HS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG


	)

4221 
	#__HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

4222 
	#__HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

4223 
	#__HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

4224 
	#__HAL_USB_HS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT


	)

4226 
	#HAL_PCD_A˘iveRemŸeWakeup
 
HAL_PCD_A˘iv©eRemŸeWakeup


	)

4227 
	#HAL_PCD_DeA˘iveRemŸeWakeup
 
HAL_PCD_DeA˘iv©eRemŸeWakeup


	)

4229 
	#HAL_PCD_SëTxFiFo
 
HAL_PCDEx_SëTxFiFo


	)

4230 
	#HAL_PCD_SëRxFiFo
 
HAL_PCDEx_SëRxFiFo


	)

4238 
	#__HAL_TIM_SëICPªsˇÀrVÆue
 
TIM_SET_ICPRESCALERVALUE


	)

4239 
	#__HAL_TIM_Re£tICPªsˇÀrVÆue
 
TIM_RESET_ICPRESCALERVALUE


	)

4241 
	#TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

4242 
	#TIM_GET_CLEAR_IT
 
__HAL_TIM_CLEAR_IT


	)

4244 
	#__HAL_TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

4246 
	#__HAL_TIM_DIRECTION_STATUS
 
__HAL_TIM_IS_TIM_COUNTING_DOWN


	)

4247 
	#__HAL_TIM_PRESCALER
 
__HAL_TIM_SET_PRESCALER


	)

4248 
	#__HAL_TIM_SëCou¡î
 
__HAL_TIM_SET_COUNTER


	)

4249 
	#__HAL_TIM_GëCou¡î
 
__HAL_TIM_GET_COUNTER


	)

4250 
	#__HAL_TIM_SëAut‹ñﬂd
 
__HAL_TIM_SET_AUTORELOAD


	)

4251 
	#__HAL_TIM_GëAut‹ñﬂd
 
__HAL_TIM_GET_AUTORELOAD


	)

4252 
	#__HAL_TIM_SëClockDivisi⁄
 
__HAL_TIM_SET_CLOCKDIVISION


	)

4253 
	#__HAL_TIM_GëClockDivisi⁄
 
__HAL_TIM_GET_CLOCKDIVISION


	)

4254 
	#__HAL_TIM_SëICPªsˇÀr
 
__HAL_TIM_SET_ICPRESCALER


	)

4255 
	#__HAL_TIM_GëICPªsˇÀr
 
__HAL_TIM_GET_ICPRESCALER


	)

4256 
	#__HAL_TIM_SëCom∑ª
 
__HAL_TIM_SET_COMPARE


	)

4257 
	#__HAL_TIM_GëCom∑ª
 
__HAL_TIM_GET_COMPARE


	)

4259 
	#TIM_BREAKINPUTSOURCE_DFSDM
 
TIM_BREAKINPUTSOURCE_DFSDM1


	)

4261 
	#TIM_OCMODE_ASSYMETRIC_PWM1
 
TIM_OCMODE_ASYMMETRIC_PWM1


	)

4262 
	#TIM_OCMODE_ASSYMETRIC_PWM2
 
TIM_OCMODE_ASYMMETRIC_PWM2


	)

4271 
	#__HAL_ETH_EXTI_ENABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_IT


	)

4272 
	#__HAL_ETH_EXTI_DISABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_DISABLE_IT


	)

4273 
	#__HAL_ETH_EXTI_GET_FLAG
 
__HAL_ETH_WAKEUP_EXTI_GET_FLAG


	)

4274 
	#__HAL_ETH_EXTI_CLEAR_FLAG
 
__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG


	)

4275 
	#__HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER


	)

4276 
	#__HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER


	)

4277 
	#__HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER


	)

4279 
	#ETH_PROMISCIOUSMODE_ENABLE
 
ETH_PROMISCUOUS_MODE_ENABLE


	)

4280 
	#ETH_PROMISCIOUSMODE_DISABLE
 
ETH_PROMISCUOUS_MODE_DISABLE


	)

4281 
	#IS_ETH_PROMISCIOUS_MODE
 
IS_ETH_PROMISCUOUS_MODE


	)

4289 
	#__HAL_LTDC_LAYER
 
LTDC_LAYER


	)

4290 
	#__HAL_LTDC_RELOAD_CONFIG
 
__HAL_LTDC_RELOAD_IMMEDIATE_CONFIG


	)

4298 
	#SAI_OUTPUTDRIVE_DISABLED
 
SAI_OUTPUTDRIVE_DISABLE


	)

4299 
	#SAI_OUTPUTDRIVE_ENABLED
 
SAI_OUTPUTDRIVE_ENABLE


	)

4300 
	#SAI_MASTERDIVIDER_ENABLED
 
SAI_MASTERDIVIDER_ENABLE


	)

4301 
	#SAI_MASTERDIVIDER_DISABLED
 
SAI_MASTERDIVIDER_DISABLE


	)

4302 
	#SAI_STREOMODE
 
SAI_STEREOMODE


	)

4303 
	#SAI_FIFOSètus_Em±y
 
SAI_FIFOSTATUS_EMPTY


	)

4304 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_LESS1QUARTERFULL


	)

4305 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_1QUARTERFULL


	)

4306 
	#SAI_FIFOSètus_HÆfFuŒ
 
SAI_FIFOSTATUS_HALFFULL


	)

4307 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 
SAI_FIFOSTATUS_3QUARTERFULL


	)

4308 
	#SAI_FIFOSètus_FuŒ
 
SAI_FIFOSTATUS_FULL


	)

4309 
	#IS_SAI_BLOCK_MONO_STREO_MODE
 
IS_SAI_BLOCK_MONO_STEREO_MODE


	)

4310 
	#SAI_SYNCHRONOUS_EXT
 
SAI_SYNCHRONOUS_EXT_SAI1


	)

4311 
	#SAI_SYNCEXT_IN_ENABLE
 
SAI_SYNCEXT_OUTBLOCKA_ENABLE


	)

4319 #i‡
deföed
(
STM32H7
)

4320 
	#HAL_SPDIFRX_Re˚iveC⁄åﬁFlow
 
HAL_SPDIFRX_Re˚iveCålFlow


	)

4321 
	#HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_IT
 
HAL_SPDIFRX_Re˚iveCålFlow_IT


	)

4322 
	#HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_DMA
 
HAL_SPDIFRX_Re˚iveCålFlow_DMA


	)

4331 #i‡
deföed
 (
STM32H7
Ë|| deföed (
STM32G4
Ë|| deföed (
STM32F3
)

4332 
	#HAL_HRTIM_Wavef‹mCou¡îSèπ_IT
 
HAL_HRTIM_Wavef‹mCou¡Sèπ_IT


	)

4333 
	#HAL_HRTIM_Wavef‹mCou¡îSèπ_DMA
 
HAL_HRTIM_Wavef‹mCou¡Sèπ_DMA


	)

4334 
	#HAL_HRTIM_Wavef‹mCou¡îSèπ
 
HAL_HRTIM_Wavef‹mCou¡Sèπ


	)

4335 
	#HAL_HRTIM_Wavef‹mCou¡îSt›_IT
 
HAL_HRTIM_Wavef‹mCou¡St›_IT


	)

4336 
	#HAL_HRTIM_Wavef‹mCou¡îSt›_DMA
 
HAL_HRTIM_Wavef‹mCou¡St›_DMA


	)

4337 
	#HAL_HRTIM_Wavef‹mCou¡îSt›
 
HAL_HRTIM_Wavef‹mCou¡St›


	)

4346 #i‡
deföed
 (
STM32L4
Ë|| deföed (
STM32F4
Ë|| deföed (
STM32F7
Ë|| deföed(
STM32H7
)

4347 
	#HAL_QPSI_TIMEOUT_DEFAULT_VALUE
 
HAL_QSPI_TIMEOUT_DEFAULT_VALUE


	)

4356 #i‡
deföed
 (
STM32F7
)

4357 
	#ART_ACCLERATOR_ENABLE
 
ART_ACCELERATOR_ENABLE


	)

4371 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h

21 #i‚de‡
__STM32F1xx_HAL_H


22 
	#__STM32F1xx_HAL_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_c⁄f.h
"

50 
HAL_TICK_FREQ_10HZ
 = 100U,

51 
HAL_TICK_FREQ_100HZ
 = 10U,

52 
HAL_TICK_FREQ_1KHZ
 = 1U,

53 
HAL_TICK_FREQ_DEFAULT
 = 
HAL_TICK_FREQ_1KHZ


54 } 
	tHAL_TickFªqTy≥Def
;

59 
__IO
 
uöt32_t
 
uwTick
;

60 
uöt32_t
 
uwTickPrio
;

61 
HAL_TickFªqTy≥Def
 
uwTickFªq
;

87 
	#__HAL_DBGMCU_FREEZE_TIM2
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

88 
	#__HAL_DBGMCU_UNFREEZE_TIM2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

93 
	#__HAL_DBGMCU_FREEZE_TIM3
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

94 
	#__HAL_DBGMCU_UNFREEZE_TIM3
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

96 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM4_STOP
)

100 
	#__HAL_DBGMCU_FREEZE_TIM4
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

101 
	#__HAL_DBGMCU_UNFREEZE_TIM4
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

104 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM5_STOP
)

108 
	#__HAL_DBGMCU_FREEZE_TIM5
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

109 
	#__HAL_DBGMCU_UNFREEZE_TIM5
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

112 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM6_STOP
)

116 
	#__HAL_DBGMCU_FREEZE_TIM6
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

117 
	#__HAL_DBGMCU_UNFREEZE_TIM6
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

120 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM7_STOP
)

124 
	#__HAL_DBGMCU_FREEZE_TIM7
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

125 
	#__HAL_DBGMCU_UNFREEZE_TIM7
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

128 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM12_STOP
)

132 
	#__HAL_DBGMCU_FREEZE_TIM12
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

133 
	#__HAL_DBGMCU_UNFREEZE_TIM12
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

136 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM13_STOP
)

140 
	#__HAL_DBGMCU_FREEZE_TIM13
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

141 
	#__HAL_DBGMCU_UNFREEZE_TIM13
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

144 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM14_STOP
)

148 
	#__HAL_DBGMCU_FREEZE_TIM14
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

149 
	#__HAL_DBGMCU_UNFREEZE_TIM14
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

155 
	#__HAL_DBGMCU_FREEZE_WWDG
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

156 
	#__HAL_DBGMCU_UNFREEZE_WWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

161 
	#__HAL_DBGMCU_FREEZE_IWDG
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

162 
	#__HAL_DBGMCU_UNFREEZE_IWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

167 
	#__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

168 
	#__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

170 #i‡
deföed
 (
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

174 
	#__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

175 
	#__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

178 #i‡
deföed
 (
DBGMCU_CR_DBG_CAN1_STOP
)

182 
	#__HAL_DBGMCU_FREEZE_CAN1
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

183 
	#__HAL_DBGMCU_UNFREEZE_CAN1
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

186 #i‡
deföed
 (
DBGMCU_CR_DBG_CAN2_STOP
)

190 
	#__HAL_DBGMCU_FREEZE_CAN2
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

191 
	#__HAL_DBGMCU_UNFREEZE_CAN2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

195 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM1_STOP
)

199 
	#__HAL_DBGMCU_FREEZE_TIM1
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

200 
	#__HAL_DBGMCU_UNFREEZE_TIM1
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

203 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM8_STOP
)

207 
	#__HAL_DBGMCU_FREEZE_TIM8
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

208 
	#__HAL_DBGMCU_UNFREEZE_TIM8
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

211 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM9_STOP
)

215 
	#__HAL_DBGMCU_FREEZE_TIM9
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

216 
	#__HAL_DBGMCU_UNFREEZE_TIM9
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

219 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM10_STOP
)

223 
	#__HAL_DBGMCU_FREEZE_TIM10
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

224 
	#__HAL_DBGMCU_UNFREEZE_TIM10
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

227 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM11_STOP
)

231 
	#__HAL_DBGMCU_FREEZE_TIM11
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

232 
	#__HAL_DBGMCU_UNFREEZE_TIM11
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

236 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM15_STOP
)

240 
	#__HAL_DBGMCU_FREEZE_TIM15
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

241 
	#__HAL_DBGMCU_UNFREEZE_TIM15
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

244 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM16_STOP
)

248 
	#__HAL_DBGMCU_FREEZE_TIM16
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

249 
	#__HAL_DBGMCU_UNFREEZE_TIM16
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

252 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM17_STOP
)

256 
	#__HAL_DBGMCU_FREEZE_TIM17
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

257 
	#__HAL_DBGMCU_UNFREEZE_TIM17
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

267 
	#IS_TICKFREQ
(
FREQ
Ë(((FREQË=
HAL_TICK_FREQ_10HZ
) || \

268 ((
FREQ
Ë=
HAL_TICK_FREQ_100HZ
) || \

269 ((
FREQ
Ë=
HAL_TICK_FREQ_1KHZ
))

	)

282 
HAL_SètusTy≥Def
 
HAL_Inô
();

283 
HAL_SètusTy≥Def
 
HAL_DeInô
();

284 
HAL_M•Inô
();

285 
HAL_M•DeInô
();

286 
HAL_SètusTy≥Def
 
HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
);

295 
HAL_IncTick
();

296 
HAL_Dñay
(
uöt32_t
 
Dñay
);

297 
uöt32_t
 
HAL_GëTick
();

298 
uöt32_t
 
HAL_GëTickPrio
();

299 
HAL_SètusTy≥Def
 
HAL_SëTickFªq
(
HAL_TickFªqTy≥Def
 
Fªq
);

300 
HAL_TickFªqTy≥Def
 
HAL_GëTickFªq
();

301 
HAL_Su•ídTick
();

302 
HAL_ResumeTick
();

303 
uöt32_t
 
HAL_GëHÆVîsi⁄
();

304 
uöt32_t
 
HAL_GëREVID
();

305 
uöt32_t
 
HAL_GëDEVID
();

306 
uöt32_t
 
HAL_GëUIDw0
();

307 
uöt32_t
 
HAL_GëUIDw1
();

308 
uöt32_t
 
HAL_GëUIDw2
();

309 
HAL_DBGMCU_E«bÀDBGSÀïMode
();

310 
HAL_DBGMCU_DißbÀDBGSÀïMode
();

311 
HAL_DBGMCU_E«bÀDBGSt›Mode
();

312 
HAL_DBGMCU_DißbÀDBGSt›Mode
();

313 
HAL_DBGMCU_E«bÀDBGSèndbyMode
();

314 
HAL_DBGMCU_DißbÀDBGSèndbyMode
();

351 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h

20 #i‚de‡
__STM32F1xx_HAL_CORTEX_H


21 
	#__STM32F1xx_HAL_CORTEX_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

42 #i‡(
__MPU_PRESENT
 == 1U)

49 
uöt8_t
 
E«bÀ
;

51 
uöt8_t
 
Numbî
;

53 
uöt32_t
 
Ba£Addªss
;

54 
uöt8_t
 
Size
;

56 
uöt8_t
 
SubRegi⁄DißbÀ
;

58 
uöt8_t
 
Ty≥ExtFõld
;

60 
uöt8_t
 
Ac˚ssPîmissi⁄
;

62 
uöt8_t
 
DißbÀExec
;

64 
uöt8_t
 
IsSh¨óbÀ
;

66 
uöt8_t
 
IsCachóbÀ
;

68 
uöt8_t
 
IsBuf„øbÀ
;

70 }
	tMPU_Regi⁄_InôTy≥Def
;

89 
	#NVIC_PRIORITYGROUP_0
 0x00000007U

	)

91 
	#NVIC_PRIORITYGROUP_1
 0x00000006U

	)

93 
	#NVIC_PRIORITYGROUP_2
 0x00000005U

	)

95 
	#NVIC_PRIORITYGROUP_3
 0x00000004U

	)

97 
	#NVIC_PRIORITYGROUP_4
 0x00000003U

	)

106 
	#SYSTICK_CLKSOURCE_HCLK_DIV8
 0x00000000U

	)

107 
	#SYSTICK_CLKSOURCE_HCLK
 0x00000004U

	)

113 #i‡(
__MPU_PRESENT
 == 1)

117 
	#MPU_HFNMI_PRIVDEF_NONE
 0x00000000U

	)

118 
	#MPU_HARDFAULT_NMI
 
MPU_CTRL_HFNMIENA_Msk


	)

119 
	#MPU_PRIVILEGED_DEFAULT
 
MPU_CTRL_PRIVDEFENA_Msk


	)

120 
	#MPU_HFNMI_PRIVDEF
 (
MPU_CTRL_HFNMIENA_Msk
 | 
MPU_CTRL_PRIVDEFENA_Msk
)

	)

129 
	#MPU_REGION_ENABLE
 ((
uöt8_t
)0x01)

	)

130 
	#MPU_REGION_DISABLE
 ((
uöt8_t
)0x00)

	)

138 
	#MPU_INSTRUCTION_ACCESS_ENABLE
 ((
uöt8_t
)0x00)

	)

139 
	#MPU_INSTRUCTION_ACCESS_DISABLE
 ((
uöt8_t
)0x01)

	)

147 
	#MPU_ACCESS_SHAREABLE
 ((
uöt8_t
)0x01)

	)

148 
	#MPU_ACCESS_NOT_SHAREABLE
 ((
uöt8_t
)0x00)

	)

156 
	#MPU_ACCESS_CACHEABLE
 ((
uöt8_t
)0x01)

	)

157 
	#MPU_ACCESS_NOT_CACHEABLE
 ((
uöt8_t
)0x00)

	)

165 
	#MPU_ACCESS_BUFFERABLE
 ((
uöt8_t
)0x01)

	)

166 
	#MPU_ACCESS_NOT_BUFFERABLE
 ((
uöt8_t
)0x00)

	)

174 
	#MPU_TEX_LEVEL0
 ((
uöt8_t
)0x00)

	)

175 
	#MPU_TEX_LEVEL1
 ((
uöt8_t
)0x01)

	)

176 
	#MPU_TEX_LEVEL2
 ((
uöt8_t
)0x02)

	)

184 
	#MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04)

	)

185 
	#MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05)

	)

186 
	#MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06)

	)

187 
	#MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07)

	)

188 
	#MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08)

	)

189 
	#MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09)

	)

190 
	#MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0A)

	)

191 
	#MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0B)

	)

192 
	#MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0C)

	)

193 
	#MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0D)

	)

194 
	#MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0E)

	)

195 
	#MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0F)

	)

196 
	#MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10)

	)

197 
	#MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11)

	)

198 
	#MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12)

	)

199 
	#MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13)

	)

200 
	#MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14)

	)

201 
	#MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15)

	)

202 
	#MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16)

	)

203 
	#MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17)

	)

204 
	#MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18)

	)

205 
	#MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19)

	)

206 
	#MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1A)

	)

207 
	#MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1B)

	)

208 
	#MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1C)

	)

209 
	#MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1D)

	)

210 
	#MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1E)

	)

211 
	#MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1F)

	)

219 
	#MPU_REGION_NO_ACCESS
 ((
uöt8_t
)0x00)

	)

220 
	#MPU_REGION_PRIV_RW
 ((
uöt8_t
)0x01)

	)

221 
	#MPU_REGION_PRIV_RW_URO
 ((
uöt8_t
)0x02)

	)

222 
	#MPU_REGION_FULL_ACCESS
 ((
uöt8_t
)0x03)

	)

223 
	#MPU_REGION_PRIV_RO
 ((
uöt8_t
)0x05)

	)

224 
	#MPU_REGION_PRIV_RO_URO
 ((
uöt8_t
)0x06)

	)

232 
	#MPU_REGION_NUMBER0
 ((
uöt8_t
)0x00)

	)

233 
	#MPU_REGION_NUMBER1
 ((
uöt8_t
)0x01)

	)

234 
	#MPU_REGION_NUMBER2
 ((
uöt8_t
)0x02)

	)

235 
	#MPU_REGION_NUMBER3
 ((
uöt8_t
)0x03)

	)

236 
	#MPU_REGION_NUMBER4
 ((
uöt8_t
)0x04)

	)

237 
	#MPU_REGION_NUMBER5
 ((
uöt8_t
)0x05)

	)

238 
	#MPU_REGION_NUMBER6
 ((
uöt8_t
)0x06)

	)

239 
	#MPU_REGION_NUMBER7
 ((
uöt8_t
)0x07)

	)

261 
HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
);

262 
HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
);

263 
HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
);

264 
HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
);

265 
HAL_NVIC_Sy°emRe£t
();

266 
uöt32_t
 
HAL_SYSTICK_C⁄fig
(uöt32_à
TicksNumb
);

275 
uöt32_t
 
HAL_NVIC_GëPri‹ôyGroupög
();

276 
HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
);

277 
uöt32_t
 
HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

278 
HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

279 
HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
);

280 
uöt32_t
 
HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
);

281 
HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
);

282 
HAL_SYSTICK_IRQH™dÀr
();

283 
HAL_SYSTICK_CÆlback
();

285 #i‡(
__MPU_PRESENT
 == 1U)

286 
HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
);

287 
HAL_MPU_DißbÀ
();

288 
HAL_MPU_E«bÀRegi⁄
(
uöt32_t
 
Regi⁄Numbî
);

289 
HAL_MPU_DißbÀRegi⁄
(
uöt32_t
 
Regi⁄Numbî
);

290 
HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
);

307 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_PRIORITYGROUP_0
) || \

308 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_1
) || \

309 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_2
) || \

310 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_3
) || \

311 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_4
))

	)

313 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10U)

	)

315 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10U)

	)

317 
	#IS_NVIC_DEVICE_IRQ
(
IRQ
Ë((IRQË>(
IRQn_Ty≥
)0x00U)

	)

319 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SYSTICK_CLKSOURCE_HCLK
) || \

320 ((
SOURCE
Ë=
SYSTICK_CLKSOURCE_HCLK_DIV8
))

	)

322 #i‡(
__MPU_PRESENT
 == 1U)

323 
	#IS_MPU_REGION_ENABLE
(
STATE
Ë(((STATEË=
MPU_REGION_ENABLE
) || \

324 ((
STATE
Ë=
MPU_REGION_DISABLE
))

	)

326 
	#IS_MPU_INSTRUCTION_ACCESS
(
STATE
Ë(((STATEË=
MPU_INSTRUCTION_ACCESS_ENABLE
) || \

327 ((
STATE
Ë=
MPU_INSTRUCTION_ACCESS_DISABLE
))

	)

329 
	#IS_MPU_ACCESS_SHAREABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_SHAREABLE
) || \

330 ((
STATE
Ë=
MPU_ACCESS_NOT_SHAREABLE
))

	)

332 
	#IS_MPU_ACCESS_CACHEABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_CACHEABLE
) || \

333 ((
STATE
Ë=
MPU_ACCESS_NOT_CACHEABLE
))

	)

335 
	#IS_MPU_ACCESS_BUFFERABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_BUFFERABLE
) || \

336 ((
STATE
Ë=
MPU_ACCESS_NOT_BUFFERABLE
))

	)

338 
	#IS_MPU_TEX_LEVEL
(
TYPE
Ë(((TYPEË=
MPU_TEX_LEVEL0
) || \

339 ((
TYPE
Ë=
MPU_TEX_LEVEL1
) || \

340 ((
TYPE
Ë=
MPU_TEX_LEVEL2
))

	)

342 
	#IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
TYPE
Ë(((TYPEË=
MPU_REGION_NO_ACCESS
) || \

343 ((
TYPE
Ë=
MPU_REGION_PRIV_RW
) || \

344 ((
TYPE
Ë=
MPU_REGION_PRIV_RW_URO
) || \

345 ((
TYPE
Ë=
MPU_REGION_FULL_ACCESS
) || \

346 ((
TYPE
Ë=
MPU_REGION_PRIV_RO
) || \

347 ((
TYPE
Ë=
MPU_REGION_PRIV_RO_URO
))

	)

349 
	#IS_MPU_REGION_NUMBER
(
NUMBER
Ë(((NUMBERË=
MPU_REGION_NUMBER0
) || \

350 ((
NUMBER
Ë=
MPU_REGION_NUMBER1
) || \

351 ((
NUMBER
Ë=
MPU_REGION_NUMBER2
) || \

352 ((
NUMBER
Ë=
MPU_REGION_NUMBER3
) || \

353 ((
NUMBER
Ë=
MPU_REGION_NUMBER4
) || \

354 ((
NUMBER
Ë=
MPU_REGION_NUMBER5
) || \

355 ((
NUMBER
Ë=
MPU_REGION_NUMBER6
) || \

356 ((
NUMBER
Ë=
MPU_REGION_NUMBER7
))

	)

358 
	#IS_MPU_REGION_SIZE
(
SIZE
Ë(((SIZEË=
MPU_REGION_SIZE_32B
) || \

359 ((
SIZE
Ë=
MPU_REGION_SIZE_64B
) || \

360 ((
SIZE
Ë=
MPU_REGION_SIZE_128B
) || \

361 ((
SIZE
Ë=
MPU_REGION_SIZE_256B
) || \

362 ((
SIZE
Ë=
MPU_REGION_SIZE_512B
) || \

363 ((
SIZE
Ë=
MPU_REGION_SIZE_1KB
) || \

364 ((
SIZE
Ë=
MPU_REGION_SIZE_2KB
) || \

365 ((
SIZE
Ë=
MPU_REGION_SIZE_4KB
) || \

366 ((
SIZE
Ë=
MPU_REGION_SIZE_8KB
) || \

367 ((
SIZE
Ë=
MPU_REGION_SIZE_16KB
) || \

368 ((
SIZE
Ë=
MPU_REGION_SIZE_32KB
) || \

369 ((
SIZE
Ë=
MPU_REGION_SIZE_64KB
) || \

370 ((
SIZE
Ë=
MPU_REGION_SIZE_128KB
) || \

371 ((
SIZE
Ë=
MPU_REGION_SIZE_256KB
) || \

372 ((
SIZE
Ë=
MPU_REGION_SIZE_512KB
) || \

373 ((
SIZE
Ë=
MPU_REGION_SIZE_1MB
) || \

374 ((
SIZE
Ë=
MPU_REGION_SIZE_2MB
) || \

375 ((
SIZE
Ë=
MPU_REGION_SIZE_4MB
) || \

376 ((
SIZE
Ë=
MPU_REGION_SIZE_8MB
) || \

377 ((
SIZE
Ë=
MPU_REGION_SIZE_16MB
) || \

378 ((
SIZE
Ë=
MPU_REGION_SIZE_32MB
) || \

379 ((
SIZE
Ë=
MPU_REGION_SIZE_64MB
) || \

380 ((
SIZE
Ë=
MPU_REGION_SIZE_128MB
) || \

381 ((
SIZE
Ë=
MPU_REGION_SIZE_256MB
) || \

382 ((
SIZE
Ë=
MPU_REGION_SIZE_512MB
) || \

383 ((
SIZE
Ë=
MPU_REGION_SIZE_1GB
) || \

384 ((
SIZE
Ë=
MPU_REGION_SIZE_2GB
) || \

385 ((
SIZE
Ë=
MPU_REGION_SIZE_4GB
))

	)

387 
	#IS_MPU_SUB_REGION_DISABLE
(
SUBREGION
Ë((SUBREGIONË< (
uöt16_t
)0x00FF)

	)

404 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h

21 #i‚de‡
__STM32F1xx_HAL_DEF


22 
	#__STM32F1xx_HAL_DEF


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx.h
"

30 
	~"Legacy/°m32_hÆ_Àgacy.h
"

31 
	~<°ddef.h
>

40 
HAL_OK
 = 0x00U,

41 
HAL_ERROR
 = 0x01U,

42 
HAL_BUSY
 = 0x02U,

43 
HAL_TIMEOUT
 = 0x03U

44 } 
	tHAL_SètusTy≥Def
;

51 
HAL_UNLOCKED
 = 0x00U,

52 
HAL_LOCKED
 = 0x01U

53 } 
	tHAL_LockTy≥Def
;

56 
	#HAL_MAX_DELAY
 0xFFFFFFFFU

	)

58 
	#HAL_IS_BIT_SET
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë!0U)

	)

59 
	#HAL_IS_BIT_CLR
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë=0U)

	)

61 
	#__HAL_LINKDMA
(
__HANDLE__
, 
__PPP_DMA_FIELD__
, 
__DMA_HANDLE__
) \

63 (
__HANDLE__
)->
__PPP_DMA_FIELD__
 = &(
__DMA_HANDLE__
); \

64 (
__DMA_HANDLE__
).
P¨ít
 = (
__HANDLE__
); \

65 } 0U)

	)

67 #i‡!
deföed
(
UNUSED
)

68 
	#UNUSED
(
X
Ë()X

	)

86 
	#__HAL_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 0U)

	)

88 #i‡(
USE_RTOS
 == 1U)

92 
	#__HAL_LOCK
(
__HANDLE__
) \

94 if((
__HANDLE__
)->
Lock
 =
HAL_LOCKED
) \

96  
HAL_BUSY
; \

100 (
__HANDLE__
)->
Lock
 = 
HAL_LOCKED
; \

102 }0U)

	)

104 
	#__HAL_UNLOCK
(
__HANDLE__
) \

106 (
__HANDLE__
)->
Lock
 = 
HAL_UNLOCKED
; \

107 }0U)

	)

110 #i‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

111 #i‚de‡
__wók


112 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

114 #i‚de‡
__∑cked


115 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

117 #ñi‡
deföed
 ( 
__GNUC__
 ) && !deföed (
__CC_ARM
)

118 #i‚de‡
__wók


119 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

121 #i‚de‡
__∑cked


122 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

128 #i‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

129 #i‚de‡
__ALIGN_BEGIN


130 
	#__ALIGN_BEGIN


	)

132 #i‚de‡
__ALIGN_END


133 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

135 #ñi‡
deföed
 ( 
__GNUC__
 ) && !deföed (
__CC_ARM
)

136 #i‚de‡
__ALIGN_END


137 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

139 #i‚de‡
__ALIGN_BEGIN


140 
	#__ALIGN_BEGIN


	)

143 #i‚de‡
__ALIGN_END


144 
	#__ALIGN_END


	)

146 #i‚de‡
__ALIGN_BEGIN


147 #i‡
deföed
 (
__CC_ARM
)

148 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

149 #ñi‡
deföed
 (
__ICCARM__
)

150 
	#__ALIGN_BEGIN


	)

159 #i‡
deföed
 ( 
__CC_ARM
 ) || (deföed (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050))

169 
	#__RAM_FUNC


	)

171 #ñi‡
deföed
 ( 
__ICCARM__
 )

176 
	#__RAM_FUNC
 
__ømfunc


	)

178 #ñi‡
deföed
 ( 
__GNUC__
 )

184 
	#__RAM_FUNC
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

191 #i‡
deföed
 ( 
__CC_ARM
 ) || (deföed (
__ARMCC_VERSION
Ë&& (__ARMCC_VERSION >6010050)Ë|| deföed ( 
__GNUC__
 )

195 
	#__NOINLINE
 
	`__©åibuã__
 ( (
noölöe
Ë)

	)

197 #ñi‡
deföed
 ( 
__ICCARM__
 )

201 
	#__NOINLINE
 
	`_Pøgma
("›timizêno_ölöe")

	)

205 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h

20 #i‚de‡
__STM32F1xx_HAL_DMA_H


21 
	#__STM32F1xx_HAL_DMA_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

49 
uöt32_t
 
Dúe˘i⁄
;

53 
uöt32_t
 
PîùhInc
;

56 
uöt32_t
 
MemInc
;

59 
uöt32_t
 
PîùhD©aAlignmít
;

62 
uöt32_t
 
MemD©aAlignmít
;

65 
uöt32_t
 
Mode
;

70 
uöt32_t
 
Pri‹ôy
;

72 } 
	tDMA_InôTy≥Def
;

79 
HAL_DMA_STATE_RESET
 = 0x00U,

80 
HAL_DMA_STATE_READY
 = 0x01U,

81 
HAL_DMA_STATE_BUSY
 = 0x02U,

82 
HAL_DMA_STATE_TIMEOUT
 = 0x03U

83 }
	tHAL_DMA_SèãTy≥Def
;

90 
HAL_DMA_FULL_TRANSFER
 = 0x00U,

91 
HAL_DMA_HALF_TRANSFER
 = 0x01U

92 }
	tHAL_DMA_LevñCom∂ëeTy≥Def
;

99 
HAL_DMA_XFER_CPLT_CB_ID
 = 0x00U,

100 
HAL_DMA_XFER_HALFCPLT_CB_ID
 = 0x01U,

101 
HAL_DMA_XFER_ERROR_CB_ID
 = 0x02U,

102 
HAL_DMA_XFER_ABORT_CB_ID
 = 0x03U,

103 
HAL_DMA_XFER_ALL_CB_ID
 = 0x04U

105 }
	tHAL_DMA_CÆlbackIDTy≥Def
;

110 
	s__DMA_H™dÀTy≥Def


112 
DMA_Ch™√l_Ty≥Def
 *
In°™˚
;

114 
DMA_InôTy≥Def
 
Inô
;

116 
HAL_LockTy≥Def
 
Lock
;

118 
__IO
 
HAL_DMA_SèãTy≥Def
 
Sèã
;

120 *
P¨ít
;

122 (* 
X„rC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

124 (* 
X„rHÆfC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

126 (* 
X„rEº‹CÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

128 (* 
X„rAb‹tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

130 
__IO
 
uöt32_t
 
Eº‹Code
;

132 
DMA_Ty≥Def
 *
DmaBa£Addªss
;

134 
uöt32_t
 
Ch™√lIndex
;

136 } 
	tDMA_H™dÀTy≥Def
;

150 
	#HAL_DMA_ERROR_NONE
 0x00000000U

	)

151 
	#HAL_DMA_ERROR_TE
 0x00000001U

	)

152 
	#HAL_DMA_ERROR_NO_XFER
 0x00000004U

	)

153 
	#HAL_DMA_ERROR_TIMEOUT
 0x00000020U

	)

154 
	#HAL_DMA_ERROR_NOT_SUPPORTED
 0x00000100U

	)

162 
	#DMA_PERIPH_TO_MEMORY
 0x00000000U

	)

163 
	#DMA_MEMORY_TO_PERIPH
 ((
uöt32_t
)
DMA_CCR_DIR
Ë

	)

164 
	#DMA_MEMORY_TO_MEMORY
 ((
uöt32_t
)
DMA_CCR_MEM2MEM
Ë

	)

173 
	#DMA_PINC_ENABLE
 ((
uöt32_t
)
DMA_CCR_PINC
Ë

	)

174 
	#DMA_PINC_DISABLE
 0x00000000U

	)

182 
	#DMA_MINC_ENABLE
 ((
uöt32_t
)
DMA_CCR_MINC
Ë

	)

183 
	#DMA_MINC_DISABLE
 0x00000000U

	)

191 
	#DMA_PDATAALIGN_BYTE
 0x00000000U

	)

192 
	#DMA_PDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_CCR_PSIZE_0
Ë

	)

193 
	#DMA_PDATAALIGN_WORD
 ((
uöt32_t
)
DMA_CCR_PSIZE_1
Ë

	)

201 
	#DMA_MDATAALIGN_BYTE
 0x00000000U

	)

202 
	#DMA_MDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_CCR_MSIZE_0
Ë

	)

203 
	#DMA_MDATAALIGN_WORD
 ((
uöt32_t
)
DMA_CCR_MSIZE_1
Ë

	)

211 
	#DMA_NORMAL
 0x00000000U

	)

212 
	#DMA_CIRCULAR
 ((
uöt32_t
)
DMA_CCR_CIRC
Ë

	)

220 
	#DMA_PRIORITY_LOW
 0x00000000U

	)

221 
	#DMA_PRIORITY_MEDIUM
 ((
uöt32_t
)
DMA_CCR_PL_0
Ë

	)

222 
	#DMA_PRIORITY_HIGH
 ((
uöt32_t
)
DMA_CCR_PL_1
Ë

	)

223 
	#DMA_PRIORITY_VERY_HIGH
 ((
uöt32_t
)
DMA_CCR_PL
Ë

	)

232 
	#DMA_IT_TC
 ((
uöt32_t
)
DMA_CCR_TCIE
)

	)

233 
	#DMA_IT_HT
 ((
uöt32_t
)
DMA_CCR_HTIE
)

	)

234 
	#DMA_IT_TE
 ((
uöt32_t
)
DMA_CCR_TEIE
)

	)

242 
	#DMA_FLAG_GL1
 0x00000001U

	)

243 
	#DMA_FLAG_TC1
 0x00000002U

	)

244 
	#DMA_FLAG_HT1
 0x00000004U

	)

245 
	#DMA_FLAG_TE1
 0x00000008U

	)

246 
	#DMA_FLAG_GL2
 0x00000010U

	)

247 
	#DMA_FLAG_TC2
 0x00000020U

	)

248 
	#DMA_FLAG_HT2
 0x00000040U

	)

249 
	#DMA_FLAG_TE2
 0x00000080U

	)

250 
	#DMA_FLAG_GL3
 0x00000100U

	)

251 
	#DMA_FLAG_TC3
 0x00000200U

	)

252 
	#DMA_FLAG_HT3
 0x00000400U

	)

253 
	#DMA_FLAG_TE3
 0x00000800U

	)

254 
	#DMA_FLAG_GL4
 0x00001000U

	)

255 
	#DMA_FLAG_TC4
 0x00002000U

	)

256 
	#DMA_FLAG_HT4
 0x00004000U

	)

257 
	#DMA_FLAG_TE4
 0x00008000U

	)

258 
	#DMA_FLAG_GL5
 0x00010000U

	)

259 
	#DMA_FLAG_TC5
 0x00020000U

	)

260 
	#DMA_FLAG_HT5
 0x00040000U

	)

261 
	#DMA_FLAG_TE5
 0x00080000U

	)

262 
	#DMA_FLAG_GL6
 0x00100000U

	)

263 
	#DMA_FLAG_TC6
 0x00200000U

	)

264 
	#DMA_FLAG_HT6
 0x00400000U

	)

265 
	#DMA_FLAG_TE6
 0x00800000U

	)

266 
	#DMA_FLAG_GL7
 0x01000000U

	)

267 
	#DMA_FLAG_TC7
 0x02000000U

	)

268 
	#DMA_FLAG_HT7
 0x04000000U

	)

269 
	#DMA_FLAG_TE7
 0x08000000U

	)

288 
	#__HAL_DMA_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DMA_STATE_RESET
)

	)

295 
	#__HAL_DMA_ENABLE
(
__HANDLE__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CCR
, 
DMA_CCR_EN
))

	)

302 
	#__HAL_DMA_DISABLE
(
__HANDLE__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CCR
, 
DMA_CCR_EN
))

	)

317 
	#__HAL_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CCR
, (__INTERRUPT__)))

	)

329 
	#__HAL_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CCR
 , (__INTERRUPT__)))

	)

341 
	#__HAL_DMA_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CCR
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

348 
	#__HAL_DMA_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CNDTR
)

	)

355 
	~"°m32f1xx_hÆ_dma_ex.h
"

366 
HAL_SètusTy≥Def
 
HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
);

367 
HAL_SètusTy≥Def
 
HAL_DMA_DeInô
 (
DMA_H™dÀTy≥Def
 *
hdma
);

376 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ
 (
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

377 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

378 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

379 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
);

380 
HAL_SètusTy≥Def
 
HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
);

381 
HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
);

382 
HAL_SètusTy≥Def
 
HAL_DMA_Regi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
, (* 
pCÆlback
)–DMA_H™dÀTy≥De‡* 
_hdma
));

383 
HAL_SètusTy≥Def
 
HAL_DMA_UnRegi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
);

393 
HAL_DMA_SèãTy≥Def
 
HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
);

394 
uöt32_t
 
HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

408 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_PERIPH_TO_MEMORY
 ) || \

409 ((
DIRECTION
Ë=
DMA_MEMORY_TO_PERIPH
) || \

410 ((
DIRECTION
Ë=
DMA_MEMORY_TO_MEMORY
))

	)

412 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1UË&& ((SIZEË< 0x10000U))

	)

414 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PINC_ENABLE
) || \

415 ((
STATE
Ë=
DMA_PINC_DISABLE
))

	)

417 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_MINC_ENABLE
) || \

418 ((
STATE
Ë=
DMA_MINC_DISABLE
))

	)

420 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PDATAALIGN_BYTE
) || \

421 ((
SIZE
Ë=
DMA_PDATAALIGN_HALFWORD
) || \

422 ((
SIZE
Ë=
DMA_PDATAALIGN_WORD
))

	)

424 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_MDATAALIGN_BYTE
) || \

425 ((
SIZE
Ë=
DMA_MDATAALIGN_HALFWORD
) || \

426 ((
SIZE
Ë=
DMA_MDATAALIGN_WORD
 ))

	)

428 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_NORMAL
 ) || \

429 ((
MODE
Ë=
DMA_CIRCULAR
))

	)

431 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_PRIORITY_LOW
 ) || \

432 ((
PRIORITY
Ë=
DMA_PRIORITY_MEDIUM
) || \

433 ((
PRIORITY
Ë=
DMA_PRIORITY_HIGH
) || \

434 ((
PRIORITY
Ë=
DMA_PRIORITY_VERY_HIGH
))

	)

450 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma_ex.h

20 #i‚de‡
__STM32F1xx_HAL_DMA_EX_H


21 
	#__STM32F1xx_HAL_DMA_EX_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

45 #i‡
deföed
 (
STM32F100xE
Ë|| deföed (
STM32F101xE
Ë|| deföed (
STM32F101xG
Ë|| deföed (
STM32F103xE
) || \

46 
deföed
 (
STM32F103xG
Ë|| deföed (
STM32F105xC
Ë|| deföed (
STM32F107xC
)

56 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

57 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

58 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

59 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

60 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

61 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

62 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

63 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_TC7
 :\

64 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

65 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

66 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

67 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

68 
DMA_FLAG_TC5
)

	)

75 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

76 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

77 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

78 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

79 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

80 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

81 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

82 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_HT7
 :\

83 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

84 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

85 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

86 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

87 
DMA_FLAG_HT5
)

	)

94 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

95 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

96 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

97 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

98 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

99 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

100 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

101 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_TE7
 :\

102 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

103 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

104 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

105 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

106 
DMA_FLAG_TE5
)

	)

113 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

114 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_GL1
 :\

115 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_GL2
 :\

116 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_GL3
 :\

117 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_GL4
 :\

118 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_GL5
 :\

119 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_GL6
 :\

120 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_GL7
 :\

121 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_GL1
 :\

122 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_GL2
 :\

123 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_GL3
 :\

124 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_GL4
 :\

125 
DMA_FLAG_GL5
)

	)

138 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
)\

139 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Ch™√l7
)? (
DMA2
->
ISR
 & (
__FLAG__
)) :\

140 (
DMA1
->
ISR
 & (
__FLAG__
)))

	)

153 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

154 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Ch™√l7
)? (
DMA2
->
IFCR
 = (
__FLAG__
)) :\

155 (
DMA1
->
IFCR
 = (
__FLAG__
)))

	)

171 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

172 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

173 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

174 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

175 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

176 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

177 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

178 
DMA_FLAG_TC7
)

	)

185 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

186 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

187 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

188 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

189 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

190 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

191 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

192 
DMA_FLAG_HT7
)

	)

199 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

200 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

201 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

202 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

203 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

204 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

205 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

206 
DMA_FLAG_TE7
)

	)

213 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

214 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_GL1
 :\

215 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_GL2
 :\

216 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_GL3
 :\

217 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_GL4
 :\

218 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_GL5
 :\

219 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_GL6
 :\

220 
DMA_FLAG_GL7
)

	)

235 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
ISR
 & (__FLAG__))

	)

249 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
IFCR
 = (__FLAG__))

	)

269 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_exti.h

20 #i‚de‡
STM32F1xx_HAL_EXTI_H


21 
	#STM32F1xx_HAL_EXTI_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

50 
HAL_EXTI_COMMON_CB_ID
 = 0x00U

51 } 
	tEXTI_CÆlbackIDTy≥Def
;

58 
uöt32_t
 
Löe
;

59 (* 
PídögCÆlback
)();

60 } 
	tEXTI_H™dÀTy≥Def
;

67 
uöt32_t
 
Löe
;

69 
uöt32_t
 
Mode
;

71 
uöt32_t
 
Triggî
;

73 
uöt32_t
 
GPIOSñ
;

76 } 
	tEXTI_C⁄figTy≥Def
;

90 
	#EXTI_LINE_0
 (
EXTI_GPIO
 | 0x00uË

	)

91 
	#EXTI_LINE_1
 (
EXTI_GPIO
 | 0x01uË

	)

92 
	#EXTI_LINE_2
 (
EXTI_GPIO
 | 0x02uË

	)

93 
	#EXTI_LINE_3
 (
EXTI_GPIO
 | 0x03uË

	)

94 
	#EXTI_LINE_4
 (
EXTI_GPIO
 | 0x04uË

	)

95 
	#EXTI_LINE_5
 (
EXTI_GPIO
 | 0x05uË

	)

96 
	#EXTI_LINE_6
 (
EXTI_GPIO
 | 0x06uË

	)

97 
	#EXTI_LINE_7
 (
EXTI_GPIO
 | 0x07uË

	)

98 
	#EXTI_LINE_8
 (
EXTI_GPIO
 | 0x08uË

	)

99 
	#EXTI_LINE_9
 (
EXTI_GPIO
 | 0x09uË

	)

100 
	#EXTI_LINE_10
 (
EXTI_GPIO
 | 0x0AuË

	)

101 
	#EXTI_LINE_11
 (
EXTI_GPIO
 | 0x0BuË

	)

102 
	#EXTI_LINE_12
 (
EXTI_GPIO
 | 0x0CuË

	)

103 
	#EXTI_LINE_13
 (
EXTI_GPIO
 | 0x0DuË

	)

104 
	#EXTI_LINE_14
 (
EXTI_GPIO
 | 0x0EuË

	)

105 
	#EXTI_LINE_15
 (
EXTI_GPIO
 | 0x0FuË

	)

106 
	#EXTI_LINE_16
 (
EXTI_CONFIG
 | 0x10uË

	)

107 
	#EXTI_LINE_17
 (
EXTI_CONFIG
 | 0x11uË

	)

108 #i‡
deföed
(
EXTI_IMR_IM18
)

109 
	#EXTI_LINE_18
 (
EXTI_CONFIG
 | 0x12uË

	)

111 #i‡
deföed
(
EXTI_IMR_IM19
)

112 
	#EXTI_LINE_19
 (
EXTI_CONFIG
 | 0x13uË

	)

122 
	#EXTI_MODE_NONE
 0x00000000u

	)

123 
	#EXTI_MODE_INTERRUPT
 0x00000001u

	)

124 
	#EXTI_MODE_EVENT
 0x00000002u

	)

132 
	#EXTI_TRIGGER_NONE
 0x00000000u

	)

133 
	#EXTI_TRIGGER_RISING
 0x00000001u

	)

134 
	#EXTI_TRIGGER_FALLING
 0x00000002u

	)

135 
	#EXTI_TRIGGER_RISING_FALLING
 (
EXTI_TRIGGER_RISING
 | 
EXTI_TRIGGER_FALLING
)

	)

144 
	#EXTI_GPIOA
 0x00000000u

	)

145 
	#EXTI_GPIOB
 0x00000001u

	)

146 
	#EXTI_GPIOC
 0x00000002u

	)

147 
	#EXTI_GPIOD
 0x00000003u

	)

148 #i‡
deföed
 (
GPIOE
)

149 
	#EXTI_GPIOE
 0x00000004u

	)

151 #i‡
deföed
 (
GPIOF
)

152 
	#EXTI_GPIOF
 0x00000005u

	)

154 #i‡
deföed
 (
GPIOG
)

155 
	#EXTI_GPIOG
 0x00000006u

	)

181 
	#EXTI_PROPERTY_SHIFT
 24u

	)

182 
	#EXTI_CONFIG
 (0x02uL << 
EXTI_PROPERTY_SHIFT
)

	)

183 
	#EXTI_GPIO
 ((0x04uL << 
EXTI_PROPERTY_SHIFT
Ë| 
EXTI_CONFIG
)

	)

184 
	#EXTI_PROPERTY_MASK
 (
EXTI_CONFIG
 | 
EXTI_GPIO
)

	)

189 
	#EXTI_PIN_MASK
 0x0000001Fu

	)

194 
	#EXTI_MODE_MASK
 (
EXTI_MODE_EVENT
 | 
EXTI_MODE_INTERRUPT
)

	)

199 
	#EXTI_TRIGGER_MASK
 (
EXTI_TRIGGER_RISING
 | 
EXTI_TRIGGER_FALLING
)

	)

204 #i‡
deföed
(
EXTI_IMR_IM19
)

205 
	#EXTI_LINE_NB
 20UL

	)

206 #ñi‡
deföed
(
EXTI_IMR_IM18
)

207 
	#EXTI_LINE_NB
 19UL

	)

209 
	#EXTI_LINE_NB
 18UL

	)

219 
	#IS_EXTI_LINE
(
__EXTI_LINE__
Ë((((__EXTI_LINE__Ë& ~(
EXTI_PROPERTY_MASK
 | 
EXTI_PIN_MASK
)) == 0x00u) && \

220 ((((
__EXTI_LINE__
Ë& 
EXTI_PROPERTY_MASK
Ë=
EXTI_CONFIG
) || \

221 (((
__EXTI_LINE__
Ë& 
EXTI_PROPERTY_MASK
Ë=
EXTI_GPIO
)) && \

222 (((
__EXTI_LINE__
Ë& 
EXTI_PIN_MASK
Ë< 
EXTI_LINE_NB
))

	)

224 
	#IS_EXTI_MODE
(
__EXTI_LINE__
Ë((((__EXTI_LINE__Ë& 
EXTI_MODE_MASK
) != 0x00u) && \

225 (((
__EXTI_LINE__
Ë& ~
EXTI_MODE_MASK
Ë=0x00u))

	)

227 
	#IS_EXTI_TRIGGER
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë& ~
EXTI_TRIGGER_MASK
Ë=0x00u)

	)

229 
	#IS_EXTI_PENDING_EDGE
(
__EXTI_LINE__
Ë((__EXTI_LINE__Ë=
EXTI_TRIGGER_RISING_FALLING
)

	)

231 
	#IS_EXTI_CONFIG_LINE
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë& 
EXTI_CONFIG
Ë!0x00u)

	)

233 #i‡
deföed
 (
GPIOG
)

234 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

235 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

236 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

237 ((
__PORT__
Ë=
EXTI_GPIOD
) || \

238 ((
__PORT__
Ë=
EXTI_GPIOE
) || \

239 ((
__PORT__
Ë=
EXTI_GPIOF
) || \

240 ((
__PORT__
Ë=
EXTI_GPIOG
))

	)

241 #ñi‡
deföed
 (
GPIOF
)

242 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

243 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

244 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

245 ((
__PORT__
Ë=
EXTI_GPIOD
) || \

246 ((
__PORT__
Ë=
EXTI_GPIOE
) || \

247 ((
__PORT__
Ë=
EXTI_GPIOF
))

	)

248 #ñi‡
deföed
 (
GPIOE
)

249 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

250 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

251 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

252 ((
__PORT__
Ë=
EXTI_GPIOD
) || \

253 ((
__PORT__
Ë=
EXTI_GPIOE
))

	)

255 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

256 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

257 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

258 ((
__PORT__
Ë=
EXTI_GPIOD
))

	)

261 
	#IS_EXTI_GPIO_PIN
(
__PIN__
Ë((__PIN__Ë< 16u)

	)

278 
HAL_SètusTy≥Def
 
HAL_EXTI_SëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
);

279 
HAL_SètusTy≥Def
 
HAL_EXTI_GëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
);

280 
HAL_SètusTy≥Def
 
HAL_EXTI_CÀ¨C⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
);

281 
HAL_SètusTy≥Def
 
HAL_EXTI_Regi°îCÆlback
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_CÆlbackIDTy≥Def
 
CÆlbackID
, (*
pPídögCb‚
)());

282 
HAL_SètusTy≥Def
 
HAL_EXTI_GëH™dÀ
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
ExtiLöe
);

292 
HAL_EXTI_IRQH™dÀr
(
EXTI_H™dÀTy≥Def
 *
hexti
);

293 
uöt32_t
 
HAL_EXTI_GëPídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, uöt32_à
Edge
);

294 
HAL_EXTI_CÀ¨Pídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
Edge
);

295 
HAL_EXTI_Gíî©eSWI
(
EXTI_H™dÀTy≥Def
 *
hexti
);

313 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash.h

19 #i‚de‡
__STM32F1xx_HAL_FLASH_H


20 
	#__STM32F1xx_HAL_FLASH_H


	)

22 #ifde‡
__˝lu•lus


27 
	~"°m32f1xx_hÆ_def.h
"

40 
	#FLASH_TIMEOUT_VALUE
 50000U

	)

49 
	#IS_FLASH_TYPEPROGRAM
(
VALUE
Ë(((VALUEË=
FLASH_TYPEPROGRAM_HALFWORD
) || \

50 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_WORD
) || \

51 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_DOUBLEWORD
))

	)

53 #i‡ 
deföed
(
FLASH_ACR_LATENCY
)

54 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë(((__LATENCY__Ë=
FLASH_LATENCY_0
) || \

55 ((
__LATENCY__
Ë=
FLASH_LATENCY_1
) || \

56 ((
__LATENCY__
Ë=
FLASH_LATENCY_2
))

	)

59 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë((__LATENCY__Ë=
FLASH_LATENCY_0
)

	)

75 
FLASH_PROC_NONE
 = 0U,

76 
FLASH_PROC_PAGEERASE
 = 1U,

77 
FLASH_PROC_MASSERASE
 = 2U,

78 
FLASH_PROC_PROGRAMHALFWORD
 = 3U,

79 
FLASH_PROC_PROGRAMWORD
 = 4U,

80 
FLASH_PROC_PROGRAMDOUBLEWORD
 = 5U

81 } 
	tFLASH_Pro˚duªTy≥Def
;

88 
__IO
 
FLASH_Pro˚duªTy≥Def
 
Pro˚duªOnGoög
;

90 
__IO
 
uöt32_t
 
D©aRemaöög
;

92 
__IO
 
uöt32_t
 
Addªss
;

94 
__IO
 
uöt64_t
 
D©a
;

96 
HAL_LockTy≥Def
 
Lock
;

98 
__IO
 
uöt32_t
 
Eº‹Code
;

100 } 
	tFLASH_Pro˚ssTy≥Def
;

115 
	#HAL_FLASH_ERROR_NONE
 0x00U

	)

116 
	#HAL_FLASH_ERROR_PROG
 0x01U

	)

117 
	#HAL_FLASH_ERROR_WRP
 0x02U

	)

118 
	#HAL_FLASH_ERROR_OPTV
 0x04U

	)

127 
	#FLASH_TYPEPROGRAM_HALFWORD
 0x01U

	)

128 
	#FLASH_TYPEPROGRAM_WORD
 0x02U

	)

129 
	#FLASH_TYPEPROGRAM_DOUBLEWORD
 0x03U

	)

135 #i‡ 
deföed
(
FLASH_ACR_LATENCY
)

139 
	#FLASH_LATENCY_0
 0x00000000U

	)

140 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_0


	)

141 
	#FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_1


	)

151 
	#FLASH_LATENCY_0
 0x00000000U

	)

180 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_HLFCYA
)

	)

188 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_HLFCYA
))

	)

194 #i‡
deföed
(
FLASH_ACR_LATENCY
)

206 
	#__HAL_FLASH_SET_LATENCY
(
__LATENCY__
Ë(
FLASH
->
ACR
 = (FLASH->ACR&(~
FLASH_ACR_LATENCY
)Ë| (__LATENCY__))

	)

214 
	#__HAL_FLASH_GET_LATENCY
(Ë(
	`READ_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_LATENCY
))

	)

229 
	#__HAL_FLASH_PREFETCH_BUFFER_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
)

	)

235 
	#__HAL_FLASH_PREFETCH_BUFFER_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTBE
))

	)

246 
	~"°m32f1xx_hÆ_Êash_ex.h
"

257 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

258 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

261 
HAL_FLASH_IRQH™dÀr
();

263 
HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

264 
HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

274 
HAL_SètusTy≥Def
 
HAL_FLASH_U∆ock
();

275 
HAL_SètusTy≥Def
 
HAL_FLASH_Lock
();

276 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_U∆ock
();

277 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Lock
();

278 
HAL_FLASH_OB_Launch
();

288 
uöt32_t
 
HAL_FLASH_GëEº‹
();

302 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

303 #i‡
deföed
(
FLASH_BANK2_END
)

304 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄B™k2
(
uöt32_t
 
Timeout
);

319 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash_ex.h

19 #i‚de‡
__STM32F1xx_HAL_FLASH_EX_H


20 
	#__STM32F1xx_HAL_FLASH_EX_H


	)

22 #ifde‡
__˝lu•lus


27 
	~"°m32f1xx_hÆ_def.h
"

41 
	#FLASH_SIZE_DATA_REGISTER
 0x1FFFF7E0U

	)

42 
	#OBR_REG_INDEX
 1U

	)

43 
	#SR_FLAG_MASK
 ((
uöt32_t
)(
FLASH_SR_BSY
 | 
FLASH_SR_PGERR
 | 
FLASH_SR_WRPRTERR
 | 
FLASH_SR_EOP
))

	)

53 
	#IS_FLASH_TYPEERASE
(
VALUE
Ë(((VALUEË=
FLASH_TYPEERASE_PAGES
Ë|| ((VALUEË=
FLASH_TYPEERASE_MASSERASE
))

	)

55 
	#IS_OPTIONBYTE
(
VALUE
Ë(((VALUEË<(
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
 | 
OPTIONBYTE_DATA
)))

	)

57 
	#IS_WRPSTATE
(
VALUE
Ë(((VALUEË=
OB_WRPSTATE_DISABLE
Ë|| ((VALUEË=
OB_WRPSTATE_ENABLE
))

	)

59 
	#IS_OB_RDP_LEVEL
(
LEVEL
Ë(((LEVELË=
OB_RDP_LEVEL_0
Ë|| ((LEVELË=
OB_RDP_LEVEL_1
))

	)

61 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
OB_DATA_ADDRESS_DATA0
Ë|| ((ADDRESSË=
OB_DATA_ADDRESS_DATA1
))

	)

63 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

65 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NO_RST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

67 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NO_RST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

69 #i‡
deföed
(
FLASH_BANK2_END
)

70 
	#IS_OB_BOOT1
(
BOOT1
Ë(((BOOT1Ë=
OB_BOOT1_RESET
Ë|| ((BOOT1Ë=
OB_BOOT1_SET
))

	)

74 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
))

75 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x20UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)- 1 <= 0x08007FFFU) : \

76 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)- 1 <0x08003FFFU))

	)

80 #i‡(
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

81 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x80UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFFU) : \

82 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x40UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0800FFFFU) : \

83 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x20UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x08007FFFU) : \

84 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x08003FFFU))))

	)

88 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
))

89 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x200UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0807FFFFU) : \

90 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x180UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0805FFFFU) : \

91 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x0803FFFFU)))

	)

95 #i‡
deföed
(
FLASH_BANK2_END
)

96 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x400UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x080FFFFFU) : \

97 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x080BFFFFU))

	)

101 #i‡(
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

102 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x100UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0803FFFFU) : \

103 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x80UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFFU) : \

104 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x0800FFFFU)))

	)

107 
	#IS_OB_WRP
(
PAGE
Ë(((PAGEË!0x0000000U))

	)

109 #i‡
deföed
(
FLASH_BANK2_END
)

110 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
) || \

111 ((
BANK
Ë=
FLASH_BANK_2
) || \

112 ((
BANK
Ë=
FLASH_BANK_BOTH
))

	)

114 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
))

	)

118 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
))

119 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20U) ? \

120 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: ((ADDRESSË<0x08003FFFU)))

	)

125 #i‡(
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

126 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80U) ? \

127 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x40U) ? \

128 ((
ADDRESS
Ë<0x0800FFFFË: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20U) ? \

129 ((
ADDRESS
Ë<0x08007FFFË: ((ADDRESSË<0x08003FFFU)))))

	)

134 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
))

135 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x200U) ? \

136 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x180U) ? \

137 ((
ADDRESS
Ë<0x0805FFFFUË: ((ADDRESSË<0x0803FFFFU))))

	)

142 #i‡
deföed
(
FLASH_BANK2_END
)

143 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x400U) ? \

144 ((
ADDRESS
Ë<
FLASH_BANK2_END
Ë: ((ADDRESSË<0x080BFFFFU)))

	)

149 #i‡(
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

150 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x100U) ? \

151 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80U) ? \

152 ((
ADDRESS
Ë<0x0801FFFFUË: ((ADDRESSË<0x0800FFFFU))))

	)

170 
uöt32_t
 
Ty≥Eø£
;

173 
uöt32_t
 
B™ks
;

176 
uöt32_t
 
PageAddªss
;

180 
uöt32_t
 
NbPages
;

183 } 
	tFLASH_Eø£InôTy≥Def
;

190 
uöt32_t
 
O±i⁄Ty≥
;

193 
uöt32_t
 
WRPSèã
;

196 
uöt32_t
 
WRPPage
;

199 
uöt32_t
 
B™ks
;

202 
uöt8_t
 
RDPLevñ
;

205 #i‡
deföed
(
FLASH_BANK2_END
)

206 
uöt8_t
 
USERC⁄fig
;

211 
uöt8_t
 
USERC⁄fig
;

217 
uöt32_t
 
DATAAddªss
;

220 
uöt8_t
 
DATAD©a
;

222 } 
	tFLASH_OBProgømInôTy≥Def
;

240 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

241 
	#FLASH_PAGE_SIZE
 0x400U

	)

245 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

246 
	#FLASH_PAGE_SIZE
 0x800U

	)

258 
	#FLASH_TYPEERASE_PAGES
 0x00U

	)

259 
	#FLASH_TYPEERASE_MASSERASE
 0x02U

	)

268 #i‡
deföed
(
FLASH_BANK2_END
)

269 
	#FLASH_BANK_1
 1U

	)

270 
	#FLASH_BANK_2
 2U

	)

271 
	#FLASH_BANK_BOTH
 ((
uöt32_t
)
FLASH_BANK_1
 | 
FLASH_BANK_2
Ë

	)

274 
	#FLASH_BANK_1
 1U

	)

291 
	#OPTIONBYTE_WRP
 0x01U

	)

292 
	#OPTIONBYTE_RDP
 0x02U

	)

293 
	#OPTIONBYTE_USER
 0x04U

	)

294 
	#OPTIONBYTE_DATA
 0x08U

	)

303 
	#OB_WRPSTATE_DISABLE
 0x00U

	)

304 
	#OB_WRPSTATE_ENABLE
 0x01U

	)

314 #i‡ 
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
) \

315 || 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
) \

316 || 
deföed
(
STM32F103xB
)

317 
	#OB_WRP_PAGES0TO3
 0x00000001U

	)

318 
	#OB_WRP_PAGES4TO7
 0x00000002U

	)

319 
	#OB_WRP_PAGES8TO11
 0x00000004U

	)

320 
	#OB_WRP_PAGES12TO15
 0x00000008U

	)

321 
	#OB_WRP_PAGES16TO19
 0x00000010U

	)

322 
	#OB_WRP_PAGES20TO23
 0x00000020U

	)

323 
	#OB_WRP_PAGES24TO27
 0x00000040U

	)

324 
	#OB_WRP_PAGES28TO31
 0x00000080U

	)

329 #i‡ 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
)

330 
	#OB_WRP_PAGES32TO35
 0x00000100U

	)

331 
	#OB_WRP_PAGES36TO39
 0x00000200U

	)

332 
	#OB_WRP_PAGES40TO43
 0x00000400U

	)

333 
	#OB_WRP_PAGES44TO47
 0x00000800U

	)

334 
	#OB_WRP_PAGES48TO51
 0x00001000U

	)

335 
	#OB_WRP_PAGES52TO55
 0x00002000U

	)

336 
	#OB_WRP_PAGES56TO59
 0x00004000U

	)

337 
	#OB_WRP_PAGES60TO63
 0x00008000U

	)

338 
	#OB_WRP_PAGES64TO67
 0x00010000U

	)

339 
	#OB_WRP_PAGES68TO71
 0x00020000U

	)

340 
	#OB_WRP_PAGES72TO75
 0x00040000U

	)

341 
	#OB_WRP_PAGES76TO79
 0x00080000U

	)

342 
	#OB_WRP_PAGES80TO83
 0x00100000U

	)

343 
	#OB_WRP_PAGES84TO87
 0x00200000U

	)

344 
	#OB_WRP_PAGES88TO91
 0x00400000U

	)

345 
	#OB_WRP_PAGES92TO95
 0x00800000U

	)

346 
	#OB_WRP_PAGES96TO99
 0x01000000U

	)

347 
	#OB_WRP_PAGES100TO103
 0x02000000U

	)

348 
	#OB_WRP_PAGES104TO107
 0x04000000U

	)

349 
	#OB_WRP_PAGES108TO111
 0x08000000U

	)

350 
	#OB_WRP_PAGES112TO115
 0x10000000U

	)

351 
	#OB_WRP_PAGES116TO119
 0x20000000U

	)

352 
	#OB_WRP_PAGES120TO123
 0x40000000U

	)

353 
	#OB_WRP_PAGES124TO127
 0x80000000U

	)

358 #i‡ 
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
) \

359 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
) \

360 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

361 
	#OB_WRP_PAGES0TO1
 0x00000001U

	)

362 
	#OB_WRP_PAGES2TO3
 0x00000002U

	)

363 
	#OB_WRP_PAGES4TO5
 0x00000004U

	)

364 
	#OB_WRP_PAGES6TO7
 0x00000008U

	)

365 
	#OB_WRP_PAGES8TO9
 0x00000010U

	)

366 
	#OB_WRP_PAGES10TO11
 0x00000020U

	)

367 
	#OB_WRP_PAGES12TO13
 0x00000040U

	)

368 
	#OB_WRP_PAGES14TO15
 0x00000080U

	)

369 
	#OB_WRP_PAGES16TO17
 0x00000100U

	)

370 
	#OB_WRP_PAGES18TO19
 0x00000200U

	)

371 
	#OB_WRP_PAGES20TO21
 0x00000400U

	)

372 
	#OB_WRP_PAGES22TO23
 0x00000800U

	)

373 
	#OB_WRP_PAGES24TO25
 0x00001000U

	)

374 
	#OB_WRP_PAGES26TO27
 0x00002000U

	)

375 
	#OB_WRP_PAGES28TO29
 0x00004000U

	)

376 
	#OB_WRP_PAGES30TO31
 0x00008000U

	)

377 
	#OB_WRP_PAGES32TO33
 0x00010000U

	)

378 
	#OB_WRP_PAGES34TO35
 0x00020000U

	)

379 
	#OB_WRP_PAGES36TO37
 0x00040000U

	)

380 
	#OB_WRP_PAGES38TO39
 0x00080000U

	)

381 
	#OB_WRP_PAGES40TO41
 0x00100000U

	)

382 
	#OB_WRP_PAGES42TO43
 0x00200000U

	)

383 
	#OB_WRP_PAGES44TO45
 0x00400000U

	)

384 
	#OB_WRP_PAGES46TO47
 0x00800000U

	)

385 
	#OB_WRP_PAGES48TO49
 0x01000000U

	)

386 
	#OB_WRP_PAGES50TO51
 0x02000000U

	)

387 
	#OB_WRP_PAGES52TO53
 0x04000000U

	)

388 
	#OB_WRP_PAGES54TO55
 0x08000000U

	)

389 
	#OB_WRP_PAGES56TO57
 0x10000000U

	)

390 
	#OB_WRP_PAGES58TO59
 0x20000000U

	)

391 
	#OB_WRP_PAGES60TO61
 0x40000000U

	)

392 
	#OB_WRP_PAGES62TO127
 0x80000000U

	)

393 
	#OB_WRP_PAGES62TO255
 0x80000000U

	)

394 
	#OB_WRP_PAGES62TO511
 0x80000000U

	)

399 
	#OB_WRP_ALLPAGES
 0xFFFFFFFFU

	)

402 #i‡ 
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
)

403 
	#OB_WRP_PAGES0TO31MASK
 0x000000FFU

	)

407 #i‡ 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
)

408 
	#OB_WRP_PAGES0TO31MASK
 0x000000FFU

	)

409 
	#OB_WRP_PAGES32TO63MASK
 0x0000FF00U

	)

410 
	#OB_WRP_PAGES64TO95MASK
 0x00FF0000U

	)

411 
	#OB_WRP_PAGES96TO127MASK
 0xFF000000U

	)

415 #i‡ 
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
)

416 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

417 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

418 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

419 
	#OB_WRP_PAGES48TO255MASK
 0xFF000000U

	)

423 #i‡ 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

424 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

425 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

426 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

427 
	#OB_WRP_PAGES48TO511MASK
 0xFF000000U

	)

431 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

432 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

433 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

434 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

435 
	#OB_WRP_PAGES48TO127MASK
 0xFF000000U

	)

445 
	#OB_RDP_LEVEL_0
 ((
uöt8_t
)0xA5)

	)

446 
	#OB_RDP_LEVEL_1
 ((
uöt8_t
)0x00)

	)

454 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

455 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

463 
	#OB_STOP_NO_RST
 ((
uöt16_t
)0x0002Ë

	)

464 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

472 
	#OB_STDBY_NO_RST
 ((
uöt16_t
)0x0004Ë

	)

473 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

478 #i‡
deföed
(
FLASH_BANK2_END
)

482 
	#OB_BOOT1_RESET
 ((
uöt16_t
)0x0000Ë

	)

483 
	#OB_BOOT1_SET
 ((
uöt16_t
)0x0008Ë

	)

492 
	#OB_DATA_ADDRESS_DATA0
 0x1FFFF804U

	)

493 
	#OB_DATA_ADDRESS_DATA1
 0x1FFFF806U

	)

510 #i‡
deföed
(
FLASH_BANK2_END
)

511 
	#FLASH_FLAG_BSY
 
FLASH_FLAG_BSY_BANK1


	)

512 
	#FLASH_FLAG_PGERR
 
FLASH_FLAG_PGERR_BANK1


	)

513 
	#FLASH_FLAG_WRPERR
 
FLASH_FLAG_WRPERR_BANK1


	)

514 
	#FLASH_FLAG_EOP
 
FLASH_FLAG_EOP_BANK1


	)

516 
	#FLASH_FLAG_BSY_BANK1
 
FLASH_SR_BSY


	)

517 
	#FLASH_FLAG_PGERR_BANK1
 
FLASH_SR_PGERR


	)

518 
	#FLASH_FLAG_WRPERR_BANK1
 
FLASH_SR_WRPRTERR


	)

519 
	#FLASH_FLAG_EOP_BANK1
 
FLASH_SR_EOP


	)

521 
	#FLASH_FLAG_BSY_BANK2
 (
FLASH_SR2_BSY
 << 16UË

	)

522 
	#FLASH_FLAG_PGERR_BANK2
 (
FLASH_SR2_PGERR
 << 16UË

	)

523 
	#FLASH_FLAG_WRPERR_BANK2
 (
FLASH_SR2_WRPRTERR
 << 16UË

	)

524 
	#FLASH_FLAG_EOP_BANK2
 (
FLASH_SR2_EOP
 << 16UË

	)

528 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

529 
	#FLASH_FLAG_PGERR
 
FLASH_SR_PGERR


	)

530 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPRTERR


	)

531 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

534 
	#FLASH_FLAG_OPTVERR
 ((
OBR_REG_INDEX
 << 8U | 
FLASH_OBR_OPTERR
)Ë

	)

543 #i‡
deföed
(
FLASH_BANK2_END
)

544 
	#FLASH_IT_EOP
 
FLASH_IT_EOP_BANK1


	)

545 
	#FLASH_IT_ERR
 
FLASH_IT_ERR_BANK1


	)

547 
	#FLASH_IT_EOP_BANK1
 
FLASH_CR_EOPIE


	)

548 
	#FLASH_IT_ERR_BANK1
 
FLASH_CR_ERRIE


	)

550 
	#FLASH_IT_EOP_BANK2
 (
FLASH_CR2_EOPIE
 << 16UË

	)

551 
	#FLASH_IT_ERR_BANK2
 (
FLASH_CR2_ERRIE
 << 16UË

	)

555 
	#FLASH_IT_EOP
 
FLASH_CR_EOPIE


	)

556 
	#FLASH_IT_ERR
 
FLASH_CR_ERRIE


	)

582 #i‡
deföed
(
FLASH_BANK2_END
)

593 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
) do { \

595 
	`SET_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFFU)); \

597 
	`SET_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16U)); \

598 } 0U)

	)

610 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
) do { \

612 
	`CLEAR_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFFU)); \

614 
	`CLEAR_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16U)); \

615 } 0U)

	)

632 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
FLASH_FLAG_OPTVERR
) ? \

633 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

634 ((((
__FLAG__
Ë& 
SR_FLAG_MASK
Ë!
RESET
)? \

635 (
FLASH
->
SR
 & ((
__FLAG__
Ë& 
SR_FLAG_MASK
)) : \

636 (
FLASH
->
SR2
 & ((
__FLAG__
Ë>> 16U))))

	)

653 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

655 i‡((
__FLAG__
Ë=
FLASH_FLAG_OPTVERR
) \

657 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

661 i‡(((
__FLAG__
Ë& 
SR_FLAG_MASK
Ë!
RESET
) \

663 
FLASH
->
SR
 = ((
__FLAG__
Ë& 
SR_FLAG_MASK
); \

666 i‡(((
__FLAG__
Ë>> 16UË!
RESET
) \

668 
FLASH
->
SR2
 = ((
__FLAG__
) >> 16U); \

671 } 0U)

	)

681 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 |(__INTERRUPT__))

	)

691 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 &~(__INTERRUPT__))

	)

704 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
FLASH_FLAG_OPTVERR
) ? \

705 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

706 (
FLASH
->
SR
 & (
__FLAG__
)))

	)

717 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

719 i‡((
__FLAG__
Ë=
FLASH_FLAG_OPTVERR
) \

721 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

725 
FLASH
->
SR
 = (
__FLAG__
); \

727 } 0U)

	)

748 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
);

749 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
);

759 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBEø£
();

760 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

761 
HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

762 
uöt32_t
 
HAL_FLASHEx_OBGëU£rD©a
(uöt32_à
DATAAdªss
);

778 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h

20 #i‚de‡
STM32F1xx_HAL_GPIO_H


21 
	#STM32F1xx_HAL_GPIO_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

48 
uöt32_t
 
Pö
;

51 
uöt32_t
 
Mode
;

54 
uöt32_t
 
PuŒ
;

57 
uöt32_t
 
S≥ed
;

59 } 
	tGPIO_InôTy≥Def
;

66 
GPIO_PIN_RESET
 = 0u,

67 
GPIO_PIN_SET


68 } 
	tGPIO_PöSèã
;

82 
	#GPIO_PIN_0
 ((
uöt16_t
)0x0001Ë

	)

83 
	#GPIO_PIN_1
 ((
uöt16_t
)0x0002Ë

	)

84 
	#GPIO_PIN_2
 ((
uöt16_t
)0x0004Ë

	)

85 
	#GPIO_PIN_3
 ((
uöt16_t
)0x0008Ë

	)

86 
	#GPIO_PIN_4
 ((
uöt16_t
)0x0010Ë

	)

87 
	#GPIO_PIN_5
 ((
uöt16_t
)0x0020Ë

	)

88 
	#GPIO_PIN_6
 ((
uöt16_t
)0x0040Ë

	)

89 
	#GPIO_PIN_7
 ((
uöt16_t
)0x0080Ë

	)

90 
	#GPIO_PIN_8
 ((
uöt16_t
)0x0100Ë

	)

91 
	#GPIO_PIN_9
 ((
uöt16_t
)0x0200Ë

	)

92 
	#GPIO_PIN_10
 ((
uöt16_t
)0x0400Ë

	)

93 
	#GPIO_PIN_11
 ((
uöt16_t
)0x0800Ë

	)

94 
	#GPIO_PIN_12
 ((
uöt16_t
)0x1000Ë

	)

95 
	#GPIO_PIN_13
 ((
uöt16_t
)0x2000Ë

	)

96 
	#GPIO_PIN_14
 ((
uöt16_t
)0x4000Ë

	)

97 
	#GPIO_PIN_15
 ((
uöt16_t
)0x8000Ë

	)

98 
	#GPIO_PIN_AŒ
 ((
uöt16_t
)0xFFFFË

	)

100 
	#GPIO_PIN_MASK
 0x0000FFFFu

	)

115 
	#GPIO_MODE_INPUT
 0x00000000u

	)

116 
	#GPIO_MODE_OUTPUT_PP
 0x00000001u

	)

117 
	#GPIO_MODE_OUTPUT_OD
 0x00000011u

	)

118 
	#GPIO_MODE_AF_PP
 0x00000002u

	)

119 
	#GPIO_MODE_AF_OD
 0x00000012u

	)

120 
	#GPIO_MODE_AF_INPUT
 
GPIO_MODE_INPUT


	)

122 
	#GPIO_MODE_ANALOG
 0x00000003u

	)

124 
	#GPIO_MODE_IT_RISING
 0x10110000u

	)

125 
	#GPIO_MODE_IT_FALLING
 0x10210000u

	)

126 
	#GPIO_MODE_IT_RISING_FALLING
 0x10310000u

	)

128 
	#GPIO_MODE_EVT_RISING
 0x10120000u

	)

129 
	#GPIO_MODE_EVT_FALLING
 0x10220000u

	)

130 
	#GPIO_MODE_EVT_RISING_FALLING
 0x10320000u

	)

140 
	#GPIO_SPEED_FREQ_LOW
 (
GPIO_CRL_MODE0_1
Ë

	)

141 
	#GPIO_SPEED_FREQ_MEDIUM
 (
GPIO_CRL_MODE0_0
Ë

	)

142 
	#GPIO_SPEED_FREQ_HIGH
 (
GPIO_CRL_MODE0
Ë

	)

152 
	#GPIO_NOPULL
 0x00000000u

	)

153 
	#GPIO_PULLUP
 0x00000001u

	)

154 
	#GPIO_PULLDOWN
 0x00000002u

	)

174 
	#__HAL_GPIO_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

182 
	#__HAL_GPIO_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

190 
	#__HAL_GPIO_EXTI_GET_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

198 
	#__HAL_GPIO_EXTI_CLEAR_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

206 
	#__HAL_GPIO_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(
EXTI
->
SWIER
 |(__EXTI_LINE__))

	)

212 
	~"°m32f1xx_hÆ_gpio_ex.h
"

223 
HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
);

224 
HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
);

233 
GPIO_PöSèã
 
HAL_GPIO_RódPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

234 
HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
);

235 
HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

236 
HAL_SètusTy≥Def
 
HAL_GPIO_LockPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

237 
HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
);

238 
HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
);

262 
	#IS_GPIO_PIN_ACTION
(
ACTION
Ë(((ACTIONË=
GPIO_PIN_RESET
Ë|| ((ACTIONË=
GPIO_PIN_SET
))

	)

263 
	#IS_GPIO_PIN
(
PIN
Ë(((((
uöt32_t
)PINË& 
GPIO_PIN_MASK
 ) !0x00uË&& ((((uöt32_t)PINË& ~GPIO_PIN_MASKË=0x00u))

	)

264 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_MODE_INPUT
) ||\

265 ((
MODE
Ë=
GPIO_MODE_OUTPUT_PP
) ||\

266 ((
MODE
Ë=
GPIO_MODE_OUTPUT_OD
) ||\

267 ((
MODE
Ë=
GPIO_MODE_AF_PP
) ||\

268 ((
MODE
Ë=
GPIO_MODE_AF_OD
) ||\

269 ((
MODE
Ë=
GPIO_MODE_IT_RISING
) ||\

270 ((
MODE
Ë=
GPIO_MODE_IT_FALLING
) ||\

271 ((
MODE
Ë=
GPIO_MODE_IT_RISING_FALLING
) ||\

272 ((
MODE
Ë=
GPIO_MODE_EVT_RISING
) ||\

273 ((
MODE
Ë=
GPIO_MODE_EVT_FALLING
) ||\

274 ((
MODE
Ë=
GPIO_MODE_EVT_RISING_FALLING
) ||\

275 ((
MODE
Ë=
GPIO_MODE_ANALOG
))

	)

276 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_SPEED_FREQ_LOW
) || \

277 ((
SPEED
Ë=
GPIO_SPEED_FREQ_MEDIUM
Ë|| ((SPEEDË=
GPIO_SPEED_FREQ_HIGH
))

	)

278 
	#IS_GPIO_PULL
(
PULL
Ë(((PULLË=
GPIO_NOPULL
Ë|| ((PULLË=
GPIO_PULLUP
) || \

279 ((
PULL
Ë=
GPIO_PULLDOWN
))

	)

301 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio_ex.h

20 #i‚de‡
STM32F1xx_HAL_GPIO_EX_H


21 
	#STM32F1xx_HAL_GPIO_EX_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

53 
	#AFIO_EVENTOUT_PIN_0
 
AFIO_EVCR_PIN_PX0


	)

54 
	#AFIO_EVENTOUT_PIN_1
 
AFIO_EVCR_PIN_PX1


	)

55 
	#AFIO_EVENTOUT_PIN_2
 
AFIO_EVCR_PIN_PX2


	)

56 
	#AFIO_EVENTOUT_PIN_3
 
AFIO_EVCR_PIN_PX3


	)

57 
	#AFIO_EVENTOUT_PIN_4
 
AFIO_EVCR_PIN_PX4


	)

58 
	#AFIO_EVENTOUT_PIN_5
 
AFIO_EVCR_PIN_PX5


	)

59 
	#AFIO_EVENTOUT_PIN_6
 
AFIO_EVCR_PIN_PX6


	)

60 
	#AFIO_EVENTOUT_PIN_7
 
AFIO_EVCR_PIN_PX7


	)

61 
	#AFIO_EVENTOUT_PIN_8
 
AFIO_EVCR_PIN_PX8


	)

62 
	#AFIO_EVENTOUT_PIN_9
 
AFIO_EVCR_PIN_PX9


	)

63 
	#AFIO_EVENTOUT_PIN_10
 
AFIO_EVCR_PIN_PX10


	)

64 
	#AFIO_EVENTOUT_PIN_11
 
AFIO_EVCR_PIN_PX11


	)

65 
	#AFIO_EVENTOUT_PIN_12
 
AFIO_EVCR_PIN_PX12


	)

66 
	#AFIO_EVENTOUT_PIN_13
 
AFIO_EVCR_PIN_PX13


	)

67 
	#AFIO_EVENTOUT_PIN_14
 
AFIO_EVCR_PIN_PX14


	)

68 
	#AFIO_EVENTOUT_PIN_15
 
AFIO_EVCR_PIN_PX15


	)

70 
	#IS_AFIO_EVENTOUT_PIN
(
__PIN__
Ë(((__PIN__Ë=
AFIO_EVENTOUT_PIN_0
) || \

71 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_1
) || \

72 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_2
) || \

73 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_3
) || \

74 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_4
) || \

75 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_5
) || \

76 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_6
) || \

77 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_7
) || \

78 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_8
) || \

79 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_9
) || \

80 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_10
) || \

81 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_11
) || \

82 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_12
) || \

83 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_13
) || \

84 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_14
) || \

85 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_15
))

	)

94 
	#AFIO_EVENTOUT_PORT_A
 
AFIO_EVCR_PORT_PA


	)

95 
	#AFIO_EVENTOUT_PORT_B
 
AFIO_EVCR_PORT_PB


	)

96 
	#AFIO_EVENTOUT_PORT_C
 
AFIO_EVCR_PORT_PC


	)

97 
	#AFIO_EVENTOUT_PORT_D
 
AFIO_EVCR_PORT_PD


	)

98 
	#AFIO_EVENTOUT_PORT_E
 
AFIO_EVCR_PORT_PE


	)

100 
	#IS_AFIO_EVENTOUT_PORT
(
__PORT__
Ë(((__PORT__Ë=
AFIO_EVENTOUT_PORT_A
) || \

101 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_B
) || \

102 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_C
) || \

103 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_D
) || \

104 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_E
))

	)

123 
	#__HAL_AFIO_REMAP_SPI1_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_SPI1_REMAP
)

	)

130 
	#__HAL_AFIO_REMAP_SPI1_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_SPI1_REMAP
)

	)

137 
	#__HAL_AFIO_REMAP_I2C1_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_I2C1_REMAP
)

	)

144 
	#__HAL_AFIO_REMAP_I2C1_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_I2C1_REMAP
)

	)

151 
	#__HAL_AFIO_REMAP_USART1_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_USART1_REMAP
)

	)

158 
	#__HAL_AFIO_REMAP_USART1_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_USART1_REMAP
)

	)

165 
	#__HAL_AFIO_REMAP_USART2_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_USART2_REMAP
)

	)

172 
	#__HAL_AFIO_REMAP_USART2_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_USART2_REMAP
)

	)

179 
	#__HAL_AFIO_REMAP_USART3_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_FULLREMAP
, AFIO_MAPR_USART3_REMAP_FULLREMAP)

	)

186 
	#__HAL_AFIO_REMAP_USART3_PARTIAL
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_PARTIALREMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

193 
	#__HAL_AFIO_REMAP_USART3_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_NOREMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

200 
	#__HAL_AFIO_REMAP_TIM1_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_FULLREMAP
, AFIO_MAPR_TIM1_REMAP_FULLREMAP)

	)

207 
	#__HAL_AFIO_REMAP_TIM1_PARTIAL
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

214 
	#__HAL_AFIO_REMAP_TIM1_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_NOREMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

221 
	#__HAL_AFIO_REMAP_TIM2_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_FULLREMAP
, AFIO_MAPR_TIM2_REMAP_FULLREMAP)

	)

228 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_2
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

235 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_1
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

242 
	#__HAL_AFIO_REMAP_TIM2_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_NOREMAP
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

250 
	#__HAL_AFIO_REMAP_TIM3_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_FULLREMAP
, AFIO_MAPR_TIM3_REMAP_FULLREMAP)

	)

258 
	#__HAL_AFIO_REMAP_TIM3_PARTIAL
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

266 
	#__HAL_AFIO_REMAP_TIM3_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_NOREMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

274 
	#__HAL_AFIO_REMAP_TIM4_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM4_REMAP
)

	)

282 
	#__HAL_AFIO_REMAP_TIM4_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM4_REMAP
)

	)

284 #i‡
deföed
(
AFIO_MAPR_CAN_REMAP_REMAP1
)

291 
	#__HAL_AFIO_REMAP_CAN1_1
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP1
, 
AFIO_MAPR_CAN_REMAP
)

	)

298 
	#__HAL_AFIO_REMAP_CAN1_2
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP2
, 
AFIO_MAPR_CAN_REMAP
)

	)

305 
	#__HAL_AFIO_REMAP_CAN1_3
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP3
, 
AFIO_MAPR_CAN_REMAP
)

	)

317 
	#__HAL_AFIO_REMAP_PD01_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_PD01_REMAP
)

	)

327 
	#__HAL_AFIO_REMAP_PD01_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_PD01_REMAP
)

	)

329 #i‡
deföed
(
AFIO_MAPR_TIM5CH4_IREMAP
)

336 
	#__HAL_AFIO_REMAP_TIM5CH4_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

344 
	#__HAL_AFIO_REMAP_TIM5CH4_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

347 #i‡
deföed
(
AFIO_MAPR_ETH_REMAP
)

354 
	#__HAL_AFIO_REMAP_ETH_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ETH_REMAP
)

	)

362 
	#__HAL_AFIO_REMAP_ETH_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ETH_REMAP
)

	)

365 #i‡
deföed
(
AFIO_MAPR_CAN2_REMAP
)

373 
	#__HAL_AFIO_REMAP_CAN2_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_CAN2_REMAP
)

	)

381 
	#__HAL_AFIO_REMAP_CAN2_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_CAN2_REMAP
)

	)

384 #i‡
deföed
(
AFIO_MAPR_MII_RMII_SEL
)

391 
	#__HAL_AFIO_ETH_RMII
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_MII_RMII_SEL
)

	)

399 
	#__HAL_AFIO_ETH_MII
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_MII_RMII_SEL
)

	)

407 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

414 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

421 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

428 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

430 #i‡
deföed
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

437 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

444 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

447 #i‡
deföed
 (
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

454 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

461 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

469 
	#__HAL_AFIO_REMAP_SWJ_ENABLE
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_RESET
)

	)

476 
	#__HAL_AFIO_REMAP_SWJ_NONJTRST
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_NOJNTRST
)

	)

484 
	#__HAL_AFIO_REMAP_SWJ_NOJTAG
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_JTAGDISABLE
)

	)

491 
	#__HAL_AFIO_REMAP_SWJ_DISABLE
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_DISABLE
)

	)

493 #i‡
deföed
(
AFIO_MAPR_SPI3_REMAP
)

501 
	#__HAL_AFIO_REMAP_SPI3_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_SPI3_REMAP
)

	)

509 
	#__HAL_AFIO_REMAP_SPI3_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_SPI3_REMAP
)

	)

512 #i‡
deföed
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

520 
	#__HAL_AFIO_TIM2ITR1_TO_USB
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

528 
	#__HAL_AFIO_TIM2ITR1_TO_ETH
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

531 #i‡
deföed
(
AFIO_MAPR_PTP_PPS_REMAP
)

539 
	#__HAL_AFIO_ETH_PTP_PPS_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_PTP_PPS_REMAP
)

	)

547 
	#__HAL_AFIO_ETH_PTP_PPS_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_PTP_PPS_REMAP
)

	)

550 #i‡
deföed
(
AFIO_MAPR2_TIM9_REMAP
)

557 
	#__HAL_AFIO_REMAP_TIM9_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

564 
	#__HAL_AFIO_REMAP_TIM9_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

567 #i‡
deföed
(
AFIO_MAPR2_TIM10_REMAP
)

574 
	#__HAL_AFIO_REMAP_TIM10_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

581 
	#__HAL_AFIO_REMAP_TIM10_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

584 #i‡
deföed
(
AFIO_MAPR2_TIM11_REMAP
)

590 
	#__HAL_AFIO_REMAP_TIM11_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

597 
	#__HAL_AFIO_REMAP_TIM11_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

600 #i‡
deföed
(
AFIO_MAPR2_TIM13_REMAP
)

607 
	#__HAL_AFIO_REMAP_TIM13_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

614 
	#__HAL_AFIO_REMAP_TIM13_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

617 #i‡
deföed
(
AFIO_MAPR2_TIM14_REMAP
)

624 
	#__HAL_AFIO_REMAP_TIM14_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

631 
	#__HAL_AFIO_REMAP_TIM14_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

634 #i‡
deföed
(
AFIO_MAPR2_FSMC_NADV_REMAP
)

641 
	#__HAL_AFIO_FSMCNADV_DISCONNECTED
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

648 
	#__HAL_AFIO_FSMCNADV_CONNECTED
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

651 #i‡
deföed
(
AFIO_MAPR2_TIM15_REMAP
)

658 
	#__HAL_AFIO_REMAP_TIM15_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

665 
	#__HAL_AFIO_REMAP_TIM15_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

668 #i‡
deföed
(
AFIO_MAPR2_TIM16_REMAP
)

675 
	#__HAL_AFIO_REMAP_TIM16_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

682 
	#__HAL_AFIO_REMAP_TIM16_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

685 #i‡
deföed
(
AFIO_MAPR2_TIM17_REMAP
)

692 
	#__HAL_AFIO_REMAP_TIM17_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

699 
	#__HAL_AFIO_REMAP_TIM17_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

702 #i‡
deföed
(
AFIO_MAPR2_CEC_REMAP
)

709 
	#__HAL_AFIO_REMAP_CEC_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

716 
	#__HAL_AFIO_REMAP_CEC_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

719 #i‡
deföed
(
AFIO_MAPR2_TIM1_DMA_REMAP
)

726 
	#__HAL_AFIO_REMAP_TIM1DMA_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

733 
	#__HAL_AFIO_REMAP_TIM1DMA_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

736 #i‡
deföed
(
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

743 
	#__HAL_AFIO_REMAP_TIM67DACDMA_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

750 
	#__HAL_AFIO_REMAP_TIM67DACDMA_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

753 #i‡
deföed
(
AFIO_MAPR2_TIM12_REMAP
)

761 
	#__HAL_AFIO_REMAP_TIM12_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

769 
	#__HAL_AFIO_REMAP_TIM12_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

772 #i‡
deföed
(
AFIO_MAPR2_MISC_REMAP
)

784 
	#__HAL_AFIO_REMAP_MISC_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

796 
	#__HAL_AFIO_REMAP_MISC_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

810 #i‡
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)

811 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0uL :\

812 ((
__GPIOx__
Ë=(
GPIOB
))? 1uL :\

813 ((
__GPIOx__
Ë=(
GPIOC
))? 2uL :3uL)

	)

814 #ñi‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

815 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0uL :\

816 ((
__GPIOx__
Ë=(
GPIOB
))? 1uL :\

817 ((
__GPIOx__
Ë=(
GPIOC
))? 2uL :\

818 ((
__GPIOx__
Ë=(
GPIOD
))? 3uL :4uL)

	)

819 #ñi‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

820 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0uL :\

821 ((
__GPIOx__
Ë=(
GPIOB
))? 1uL :\

822 ((
__GPIOx__
Ë=(
GPIOC
))? 2uL :\

823 ((
__GPIOx__
Ë=(
GPIOD
))? 3uL :\

824 ((
__GPIOx__
Ë=(
GPIOE
))? 4uL :\

825 ((
__GPIOx__
Ë=(
GPIOF
))? 5uL :6uL)

	)

828 
	#AFIO_REMAP_ENABLE
(
REMAP_PIN
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

829 
tm¥eg
 |
AFIO_MAPR_SWJ_CFG
; \

830 
tm¥eg
 |
REMAP_PIN
; \

831 
AFIO
->
MAPR
 = 
tm¥eg
; \

832 }0u)

	)

834 
	#AFIO_REMAP_DISABLE
(
REMAP_PIN
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

835 
tm¥eg
 |
AFIO_MAPR_SWJ_CFG
; \

836 
tm¥eg
 &~
REMAP_PIN
; \

837 
AFIO
->
MAPR
 = 
tm¥eg
; \

838 }0u)

	)

840 
	#AFIO_REMAP_PARTIAL
(
REMAP_PIN
, 
REMAP_PIN_MASK
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

841 
tm¥eg
 &~
REMAP_PIN_MASK
; \

842 
tm¥eg
 |
AFIO_MAPR_SWJ_CFG
; \

843 
tm¥eg
 |
REMAP_PIN
; \

844 
AFIO
->
MAPR
 = 
tm¥eg
; \

845 }0u)

	)

847 
	#AFIO_DBGAFR_CONFIG
(
DBGAFR_SWJCFG
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

848 
tm¥eg
 &~
AFIO_MAPR_SWJ_CFG_Msk
; \

849 
tm¥eg
 |
DBGAFR_SWJCFG
; \

850 
AFIO
->
MAPR
 = 
tm¥eg
; \

851 }0u)

	)

867 
HAL_GPIOEx_C⁄figEvítout
(
uöt32_t
 
GPIO_P‹tSour˚
, uöt32_à
GPIO_PöSour˚
);

868 
HAL_GPIOEx_E«bÀEvítout
();

869 
HAL_GPIOEx_DißbÀEvítout
();

887 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h

20 #i‚de‡
__STM32F1xx_HAL_I2C_H


21 
	#__STM32F1xx_HAL_I2C_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

49 
uöt32_t
 
ClockS≥ed
;

52 
uöt32_t
 
DutyCy˛e
;

55 
uöt32_t
 
OwnAddªss1
;

58 
uöt32_t
 
AddªssögMode
;

61 
uöt32_t
 
DuÆAddªssMode
;

64 
uöt32_t
 
OwnAddªss2
;

67 
uöt32_t
 
GíîÆCÆlMode
;

70 
uöt32_t
 
NoSåëchMode
;

73 } 
	tI2C_InôTy≥Def
;

108 
HAL_I2C_STATE_RESET
 = 0x00U,

109 
HAL_I2C_STATE_READY
 = 0x20U,

110 
HAL_I2C_STATE_BUSY
 = 0x24U,

111 
HAL_I2C_STATE_BUSY_TX
 = 0x21U,

112 
HAL_I2C_STATE_BUSY_RX
 = 0x22U,

113 
HAL_I2C_STATE_LISTEN
 = 0x28U,

114 
HAL_I2C_STATE_BUSY_TX_LISTEN
 = 0x29U,

116 
HAL_I2C_STATE_BUSY_RX_LISTEN
 = 0x2AU,

118 
HAL_I2C_STATE_ABORT
 = 0x60U,

119 
HAL_I2C_STATE_TIMEOUT
 = 0xA0U,

120 
HAL_I2C_STATE_ERROR
 = 0xE0U

122 } 
	tHAL_I2C_SèãTy≥Def
;

148 
HAL_I2C_MODE_NONE
 = 0x00U,

149 
HAL_I2C_MODE_MASTER
 = 0x10U,

150 
HAL_I2C_MODE_SLAVE
 = 0x20U,

151 
HAL_I2C_MODE_MEM
 = 0x40U

153 } 
	tHAL_I2C_ModeTy≥Def
;

163 
	#HAL_I2C_ERROR_NONE
 0x00000000U

	)

164 
	#HAL_I2C_ERROR_BERR
 0x00000001U

	)

165 
	#HAL_I2C_ERROR_ARLO
 0x00000002U

	)

166 
	#HAL_I2C_ERROR_AF
 0x00000004U

	)

167 
	#HAL_I2C_ERROR_OVR
 0x00000008U

	)

168 
	#HAL_I2C_ERROR_DMA
 0x00000010U

	)

169 
	#HAL_I2C_ERROR_TIMEOUT
 0x00000020U

	)

170 
	#HAL_I2C_ERROR_SIZE
 0x00000040U

	)

171 
	#HAL_I2C_ERROR_DMA_PARAM
 0x00000080U

	)

172 
	#HAL_I2C_WRONG_START
 0x00000200U

	)

173 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

174 
	#HAL_I2C_ERROR_INVALID_CALLBACK
 0x00000100U

	)

184 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

185 
__I2C_H™dÀTy≥Def


190 
I2C_Ty≥Def
 *
In°™˚
;

192 
I2C_InôTy≥Def
 
Inô
;

194 
uöt8_t
 *
pBuffPå
;

196 
uöt16_t
 
X„rSize
;

198 
__IO
 
uöt16_t
 
X„rCou¡
;

200 
__IO
 
uöt32_t
 
X„rO±i⁄s
;

202 
__IO
 
uöt32_t
 
PªviousSèã
;

205 
DMA_H™dÀTy≥Def
 *
hdm©x
;

207 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

209 
HAL_LockTy≥Def
 
Lock
;

211 
__IO
 
HAL_I2C_SèãTy≥Def
 
Sèã
;

213 
__IO
 
HAL_I2C_ModeTy≥Def
 
Mode
;

215 
__IO
 
uöt32_t
 
Eº‹Code
;

217 
__IO
 
uöt32_t
 
Devaddªss
;

219 
__IO
 
uöt32_t
 
Memaddªss
;

221 
__IO
 
uöt32_t
 
MemaddSize
;

223 
__IO
 
uöt32_t
 
EvítCou¡
;

226 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

227 (* 
Ma°îTxC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

228 (* 
Ma°îRxC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

229 (* 
SœveTxC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

230 (* 
SœveRxC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

231 (* 
Li°íC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

232 (* 
MemTxC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

233 (* 
MemRxC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

234 (* 
Eº‹CÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

235 (* 
Ab‹tC∂tCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

237 (* 
AddrCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 
Tøns„rDúe˘i⁄
, 
uöt16_t
 
AddrM©chCode
);

239 (* 
M•InôCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

240 (* 
M•DeInôCÆlback
)(
__I2C_H™dÀTy≥Def
 *
hi2c
);

243 } 
	tI2C_H™dÀTy≥Def
;

245 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

251 
HAL_I2C_MASTER_TX_COMPLETE_CB_ID
 = 0x00U,

252 
HAL_I2C_MASTER_RX_COMPLETE_CB_ID
 = 0x01U,

253 
HAL_I2C_SLAVE_TX_COMPLETE_CB_ID
 = 0x02U,

254 
HAL_I2C_SLAVE_RX_COMPLETE_CB_ID
 = 0x03U,

255 
HAL_I2C_LISTEN_COMPLETE_CB_ID
 = 0x04U,

256 
HAL_I2C_MEM_TX_COMPLETE_CB_ID
 = 0x05U,

257 
HAL_I2C_MEM_RX_COMPLETE_CB_ID
 = 0x06U,

258 
HAL_I2C_ERROR_CB_ID
 = 0x07U,

259 
HAL_I2C_ABORT_CB_ID
 = 0x08U,

261 
HAL_I2C_MSPINIT_CB_ID
 = 0x09U,

262 
HAL_I2C_MSPDEINIT_CB_ID
 = 0x0AU

264 } 
	tHAL_I2C_CÆlbackIDTy≥Def
;

269 (*
pI2C_CÆlbackTy≥Def
)(
	tI2C_H™dÀTy≥Def
 *
	thi2c
);

270 (*
pI2C_AddrCÆlbackTy≥Def
)(
	tI2C_H™dÀTy≥Def
 *
	thi2c
, 
	tuöt8_t
 
	tTøns„rDúe˘i⁄
, 
	tuöt16_t
 
	tAddrM©chCode
);

289 
	#I2C_DUTYCYCLE_2
 0x00000000U

	)

290 
	#I2C_DUTYCYCLE_16_9
 
I2C_CCR_DUTY


	)

298 
	#I2C_ADDRESSINGMODE_7BIT
 0x00004000U

	)

299 
	#I2C_ADDRESSINGMODE_10BIT
 (
I2C_OAR1_ADDMODE
 | 0x00004000U)

	)

307 
	#I2C_DUALADDRESS_DISABLE
 0x00000000U

	)

308 
	#I2C_DUALADDRESS_ENABLE
 
I2C_OAR2_ENDUAL


	)

316 
	#I2C_GENERALCALL_DISABLE
 0x00000000U

	)

317 
	#I2C_GENERALCALL_ENABLE
 
I2C_CR1_ENGC


	)

325 
	#I2C_NOSTRETCH_DISABLE
 0x00000000U

	)

326 
	#I2C_NOSTRETCH_ENABLE
 
I2C_CR1_NOSTRETCH


	)

334 
	#I2C_MEMADD_SIZE_8BIT
 0x00000001U

	)

335 
	#I2C_MEMADD_SIZE_16BIT
 0x00000010U

	)

343 
	#I2C_DIRECTION_RECEIVE
 0x00000000U

	)

344 
	#I2C_DIRECTION_TRANSMIT
 0x00000001U

	)

352 
	#I2C_FIRST_FRAME
 0x00000001U

	)

353 
	#I2C_FIRST_AND_NEXT_FRAME
 0x00000002U

	)

354 
	#I2C_NEXT_FRAME
 0x00000004U

	)

355 
	#I2C_FIRST_AND_LAST_FRAME
 0x00000008U

	)

356 
	#I2C_LAST_FRAME_NO_STOP
 0x00000010U

	)

357 
	#I2C_LAST_FRAME
 0x00000020U

	)

362 
	#I2C_OTHER_FRAME
 (0x00AA0000U)

	)

363 
	#I2C_OTHER_AND_LAST_FRAME
 (0xAA000000U)

	)

374 
	#I2C_IT_BUF
 
I2C_CR2_ITBUFEN


	)

375 
	#I2C_IT_EVT
 
I2C_CR2_ITEVTEN


	)

376 
	#I2C_IT_ERR
 
I2C_CR2_ITERREN


	)

385 
	#I2C_FLAG_OVR
 0x00010800U

	)

386 
	#I2C_FLAG_AF
 0x00010400U

	)

387 
	#I2C_FLAG_ARLO
 0x00010200U

	)

388 
	#I2C_FLAG_BERR
 0x00010100U

	)

389 
	#I2C_FLAG_TXE
 0x00010080U

	)

390 
	#I2C_FLAG_RXNE
 0x00010040U

	)

391 
	#I2C_FLAG_STOPF
 0x00010010U

	)

392 
	#I2C_FLAG_ADD10
 0x00010008U

	)

393 
	#I2C_FLAG_BTF
 0x00010004U

	)

394 
	#I2C_FLAG_ADDR
 0x00010002U

	)

395 
	#I2C_FLAG_SB
 0x00010001U

	)

396 
	#I2C_FLAG_DUALF
 0x00100080U

	)

397 
	#I2C_FLAG_GENCALL
 0x00100010U

	)

398 
	#I2C_FLAG_TRA
 0x00100004U

	)

399 
	#I2C_FLAG_BUSY
 0x00100002U

	)

400 
	#I2C_FLAG_MSL
 0x00100001U

	)

419 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

420 
	#__HAL_I2C_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

421 (
__HANDLE__
)->
Sèã
 = 
HAL_I2C_STATE_RESET
; \

422 (
__HANDLE__
)->
M•InôCÆlback
 = 
NULL
; \

423 (
__HANDLE__
)->
M•DeInôCÆlback
 = 
NULL
; \

424 } 0)

	)

426 
	#__HAL_I2C_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_I2C_STATE_RESET
)

	)

438 
	#__HAL_I2C_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR2
,(__INTERRUPT__))

	)

439 
	#__HAL_I2C_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR2
, (__INTERRUPT__))

	)

450 
	#__HAL_I2C_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR2
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

475 
	#__HAL_I2C_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((
uöt8_t
)((__FLAG__) >> 16U)) == 0x01U) ? \

476 (((((
__HANDLE__
)->
In°™˚
->
SR1
Ë& ((
__FLAG__
Ë& 
I2C_FLAG_MASK
)Ë=((__FLAG__Ë& I2C_FLAG_MASK)Ë? 
SET
 : 
RESET
) : \

477 (((((
__HANDLE__
)->
In°™˚
->
SR2
Ë& ((
__FLAG__
Ë& 
I2C_FLAG_MASK
)Ë=((__FLAG__Ë& I2C_FLAG_MASK)Ë? 
SET
 : 
RESET
))

	)

489 
	#__HAL_I2C_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR1
 = ~((__FLAG__Ë& 
I2C_FLAG_MASK
))

	)

496 
	#__HAL_I2C_CLEAR_ADDRFLAG
(
__HANDLE__
) \

498 
__IO
 
uöt32_t
 
tm¥eg
 = 0x00U; \

499 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR1
; \

500 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR2
; \

501 
	`UNUSED
(
tm¥eg
); \

502 } 0)

	)

508 
	#__HAL_I2C_CLEAR_STOPFLAG
(
__HANDLE__
) \

510 
__IO
 
uöt32_t
 
tm¥eg
 = 0x00U; \

511 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR1
; \

512 
	`SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR1
, 
I2C_CR1_PE
); \

513 
	`UNUSED
(
tm¥eg
); \

514 } 0)

	)

520 
	#__HAL_I2C_ENABLE
(
__HANDLE__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
I2C_CR1_PE
)

	)

526 
	#__HAL_I2C_DISABLE
(
__HANDLE__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
I2C_CR1_PE
)

	)

541 
HAL_SètusTy≥Def
 
HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

542 
HAL_SètusTy≥Def
 
HAL_I2C_DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

543 
HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

544 
HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

547 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

548 
HAL_SètusTy≥Def
 
HAL_I2C_Regi°îCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
HAL_I2C_CÆlbackIDTy≥Def
 
CÆlbackID
, 
pI2C_CÆlbackTy≥Def
 
pCÆlback
);

549 
HAL_SètusTy≥Def
 
HAL_I2C_UnRegi°îCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
HAL_I2C_CÆlbackIDTy≥Def
 
CÆlbackID
);

551 
HAL_SètusTy≥Def
 
HAL_I2C_Regi°îAddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
pI2C_AddrCÆlbackTy≥Def
 
pCÆlback
);

552 
HAL_SètusTy≥Def
 
HAL_I2C_UnRegi°îAddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

563 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

564 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

565 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

566 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

567 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

568 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

569 
HAL_SètusTy≥Def
 
HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
);

572 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

573 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

574 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

575 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

576 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

577 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

579 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Seq_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
);

580 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Seq_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
);

581 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Seq_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
);

582 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Seq_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
);

583 
HAL_SètusTy≥Def
 
HAL_I2C_E«bÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
);

584 
HAL_SètusTy≥Def
 
HAL_I2C_DißbÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
);

585 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Ab‹t_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
);

588 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

589 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

590 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

591 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

592 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

593 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

595 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Seq_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
);

596 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Seq_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
);

597 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Seq_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
);

598 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Seq_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
);

607 
HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
);

608 
HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
);

609 
HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

610 
HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

611 
HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

612 
HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

613 
HAL_I2C_AddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 
Tøns„rDúe˘i⁄
, 
uöt16_t
 
AddrM©chCode
);

614 
HAL_I2C_Li°íC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

615 
HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

616 
HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

617 
HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

618 
HAL_I2C_Ab‹tC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

627 
HAL_I2C_SèãTy≥Def
 
HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
);

628 
HAL_I2C_ModeTy≥Def
 
HAL_I2C_GëMode
(
I2C_H™dÀTy≥Def
 *
hi2c
);

629 
uöt32_t
 
HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
);

644 
	#I2C_FLAG_MASK
 0x0000FFFFU

	)

645 
	#I2C_MIN_PCLK_FREQ_STANDARD
 2000000U

	)

646 
	#I2C_MIN_PCLK_FREQ_FAST
 4000000U

	)

656 
	#I2C_MIN_PCLK_FREQ
(
__PCLK__
, 
__SPEED__
Ë(((__SPEED__Ë<100000UË? ((__PCLK__Ë< 
I2C_MIN_PCLK_FREQ_STANDARD
Ë: ((__PCLK__Ë< 
I2C_MIN_PCLK_FREQ_FAST
))

	)

657 
	#I2C_CCR_CALCULATION
(
__PCLK__
, 
__SPEED__
, 
__COEFF__
Ë(((((__PCLK__Ë- 1U)/((__SPEED__Ë* (__COEFF__))Ë+ 1UË& 
I2C_CCR_CCR
)

	)

658 
	#I2C_FREQRANGE
(
__PCLK__
Ë((__PCLK__)/1000000U)

	)

659 
	#I2C_RISE_TIME
(
__FREQRANGE__
, 
__SPEED__
Ë(((__SPEED__Ë<100000UË? ((__FREQRANGE__Ë+ 1UË: ((((__FREQRANGE__Ë* 300UË/ 1000UË+ 1U))

	)

660 
	#I2C_SPEED_STANDARD
(
__PCLK__
, 
__SPEED__
Ë((
	`I2C_CCR_CALCULATION
((__PCLK__), (__SPEED__), 2UË< 4U)? 4U:I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U))

	)

661 
	#I2C_SPEED_FAST
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
Ë(((__DUTYCYCLE__Ë=
I2C_DUTYCYCLE_2
)? 
	`I2C_CCR_CALCULATION
((__PCLK__), (__SPEED__), 3UË: (I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 25UË| 
I2C_DUTYCYCLE_16_9
))

	)

662 
	#I2C_SPEED
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
Ë(((__SPEED__Ë<100000U)? (
	`I2C_SPEED_STANDARD
((__PCLK__), (__SPEED__))) : \

663 ((
	`I2C_SPEED_FAST
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
)Ë& 
I2C_CCR_CCR
) == 0U)? 1U : \

664 ((
	`I2C_SPEED_FAST
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
))Ë| 
I2C_CCR_FS
))

	)

666 
	#I2C_7BIT_ADD_WRITE
(
__ADDRESS__
Ë((
uöt8_t
)((__ADDRESS__Ë& (uöt8_t)(~
I2C_OAR1_ADD0
)))

	)

667 
	#I2C_7BIT_ADD_READ
(
__ADDRESS__
Ë((
uöt8_t
)((__ADDRESS__Ë| 
I2C_OAR1_ADD0
))

	)

669 
	#I2C_10BIT_ADDRESS
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)0x00FF)))

	)

670 
	#I2C_10BIT_HEADER_WRITE
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((uöt16_t)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)0x0300)Ë>> 7Ë| (uöt16_t)0x00F0)))

	)

671 
	#I2C_10BIT_HEADER_READ
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((uöt16_t)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)0x0300)Ë>> 7Ë| (uöt16_t)(0x00F1))))

	)

673 
	#I2C_MEM_ADD_MSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)0xFF00)Ë>> 8)))

	)

674 
	#I2C_MEM_ADD_LSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)0x00FF)))

	)

679 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DUTYCYCLE_2
) || \

680 ((
CYCLE
Ë=
I2C_DUTYCYCLE_16_9
))

	)

681 
	#IS_I2C_ADDRESSING_MODE
(
ADDRESS
Ë(((ADDRESSË=
I2C_ADDRESSINGMODE_7BIT
) || \

682 ((
ADDRESS
Ë=
I2C_ADDRESSINGMODE_10BIT
))

	)

683 
	#IS_I2C_DUAL_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_DUALADDRESS_DISABLE
) || \

684 ((
ADDRESS
Ë=
I2C_DUALADDRESS_ENABLE
))

	)

685 
	#IS_I2C_GENERAL_CALL
(
CALL
Ë(((CALLË=
I2C_GENERALCALL_DISABLE
) || \

686 ((
CALL
Ë=
I2C_GENERALCALL_ENABLE
))

	)

687 
	#IS_I2C_NO_STRETCH
(
STRETCH
Ë(((STRETCHË=
I2C_NOSTRETCH_DISABLE
) || \

688 ((
STRETCH
Ë=
I2C_NOSTRETCH_ENABLE
))

	)

689 
	#IS_I2C_MEMADD_SIZE
(
SIZE
Ë(((SIZEË=
I2C_MEMADD_SIZE_8BIT
) || \

690 ((
SIZE
Ë=
I2C_MEMADD_SIZE_16BIT
))

	)

691 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË> 0UË&& ((SPEEDË<400000U))

	)

692 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë(((ADDRESS1Ë& 0xFFFFFC00UË=0U)

	)

693 
	#IS_I2C_OWN_ADDRESS2
(
ADDRESS2
Ë(((ADDRESS2Ë& 0xFFFFFF01UË=0U)

	)

694 
	#IS_I2C_TRANSFER_OPTIONS_REQUEST
(
REQUEST
Ë(((REQUESTË=
I2C_FIRST_FRAME
) || \

695 ((
REQUEST
Ë=
I2C_FIRST_AND_NEXT_FRAME
) || \

696 ((
REQUEST
Ë=
I2C_NEXT_FRAME
) || \

697 ((
REQUEST
Ë=
I2C_FIRST_AND_LAST_FRAME
) || \

698 ((
REQUEST
Ë=
I2C_LAST_FRAME
) || \

699 ((
REQUEST
Ë=
I2C_LAST_FRAME_NO_STOP
) || \

700 
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
REQUEST
))

	)

702 
	#IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
REQUEST
Ë(((REQUESTË=
I2C_OTHER_FRAME
) || \

703 ((
REQUEST
Ë=
I2C_OTHER_AND_LAST_FRAME
))

	)

705 
	#I2C_CHECK_FLAG
(
__ISR__
, 
__FLAG__
Ë((((__ISR__Ë& ((__FLAG__Ë& 
I2C_FLAG_MASK
)Ë=((__FLAG__Ë& I2C_FLAG_MASK)Ë? 
SET
 : 
RESET
)

	)

706 
	#I2C_CHECK_IT_SOURCE
(
__CR1__
, 
__IT__
Ë((((__CR1__Ë& (__IT__)Ë=(__IT__)Ë? 
SET
 : 
RESET
)

	)

732 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pwr.h

20 #i‚de‡
__STM32F1xx_HAL_PWR_H


21 
	#__STM32F1xx_HAL_PWR_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

49 
uöt32_t
 
PVDLevñ
;

52 
uöt32_t
 
Mode
;

54 }
	tPWR_PVDTy≥Def
;

68 
	#PWR_EXTI_LINE_PVD
 ((
uöt32_t
)0x00010000Ë

	)

84 
	#PWR_PVDLEVEL_0
 
PWR_CR_PLS_2V2


	)

85 
	#PWR_PVDLEVEL_1
 
PWR_CR_PLS_2V3


	)

86 
	#PWR_PVDLEVEL_2
 
PWR_CR_PLS_2V4


	)

87 
	#PWR_PVDLEVEL_3
 
PWR_CR_PLS_2V5


	)

88 
	#PWR_PVDLEVEL_4
 
PWR_CR_PLS_2V6


	)

89 
	#PWR_PVDLEVEL_5
 
PWR_CR_PLS_2V7


	)

90 
	#PWR_PVDLEVEL_6
 
PWR_CR_PLS_2V8


	)

91 
	#PWR_PVDLEVEL_7
 
PWR_CR_PLS_2V9


	)

100 
	#PWR_PVD_MODE_NORMAL
 0x00000000U

	)

101 
	#PWR_PVD_MODE_IT_RISING
 0x00010001U

	)

102 
	#PWR_PVD_MODE_IT_FALLING
 0x00010002U

	)

103 
	#PWR_PVD_MODE_IT_RISING_FALLING
 0x00010003U

	)

104 
	#PWR_PVD_MODE_EVENT_RISING
 0x00020001U

	)

105 
	#PWR_PVD_MODE_EVENT_FALLING
 0x00020002U

	)

106 
	#PWR_PVD_MODE_EVENT_RISING_FALLING
 0x00020003U

	)

117 
	#PWR_WAKEUP_PIN1
 
PWR_CSR_EWUP


	)

126 
	#PWR_MAINREGULATOR_ON
 0x00000000U

	)

127 
	#PWR_LOWPOWERREGULATOR_ON
 
PWR_CR_LPDS


	)

136 
	#PWR_SLEEPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

137 
	#PWR_SLEEPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

146 
	#PWR_STOPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

147 
	#PWR_STOPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

156 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

157 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

158 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

189 
	#__HAL_PWR_GET_FLAG
(
__FLAG__
Ë((
PWR
->
CSR
 & (__FLAG__)Ë=(__FLAG__))

	)

197 
	#__HAL_PWR_CLEAR_FLAG
(
__FLAG__
Ë
	`SET_BIT
(
PWR
->
CR
, ((__FLAG__Ë<< 2))

	)

203 
	#__HAL_PWR_PVD_EXTI_ENABLE_IT
(Ë
	`SET_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

209 
	#__HAL_PWR_PVD_EXTI_DISABLE_IT
(Ë
	`CLEAR_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

215 
	#__HAL_PWR_PVD_EXTI_ENABLE_EVENT
(Ë
	`SET_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

221 
	#__HAL_PWR_PVD_EXTI_DISABLE_EVENT
(Ë
	`CLEAR_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

228 
	#__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

235 
	#__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

242 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

249 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

255 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

	)

262 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

	)

270 
	#__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
PWR_EXTI_LINE_PVD
))

	)

276 
	#__HAL_PWR_PVD_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
PWR_EXTI_LINE_PVD
))

	)

282 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
PWR_EXTI_LINE_PVD
)

	)

291 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLEVEL_0
Ë|| ((LEVELË=
PWR_PVDLEVEL_1
)|| \

292 ((
LEVEL
Ë=
PWR_PVDLEVEL_2
Ë|| ((LEVELË=
PWR_PVDLEVEL_3
)|| \

293 ((
LEVEL
Ë=
PWR_PVDLEVEL_4
Ë|| ((LEVELË=
PWR_PVDLEVEL_5
)|| \

294 ((
LEVEL
Ë=
PWR_PVDLEVEL_6
Ë|| ((LEVELË=
PWR_PVDLEVEL_7
))

	)

297 
	#IS_PWR_PVD_MODE
(
MODE
Ë(((MODEË=
PWR_PVD_MODE_IT_RISING
)|| ((MODEË=
PWR_PVD_MODE_IT_FALLING
) || \

298 ((
MODE
Ë=
PWR_PVD_MODE_IT_RISING_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING
) || \

299 ((
MODE
Ë=
PWR_PVD_MODE_EVENT_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING_FALLING
) || \

300 ((
MODE
Ë=
PWR_PVD_MODE_NORMAL
))

	)

302 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
))

	)

304 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MAINREGULATOR_ON
) || \

305 ((
REGULATOR
Ë=
PWR_LOWPOWERREGULATOR_ON
))

	)

307 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPENTRY_WFI
Ë|| ((ENTRYË=
PWR_SLEEPENTRY_WFE
))

	)

309 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPENTRY_WFI
Ë|| ((ENTRYË=
PWR_STOPENTRY_WFE
))

	)

328 
HAL_PWR_DeInô
();

329 
HAL_PWR_E«bÀBkUpAc˚ss
();

330 
HAL_PWR_DißbÀBkUpAc˚ss
();

341 
HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
);

343 
HAL_PWR_E«bÀPVD
();

344 
HAL_PWR_DißbÀPVD
();

347 
HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

348 
HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

351 
HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
);

352 
HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
);

353 
HAL_PWR_E¡îSTANDBYMode
();

355 
HAL_PWR_E«bÀSÀïOnExô
();

356 
HAL_PWR_DißbÀSÀïOnExô
();

357 
HAL_PWR_E«bÀSEVOnPíd
();

358 
HAL_PWR_DißbÀSEVOnPíd
();

362 
HAL_PWR_PVD_IRQH™dÀr
();

363 
HAL_PWR_PVDCÆlback
();

380 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h

19 #i‚de‡
__STM32F1xx_HAL_RCC_H


20 
	#__STM32F1xx_HAL_RCC_H


	)

22 #ifde‡
__˝lu•lus


27 
	~"°m32f1xx_hÆ_def.h
"

49 
uöt32_t
 
PLLSèã
;

52 
uöt32_t
 
PLLSour˚
;

55 
uöt32_t
 
PLLMUL
;

57 } 
	tRCC_PLLInôTy≥Def
;

64 
uöt32_t
 
ClockTy≥
;

67 
uöt32_t
 
SYSCLKSour˚
;

70 
uöt32_t
 
AHBCLKDividî
;

73 
uöt32_t
 
APB1CLKDividî
;

76 
uöt32_t
 
APB2CLKDividî
;

78 } 
	tRCC_ClkInôTy≥Def
;

93 
	#RCC_PLLSOURCE_HSI_DIV2
 0x00000000U

	)

94 
	#RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC


	)

103 
	#RCC_OSCILLATORTYPE_NONE
 0x00000000U

	)

104 
	#RCC_OSCILLATORTYPE_HSE
 0x00000001U

	)

105 
	#RCC_OSCILLATORTYPE_HSI
 0x00000002U

	)

106 
	#RCC_OSCILLATORTYPE_LSE
 0x00000004U

	)

107 
	#RCC_OSCILLATORTYPE_LSI
 0x00000008U

	)

115 
	#RCC_HSE_OFF
 0x00000000U

	)

116 
	#RCC_HSE_ON
 
RCC_CR_HSEON


	)

117 
	#RCC_HSE_BYPASS
 ((
uöt32_t
)(
RCC_CR_HSEBYP
 | 
RCC_CR_HSEON
)Ë

	)

125 
	#RCC_LSE_OFF
 0x00000000U

	)

126 
	#RCC_LSE_ON
 
RCC_BDCR_LSEON


	)

127 
	#RCC_LSE_BYPASS
 ((
uöt32_t
)(
RCC_BDCR_LSEBYP
 | 
RCC_BDCR_LSEON
)Ë

	)

136 
	#RCC_HSI_OFF
 0x00000000U

	)

137 
	#RCC_HSI_ON
 
RCC_CR_HSION


	)

139 
	#RCC_HSICALIBRATION_DEFAULT
 0x10U

	)

148 
	#RCC_LSI_OFF
 0x00000000U

	)

149 
	#RCC_LSI_ON
 
RCC_CSR_LSION


	)

158 
	#RCC_PLL_NONE
 0x00000000U

	)

159 
	#RCC_PLL_OFF
 0x00000001U

	)

160 
	#RCC_PLL_ON
 0x00000002U

	)

169 
	#RCC_CLOCKTYPE_SYSCLK
 0x00000001U

	)

170 
	#RCC_CLOCKTYPE_HCLK
 0x00000002U

	)

171 
	#RCC_CLOCKTYPE_PCLK1
 0x00000004U

	)

172 
	#RCC_CLOCKTYPE_PCLK2
 0x00000008U

	)

181 
	#RCC_SYSCLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

182 
	#RCC_SYSCLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

183 
	#RCC_SYSCLKSOURCE_PLLCLK
 
RCC_CFGR_SW_PLL


	)

192 
	#RCC_SYSCLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

193 
	#RCC_SYSCLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

194 
	#RCC_SYSCLKSOURCE_STATUS_PLLCLK
 
RCC_CFGR_SWS_PLL


	)

203 
	#RCC_SYSCLK_DIV1
 
RCC_CFGR_HPRE_DIV1


	)

204 
	#RCC_SYSCLK_DIV2
 
RCC_CFGR_HPRE_DIV2


	)

205 
	#RCC_SYSCLK_DIV4
 
RCC_CFGR_HPRE_DIV4


	)

206 
	#RCC_SYSCLK_DIV8
 
RCC_CFGR_HPRE_DIV8


	)

207 
	#RCC_SYSCLK_DIV16
 
RCC_CFGR_HPRE_DIV16


	)

208 
	#RCC_SYSCLK_DIV64
 
RCC_CFGR_HPRE_DIV64


	)

209 
	#RCC_SYSCLK_DIV128
 
RCC_CFGR_HPRE_DIV128


	)

210 
	#RCC_SYSCLK_DIV256
 
RCC_CFGR_HPRE_DIV256


	)

211 
	#RCC_SYSCLK_DIV512
 
RCC_CFGR_HPRE_DIV512


	)

220 
	#RCC_HCLK_DIV1
 
RCC_CFGR_PPRE1_DIV1


	)

221 
	#RCC_HCLK_DIV2
 
RCC_CFGR_PPRE1_DIV2


	)

222 
	#RCC_HCLK_DIV4
 
RCC_CFGR_PPRE1_DIV4


	)

223 
	#RCC_HCLK_DIV8
 
RCC_CFGR_PPRE1_DIV8


	)

224 
	#RCC_HCLK_DIV16
 
RCC_CFGR_PPRE1_DIV16


	)

233 
	#RCC_RTCCLKSOURCE_NO_CLK
 0x00000000U

	)

234 
	#RCC_RTCCLKSOURCE_LSE
 
RCC_BDCR_RTCSEL_LSE


	)

235 
	#RCC_RTCCLKSOURCE_LSI
 
RCC_BDCR_RTCSEL_LSI


	)

236 
	#RCC_RTCCLKSOURCE_HSE_DIV128
 
RCC_BDCR_RTCSEL_HSE


	)

245 
	#RCC_MCO1
 0x00000000U

	)

246 
	#RCC_MCO
 
RCC_MCO1


	)

255 
	#RCC_MCODIV_1
 0x00000000U

	)

264 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)
RCC_CIR_LSIRDYF
Ë

	)

265 
	#RCC_IT_LSERDY
 ((
uöt8_t
)
RCC_CIR_LSERDYF
Ë

	)

266 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)
RCC_CIR_HSIRDYF
Ë

	)

267 
	#RCC_IT_HSERDY
 ((
uöt8_t
)
RCC_CIR_HSERDYF
Ë

	)

268 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)
RCC_CIR_PLLRDYF
Ë

	)

269 
	#RCC_IT_CSS
 ((
uöt8_t
)
RCC_CIR_CSSF
Ë

	)

284 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_HSIRDY_Pos
)Ë

	)

285 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_HSERDY_Pos
)Ë

	)

286 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_PLLRDY_Pos
)Ë

	)

289 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_LSIRDY_Pos
)Ë

	)

290 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_PINRSTF_Pos
)Ë

	)

291 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_PORRSTF_Pos
)Ë

	)

292 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_SFTRSTF_Pos
)Ë

	)

293 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_IWDGRSTF_Pos
)Ë

	)

294 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_WWDGRSTF_Pos
)Ë

	)

295 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_LPWRRSTF_Pos
)Ë

	)

298 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)((
BDCR_REG_INDEX
 << 5UË| 
RCC_BDCR_LSERDY_Pos
)Ë

	)

321 
	#__HAL_RCC_DMA1_CLK_ENABLE
() do { \

322 
__IO
 
uöt32_t
 
tm¥eg
; \

323 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

325 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

326 
	`UNUSED
(
tm¥eg
); \

327 } 0U)

	)

329 
	#__HAL_RCC_SRAM_CLK_ENABLE
() do { \

330 
__IO
 
uöt32_t
 
tm¥eg
; \

331 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

333 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

334 
	`UNUSED
(
tm¥eg
); \

335 } 0U)

	)

337 
	#__HAL_RCC_FLITF_CLK_ENABLE
() do { \

338 
__IO
 
uöt32_t
 
tm¥eg
; \

339 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

341 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

342 
	`UNUSED
(
tm¥eg
); \

343 } 0U)

	)

345 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

346 
__IO
 
uöt32_t
 
tm¥eg
; \

347 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

349 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

350 
	`UNUSED
(
tm¥eg
); \

351 } 0U)

	)

353 
	#__HAL_RCC_DMA1_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_DMA1EN
))

	)

354 
	#__HAL_RCC_SRAM_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_SRAMEN
))

	)

355 
	#__HAL_RCC_FLITF_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_FLITFEN
))

	)

356 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_CRCEN
))

	)

370 
	#__HAL_RCC_DMA1_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)Ë!
RESET
)

	)

371 
	#__HAL_RCC_DMA1_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)Ë=
RESET
)

	)

372 
	#__HAL_RCC_SRAM_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)Ë!
RESET
)

	)

373 
	#__HAL_RCC_SRAM_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)Ë=
RESET
)

	)

374 
	#__HAL_RCC_FLITF_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)Ë!
RESET
)

	)

375 
	#__HAL_RCC_FLITF_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)Ë=
RESET
)

	)

376 
	#__HAL_RCC_CRC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)Ë!
RESET
)

	)

377 
	#__HAL_RCC_CRC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)Ë=
RESET
)

	)

390 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

391 
__IO
 
uöt32_t
 
tm¥eg
; \

392 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

394 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

395 
	`UNUSED
(
tm¥eg
); \

396 } 0U)

	)

398 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

399 
__IO
 
uöt32_t
 
tm¥eg
; \

400 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

402 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

403 
	`UNUSED
(
tm¥eg
); \

404 } 0U)

	)

406 
	#__HAL_RCC_WWDG_CLK_ENABLE
() do { \

407 
__IO
 
uöt32_t
 
tm¥eg
; \

408 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

410 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

411 
	`UNUSED
(
tm¥eg
); \

412 } 0U)

	)

414 
	#__HAL_RCC_USART2_CLK_ENABLE
() do { \

415 
__IO
 
uöt32_t
 
tm¥eg
; \

416 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

418 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

419 
	`UNUSED
(
tm¥eg
); \

420 } 0U)

	)

422 
	#__HAL_RCC_I2C1_CLK_ENABLE
() do { \

423 
__IO
 
uöt32_t
 
tm¥eg
; \

424 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

426 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

427 
	`UNUSED
(
tm¥eg
); \

428 } 0U)

	)

430 
	#__HAL_RCC_BKP_CLK_ENABLE
() do { \

431 
__IO
 
uöt32_t
 
tm¥eg
; \

432 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

434 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

435 
	`UNUSED
(
tm¥eg
); \

436 } 0U)

	)

438 
	#__HAL_RCC_PWR_CLK_ENABLE
() do { \

439 
__IO
 
uöt32_t
 
tm¥eg
; \

440 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

442 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

443 
	`UNUSED
(
tm¥eg
); \

444 } 0U)

	)

446 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

447 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

448 
	#__HAL_RCC_WWDG_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_WWDGEN
))

	)

449 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART2EN
))

	)

450 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C1EN
))

	)

452 
	#__HAL_RCC_BKP_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_BKPEN
))

	)

453 
	#__HAL_RCC_PWR_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_PWREN
))

	)

467 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)Ë!
RESET
)

	)

468 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)Ë=
RESET
)

	)

469 
	#__HAL_RCC_TIM3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)Ë!
RESET
)

	)

470 
	#__HAL_RCC_TIM3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)Ë=
RESET
)

	)

471 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)Ë!
RESET
)

	)

472 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)Ë=
RESET
)

	)

473 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)Ë!
RESET
)

	)

474 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)Ë=
RESET
)

	)

475 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)Ë!
RESET
)

	)

476 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)Ë=
RESET
)

	)

477 
	#__HAL_RCC_BKP_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)Ë!
RESET
)

	)

478 
	#__HAL_RCC_BKP_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)Ë=
RESET
)

	)

479 
	#__HAL_RCC_PWR_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)Ë!
RESET
)

	)

480 
	#__HAL_RCC_PWR_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)Ë=
RESET
)

	)

493 
	#__HAL_RCC_AFIO_CLK_ENABLE
() do { \

494 
__IO
 
uöt32_t
 
tm¥eg
; \

495 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

497 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

498 
	`UNUSED
(
tm¥eg
); \

499 } 0U)

	)

501 
	#__HAL_RCC_GPIOA_CLK_ENABLE
() do { \

502 
__IO
 
uöt32_t
 
tm¥eg
; \

503 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

505 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

506 
	`UNUSED
(
tm¥eg
); \

507 } 0U)

	)

509 
	#__HAL_RCC_GPIOB_CLK_ENABLE
() do { \

510 
__IO
 
uöt32_t
 
tm¥eg
; \

511 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

513 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

514 
	`UNUSED
(
tm¥eg
); \

515 } 0U)

	)

517 
	#__HAL_RCC_GPIOC_CLK_ENABLE
() do { \

518 
__IO
 
uöt32_t
 
tm¥eg
; \

519 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

521 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

522 
	`UNUSED
(
tm¥eg
); \

523 } 0U)

	)

525 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

526 
__IO
 
uöt32_t
 
tm¥eg
; \

527 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

529 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

530 
	`UNUSED
(
tm¥eg
); \

531 } 0U)

	)

533 
	#__HAL_RCC_ADC1_CLK_ENABLE
() do { \

534 
__IO
 
uöt32_t
 
tm¥eg
; \

535 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

537 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

538 
	`UNUSED
(
tm¥eg
); \

539 } 0U)

	)

541 
	#__HAL_RCC_TIM1_CLK_ENABLE
() do { \

542 
__IO
 
uöt32_t
 
tm¥eg
; \

543 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

545 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

546 
	`UNUSED
(
tm¥eg
); \

547 } 0U)

	)

549 
	#__HAL_RCC_SPI1_CLK_ENABLE
() do { \

550 
__IO
 
uöt32_t
 
tm¥eg
; \

551 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

553 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

554 
	`UNUSED
(
tm¥eg
); \

555 } 0U)

	)

557 
	#__HAL_RCC_USART1_CLK_ENABLE
() do { \

558 
__IO
 
uöt32_t
 
tm¥eg
; \

559 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

561 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

562 
	`UNUSED
(
tm¥eg
); \

563 } 0U)

	)

565 
	#__HAL_RCC_AFIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_AFIOEN
))

	)

566 
	#__HAL_RCC_GPIOA_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPAEN
))

	)

567 
	#__HAL_RCC_GPIOB_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPBEN
))

	)

568 
	#__HAL_RCC_GPIOC_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPCEN
))

	)

569 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPDEN
))

	)

570 
	#__HAL_RCC_ADC1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC1EN
))

	)

572 
	#__HAL_RCC_TIM1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM1EN
))

	)

573 
	#__HAL_RCC_SPI1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI1EN
))

	)

574 
	#__HAL_RCC_USART1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_USART1EN
))

	)

588 
	#__HAL_RCC_AFIO_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)Ë!
RESET
)

	)

589 
	#__HAL_RCC_AFIO_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)Ë=
RESET
)

	)

590 
	#__HAL_RCC_GPIOA_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)Ë!
RESET
)

	)

591 
	#__HAL_RCC_GPIOA_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)Ë=
RESET
)

	)

592 
	#__HAL_RCC_GPIOB_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)Ë!
RESET
)

	)

593 
	#__HAL_RCC_GPIOB_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)Ë=
RESET
)

	)

594 
	#__HAL_RCC_GPIOC_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)Ë!
RESET
)

	)

595 
	#__HAL_RCC_GPIOC_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)Ë=
RESET
)

	)

596 
	#__HAL_RCC_GPIOD_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)Ë!
RESET
)

	)

597 
	#__HAL_RCC_GPIOD_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)Ë=
RESET
)

	)

598 
	#__HAL_RCC_ADC1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)Ë!
RESET
)

	)

599 
	#__HAL_RCC_ADC1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)Ë=
RESET
)

	)

600 
	#__HAL_RCC_TIM1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)Ë!
RESET
)

	)

601 
	#__HAL_RCC_TIM1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)Ë=
RESET
)

	)

602 
	#__HAL_RCC_SPI1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)Ë!
RESET
)

	)

603 
	#__HAL_RCC_SPI1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)Ë=
RESET
)

	)

604 
	#__HAL_RCC_USART1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)Ë!
RESET
)

	)

605 
	#__HAL_RCC_USART1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)Ë=
RESET
)

	)

615 
	#__HAL_RCC_APB1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0xFFFFFFFFU)

	)

616 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

617 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

618 
	#__HAL_RCC_WWDG_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_WWDGRST
))

	)

619 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART2RST
))

	)

620 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C1RST
))

	)

622 
	#__HAL_RCC_BKP_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_BKPRST
))

	)

623 
	#__HAL_RCC_PWR_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_PWRRST
))

	)

625 
	#__HAL_RCC_APB1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0x00)

	)

626 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

627 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

628 
	#__HAL_RCC_WWDG_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_WWDGRST
))

	)

629 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART2RST
))

	)

630 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C1RST
))

	)

632 
	#__HAL_RCC_BKP_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_BKPRST
))

	)

633 
	#__HAL_RCC_PWR_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_PWRRST
))

	)

643 
	#__HAL_RCC_APB2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFFU)

	)

644 
	#__HAL_RCC_AFIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_AFIORST
))

	)

645 
	#__HAL_RCC_GPIOA_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPARST
))

	)

646 
	#__HAL_RCC_GPIOB_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPBRST
))

	)

647 
	#__HAL_RCC_GPIOC_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPCRST
))

	)

648 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPDRST
))

	)

649 
	#__HAL_RCC_ADC1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC1RST
))

	)

651 
	#__HAL_RCC_TIM1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM1RST
))

	)

652 
	#__HAL_RCC_SPI1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI1RST
))

	)

653 
	#__HAL_RCC_USART1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_USART1RST
))

	)

655 
	#__HAL_RCC_APB2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0x00)

	)

656 
	#__HAL_RCC_AFIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_AFIORST
))

	)

657 
	#__HAL_RCC_GPIOA_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPARST
))

	)

658 
	#__HAL_RCC_GPIOB_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPBRST
))

	)

659 
	#__HAL_RCC_GPIOC_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPCRST
))

	)

660 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPDRST
))

	)

661 
	#__HAL_RCC_ADC1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC1RST
))

	)

663 
	#__HAL_RCC_TIM1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM1RST
))

	)

664 
	#__HAL_RCC_SPI1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI1RST
))

	)

665 
	#__HAL_RCC_USART1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_USART1RST
))

	)

685 
	#__HAL_RCC_HSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
ENABLE
)

	)

686 
	#__HAL_RCC_HSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
DISABLE
)

	)

695 
	#__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
_HSICALIBRATIONVALUE_
) \

696 (
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (
uöt32_t
)(
_HSICALIBRATIONVALUE_
Ë<< 
RCC_CR_HSITRIM_Pos
))

	)

711 
	#__HAL_RCC_LSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
ENABLE
)

	)

718 
	#__HAL_RCC_LSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
DISABLE
)

	)

750 
	#__HAL_RCC_HSE_CONFIG
(
__STATE__
) \

752 i‡((
__STATE__
Ë=
RCC_HSE_ON
) \

754 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

756 i‡((
__STATE__
Ë=
RCC_HSE_OFF
) \

758 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

759 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

761 i‡((
__STATE__
Ë=
RCC_HSE_BYPASS
) \

763 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

764 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

768 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

769 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

771 }0U)

	)

798 
	#__HAL_RCC_LSE_CONFIG
(
__STATE__
) \

800 i‡((
__STATE__
Ë=
RCC_LSE_ON
) \

802 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

804 i‡((
__STATE__
Ë=
RCC_LSE_OFF
) \

806 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

807 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

809 i‡((
__STATE__
Ë=
RCC_LSE_BYPASS
) \

811 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

812 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

816 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

817 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

819 }0U)

	)

835 
	#__HAL_RCC_PLL_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
ENABLE
)

	)

840 
	#__HAL_RCC_PLL_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
DISABLE
)

	)

872 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSOURCE__
, 
__PLLMUL__
)\

873 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
),((
__RCC_PLLSOURCE__
Ë| (
__PLLMUL__
Ë))

	)

881 
	#__HAL_RCC_GET_PLL_OSCSOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
)))

	)

899 
	#__HAL_RCC_SYSCLK_CONFIG
(
__SYSCLKSOURCE__
) \

900 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, (
__SYSCLKSOURCE__
))

	)

909 
	#__HAL_RCC_GET_SYSCLK_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
,
RCC_CFGR_SWS
)))

	)

919 #i‡ 
deföed
(
RCC_CFGR_MCO_3
)

951 
	#__HAL_RCC_MCO1_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
) \

952 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_MCO
, (
__MCOCLKSOURCE__
))

	)

985 
	#__HAL_RCC_RTC_CONFIG
(
__RTC_CLKSOURCE__
Ë
	`MODIFY_REG
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
, (__RTC_CLKSOURCE__))

	)

994 
	#__HAL_RCC_GET_RTC_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
))

	)

999 
	#__HAL_RCC_RTC_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
ENABLE
)

	)

1004 
	#__HAL_RCC_RTC_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
DISABLE
)

	)

1010 
	#__HAL_RCC_BACKUPRESET_FORCE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
ENABLE
)

	)

1014 
	#__HAL_RCC_BACKUPRESET_RELEASE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
DISABLE
)

	)

1041 
	#__HAL_RCC_ENABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 |(__INTERRUPT__))

	)

1059 
	#__HAL_RCC_DISABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 &(uöt8_t)(~(__INTERRUPT__)))

	)

1078 
	#__HAL_RCC_CLEAR_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE2_ADDRESS
 = (__INTERRUPT__))

	)

1098 
	#__HAL_RCC_GET_IT
(
__INTERRUPT__
Ë((
RCC
->
CIR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

1104 
	#__HAL_RCC_CLEAR_RESET_FLAGS
(Ë(*(
__IO
 
uöt32_t
 *)
RCC_CSR_RMVF_BB
 = 
ENABLE
)

	)

1129 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
Ë(((((__FLAG__Ë>> 5UË=
CR_REG_INDEX
)? 
RCC
->
CR
 : \

1130 ((((
__FLAG__
Ë>> 5UË=
BDCR_REG_INDEX
)? 
RCC
->
BDCR
 : \

1131 
RCC
->
CSR
)Ë& (1U << ((
__FLAG__
Ë& 
RCC_FLAG_MASK
)))

	)

1142 
	~"°m32f1xx_hÆ_rcc_ex.h
"

1154 
HAL_SètusTy≥Def
 
HAL_RCC_DeInô
();

1155 
HAL_SètusTy≥Def
 
HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1156 
HAL_SètusTy≥Def
 
HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
);

1167 
HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
);

1168 
HAL_RCC_E«bÀCSS
();

1169 
HAL_RCC_DißbÀCSS
();

1170 
uöt32_t
 
HAL_RCC_GëSysClockFªq
();

1171 
uöt32_t
 
HAL_RCC_GëHCLKFªq
();

1172 
uöt32_t
 
HAL_RCC_GëPCLK1Fªq
();

1173 
uöt32_t
 
HAL_RCC_GëPCLK2Fªq
();

1174 
HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1175 
HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
);

1178 
HAL_RCC_NMI_IRQH™dÀr
();

1181 
HAL_RCC_CSSCÆlback
();

1200 
	#RCC_DBP_TIMEOUT_VALUE
 100U

	)

1202 
	#RCC_LSE_TIMEOUT_VALUE
 
LSE_STARTUP_TIMEOUT


	)

1203 
	#CLOCKSWITCH_TIMEOUT_VALUE
 5000

	)

1204 
	#HSE_TIMEOUT_VALUE
 
HSE_STARTUP_TIMEOUT


	)

1205 
	#HSI_TIMEOUT_VALUE
 2U

	)

1206 
	#LSI_TIMEOUT_VALUE
 2U

	)

1207 
	#PLL_TIMEOUT_VALUE
 2U

	)

1216 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

1217 
	#RCC_CR_OFFSET
 0x00U

	)

1218 
	#RCC_CFGR_OFFSET
 0x04U

	)

1219 
	#RCC_CIR_OFFSET
 0x08U

	)

1220 
	#RCC_BDCR_OFFSET
 0x20U

	)

1221 
	#RCC_CSR_OFFSET
 0x24U

	)

1231 
	#RCC_CR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CR_OFFSET
)

	)

1232 
	#RCC_CFGR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CFGR_OFFSET
)

	)

1233 
	#RCC_CIR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CIR_OFFSET
)

	)

1234 
	#RCC_BDCR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_BDCR_OFFSET
)

	)

1235 
	#RCC_CSR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CSR_OFFSET
)

	)

1239 
	#RCC_HSION_BIT_NUMBER
 
RCC_CR_HSION_Pos


	)

1240 
	#RCC_CR_HSION_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_HSION_BIT_NUMBER
 * 4U)))

	)

1242 
	#RCC_HSEON_BIT_NUMBER
 
RCC_CR_HSEON_Pos


	)

1243 
	#RCC_CR_HSEON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_HSEON_BIT_NUMBER
 * 4U)))

	)

1245 
	#RCC_CSSON_BIT_NUMBER
 
RCC_CR_CSSON_Pos


	)

1246 
	#RCC_CR_CSSON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_CSSON_BIT_NUMBER
 * 4U)))

	)

1248 
	#RCC_PLLON_BIT_NUMBER
 
RCC_CR_PLLON_Pos


	)

1249 
	#RCC_CR_PLLON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_PLLON_BIT_NUMBER
 * 4U)))

	)

1253 
	#RCC_LSION_BIT_NUMBER
 
RCC_CSR_LSION_Pos


	)

1254 
	#RCC_CSR_LSION_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32UË+ (
RCC_LSION_BIT_NUMBER
 * 4U)))

	)

1257 
	#RCC_RMVF_BIT_NUMBER
 
RCC_CSR_RMVF_Pos


	)

1258 
	#RCC_CSR_RMVF_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32UË+ (
RCC_RMVF_BIT_NUMBER
 * 4U)))

	)

1262 
	#RCC_LSEON_BIT_NUMBER
 
RCC_BDCR_LSEON_Pos


	)

1263 
	#RCC_BDCR_LSEON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_LSEON_BIT_NUMBER
 * 4U)))

	)

1266 
	#RCC_LSEBYP_BIT_NUMBER
 
RCC_BDCR_LSEBYP_Pos


	)

1267 
	#RCC_BDCR_LSEBYP_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_LSEBYP_BIT_NUMBER
 * 4U)))

	)

1270 
	#RCC_RTCEN_BIT_NUMBER
 
RCC_BDCR_RTCEN_Pos


	)

1271 
	#RCC_BDCR_RTCEN_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_RTCEN_BIT_NUMBER
 * 4U)))

	)

1274 
	#RCC_BDRST_BIT_NUMBER
 
RCC_BDCR_BDRST_Pos


	)

1275 
	#RCC_BDCR_BDRST_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_BDRST_BIT_NUMBER
 * 4U)))

	)

1282 
	#RCC_CR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CR_OFFSET
 + 0x02U))

	)

1285 
	#RCC_CIR_BYTE1_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x01U))

	)

1288 
	#RCC_CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x02U))

	)

1291 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

1292 
	#BDCR_REG_INDEX
 ((
uöt8_t
)2)

	)

1293 
	#CSR_REG_INDEX
 ((
uöt8_t
)3)

	)

1295 
	#RCC_FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

1307 
	#__HAL_RCC_SYSCFG_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

1308 
	#__HAL_RCC_SYSCFG_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

1309 
	#__HAL_RCC_SYSCFG_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

1310 
	#__HAL_RCC_SYSCFG_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

1315 
	#IS_RCC_PLLSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PLLSOURCE_HSI_DIV2
) || \

1316 ((
__SOURCE__
Ë=
RCC_PLLSOURCE_HSE
))

	)

1317 
	#IS_RCC_OSCILLATORTYPE
(
__OSCILLATOR__
Ë(((__OSCILLATOR__Ë=
RCC_OSCILLATORTYPE_NONE
) || \

1318 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE) || \

1319 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI) || \

1320 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI) || \

1321 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSE
Ë=RCC_OSCILLATORTYPE_LSE))

	)

1322 
	#IS_RCC_HSE
(
__HSE__
Ë(((__HSE__Ë=
RCC_HSE_OFF
Ë|| ((__HSE__Ë=
RCC_HSE_ON
) || \

1323 ((
__HSE__
Ë=
RCC_HSE_BYPASS
))

	)

1324 
	#IS_RCC_LSE
(
__LSE__
Ë(((__LSE__Ë=
RCC_LSE_OFF
Ë|| ((__LSE__Ë=
RCC_LSE_ON
) || \

1325 ((
__LSE__
Ë=
RCC_LSE_BYPASS
))

	)

1326 
	#IS_RCC_HSI
(
__HSI__
Ë(((__HSI__Ë=
RCC_HSI_OFF
Ë|| ((__HSI__Ë=
RCC_HSI_ON
))

	)

1327 
	#IS_RCC_CALIBRATION_VALUE
(
__VALUE__
Ë((__VALUE__Ë<0x1FU)

	)

1328 
	#IS_RCC_LSI
(
__LSI__
Ë(((__LSI__Ë=
RCC_LSI_OFF
Ë|| ((__LSI__Ë=
RCC_LSI_ON
))

	)

1329 
	#IS_RCC_PLL
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL_NONE
Ë|| ((__PLL__Ë=
RCC_PLL_OFF
) || \

1330 ((
__PLL__
Ë=
RCC_PLL_ON
))

	)

1332 
	#IS_RCC_CLOCKTYPE
(
CLK
Ë((((CLKË& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK) || \

1333 (((
CLK
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK) || \

1334 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1) || \

1335 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK2
Ë=RCC_CLOCKTYPE_PCLK2))

	)

1336 
	#IS_RCC_SYSCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_HSI
) || \

1337 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_HSE
) || \

1338 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_PLLCLK
))

	)

1339 
	#IS_RCC_SYSCLKSOURCE_STATUS
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
) || \

1340 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
) || \

1341 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
))

	)

1342 
	#IS_RCC_HCLK
(
__HCLK__
Ë(((__HCLK__Ë=
RCC_SYSCLK_DIV1
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV2
) || \

1343 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV4
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV8
) || \

1344 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV16
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV64
) || \

1345 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV128
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV256
) || \

1346 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV512
))

	)

1347 
	#IS_RCC_PCLK
(
__PCLK__
Ë(((__PCLK__Ë=
RCC_HCLK_DIV1
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV2
) || \

1348 ((
__PCLK__
Ë=
RCC_HCLK_DIV4
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV8
) || \

1349 ((
__PCLK__
Ë=
RCC_HCLK_DIV16
))

	)

1350 
	#IS_RCC_MCO
(
__MCO__
Ë((__MCO__Ë=
RCC_MCO
)

	)

1351 
	#IS_RCC_MCODIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_MCODIV_1
))

	)

1352 
	#IS_RCC_RTCCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_RTCCLKSOURCE_NO_CLK
) || \

1353 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSE
) || \

1354 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSI
) || \

1355 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV128
))

	)

1369 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h

19 #i‚de‡
__STM32F1xx_HAL_RCC_EX_H


20 
	#__STM32F1xx_HAL_RCC_EX_H


	)

22 #ifde‡
__˝lu•lus


27 
	~"°m32f1xx_hÆ_def.h
"

41 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

44 
	#PLLI2SON_BITNUMBER
 
RCC_CR_PLL3ON_Pos


	)

45 
	#RCC_CR_PLLI2SON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
PLLI2SON_BITNUMBER
 * 4U)))

	)

47 
	#PLL2ON_BITNUMBER
 
RCC_CR_PLL2ON_Pos


	)

48 
	#RCC_CR_PLL2ON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
PLL2ON_BITNUMBER
 * 4U)))

	)

50 
	#PLLI2S_TIMEOUT_VALUE
 100U

	)

51 
	#PLL2_TIMEOUT_VALUE
 100U

	)

56 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

66 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

67 
	#IS_RCC_PREDIV1_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PREDIV1_SOURCE_HSE
) || \

68 ((
__SOURCE__
Ë=
RCC_PREDIV1_SOURCE_PLL2
))

	)

71 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

72 || 
deföed
(
STM32F100xE
)

73 
	#IS_RCC_HSE_PREDIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV2
) || \

74 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV3
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV4
) || \

75 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV5
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV6
) || \

76 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV7
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV8
) || \

77 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV9
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV10
) || \

78 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV11
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV12
) || \

79 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV13
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV14
) || \

80 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV15
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV16
))

	)

83 
	#IS_RCC_HSE_PREDIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV2
))

	)

86 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

87 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL4
Ë|| ((__MUL__Ë=
RCC_PLL_MUL5
) || \

88 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL7
) || \

89 ((
__MUL__
Ë=
RCC_PLL_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL_MUL9
) || \

90 ((
__MUL__
Ë=
RCC_PLL_MUL6_5
))

	)

92 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_HSI
) \

93 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) \

94 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_PLL2CLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLL3CLK
) \

95 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_PLL3CLK_DIV2
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_EXT_HSE
) \

96 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_NOCLOCK
))

	)

99 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL2
Ë|| ((__MUL__Ë=
RCC_PLL_MUL3
) || \

100 ((
__MUL__
Ë=
RCC_PLL_MUL4
Ë|| ((__MUL__Ë=
RCC_PLL_MUL5
) || \

101 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL7
) || \

102 ((
__MUL__
Ë=
RCC_PLL_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL_MUL9
) || \

103 ((
__MUL__
Ë=
RCC_PLL_MUL10
Ë|| ((__MUL__Ë=
RCC_PLL_MUL11
) || \

104 ((
__MUL__
Ë=
RCC_PLL_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL_MUL13
) || \

105 ((
__MUL__
Ë=
RCC_PLL_MUL14
Ë|| ((__MUL__Ë=
RCC_PLL_MUL15
) || \

106 ((
__MUL__
Ë=
RCC_PLL_MUL16
))

	)

108 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_HSI
) \

109 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) \

110 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_NOCLOCK
))

	)

114 
	#IS_RCC_ADCPLLCLK_DIV
(
__ADCCLK__
Ë(((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV2
Ë|| ((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV4
) || \

115 ((
__ADCCLK__
Ë=
RCC_ADCPCLK2_DIV6
Ë|| ((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV8
))

	)

117 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

118 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_PLLI2S_VCO
))

	)

120 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_PLLI2S_VCO
))

	)

122 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
Ë(((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV2
Ë|| ((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV3
))

	)

124 
	#IS_RCC_PLLI2S_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLLI2S_MUL8
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL9
) || \

125 ((
__MUL__
Ë=
RCC_PLLI2S_MUL10
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL11
) || \

126 ((
__MUL__
Ë=
RCC_PLLI2S_MUL12
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL13
) || \

127 ((
__MUL__
Ë=
RCC_PLLI2S_MUL14
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL16
) || \

128 ((
__MUL__
Ë=
RCC_PLLI2S_MUL20
))

	)

130 
	#IS_RCC_HSE_PREDIV2
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV2_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV2
) || \

131 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV3
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV4
) || \

132 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV5
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV6
) || \

133 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV7
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV8
) || \

134 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV9
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV10
) || \

135 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV11
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV12
) || \

136 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV13
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV14
) || \

137 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV15
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV16
))

	)

139 
	#IS_RCC_PLL2
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL2_NONE
Ë|| ((__PLL__Ë=
RCC_PLL2_OFF
) || \

140 ((
__PLL__
Ë=
RCC_PLL2_ON
))

	)

142 
	#IS_RCC_PLL2_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL2_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL9
) || \

143 ((
__MUL__
Ë=
RCC_PLL2_MUL10
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL11
) || \

144 ((
__MUL__
Ë=
RCC_PLL2_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL13
) || \

145 ((
__MUL__
Ë=
RCC_PLL2_MUL14
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL16
) || \

146 ((
__MUL__
Ë=
RCC_PLL2_MUL20
))

	)

148 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

149 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

150 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

151 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

152 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

153 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

155 #ñi‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

157 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
Ë((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_SYSCLK
)

	)

159 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
Ë((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_SYSCLK
)

	)

161 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

162 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

163 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

164 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

165 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

166 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

169 #ñi‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

170 || 
deföed
(
STM32F103xB
)

172 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

173 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

174 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

175 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

179 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

180 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

181 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
Ë=RCC_PERIPHCLK_ADC))

	)

185 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

186 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

188 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
Ë(((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL
Ë|| ((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV1_5
))

	)

202 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

208 
uöt32_t
 
PLL2Sèã
;

211 
uöt32_t
 
PLL2MUL
;

214 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

215 
uöt32_t
 
HSEPªdiv2VÆue
;

219 } 
	tRCC_PLL2InôTy≥Def
;

228 
uöt32_t
 
Oscûœt‹Ty≥
;

231 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

232 
uöt32_t
 
Pªdiv1Sour˚
;

236 
uöt32_t
 
HSESèã
;

239 
uöt32_t
 
HSEPªdivVÆue
;

242 
uöt32_t
 
LSESèã
;

245 
uöt32_t
 
HSISèã
;

248 
uöt32_t
 
HSICÆibøti⁄VÆue
;

251 
uöt32_t
 
LSISèã
;

254 
RCC_PLLInôTy≥Def
 
PLL
;

256 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

257 
RCC_PLL2InôTy≥Def
 
PLL2
;

259 } 
	tRCC_OscInôTy≥Def
;

261 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

267 
uöt32_t
 
PLLI2SMUL
;

270 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

271 
uöt32_t
 
HSEPªdiv2VÆue
;

275 } 
	tRCC_PLLI2SInôTy≥Def
;

283 
uöt32_t
 
PîùhClockSñe˘i⁄
;

286 
uöt32_t
 
RTCClockSñe˘i⁄
;

289 
uöt32_t
 
AdcClockSñe˘i⁄
;

292 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

293 || 
deföed
(
STM32F107xC
)

294 
uöt32_t
 
I2s2ClockSñe˘i⁄
;

297 
uöt32_t
 
I2s3ClockSñe˘i⁄
;

300 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

301 
RCC_PLLI2SInôTy≥Def
 
PLLI2S
;

307 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

308 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

309 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

310 
uöt32_t
 
UsbClockSñe˘i⁄
;

314 } 
	tRCC_PîùhCLKInôTy≥Def
;

329 
	#RCC_PERIPHCLK_RTC
 0x00000001U

	)

330 
	#RCC_PERIPHCLK_ADC
 0x00000002U

	)

331 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
)\

332 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

333 
	#RCC_PERIPHCLK_I2S2
 0x00000004U

	)

334 
	#RCC_PERIPHCLK_I2S3
 0x00000008U

	)

336 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

337 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

338 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

339 
	#RCC_PERIPHCLK_USB
 0x00000010U

	)

349 
	#RCC_ADCPCLK2_DIV2
 
RCC_CFGR_ADCPRE_DIV2


	)

350 
	#RCC_ADCPCLK2_DIV4
 
RCC_CFGR_ADCPRE_DIV4


	)

351 
	#RCC_ADCPCLK2_DIV6
 
RCC_CFGR_ADCPRE_DIV6


	)

352 
	#RCC_ADCPCLK2_DIV8
 
RCC_CFGR_ADCPRE_DIV8


	)

358 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

359 || 
deföed
(
STM32F107xC
)

363 
	#RCC_I2S2CLKSOURCE_SYSCLK
 0x00000000U

	)

364 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

365 
	#RCC_I2S2CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S2SRC


	)

375 
	#RCC_I2S3CLKSOURCE_SYSCLK
 0x00000000U

	)

376 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

377 
	#RCC_I2S3CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S3SRC


	)

386 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

387 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

392 
	#RCC_USBCLKSOURCE_PLL
 
RCC_CFGR_USBPRE


	)

393 
	#RCC_USBCLKSOURCE_PLL_DIV1_5
 0x00000000U

	)

402 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

406 
	#RCC_USBCLKSOURCE_PLL_DIV2
 
RCC_CFGR_OTGFSPRE


	)

407 
	#RCC_USBCLKSOURCE_PLL_DIV3
 0x00000000U

	)

417 
	#RCC_PLLI2S_MUL8
 
RCC_CFGR2_PLL3MUL8


	)

418 
	#RCC_PLLI2S_MUL9
 
RCC_CFGR2_PLL3MUL9


	)

419 
	#RCC_PLLI2S_MUL10
 
RCC_CFGR2_PLL3MUL10


	)

420 
	#RCC_PLLI2S_MUL11
 
RCC_CFGR2_PLL3MUL11


	)

421 
	#RCC_PLLI2S_MUL12
 
RCC_CFGR2_PLL3MUL12


	)

422 
	#RCC_PLLI2S_MUL13
 
RCC_CFGR2_PLL3MUL13


	)

423 
	#RCC_PLLI2S_MUL14
 
RCC_CFGR2_PLL3MUL14


	)

424 
	#RCC_PLLI2S_MUL16
 
RCC_CFGR2_PLL3MUL16


	)

425 
	#RCC_PLLI2S_MUL20
 
RCC_CFGR2_PLL3MUL20


	)

432 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

437 
	#RCC_PREDIV1_SOURCE_HSE
 
RCC_CFGR2_PREDIV1SRC_HSE


	)

438 
	#RCC_PREDIV1_SOURCE_PLL2
 
RCC_CFGR2_PREDIV1SRC_PLL2


	)

449 
	#RCC_HSE_PREDIV_DIV1
 0x00000000U

	)

451 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

452 || 
deföed
(
STM32F100xE
)

453 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR2_PREDIV1_DIV2


	)

454 
	#RCC_HSE_PREDIV_DIV3
 
RCC_CFGR2_PREDIV1_DIV3


	)

455 
	#RCC_HSE_PREDIV_DIV4
 
RCC_CFGR2_PREDIV1_DIV4


	)

456 
	#RCC_HSE_PREDIV_DIV5
 
RCC_CFGR2_PREDIV1_DIV5


	)

457 
	#RCC_HSE_PREDIV_DIV6
 
RCC_CFGR2_PREDIV1_DIV6


	)

458 
	#RCC_HSE_PREDIV_DIV7
 
RCC_CFGR2_PREDIV1_DIV7


	)

459 
	#RCC_HSE_PREDIV_DIV8
 
RCC_CFGR2_PREDIV1_DIV8


	)

460 
	#RCC_HSE_PREDIV_DIV9
 
RCC_CFGR2_PREDIV1_DIV9


	)

461 
	#RCC_HSE_PREDIV_DIV10
 
RCC_CFGR2_PREDIV1_DIV10


	)

462 
	#RCC_HSE_PREDIV_DIV11
 
RCC_CFGR2_PREDIV1_DIV11


	)

463 
	#RCC_HSE_PREDIV_DIV12
 
RCC_CFGR2_PREDIV1_DIV12


	)

464 
	#RCC_HSE_PREDIV_DIV13
 
RCC_CFGR2_PREDIV1_DIV13


	)

465 
	#RCC_HSE_PREDIV_DIV14
 
RCC_CFGR2_PREDIV1_DIV14


	)

466 
	#RCC_HSE_PREDIV_DIV15
 
RCC_CFGR2_PREDIV1_DIV15


	)

467 
	#RCC_HSE_PREDIV_DIV16
 
RCC_CFGR2_PREDIV1_DIV16


	)

469 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR_PLLXTPRE


	)

476 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

481 
	#RCC_HSE_PREDIV2_DIV1
 
RCC_CFGR2_PREDIV2_DIV1


	)

482 
	#RCC_HSE_PREDIV2_DIV2
 
RCC_CFGR2_PREDIV2_DIV2


	)

483 
	#RCC_HSE_PREDIV2_DIV3
 
RCC_CFGR2_PREDIV2_DIV3


	)

484 
	#RCC_HSE_PREDIV2_DIV4
 
RCC_CFGR2_PREDIV2_DIV4


	)

485 
	#RCC_HSE_PREDIV2_DIV5
 
RCC_CFGR2_PREDIV2_DIV5


	)

486 
	#RCC_HSE_PREDIV2_DIV6
 
RCC_CFGR2_PREDIV2_DIV6


	)

487 
	#RCC_HSE_PREDIV2_DIV7
 
RCC_CFGR2_PREDIV2_DIV7


	)

488 
	#RCC_HSE_PREDIV2_DIV8
 
RCC_CFGR2_PREDIV2_DIV8


	)

489 
	#RCC_HSE_PREDIV2_DIV9
 
RCC_CFGR2_PREDIV2_DIV9


	)

490 
	#RCC_HSE_PREDIV2_DIV10
 
RCC_CFGR2_PREDIV2_DIV10


	)

491 
	#RCC_HSE_PREDIV2_DIV11
 
RCC_CFGR2_PREDIV2_DIV11


	)

492 
	#RCC_HSE_PREDIV2_DIV12
 
RCC_CFGR2_PREDIV2_DIV12


	)

493 
	#RCC_HSE_PREDIV2_DIV13
 
RCC_CFGR2_PREDIV2_DIV13


	)

494 
	#RCC_HSE_PREDIV2_DIV14
 
RCC_CFGR2_PREDIV2_DIV14


	)

495 
	#RCC_HSE_PREDIV2_DIV15
 
RCC_CFGR2_PREDIV2_DIV15


	)

496 
	#RCC_HSE_PREDIV2_DIV16
 
RCC_CFGR2_PREDIV2_DIV16


	)

505 
	#RCC_PLL2_NONE
 0x00000000U

	)

506 
	#RCC_PLL2_OFF
 0x00000001U

	)

507 
	#RCC_PLL2_ON
 0x00000002U

	)

517 
	#RCC_PLL2_MUL8
 
RCC_CFGR2_PLL2MUL8


	)

518 
	#RCC_PLL2_MUL9
 
RCC_CFGR2_PLL2MUL9


	)

519 
	#RCC_PLL2_MUL10
 
RCC_CFGR2_PLL2MUL10


	)

520 
	#RCC_PLL2_MUL11
 
RCC_CFGR2_PLL2MUL11


	)

521 
	#RCC_PLL2_MUL12
 
RCC_CFGR2_PLL2MUL12


	)

522 
	#RCC_PLL2_MUL13
 
RCC_CFGR2_PLL2MUL13


	)

523 
	#RCC_PLL2_MUL14
 
RCC_CFGR2_PLL2MUL14


	)

524 
	#RCC_PLL2_MUL16
 
RCC_CFGR2_PLL2MUL16


	)

525 
	#RCC_PLL2_MUL20
 
RCC_CFGR2_PLL2MUL20


	)

537 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

539 
	#RCC_PLL_MUL2
 
RCC_CFGR_PLLMULL2


	)

540 
	#RCC_PLL_MUL3
 
RCC_CFGR_PLLMULL3


	)

542 
	#RCC_PLL_MUL4
 
RCC_CFGR_PLLMULL4


	)

543 
	#RCC_PLL_MUL5
 
RCC_CFGR_PLLMULL5


	)

544 
	#RCC_PLL_MUL6
 
RCC_CFGR_PLLMULL6


	)

545 
	#RCC_PLL_MUL7
 
RCC_CFGR_PLLMULL7


	)

546 
	#RCC_PLL_MUL8
 
RCC_CFGR_PLLMULL8


	)

547 
	#RCC_PLL_MUL9
 
RCC_CFGR_PLLMULL9


	)

548 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

549 
	#RCC_PLL_MUL6_5
 
RCC_CFGR_PLLMULL6_5


	)

551 
	#RCC_PLL_MUL10
 
RCC_CFGR_PLLMULL10


	)

552 
	#RCC_PLL_MUL11
 
RCC_CFGR_PLLMULL11


	)

553 
	#RCC_PLL_MUL12
 
RCC_CFGR_PLLMULL12


	)

554 
	#RCC_PLL_MUL13
 
RCC_CFGR_PLLMULL13


	)

555 
	#RCC_PLL_MUL14
 
RCC_CFGR_PLLMULL14


	)

556 
	#RCC_PLL_MUL15
 
RCC_CFGR_PLLMULL15


	)

557 
	#RCC_PLL_MUL16
 
RCC_CFGR_PLLMULL16


	)

567 
	#RCC_MCO1SOURCE_NOCLOCK
 ((
uöt32_t
)
RCC_CFGR_MCO_NOCLOCK
)

	)

568 
	#RCC_MCO1SOURCE_SYSCLK
 ((
uöt32_t
)
RCC_CFGR_MCO_SYSCLK
)

	)

569 
	#RCC_MCO1SOURCE_HSI
 ((
uöt32_t
)
RCC_CFGR_MCO_HSI
)

	)

570 
	#RCC_MCO1SOURCE_HSE
 ((
uöt32_t
)
RCC_CFGR_MCO_HSE
)

	)

571 
	#RCC_MCO1SOURCE_PLLCLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLLCLK_DIV2
)

	)

572 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

573 
	#RCC_MCO1SOURCE_PLL2CLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL2CLK
)

	)

574 
	#RCC_MCO1SOURCE_PLL3CLK_DIV2
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL3CLK_DIV2
)

	)

575 
	#RCC_MCO1SOURCE_EXT_HSE
 ((
uöt32_t
)
RCC_CFGR_MCO_EXT_HSE
)

	)

576 
	#RCC_MCO1SOURCE_PLL3CLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL3CLK
)

	)

582 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

586 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)
RCC_CIR_PLL2RDYF
)

	)

587 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)
RCC_CIR_PLL3RDYF
)

	)

600 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_PLL2RDY_Pos
))

	)

601 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_PLL3RDY_Pos
))

	)

624 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

625 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed (
STM32F107xC
)\

626 || 
deföed
 (
STM32F100xE
)

627 
	#__HAL_RCC_DMA2_CLK_ENABLE
() do { \

628 
__IO
 
uöt32_t
 
tm¥eg
; \

629 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

631 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

632 
	`UNUSED
(
tm¥eg
); \

633 } 0U)

	)

635 
	#__HAL_RCC_DMA2_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_DMA2EN
))

	)

638 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

639 || 
deföed
(
STM32F103xG
Ë|| deföed (
STM32F100xE
)

640 
	#__HAL_RCC_FSMC_CLK_ENABLE
() do { \

641 
__IO
 
uöt32_t
 
tm¥eg
; \

642 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

644 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

645 
	`UNUSED
(
tm¥eg
); \

646 } 0U)

	)

648 
	#__HAL_RCC_FSMC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_FSMCEN
))

	)

651 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

652 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

653 
__IO
 
uöt32_t
 
tm¥eg
; \

654 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

656 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

657 
	`UNUSED
(
tm¥eg
); \

658 } 0U)

	)

661 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_SDIOEN
))

	)

664 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

665 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
() do { \

666 
__IO
 
uöt32_t
 
tm¥eg
; \

667 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

669 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

670 
	`UNUSED
(
tm¥eg
); \

671 } 0U)

	)

674 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_OTGFSEN
))

	)

677 #i‡
deföed
(
STM32F107xC
)

678 
	#__HAL_RCC_ETHMAC_CLK_ENABLE
() do { \

679 
__IO
 
uöt32_t
 
tm¥eg
; \

680 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

682 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

683 
	`UNUSED
(
tm¥eg
); \

684 } 0U)

	)

686 
	#__HAL_RCC_ETHMACTX_CLK_ENABLE
() do { \

687 
__IO
 
uöt32_t
 
tm¥eg
; \

688 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

690 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

691 
	`UNUSED
(
tm¥eg
); \

692 } 0U)

	)

694 
	#__HAL_RCC_ETHMACRX_CLK_ENABLE
() do { \

695 
__IO
 
uöt32_t
 
tm¥eg
; \

696 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

698 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

699 
	`UNUSED
(
tm¥eg
); \

700 } 0U)

	)

702 
	#__HAL_RCC_ETHMAC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACEN
))

	)

703 
	#__HAL_RCC_ETHMACTX_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACTXEN
))

	)

704 
	#__HAL_RCC_ETHMACRX_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACRXEN
))

	)

709 
	#__HAL_RCC_ETH_CLK_ENABLE
() do { \

710 
	`__HAL_RCC_ETHMAC_CLK_ENABLE
(); \

711 
	`__HAL_RCC_ETHMACTX_CLK_ENABLE
(); \

712 
	`__HAL_RCC_ETHMACRX_CLK_ENABLE
(); \

713 } 0U)

	)

717 
	#__HAL_RCC_ETH_CLK_DISABLE
() do { \

718 
	`__HAL_RCC_ETHMACTX_CLK_DISABLE
(); \

719 
	`__HAL_RCC_ETHMACRX_CLK_DISABLE
(); \

720 
	`__HAL_RCC_ETHMAC_CLK_DISABLE
(); \

721 } 0U)

	)

737 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

738 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed (
STM32F107xC
)\

739 || 
deföed
 (
STM32F100xE
)

740 
	#__HAL_RCC_DMA2_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)Ë!
RESET
)

	)

741 
	#__HAL_RCC_DMA2_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)Ë=
RESET
)

	)

743 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

744 || 
deföed
(
STM32F103xG
Ë|| deföed (
STM32F100xE
)

745 
	#__HAL_RCC_FSMC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)Ë!
RESET
)

	)

746 
	#__HAL_RCC_FSMC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)Ë=
RESET
)

	)

748 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

749 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)Ë!
RESET
)

	)

750 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)Ë=
RESET
)

	)

752 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

753 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)Ë!
RESET
)

	)

754 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)Ë=
RESET
)

	)

756 #i‡
deföed
(
STM32F107xC
)

757 
	#__HAL_RCC_ETHMAC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)Ë!
RESET
)

	)

758 
	#__HAL_RCC_ETHMAC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)Ë=
RESET
)

	)

759 
	#__HAL_RCC_ETHMACTX_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)Ë!
RESET
)

	)

760 
	#__HAL_RCC_ETHMACTX_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)Ë=
RESET
)

	)

761 
	#__HAL_RCC_ETHMACRX_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)Ë!
RESET
)

	)

762 
	#__HAL_RCC_ETHMACRX_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)Ë=
RESET
)

	)

777 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

778 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

779 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

780 
__IO
 
uöt32_t
 
tm¥eg
; \

781 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

783 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

784 
	`UNUSED
(
tm¥eg
); \

785 } 0U)

	)

787 
	#__HAL_RCC_CAN1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN1EN
))

	)

790 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

791 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

792 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

793 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

794 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

795 
__IO
 
uöt32_t
 
tm¥eg
; \

796 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

798 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

799 
	`UNUSED
(
tm¥eg
); \

800 } 0U)

	)

802 
	#__HAL_RCC_SPI2_CLK_ENABLE
() do { \

803 
__IO
 
uöt32_t
 
tm¥eg
; \

804 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

806 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

807 
	`UNUSED
(
tm¥eg
); \

808 } 0U)

	)

810 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

811 
__IO
 
uöt32_t
 
tm¥eg
; \

812 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

814 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

815 
	`UNUSED
(
tm¥eg
); \

816 } 0U)

	)

818 
	#__HAL_RCC_I2C2_CLK_ENABLE
() do { \

819 
__IO
 
uöt32_t
 
tm¥eg
; \

820 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

822 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

823 
	`UNUSED
(
tm¥eg
); \

824 } 0U)

	)

826 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

827 
	#__HAL_RCC_SPI2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI2EN
))

	)

828 
	#__HAL_RCC_USART3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART3EN
))

	)

829 
	#__HAL_RCC_I2C2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C2EN
))

	)

832 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

833 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

834 
	#__HAL_RCC_USB_CLK_ENABLE
() do { \

835 
__IO
 
uöt32_t
 
tm¥eg
; \

836 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

838 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

839 
	`UNUSED
(
tm¥eg
); \

840 } 0U)

	)

842 
	#__HAL_RCC_USB_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USBEN
))

	)

845 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

846 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

847 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

848 
__IO
 
uöt32_t
 
tm¥eg
; \

849 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

851 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

852 
	`UNUSED
(
tm¥eg
); \

853 } 0U)

	)

855 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

856 
__IO
 
uöt32_t
 
tm¥eg
; \

857 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

859 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

860 
	`UNUSED
(
tm¥eg
); \

861 } 0U)

	)

863 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

864 
__IO
 
uöt32_t
 
tm¥eg
; \

865 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

867 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

868 
	`UNUSED
(
tm¥eg
); \

869 } 0U)

	)

871 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

872 
__IO
 
uöt32_t
 
tm¥eg
; \

873 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

875 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

876 
	`UNUSED
(
tm¥eg
); \

877 } 0U)

	)

879 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

880 
__IO
 
uöt32_t
 
tm¥eg
; \

881 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

883 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

884 
	`UNUSED
(
tm¥eg
); \

885 } 0U)

	)

887 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

888 
__IO
 
uöt32_t
 
tm¥eg
; \

889 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

891 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

892 
	`UNUSED
(
tm¥eg
); \

893 } 0U)

	)

895 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

896 
__IO
 
uöt32_t
 
tm¥eg
; \

897 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

899 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

900 
	`UNUSED
(
tm¥eg
); \

901 } 0U)

	)

903 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

904 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

905 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

906 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

907 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

908 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

909 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

912 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

913 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

914 
__IO
 
uöt32_t
 
tm¥eg
; \

915 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

917 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

918 
	`UNUSED
(
tm¥eg
); \

919 } 0U)

	)

921 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

922 
__IO
 
uöt32_t
 
tm¥eg
; \

923 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

925 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

926 
	`UNUSED
(
tm¥eg
); \

927 } 0U)

	)

929 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

930 
__IO
 
uöt32_t
 
tm¥eg
; \

931 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

933 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

934 
	`UNUSED
(
tm¥eg
); \

935 } 0U)

	)

937 
	#__HAL_RCC_CEC_CLK_ENABLE
() do { \

938 
__IO
 
uöt32_t
 
tm¥eg
; \

939 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

941 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

942 
	`UNUSED
(
tm¥eg
); \

943 } 0U)

	)

945 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

946 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

947 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

948 
	#__HAL_RCC_CEC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CECEN
))

	)

951 #ifde‡
STM32F100xE


952 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

953 
__IO
 
uöt32_t
 
tm¥eg
; \

954 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

956 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

957 
	`UNUSED
(
tm¥eg
); \

958 } 0U)

	)

960 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

961 
__IO
 
uöt32_t
 
tm¥eg
; \

962 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

964 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

965 
	`UNUSED
(
tm¥eg
); \

966 } 0U)

	)

968 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

969 
__IO
 
uöt32_t
 
tm¥eg
; \

970 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

972 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

973 
	`UNUSED
(
tm¥eg
); \

974 } 0U)

	)

976 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

977 
__IO
 
uöt32_t
 
tm¥eg
; \

978 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

980 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

981 
	`UNUSED
(
tm¥eg
); \

982 } 0U)

	)

984 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

985 
__IO
 
uöt32_t
 
tm¥eg
; \

986 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

988 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

989 
	`UNUSED
(
tm¥eg
); \

990 } 0U)

	)

992 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

993 
__IO
 
uöt32_t
 
tm¥eg
; \

994 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

996 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

997 
	`UNUSED
(
tm¥eg
); \

998 } 0U)

	)

1000 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

1001 
__IO
 
uöt32_t
 
tm¥eg
; \

1002 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1004 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1005 
	`UNUSED
(
tm¥eg
); \

1006 } 0U)

	)

1008 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

1009 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1010 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1011 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1012 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

1013 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

1014 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

1017 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1018 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

1019 
__IO
 
uöt32_t
 
tm¥eg
; \

1020 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1022 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1023 
	`UNUSED
(
tm¥eg
); \

1024 } 0U)

	)

1026 
	#__HAL_RCC_CAN2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN2EN
))

	)

1029 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1030 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

1031 
__IO
 
uöt32_t
 
tm¥eg
; \

1032 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1034 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1035 
	`UNUSED
(
tm¥eg
); \

1036 } 0U)

	)

1038 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

1039 
__IO
 
uöt32_t
 
tm¥eg
; \

1040 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1042 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1043 
	`UNUSED
(
tm¥eg
); \

1044 } 0U)

	)

1046 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1047 
__IO
 
uöt32_t
 
tm¥eg
; \

1048 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1050 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1051 
	`UNUSED
(
tm¥eg
); \

1052 } 0U)

	)

1054 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1055 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1056 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1071 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

1072 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

1073 
	#__HAL_RCC_CAN1_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)Ë!
RESET
)

	)

1074 
	#__HAL_RCC_CAN1_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)Ë=
RESET
)

	)

1076 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

1077 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

1078 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

1079 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1080 
	#__HAL_RCC_TIM4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)Ë!
RESET
)

	)

1081 
	#__HAL_RCC_TIM4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)Ë=
RESET
)

	)

1082 
	#__HAL_RCC_SPI2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)Ë!
RESET
)

	)

1083 
	#__HAL_RCC_SPI2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)Ë=
RESET
)

	)

1084 
	#__HAL_RCC_USART3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)Ë!
RESET
)

	)

1085 
	#__HAL_RCC_USART3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)Ë=
RESET
)

	)

1086 
	#__HAL_RCC_I2C2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)Ë!
RESET
)

	)

1087 
	#__HAL_RCC_I2C2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)Ë=
RESET
)

	)

1089 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1090 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1091 
	#__HAL_RCC_USB_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)Ë!
RESET
)

	)

1092 
	#__HAL_RCC_USB_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)Ë=
RESET
)

	)

1094 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1095 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1096 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë!
RESET
)

	)

1097 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë=
RESET
)

	)

1098 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë!
RESET
)

	)

1099 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë=
RESET
)

	)

1100 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë!
RESET
)

	)

1101 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë=
RESET
)

	)

1102 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë!
RESET
)

	)

1103 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë=
RESET
)

	)

1104 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë!
RESET
)

	)

1105 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë=
RESET
)

	)

1106 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë!
RESET
)

	)

1107 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë=
RESET
)

	)

1108 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë!
RESET
)

	)

1109 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë=
RESET
)

	)

1111 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

1112 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë!
RESET
)

	)

1113 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë=
RESET
)

	)

1114 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë!
RESET
)

	)

1115 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë=
RESET
)

	)

1116 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë!
RESET
)

	)

1117 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë=
RESET
)

	)

1118 
	#__HAL_RCC_CEC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)Ë!
RESET
)

	)

1119 
	#__HAL_RCC_CEC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)Ë=
RESET
)

	)

1121 #ifde‡
STM32F100xE


1122 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë!
RESET
)

	)

1123 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë=
RESET
)

	)

1124 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë!
RESET
)

	)

1125 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë=
RESET
)

	)

1126 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë!
RESET
)

	)

1127 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë=
RESET
)

	)

1128 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë!
RESET
)

	)

1129 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë=
RESET
)

	)

1130 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë!
RESET
)

	)

1131 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë=
RESET
)

	)

1132 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë!
RESET
)

	)

1133 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë=
RESET
)

	)

1134 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë!
RESET
)

	)

1135 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë=
RESET
)

	)

1136 
	#__HAL_RCC_CAN2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)Ë!
RESET
)

	)

1137 
	#__HAL_RCC_CAN2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)Ë=
RESET
)

	)

1139 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1140 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë!
RESET
)

	)

1141 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë=
RESET
)

	)

1143 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1144 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë!
RESET
)

	)

1145 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë=
RESET
)

	)

1146 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë!
RESET
)

	)

1147 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë=
RESET
)

	)

1162 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1163 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1164 || 
deföed
(
STM32F103xG
)

1165 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

1166 
__IO
 
uöt32_t
 
tm¥eg
; \

1167 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1169 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1170 
	`UNUSED
(
tm¥eg
); \

1171 } 0U)

	)

1173 
	#__HAL_RCC_ADC2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC2EN
))

	)

1176 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1177 
	#__HAL_RCC_TIM15_CLK_ENABLE
() do { \

1178 
__IO
 
uöt32_t
 
tm¥eg
; \

1179 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1181 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1182 
	`UNUSED
(
tm¥eg
); \

1183 } 0U)

	)

1185 
	#__HAL_RCC_TIM16_CLK_ENABLE
() do { \

1186 
__IO
 
uöt32_t
 
tm¥eg
; \

1187 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1189 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1190 
	`UNUSED
(
tm¥eg
); \

1191 } 0U)

	)

1193 
	#__HAL_RCC_TIM17_CLK_ENABLE
() do { \

1194 
__IO
 
uöt32_t
 
tm¥eg
; \

1195 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1197 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1198 
	`UNUSED
(
tm¥eg
); \

1199 } 0U)

	)

1201 
	#__HAL_RCC_TIM15_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM15EN
))

	)

1202 
	#__HAL_RCC_TIM16_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM16EN
))

	)

1203 
	#__HAL_RCC_TIM17_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM17EN
))

	)

1206 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1207 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1208 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1209 || 
deföed
(
STM32F107xC
)

1210 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

1211 
__IO
 
uöt32_t
 
tm¥eg
; \

1212 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1214 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1215 
	`UNUSED
(
tm¥eg
); \

1216 } 0U)

	)

1218 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPEEN
))

	)

1221 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1222 || 
deföed
(
STM32F103xG
)

1223 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1224 
__IO
 
uöt32_t
 
tm¥eg
; \

1225 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1227 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1228 
	`UNUSED
(
tm¥eg
); \

1229 } 0U)

	)

1231 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1232 
__IO
 
uöt32_t
 
tm¥eg
; \

1233 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1235 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1236 
	`UNUSED
(
tm¥eg
); \

1237 } 0U)

	)

1239 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPFEN
))

	)

1240 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPGEN
))

	)

1243 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1244 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

1245 
__IO
 
uöt32_t
 
tm¥eg
; \

1246 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1248 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1249 
	`UNUSED
(
tm¥eg
); \

1250 } 0U)

	)

1252 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

1253 
__IO
 
uöt32_t
 
tm¥eg
; \

1254 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1256 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1257 
	`UNUSED
(
tm¥eg
); \

1258 } 0U)

	)

1260 
	#__HAL_RCC_TIM8_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM8EN
))

	)

1261 
	#__HAL_RCC_ADC3_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC3EN
))

	)

1264 #i‡
deföed
(
STM32F100xE
)

1265 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1266 
__IO
 
uöt32_t
 
tm¥eg
; \

1267 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1269 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1270 
	`UNUSED
(
tm¥eg
); \

1271 } 0U)

	)

1273 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1274 
__IO
 
uöt32_t
 
tm¥eg
; \

1275 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1277 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1278 
	`UNUSED
(
tm¥eg
); \

1279 } 0U)

	)

1281 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPFEN
))

	)

1282 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPGEN
))

	)

1285 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1286 
	#__HAL_RCC_TIM9_CLK_ENABLE
() do { \

1287 
__IO
 
uöt32_t
 
tm¥eg
; \

1288 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1290 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1291 
	`UNUSED
(
tm¥eg
); \

1292 } 0U)

	)

1294 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

1295 
__IO
 
uöt32_t
 
tm¥eg
; \

1296 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1298 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1299 
	`UNUSED
(
tm¥eg
); \

1300 } 0U)

	)

1302 
	#__HAL_RCC_TIM11_CLK_ENABLE
() do { \

1303 
__IO
 
uöt32_t
 
tm¥eg
; \

1304 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1306 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1307 
	`UNUSED
(
tm¥eg
); \

1308 } 0U)

	)

1310 
	#__HAL_RCC_TIM9_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM9EN
))

	)

1311 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

1312 
	#__HAL_RCC_TIM11_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM11EN
))

	)

1327 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1328 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1329 || 
deföed
(
STM32F103xG
)

1330 
	#__HAL_RCC_ADC2_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)Ë!
RESET
)

	)

1331 
	#__HAL_RCC_ADC2_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)Ë=
RESET
)

	)

1333 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1334 
	#__HAL_RCC_TIM15_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)Ë!
RESET
)

	)

1335 
	#__HAL_RCC_TIM15_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)Ë=
RESET
)

	)

1336 
	#__HAL_RCC_TIM16_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)Ë!
RESET
)

	)

1337 
	#__HAL_RCC_TIM16_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)Ë=
RESET
)

	)

1338 
	#__HAL_RCC_TIM17_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)Ë!
RESET
)

	)

1339 
	#__HAL_RCC_TIM17_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)Ë=
RESET
)

	)

1341 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1342 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1343 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1344 || 
deföed
(
STM32F107xC
)

1345 
	#__HAL_RCC_GPIOE_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)Ë!
RESET
)

	)

1346 
	#__HAL_RCC_GPIOE_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)Ë=
RESET
)

	)

1348 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1349 || 
deföed
(
STM32F103xG
)

1350 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë!
RESET
)

	)

1351 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë=
RESET
)

	)

1352 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë!
RESET
)

	)

1353 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë=
RESET
)

	)

1355 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1356 
	#__HAL_RCC_TIM8_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)Ë!
RESET
)

	)

1357 
	#__HAL_RCC_TIM8_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)Ë=
RESET
)

	)

1358 
	#__HAL_RCC_ADC3_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)Ë!
RESET
)

	)

1359 
	#__HAL_RCC_ADC3_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)Ë=
RESET
)

	)

1361 #i‡
deföed
(
STM32F100xE
)

1362 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë!
RESET
)

	)

1363 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë=
RESET
)

	)

1364 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë!
RESET
)

	)

1365 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë=
RESET
)

	)

1367 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1368 
	#__HAL_RCC_TIM9_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)Ë!
RESET
)

	)

1369 
	#__HAL_RCC_TIM9_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)Ë=
RESET
)

	)

1370 
	#__HAL_RCC_TIM10_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)Ë!
RESET
)

	)

1371 
	#__HAL_RCC_TIM10_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)Ë=
RESET
)

	)

1372 
	#__HAL_RCC_TIM11_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)Ë!
RESET
)

	)

1373 
	#__HAL_RCC_TIM11_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)Ë=
RESET
)

	)

1380 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1385 
	#__HAL_RCC_AHB_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0xFFFFFFFFU)

	)

1386 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 |(
RCC_AHBRSTR_OTGFSRST
))

	)

1387 #i‡
deföed
(
STM32F107xC
)

1388 
	#__HAL_RCC_ETHMAC_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 |(
RCC_AHBRSTR_ETHMACRST
))

	)

1391 
	#__HAL_RCC_AHB_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0x00)

	)

1392 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 &~(
RCC_AHBRSTR_OTGFSRST
))

	)

1393 #i‡
deföed
(
STM32F107xC
)

1394 
	#__HAL_RCC_ETHMAC_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 &~(
RCC_AHBRSTR_ETHMACRST
))

	)

1407 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

1408 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

1409 
	#__HAL_RCC_CAN1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN1RST
))

	)

1411 
	#__HAL_RCC_CAN1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN1RST
))

	)

1414 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

1415 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

1416 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

1417 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1418 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

1419 
	#__HAL_RCC_SPI2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI2RST
))

	)

1420 
	#__HAL_RCC_USART3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART3RST
))

	)

1421 
	#__HAL_RCC_I2C2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C2RST
))

	)

1423 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

1424 
	#__HAL_RCC_SPI2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI2RST
))

	)

1425 
	#__HAL_RCC_USART3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART3RST
))

	)

1426 
	#__HAL_RCC_I2C2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C2RST
))

	)

1429 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1430 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1431 
	#__HAL_RCC_USB_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USBRST
))

	)

1432 
	#__HAL_RCC_USB_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USBRST
))

	)

1435 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1436 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1437 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

1438 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1439 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1440 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1441 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1442 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1443 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1445 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

1446 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1447 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1448 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1449 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1450 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1451 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1454 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

1455 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1456 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1457 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1458 
	#__HAL_RCC_CEC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CECRST
))

	)

1460 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1461 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1462 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1463 
	#__HAL_RCC_CEC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CECRST
))

	)

1466 #i‡
deföed
 (
STM32F100xE
)

1467 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

1468 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1469 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1470 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1471 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1472 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1473 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1475 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

1476 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1477 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1478 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1479 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1480 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1481 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1484 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1485 
	#__HAL_RCC_CAN2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN2RST
))

	)

1487 
	#__HAL_RCC_CAN2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN2RST
))

	)

1490 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1491 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1492 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1493 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1495 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1496 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1497 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1509 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1510 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1511 || 
deföed
(
STM32F103xG
)

1512 
	#__HAL_RCC_ADC2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC2RST
))

	)

1514 
	#__HAL_RCC_ADC2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC2RST
))

	)

1517 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1518 
	#__HAL_RCC_TIM15_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM15RST
))

	)

1519 
	#__HAL_RCC_TIM16_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM16RST
))

	)

1520 
	#__HAL_RCC_TIM17_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM17RST
))

	)

1522 
	#__HAL_RCC_TIM15_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM15RST
))

	)

1523 
	#__HAL_RCC_TIM16_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM16RST
))

	)

1524 
	#__HAL_RCC_TIM17_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM17RST
))

	)

1527 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1528 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1529 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1530 || 
deföed
(
STM32F107xC
)

1531 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPERST
))

	)

1533 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPERST
))

	)

1536 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1537 || 
deföed
(
STM32F103xG
)

1538 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPFRST
))

	)

1539 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPGRST
))

	)

1541 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPFRST
))

	)

1542 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPGRST
))

	)

1545 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1546 
	#__HAL_RCC_TIM8_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM8RST
))

	)

1547 
	#__HAL_RCC_ADC3_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC3RST
))

	)

1549 
	#__HAL_RCC_TIM8_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM8RST
))

	)

1550 
	#__HAL_RCC_ADC3_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC3RST
))

	)

1553 #i‡
deföed
(
STM32F100xE
)

1554 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPFRST
))

	)

1555 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPGRST
))

	)

1557 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPFRST
))

	)

1558 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPGRST
))

	)

1561 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1562 
	#__HAL_RCC_TIM9_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM9RST
))

	)

1563 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

1564 
	#__HAL_RCC_TIM11_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM11RST
))

	)

1566 
	#__HAL_RCC_TIM9_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM9RST
))

	)

1567 
	#__HAL_RCC_TIM10_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

1568 
	#__HAL_RCC_TIM11_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM11RST
))

	)

1579 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

1580 || 
deföed
(
STM32F100xE
)

1589 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
Ë
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
, (
uöt32_t
)(__HSE_PREDIV_VALUE__))

	)

1599 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
) \

1600 
	`MODIFY_REG
(
RCC
->
CFGR
,
RCC_CFGR_PLLXTPRE
, (
uöt32_t
)(
__HSE_PREDIV_VALUE__
))

	)

1604 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

1605 || 
deföed
(
STM32F100xE
)

1609 
	#__HAL_RCC_HSE_GET_PREDIV
(Ë
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
)

	)

1615 
	#__HAL_RCC_HSE_GET_PREDIV
(Ë
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLXTPRE
)

	)

1623 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1634 
	#__HAL_RCC_PLLI2S_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
ENABLE
)

	)

1639 
	#__HAL_RCC_PLLI2S_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
DISABLE
)

	)

1657 
	#__HAL_RCC_PLLI2S_CONFIG
(
__PLLI2SMUL__
)\

1658 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
,(
__PLLI2SMUL__
))

	)

1671 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1672 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1679 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1680 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
, (
uöt32_t
)(
__USBCLKSOURCE__
))

	)

1687 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
)))

	)

1691 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1699 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1700 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
, (
uöt32_t
)(
__USBCLKSOURCE__
))

	)

1707 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
)))

	)

1719 
	#__HAL_RCC_ADC_CONFIG
(
__ADCCLKSOURCE__
) \

1720 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
, (
uöt32_t
)(
__ADCCLKSOURCE__
))

	)

1729 
	#__HAL_RCC_GET_ADC_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
)))

	)

1735 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1749 
	#__HAL_RCC_HSE_PREDIV2_CONFIG
(
__HSE_PREDIV2_VALUE__
) \

1750 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
, (
uöt32_t
)(
__HSE_PREDIV2_VALUE__
))

	)

1755 
	#__HAL_RCC_HSE_GET_PREDIV2
(Ë
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
)

	)

1771 
	#__HAL_RCC_PLL2_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLL2ON_BB
 = 
ENABLE
)

	)

1777 
	#__HAL_RCC_PLL2_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLL2ON_BB
 = 
DISABLE
)

	)

1795 
	#__HAL_RCC_PLL2_CONFIG
(
__PLL2MUL__
)\

1796 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL2MUL
,(
__PLL2MUL__
))

	)

1813 
	#__HAL_RCC_I2S2_CONFIG
(
__I2S2CLKSOURCE__
) \

1814 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
, (
uöt32_t
)(
__I2S2CLKSOURCE__
))

	)

1821 
	#__HAL_RCC_GET_I2S2_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
)))

	)

1829 
	#__HAL_RCC_I2S3_CONFIG
(
__I2S2CLKSOURCE__
) \

1830 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
, (
uöt32_t
)(
__I2S2CLKSOURCE__
))

	)

1837 
	#__HAL_RCC_GET_I2S3_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
)))

	)

1857 
HAL_SètusTy≥Def
 
HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1858 
HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1859 
uöt32_t
 
HAL_RCCEx_GëPîùhCLKFªq
(uöt32_à
PîùhClk
);

1865 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1869 
HAL_SètusTy≥Def
 
HAL_RCCEx_E«bÀPLLI2S
(
RCC_PLLI2SInôTy≥Def
 *
PLLI2SInô
);

1870 
HAL_SètusTy≥Def
 
HAL_RCCEx_DißbÀPLLI2S
();

1879 
HAL_SètusTy≥Def
 
HAL_RCCEx_E«bÀPLL2
(
RCC_PLL2InôTy≥Def
 *
PLL2Inô
);

1880 
HAL_SètusTy≥Def
 
HAL_RCCEx_DißbÀPLL2
();

1899 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h

20 #i‚de‡
STM32F1xx_HAL_SPI_H


21 
	#STM32F1xx_HAL_SPI_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

48 
uöt32_t
 
Mode
;

51 
uöt32_t
 
Dúe˘i⁄
;

54 
uöt32_t
 
D©aSize
;

57 
uöt32_t
 
CLKPﬁ¨ôy
;

60 
uöt32_t
 
CLKPha£
;

63 
uöt32_t
 
NSS
;

67 
uöt32_t
 
BaudR©ePªsˇÀr
;

73 
uöt32_t
 
Fú°Bô
;

76 
uöt32_t
 
TIMode
;

79 
uöt32_t
 
CRCCÆcuœti⁄
;

82 
uöt32_t
 
CRCPﬁynomül
;

84 } 
	tSPI_InôTy≥Def
;

91 
HAL_SPI_STATE_RESET
 = 0x00U,

92 
HAL_SPI_STATE_READY
 = 0x01U,

93 
HAL_SPI_STATE_BUSY
 = 0x02U,

94 
HAL_SPI_STATE_BUSY_TX
 = 0x03U,

95 
HAL_SPI_STATE_BUSY_RX
 = 0x04U,

96 
HAL_SPI_STATE_BUSY_TX_RX
 = 0x05U,

97 
HAL_SPI_STATE_ERROR
 = 0x06U,

98 
HAL_SPI_STATE_ABORT
 = 0x07U

99 } 
	tHAL_SPI_SèãTy≥Def
;

104 
	s__SPI_H™dÀTy≥Def


106 
SPI_Ty≥Def
 *
In°™˚
;

108 
SPI_InôTy≥Def
 
Inô
;

110 c⁄° 
uöt8_t
 *
pTxBuffPå
;

112 
uöt16_t
 
TxX„rSize
;

114 
__IO
 
uöt16_t
 
TxX„rCou¡
;

116 
uöt8_t
 *
pRxBuffPå
;

118 
uöt16_t
 
RxX„rSize
;

120 
__IO
 
uöt16_t
 
RxX„rCou¡
;

122 (*
RxISR
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

124 (*
TxISR
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

126 
DMA_H™dÀTy≥Def
 *
hdm©x
;

128 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

130 
HAL_LockTy≥Def
 
Lock
;

132 
__IO
 
HAL_SPI_SèãTy≥Def
 
Sèã
;

134 
__IO
 
uöt32_t
 
Eº‹Code
;

136 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

137 (* 
TxC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

138 (* 
RxC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

139 (* 
TxRxC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

140 (* 
TxHÆfC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

141 (* 
RxHÆfC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

142 (* 
TxRxHÆfC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

143 (* 
Eº‹CÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

144 (* 
Ab‹tC∂tCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

145 (* 
M•InôCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

146 (* 
M•DeInôCÆlback
)(
__SPI_H™dÀTy≥Def
 *
h•i
);

149 } 
	tSPI_H™dÀTy≥Def
;

151 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

157 
HAL_SPI_TX_COMPLETE_CB_ID
 = 0x00U,

158 
HAL_SPI_RX_COMPLETE_CB_ID
 = 0x01U,

159 
HAL_SPI_TX_RX_COMPLETE_CB_ID
 = 0x02U,

160 
HAL_SPI_TX_HALF_COMPLETE_CB_ID
 = 0x03U,

161 
HAL_SPI_RX_HALF_COMPLETE_CB_ID
 = 0x04U,

162 
HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID
 = 0x05U,

163 
HAL_SPI_ERROR_CB_ID
 = 0x06U,

164 
HAL_SPI_ABORT_CB_ID
 = 0x07U,

165 
HAL_SPI_MSPINIT_CB_ID
 = 0x08U,

166 
HAL_SPI_MSPDEINIT_CB_ID
 = 0x09U

168 } 
	tHAL_SPI_CÆlbackIDTy≥Def
;

173 (*
pSPI_CÆlbackTy≥Def
)(
	tSPI_H™dÀTy≥Def
 *
	th•i
);

188 
	#HAL_SPI_ERROR_NONE
 (0x00000000UË

	)

189 
	#HAL_SPI_ERROR_MODF
 (0x00000001UË

	)

190 
	#HAL_SPI_ERROR_CRC
 (0x00000002UË

	)

191 
	#HAL_SPI_ERROR_OVR
 (0x00000004UË

	)

192 
	#HAL_SPI_ERROR_DMA
 (0x00000010UË

	)

193 
	#HAL_SPI_ERROR_FLAG
 (0x00000020UË

	)

194 
	#HAL_SPI_ERROR_ABORT
 (0x00000040UË

	)

195 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

196 
	#HAL_SPI_ERROR_INVALID_CALLBACK
 (0x00000080UË

	)

205 
	#SPI_MODE_SLAVE
 (0x00000000U)

	)

206 
	#SPI_MODE_MASTER
 (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
)

	)

214 
	#SPI_DIRECTION_2LINES
 (0x00000000U)

	)

215 
	#SPI_DIRECTION_2LINES_RXONLY
 
SPI_CR1_RXONLY


	)

216 
	#SPI_DIRECTION_1LINE
 
SPI_CR1_BIDIMODE


	)

224 
	#SPI_DATASIZE_8BIT
 (0x00000000U)

	)

225 
	#SPI_DATASIZE_16BIT
 
SPI_CR1_DFF


	)

233 
	#SPI_POLARITY_LOW
 (0x00000000U)

	)

234 
	#SPI_POLARITY_HIGH
 
SPI_CR1_CPOL


	)

242 
	#SPI_PHASE_1EDGE
 (0x00000000U)

	)

243 
	#SPI_PHASE_2EDGE
 
SPI_CR1_CPHA


	)

251 
	#SPI_NSS_SOFT
 
SPI_CR1_SSM


	)

252 
	#SPI_NSS_HARD_INPUT
 (0x00000000U)

	)

253 
	#SPI_NSS_HARD_OUTPUT
 (
SPI_CR2_SSOE
 << 16U)

	)

261 
	#SPI_BAUDRATEPRESCALER_2
 (0x00000000U)

	)

262 
	#SPI_BAUDRATEPRESCALER_4
 (
SPI_CR1_BR_0
)

	)

263 
	#SPI_BAUDRATEPRESCALER_8
 (
SPI_CR1_BR_1
)

	)

264 
	#SPI_BAUDRATEPRESCALER_16
 (
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
)

	)

265 
	#SPI_BAUDRATEPRESCALER_32
 (
SPI_CR1_BR_2
)

	)

266 
	#SPI_BAUDRATEPRESCALER_64
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_0
)

	)

267 
	#SPI_BAUDRATEPRESCALER_128
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
)

	)

268 
	#SPI_BAUDRATEPRESCALER_256
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
)

	)

276 
	#SPI_FIRSTBIT_MSB
 (0x00000000U)

	)

277 
	#SPI_FIRSTBIT_LSB
 
SPI_CR1_LSBFIRST


	)

285 
	#SPI_TIMODE_DISABLE
 (0x00000000U)

	)

293 
	#SPI_CRCCALCULATION_DISABLE
 (0x00000000U)

	)

294 
	#SPI_CRCCALCULATION_ENABLE
 
SPI_CR1_CRCEN


	)

302 
	#SPI_IT_TXE
 
SPI_CR2_TXEIE


	)

303 
	#SPI_IT_RXNE
 
SPI_CR2_RXNEIE


	)

304 
	#SPI_IT_ERR
 
SPI_CR2_ERRIE


	)

312 
	#SPI_FLAG_RXNE
 
SPI_SR_RXNE


	)

313 
	#SPI_FLAG_TXE
 
SPI_SR_TXE


	)

314 
	#SPI_FLAG_BSY
 
SPI_SR_BSY


	)

315 
	#SPI_FLAG_CRCERR
 
SPI_SR_CRCERR


	)

316 
	#SPI_FLAG_MODF
 
SPI_SR_MODF


	)

317 
	#SPI_FLAG_OVR
 
SPI_SR_OVR


	)

318 
	#SPI_FLAG_MASK
 (
SPI_SR_RXNE
 | 
SPI_SR_TXE
 | 
SPI_SR_BSY
\

319 | 
SPI_SR_CRCERR
 | 
SPI_SR_MODF
 | 
SPI_SR_OVR
)

	)

338 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

339 
	#__HAL_SPI_RESET_HANDLE_STATE
(
__HANDLE__
) \

341 (
__HANDLE__
)->
Sèã
 = 
HAL_SPI_STATE_RESET
; \

342 (
__HANDLE__
)->
M•InôCÆlback
 = 
NULL
; \

343 (
__HANDLE__
)->
M•DeInôCÆlback
 = 
NULL
; \

344 } 0)

	)

346 
	#__HAL_SPI_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_SPI_STATE_RESET
)

	)

359 
	#__HAL_SPI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR2
, (__INTERRUPT__))

	)

371 
	#__HAL_SPI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR2
, (__INTERRUPT__))

	)

383 
	#__HAL_SPI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR2
\

384 & (
__INTERRUPT__
)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

399 
	#__HAL_SPI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

406 
	#__HAL_SPI_CLEAR_CRCERRFLAG
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
SR
 = (
uöt16_t
)(~
SPI_FLAG_CRCERR
))

	)

413 
	#__HAL_SPI_CLEAR_MODFFLAG
(
__HANDLE__
) \

415 
__IO
 
uöt32_t
 
tm¥eg_modf
 = 0x00U; \

416 
tm¥eg_modf
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

417 
	`CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR1
, 
SPI_CR1_SPE
); \

418 
	`UNUSED
(
tm¥eg_modf
); \

419 } 0U)

	)

426 
	#__HAL_SPI_CLEAR_OVRFLAG
(
__HANDLE__
) \

428 
__IO
 
uöt32_t
 
tm¥eg_ovr
 = 0x00U; \

429 
tm¥eg_ovr
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

430 
tm¥eg_ovr
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

431 
	`UNUSED
(
tm¥eg_ovr
); \

432 } 0U)

	)

439 
	#__HAL_SPI_ENABLE
(
__HANDLE__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
SPI_CR1_SPE
)

	)

446 
	#__HAL_SPI_DISABLE
(
__HANDLE__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
SPI_CR1_SPE
)

	)

456 
	#SPI_INVALID_CRC_ERROR
 0U

	)

457 
	#SPI_VALID_CRC_ERROR
 1U

	)

472 
	#SPI_1LINE_TX
(
__HANDLE__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
SPI_CR1_BIDIOE
)

	)

479 
	#SPI_1LINE_RX
(
__HANDLE__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
SPI_CR1_BIDIOE
)

	)

486 
	#SPI_RESET_CRC
(
__HANDLE__
) \

488 
	`CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR1
, 
SPI_CR1_CRCEN
); \

489 
	`SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR1
, 
SPI_CR1_CRCEN
); \

490 } 0U)

	)

504 
	#SPI_CHECK_FLAG
(
__SR__
, 
__FLAG__
Ë((((__SR__Ë& ((__FLAG__Ë& 
SPI_FLAG_MASK
)) == \

505 ((
__FLAG__
Ë& 
SPI_FLAG_MASK
)Ë? 
SET
 : 
RESET
)

	)

516 
	#SPI_CHECK_IT_SOURCE
(
__CR2__
, 
__INTERRUPT__
) ((((__CR2__) & (__INTERRUPT__)) == \

517 (
__INTERRUPT__
)Ë? 
SET
 : 
RESET
)

	)

524 
	#IS_SPI_MODE
(
__MODE__
Ë(((__MODE__Ë=
SPI_MODE_SLAVE
) || \

525 ((
__MODE__
Ë=
SPI_MODE_MASTER
))

	)

532 
	#IS_SPI_DIRECTION
(
__MODE__
Ë(((__MODE__Ë=
SPI_DIRECTION_2LINES
) || \

533 ((
__MODE__
Ë=
SPI_DIRECTION_2LINES_RXONLY
) || \

534 ((
__MODE__
Ë=
SPI_DIRECTION_1LINE
))

	)

540 
	#IS_SPI_DIRECTION_2LINES
(
__MODE__
Ë((__MODE__Ë=
SPI_DIRECTION_2LINES
)

	)

546 
	#IS_SPI_DIRECTION_2LINES_OR_1LINE
(
__MODE__
Ë(((__MODE__Ë=
SPI_DIRECTION_2LINES
) || \

547 ((
__MODE__
Ë=
SPI_DIRECTION_1LINE
))

	)

554 
	#IS_SPI_DATASIZE
(
__DATASIZE__
Ë(((__DATASIZE__Ë=
SPI_DATASIZE_16BIT
) || \

555 ((
__DATASIZE__
Ë=
SPI_DATASIZE_8BIT
))

	)

562 
	#IS_SPI_CPOL
(
__CPOL__
Ë(((__CPOL__Ë=
SPI_POLARITY_LOW
) || \

563 ((
__CPOL__
Ë=
SPI_POLARITY_HIGH
))

	)

570 
	#IS_SPI_CPHA
(
__CPHA__
Ë(((__CPHA__Ë=
SPI_PHASE_1EDGE
) || \

571 ((
__CPHA__
Ë=
SPI_PHASE_2EDGE
))

	)

578 
	#IS_SPI_NSS
(
__NSS__
Ë(((__NSS__Ë=
SPI_NSS_SOFT
) || \

579 ((
__NSS__
Ë=
SPI_NSS_HARD_INPUT
) || \

580 ((
__NSS__
Ë=
SPI_NSS_HARD_OUTPUT
))

	)

587 
	#IS_SPI_BAUDRATE_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
SPI_BAUDRATEPRESCALER_2
) || \

588 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_4
) || \

589 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_8
) || \

590 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_16
) || \

591 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_32
) || \

592 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_64
) || \

593 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_128
) || \

594 ((
__PRESCALER__
Ë=
SPI_BAUDRATEPRESCALER_256
))

	)

601 
	#IS_SPI_FIRST_BIT
(
__BIT__
Ë(((__BIT__Ë=
SPI_FIRSTBIT_MSB
) || \

602 ((
__BIT__
Ë=
SPI_FIRSTBIT_LSB
))

	)

609 
	#IS_SPI_TIMODE
(
__MODE__
Ë((__MODE__Ë=
SPI_TIMODE_DISABLE
)

	)

616 
	#IS_SPI_CRC_CALCULATION
(
__CALCULATION__
Ë(((__CALCULATION__Ë=
SPI_CRCCALCULATION_DISABLE
) || \

617 ((
__CALCULATION__
Ë=
SPI_CRCCALCULATION_ENABLE
))

	)

624 
	#IS_SPI_CRC_POLYNOMIAL
(
__POLYNOMIAL__
) (((__POLYNOMIAL__) >= 0x1U) && \

625 ((
__POLYNOMIAL__
) <= 0xFFFFU) && \

626 (((
__POLYNOMIAL__
)&0x1UË!0U))

	)

632 
	#IS_SPI_DMA_HANDLE
(
__HANDLE__
Ë((__HANDLE__Ë!
NULL
)

	)

642 
uöt8_t
 
SPI_ISCRCEº‹VÆid
(
SPI_H™dÀTy≥Def
 *
h•i
);

656 
HAL_SètusTy≥Def
 
HAL_SPI_Inô
(
SPI_H™dÀTy≥Def
 *
h•i
);

657 
HAL_SètusTy≥Def
 
HAL_SPI_DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
);

658 
HAL_SPI_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
);

659 
HAL_SPI_M•DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
);

662 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

663 
HAL_SètusTy≥Def
 
HAL_SPI_Regi°îCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
, 
HAL_SPI_CÆlbackIDTy≥Def
 
CÆlbackID
,

664 
pSPI_CÆlbackTy≥Def
 
pCÆlback
);

665 
HAL_SètusTy≥Def
 
HAL_SPI_UnRegi°îCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
, 
HAL_SPI_CÆlbackIDTy≥Def
 
CÆlbackID
);

675 
HAL_SètusTy≥Def
 
HAL_SPI_Tønsmô
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

676 
HAL_SètusTy≥Def
 
HAL_SPI_Re˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

677 
HAL_SètusTy≥Def
 
HAL_SPI_TønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
,

678 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

679 
HAL_SètusTy≥Def
 
HAL_SPI_Tønsmô_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

680 
HAL_SètusTy≥Def
 
HAL_SPI_Re˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

681 
HAL_SètusTy≥Def
 
HAL_SPI_TønsmôRe˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
,

682 
uöt16_t
 
Size
);

683 
HAL_SètusTy≥Def
 
HAL_SPI_Tønsmô_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

684 
HAL_SètusTy≥Def
 
HAL_SPI_Re˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

685 
HAL_SètusTy≥Def
 
HAL_SPI_TønsmôRe˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
,

686 
uöt16_t
 
Size
);

687 
HAL_SètusTy≥Def
 
HAL_SPI_DMAPau£
(
SPI_H™dÀTy≥Def
 *
h•i
);

688 
HAL_SètusTy≥Def
 
HAL_SPI_DMAResume
(
SPI_H™dÀTy≥Def
 *
h•i
);

689 
HAL_SètusTy≥Def
 
HAL_SPI_DMASt›
(
SPI_H™dÀTy≥Def
 *
h•i
);

691 
HAL_SètusTy≥Def
 
HAL_SPI_Ab‹t
(
SPI_H™dÀTy≥Def
 *
h•i
);

692 
HAL_SètusTy≥Def
 
HAL_SPI_Ab‹t_IT
(
SPI_H™dÀTy≥Def
 *
h•i
);

694 
HAL_SPI_IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
);

695 
HAL_SPI_TxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

696 
HAL_SPI_RxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

697 
HAL_SPI_TxRxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

698 
HAL_SPI_TxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

699 
HAL_SPI_RxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

700 
HAL_SPI_TxRxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

701 
HAL_SPI_Eº‹CÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

702 
HAL_SPI_Ab‹tC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

711 
HAL_SPI_SèãTy≥Def
 
HAL_SPI_GëSèã
(c⁄° 
SPI_H™dÀTy≥Def
 *
h•i
);

712 
uöt32_t
 
HAL_SPI_GëEº‹
(c⁄° 
SPI_H™dÀTy≥Def
 *
h•i
);

729 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h

20 #i‚de‡
__STM32F1xx_HAL_UART_H


21 
	#__STM32F1xx_HAL_UART_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx_hÆ_def.h
"

48 
uöt32_t
 
BaudR©e
;

53 
uöt32_t
 
W‹dLígth
;

56 
uöt32_t
 
St›Bôs
;

59 
uöt32_t
 
P¨ôy
;

66 
uöt32_t
 
Mode
;

69 
uöt32_t
 
HwFlowCé
;

72 
uöt32_t
 
OvîSam∂ög
;

75 } 
	tUART_InôTy≥Def
;

118 
HAL_UART_STATE_RESET
 = 0x00U,

120 
HAL_UART_STATE_READY
 = 0x20U,

122 
HAL_UART_STATE_BUSY
 = 0x24U,

124 
HAL_UART_STATE_BUSY_TX
 = 0x21U,

126 
HAL_UART_STATE_BUSY_RX
 = 0x22U,

128 
HAL_UART_STATE_BUSY_TX_RX
 = 0x23U,

131 
HAL_UART_STATE_TIMEOUT
 = 0xA0U,

133 
HAL_UART_STATE_ERROR
 = 0xE0U

135 } 
	tHAL_UART_SèãTy≥Def
;

144 
uöt32_t
 
	tHAL_UART_RxTy≥Ty≥Def
;

155 
uöt32_t
 
	tHAL_UART_RxEvítTy≥Ty≥Def
;

160 
	s__UART_H™dÀTy≥Def


162 
USART_Ty≥Def
 *
In°™˚
;

164 
UART_InôTy≥Def
 
Inô
;

166 c⁄° 
uöt8_t
 *
pTxBuffPå
;

168 
uöt16_t
 
TxX„rSize
;

170 
__IO
 
uöt16_t
 
TxX„rCou¡
;

172 
uöt8_t
 *
pRxBuffPå
;

174 
uöt16_t
 
RxX„rSize
;

176 
__IO
 
uöt16_t
 
RxX„rCou¡
;

178 
__IO
 
HAL_UART_RxTy≥Ty≥Def
 
Re˚±i⁄Ty≥
;

180 
__IO
 
HAL_UART_RxEvítTy≥Ty≥Def
 
RxEvítTy≥
;

182 
DMA_H™dÀTy≥Def
 *
hdm©x
;

184 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

186 
HAL_LockTy≥Def
 
Lock
;

188 
__IO
 
HAL_UART_SèãTy≥Def
 
gSèã
;

192 
__IO
 
HAL_UART_SèãTy≥Def
 
RxSèã
;

195 
__IO
 
uöt32_t
 
Eº‹Code
;

197 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

198 (* 
TxHÆfC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

199 (* 
TxC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

200 (* 
RxHÆfC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

201 (* 
RxC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

202 (* 
Eº‹CÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

203 (* 
Ab‹tC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

204 (* 
Ab‹tTønsmôC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

205 (* 
Ab‹tRe˚iveC∂tCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

206 (* 
WakeupCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

207 (* 
RxEvítCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt16_t
 
Pos
);

209 (* 
M•InôCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

210 (* 
M•DeInôCÆlback
)(
__UART_H™dÀTy≥Def
 *
hu¨t
);

213 } 
	tUART_H™dÀTy≥Def
;

215 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

221 
HAL_UART_TX_HALFCOMPLETE_CB_ID
 = 0x00U,

222 
HAL_UART_TX_COMPLETE_CB_ID
 = 0x01U,

223 
HAL_UART_RX_HALFCOMPLETE_CB_ID
 = 0x02U,

224 
HAL_UART_RX_COMPLETE_CB_ID
 = 0x03U,

225 
HAL_UART_ERROR_CB_ID
 = 0x04U,

226 
HAL_UART_ABORT_COMPLETE_CB_ID
 = 0x05U,

227 
HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID
 = 0x06U,

228 
HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID
 = 0x07U,

229 
HAL_UART_WAKEUP_CB_ID
 = 0x08U,

231 
HAL_UART_MSPINIT_CB_ID
 = 0x0BU,

232 
HAL_UART_MSPDEINIT_CB_ID
 = 0x0CU

234 } 
	tHAL_UART_CÆlbackIDTy≥Def
;

239 (*
pUART_CÆlbackTy≥Def
)(
	tUART_H™dÀTy≥Def
 *
	thu¨t
);

240 (*
pUART_RxEvítCÆlbackTy≥Def
)(
	t__UART_H™dÀTy≥Def
 *
	thu¨t
, 
	tuöt16_t
 
	tPos
);

256 
	#HAL_UART_ERROR_NONE
 0x00000000U

	)

257 
	#HAL_UART_ERROR_PE
 0x00000001U

	)

258 
	#HAL_UART_ERROR_NE
 0x00000002U

	)

259 
	#HAL_UART_ERROR_FE
 0x00000004U

	)

260 
	#HAL_UART_ERROR_ORE
 0x00000008U

	)

261 
	#HAL_UART_ERROR_DMA
 0x00000010U

	)

262 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

263 
	#HAL_UART_ERROR_INVALID_CALLBACK
 0x00000020U

	)

272 
	#UART_WORDLENGTH_8B
 0x00000000U

	)

273 
	#UART_WORDLENGTH_9B
 ((
uöt32_t
)
USART_CR1_M
)

	)

281 
	#UART_STOPBITS_1
 0x00000000U

	)

282 
	#UART_STOPBITS_2
 ((
uöt32_t
)
USART_CR2_STOP_1
)

	)

290 
	#UART_PARITY_NONE
 0x00000000U

	)

291 
	#UART_PARITY_EVEN
 ((
uöt32_t
)
USART_CR1_PCE
)

	)

292 
	#UART_PARITY_ODD
 ((
uöt32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

300 
	#UART_HWCONTROL_NONE
 0x00000000U

	)

301 
	#UART_HWCONTROL_RTS
 ((
uöt32_t
)
USART_CR3_RTSE
)

	)

302 
	#UART_HWCONTROL_CTS
 ((
uöt32_t
)
USART_CR3_CTSE
)

	)

303 
	#UART_HWCONTROL_RTS_CTS
 ((
uöt32_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

311 
	#UART_MODE_RX
 ((
uöt32_t
)
USART_CR1_RE
)

	)

312 
	#UART_MODE_TX
 ((
uöt32_t
)
USART_CR1_TE
)

	)

313 
	#UART_MODE_TX_RX
 ((
uöt32_t
)(
USART_CR1_TE
 | 
USART_CR1_RE
))

	)

321 
	#UART_STATE_DISABLE
 0x00000000U

	)

322 
	#UART_STATE_ENABLE
 ((
uöt32_t
)
USART_CR1_UE
)

	)

330 
	#UART_OVERSAMPLING_16
 0x00000000U

	)

331 #i‡
deföed
(
USART_CR1_OVER8
)

332 
	#UART_OVERSAMPLING_8
 ((
uöt32_t
)
USART_CR1_OVER8
)

	)

341 
	#UART_LINBREAKDETECTLENGTH_10B
 0x00000000U

	)

342 
	#UART_LINBREAKDETECTLENGTH_11B
 ((
uöt32_t
)
USART_CR2_LBDL
)

	)

350 
	#UART_WAKEUPMETHOD_IDLELINE
 0x00000000U

	)

351 
	#UART_WAKEUPMETHOD_ADDRESSMARK
 ((
uöt32_t
)
USART_CR1_WAKE
)

	)

361 
	#UART_FLAG_CTS
 ((
uöt32_t
)
USART_SR_CTS
)

	)

362 
	#UART_FLAG_LBD
 ((
uöt32_t
)
USART_SR_LBD
)

	)

363 
	#UART_FLAG_TXE
 ((
uöt32_t
)
USART_SR_TXE
)

	)

364 
	#UART_FLAG_TC
 ((
uöt32_t
)
USART_SR_TC
)

	)

365 
	#UART_FLAG_RXNE
 ((
uöt32_t
)
USART_SR_RXNE
)

	)

366 
	#UART_FLAG_IDLE
 ((
uöt32_t
)
USART_SR_IDLE
)

	)

367 
	#UART_FLAG_ORE
 ((
uöt32_t
)
USART_SR_ORE
)

	)

368 
	#UART_FLAG_NE
 ((
uöt32_t
)
USART_SR_NE
)

	)

369 
	#UART_FLAG_FE
 ((
uöt32_t
)
USART_SR_FE
)

	)

370 
	#UART_FLAG_PE
 ((
uöt32_t
)
USART_SR_PE
)

	)

385 
	#UART_IT_PE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_PEIE
))

	)

386 
	#UART_IT_TXE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_TXEIE
))

	)

387 
	#UART_IT_TC
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_TCIE
))

	)

388 
	#UART_IT_RXNE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_RXNEIE
))

	)

389 
	#UART_IT_IDLE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_IDLEIE
))

	)

391 
	#UART_IT_LBD
 ((
uöt32_t
)(
UART_CR2_REG_INDEX
 << 28U | 
USART_CR2_LBDIE
))

	)

393 
	#UART_IT_CTS
 ((
uöt32_t
)(
UART_CR3_REG_INDEX
 << 28U | 
USART_CR3_CTSIE
))

	)

394 
	#UART_IT_ERR
 ((
uöt32_t
)(
UART_CR3_REG_INDEX
 << 28U | 
USART_CR3_EIE
))

	)

402 
	#HAL_UART_RECEPTION_STANDARD
 (0x00000000UË

	)

403 
	#HAL_UART_RECEPTION_TOIDLE
 (0x00000001UË

	)

411 
	#HAL_UART_RXEVENT_TC
 (0x00000000UË

	)

412 
	#HAL_UART_RXEVENT_HT
 (0x00000001UË

	)

413 
	#HAL_UART_RXEVENT_IDLE
 (0x00000002U)

	)

433 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

434 
	#__HAL_UART_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

435 (
__HANDLE__
)->
gSèã
 = 
HAL_UART_STATE_RESET
; \

436 (
__HANDLE__
)->
RxSèã
 = 
HAL_UART_STATE_RESET
; \

437 (
__HANDLE__
)->
M•InôCÆlback
 = 
NULL
; \

438 (
__HANDLE__
)->
M•DeInôCÆlback
 = 
NULL
; \

439 } 0U)

	)

441 
	#__HAL_UART_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

442 (
__HANDLE__
)->
gSèã
 = 
HAL_UART_STATE_RESET
; \

443 (
__HANDLE__
)->
RxSèã
 = 
HAL_UART_STATE_RESET
; \

444 } 0U)

	)

452 
	#__HAL_UART_FLUSH_DRREGISTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
DR
)

	)

472 
	#__HAL_UART_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

496 
	#__HAL_UART_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

504 
	#__HAL_UART_CLEAR_PEFLAG
(
__HANDLE__
) \

506 
__IO
 
uöt32_t
 
tm¥eg
 = 0x00U; \

507 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

508 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

509 
	`UNUSED
(
tm¥eg
); \

510 } 0U)

	)

518 
	#__HAL_UART_CLEAR_FEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

526 
	#__HAL_UART_CLEAR_NEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

534 
	#__HAL_UART_CLEAR_OREFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

542 
	#__HAL_UART_CLEAR_IDLEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

560 
	#__HAL_UART_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28UË=
UART_CR1_REG_INDEX
)? ((__HANDLE__)->
In°™˚
->
CR1
 |((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

561 (((
__INTERRUPT__
Ë>> 28UË=
UART_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In°™˚
->
CR2
 |((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

562 ((
__HANDLE__
)->
In°™˚
->
CR3
 |((
__INTERRUPT__
Ë& 
UART_IT_MASK
)))

	)

580 
	#__HAL_UART_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28UË=
UART_CR1_REG_INDEX
)? ((__HANDLE__)->
In°™˚
->
CR1
 &~((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

581 (((
__INTERRUPT__
Ë>> 28UË=
UART_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In°™˚
->
CR2
 &~((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

582 ((
__HANDLE__
)->
In°™˚
->
CR3
 &~ ((
__INTERRUPT__
Ë& 
UART_IT_MASK
)))

	)

599 
	#__HAL_UART_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
Ë(((((__IT__Ë>> 28UË=
UART_CR1_REG_INDEX
)? (__HANDLE__)->
In°™˚
->
CR1
:(((((
uöt32_t
)(__IT__)Ë>> 28UË=
UART_CR2_REG_INDEX
)? \

600 (
__HANDLE__
)->
In°™˚
->
CR2
 : (__HANDLE__)->In°™˚->
CR3
)Ë& (((
uöt32_t
)(
__IT__
)Ë& 
UART_IT_MASK
))

	)

616 
	#__HAL_UART_HWCONTROL_CTS_ENABLE
(
__HANDLE__
) \

618 
	`ATOMIC_SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_CTSE
); \

619 (
__HANDLE__
)->
Inô
.
HwFlowCé
 |
USART_CR3_CTSE
; \

620 } 0U)

	)

636 
	#__HAL_UART_HWCONTROL_CTS_DISABLE
(
__HANDLE__
) \

638 
	`ATOMIC_CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_CTSE
); \

639 (
__HANDLE__
)->
Inô
.
HwFlowCé
 &~(
USART_CR3_CTSE
); \

640 } 0U)

	)

656 
	#__HAL_UART_HWCONTROL_RTS_ENABLE
(
__HANDLE__
) \

658 
	`ATOMIC_SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_RTSE
); \

659 (
__HANDLE__
)->
Inô
.
HwFlowCé
 |
USART_CR3_RTSE
; \

660 } 0U)

	)

676 
	#__HAL_UART_HWCONTROL_RTS_DISABLE
(
__HANDLE__
) \

678 
	`ATOMIC_CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_RTSE
);\

679 (
__HANDLE__
)->
Inô
.
HwFlowCé
 &~(
USART_CR3_RTSE
); \

680 } 0U)

	)

681 #i‡
deföed
(
USART_CR3_ONEBIT
)

687 
	#__HAL_UART_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

693 
	#__HAL_UART_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
\

694 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
))

	)

701 
	#__HAL_UART_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
USART_CR1_UE
)

	)

707 
	#__HAL_UART_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
USART_CR1_UE
)

	)

722 
HAL_SètusTy≥Def
 
HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

723 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

724 
HAL_SètusTy≥Def
 
HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
);

725 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
);

726 
HAL_SètusTy≥Def
 
HAL_UART_DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

727 
HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

728 
HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

731 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

732 
HAL_SètusTy≥Def
 
HAL_UART_Regi°îCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
HAL_UART_CÆlbackIDTy≥Def
 
CÆlbackID
,

733 
pUART_CÆlbackTy≥Def
 
pCÆlback
);

734 
HAL_SètusTy≥Def
 
HAL_UART_UnRegi°îCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
HAL_UART_CÆlbackIDTy≥Def
 
CÆlbackID
);

736 
HAL_SètusTy≥Def
 
HAL_UART_Regi°îRxEvítCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
pUART_RxEvítCÆlbackTy≥Def
 
pCÆlback
);

737 
HAL_SètusTy≥Def
 
HAL_UART_UnRegi°îRxEvítCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

749 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

750 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

751 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

752 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

753 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

754 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

755 
HAL_SètusTy≥Def
 
HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
);

756 
HAL_SètusTy≥Def
 
HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
);

757 
HAL_SètusTy≥Def
 
HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
);

759 
HAL_SètusTy≥Def
 
HAL_UARTEx_Re˚iveToIdÀ
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, uöt16_à*
RxLí
,

760 
uöt32_t
 
Timeout
);

761 
HAL_SètusTy≥Def
 
HAL_UARTEx_Re˚iveToIdÀ_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

762 
HAL_SètusTy≥Def
 
HAL_UARTEx_Re˚iveToIdÀ_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

764 
HAL_UART_RxEvítTy≥Ty≥Def
 
HAL_UARTEx_GëRxEvítTy≥
(
UART_H™dÀTy≥Def
 *
hu¨t
);

767 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹t
(
UART_H™dÀTy≥Def
 *
hu¨t
);

768 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tTønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

769 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tRe˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
);

770 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹t_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

771 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

772 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tRe˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

774 
HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
);

775 
HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

776 
HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

777 
HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

778 
HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

779 
HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

780 
HAL_UART_Ab‹tC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

781 
HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

782 
HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

784 
HAL_UARTEx_RxEvítCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt16_t
 
Size
);

794 
HAL_SètusTy≥Def
 
HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
);

795 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

796 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_ExôMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

797 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
);

798 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
);

807 
HAL_UART_SèãTy≥Def
 
HAL_UART_GëSèã
(c⁄° 
UART_H™dÀTy≥Def
 *
hu¨t
);

808 
uöt32_t
 
HAL_UART_GëEº‹
(c⁄° 
UART_H™dÀTy≥Def
 *
hu¨t
);

825 
	#UART_IT_MASK
 0x0000FFFFU

	)

827 
	#UART_CR1_REG_INDEX
 1U

	)

828 
	#UART_CR2_REG_INDEX
 2U

	)

829 
	#UART_CR3_REG_INDEX
 3U

	)

838 
	#IS_UART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
UART_WORDLENGTH_8B
) || \

839 ((
LENGTH
Ë=
UART_WORDLENGTH_9B
))

	)

840 
	#IS_UART_LIN_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
UART_WORDLENGTH_8B
))

	)

841 
	#IS_UART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
UART_STOPBITS_1
) || \

842 ((
STOPBITS
Ë=
UART_STOPBITS_2
))

	)

843 
	#IS_UART_PARITY
(
PARITY
Ë(((PARITYË=
UART_PARITY_NONE
) || \

844 ((
PARITY
Ë=
UART_PARITY_EVEN
) || \

845 ((
PARITY
Ë=
UART_PARITY_ODD
))

	)

846 
	#IS_UART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

847 (((
CONTROL
Ë=
UART_HWCONTROL_NONE
) || \

848 ((
CONTROL
Ë=
UART_HWCONTROL_RTS
) || \

849 ((
CONTROL
Ë=
UART_HWCONTROL_CTS
) || \

850 ((
CONTROL
Ë=
UART_HWCONTROL_RTS_CTS
))

	)

851 
	#IS_UART_MODE
(
MODE
Ë((((MODEË& 0x0000FFF3UË=0x00UË&& ((MODEË!0x00U))

	)

852 
	#IS_UART_STATE
(
STATE
Ë(((STATEË=
UART_STATE_DISABLE
) || \

853 ((
STATE
Ë=
UART_STATE_ENABLE
))

	)

854 #i‡
deföed
(
USART_CR1_OVER8
)

855 
	#IS_UART_OVERSAMPLING
(
SAMPLING
Ë(((SAMPLINGË=
UART_OVERSAMPLING_16
) || \

856 ((
SAMPLING
Ë=
UART_OVERSAMPLING_8
))

	)

858 
	#IS_UART_LIN_OVERSAMPLING
(
SAMPLING
Ë(((SAMPLINGË=
UART_OVERSAMPLING_16
))

	)

859 
	#IS_UART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë(((LENGTHË=
UART_LINBREAKDETECTLENGTH_10B
) || \

860 ((
LENGTH
Ë=
UART_LINBREAKDETECTLENGTH_11B
))

	)

861 
	#IS_UART_WAKEUPMETHOD
(
WAKEUP
Ë(((WAKEUPË=
UART_WAKEUPMETHOD_IDLELINE
) || \

862 ((
WAKEUP
Ë=
UART_WAKEUPMETHOD_ADDRESSMARK
))

	)

863 
	#IS_UART_BAUDRATE
(
BAUDRATE
Ë((BAUDRATEË<4500000U)

	)

864 
	#IS_UART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0x0FU)

	)

866 
	#UART_DIV_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25U)/(4U*(_BAUD_)))

	)

867 
	#UART_DIVMANT_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë(
	`UART_DIV_SAMPLING16
((_PCLK_), (_BAUD_))/100U)

	)

868 
	#UART_DIVFRAQ_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë((((
	`UART_DIV_SAMPLING16
((_PCLK_), (_BAUD_)Ë- (
	`UART_DIVMANT_SAMPLING16
((_PCLK_), (_BAUD_)) * 100U)) * 16U)\

869 + 50UË/ 100U)

	)

872 
	#UART_BRR_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë(((
	`UART_DIVMANT_SAMPLING16
((_PCLK_), (_BAUD_)) << 4U) + \

873 (
	`UART_DIVFRAQ_SAMPLING16
((
_PCLK_
), (
_BAUD_
)) & 0xF0U)) + \

874 (
	`UART_DIVFRAQ_SAMPLING16
((
_PCLK_
), (
_BAUD_
)Ë& 0x0FU))

	)

876 
	#UART_DIV_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25U)/(2U*(_BAUD_)))

	)

877 
	#UART_DIVMANT_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë(
	`UART_DIV_SAMPLING8
((_PCLK_), (_BAUD_))/100U)

	)

878 
	#UART_DIVFRAQ_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë((((
	`UART_DIV_SAMPLING8
((_PCLK_), (_BAUD_)Ë- (
	`UART_DIVMANT_SAMPLING8
((_PCLK_), (_BAUD_)) * 100U)) * 8U)\

879 + 50UË/ 100U)

	)

882 
	#UART_BRR_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë(((
	`UART_DIVMANT_SAMPLING8
((_PCLK_), (_BAUD_)) << 4U) + \

883 ((
	`UART_DIVFRAQ_SAMPLING8
((
_PCLK_
), (
_BAUD_
)) & 0xF8U) << 1U)) + \

884 (
	`UART_DIVFRAQ_SAMPLING8
((
_PCLK_
), (
_BAUD_
)Ë& 0x07U))

	)

895 
HAL_SètusTy≥Def
 
UART_Sèπ_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

896 
HAL_SètusTy≥Def
 
UART_Sèπ_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

910 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h

36 #i‚de‡
__STM32F1xx_LL_BUS_H


37 
	#__STM32F1xx_LL_BUS_H


	)

39 #ifde‡
__˝lu•lus


44 
	~"°m32f1xx.h
"

50 #i‡
deföed
(
RCC
)

60 #i‡
deföed
(
RCC_AHBRSTR_OTGFSRST
Ë|| deföed(
RCC_AHBRSTR_ETHMACRST
)

61 
	#RCC_AHBRSTR_SUPPORT


	)

75 
	#LL_AHB1_GRP1_PERIPH_ALL
 (
uöt32_t
)0xFFFFFFFFU

	)

76 
	#LL_AHB1_GRP1_PERIPH_CRC
 
RCC_AHBENR_CRCEN


	)

77 
	#LL_AHB1_GRP1_PERIPH_DMA1
 
RCC_AHBENR_DMA1EN


	)

78 #i‡
deföed
(
DMA2
)

79 
	#LL_AHB1_GRP1_PERIPH_DMA2
 
RCC_AHBENR_DMA2EN


	)

81 #i‡
deföed
(
ETH
)

82 
	#LL_AHB1_GRP1_PERIPH_ETHMAC
 
RCC_AHBENR_ETHMACEN


	)

83 
	#LL_AHB1_GRP1_PERIPH_ETHMACRX
 
RCC_AHBENR_ETHMACRXEN


	)

84 
	#LL_AHB1_GRP1_PERIPH_ETHMACTX
 
RCC_AHBENR_ETHMACTXEN


	)

86 
	#LL_AHB1_GRP1_PERIPH_FLASH
 
RCC_AHBENR_FLITFEN


	)

87 #i‡
deföed
(
FSMC_B™k1
)

88 
	#LL_AHB1_GRP1_PERIPH_FSMC
 
RCC_AHBENR_FSMCEN


	)

90 #i‡
deföed
(
USB_OTG_FS
)

91 
	#LL_AHB1_GRP1_PERIPH_OTGFS
 
RCC_AHBENR_OTGFSEN


	)

93 #i‡
deföed
(
SDIO
)

94 
	#LL_AHB1_GRP1_PERIPH_SDIO
 
RCC_AHBENR_SDIOEN


	)

96 
	#LL_AHB1_GRP1_PERIPH_SRAM
 
RCC_AHBENR_SRAMEN


	)

104 
	#LL_APB1_GRP1_PERIPH_ALL
 (
uöt32_t
)0xFFFFFFFFU

	)

105 
	#LL_APB1_GRP1_PERIPH_BKP
 
RCC_APB1ENR_BKPEN


	)

106 #i‡
deföed
(
CAN1
)

107 
	#LL_APB1_GRP1_PERIPH_CAN1
 
RCC_APB1ENR_CAN1EN


	)

109 #i‡
deföed
(
CAN2
)

110 
	#LL_APB1_GRP1_PERIPH_CAN2
 
RCC_APB1ENR_CAN2EN


	)

112 #i‡
deföed
(
CEC
)

113 
	#LL_APB1_GRP1_PERIPH_CEC
 
RCC_APB1ENR_CECEN


	)

115 #i‡
deföed
(
DAC
)

116 
	#LL_APB1_GRP1_PERIPH_DAC1
 
RCC_APB1ENR_DACEN


	)

118 
	#LL_APB1_GRP1_PERIPH_I2C1
 
RCC_APB1ENR_I2C1EN


	)

119 #i‡
deföed
(
I2C2
)

120 
	#LL_APB1_GRP1_PERIPH_I2C2
 
RCC_APB1ENR_I2C2EN


	)

122 
	#LL_APB1_GRP1_PERIPH_PWR
 
RCC_APB1ENR_PWREN


	)

123 #i‡
deföed
(
SPI2
)

124 
	#LL_APB1_GRP1_PERIPH_SPI2
 
RCC_APB1ENR_SPI2EN


	)

126 #i‡
deföed
(
SPI3
)

127 
	#LL_APB1_GRP1_PERIPH_SPI3
 
RCC_APB1ENR_SPI3EN


	)

129 #i‡
deföed
(
TIM12
)

130 
	#LL_APB1_GRP1_PERIPH_TIM12
 
RCC_APB1ENR_TIM12EN


	)

132 #i‡
deföed
(
TIM13
)

133 
	#LL_APB1_GRP1_PERIPH_TIM13
 
RCC_APB1ENR_TIM13EN


	)

135 #i‡
deföed
(
TIM14
)

136 
	#LL_APB1_GRP1_PERIPH_TIM14
 
RCC_APB1ENR_TIM14EN


	)

138 
	#LL_APB1_GRP1_PERIPH_TIM2
 
RCC_APB1ENR_TIM2EN


	)

139 
	#LL_APB1_GRP1_PERIPH_TIM3
 
RCC_APB1ENR_TIM3EN


	)

140 #i‡
deföed
(
TIM4
)

141 
	#LL_APB1_GRP1_PERIPH_TIM4
 
RCC_APB1ENR_TIM4EN


	)

143 #i‡
deföed
(
TIM5
)

144 
	#LL_APB1_GRP1_PERIPH_TIM5
 
RCC_APB1ENR_TIM5EN


	)

146 #i‡
deföed
(
TIM6
)

147 
	#LL_APB1_GRP1_PERIPH_TIM6
 
RCC_APB1ENR_TIM6EN


	)

149 #i‡
deföed
(
TIM7
)

150 
	#LL_APB1_GRP1_PERIPH_TIM7
 
RCC_APB1ENR_TIM7EN


	)

152 #i‡
deföed
(
UART4
)

153 
	#LL_APB1_GRP1_PERIPH_UART4
 
RCC_APB1ENR_UART4EN


	)

155 #i‡
deföed
(
UART5
)

156 
	#LL_APB1_GRP1_PERIPH_UART5
 
RCC_APB1ENR_UART5EN


	)

158 
	#LL_APB1_GRP1_PERIPH_USART2
 
RCC_APB1ENR_USART2EN


	)

159 #i‡
deföed
(
USART3
)

160 
	#LL_APB1_GRP1_PERIPH_USART3
 
RCC_APB1ENR_USART3EN


	)

162 #i‡
deföed
(
USB
)

163 
	#LL_APB1_GRP1_PERIPH_USB
 
RCC_APB1ENR_USBEN


	)

165 
	#LL_APB1_GRP1_PERIPH_WWDG
 
RCC_APB1ENR_WWDGEN


	)

173 
	#LL_APB2_GRP1_PERIPH_ALL
 (
uöt32_t
)0xFFFFFFFFU

	)

174 
	#LL_APB2_GRP1_PERIPH_ADC1
 
RCC_APB2ENR_ADC1EN


	)

175 #i‡
deföed
(
ADC2
)

176 
	#LL_APB2_GRP1_PERIPH_ADC2
 
RCC_APB2ENR_ADC2EN


	)

178 #i‡
deföed
(
ADC3
)

179 
	#LL_APB2_GRP1_PERIPH_ADC3
 
RCC_APB2ENR_ADC3EN


	)

181 
	#LL_APB2_GRP1_PERIPH_AFIO
 
RCC_APB2ENR_AFIOEN


	)

182 
	#LL_APB2_GRP1_PERIPH_GPIOA
 
RCC_APB2ENR_IOPAEN


	)

183 
	#LL_APB2_GRP1_PERIPH_GPIOB
 
RCC_APB2ENR_IOPBEN


	)

184 
	#LL_APB2_GRP1_PERIPH_GPIOC
 
RCC_APB2ENR_IOPCEN


	)

185 
	#LL_APB2_GRP1_PERIPH_GPIOD
 
RCC_APB2ENR_IOPDEN


	)

186 #i‡
deföed
(
GPIOE
)

187 
	#LL_APB2_GRP1_PERIPH_GPIOE
 
RCC_APB2ENR_IOPEEN


	)

189 #i‡
deföed
(
GPIOF
)

190 
	#LL_APB2_GRP1_PERIPH_GPIOF
 
RCC_APB2ENR_IOPFEN


	)

192 #i‡
deföed
(
GPIOG
)

193 
	#LL_APB2_GRP1_PERIPH_GPIOG
 
RCC_APB2ENR_IOPGEN


	)

195 
	#LL_APB2_GRP1_PERIPH_SPI1
 
RCC_APB2ENR_SPI1EN


	)

196 #i‡
deföed
(
TIM10
)

197 
	#LL_APB2_GRP1_PERIPH_TIM10
 
RCC_APB2ENR_TIM10EN


	)

199 #i‡
deföed
(
TIM11
)

200 
	#LL_APB2_GRP1_PERIPH_TIM11
 
RCC_APB2ENR_TIM11EN


	)

202 #i‡
deföed
(
TIM15
)

203 
	#LL_APB2_GRP1_PERIPH_TIM15
 
RCC_APB2ENR_TIM15EN


	)

205 #i‡
deföed
(
TIM16
)

206 
	#LL_APB2_GRP1_PERIPH_TIM16
 
RCC_APB2ENR_TIM16EN


	)

208 #i‡
deföed
(
TIM17
)

209 
	#LL_APB2_GRP1_PERIPH_TIM17
 
RCC_APB2ENR_TIM17EN


	)

211 
	#LL_APB2_GRP1_PERIPH_TIM1
 
RCC_APB2ENR_TIM1EN


	)

212 #i‡
deföed
(
TIM8
)

213 
	#LL_APB2_GRP1_PERIPH_TIM8
 
RCC_APB2ENR_TIM8EN


	)

215 #i‡
deföed
(
TIM9
)

216 
	#LL_APB2_GRP1_PERIPH_TIM9
 
RCC_APB2ENR_TIM9EN


	)

218 
	#LL_APB2_GRP1_PERIPH_USART1
 
RCC_APB2ENR_USART1EN


	)

267 
__STATIC_INLINE
 
LL_AHB1_GRP1_E«bÀClock
(
uöt32_t
 
Pîùhs
)

269 
__IO
 
uöt32_t
 
tm¥eg
;

270 
SET_BIT
(
RCC
->
AHBENR
, 
Pîùhs
);

272 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
Pîùhs
);

273 ()
tm¥eg
;

305 
__STATIC_INLINE
 
uöt32_t
 
LL_AHB1_GRP1_IsE«bÀdClock
(uöt32_à
Pîùhs
)

307  (
READ_BIT
(
RCC
->
AHBENR
, 
Pîùhs
) == Periphs);

339 
__STATIC_INLINE
 
LL_AHB1_GRP1_DißbÀClock
(
uöt32_t
 
Pîùhs
)

341 
CLEAR_BIT
(
RCC
->
AHBENR
, 
Pîùhs
);

344 #i‡
deföed
(
RCC_AHBRSTR_SUPPORT
)

357 
__STATIC_INLINE
 
LL_AHB1_GRP1_F‹˚Re£t
(
uöt32_t
 
Pîùhs
)

359 
SET_BIT
(
RCC
->
AHBRSTR
, 
Pîùhs
);

374 
__STATIC_INLINE
 
LL_AHB1_GRP1_Rñó£Re£t
(
uöt32_t
 
Pîùhs
)

376 
CLEAR_BIT
(
RCC
->
AHBRSTR
, 
Pîùhs
);

445 
__STATIC_INLINE
 
LL_APB1_GRP1_E«bÀClock
(
uöt32_t
 
Pîùhs
)

447 
__IO
 
uöt32_t
 
tm¥eg
;

448 
SET_BIT
(
RCC
->
APB1ENR
, 
Pîùhs
);

450 
tm¥eg
 = 
READ_BIT
(
RCC
->
APB1ENR
, 
Pîùhs
);

451 ()
tm¥eg
;

511 
__STATIC_INLINE
 
uöt32_t
 
LL_APB1_GRP1_IsE«bÀdClock
(uöt32_à
Pîùhs
)

513  (
READ_BIT
(
RCC
->
APB1ENR
, 
Pîùhs
) == Periphs);

573 
__STATIC_INLINE
 
LL_APB1_GRP1_DißbÀClock
(
uöt32_t
 
Pîùhs
)

575 
CLEAR_BIT
(
RCC
->
APB1ENR
, 
Pîùhs
);

636 
__STATIC_INLINE
 
LL_APB1_GRP1_F‹˚Re£t
(
uöt32_t
 
Pîùhs
)

638 
SET_BIT
(
RCC
->
APB1RSTR
, 
Pîùhs
);

699 
__STATIC_INLINE
 
LL_APB1_GRP1_Rñó£Re£t
(
uöt32_t
 
Pîùhs
)

701 
CLEAR_BIT
(
RCC
->
APB1RSTR
, 
Pîùhs
);

761 
__STATIC_INLINE
 
LL_APB2_GRP1_E«bÀClock
(
uöt32_t
 
Pîùhs
)

763 
__IO
 
uöt32_t
 
tm¥eg
;

764 
SET_BIT
(
RCC
->
APB2ENR
, 
Pîùhs
);

766 
tm¥eg
 = 
READ_BIT
(
RCC
->
APB2ENR
, 
Pîùhs
);

767 ()
tm¥eg
;

819 
__STATIC_INLINE
 
uöt32_t
 
LL_APB2_GRP1_IsE«bÀdClock
(uöt32_à
Pîùhs
)

821  (
READ_BIT
(
RCC
->
APB2ENR
, 
Pîùhs
) == Periphs);

873 
__STATIC_INLINE
 
LL_APB2_GRP1_DißbÀClock
(
uöt32_t
 
Pîùhs
)

875 
CLEAR_BIT
(
RCC
->
APB2ENR
, 
Pîùhs
);

928 
__STATIC_INLINE
 
LL_APB2_GRP1_F‹˚Re£t
(
uöt32_t
 
Pîùhs
)

930 
SET_BIT
(
RCC
->
APB2RSTR
, 
Pîùhs
);

983 
__STATIC_INLINE
 
LL_APB2_GRP1_Rñó£Re£t
(
uöt32_t
 
Pîùhs
)

985 
CLEAR_BIT
(
RCC
->
APB2RSTR
, 
Pîùhs
);

1007 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h

36 #i‚de‡
__STM32F1xx_LL_CORTEX_H


37 
	#__STM32F1xx_LL_CORTEX_H


	)

39 #ifde‡
__˝lu•lus


44 
	~"°m32f1xx.h
"

70 
	#LL_SYSTICK_CLKSOURCE_HCLK_DIV8
 0x00000000U

	)

71 
	#LL_SYSTICK_CLKSOURCE_HCLK
 
SysTick_CTRL_CLKSOURCE_Msk


	)

79 
	#LL_HANDLER_FAULT_USG
 
SCB_SHCSR_USGFAULTENA_Msk


	)

80 
	#LL_HANDLER_FAULT_BUS
 
SCB_SHCSR_BUSFAULTENA_Msk


	)

81 
	#LL_HANDLER_FAULT_MEM
 
SCB_SHCSR_MEMFAULTENA_Msk


	)

86 #i‡
__MPU_PRESENT


91 
	#LL_MPU_CTRL_HFNMI_PRIVDEF_NONE
 0x00000000U

	)

92 
	#LL_MPU_CTRL_HARDFAULT_NMI
 
MPU_CTRL_HFNMIENA_Msk


	)

93 
	#LL_MPU_CTRL_PRIVILEGED_DEFAULT
 
MPU_CTRL_PRIVDEFENA_Msk


	)

94 
	#LL_MPU_CTRL_HFNMI_PRIVDEF
 (
MPU_CTRL_HFNMIENA_Msk
 | 
MPU_CTRL_PRIVDEFENA_Msk
Ë

	)

102 
	#LL_MPU_REGION_NUMBER0
 0x00U

	)

103 
	#LL_MPU_REGION_NUMBER1
 0x01U

	)

104 
	#LL_MPU_REGION_NUMBER2
 0x02U

	)

105 
	#LL_MPU_REGION_NUMBER3
 0x03U

	)

106 
	#LL_MPU_REGION_NUMBER4
 0x04U

	)

107 
	#LL_MPU_REGION_NUMBER5
 0x05U

	)

108 
	#LL_MPU_REGION_NUMBER6
 0x06U

	)

109 
	#LL_MPU_REGION_NUMBER7
 0x07U

	)

117 
	#LL_MPU_REGION_SIZE_32B
 (0x04U << 
MPU_RASR_SIZE_Pos
Ë

	)

118 
	#LL_MPU_REGION_SIZE_64B
 (0x05U << 
MPU_RASR_SIZE_Pos
Ë

	)

119 
	#LL_MPU_REGION_SIZE_128B
 (0x06U << 
MPU_RASR_SIZE_Pos
Ë

	)

120 
	#LL_MPU_REGION_SIZE_256B
 (0x07U << 
MPU_RASR_SIZE_Pos
Ë

	)

121 
	#LL_MPU_REGION_SIZE_512B
 (0x08U << 
MPU_RASR_SIZE_Pos
Ë

	)

122 
	#LL_MPU_REGION_SIZE_1KB
 (0x09U << 
MPU_RASR_SIZE_Pos
Ë

	)

123 
	#LL_MPU_REGION_SIZE_2KB
 (0x0AU << 
MPU_RASR_SIZE_Pos
Ë

	)

124 
	#LL_MPU_REGION_SIZE_4KB
 (0x0BU << 
MPU_RASR_SIZE_Pos
Ë

	)

125 
	#LL_MPU_REGION_SIZE_8KB
 (0x0CU << 
MPU_RASR_SIZE_Pos
Ë

	)

126 
	#LL_MPU_REGION_SIZE_16KB
 (0x0DU << 
MPU_RASR_SIZE_Pos
Ë

	)

127 
	#LL_MPU_REGION_SIZE_32KB
 (0x0EU << 
MPU_RASR_SIZE_Pos
Ë

	)

128 
	#LL_MPU_REGION_SIZE_64KB
 (0x0FU << 
MPU_RASR_SIZE_Pos
Ë

	)

129 
	#LL_MPU_REGION_SIZE_128KB
 (0x10U << 
MPU_RASR_SIZE_Pos
Ë

	)

130 
	#LL_MPU_REGION_SIZE_256KB
 (0x11U << 
MPU_RASR_SIZE_Pos
Ë

	)

131 
	#LL_MPU_REGION_SIZE_512KB
 (0x12U << 
MPU_RASR_SIZE_Pos
Ë

	)

132 
	#LL_MPU_REGION_SIZE_1MB
 (0x13U << 
MPU_RASR_SIZE_Pos
Ë

	)

133 
	#LL_MPU_REGION_SIZE_2MB
 (0x14U << 
MPU_RASR_SIZE_Pos
Ë

	)

134 
	#LL_MPU_REGION_SIZE_4MB
 (0x15U << 
MPU_RASR_SIZE_Pos
Ë

	)

135 
	#LL_MPU_REGION_SIZE_8MB
 (0x16U << 
MPU_RASR_SIZE_Pos
Ë

	)

136 
	#LL_MPU_REGION_SIZE_16MB
 (0x17U << 
MPU_RASR_SIZE_Pos
Ë

	)

137 
	#LL_MPU_REGION_SIZE_32MB
 (0x18U << 
MPU_RASR_SIZE_Pos
Ë

	)

138 
	#LL_MPU_REGION_SIZE_64MB
 (0x19U << 
MPU_RASR_SIZE_Pos
Ë

	)

139 
	#LL_MPU_REGION_SIZE_128MB
 (0x1AU << 
MPU_RASR_SIZE_Pos
Ë

	)

140 
	#LL_MPU_REGION_SIZE_256MB
 (0x1BU << 
MPU_RASR_SIZE_Pos
Ë

	)

141 
	#LL_MPU_REGION_SIZE_512MB
 (0x1CU << 
MPU_RASR_SIZE_Pos
Ë

	)

142 
	#LL_MPU_REGION_SIZE_1GB
 (0x1DU << 
MPU_RASR_SIZE_Pos
Ë

	)

143 
	#LL_MPU_REGION_SIZE_2GB
 (0x1EU << 
MPU_RASR_SIZE_Pos
Ë

	)

144 
	#LL_MPU_REGION_SIZE_4GB
 (0x1FU << 
MPU_RASR_SIZE_Pos
Ë

	)

152 
	#LL_MPU_REGION_NO_ACCESS
 (0x00U << 
MPU_RASR_AP_Pos
Ë

	)

153 
	#LL_MPU_REGION_PRIV_RW
 (0x01U << 
MPU_RASR_AP_Pos
Ë

	)

154 
	#LL_MPU_REGION_PRIV_RW_URO
 (0x02U << 
MPU_RASR_AP_Pos
Ë

	)

155 
	#LL_MPU_REGION_FULL_ACCESS
 (0x03U << 
MPU_RASR_AP_Pos
Ë

	)

156 
	#LL_MPU_REGION_PRIV_RO
 (0x05U << 
MPU_RASR_AP_Pos
Ë

	)

157 
	#LL_MPU_REGION_PRIV_RO_URO
 (0x06U << 
MPU_RASR_AP_Pos
Ë

	)

165 
	#LL_MPU_TEX_LEVEL0
 (0x00U << 
MPU_RASR_TEX_Pos
Ë

	)

166 
	#LL_MPU_TEX_LEVEL1
 (0x01U << 
MPU_RASR_TEX_Pos
Ë

	)

167 
	#LL_MPU_TEX_LEVEL2
 (0x02U << 
MPU_RASR_TEX_Pos
Ë

	)

168 
	#LL_MPU_TEX_LEVEL4
 (0x04U << 
MPU_RASR_TEX_Pos
Ë

	)

176 
	#LL_MPU_INSTRUCTION_ACCESS_ENABLE
 0x00U

	)

177 
	#LL_MPU_INSTRUCTION_ACCESS_DISABLE
 
MPU_RASR_XN_Msk


	)

185 
	#LL_MPU_ACCESS_SHAREABLE
 
MPU_RASR_S_Msk


	)

186 
	#LL_MPU_ACCESS_NOT_SHAREABLE
 0x00U

	)

194 
	#LL_MPU_ACCESS_CACHEABLE
 
MPU_RASR_C_Msk


	)

195 
	#LL_MPU_ACCESS_NOT_CACHEABLE
 0x00U

	)

203 
	#LL_MPU_ACCESS_BUFFERABLE
 
MPU_RASR_B_Msk


	)

204 
	#LL_MPU_ACCESS_NOT_BUFFERABLE
 0x00U

	)

230 
__STATIC_INLINE
 
uöt32_t
 
LL_SYSTICK_IsA˘iveCou¡îFœg
()

232  ((
SysTick
->
CTRL
 & 
SysTick_CTRL_COUNTFLAG_Msk
) == (SysTick_CTRL_COUNTFLAG_Msk));

243 
__STATIC_INLINE
 
LL_SYSTICK_SëClkSour˚
(
uöt32_t
 
Sour˚
)

245 i‡(
Sour˚
 =
LL_SYSTICK_CLKSOURCE_HCLK
)

247 
SET_BIT
(
SysTick
->
CTRL
, 
LL_SYSTICK_CLKSOURCE_HCLK
);

251 
CLEAR_BIT
(
SysTick
->
CTRL
, 
LL_SYSTICK_CLKSOURCE_HCLK
);

262 
__STATIC_INLINE
 
uöt32_t
 
LL_SYSTICK_GëClkSour˚
()

264  
READ_BIT
(
SysTick
->
CTRL
, 
LL_SYSTICK_CLKSOURCE_HCLK
);

272 
__STATIC_INLINE
 
LL_SYSTICK_E«bÀIT
()

274 
SET_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

282 
__STATIC_INLINE
 
LL_SYSTICK_DißbÀIT
()

284 
CLEAR_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

292 
__STATIC_INLINE
 
uöt32_t
 
LL_SYSTICK_IsE«bÀdIT
()

294  (
READ_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
) == (SysTick_CTRL_TICKINT_Msk));

310 
__STATIC_INLINE
 
LL_LPM_E«bÀSÀï
()

313 
CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

321 
__STATIC_INLINE
 
LL_LPM_E«bÀDìpSÀï
()

324 
SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

334 
__STATIC_INLINE
 
LL_LPM_E«bÀSÀïOnExô
()

337 
SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

345 
__STATIC_INLINE
 
LL_LPM_DißbÀSÀïOnExô
()

348 
CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

357 
__STATIC_INLINE
 
LL_LPM_E«bÀEvítOnPíd
()

360 
SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

369 
__STATIC_INLINE
 
LL_LPM_DißbÀEvítOnPíd
()

372 
CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

392 
__STATIC_INLINE
 
LL_HANDLER_E«bÀFau…
(
uöt32_t
 
Fau…
)

395 
SET_BIT
(
SCB
->
SHCSR
, 
Fau…
);

407 
__STATIC_INLINE
 
LL_HANDLER_DißbÀFau…
(
uöt32_t
 
Fau…
)

410 
CLEAR_BIT
(
SCB
->
SHCSR
, 
Fau…
);

426 
__STATIC_INLINE
 
uöt32_t
 
LL_CPUID_GëIm∂emíãr
()

428  (
uöt32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_IMPLEMENTER_Msk
Ë>> 
SCB_CPUID_IMPLEMENTER_Pos
);

436 
__STATIC_INLINE
 
uöt32_t
 
LL_CPUID_GëV¨ü¡
()

438  (
uöt32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_VARIANT_Msk
Ë>> 
SCB_CPUID_VARIANT_Pos
);

446 
__STATIC_INLINE
 
uöt32_t
 
LL_CPUID_GëC⁄°™t
()

448  (
uöt32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_ARCHITECTURE_Msk
Ë>> 
SCB_CPUID_ARCHITECTURE_Pos
);

456 
__STATIC_INLINE
 
uöt32_t
 
LL_CPUID_GëP¨No
()

458  (
uöt32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_PARTNO_Msk
Ë>> 
SCB_CPUID_PARTNO_Pos
);

466 
__STATIC_INLINE
 
uöt32_t
 
LL_CPUID_GëRevisi⁄
()

468  (
uöt32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_REVISION_Msk
Ë>> 
SCB_CPUID_REVISION_Pos
);

475 #i‡
__MPU_PRESENT


490 
__STATIC_INLINE
 
LL_MPU_E«bÀ
(
uöt32_t
 
O±i⁄s
)

493 
WRITE_REG
(
MPU
->
CTRL
, (
MPU_CTRL_ENABLE_Msk
 | 
O±i⁄s
));

495 
__DSB
();

497 
__ISB
();

505 
__STATIC_INLINE
 
LL_MPU_DißbÀ
()

508 
__DMB
();

510 
WRITE_REG
(
MPU
->
CTRL
, 0U);

518 
__STATIC_INLINE
 
uöt32_t
 
LL_MPU_IsE«bÀd
()

520  (
READ_BIT
(
MPU
->
CTRL
, 
MPU_CTRL_ENABLE_Msk
) == (MPU_CTRL_ENABLE_Msk));

537 
__STATIC_INLINE
 
LL_MPU_E«bÀRegi⁄
(
uöt32_t
 
Regi⁄
)

540 
WRITE_REG
(
MPU
->
RNR
, 
Regi⁄
);

542 
SET_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

583 
__STATIC_INLINE
 
LL_MPU_C⁄figRegi⁄
(
uöt32_t
 
Regi⁄
, uöt32_à
SubRegi⁄DißbÀ
, uöt32_à
Addªss
, uöt32_à
Aâribuãs
)

586 
WRITE_REG
(
MPU
->
RNR
, 
Regi⁄
);

588 
WRITE_REG
(
MPU
->
RBAR
, (
Addªss
 & 0xFFFFFFE0U));

590 
WRITE_REG
(
MPU
->
RASR
, (
MPU_RASR_ENABLE_Msk
 | 
Aâribuãs
 | (
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
)));

608 
__STATIC_INLINE
 
LL_MPU_DißbÀRegi⁄
(
uöt32_t
 
Regi⁄
)

611 
WRITE_REG
(
MPU
->
RNR
, 
Regi⁄
);

613 
CLEAR_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

633 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h

20 #i‚de‡
__STM32F1xx_LL_DMA_H


21 
	#__STM32F1xx_LL_DMA_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
 (
DMA1
Ë|| deföed (
DMA2
)

46 c⁄° 
uöt8_t
 
CHANNEL_OFFSET_TAB
[] =

48 (
uöt8_t
)(
DMA1_Ch™√l1_BASE
 - 
DMA1_BASE
),

49 (
uöt8_t
)(
DMA1_Ch™√l2_BASE
 - 
DMA1_BASE
),

50 (
uöt8_t
)(
DMA1_Ch™√l3_BASE
 - 
DMA1_BASE
),

51 (
uöt8_t
)(
DMA1_Ch™√l4_BASE
 - 
DMA1_BASE
),

52 (
uöt8_t
)(
DMA1_Ch™√l5_BASE
 - 
DMA1_BASE
),

53 (
uöt8_t
)(
DMA1_Ch™√l6_BASE
 - 
DMA1_BASE
),

54 (
uöt8_t
)(
DMA1_Ch™√l7_BASE
 - 
DMA1_BASE
)

61 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

71 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

77 
uöt32_t
 
PîùhOrM2MSrcAddªss
;

82 
uöt32_t
 
Mem‹yOrM2MD°Addªss
;

87 
uöt32_t
 
Dúe˘i⁄
;

93 
uöt32_t
 
Mode
;

100 
uöt32_t
 
PîùhOrM2MSrcIncMode
;

106 
uöt32_t
 
Mem‹yOrM2MD°IncMode
;

112 
uöt32_t
 
PîùhOrM2MSrcD©aSize
;

118 
uöt32_t
 
Mem‹yOrM2MD°D©aSize
;

124 
uöt32_t
 
NbD©a
;

131 
uöt32_t
 
Pri‹ôy
;

136 } 
	tLL_DMA_InôTy≥Def
;

150 
	#LL_DMA_IFCR_CGIF1
 
DMA_IFCR_CGIF1


	)

151 
	#LL_DMA_IFCR_CTCIF1
 
DMA_IFCR_CTCIF1


	)

152 
	#LL_DMA_IFCR_CHTIF1
 
DMA_IFCR_CHTIF1


	)

153 
	#LL_DMA_IFCR_CTEIF1
 
DMA_IFCR_CTEIF1


	)

154 
	#LL_DMA_IFCR_CGIF2
 
DMA_IFCR_CGIF2


	)

155 
	#LL_DMA_IFCR_CTCIF2
 
DMA_IFCR_CTCIF2


	)

156 
	#LL_DMA_IFCR_CHTIF2
 
DMA_IFCR_CHTIF2


	)

157 
	#LL_DMA_IFCR_CTEIF2
 
DMA_IFCR_CTEIF2


	)

158 
	#LL_DMA_IFCR_CGIF3
 
DMA_IFCR_CGIF3


	)

159 
	#LL_DMA_IFCR_CTCIF3
 
DMA_IFCR_CTCIF3


	)

160 
	#LL_DMA_IFCR_CHTIF3
 
DMA_IFCR_CHTIF3


	)

161 
	#LL_DMA_IFCR_CTEIF3
 
DMA_IFCR_CTEIF3


	)

162 
	#LL_DMA_IFCR_CGIF4
 
DMA_IFCR_CGIF4


	)

163 
	#LL_DMA_IFCR_CTCIF4
 
DMA_IFCR_CTCIF4


	)

164 
	#LL_DMA_IFCR_CHTIF4
 
DMA_IFCR_CHTIF4


	)

165 
	#LL_DMA_IFCR_CTEIF4
 
DMA_IFCR_CTEIF4


	)

166 
	#LL_DMA_IFCR_CGIF5
 
DMA_IFCR_CGIF5


	)

167 
	#LL_DMA_IFCR_CTCIF5
 
DMA_IFCR_CTCIF5


	)

168 
	#LL_DMA_IFCR_CHTIF5
 
DMA_IFCR_CHTIF5


	)

169 
	#LL_DMA_IFCR_CTEIF5
 
DMA_IFCR_CTEIF5


	)

170 
	#LL_DMA_IFCR_CGIF6
 
DMA_IFCR_CGIF6


	)

171 
	#LL_DMA_IFCR_CTCIF6
 
DMA_IFCR_CTCIF6


	)

172 
	#LL_DMA_IFCR_CHTIF6
 
DMA_IFCR_CHTIF6


	)

173 
	#LL_DMA_IFCR_CTEIF6
 
DMA_IFCR_CTEIF6


	)

174 
	#LL_DMA_IFCR_CGIF7
 
DMA_IFCR_CGIF7


	)

175 
	#LL_DMA_IFCR_CTCIF7
 
DMA_IFCR_CTCIF7


	)

176 
	#LL_DMA_IFCR_CHTIF7
 
DMA_IFCR_CHTIF7


	)

177 
	#LL_DMA_IFCR_CTEIF7
 
DMA_IFCR_CTEIF7


	)

186 
	#LL_DMA_ISR_GIF1
 
DMA_ISR_GIF1


	)

187 
	#LL_DMA_ISR_TCIF1
 
DMA_ISR_TCIF1


	)

188 
	#LL_DMA_ISR_HTIF1
 
DMA_ISR_HTIF1


	)

189 
	#LL_DMA_ISR_TEIF1
 
DMA_ISR_TEIF1


	)

190 
	#LL_DMA_ISR_GIF2
 
DMA_ISR_GIF2


	)

191 
	#LL_DMA_ISR_TCIF2
 
DMA_ISR_TCIF2


	)

192 
	#LL_DMA_ISR_HTIF2
 
DMA_ISR_HTIF2


	)

193 
	#LL_DMA_ISR_TEIF2
 
DMA_ISR_TEIF2


	)

194 
	#LL_DMA_ISR_GIF3
 
DMA_ISR_GIF3


	)

195 
	#LL_DMA_ISR_TCIF3
 
DMA_ISR_TCIF3


	)

196 
	#LL_DMA_ISR_HTIF3
 
DMA_ISR_HTIF3


	)

197 
	#LL_DMA_ISR_TEIF3
 
DMA_ISR_TEIF3


	)

198 
	#LL_DMA_ISR_GIF4
 
DMA_ISR_GIF4


	)

199 
	#LL_DMA_ISR_TCIF4
 
DMA_ISR_TCIF4


	)

200 
	#LL_DMA_ISR_HTIF4
 
DMA_ISR_HTIF4


	)

201 
	#LL_DMA_ISR_TEIF4
 
DMA_ISR_TEIF4


	)

202 
	#LL_DMA_ISR_GIF5
 
DMA_ISR_GIF5


	)

203 
	#LL_DMA_ISR_TCIF5
 
DMA_ISR_TCIF5


	)

204 
	#LL_DMA_ISR_HTIF5
 
DMA_ISR_HTIF5


	)

205 
	#LL_DMA_ISR_TEIF5
 
DMA_ISR_TEIF5


	)

206 
	#LL_DMA_ISR_GIF6
 
DMA_ISR_GIF6


	)

207 
	#LL_DMA_ISR_TCIF6
 
DMA_ISR_TCIF6


	)

208 
	#LL_DMA_ISR_HTIF6
 
DMA_ISR_HTIF6


	)

209 
	#LL_DMA_ISR_TEIF6
 
DMA_ISR_TEIF6


	)

210 
	#LL_DMA_ISR_GIF7
 
DMA_ISR_GIF7


	)

211 
	#LL_DMA_ISR_TCIF7
 
DMA_ISR_TCIF7


	)

212 
	#LL_DMA_ISR_HTIF7
 
DMA_ISR_HTIF7


	)

213 
	#LL_DMA_ISR_TEIF7
 
DMA_ISR_TEIF7


	)

222 
	#LL_DMA_CCR_TCIE
 
DMA_CCR_TCIE


	)

223 
	#LL_DMA_CCR_HTIE
 
DMA_CCR_HTIE


	)

224 
	#LL_DMA_CCR_TEIE
 
DMA_CCR_TEIE


	)

232 
	#LL_DMA_CHANNEL_1
 0x00000001U

	)

233 
	#LL_DMA_CHANNEL_2
 0x00000002U

	)

234 
	#LL_DMA_CHANNEL_3
 0x00000003U

	)

235 
	#LL_DMA_CHANNEL_4
 0x00000004U

	)

236 
	#LL_DMA_CHANNEL_5
 0x00000005U

	)

237 
	#LL_DMA_CHANNEL_6
 0x00000006U

	)

238 
	#LL_DMA_CHANNEL_7
 0x00000007U

	)

239 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

240 
	#LL_DMA_CHANNEL_ALL
 0xFFFF0000U

	)

249 
	#LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 0x00000000U

	)

250 
	#LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 
DMA_CCR_DIR


	)

251 
	#LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 
DMA_CCR_MEM2MEM


	)

259 
	#LL_DMA_MODE_NORMAL
 0x00000000U

	)

260 
	#LL_DMA_MODE_CIRCULAR
 
DMA_CCR_CIRC


	)

268 
	#LL_DMA_PERIPH_INCREMENT
 
DMA_CCR_PINC


	)

269 
	#LL_DMA_PERIPH_NOINCREMENT
 0x00000000U

	)

277 
	#LL_DMA_MEMORY_INCREMENT
 
DMA_CCR_MINC


	)

278 
	#LL_DMA_MEMORY_NOINCREMENT
 0x00000000U

	)

286 
	#LL_DMA_PDATAALIGN_BYTE
 0x00000000U

	)

287 
	#LL_DMA_PDATAALIGN_HALFWORD
 
DMA_CCR_PSIZE_0


	)

288 
	#LL_DMA_PDATAALIGN_WORD
 
DMA_CCR_PSIZE_1


	)

296 
	#LL_DMA_MDATAALIGN_BYTE
 0x00000000U

	)

297 
	#LL_DMA_MDATAALIGN_HALFWORD
 
DMA_CCR_MSIZE_0


	)

298 
	#LL_DMA_MDATAALIGN_WORD
 
DMA_CCR_MSIZE_1


	)

306 
	#LL_DMA_PRIORITY_LOW
 0x00000000U

	)

307 
	#LL_DMA_PRIORITY_MEDIUM
 
DMA_CCR_PL_0


	)

308 
	#LL_DMA_PRIORITY_HIGH
 
DMA_CCR_PL_1


	)

309 
	#LL_DMA_PRIORITY_VERYHIGH
 
DMA_CCR_PL


	)

333 
	#LL_DMA_WrôeReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

341 
	#LL_DMA_RódReg
(
__INSTANCE__
, 
__REG__
Ë
	`READ_REG
(__INSTANCE__->__REG__)

	)

355 #i‡
deföed
(
DMA2
)

356 
	#__LL_DMA_GET_INSTANCE
(
__CHANNEL_INSTANCE__
) \

357 (((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë> ((uöt32_t)
DMA1_Ch™√l7
)Ë? 
DMA2
 : 
DMA1
)

	)

359 
	#__LL_DMA_GET_INSTANCE
(
__CHANNEL_INSTANCE__
Ë(
DMA1
)

	)

367 #i‡
deföed
 (
DMA2
)

368 
	#__LL_DMA_GET_CHANNEL
(
__CHANNEL_INSTANCE__
) \

369 (((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l1
)Ë? 
LL_DMA_CHANNEL_1
 : \

370 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA2_Ch™√l1
)Ë? 
LL_DMA_CHANNEL_1
 : \

371 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l2
)Ë? 
LL_DMA_CHANNEL_2
 : \

372 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA2_Ch™√l2
)Ë? 
LL_DMA_CHANNEL_2
 : \

373 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l3
)Ë? 
LL_DMA_CHANNEL_3
 : \

374 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA2_Ch™√l3
)Ë? 
LL_DMA_CHANNEL_3
 : \

375 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l4
)Ë? 
LL_DMA_CHANNEL_4
 : \

376 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA2_Ch™√l4
)Ë? 
LL_DMA_CHANNEL_4
 : \

377 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l5
)Ë? 
LL_DMA_CHANNEL_5
 : \

378 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA2_Ch™√l5
)Ë? 
LL_DMA_CHANNEL_5
 : \

379 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l6
)Ë? 
LL_DMA_CHANNEL_6
 : \

380 
LL_DMA_CHANNEL_7
)

	)

382 
	#__LL_DMA_GET_CHANNEL
(
__CHANNEL_INSTANCE__
) \

383 (((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l1
)Ë? 
LL_DMA_CHANNEL_1
 : \

384 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l2
)Ë? 
LL_DMA_CHANNEL_2
 : \

385 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l3
)Ë? 
LL_DMA_CHANNEL_3
 : \

386 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l4
)Ë? 
LL_DMA_CHANNEL_4
 : \

387 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l5
)Ë? 
LL_DMA_CHANNEL_5
 : \

388 ((
uöt32_t
)(
__CHANNEL_INSTANCE__
Ë=((uöt32_t)
DMA1_Ch™√l6
)Ë? 
LL_DMA_CHANNEL_6
 : \

389 
LL_DMA_CHANNEL_7
)

	)

398 #i‡
deföed
 (
DMA2
)

399 
	#__LL_DMA_GET_CHANNEL_INSTANCE
(
__DMA_INSTANCE__
, 
__CHANNEL__
) \

400 ((((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_1
))Ë? 
DMA1_Ch™√l1
 : \

401 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA2
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_1
))Ë? 
DMA2_Ch™√l1
 : \

402 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_2
))Ë? 
DMA1_Ch™√l2
 : \

403 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA2
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_2
))Ë? 
DMA2_Ch™√l2
 : \

404 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_3
))Ë? 
DMA1_Ch™√l3
 : \

405 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA2
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_3
))Ë? 
DMA2_Ch™√l3
 : \

406 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_4
))Ë? 
DMA1_Ch™√l4
 : \

407 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA2
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_4
))Ë? 
DMA2_Ch™√l4
 : \

408 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_5
))Ë? 
DMA1_Ch™√l5
 : \

409 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA2
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_5
))Ë? 
DMA2_Ch™√l5
 : \

410 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_6
))Ë? 
DMA1_Ch™√l6
 : \

411 
DMA1_Ch™√l7
)

	)

413 
	#__LL_DMA_GET_CHANNEL_INSTANCE
(
__DMA_INSTANCE__
, 
__CHANNEL__
) \

414 ((((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_1
))Ë? 
DMA1_Ch™√l1
 : \

415 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_2
))Ë? 
DMA1_Ch™√l2
 : \

416 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_3
))Ë? 
DMA1_Ch™√l3
 : \

417 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_4
))Ë? 
DMA1_Ch™√l4
 : \

418 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_5
))Ë? 
DMA1_Ch™√l5
 : \

419 (((
uöt32_t
)(
__DMA_INSTANCE__
Ë=((uöt32_t)
DMA1
)Ë&& ((uöt32_t)(
__CHANNEL__
Ë=((uöt32_t)
LL_DMA_CHANNEL_6
))Ë? 
DMA1_Ch™√l6
 : \

420 
DMA1_Ch™√l7
)

	)

453 
__STATIC_INLINE
 
LL_DMA_E«bÀCh™√l
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

455 
SET_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_EN
);

472 
__STATIC_INLINE
 
LL_DMA_DißbÀCh™√l
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

474 
CLEAR_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_EN
);

491 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsE«bÀdCh™√l
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

493  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

494 
DMA_CCR_EN
) == (DMA_CCR_EN));

526 
__STATIC_INLINE
 
LL_DMA_C⁄figTøns„r
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
C⁄figuøti⁄
)

528 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

529 
DMA_CCR_DIR
 | 
DMA_CCR_MEM2MEM
 | 
DMA_CCR_CIRC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_MINC
 | 
DMA_CCR_PSIZE
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PL
,

530 
C⁄figuøti⁄
);

552 
__STATIC_INLINE
 
LL_DMA_SëD©aTøns„rDúe˘i⁄
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Dúe˘i⁄
)

554 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

555 
DMA_CCR_DIR
 | 
DMA_CCR_MEM2MEM
, 
Dúe˘i⁄
);

576 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëD©aTøns„rDúe˘i⁄
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

578  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

579 
DMA_CCR_DIR
 | 
DMA_CCR_MEM2MEM
));

601 
__STATIC_INLINE
 
LL_DMA_SëMode
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Mode
)

603 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_CIRC
,

604 
Mode
);

623 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëMode
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

625  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

626 
DMA_CCR_CIRC
));

646 
__STATIC_INLINE
 
LL_DMA_SëPîùhIncMode
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
PîùhOrM2MSrcIncMode
)

648 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_PINC
,

649 
PîùhOrM2MSrcIncMode
);

668 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëPîùhIncMode
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

670  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

671 
DMA_CCR_PINC
));

691 
__STATIC_INLINE
 
LL_DMA_SëMem‹yIncMode
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Mem‹yOrM2MD°IncMode
)

693 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_MINC
,

694 
Mem‹yOrM2MD°IncMode
);

713 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëMem‹yIncMode
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

715  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

716 
DMA_CCR_MINC
));

737 
__STATIC_INLINE
 
LL_DMA_SëPîùhSize
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
PîùhOrM2MSrcD©aSize
)

739 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_PSIZE
,

740 
PîùhOrM2MSrcD©aSize
);

760 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëPîùhSize
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

762  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

763 
DMA_CCR_PSIZE
));

784 
__STATIC_INLINE
 
LL_DMA_SëMem‹ySize
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Mem‹yOrM2MD°D©aSize
)

786 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_MSIZE
,

787 
Mem‹yOrM2MD°D©aSize
);

807 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëMem‹ySize
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

809  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

810 
DMA_CCR_MSIZE
));

832 
__STATIC_INLINE
 
LL_DMA_SëCh™√lPri‹ôyLevñ
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Pri‹ôy
)

834 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_PL
,

835 
Pri‹ôy
);

856 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëCh™√lPri‹ôyLevñ
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

858  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

859 
DMA_CCR_PL
));

879 
__STATIC_INLINE
 
LL_DMA_SëD©aLígth
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
NbD©a
)

881 
MODIFY_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CNDTR
,

882 
DMA_CNDTR_NDT
, 
NbD©a
);

901 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëD©aLígth
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

903  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CNDTR
,

904 
DMA_CNDTR_NDT
));

930 
__STATIC_INLINE
 
LL_DMA_C⁄figAddªs£s
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
SrcAddªss
,

931 
uöt32_t
 
D°Addªss
, uöt32_à
Dúe˘i⁄
)

934 i‡(
Dúe˘i⁄
 =
LL_DMA_DIRECTION_MEMORY_TO_PERIPH
)

936 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CMAR
, 
SrcAddªss
);

937 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CPAR
, 
D°Addªss
);

942 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CPAR
, 
SrcAddªss
);

943 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CMAR
, 
D°Addªss
);

964 
__STATIC_INLINE
 
LL_DMA_SëMem‹yAddªss
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Mem‹yAddªss
)

966 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CMAR
, 
Mem‹yAddªss
);

986 
__STATIC_INLINE
 
LL_DMA_SëPîùhAddªss
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
PîùhAddªss
)

988 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CPAR
, 
PîùhAddªss
);

1006 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëMem‹yAddªss
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1008  (
READ_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CMAR
));

1026 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëPîùhAddªss
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1028  (
READ_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CPAR
));

1048 
__STATIC_INLINE
 
LL_DMA_SëM2MSrcAddªss
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Mem‹yAddªss
)

1050 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CPAR
, 
Mem‹yAddªss
);

1070 
__STATIC_INLINE
 
LL_DMA_SëM2MD°Addªss
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Mem‹yAddªss
)

1072 
WRITE_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CMAR
, 
Mem‹yAddªss
);

1090 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëM2MSrcAddªss
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1092  (
READ_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CPAR
));

1110 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_GëM2MD°Addªss
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1112  (
READ_REG
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CMAR
));

1129 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI1
(
DMA_Ty≥Def
 *
DMAx
)

1131  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF1
) == (DMA_ISR_GIF1));

1140 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI2
(
DMA_Ty≥Def
 *
DMAx
)

1142  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF2
) == (DMA_ISR_GIF2));

1151 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI3
(
DMA_Ty≥Def
 *
DMAx
)

1153  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF3
) == (DMA_ISR_GIF3));

1162 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI4
(
DMA_Ty≥Def
 *
DMAx
)

1164  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF4
) == (DMA_ISR_GIF4));

1173 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI5
(
DMA_Ty≥Def
 *
DMAx
)

1175  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF5
) == (DMA_ISR_GIF5));

1184 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI6
(
DMA_Ty≥Def
 *
DMAx
)

1186  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF6
) == (DMA_ISR_GIF6));

1195 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_GI7
(
DMA_Ty≥Def
 *
DMAx
)

1197  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF7
) == (DMA_ISR_GIF7));

1206 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC1
(
DMA_Ty≥Def
 *
DMAx
)

1208  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF1
) == (DMA_ISR_TCIF1));

1217 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC2
(
DMA_Ty≥Def
 *
DMAx
)

1219  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF2
) == (DMA_ISR_TCIF2));

1228 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC3
(
DMA_Ty≥Def
 *
DMAx
)

1230  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF3
) == (DMA_ISR_TCIF3));

1239 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC4
(
DMA_Ty≥Def
 *
DMAx
)

1241  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF4
) == (DMA_ISR_TCIF4));

1250 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC5
(
DMA_Ty≥Def
 *
DMAx
)

1252  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF5
) == (DMA_ISR_TCIF5));

1261 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC6
(
DMA_Ty≥Def
 *
DMAx
)

1263  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF6
) == (DMA_ISR_TCIF6));

1272 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TC7
(
DMA_Ty≥Def
 *
DMAx
)

1274  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF7
) == (DMA_ISR_TCIF7));

1283 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT1
(
DMA_Ty≥Def
 *
DMAx
)

1285  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF1
) == (DMA_ISR_HTIF1));

1294 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT2
(
DMA_Ty≥Def
 *
DMAx
)

1296  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF2
) == (DMA_ISR_HTIF2));

1305 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT3
(
DMA_Ty≥Def
 *
DMAx
)

1307  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF3
) == (DMA_ISR_HTIF3));

1316 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT4
(
DMA_Ty≥Def
 *
DMAx
)

1318  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF4
) == (DMA_ISR_HTIF4));

1327 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT5
(
DMA_Ty≥Def
 *
DMAx
)

1329  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF5
) == (DMA_ISR_HTIF5));

1338 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT6
(
DMA_Ty≥Def
 *
DMAx
)

1340  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF6
) == (DMA_ISR_HTIF6));

1349 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_HT7
(
DMA_Ty≥Def
 *
DMAx
)

1351  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF7
) == (DMA_ISR_HTIF7));

1360 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE1
(
DMA_Ty≥Def
 *
DMAx
)

1362  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF1
) == (DMA_ISR_TEIF1));

1371 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE2
(
DMA_Ty≥Def
 *
DMAx
)

1373  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF2
) == (DMA_ISR_TEIF2));

1382 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE3
(
DMA_Ty≥Def
 *
DMAx
)

1384  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF3
) == (DMA_ISR_TEIF3));

1393 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE4
(
DMA_Ty≥Def
 *
DMAx
)

1395  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF4
) == (DMA_ISR_TEIF4));

1404 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE5
(
DMA_Ty≥Def
 *
DMAx
)

1406  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF5
) == (DMA_ISR_TEIF5));

1415 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE6
(
DMA_Ty≥Def
 *
DMAx
)

1417  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF6
) == (DMA_ISR_TEIF6));

1426 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsA˘iveFœg_TE7
(
DMA_Ty≥Def
 *
DMAx
)

1428  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF7
) == (DMA_ISR_TEIF7));

1437 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI1
(
DMA_Ty≥Def
 *
DMAx
)

1439 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF1
);

1448 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI2
(
DMA_Ty≥Def
 *
DMAx
)

1450 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF2
);

1459 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI3
(
DMA_Ty≥Def
 *
DMAx
)

1461 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF3
);

1470 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI4
(
DMA_Ty≥Def
 *
DMAx
)

1472 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF4
);

1481 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI5
(
DMA_Ty≥Def
 *
DMAx
)

1483 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF5
);

1492 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI6
(
DMA_Ty≥Def
 *
DMAx
)

1494 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF6
);

1503 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_GI7
(
DMA_Ty≥Def
 *
DMAx
)

1505 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF7
);

1514 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC1
(
DMA_Ty≥Def
 *
DMAx
)

1516 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF1
);

1525 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC2
(
DMA_Ty≥Def
 *
DMAx
)

1527 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF2
);

1536 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC3
(
DMA_Ty≥Def
 *
DMAx
)

1538 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF3
);

1547 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC4
(
DMA_Ty≥Def
 *
DMAx
)

1549 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF4
);

1558 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC5
(
DMA_Ty≥Def
 *
DMAx
)

1560 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF5
);

1569 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC6
(
DMA_Ty≥Def
 *
DMAx
)

1571 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF6
);

1580 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TC7
(
DMA_Ty≥Def
 *
DMAx
)

1582 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF7
);

1591 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT1
(
DMA_Ty≥Def
 *
DMAx
)

1593 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF1
);

1602 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT2
(
DMA_Ty≥Def
 *
DMAx
)

1604 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF2
);

1613 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT3
(
DMA_Ty≥Def
 *
DMAx
)

1615 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF3
);

1624 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT4
(
DMA_Ty≥Def
 *
DMAx
)

1626 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF4
);

1635 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT5
(
DMA_Ty≥Def
 *
DMAx
)

1637 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF5
);

1646 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT6
(
DMA_Ty≥Def
 *
DMAx
)

1648 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF6
);

1657 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_HT7
(
DMA_Ty≥Def
 *
DMAx
)

1659 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF7
);

1668 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE1
(
DMA_Ty≥Def
 *
DMAx
)

1670 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF1
);

1679 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE2
(
DMA_Ty≥Def
 *
DMAx
)

1681 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF2
);

1690 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE3
(
DMA_Ty≥Def
 *
DMAx
)

1692 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF3
);

1701 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE4
(
DMA_Ty≥Def
 *
DMAx
)

1703 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF4
);

1712 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE5
(
DMA_Ty≥Def
 *
DMAx
)

1714 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF5
);

1723 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE6
(
DMA_Ty≥Def
 *
DMAx
)

1725 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF6
);

1734 
__STATIC_INLINE
 
LL_DMA_CÀ¨Fœg_TE7
(
DMA_Ty≥Def
 *
DMAx
)

1736 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF7
);

1761 
__STATIC_INLINE
 
LL_DMA_E«bÀIT_TC
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

1763 
SET_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_TCIE
);

1780 
__STATIC_INLINE
 
LL_DMA_E«bÀIT_HT
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

1782 
SET_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_HTIE
);

1799 
__STATIC_INLINE
 
LL_DMA_E«bÀIT_TE
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

1801 
SET_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_TEIE
);

1818 
__STATIC_INLINE
 
LL_DMA_DißbÀIT_TC
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

1820 
CLEAR_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_TCIE
);

1837 
__STATIC_INLINE
 
LL_DMA_DißbÀIT_HT
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

1839 
CLEAR_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_HTIE
);

1856 
__STATIC_INLINE
 
LL_DMA_DißbÀIT_TE
(
DMA_Ty≥Def
 *
DMAx
, 
uöt32_t
 
Ch™√l
)

1858 
CLEAR_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
, 
DMA_CCR_TEIE
);

1875 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsE«bÀdIT_TC
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1877  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

1878 
DMA_CCR_TCIE
) == (DMA_CCR_TCIE));

1895 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsE«bÀdIT_HT
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1897  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

1898 
DMA_CCR_HTIE
) == (DMA_CCR_HTIE));

1915 
__STATIC_INLINE
 
uöt32_t
 
LL_DMA_IsE«bÀdIT_TE
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
)

1917  (
READ_BIT
(((
DMA_Ch™√l_Ty≥Def
 *)((
uöt32_t
)((uöt32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch™√l
 - 1U])))->
CCR
,

1918 
DMA_CCR_TEIE
) == (DMA_CCR_TEIE));

1925 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

1930 
uöt32_t
 
LL_DMA_Inô
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
, 
LL_DMA_InôTy≥Def
 *
DMA_InôSåu˘
);

1931 
uöt32_t
 
LL_DMA_DeInô
(
DMA_Ty≥Def
 *
DMAx
, uöt32_à
Ch™√l
);

1932 
LL_DMA_Såu˘Inô
(
LL_DMA_InôTy≥Def
 *
DMA_InôSåu˘
);

1953 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_exti.h

20 #i‚de‡
STM32F1xx_LL_EXTI_H


21 
	#STM32F1xx_LL_EXTI_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
 (
EXTI
)

44 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

53 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

60 
uöt32_t
 
Löe_0_31
;

63 
Fun˘i⁄ÆSèã
 
LöeComm™d
;

66 
uöt8_t
 
Mode
;

69 
uöt8_t
 
Triggî
;

71 } 
	tLL_EXTI_InôTy≥Def
;

86 
	#LL_EXTI_LINE_0
 
EXTI_IMR_IM0


	)

87 
	#LL_EXTI_LINE_1
 
EXTI_IMR_IM1


	)

88 
	#LL_EXTI_LINE_2
 
EXTI_IMR_IM2


	)

89 
	#LL_EXTI_LINE_3
 
EXTI_IMR_IM3


	)

90 
	#LL_EXTI_LINE_4
 
EXTI_IMR_IM4


	)

91 
	#LL_EXTI_LINE_5
 
EXTI_IMR_IM5


	)

92 
	#LL_EXTI_LINE_6
 
EXTI_IMR_IM6


	)

93 
	#LL_EXTI_LINE_7
 
EXTI_IMR_IM7


	)

94 
	#LL_EXTI_LINE_8
 
EXTI_IMR_IM8


	)

95 
	#LL_EXTI_LINE_9
 
EXTI_IMR_IM9


	)

96 
	#LL_EXTI_LINE_10
 
EXTI_IMR_IM10


	)

97 
	#LL_EXTI_LINE_11
 
EXTI_IMR_IM11


	)

98 
	#LL_EXTI_LINE_12
 
EXTI_IMR_IM12


	)

99 
	#LL_EXTI_LINE_13
 
EXTI_IMR_IM13


	)

100 
	#LL_EXTI_LINE_14
 
EXTI_IMR_IM14


	)

101 
	#LL_EXTI_LINE_15
 
EXTI_IMR_IM15


	)

102 #i‡
deföed
(
EXTI_IMR_IM16
)

103 
	#LL_EXTI_LINE_16
 
EXTI_IMR_IM16


	)

105 
	#LL_EXTI_LINE_17
 
EXTI_IMR_IM17


	)

106 #i‡
deföed
(
EXTI_IMR_IM18
)

107 
	#LL_EXTI_LINE_18
 
EXTI_IMR_IM18


	)

109 #i‡
deföed
(
EXTI_IMR_IM19
)

110 
	#LL_EXTI_LINE_19
 
EXTI_IMR_IM19


	)

112 #i‡
deföed
(
EXTI_IMR_IM20
)

113 
	#LL_EXTI_LINE_20
 
EXTI_IMR_IM20


	)

115 #i‡
deföed
(
EXTI_IMR_IM21
)

116 
	#LL_EXTI_LINE_21
 
EXTI_IMR_IM21


	)

118 #i‡
deföed
(
EXTI_IMR_IM22
)

119 
	#LL_EXTI_LINE_22
 
EXTI_IMR_IM22


	)

121 #i‡
deföed
(
EXTI_IMR_IM23
)

122 
	#LL_EXTI_LINE_23
 
EXTI_IMR_IM23


	)

124 #i‡
deföed
(
EXTI_IMR_IM24
)

125 
	#LL_EXTI_LINE_24
 
EXTI_IMR_IM24


	)

127 #i‡
deföed
(
EXTI_IMR_IM25
)

128 
	#LL_EXTI_LINE_25
 
EXTI_IMR_IM25


	)

130 #i‡
deföed
(
EXTI_IMR_IM26
)

131 
	#LL_EXTI_LINE_26
 
EXTI_IMR_IM26


	)

133 #i‡
deföed
(
EXTI_IMR_IM27
)

134 
	#LL_EXTI_LINE_27
 
EXTI_IMR_IM27


	)

136 #i‡
deföed
(
EXTI_IMR_IM28
)

137 
	#LL_EXTI_LINE_28
 
EXTI_IMR_IM28


	)

139 #i‡
deföed
(
EXTI_IMR_IM29
)

140 
	#LL_EXTI_LINE_29
 
EXTI_IMR_IM29


	)

142 #i‡
deföed
(
EXTI_IMR_IM30
)

143 
	#LL_EXTI_LINE_30
 
EXTI_IMR_IM30


	)

145 #i‡
deföed
(
EXTI_IMR_IM31
)

146 
	#LL_EXTI_LINE_31
 
EXTI_IMR_IM31


	)

148 
	#LL_EXTI_LINE_ALL_0_31
 
EXTI_IMR_IM


	)

151 
	#LL_EXTI_LINE_ALL
 (0xFFFFFFFFUË

	)

153 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

154 
	#LL_EXTI_LINE_NONE
 (0x00000000UË

	)

160 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

165 
	#LL_EXTI_MODE_IT
 ((
uöt8_t
)0x00Ë

	)

166 
	#LL_EXTI_MODE_EVENT
 ((
uöt8_t
)0x01Ë

	)

167 
	#LL_EXTI_MODE_IT_EVENT
 ((
uöt8_t
)0x02Ë

	)

175 
	#LL_EXTI_TRIGGER_NONE
 ((
uöt8_t
)0x00Ë

	)

176 
	#LL_EXTI_TRIGGER_RISING
 ((
uöt8_t
)0x01Ë

	)

177 
	#LL_EXTI_TRIGGER_FALLING
 ((
uöt8_t
)0x02Ë

	)

178 
	#LL_EXTI_TRIGGER_RISING_FALLING
 ((
uöt8_t
)0x03Ë

	)

207 
	#LL_EXTI_WrôeReg
(
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(
EXTI
->__REG__, (__VALUE__))

	)

214 
	#LL_EXTI_RódReg
(
__REG__
Ë
	`READ_REG
(
EXTI
->__REG__)

	)

265 
__STATIC_INLINE
 
LL_EXTI_E«bÀIT_0_31
(
uöt32_t
 
ExtiLöe
)

267 
SET_BIT
(
EXTI
->
IMR
, 
ExtiLöe
);

301 
__STATIC_INLINE
 
LL_EXTI_DißbÀIT_0_31
(
uöt32_t
 
ExtiLöe
)

303 
CLEAR_BIT
(
EXTI
->
IMR
, 
ExtiLöe
);

338 
__STATIC_INLINE
 
uöt32_t
 
LL_EXTI_IsE«bÀdIT_0_31
(uöt32_à
ExtiLöe
)

340  (
READ_BIT
(
EXTI
->
IMR
, 
ExtiLöe
) == (ExtiLine));

380 
__STATIC_INLINE
 
LL_EXTI_E«bÀEvít_0_31
(
uöt32_t
 
ExtiLöe
)

382 
SET_BIT
(
EXTI
->
EMR
, 
ExtiLöe
);

415 
__STATIC_INLINE
 
LL_EXTI_DißbÀEvít_0_31
(
uöt32_t
 
ExtiLöe
)

417 
CLEAR_BIT
(
EXTI
->
EMR
, 
ExtiLöe
);

449 
__STATIC_INLINE
 
uöt32_t
 
LL_EXTI_IsE«bÀdEvít_0_31
(uöt32_à
ExtiLöe
)

451  (
READ_BIT
(
EXTI
->
EMR
, 
ExtiLöe
) == (ExtiLine));

497 
__STATIC_INLINE
 
LL_EXTI_E«bÀRisögTrig_0_31
(
uöt32_t
 
ExtiLöe
)

499 
SET_BIT
(
EXTI
->
RTSR
, 
ExtiLöe
);

537 
__STATIC_INLINE
 
LL_EXTI_DißbÀRisögTrig_0_31
(
uöt32_t
 
ExtiLöe
)

539 
CLEAR_BIT
(
EXTI
->
RTSR
, 
ExtiLöe
);

570 
__STATIC_INLINE
 
uöt32_t
 
LL_EXTI_IsE«bÀdRisögTrig_0_31
(uöt32_à
ExtiLöe
)

572  (
READ_BIT
(
EXTI
->
RTSR
, 
ExtiLöe
) == (ExtiLine));

617 
__STATIC_INLINE
 
LL_EXTI_E«bÀFÆlögTrig_0_31
(
uöt32_t
 
ExtiLöe
)

619 
SET_BIT
(
EXTI
->
FTSR
, 
ExtiLöe
);

655 
__STATIC_INLINE
 
LL_EXTI_DißbÀFÆlögTrig_0_31
(
uöt32_t
 
ExtiLöe
)

657 
CLEAR_BIT
(
EXTI
->
FTSR
, 
ExtiLöe
);

687 
__STATIC_INLINE
 
uöt32_t
 
LL_EXTI_IsE«bÀdFÆlögTrig_0_31
(uöt32_à
ExtiLöe
)

689  (
READ_BIT
(
EXTI
->
FTSR
, 
ExtiLöe
) == (ExtiLine));

732 
__STATIC_INLINE
 
LL_EXTI_Gíî©eSWI_0_31
(
uöt32_t
 
ExtiLöe
)

734 
SET_BIT
(
EXTI
->
SWIER
, 
ExtiLöe
);

774 
__STATIC_INLINE
 
uöt32_t
 
LL_EXTI_IsA˘iveFœg_0_31
(uöt32_à
ExtiLöe
)

776  (
READ_BIT
(
EXTI
->
PR
, 
ExtiLöe
) == (ExtiLine));

808 
__STATIC_INLINE
 
uöt32_t
 
LL_EXTI_RódFœg_0_31
(uöt32_à
ExtiLöe
)

810  (
uöt32_t
)(
READ_BIT
(
EXTI
->
PR
, 
ExtiLöe
));

842 
__STATIC_INLINE
 
LL_EXTI_CÀ¨Fœg_0_31
(
uöt32_t
 
ExtiLöe
)

844 
WRITE_REG
(
EXTI
->
PR
, 
ExtiLöe
);

852 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

857 
uöt32_t
 
LL_EXTI_Inô
(
LL_EXTI_InôTy≥Def
 *
EXTI_InôSåu˘
);

858 
uöt32_t
 
LL_EXTI_DeInô
();

859 
LL_EXTI_Såu˘Inô
(
LL_EXTI_InôTy≥Def
 *
EXTI_InôSåu˘
);

881 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h

20 #i‚de‡
STM32F1xx_LL_GPIO_H


21 
	#STM32F1xx_LL_GPIO_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
 (
GPIOA
Ë|| deföed (
GPIOB
Ë|| deföed (
GPIOC
Ë|| deföed (
GPIOD
Ë|| deföed (
GPIOE
Ë|| deföed (
GPIOF
Ë|| deföed (
GPIOG
)

48 
	#GPIO_PIN_MASK_POS
 8U

	)

49 
	#GPIO_PIN_NB
 16U

	)

55 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

66 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

76 
uöt32_t
 
Pö
;

79 
uöt32_t
 
Mode
;

84 
uöt32_t
 
S≥ed
;

89 
uöt32_t
 
OuçutTy≥
;

94 
uöt32_t
 
PuŒ
;

98 } 
	tLL_GPIO_InôTy≥Def
;

113 
	#LL_GPIO_PIN_0
 ((
GPIO_BSRR_BS0
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000001UË

	)

114 
	#LL_GPIO_PIN_1
 ((
GPIO_BSRR_BS1
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000002UË

	)

115 
	#LL_GPIO_PIN_2
 ((
GPIO_BSRR_BS2
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000004UË

	)

116 
	#LL_GPIO_PIN_3
 ((
GPIO_BSRR_BS3
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000008UË

	)

117 
	#LL_GPIO_PIN_4
 ((
GPIO_BSRR_BS4
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000010UË

	)

118 
	#LL_GPIO_PIN_5
 ((
GPIO_BSRR_BS5
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000020UË

	)

119 
	#LL_GPIO_PIN_6
 ((
GPIO_BSRR_BS6
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000040UË

	)

120 
	#LL_GPIO_PIN_7
 ((
GPIO_BSRR_BS7
 << 
GPIO_PIN_MASK_POS
Ë| 0x00000080UË

	)

121 
	#LL_GPIO_PIN_8
 ((
GPIO_BSRR_BS8
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000001UË

	)

122 
	#LL_GPIO_PIN_9
 ((
GPIO_BSRR_BS9
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000002UË

	)

123 
	#LL_GPIO_PIN_10
 ((
GPIO_BSRR_BS10
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000004UË

	)

124 
	#LL_GPIO_PIN_11
 ((
GPIO_BSRR_BS11
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000008UË

	)

125 
	#LL_GPIO_PIN_12
 ((
GPIO_BSRR_BS12
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000010UË

	)

126 
	#LL_GPIO_PIN_13
 ((
GPIO_BSRR_BS13
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000020UË

	)

127 
	#LL_GPIO_PIN_14
 ((
GPIO_BSRR_BS14
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000040UË

	)

128 
	#LL_GPIO_PIN_15
 ((
GPIO_BSRR_BS15
 << 
GPIO_PIN_MASK_POS
Ë| 0x04000080UË

	)

129 
	#LL_GPIO_PIN_ALL
 (
LL_GPIO_PIN_0
 | 
LL_GPIO_PIN_1
 | 
LL_GPIO_PIN_2
 | \

130 
LL_GPIO_PIN_3
 | 
LL_GPIO_PIN_4
 | 
LL_GPIO_PIN_5
 | \

131 
LL_GPIO_PIN_6
 | 
LL_GPIO_PIN_7
 | 
LL_GPIO_PIN_8
 | \

132 
LL_GPIO_PIN_9
 | 
LL_GPIO_PIN_10
 | 
LL_GPIO_PIN_11
 | \

133 
LL_GPIO_PIN_12
 | 
LL_GPIO_PIN_13
 | 
LL_GPIO_PIN_14
 | \

134 
LL_GPIO_PIN_15
Ë

	)

142 
	#LL_GPIO_MODE_ANALOG
 0x00000000U

	)

143 
	#LL_GPIO_MODE_FLOATING
 
GPIO_CRL_CNF0_0


	)

144 
	#LL_GPIO_MODE_INPUT
 
GPIO_CRL_CNF0_1


	)

145 
	#LL_GPIO_MODE_OUTPUT
 
GPIO_CRL_MODE0_0


	)

146 
	#LL_GPIO_MODE_ALTERNATE
 (
GPIO_CRL_CNF0_1
 | 
GPIO_CRL_MODE0_0
Ë

	)

154 
	#LL_GPIO_OUTPUT_PUSHPULL
 0x00000000U

	)

155 
	#LL_GPIO_OUTPUT_OPENDRAIN
 
GPIO_CRL_CNF0_0


	)

163 
	#LL_GPIO_MODE_OUTPUT_10MHz
 
GPIO_CRL_MODE0_0


	)

164 
	#LL_GPIO_MODE_OUTPUT_2MHz
 
GPIO_CRL_MODE0_1


	)

165 
	#LL_GPIO_MODE_OUTPUT_50MHz
 
GPIO_CRL_MODE0


	)

170 
	#LL_GPIO_SPEED_FREQ_LOW
 
LL_GPIO_MODE_OUTPUT_2MHz


	)

171 
	#LL_GPIO_SPEED_FREQ_MEDIUM
 
LL_GPIO_MODE_OUTPUT_10MHz


	)

172 
	#LL_GPIO_SPEED_FREQ_HIGH
 
LL_GPIO_MODE_OUTPUT_50MHz


	)

177 
	#LL_GPIO_PULL_DOWN
 0x00000000U

	)

178 
	#LL_GPIO_PULL_UP
 
GPIO_ODR_ODR0


	)

188 
	#LL_GPIO_AF_EVENTOUT_PIN_0
 
AFIO_EVCR_PIN_PX0


	)

189 
	#LL_GPIO_AF_EVENTOUT_PIN_1
 
AFIO_EVCR_PIN_PX1


	)

190 
	#LL_GPIO_AF_EVENTOUT_PIN_2
 
AFIO_EVCR_PIN_PX2


	)

191 
	#LL_GPIO_AF_EVENTOUT_PIN_3
 
AFIO_EVCR_PIN_PX3


	)

192 
	#LL_GPIO_AF_EVENTOUT_PIN_4
 
AFIO_EVCR_PIN_PX4


	)

193 
	#LL_GPIO_AF_EVENTOUT_PIN_5
 
AFIO_EVCR_PIN_PX5


	)

194 
	#LL_GPIO_AF_EVENTOUT_PIN_6
 
AFIO_EVCR_PIN_PX6


	)

195 
	#LL_GPIO_AF_EVENTOUT_PIN_7
 
AFIO_EVCR_PIN_PX7


	)

196 
	#LL_GPIO_AF_EVENTOUT_PIN_8
 
AFIO_EVCR_PIN_PX8


	)

197 
	#LL_GPIO_AF_EVENTOUT_PIN_9
 
AFIO_EVCR_PIN_PX9


	)

198 
	#LL_GPIO_AF_EVENTOUT_PIN_10
 
AFIO_EVCR_PIN_PX10


	)

199 
	#LL_GPIO_AF_EVENTOUT_PIN_11
 
AFIO_EVCR_PIN_PX11


	)

200 
	#LL_GPIO_AF_EVENTOUT_PIN_12
 
AFIO_EVCR_PIN_PX12


	)

201 
	#LL_GPIO_AF_EVENTOUT_PIN_13
 
AFIO_EVCR_PIN_PX13


	)

202 
	#LL_GPIO_AF_EVENTOUT_PIN_14
 
AFIO_EVCR_PIN_PX14


	)

203 
	#LL_GPIO_AF_EVENTOUT_PIN_15
 
AFIO_EVCR_PIN_PX15


	)

213 
	#LL_GPIO_AF_EVENTOUT_PORT_A
 
AFIO_EVCR_PORT_PA


	)

214 
	#LL_GPIO_AF_EVENTOUT_PORT_B
 
AFIO_EVCR_PORT_PB


	)

215 
	#LL_GPIO_AF_EVENTOUT_PORT_C
 
AFIO_EVCR_PORT_PC


	)

216 
	#LL_GPIO_AF_EVENTOUT_PORT_D
 
AFIO_EVCR_PORT_PD


	)

217 
	#LL_GPIO_AF_EVENTOUT_PORT_E
 
AFIO_EVCR_PORT_PE


	)

226 
	#LL_GPIO_AF_EXTI_PORTA
 0U

	)

227 
	#LL_GPIO_AF_EXTI_PORTB
 1U

	)

228 
	#LL_GPIO_AF_EXTI_PORTC
 2U

	)

229 
	#LL_GPIO_AF_EXTI_PORTD
 3U

	)

230 
	#LL_GPIO_AF_EXTI_PORTE
 4U

	)

231 
	#LL_GPIO_AF_EXTI_PORTF
 5U

	)

232 
	#LL_GPIO_AF_EXTI_PORTG
 6U

	)

240 
	#LL_GPIO_AF_EXTI_LINE0
 (0x000FU << 16U | 0UË

	)

241 
	#LL_GPIO_AF_EXTI_LINE1
 (0x00F0U << 16U | 0UË

	)

242 
	#LL_GPIO_AF_EXTI_LINE2
 (0x0F00U << 16U | 0UË

	)

243 
	#LL_GPIO_AF_EXTI_LINE3
 (0xF000U << 16U | 0UË

	)

244 
	#LL_GPIO_AF_EXTI_LINE4
 (0x000FU << 16U | 1UË

	)

245 
	#LL_GPIO_AF_EXTI_LINE5
 (0x00F0U << 16U | 1UË

	)

246 
	#LL_GPIO_AF_EXTI_LINE6
 (0x0F00U << 16U | 1UË

	)

247 
	#LL_GPIO_AF_EXTI_LINE7
 (0xF000U << 16U | 1UË

	)

248 
	#LL_GPIO_AF_EXTI_LINE8
 (0x000FU << 16U | 2UË

	)

249 
	#LL_GPIO_AF_EXTI_LINE9
 (0x00F0U << 16U | 2UË

	)

250 
	#LL_GPIO_AF_EXTI_LINE10
 (0x0F00U << 16U | 2UË

	)

251 
	#LL_GPIO_AF_EXTI_LINE11
 (0xF000U << 16U | 2UË

	)

252 
	#LL_GPIO_AF_EXTI_LINE12
 (0x000FU << 16U | 3UË

	)

253 
	#LL_GPIO_AF_EXTI_LINE13
 (0x00F0U << 16U | 3UË

	)

254 
	#LL_GPIO_AF_EXTI_LINE14
 (0x0F00U << 16U | 3UË

	)

255 
	#LL_GPIO_AF_EXTI_LINE15
 (0xF000U << 16U | 3UË

	)

280 
	#LL_GPIO_WrôeReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

288 
	#LL_GPIO_RódReg
(
__INSTANCE__
, 
__REG__
Ë
	`READ_REG
(__INSTANCE__->__REG__)

	)

341 
__STATIC_INLINE
 
LL_GPIO_SëPöMode
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
Pö
, uöt32_à
Mode
)

343 
uöt32_t
 *
pReg
 = (uöt32_à*)((uöt32_t)((uöt32_t)(&
GPIOx
->
CRL
Ë+ (
Pö
 >> 24)));

344 
MODIFY_REG
(*
pReg
, ((
GPIO_CRL_CNF0
 | 
GPIO_CRL_MODE0
Ë<< (
POSITION_VAL
(
Pö
Ë* 4U)), (
Mode
 << (POSITION_VAL(Pin) * 4U)));

381 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_GëPöMode
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
Pö
)

383 
uöt32_t
 *
pReg
 = (uöt32_à*)((uöt32_t)((uöt32_t)(&
GPIOx
->
CRL
Ë+ (
Pö
 >> 24)));

384  (
READ_BIT
(*
pReg
, ((
GPIO_CRL_CNF0
 | 
GPIO_CRL_MODE0
Ë<< (
POSITION_VAL
(
Pö
) * 4U))) >> (POSITION_VAL(Pin) * 4U));

419 
__STATIC_INLINE
 
LL_GPIO_SëPöS≥ed
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
Pö
, uöt32_à
S≥ed
)

421 
uöt32_t
 *
pReg
 = (uöt32_à*)((uöt32_t)((uöt32_t)(&
GPIOx
->
CRL
Ë+ (
Pö
 >> 24)));

422 
MODIFY_REG
(*
pReg
, (
GPIO_CRL_MODE0
 << (
POSITION_VAL
(
Pö
) * 4U)),

423 (
S≥ed
 << (
POSITION_VAL
(
Pö
) * 4U)));

457 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_GëPöS≥ed
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
Pö
)

459 
uöt32_t
 *
pReg
 = (uöt32_à*)((uöt32_t)((uöt32_t)(&
GPIOx
->
CRL
Ë+ (
Pö
 >> 24)));

460  (
READ_BIT
(*
pReg
, (
GPIO_CRL_MODE0
 << (
POSITION_VAL
(
Pö
) * 4U))) >> (POSITION_VAL(Pin) * 4U));

493 
__STATIC_INLINE
 
LL_GPIO_SëPöOuçutTy≥
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
Pö
, uöt32_à
OuçutTy≥
)

495 
uöt32_t
 *
pReg
 = (uöt32_à*)((uöt32_t)((uöt32_t)(&
GPIOx
->
CRL
Ë+ (
Pö
 >> 24)));

496 
MODIFY_REG
(*
pReg
, (
GPIO_CRL_CNF0_0
 << (
POSITION_VAL
(
Pö
) * 4U)),

497 (
OuçutTy≥
 << (
POSITION_VAL
(
Pö
) * 4U)));

530 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_GëPöOuçutTy≥
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
Pö
)

532 
uöt32_t
 *
pReg
 = (uöt32_à*)((uöt32_t)((uöt32_t)(&
GPIOx
->
CRL
Ë+ (
Pö
 >> 24)));

533  (
READ_BIT
(*
pReg
, (
GPIO_CRL_CNF0_0
 << (
POSITION_VAL
(
Pö
) * 4U))) >> (POSITION_VAL(Pin) * 4U));

564 
__STATIC_INLINE
 
LL_GPIO_SëPöPuŒ
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
Pö
, uöt32_à
PuŒ
)

566 
MODIFY_REG
(
GPIOx
->
ODR
, (
Pö
 >> 
GPIO_PIN_MASK_POS
), 
PuŒ
 << (
POSITION_VAL
(Pin >> GPIO_PIN_MASK_POS)));

595 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_GëPöPuŒ
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
Pö
)

597  (
READ_BIT
(
GPIOx
->
ODR
, (
GPIO_ODR_ODR0
 << (
POSITION_VAL
(
Pö
 >> 
GPIO_PIN_MASK_POS
)))) >> (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));

629 
__STATIC_INLINE
 
LL_GPIO_LockPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
PöMask
)

631 
__IO
 
uöt32_t
 
ãmp
;

632 
WRITE_REG
(
GPIOx
->
LCKR
, 
GPIO_LCKR_LCKK
 | ((
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU));

633 
WRITE_REG
(
GPIOx
->
LCKR
, ((
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU));

634 
WRITE_REG
(
GPIOx
->
LCKR
, 
GPIO_LCKR_LCKK
 | ((
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU));

635 
ãmp
 = 
READ_REG
(
GPIOx
->
LCKR
);

636 (Ë
ãmp
;

663 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_IsPöLocked
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
PöMask
)

665  (
READ_BIT
(
GPIOx
->
LCKR
, ((
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU)) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));

674 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_IsAnyPöLocked
(
GPIO_Ty≥Def
 *
GPIOx
)

676  (
READ_BIT
(
GPIOx
->
LCKR
, 
GPIO_LCKR_LCKK
) == (GPIO_LCKR_LCKK));

693 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_RódI≈utP‹t
(
GPIO_Ty≥Def
 *
GPIOx
)

695  (
READ_REG
(
GPIOx
->
IDR
));

722 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_IsI≈utPöSë
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
PöMask
)

724  (
READ_BIT
(
GPIOx
->
IDR
, (
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));

734 
__STATIC_INLINE
 
LL_GPIO_WrôeOuçutP‹t
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
P‹tVÆue
)

736 
WRITE_REG
(
GPIOx
->
ODR
, 
P‹tVÆue
);

745 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_RódOuçutP‹t
(
GPIO_Ty≥Def
 *
GPIOx
)

747  (
uöt32_t
)(
READ_REG
(
GPIOx
->
ODR
));

774 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_IsOuçutPöSë
(
GPIO_Ty≥Def
 *
GPIOx
, uöt32_à
PöMask
)

776  (
READ_BIT
(
GPIOx
->
ODR
, (
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));

803 
__STATIC_INLINE
 
LL_GPIO_SëOuçutPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
PöMask
)

805 
WRITE_REG
(
GPIOx
->
BSRR
, (
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU);

832 
__STATIC_INLINE
 
LL_GPIO_Re£tOuçutPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
PöMask
)

834 
WRITE_REG
(
GPIOx
->
BRR
, (
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU);

861 
__STATIC_INLINE
 
LL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
PöMask
)

863 
uöt32_t
 
odr
 = 
READ_REG
(
GPIOx
->
ODR
);

864 
uöt32_t
 
pömask
 = ((
PöMask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU);

865 
WRITE_REG
(
GPIOx
->
BSRR
, ((
odr
 & 
pömask
) << 16u) | (~odr &Öinmask));

883 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_SPI1
()

885 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

894 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_SPI1
()

896 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_SPI1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

904 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_SPI1
()

906  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI1_REMAP
) == (AFIO_MAPR_SPI1_REMAP));

915 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_I2C1
()

917 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_I2C1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

926 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_I2C1
()

928 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_I2C1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

936 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_I2C1
()

938  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_I2C1_REMAP
) == (AFIO_MAPR_I2C1_REMAP));

947 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_USART1
()

949 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

958 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_USART1
()

960 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

968 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_USART1
()

970  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART1_REMAP
) == (AFIO_MAPR_USART1_REMAP));

979 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_USART2
()

981 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

990 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_USART2
()

992 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1000 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_USART2
()

1002  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART2_REMAP
) == (AFIO_MAPR_USART2_REMAP));

1005 #i‡
deföed
 (
AFIO_MAPR_USART3_REMAP
)

1012 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_USART3
()

1014 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_USART3_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1023 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül_USART3
()

1025 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 | AFIO_MAPR_SWJ_CFG));

1034 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_USART3
()

1036 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_USART3_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1046 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM1
()

1048 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM1_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1057 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül_TIM1
()

1059 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 | AFIO_MAPR_SWJ_CFG));

1068 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM1
()

1070 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM1_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1079 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM2
()

1081 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1090 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül2_TIM2
()

1092 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 | AFIO_MAPR_SWJ_CFG));

1101 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül1_TIM2
()

1103 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 | AFIO_MAPR_SWJ_CFG));

1112 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM2
()

1114 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1124 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM3
()

1126 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM3_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1136 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül_TIM3
()

1138 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 | AFIO_MAPR_SWJ_CFG));

1148 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM3
()

1150 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM3_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1153 #i‡
deföed
(
AFIO_MAPR_TIM4_REMAP
)

1161 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM4
()

1163 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM4_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1172 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM4
()

1174 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM4_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1182 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM4
()

1184  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM4_REMAP
) == (AFIO_MAPR_TIM4_REMAP));

1188 #i‡
deföed
(
AFIO_MAPR_CAN_REMAP_REMAP1
)

1196 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül1_CAN1
()

1198 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_CAN_REMAP_REMAP1
 | AFIO_MAPR_SWJ_CFG));

1207 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül2_CAN1
()

1209 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_CAN_REMAP_REMAP2
 | AFIO_MAPR_SWJ_CFG));

1218 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠P¨tül3_CAN1
()

1220 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_CAN_REMAP_REMAP3
 | AFIO_MAPR_SWJ_CFG));

1233 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_PD01
()

1235 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PD01_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1247 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_PD01
()

1249 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_PD01_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1257 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_PD01
()

1259  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PD01_REMAP
) == (AFIO_MAPR_PD01_REMAP));

1262 #i‡
deföed
(
AFIO_MAPR_TIM5CH4_IREMAP
)

1270 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM5CH4
()

1272 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM5CH4_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1282 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM5CH4
()

1284 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM5CH4_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1292 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM5CH4
()

1294  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM5CH4_IREMAP
) == (AFIO_MAPR_TIM5CH4_IREMAP));

1298 #i‡
deföed
(
AFIO_MAPR_ETH_REMAP
)

1306 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_ETH
()

1308 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ETH_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1318 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_ETH
()

1320 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ETH_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1328 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_ETH
()

1330  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ETH_REMAP
) == (AFIO_MAPR_ETH_REMAP));

1334 #i‡
deföed
(
AFIO_MAPR_CAN2_REMAP
)

1343 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_CAN2
()

1345 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1354 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_CAN2
()

1356 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1364 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_CAN2
()

1366  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN2_REMAP
) == (AFIO_MAPR_CAN2_REMAP));

1370 #i‡
deföed
(
AFIO_MAPR_MII_RMII_SEL
)

1378 
__STATIC_INLINE
 
LL_GPIO_AF_Sñe˘_ETH_RMII
()

1380 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_MII_RMII_SEL
 | 
AFIO_MAPR_SWJ_CFG
);

1390 
__STATIC_INLINE
 
LL_GPIO_AF_Sñe˘_ETH_MII
()

1392 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_MII_RMII_SEL
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1396 #i‡
deföed
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

1403 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_ADC1_ETRGINJ
()

1405 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1414 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_ADC1_ETRGINJ
()

1416 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC1_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1424 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_ADC1_ETRGINJ
()

1426  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
) == (AFIO_MAPR_ADC1_ETRGINJ_REMAP));

1430 #i‡
deföed
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

1437 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_ADC1_ETRGREG
()

1439 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1448 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_ADC1_ETRGREG
()

1450 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC1_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1458 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_ADC1_ETRGREG
()

1460  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGREG_REMAP
) == (AFIO_MAPR_ADC1_ETRGREG_REMAP));

1464 #i‡
deföed
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

1472 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_ADC2_ETRGINJ
()

1474 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1483 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_ADC2_ETRGINJ
()

1485 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC2_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1493 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_ADC2_ETRGINJ
()

1495  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
) == (AFIO_MAPR_ADC2_ETRGINJ_REMAP));

1499 #i‡
deföed
 (
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

1507 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_ADC2_ETRGREG
()

1509 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1518 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_ADC2_ETRGREG
()

1520 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC2_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1528 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_ADC2_ETRGREG
()

1530  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGREG_REMAP
) == (AFIO_MAPR_ADC2_ETRGREG_REMAP));

1540 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_SWJ
()

1542 
MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_RESET
);

1551 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠_SWJ_NONJTRST
()

1553 
MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_NOJNTRST
);

1562 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠_SWJ_NOJTAG
()

1564 
MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE
);

1573 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_SWJ
()

1575 
MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_DISABLE
);

1578 #i‡
deföed
(
AFIO_MAPR_SPI3_REMAP
)

1587 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_SPI3
()

1589 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1599 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_SPI3
()

1601 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_SPI3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1609 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_SPI3
()

1611  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI3_REMAP
) == (AFIO_MAPR_SPI3_REMAP));

1615 #i‡
deföed
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

1624 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠_TIM2ITR1_TO_USB
()

1626 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2ITR1_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1636 
__STATIC_INLINE
 
LL_GPIO_AF_Rem≠_TIM2ITR1_TO_ETH
()

1638 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2ITR1_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1642 #i‡
deföed
(
AFIO_MAPR_PTP_PPS_REMAP
)

1651 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_ETH_PTP_PPS
()

1653 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PTP_PPS_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1663 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_ETH_PTP_PPS
()

1665 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_PTP_PPS_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1669 #i‡
deföed
(
AFIO_MAPR2_TIM9_REMAP
)

1677 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM9
()

1679 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
);

1688 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM9
()

1690 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
);

1698 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM9
()

1700  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
) == (AFIO_MAPR2_TIM9_REMAP));

1704 #i‡
deföed
(
AFIO_MAPR2_TIM10_REMAP
)

1712 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM10
()

1714 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
);

1723 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM10
()

1725 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
);

1733 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM10
()

1735  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
) == (AFIO_MAPR2_TIM10_REMAP));

1739 #i‡
deföed
(
AFIO_MAPR2_TIM11_REMAP
)

1746 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM11
()

1748 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
);

1757 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM11
()

1759 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
);

1767 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM11
()

1769  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
) == (AFIO_MAPR2_TIM11_REMAP));

1773 #i‡
deföed
(
AFIO_MAPR2_TIM13_REMAP
)

1781 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM13
()

1783 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
);

1792 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM13
()

1794 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
);

1802 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM13
()

1804  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
) == (AFIO_MAPR2_TIM13_REMAP));

1808 #i‡
deföed
(
AFIO_MAPR2_TIM14_REMAP
)

1816 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM14
()

1818 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
);

1827 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM14
()

1829 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
);

1837 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM14
()

1839  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
) == (AFIO_MAPR2_TIM14_REMAP));

1843 #i‡
deföed
(
AFIO_MAPR2_FSMC_NADV_REMAP
)

1851 
__STATIC_INLINE
 
LL_GPIO_AF_Disc⁄√˘_FSMCNADV
()

1853 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
);

1862 
__STATIC_INLINE
 
LL_GPIO_AF_C⁄√˘_FSMCNADV
()

1864 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
);

1868 #i‡
deföed
(
AFIO_MAPR2_TIM15_REMAP
)

1876 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM15
()

1878 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
);

1886 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM15
()

1888 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
);

1896 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM15
()

1898  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
) == (AFIO_MAPR2_TIM15_REMAP));

1902 #i‡
deföed
(
AFIO_MAPR2_TIM16_REMAP
)

1910 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM16
()

1912 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
);

1921 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM16
()

1923 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
);

1931 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM16
()

1933  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
) == (AFIO_MAPR2_TIM16_REMAP));

1937 #i‡
deföed
(
AFIO_MAPR2_TIM17_REMAP
)

1945 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM17
()

1947 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
);

1956 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM17
()

1958 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
);

1966 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM17
()

1968  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
) == (AFIO_MAPR2_TIM17_REMAP));

1972 #i‡
deföed
(
AFIO_MAPR2_CEC_REMAP
)

1980 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_CEC
()

1982 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
);

1991 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_CEC
()

1993 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
);

2001 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_CEC
()

2003  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
) == (AFIO_MAPR2_CEC_REMAP));

2007 #i‡
deföed
(
AFIO_MAPR2_TIM1_DMA_REMAP
)

2015 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM1DMA
()

2017 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
);

2026 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM1DMA
()

2028 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
);

2036 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM1DMA
()

2038  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
) == (AFIO_MAPR2_TIM1_DMA_REMAP));

2042 #i‡
deföed
(
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

2050 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM67DACDMA
()

2052 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
);

2061 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM67DACDMA
()

2063 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
);

2071 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM67DACDMA
()

2073  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
) == (AFIO_MAPR2_TIM67_DAC_DMA_REMAP));

2077 #i‡
deföed
(
AFIO_MAPR2_TIM12_REMAP
)

2086 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_TIM12
()

2088 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
);

2098 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_TIM12
()

2100 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
);

2108 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_TIM12
()

2110  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
) == (AFIO_MAPR2_TIM12_REMAP));

2114 #i‡
deföed
(
AFIO_MAPR2_MISC_REMAP
)

2127 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀRem≠_MISC
()

2129 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
);

2143 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀRem≠_MISC
()

2145 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
);

2153 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_IsE«bÀdRem≠_MISC
()

2155  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
) == (AFIO_MAPR2_MISC_REMAP));

2197 
__STATIC_INLINE
 
LL_GPIO_AF_C⁄figEvítout
(
uöt32_t
 
LL_GPIO_P‹tSour˚
, uöt32_à
LL_GPIO_PöSour˚
)

2199 
MODIFY_REG
(
AFIO
->
EVCR
, (
AFIO_EVCR_PORT
Ë| (
AFIO_EVCR_PIN
), (
LL_GPIO_P‹tSour˚
Ë| (
LL_GPIO_PöSour˚
));

2207 
__STATIC_INLINE
 
LL_GPIO_AF_E«bÀEvítout
()

2209 
SET_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

2217 
__STATIC_INLINE
 
LL_GPIO_AF_DißbÀEvítout
()

2219 
CLEAR_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

2263 
__STATIC_INLINE
 
LL_GPIO_AF_SëEXTISour˚
(
uöt32_t
 
P‹t
, uöt32_à
Löe
)

2265 
MODIFY_REG
(
AFIO
->
EXTICR
[
Löe
 & 0xFF], (Löê>> 16), 
P‹t
 << 
POSITION_VAL
((Line >> 16)));

2300 
__STATIC_INLINE
 
uöt32_t
 
LL_GPIO_AF_GëEXTISour˚
(uöt32_à
Löe
)

2302  (
uöt32_t
)(
READ_BIT
(
AFIO
->
EXTICR
[
Löe
 & 0xFF], (Löê>> 16)Ë>> 
POSITION_VAL
(Line >> 16));

2309 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

2314 
Eº‹Sètus
 
LL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
);

2315 
Eº‹Sètus
 
LL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
LL_GPIO_InôTy≥Def
 *
GPIO_InôSåu˘
);

2316 
LL_GPIO_Såu˘Inô
(
LL_GPIO_InôTy≥Def
 *
GPIO_InôSåu˘
);

2336 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h

20 #i‚de‡
__STM32F1xx_LL_I2C_H


21 
	#__STM32F1xx_LL_I2C_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
 (
I2C1
Ë|| deföed (
I2C2
)

49 
	#LL_I2C_MAX_SPEED_STANDARD
 100000U

	)

50 
	#LL_I2C_MAX_SPEED_FAST
 400000U

	)

56 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

66 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

72 
uöt32_t
 
PîùhîÆMode
;

77 
uöt32_t
 
ClockS≥ed
;

83 
uöt32_t
 
DutyCy˛e
;

88 
uöt32_t
 
OwnAddªss1
;

93 
uöt32_t
 
Ty≥AcknowÀdge
;

98 
uöt32_t
 
OwnAddrSize
;

102 } 
	tLL_I2C_InôTy≥Def
;

117 
	#LL_I2C_SR1_SB
 
I2C_SR1_SB


	)

118 
	#LL_I2C_SR1_ADDR
 
I2C_SR1_ADDR


	)

120 
	#LL_I2C_SR1_BTF
 
I2C_SR1_BTF


	)

121 
	#LL_I2C_SR1_ADD10
 
I2C_SR1_ADD10


	)

122 
	#LL_I2C_SR1_STOPF
 
I2C_SR1_STOPF


	)

123 
	#LL_I2C_SR1_RXNE
 
I2C_SR1_RXNE


	)

124 
	#LL_I2C_SR1_TXE
 
I2C_SR1_TXE


	)

125 
	#LL_I2C_SR1_BERR
 
I2C_SR1_BERR


	)

126 
	#LL_I2C_SR1_ARLO
 
I2C_SR1_ARLO


	)

127 
	#LL_I2C_SR1_AF
 
I2C_SR1_AF


	)

128 
	#LL_I2C_SR1_OVR
 
I2C_SR1_OVR


	)

129 
	#LL_I2C_SR1_PECERR
 
I2C_ISR_PECERR


	)

130 
	#LL_I2C_SR1_TIMEOUT
 
I2C_ISR_TIMEOUT


	)

131 
	#LL_I2C_SR1_SMALERT
 
I2C_ISR_SMALERT


	)

132 
	#LL_I2C_SR2_MSL
 
I2C_SR2_MSL


	)

133 
	#LL_I2C_SR2_BUSY
 
I2C_SR2_BUSY


	)

134 
	#LL_I2C_SR2_TRA
 
I2C_SR2_TRA


	)

135 
	#LL_I2C_SR2_GENCALL
 
I2C_SR2_GENCALL


	)

136 
	#LL_I2C_SR2_SMBDEFAULT
 
I2C_SR2_SMBDEFAULT


	)

137 
	#LL_I2C_SR2_SMBHOST
 
I2C_SR2_SMBHOST


	)

138 
	#LL_I2C_SR2_DUALF
 
I2C_SR2_DUALF


	)

147 
	#LL_I2C_CR2_ITEVTEN
 
I2C_CR2_ITEVTEN


	)

148 
	#LL_I2C_CR2_ITBUFEN
 
I2C_CR2_ITBUFEN


	)

149 
	#LL_I2C_CR2_ITERREN
 
I2C_CR2_ITERREN


	)

157 
	#LL_I2C_OWNADDRESS1_7BIT
 0x00004000U

	)

158 
	#LL_I2C_OWNADDRESS1_10BIT
 (
uöt32_t
)(
I2C_OAR1_ADDMODE
 | 0x00004000UË

	)

166 
	#LL_I2C_DUTYCYCLE_2
 0x00000000U

	)

167 
	#LL_I2C_DUTYCYCLE_16_9
 
I2C_CCR_DUTY


	)

175 
	#LL_I2C_CLOCK_SPEED_STANDARD_MODE
 0x00000000U

	)

176 
	#LL_I2C_CLOCK_SPEED_FAST_MODE
 
I2C_CCR_FS


	)

184 
	#LL_I2C_MODE_I2C
 0x00000000U

	)

185 
	#LL_I2C_MODE_SMBUS_HOST
 (
uöt32_t
)(
I2C_CR1_SMBUS
 | 
I2C_CR1_SMBTYPE
 | 
I2C_CR1_ENARP
Ë

	)

186 
	#LL_I2C_MODE_SMBUS_DEVICE
 
I2C_CR1_SMBUS


	)

187 
	#LL_I2C_MODE_SMBUS_DEVICE_ARP
 (
uöt32_t
)(
I2C_CR1_SMBUS
 | 
I2C_CR1_ENARP
Ë

	)

195 
	#LL_I2C_ACK
 
I2C_CR1_ACK


	)

196 
	#LL_I2C_NACK
 0x00000000U

	)

204 
	#LL_I2C_DIRECTION_WRITE
 
I2C_SR2_TRA


	)

205 
	#LL_I2C_DIRECTION_READ
 0x00000000U

	)

230 
	#LL_I2C_WrôeReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

238 
	#LL_I2C_RódReg
(
__INSTANCE__
, 
__REG__
Ë
	`READ_REG
(__INSTANCE__->__REG__)

	)

252 
	#__LL_I2C_FREQ_HZ_TO_MHZ
(
__PCLK__
Ë(
uöt32_t
)((__PCLK__)/1000000U)

	)

259 
	#__LL_I2C_FREQ_MHZ_TO_HZ
(
__PCLK__
Ë(
uöt32_t
)((__PCLK__)*1000000U)

	)

267 
	#__LL_I2C_RISE_TIME
(
__FREQRANGE__
, 
__SPEED__
Ë(
uöt32_t
)(((__SPEED__Ë<
LL_I2C_MAX_SPEED_STANDARD
Ë? ((__FREQRANGE__Ë+ 1UË: ((((__FREQRANGE__Ë* 300UË/ 1000UË+ 1U))

	)

278 
	#__LL_I2C_SPEED_TO_CCR
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
Ë(
uöt32_t
)(((__SPEED__Ë<
LL_I2C_MAX_SPEED_STANDARD
)? \

279 (
	`__LL_I2C_SPEED_STANDARD_TO_CCR
((
__PCLK__
), (
__SPEED__
))) : \

280 (
	`__LL_I2C_SPEED_FAST_TO_CCR
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
))))

	)

288 
	#__LL_I2C_SPEED_STANDARD_TO_CCR
(
__PCLK__
, 
__SPEED__
Ë(
uöt32_t
)(((((__PCLK__)/((__SPEED__Ë<< 1U)Ë& 
I2C_CCR_CCR
Ë< 4U)? 4U:((__PCLK__Ë/ ((__SPEED__Ë<< 1U)))

	)

299 
	#__LL_I2C_SPEED_FAST_TO_CCR
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
Ë(
uöt32_t
)(((__DUTYCYCLE__Ë=
LL_I2C_DUTYCYCLE_2
)? \

300 (((((
__PCLK__
Ë/ ((
__SPEED__
Ë* 3U)Ë& 
I2C_CCR_CCR
) == 0U)? 1U:((__PCLK__) / ((__SPEED__) * 3U))) : \

301 (((((
__PCLK__
Ë/ ((
__SPEED__
Ë* 25U)Ë& 
I2C_CCR_CCR
Ë=0U)? 1U:((__PCLK__Ë/ ((__SPEED__Ë* 25U))))

	)

308 
	#__LL_I2C_10BIT_ADDRESS
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)(0x00FF))))

	)

315 
	#__LL_I2C_10BIT_HEADER_WRITE
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((uöt16_t)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0x0300))Ë>> 7Ë| (uöt16_t)(0xF0))))

	)

322 
	#__LL_I2C_10BIT_HEADER_READ
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((uöt16_t)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0x0300))Ë>> 7Ë| (uöt16_t)(0xF1))))

	)

348 
__STATIC_INLINE
 
LL_I2C_E«bÀ
(
I2C_Ty≥Def
 *
I2Cx
)

350 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
);

359 
__STATIC_INLINE
 
LL_I2C_DißbÀ
(
I2C_Ty≥Def
 *
I2Cx
)

361 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
);

370 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀd
(
I2C_Ty≥Def
 *
I2Cx
)

372  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
) == (I2C_CR1_PE));

382 
__STATIC_INLINE
 
LL_I2C_E«bÀDMAReq_TX
(
I2C_Ty≥Def
 *
I2Cx
)

384 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

393 
__STATIC_INLINE
 
LL_I2C_DißbÀDMAReq_TX
(
I2C_Ty≥Def
 *
I2Cx
)

395 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

404 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdDMAReq_TX
(
I2C_Ty≥Def
 *
I2Cx
)

406  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
) == (I2C_CR2_DMAEN));

415 
__STATIC_INLINE
 
LL_I2C_E«bÀDMAReq_RX
(
I2C_Ty≥Def
 *
I2Cx
)

417 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

426 
__STATIC_INLINE
 
LL_I2C_DißbÀDMAReq_RX
(
I2C_Ty≥Def
 *
I2Cx
)

428 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

437 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdDMAReq_RX
(
I2C_Ty≥Def
 *
I2Cx
)

439  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
) == (I2C_CR2_DMAEN));

448 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_DMA_GëRegAddr
(
I2C_Ty≥Def
 *
I2Cx
)

450  (
uöt32_t
Ë& (
I2Cx
->
DR
);

460 
__STATIC_INLINE
 
LL_I2C_E«bÀClockSåëchög
(
I2C_Ty≥Def
 *
I2Cx
)

462 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_NOSTRETCH
);

472 
__STATIC_INLINE
 
LL_I2C_DißbÀClockSåëchög
(
I2C_Ty≥Def
 *
I2Cx
)

474 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_NOSTRETCH
);

483 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdClockSåëchög
(
I2C_Ty≥Def
 *
I2Cx
)

485  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_NOSTRETCH
) != (I2C_CR1_NOSTRETCH));

495 
__STATIC_INLINE
 
LL_I2C_E«bÀGíîÆCÆl
(
I2C_Ty≥Def
 *
I2Cx
)

497 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENGC
);

507 
__STATIC_INLINE
 
LL_I2C_DißbÀGíîÆCÆl
(
I2C_Ty≥Def
 *
I2Cx
)

509 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENGC
);

518 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdGíîÆCÆl
(
I2C_Ty≥Def
 *
I2Cx
)

520  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENGC
) == (I2C_CR1_ENGC));

536 
__STATIC_INLINE
 
LL_I2C_SëOwnAddªss1
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
OwnAddªss1
, uöt32_à
OwnAddrSize
)

538 
MODIFY_REG
(
I2Cx
->
OAR1
, 
I2C_OAR1_ADD0
 | 
I2C_OAR1_ADD1_7
 | 
I2C_OAR1_ADD8_9
 | 
I2C_OAR1_ADDMODE
, 
OwnAddªss1
 | 
OwnAddrSize
);

549 
__STATIC_INLINE
 
LL_I2C_SëOwnAddªss2
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
OwnAddªss2
)

551 
MODIFY_REG
(
I2Cx
->
OAR2
, 
I2C_OAR2_ADD2
, 
OwnAddªss2
);

560 
__STATIC_INLINE
 
LL_I2C_E«bÀOwnAddªss2
(
I2C_Ty≥Def
 *
I2Cx
)

562 
SET_BIT
(
I2Cx
->
OAR2
, 
I2C_OAR2_ENDUAL
);

571 
__STATIC_INLINE
 
LL_I2C_DißbÀOwnAddªss2
(
I2C_Ty≥Def
 *
I2Cx
)

573 
CLEAR_BIT
(
I2Cx
->
OAR2
, 
I2C_OAR2_ENDUAL
);

582 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdOwnAddªss2
(
I2C_Ty≥Def
 *
I2Cx
)

584  (
READ_BIT
(
I2Cx
->
OAR2
, 
I2C_OAR2_ENDUAL
) == (I2C_OAR2_ENDUAL));

594 
__STATIC_INLINE
 
LL_I2C_SëPîùhClock
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
PîùhClock
)

596 
MODIFY_REG
(
I2Cx
->
CR2
, 
I2C_CR2_FREQ
, 
__LL_I2C_FREQ_HZ_TO_MHZ
(
PîùhClock
));

605 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëPîùhClock
(
I2C_Ty≥Def
 *
I2Cx
)

607  (
uöt32_t
)(
__LL_I2C_FREQ_MHZ_TO_HZ
(
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_FREQ
)));

619 
__STATIC_INLINE
 
LL_I2C_SëDutyCy˛e
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
DutyCy˛e
)

621 
MODIFY_REG
(
I2Cx
->
CCR
, 
I2C_CCR_DUTY
, 
DutyCy˛e
);

632 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëDutyCy˛e
(
I2C_Ty≥Def
 *
I2Cx
)

634  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
CCR
, 
I2C_CCR_DUTY
));

646 
__STATIC_INLINE
 
LL_I2C_SëClockS≥edMode
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
ClockS≥edMode
)

648 
MODIFY_REG
(
I2Cx
->
CCR
, 
I2C_CCR_FS
, 
ClockS≥edMode
);

659 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëClockS≥edMode
(
I2C_Ty≥Def
 *
I2Cx
)

661  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
CCR
, 
I2C_CCR_FS
));

672 
__STATIC_INLINE
 
LL_I2C_SëRi£Time
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
Ri£Time
)

674 
MODIFY_REG
(
I2Cx
->
TRISE
, 
I2C_TRISE_TRISE
, 
Ri£Time
);

683 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëRi£Time
(
I2C_Ty≥Def
 *
I2Cx
)

685  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
TRISE
, 
I2C_TRISE_TRISE
));

696 
__STATIC_INLINE
 
LL_I2C_SëClockPîiod
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
ClockPîiod
)

698 
MODIFY_REG
(
I2Cx
->
CCR
, 
I2C_CCR_CCR
, 
ClockPîiod
);

707 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëClockPîiod
(
I2C_Ty≥Def
 *
I2Cx
)

709  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
CCR
, 
I2C_CCR_CCR
));

728 
__STATIC_INLINE
 
LL_I2C_C⁄figS≥ed
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
PîùhClock
, uöt32_à
ClockS≥ed
,

729 
uöt32_t
 
DutyCy˛e
)

731 
uöt32_t
 
‰eqønge
 = 0x0U;

732 
uöt32_t
 
˛ockc⁄fig
 = 0x0U;

735 
‰eqønge
 = 
__LL_I2C_FREQ_HZ_TO_MHZ
(
PîùhClock
);

738 
MODIFY_REG
(
I2Cx
->
CR2
, 
I2C_CR2_FREQ
, 
‰eqønge
);

741 
MODIFY_REG
(
I2Cx
->
TRISE
, 
I2C_TRISE_TRISE
, 
__LL_I2C_RISE_TIME
(
‰eqønge
, 
ClockS≥ed
));

744 i‡(
ClockS≥ed
 > 
LL_I2C_MAX_SPEED_STANDARD
)

747 
˛ockc⁄fig
 = 
LL_I2C_CLOCK_SPEED_FAST_MODE
 | \

748 
__LL_I2C_SPEED_FAST_TO_CCR
(
PîùhClock
, 
ClockS≥ed
, 
DutyCy˛e
) | \

749 
DutyCy˛e
;

754 
˛ockc⁄fig
 = 
LL_I2C_CLOCK_SPEED_STANDARD_MODE
 | \

755 
__LL_I2C_SPEED_STANDARD_TO_CCR
(
PîùhClock
, 
ClockS≥ed
);

759 
MODIFY_REG
(
I2Cx
->
CCR
, (
I2C_CCR_FS
 | 
I2C_CCR_DUTY
 | 
I2C_CCR_CCR
), 
˛ockc⁄fig
);

777 
__STATIC_INLINE
 
LL_I2C_SëMode
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
PîùhîÆMode
)

779 
MODIFY_REG
(
I2Cx
->
CR1
, 
I2C_CR1_SMBUS
 | 
I2C_CR1_SMBTYPE
 | 
I2C_CR1_ENARP
, 
PîùhîÆMode
);

796 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëMode
(
I2C_Ty≥Def
 *
I2Cx
)

798  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SMBUS
 | 
I2C_CR1_SMBTYPE
 | 
I2C_CR1_ENARP
));

814 
__STATIC_INLINE
 
LL_I2C_E«bÀSMBusAÀπ
(
I2C_Ty≥Def
 *
I2Cx
)

816 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ALERT
);

832 
__STATIC_INLINE
 
LL_I2C_DißbÀSMBusAÀπ
(
I2C_Ty≥Def
 *
I2Cx
)

834 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ALERT
);

845 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdSMBusAÀπ
(
I2C_Ty≥Def
 *
I2Cx
)

847  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ALERT
) == (I2C_CR1_ALERT));

858 
__STATIC_INLINE
 
LL_I2C_E«bÀSMBusPEC
(
I2C_Ty≥Def
 *
I2Cx
)

860 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENPEC
);

871 
__STATIC_INLINE
 
LL_I2C_DißbÀSMBusPEC
(
I2C_Ty≥Def
 *
I2Cx
)

873 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENPEC
);

884 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdSMBusPEC
(
I2C_Ty≥Def
 *
I2Cx
)

886  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENPEC
) == (I2C_CR1_ENPEC));

904 
__STATIC_INLINE
 
LL_I2C_E«bÀIT_TX
(
I2C_Ty≥Def
 *
I2Cx
)

906 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

916 
__STATIC_INLINE
 
LL_I2C_DißbÀIT_TX
(
I2C_Ty≥Def
 *
I2Cx
)

918 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

928 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdIT_TX
(
I2C_Ty≥Def
 *
I2Cx
)

930  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));

940 
__STATIC_INLINE
 
LL_I2C_E«bÀIT_RX
(
I2C_Ty≥Def
 *
I2Cx
)

942 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

952 
__STATIC_INLINE
 
LL_I2C_DißbÀIT_RX
(
I2C_Ty≥Def
 *
I2Cx
)

954 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

964 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdIT_RX
(
I2C_Ty≥Def
 *
I2Cx
)

966  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));

985 
__STATIC_INLINE
 
LL_I2C_E«bÀIT_EVT
(
I2C_Ty≥Def
 *
I2Cx
)

987 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
);

1004 
__STATIC_INLINE
 
LL_I2C_DißbÀIT_EVT
(
I2C_Ty≥Def
 *
I2Cx
)

1006 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
);

1015 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdIT_EVT
(
I2C_Ty≥Def
 *
I2Cx
)

1017  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
) == (I2C_CR2_ITEVTEN));

1029 
__STATIC_INLINE
 
LL_I2C_E«bÀIT_BUF
(
I2C_Ty≥Def
 *
I2Cx
)

1031 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITBUFEN
);

1043 
__STATIC_INLINE
 
LL_I2C_DißbÀIT_BUF
(
I2C_Ty≥Def
 *
I2Cx
)

1045 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITBUFEN
);

1054 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdIT_BUF
(
I2C_Ty≥Def
 *
I2Cx
)

1056  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITBUFEN
) == (I2C_CR2_ITBUFEN));

1075 
__STATIC_INLINE
 
LL_I2C_E«bÀIT_ERR
(
I2C_Ty≥Def
 *
I2Cx
)

1077 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITERREN
);

1096 
__STATIC_INLINE
 
LL_I2C_DißbÀIT_ERR
(
I2C_Ty≥Def
 *
I2Cx
)

1098 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITERREN
);

1107 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdIT_ERR
(
I2C_Ty≥Def
 *
I2Cx
)

1109  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITERREN
) == (I2C_CR2_ITERREN));

1128 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_TXE
(
I2C_Ty≥Def
 *
I2Cx
)

1130  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_TXE
) == (I2C_SR1_TXE));

1141 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_BTF
(
I2C_Ty≥Def
 *
I2Cx
)

1143  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_BTF
) == (I2C_SR1_BTF));

1154 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_RXNE
(
I2C_Ty≥Def
 *
I2Cx
)

1156  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_RXNE
) == (I2C_SR1_RXNE));

1167 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_SB
(
I2C_Ty≥Def
 *
I2Cx
)

1169  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_SB
) == (I2C_SR1_SB));

1180 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_ADDR
(
I2C_Ty≥Def
 *
I2Cx
)

1182  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ADDR
) == (I2C_SR1_ADDR));

1193 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_ADD10
(
I2C_Ty≥Def
 *
I2Cx
)

1195  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ADD10
) == (I2C_SR1_ADD10));

1206 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_AF
(
I2C_Ty≥Def
 *
I2Cx
)

1208  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_AF
) == (I2C_SR1_AF));

1219 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_STOP
(
I2C_Ty≥Def
 *
I2Cx
)

1221  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_STOPF
) == (I2C_SR1_STOPF));

1232 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_BERR
(
I2C_Ty≥Def
 *
I2Cx
)

1234  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_BERR
) == (I2C_SR1_BERR));

1245 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_ARLO
(
I2C_Ty≥Def
 *
I2Cx
)

1247  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ARLO
) == (I2C_SR1_ARLO));

1258 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_OVR
(
I2C_Ty≥Def
 *
I2Cx
)

1260  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_OVR
) == (I2C_SR1_OVR));

1271 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveSMBusFœg_PECERR
(
I2C_Ty≥Def
 *
I2Cx
)

1273  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_PECERR
) == (I2C_SR1_PECERR));

1284 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveSMBusFœg_TIMEOUT
(
I2C_Ty≥Def
 *
I2Cx
)

1286  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_TIMEOUT
) == (I2C_SR1_TIMEOUT));

1297 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveSMBusFœg_ALERT
(
I2C_Ty≥Def
 *
I2Cx
)

1299  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_SMBALERT
) == (I2C_SR1_SMBALERT));

1310 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_BUSY
(
I2C_Ty≥Def
 *
I2Cx
)

1312  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_BUSY
) == (I2C_SR2_BUSY));

1323 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_DUAL
(
I2C_Ty≥Def
 *
I2Cx
)

1325  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_DUALF
) == (I2C_SR2_DUALF));

1339 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveSMBusFœg_SMBHOST
(
I2C_Ty≥Def
 *
I2Cx
)

1341  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_SMBHOST
) == (I2C_SR2_SMBHOST));

1355 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveSMBusFœg_SMBDEFAULT
(
I2C_Ty≥Def
 *
I2Cx
)

1357  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_SMBDEFAULT
) == (I2C_SR2_SMBDEFAULT));

1369 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_GENCALL
(
I2C_Ty≥Def
 *
I2Cx
)

1371  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_GENCALL
) == (I2C_SR2_GENCALL));

1382 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsA˘iveFœg_MSL
(
I2C_Ty≥Def
 *
I2Cx
)

1384  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_MSL
) == (I2C_SR2_MSL));

1395 
__STATIC_INLINE
 
LL_I2C_CÀ¨Fœg_ADDR
(
I2C_Ty≥Def
 *
I2Cx
)

1397 
__IO
 
uöt32_t
 
tm¥eg
;

1398 
tm¥eg
 = 
I2Cx
->
SR1
;

1399 (Ë
tm¥eg
;

1400 
tm¥eg
 = 
I2Cx
->
SR2
;

1401 (Ë
tm¥eg
;

1410 
__STATIC_INLINE
 
LL_I2C_CÀ¨Fœg_AF
(
I2C_Ty≥Def
 *
I2Cx
)

1412 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_AF
);

1424 
__STATIC_INLINE
 
LL_I2C_CÀ¨Fœg_STOP
(
I2C_Ty≥Def
 *
I2Cx
)

1426 
__IO
 
uöt32_t
 
tm¥eg
;

1427 
tm¥eg
 = 
I2Cx
->
SR1
;

1428 (Ë
tm¥eg
;

1429 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
);

1438 
__STATIC_INLINE
 
LL_I2C_CÀ¨Fœg_BERR
(
I2C_Ty≥Def
 *
I2Cx
)

1440 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_BERR
);

1449 
__STATIC_INLINE
 
LL_I2C_CÀ¨Fœg_ARLO
(
I2C_Ty≥Def
 *
I2Cx
)

1451 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ARLO
);

1460 
__STATIC_INLINE
 
LL_I2C_CÀ¨Fœg_OVR
(
I2C_Ty≥Def
 *
I2Cx
)

1462 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_OVR
);

1471 
__STATIC_INLINE
 
LL_I2C_CÀ¨SMBusFœg_PECERR
(
I2C_Ty≥Def
 *
I2Cx
)

1473 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_PECERR
);

1484 
__STATIC_INLINE
 
LL_I2C_CÀ¨SMBusFœg_TIMEOUT
(
I2C_Ty≥Def
 *
I2Cx
)

1486 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_TIMEOUT
);

1497 
__STATIC_INLINE
 
LL_I2C_CÀ¨SMBusFœg_ALERT
(
I2C_Ty≥Def
 *
I2Cx
)

1499 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_SMBALERT
);

1516 
__STATIC_INLINE
 
LL_I2C_E«bÀRe£t
(
I2C_Ty≥Def
 *
I2Cx
)

1518 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SWRST
);

1527 
__STATIC_INLINE
 
LL_I2C_DißbÀRe£t
(
I2C_Ty≥Def
 *
I2Cx
)

1529 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SWRST
);

1538 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsRe£tE«bÀd
(
I2C_Ty≥Def
 *
I2Cx
)

1540  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SWRST
) == (I2C_CR1_SWRST));

1553 
__STATIC_INLINE
 
LL_I2C_AcknowÀdgeNextD©a
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt32_t
 
Ty≥AcknowÀdge
)

1555 
MODIFY_REG
(
I2Cx
->
CR1
, 
I2C_CR1_ACK
, 
Ty≥AcknowÀdge
);

1566 
__STATIC_INLINE
 
LL_I2C_Gíî©eSèπC⁄dôi⁄
(
I2C_Ty≥Def
 *
I2Cx
)

1568 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_START
);

1577 
__STATIC_INLINE
 
LL_I2C_Gíî©eSt›C⁄dôi⁄
(
I2C_Ty≥Def
 *
I2Cx
)

1579 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_STOP
);

1589 
__STATIC_INLINE
 
LL_I2C_E«bÀBôPOS
(
I2C_Ty≥Def
 *
I2Cx
)

1591 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_POS
);

1601 
__STATIC_INLINE
 
LL_I2C_DißbÀBôPOS
(
I2C_Ty≥Def
 *
I2Cx
)

1603 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_POS
);

1612 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdBôPOS
(
I2C_Ty≥Def
 *
I2Cx
)

1614  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_POS
) == (I2C_CR1_POS));

1627 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëTøns„rDúe˘i⁄
(
I2C_Ty≥Def
 *
I2Cx
)

1629  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_TRA
));

1639 
__STATIC_INLINE
 
LL_I2C_E«bÀLa°DMA
(
I2C_Ty≥Def
 *
I2Cx
)

1641 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_LAST
);

1651 
__STATIC_INLINE
 
LL_I2C_DißbÀLa°DMA
(
I2C_Ty≥Def
 *
I2Cx
)

1653 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_LAST
);

1662 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdLa°DMA
(
I2C_Ty≥Def
 *
I2Cx
)

1664  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_LAST
) == (I2C_CR2_LAST));

1677 
__STATIC_INLINE
 
LL_I2C_E«bÀSMBusPECCom∑ª
(
I2C_Ty≥Def
 *
I2Cx
)

1679 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PEC
);

1690 
__STATIC_INLINE
 
LL_I2C_DißbÀSMBusPECCom∑ª
(
I2C_Ty≥Def
 *
I2Cx
)

1692 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PEC
);

1703 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_IsE«bÀdSMBusPECCom∑ª
(
I2C_Ty≥Def
 *
I2Cx
)

1705  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PEC
) == (I2C_CR1_PEC));

1716 
__STATIC_INLINE
 
uöt32_t
 
LL_I2C_GëSMBusPEC
(
I2C_Ty≥Def
 *
I2Cx
)

1718  (
uöt32_t
)(
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_PEC
Ë>> 
I2C_SR2_PEC_Pos
);

1727 
__STATIC_INLINE
 
uöt8_t
 
LL_I2C_Re˚iveD©a8
(
I2C_Ty≥Def
 *
I2Cx
)

1729  (
uöt8_t
)(
READ_BIT
(
I2Cx
->
DR
, 
I2C_DR_DR
));

1739 
__STATIC_INLINE
 
LL_I2C_TønsmôD©a8
(
I2C_Ty≥Def
 *
I2Cx
, 
uöt8_t
 
D©a
)

1741 
MODIFY_REG
(
I2Cx
->
DR
, 
I2C_DR_DR
, 
D©a
);

1748 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

1753 
uöt32_t
 
LL_I2C_Inô
(
I2C_Ty≥Def
 *
I2Cx
, 
LL_I2C_InôTy≥Def
 *
I2C_InôSåu˘
);

1754 
uöt32_t
 
LL_I2C_DeInô
(
I2C_Ty≥Def
 *
I2Cx
);

1755 
LL_I2C_Såu˘Inô
(
LL_I2C_InôTy≥Def
 *
I2C_InôSåu˘
);

1777 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_pwr.h

20 #i‚de‡
__STM32F1xx_LL_PWR_H


21 
	#__STM32F1xx_LL_PWR_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
(
PWR
)

54 
	#LL_PWR_CR_CSBF
 
PWR_CR_CSBF


	)

55 
	#LL_PWR_CR_CWUF
 
PWR_CR_CWUF


	)

64 
	#LL_PWR_CSR_WUF
 
PWR_CSR_WUF


	)

65 
	#LL_PWR_CSR_SBF
 
PWR_CSR_SBF


	)

66 
	#LL_PWR_CSR_PVDO
 
PWR_CSR_PVDO


	)

67 
	#LL_PWR_CSR_EWUP1
 
PWR_CSR_EWUP


	)

76 
	#LL_PWR_MODE_STOP_MAINREGU
 0x00000000U

	)

77 
	#LL_PWR_MODE_STOP_LPREGU
 (
PWR_CR_LPDS
Ë

	)

78 
	#LL_PWR_MODE_STANDBY
 (
PWR_CR_PDDS
Ë

	)

86 
	#LL_PWR_REGU_DSMODE_MAIN
 0x00000000U

	)

87 
	#LL_PWR_REGU_DSMODE_LOW_POWER
 (
PWR_CR_LPDS
Ë

	)

95 
	#LL_PWR_PVDLEVEL_0
 (
PWR_CR_PLS_LEV0
Ë

	)

96 
	#LL_PWR_PVDLEVEL_1
 (
PWR_CR_PLS_LEV1
Ë

	)

97 
	#LL_PWR_PVDLEVEL_2
 (
PWR_CR_PLS_LEV2
Ë

	)

98 
	#LL_PWR_PVDLEVEL_3
 (
PWR_CR_PLS_LEV3
Ë

	)

99 
	#LL_PWR_PVDLEVEL_4
 (
PWR_CR_PLS_LEV4
Ë

	)

100 
	#LL_PWR_PVDLEVEL_5
 (
PWR_CR_PLS_LEV5
Ë

	)

101 
	#LL_PWR_PVDLEVEL_6
 (
PWR_CR_PLS_LEV6
Ë

	)

102 
	#LL_PWR_PVDLEVEL_7
 (
PWR_CR_PLS_LEV7
Ë

	)

109 
	#LL_PWR_WAKEUP_PIN1
 (
PWR_CSR_EWUP
Ë

	)

134 
	#LL_PWR_WrôeReg
(
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(
PWR
->__REG__, (__VALUE__))

	)

141 
	#LL_PWR_RódReg
(
__REG__
Ë
	`READ_REG
(
PWR
->__REG__)

	)

164 
__STATIC_INLINE
 
LL_PWR_E«bÀBkUpAc˚ss
()

166 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

174 
__STATIC_INLINE
 
LL_PWR_DißbÀBkUpAc˚ss
()

176 
CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

184 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_IsE«bÀdBkUpAc˚ss
()

186  (
READ_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
) == (PWR_CR_DBP));

197 
__STATIC_INLINE
 
LL_PWR_SëRegulModeDS
(
uöt32_t
 
RegulMode
)

199 
MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_LPDS
, 
RegulMode
);

209 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_GëRegulModeDS
()

211  (
uöt32_t
)(
READ_BIT
(
PWR
->
CR
, 
PWR_CR_LPDS
));

224 
__STATIC_INLINE
 
LL_PWR_SëPowîMode
(
uöt32_t
 
PDMode
)

226 
MODIFY_REG
(
PWR
->
CR
, (
PWR_CR_PDDS
| 
PWR_CR_LPDS
), 
PDMode
);

238 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_GëPowîMode
()

240  (
uöt32_t
)(
READ_BIT
(
PWR
->
CR
, (
PWR_CR_PDDS
| 
PWR_CR_LPDS
)));

257 
__STATIC_INLINE
 
LL_PWR_SëPVDLevñ
(
uöt32_t
 
PVDLevñ
)

259 
MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
PVDLevñ
);

275 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_GëPVDLevñ
()

277  (
uöt32_t
)(
READ_BIT
(
PWR
->
CR
, 
PWR_CR_PLS
));

285 
__STATIC_INLINE
 
LL_PWR_E«bÀPVD
()

287 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
);

295 
__STATIC_INLINE
 
LL_PWR_DißbÀPVD
()

297 
CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
);

305 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_IsE«bÀdPVD
()

307  (
READ_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
) == (PWR_CR_PVDE));

317 
__STATIC_INLINE
 
LL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPö
)

319 
SET_BIT
(
PWR
->
CSR
, 
WakeUpPö
);

329 
__STATIC_INLINE
 
LL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPö
)

331 
CLEAR_BIT
(
PWR
->
CSR
, 
WakeUpPö
);

341 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_IsE«bÀdWakeUpPö
(uöt32_à
WakeUpPö
)

343  (
READ_BIT
(
PWR
->
CSR
, 
WakeUpPö
) == (WakeUpPin));

360 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_IsA˘iveFœg_WU
()

362  (
READ_BIT
(
PWR
->
CSR
, 
PWR_CSR_WUF
) == (PWR_CSR_WUF));

370 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_IsA˘iveFœg_SB
()

372  (
READ_BIT
(
PWR
->
CSR
, 
PWR_CSR_SBF
) == (PWR_CSR_SBF));

380 
__STATIC_INLINE
 
uöt32_t
 
LL_PWR_IsA˘iveFœg_PVDO
()

382  (
READ_BIT
(
PWR
->
CSR
, 
PWR_CSR_PVDO
) == (PWR_CSR_PVDO));

390 
__STATIC_INLINE
 
LL_PWR_CÀ¨Fœg_SB
()

392 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_CSBF
);

400 
__STATIC_INLINE
 
LL_PWR_CÀ¨Fœg_WU
()

402 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_CWUF
);

409 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

413 
Eº‹Sètus
 
LL_PWR_DeInô
();

433 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h

19 #i‚de‡
__STM32F1xx_LL_RCC_H


20 
	#__STM32F1xx_LL_RCC_H


	)

22 #ifde‡
__˝lu•lus


27 
	~"°m32f1xx.h
"

33 #i‡
deföed
(
RCC
)

43 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

52 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

66 
uöt32_t
 
SYSCLK_Fªquícy
;

67 
uöt32_t
 
HCLK_Fªquícy
;

68 
uöt32_t
 
PCLK1_Fªquícy
;

69 
uöt32_t
 
PCLK2_Fªquícy
;

70 } 
	tLL_RCC_ClocksTy≥Def
;

92 #i‡!
deföed
 (
HSE_VALUE
)

93 
	#HSE_VALUE
 8000000U

	)

96 #i‡!
deföed
 (
HSI_VALUE
)

97 
	#HSI_VALUE
 8000000U

	)

100 #i‡!
deföed
 (
LSE_VALUE
)

101 
	#LSE_VALUE
 32768U

	)

104 #i‡!
deföed
 (
LSI_VALUE
)

105 
	#LSI_VALUE
 40000U

	)

115 
	#LL_RCC_CIR_LSIRDYC
 
RCC_CIR_LSIRDYC


	)

116 
	#LL_RCC_CIR_LSERDYC
 
RCC_CIR_LSERDYC


	)

117 
	#LL_RCC_CIR_HSIRDYC
 
RCC_CIR_HSIRDYC


	)

118 
	#LL_RCC_CIR_HSERDYC
 
RCC_CIR_HSERDYC


	)

119 
	#LL_RCC_CIR_PLLRDYC
 
RCC_CIR_PLLRDYC


	)

120 
	#LL_RCC_CIR_PLL3RDYC
 
RCC_CIR_PLL3RDYC


	)

121 
	#LL_RCC_CIR_PLL2RDYC
 
RCC_CIR_PLL2RDYC


	)

122 
	#LL_RCC_CIR_CSSC
 
RCC_CIR_CSSC


	)

131 
	#LL_RCC_CIR_LSIRDYF
 
RCC_CIR_LSIRDYF


	)

132 
	#LL_RCC_CIR_LSERDYF
 
RCC_CIR_LSERDYF


	)

133 
	#LL_RCC_CIR_HSIRDYF
 
RCC_CIR_HSIRDYF


	)

134 
	#LL_RCC_CIR_HSERDYF
 
RCC_CIR_HSERDYF


	)

135 
	#LL_RCC_CIR_PLLRDYF
 
RCC_CIR_PLLRDYF


	)

136 
	#LL_RCC_CIR_PLL3RDYF
 
RCC_CIR_PLL3RDYF


	)

137 
	#LL_RCC_CIR_PLL2RDYF
 
RCC_CIR_PLL2RDYF


	)

138 
	#LL_RCC_CIR_CSSF
 
RCC_CIR_CSSF


	)

139 
	#LL_RCC_CSR_PINRSTF
 
RCC_CSR_PINRSTF


	)

140 
	#LL_RCC_CSR_PORRSTF
 
RCC_CSR_PORRSTF


	)

141 
	#LL_RCC_CSR_SFTRSTF
 
RCC_CSR_SFTRSTF


	)

142 
	#LL_RCC_CSR_IWDGRSTF
 
RCC_CSR_IWDGRSTF


	)

143 
	#LL_RCC_CSR_WWDGRSTF
 
RCC_CSR_WWDGRSTF


	)

144 
	#LL_RCC_CSR_LPWRRSTF
 
RCC_CSR_LPWRRSTF


	)

153 
	#LL_RCC_CIR_LSIRDYIE
 
RCC_CIR_LSIRDYIE


	)

154 
	#LL_RCC_CIR_LSERDYIE
 
RCC_CIR_LSERDYIE


	)

155 
	#LL_RCC_CIR_HSIRDYIE
 
RCC_CIR_HSIRDYIE


	)

156 
	#LL_RCC_CIR_HSERDYIE
 
RCC_CIR_HSERDYIE


	)

157 
	#LL_RCC_CIR_PLLRDYIE
 
RCC_CIR_PLLRDYIE


	)

158 
	#LL_RCC_CIR_PLL3RDYIE
 
RCC_CIR_PLL3RDYIE


	)

159 
	#LL_RCC_CIR_PLL2RDYIE
 
RCC_CIR_PLL2RDYIE


	)

164 #i‡
deföed
(
RCC_CFGR2_PREDIV2
)

168 
	#LL_RCC_HSE_PREDIV2_DIV_1
 
RCC_CFGR2_PREDIV2_DIV1


	)

169 
	#LL_RCC_HSE_PREDIV2_DIV_2
 
RCC_CFGR2_PREDIV2_DIV2


	)

170 
	#LL_RCC_HSE_PREDIV2_DIV_3
 
RCC_CFGR2_PREDIV2_DIV3


	)

171 
	#LL_RCC_HSE_PREDIV2_DIV_4
 
RCC_CFGR2_PREDIV2_DIV4


	)

172 
	#LL_RCC_HSE_PREDIV2_DIV_5
 
RCC_CFGR2_PREDIV2_DIV5


	)

173 
	#LL_RCC_HSE_PREDIV2_DIV_6
 
RCC_CFGR2_PREDIV2_DIV6


	)

174 
	#LL_RCC_HSE_PREDIV2_DIV_7
 
RCC_CFGR2_PREDIV2_DIV7


	)

175 
	#LL_RCC_HSE_PREDIV2_DIV_8
 
RCC_CFGR2_PREDIV2_DIV8


	)

176 
	#LL_RCC_HSE_PREDIV2_DIV_9
 
RCC_CFGR2_PREDIV2_DIV9


	)

177 
	#LL_RCC_HSE_PREDIV2_DIV_10
 
RCC_CFGR2_PREDIV2_DIV10


	)

178 
	#LL_RCC_HSE_PREDIV2_DIV_11
 
RCC_CFGR2_PREDIV2_DIV11


	)

179 
	#LL_RCC_HSE_PREDIV2_DIV_12
 
RCC_CFGR2_PREDIV2_DIV12


	)

180 
	#LL_RCC_HSE_PREDIV2_DIV_13
 
RCC_CFGR2_PREDIV2_DIV13


	)

181 
	#LL_RCC_HSE_PREDIV2_DIV_14
 
RCC_CFGR2_PREDIV2_DIV14


	)

182 
	#LL_RCC_HSE_PREDIV2_DIV_15
 
RCC_CFGR2_PREDIV2_DIV15


	)

183 
	#LL_RCC_HSE_PREDIV2_DIV_16
 
RCC_CFGR2_PREDIV2_DIV16


	)

193 
	#LL_RCC_SYS_CLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

194 
	#LL_RCC_SYS_CLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

195 
	#LL_RCC_SYS_CLKSOURCE_PLL
 
RCC_CFGR_SW_PLL


	)

203 
	#LL_RCC_SYS_CLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

204 
	#LL_RCC_SYS_CLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

205 
	#LL_RCC_SYS_CLKSOURCE_STATUS_PLL
 
RCC_CFGR_SWS_PLL


	)

213 
	#LL_RCC_SYSCLK_DIV_1
 
RCC_CFGR_HPRE_DIV1


	)

214 
	#LL_RCC_SYSCLK_DIV_2
 
RCC_CFGR_HPRE_DIV2


	)

215 
	#LL_RCC_SYSCLK_DIV_4
 
RCC_CFGR_HPRE_DIV4


	)

216 
	#LL_RCC_SYSCLK_DIV_8
 
RCC_CFGR_HPRE_DIV8


	)

217 
	#LL_RCC_SYSCLK_DIV_16
 
RCC_CFGR_HPRE_DIV16


	)

218 
	#LL_RCC_SYSCLK_DIV_64
 
RCC_CFGR_HPRE_DIV64


	)

219 
	#LL_RCC_SYSCLK_DIV_128
 
RCC_CFGR_HPRE_DIV128


	)

220 
	#LL_RCC_SYSCLK_DIV_256
 
RCC_CFGR_HPRE_DIV256


	)

221 
	#LL_RCC_SYSCLK_DIV_512
 
RCC_CFGR_HPRE_DIV512


	)

229 
	#LL_RCC_APB1_DIV_1
 
RCC_CFGR_PPRE1_DIV1


	)

230 
	#LL_RCC_APB1_DIV_2
 
RCC_CFGR_PPRE1_DIV2


	)

231 
	#LL_RCC_APB1_DIV_4
 
RCC_CFGR_PPRE1_DIV4


	)

232 
	#LL_RCC_APB1_DIV_8
 
RCC_CFGR_PPRE1_DIV8


	)

233 
	#LL_RCC_APB1_DIV_16
 
RCC_CFGR_PPRE1_DIV16


	)

241 
	#LL_RCC_APB2_DIV_1
 
RCC_CFGR_PPRE2_DIV1


	)

242 
	#LL_RCC_APB2_DIV_2
 
RCC_CFGR_PPRE2_DIV2


	)

243 
	#LL_RCC_APB2_DIV_4
 
RCC_CFGR_PPRE2_DIV4


	)

244 
	#LL_RCC_APB2_DIV_8
 
RCC_CFGR_PPRE2_DIV8


	)

245 
	#LL_RCC_APB2_DIV_16
 
RCC_CFGR_PPRE2_DIV16


	)

253 
	#LL_RCC_MCO1SOURCE_NOCLOCK
 
RCC_CFGR_MCO_NOCLOCK


	)

254 
	#LL_RCC_MCO1SOURCE_SYSCLK
 
RCC_CFGR_MCO_SYSCLK


	)

255 
	#LL_RCC_MCO1SOURCE_HSI
 
RCC_CFGR_MCO_HSI


	)

256 
	#LL_RCC_MCO1SOURCE_HSE
 
RCC_CFGR_MCO_HSE


	)

257 
	#LL_RCC_MCO1SOURCE_PLLCLK_DIV_2
 
RCC_CFGR_MCO_PLLCLK_DIV2


	)

258 #i‡
deföed
(
RCC_CFGR_MCO_PLL2CLK
)

259 
	#LL_RCC_MCO1SOURCE_PLL2CLK
 
RCC_CFGR_MCO_PLL2CLK


	)

261 #i‡
deföed
(
RCC_CFGR_MCO_PLL3CLK_DIV2
)

262 
	#LL_RCC_MCO1SOURCE_PLLI2SCLK_DIV2
 
RCC_CFGR_MCO_PLL3CLK_DIV2


	)

264 #i‡
deföed
(
RCC_CFGR_MCO_EXT_HSE
)

265 
	#LL_RCC_MCO1SOURCE_EXT_HSE
 
RCC_CFGR_MCO_EXT_HSE


	)

267 #i‡
deföed
(
RCC_CFGR_MCO_PLL3CLK
)

268 
	#LL_RCC_MCO1SOURCE_PLLI2SCLK
 
RCC_CFGR_MCO_PLL3CLK


	)

274 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

278 
	#LL_RCC_PERIPH_FREQUENCY_NO
 0x00000000U

	)

279 
	#LL_RCC_PERIPH_FREQUENCY_NA
 0xFFFFFFFFU

	)

285 #i‡
deföed
(
RCC_CFGR2_I2S2SRC
)

289 
	#LL_RCC_I2S2_CLKSOURCE_SYSCLK
 
RCC_CFGR2_I2S2SRC


	)

290 
	#LL_RCC_I2S2_CLKSOURCE_PLLI2S_VCO
 (
uöt32_t
)(
RCC_CFGR2_I2S2SRC
 | (RCC_CFGR2_I2S2SRC >> 16U)Ë

	)

291 
	#LL_RCC_I2S3_CLKSOURCE_SYSCLK
 
RCC_CFGR2_I2S3SRC


	)

292 
	#LL_RCC_I2S3_CLKSOURCE_PLLI2S_VCO
 (
uöt32_t
)(
RCC_CFGR2_I2S3SRC
 | (RCC_CFGR2_I2S3SRC >> 16U)Ë

	)

298 #i‡
deföed
(
USB_OTG_FS
Ë|| deföed(
USB
)

302 #i‡
deföed
(
RCC_CFGR_USBPRE
)

303 
	#LL_RCC_USB_CLKSOURCE_PLL
 
RCC_CFGR_USBPRE


	)

304 
	#LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5
 0x00000000U

	)

306 #i‡
deföed
(
RCC_CFGR_OTGFSPRE
)

307 
	#LL_RCC_USB_CLKSOURCE_PLL_DIV_2
 
RCC_CFGR_OTGFSPRE


	)

308 
	#LL_RCC_USB_CLKSOURCE_PLL_DIV_3
 0x00000000U

	)

318 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_2
 
RCC_CFGR_ADCPRE_DIV2


	)

319 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_4
 
RCC_CFGR_ADCPRE_DIV4


	)

320 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
 
RCC_CFGR_ADCPRE_DIV6


	)

321 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
 
RCC_CFGR_ADCPRE_DIV8


	)

326 #i‡
deföed
(
RCC_CFGR2_I2S2SRC
)

330 
	#LL_RCC_I2S2_CLKSOURCE
 
RCC_CFGR2_I2S2SRC


	)

331 
	#LL_RCC_I2S3_CLKSOURCE
 
RCC_CFGR2_I2S3SRC


	)

338 #i‡
deföed
(
USB_OTG_FS
Ë|| deföed(
USB
)

342 
	#LL_RCC_USB_CLKSOURCE
 0x00400000U

	)

352 
	#LL_RCC_ADC_CLKSOURCE
 
RCC_CFGR_ADCPRE


	)

360 
	#LL_RCC_RTC_CLKSOURCE_NONE
 0x00000000U

	)

361 
	#LL_RCC_RTC_CLKSOURCE_LSE
 
RCC_BDCR_RTCSEL_0


	)

362 
	#LL_RCC_RTC_CLKSOURCE_LSI
 
RCC_BDCR_RTCSEL_1


	)

363 
	#LL_RCC_RTC_CLKSOURCE_HSE_DIV128
 
RCC_BDCR_RTCSEL


	)

371 #i‡
deföed
(
RCC_CFGR_PLLMULL2
)

372 
	#LL_RCC_PLL_MUL_2
 
RCC_CFGR_PLLMULL2


	)

374 #i‡
deföed
(
RCC_CFGR_PLLMULL3
)

375 
	#LL_RCC_PLL_MUL_3
 
RCC_CFGR_PLLMULL3


	)

377 
	#LL_RCC_PLL_MUL_4
 
RCC_CFGR_PLLMULL4


	)

378 
	#LL_RCC_PLL_MUL_5
 
RCC_CFGR_PLLMULL5


	)

379 
	#LL_RCC_PLL_MUL_6
 
RCC_CFGR_PLLMULL6


	)

380 
	#LL_RCC_PLL_MUL_7
 
RCC_CFGR_PLLMULL7


	)

381 
	#LL_RCC_PLL_MUL_8
 
RCC_CFGR_PLLMULL8


	)

382 
	#LL_RCC_PLL_MUL_9
 
RCC_CFGR_PLLMULL9


	)

383 #i‡
deföed
(
RCC_CFGR_PLLMULL6_5
)

384 
	#LL_RCC_PLL_MUL_6_5
 
RCC_CFGR_PLLMULL6_5


	)

386 
	#LL_RCC_PLL_MUL_10
 
RCC_CFGR_PLLMULL10


	)

387 
	#LL_RCC_PLL_MUL_11
 
RCC_CFGR_PLLMULL11


	)

388 
	#LL_RCC_PLL_MUL_12
 
RCC_CFGR_PLLMULL12


	)

389 
	#LL_RCC_PLL_MUL_13
 
RCC_CFGR_PLLMULL13


	)

390 
	#LL_RCC_PLL_MUL_14
 
RCC_CFGR_PLLMULL14


	)

391 
	#LL_RCC_PLL_MUL_15
 
RCC_CFGR_PLLMULL15


	)

392 
	#LL_RCC_PLL_MUL_16
 
RCC_CFGR_PLLMULL16


	)

401 
	#LL_RCC_PLLSOURCE_HSI_DIV_2
 0x00000000U

	)

402 
	#LL_RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC


	)

403 #i‡
deföed
(
RCC_CFGR2_PREDIV1SRC
)

404 
	#LL_RCC_PLLSOURCE_PLL2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

407 #i‡
deföed
(
RCC_CFGR2_PREDIV1
)

408 
	#LL_RCC_PLLSOURCE_HSE_DIV_1
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV1
Ë

	)

409 
	#LL_RCC_PLLSOURCE_HSE_DIV_2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV2
Ë

	)

410 
	#LL_RCC_PLLSOURCE_HSE_DIV_3
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV3
Ë

	)

411 
	#LL_RCC_PLLSOURCE_HSE_DIV_4
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV4
Ë

	)

412 
	#LL_RCC_PLLSOURCE_HSE_DIV_5
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV5
Ë

	)

413 
	#LL_RCC_PLLSOURCE_HSE_DIV_6
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV6
Ë

	)

414 
	#LL_RCC_PLLSOURCE_HSE_DIV_7
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV7
Ë

	)

415 
	#LL_RCC_PLLSOURCE_HSE_DIV_8
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV8
Ë

	)

416 
	#LL_RCC_PLLSOURCE_HSE_DIV_9
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV9
Ë

	)

417 
	#LL_RCC_PLLSOURCE_HSE_DIV_10
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV10
Ë

	)

418 
	#LL_RCC_PLLSOURCE_HSE_DIV_11
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV11
Ë

	)

419 
	#LL_RCC_PLLSOURCE_HSE_DIV_12
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV12
Ë

	)

420 
	#LL_RCC_PLLSOURCE_HSE_DIV_13
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV13
Ë

	)

421 
	#LL_RCC_PLLSOURCE_HSE_DIV_14
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV14
Ë

	)

422 
	#LL_RCC_PLLSOURCE_HSE_DIV_15
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV15
Ë

	)

423 
	#LL_RCC_PLLSOURCE_HSE_DIV_16
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV16
Ë

	)

424 #i‡
deföed
(
RCC_CFGR2_PREDIV1SRC
)

425 
	#LL_RCC_PLLSOURCE_PLL2_DIV_1
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV1
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

426 
	#LL_RCC_PLLSOURCE_PLL2_DIV_2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV2
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

427 
	#LL_RCC_PLLSOURCE_PLL2_DIV_3
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV3
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

428 
	#LL_RCC_PLLSOURCE_PLL2_DIV_4
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV4
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

429 
	#LL_RCC_PLLSOURCE_PLL2_DIV_5
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV5
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

430 
	#LL_RCC_PLLSOURCE_PLL2_DIV_6
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV6
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

431 
	#LL_RCC_PLLSOURCE_PLL2_DIV_7
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV7
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

432 
	#LL_RCC_PLLSOURCE_PLL2_DIV_8
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV8
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

433 
	#LL_RCC_PLLSOURCE_PLL2_DIV_9
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV9
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

434 
	#LL_RCC_PLLSOURCE_PLL2_DIV_10
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV10
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

435 
	#LL_RCC_PLLSOURCE_PLL2_DIV_11
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV11
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

436 
	#LL_RCC_PLLSOURCE_PLL2_DIV_12
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV12
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

437 
	#LL_RCC_PLLSOURCE_PLL2_DIV_13
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV13
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

438 
	#LL_RCC_PLLSOURCE_PLL2_DIV_14
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV14
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

439 
	#LL_RCC_PLLSOURCE_PLL2_DIV_15
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV15
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

440 
	#LL_RCC_PLLSOURCE_PLL2_DIV_16
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV16
 | 
RCC_CFGR2_PREDIV1SRC
 << 4UË

	)

443 
	#LL_RCC_PLLSOURCE_HSE_DIV_1
 (
RCC_CFGR_PLLSRC
 | 0x00000000UË

	)

444 
	#LL_RCC_PLLSOURCE_HSE_DIV_2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
Ë

	)

453 #i‡
deföed
(
RCC_CFGR2_PREDIV1
)

454 
	#LL_RCC_PREDIV_DIV_1
 
RCC_CFGR2_PREDIV1_DIV1


	)

455 
	#LL_RCC_PREDIV_DIV_2
 
RCC_CFGR2_PREDIV1_DIV2


	)

456 
	#LL_RCC_PREDIV_DIV_3
 
RCC_CFGR2_PREDIV1_DIV3


	)

457 
	#LL_RCC_PREDIV_DIV_4
 
RCC_CFGR2_PREDIV1_DIV4


	)

458 
	#LL_RCC_PREDIV_DIV_5
 
RCC_CFGR2_PREDIV1_DIV5


	)

459 
	#LL_RCC_PREDIV_DIV_6
 
RCC_CFGR2_PREDIV1_DIV6


	)

460 
	#LL_RCC_PREDIV_DIV_7
 
RCC_CFGR2_PREDIV1_DIV7


	)

461 
	#LL_RCC_PREDIV_DIV_8
 
RCC_CFGR2_PREDIV1_DIV8


	)

462 
	#LL_RCC_PREDIV_DIV_9
 
RCC_CFGR2_PREDIV1_DIV9


	)

463 
	#LL_RCC_PREDIV_DIV_10
 
RCC_CFGR2_PREDIV1_DIV10


	)

464 
	#LL_RCC_PREDIV_DIV_11
 
RCC_CFGR2_PREDIV1_DIV11


	)

465 
	#LL_RCC_PREDIV_DIV_12
 
RCC_CFGR2_PREDIV1_DIV12


	)

466 
	#LL_RCC_PREDIV_DIV_13
 
RCC_CFGR2_PREDIV1_DIV13


	)

467 
	#LL_RCC_PREDIV_DIV_14
 
RCC_CFGR2_PREDIV1_DIV14


	)

468 
	#LL_RCC_PREDIV_DIV_15
 
RCC_CFGR2_PREDIV1_DIV15


	)

469 
	#LL_RCC_PREDIV_DIV_16
 
RCC_CFGR2_PREDIV1_DIV16


	)

471 
	#LL_RCC_PREDIV_DIV_1
 0x00000000U

	)

472 
	#LL_RCC_PREDIV_DIV_2
 
RCC_CFGR_PLLXTPRE


	)

478 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

482 
	#LL_RCC_PLLI2S_MUL_8
 
RCC_CFGR2_PLL3MUL8


	)

483 
	#LL_RCC_PLLI2S_MUL_9
 
RCC_CFGR2_PLL3MUL9


	)

484 
	#LL_RCC_PLLI2S_MUL_10
 
RCC_CFGR2_PLL3MUL10


	)

485 
	#LL_RCC_PLLI2S_MUL_11
 
RCC_CFGR2_PLL3MUL11


	)

486 
	#LL_RCC_PLLI2S_MUL_12
 
RCC_CFGR2_PLL3MUL12


	)

487 
	#LL_RCC_PLLI2S_MUL_13
 
RCC_CFGR2_PLL3MUL13


	)

488 
	#LL_RCC_PLLI2S_MUL_14
 
RCC_CFGR2_PLL3MUL14


	)

489 
	#LL_RCC_PLLI2S_MUL_16
 
RCC_CFGR2_PLL3MUL16


	)

490 
	#LL_RCC_PLLI2S_MUL_20
 
RCC_CFGR2_PLL3MUL20


	)

497 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

501 
	#LL_RCC_PLL2_MUL_8
 
RCC_CFGR2_PLL2MUL8


	)

502 
	#LL_RCC_PLL2_MUL_9
 
RCC_CFGR2_PLL2MUL9


	)

503 
	#LL_RCC_PLL2_MUL_10
 
RCC_CFGR2_PLL2MUL10


	)

504 
	#LL_RCC_PLL2_MUL_11
 
RCC_CFGR2_PLL2MUL11


	)

505 
	#LL_RCC_PLL2_MUL_12
 
RCC_CFGR2_PLL2MUL12


	)

506 
	#LL_RCC_PLL2_MUL_13
 
RCC_CFGR2_PLL2MUL13


	)

507 
	#LL_RCC_PLL2_MUL_14
 
RCC_CFGR2_PLL2MUL14


	)

508 
	#LL_RCC_PLL2_MUL_16
 
RCC_CFGR2_PLL2MUL16


	)

509 
	#LL_RCC_PLL2_MUL_20
 
RCC_CFGR2_PLL2MUL20


	)

535 
	#LL_RCC_WrôeReg
(
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(
RCC
->__REG__, (__VALUE__))

	)

542 
	#LL_RCC_RódReg
(
__REG__
Ë
	`READ_REG
(
RCC
->__REG__)

	)

551 #i‡
deföed
(
RCC_CFGR_PLLMULL6_5
)

566 
	#__LL_RCC_CALC_PLLCLK_FREQ
(
__INPUTFREQ__
, 
__PLLMUL__
) \

567 (((
__PLLMUL__
Ë!
RCC_CFGR_PLLMULL6_5
) ? \

568 ((
__INPUTFREQ__
Ë* ((((
__PLLMUL__
Ë& 
RCC_CFGR_PLLMULL
Ë>> 
RCC_CFGR_PLLMULL_Pos
) + 2U)) :\

569 (((
__INPUTFREQ__
Ë* 13UË/ 2U))

	)

594 
	#__LL_RCC_CALC_PLLCLK_FREQ
(
__INPUTFREQ__
, 
__PLLMUL__
Ë((__INPUTFREQ__Ë* (((__PLLMUL__Ë>> 
RCC_CFGR_PLLMULL_Pos
Ë+ 2U))

	)

597 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

631 
	#__LL_RCC_CALC_PLLI2SCLK_FREQ
(
__INPUTFREQ__
, 
__PLLI2SMUL__
, 
__PLLI2SDIV__
Ë(((__INPUTFREQ__Ë* (((__PLLI2SMUL__Ë>> 
RCC_CFGR2_PLL3MUL_Pos
Ë+ 2U)Ë/ (((__PLLI2SDIV__Ë>> 
RCC_CFGR2_PREDIV2_Pos
Ë+ 1U))

	)

634 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

668 
	#__LL_RCC_CALC_PLL2CLK_FREQ
(
__INPUTFREQ__
, 
__PLL2MUL__
, 
__PLL2DIV__
Ë(((__INPUTFREQ__Ë* (((__PLL2MUL__Ë>> 
RCC_CFGR2_PLL2MUL_Pos
Ë+ 2U)Ë/ (((__PLL2DIV__Ë>> 
RCC_CFGR2_PREDIV2_Pos
Ë+ 1U))

	)

688 
	#__LL_RCC_CALC_HCLK_FREQ
(
__SYSCLKFREQ__
, 
__AHBPRESCALER__
Ë((__SYSCLKFREQ__Ë>> 
AHBPªscTabÀ
[((__AHBPRESCALER__Ë& 
RCC_CFGR_HPRE
Ë>> 
RCC_CFGR_HPRE_Pos
])

	)

703 
	#__LL_RCC_CALC_PCLK1_FREQ
(
__HCLKFREQ__
, 
__APB1PRESCALER__
Ë((__HCLKFREQ__Ë>> 
APBPªscTabÀ
[(__APB1PRESCALER__Ë>> 
RCC_CFGR_PPRE1_Pos
])

	)

718 
	#__LL_RCC_CALC_PCLK2_FREQ
(
__HCLKFREQ__
, 
__APB2PRESCALER__
Ë((__HCLKFREQ__Ë>> 
APBPªscTabÀ
[(__APB2PRESCALER__Ë>> 
RCC_CFGR_PPRE2_Pos
])

	)

742 
__STATIC_INLINE
 
LL_RCC_HSE_E«bÀCSS
()

744 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_CSSON
);

752 
__STATIC_INLINE
 
LL_RCC_HSE_E«bÀBy∑ss
()

754 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

762 
__STATIC_INLINE
 
LL_RCC_HSE_DißbÀBy∑ss
()

764 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

772 
__STATIC_INLINE
 
LL_RCC_HSE_E«bÀ
()

774 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
);

782 
__STATIC_INLINE
 
LL_RCC_HSE_DißbÀ
()

784 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
);

792 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_HSE_IsRódy
()

794  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSERDY
) == (RCC_CR_HSERDY));

797 #i‡
deföed
(
RCC_CFGR2_PREDIV2
)

819 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_HSE_GëPªdiv2
()

821  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
));

838 
__STATIC_INLINE
 
LL_RCC_HSI_E«bÀ
()

840 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

848 
__STATIC_INLINE
 
LL_RCC_HSI_DißbÀ
()

850 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

858 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_HSI_IsRódy
()

860  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSIRDY
) == (RCC_CR_HSIRDY));

870 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_HSI_GëCÆibøti⁄
()

872  (
uöt32_t
)(
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSICAL
Ë>> 
RCC_CR_HSICAL_Pos
);

884 
__STATIC_INLINE
 
LL_RCC_HSI_SëCÆibTrimmög
(
uöt32_t
 
VÆue
)

886 
MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, 
VÆue
 << 
RCC_CR_HSITRIM_Pos
);

894 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_HSI_GëCÆibTrimmög
()

896  (
uöt32_t
)(
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSITRIM
Ë>> 
RCC_CR_HSITRIM_Pos
);

912 
__STATIC_INLINE
 
LL_RCC_LSE_E«bÀ
()

914 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
);

922 
__STATIC_INLINE
 
LL_RCC_LSE_DißbÀ
()

924 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
);

932 
__STATIC_INLINE
 
LL_RCC_LSE_E«bÀBy∑ss
()

934 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
);

942 
__STATIC_INLINE
 
LL_RCC_LSE_DißbÀBy∑ss
()

944 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
);

952 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_LSE_IsRódy
()

954  (
READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSERDY
) == (RCC_BDCR_LSERDY));

970 
__STATIC_INLINE
 
LL_RCC_LSI_E«bÀ
()

972 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSION
);

980 
__STATIC_INLINE
 
LL_RCC_LSI_DißbÀ
()

982 
CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSION
);

990 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_LSI_IsRódy
()

992  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSIRDY
) == (RCC_CSR_LSIRDY));

1012 
__STATIC_INLINE
 
LL_RCC_SëSysClkSour˚
(
uöt32_t
 
Sour˚
)

1014 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, 
Sour˚
);

1025 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëSysClkSour˚
()

1027  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SWS
));

1045 
__STATIC_INLINE
 
LL_RCC_SëAHBPªsˇÀr
(
uöt32_t
 
PªsˇÀr
)

1047 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
PªsˇÀr
);

1061 
__STATIC_INLINE
 
LL_RCC_SëAPB1PªsˇÀr
(
uöt32_t
 
PªsˇÀr
)

1063 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
PªsˇÀr
);

1077 
__STATIC_INLINE
 
LL_RCC_SëAPB2PªsˇÀr
(
uöt32_t
 
PªsˇÀr
)

1079 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, 
PªsˇÀr
);

1096 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëAHBPªsˇÀr
()

1098  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
));

1111 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëAPB1PªsˇÀr
()

1113  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
));

1126 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëAPB2PªsˇÀr
()

1128  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
));

1156 
__STATIC_INLINE
 
LL_RCC_C⁄figMCO
(
uöt32_t
 
MCOxSour˚
)

1158 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_MCOSEL
, 
MCOxSour˚
);

1169 #i‡
deföed
(
RCC_CFGR2_I2S2SRC
)

1181 
__STATIC_INLINE
 
LL_RCC_SëI2SClockSour˚
(
uöt32_t
 
I2SxSour˚
)

1183 
MODIFY_REG
(
RCC
->
CFGR2
, (
I2SxSour˚
 & 0xFFFF0000U), (I2SxSource << 16U));

1187 #i‡
deföed
(
USB_OTG_FS
Ë|| deföed(
USB
)

1201 
__STATIC_INLINE
 
LL_RCC_SëUSBClockSour˚
(
uöt32_t
 
USBxSour˚
)

1203 #i‡
deföed
(
RCC_CFGR_USBPRE
)

1204 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
, 
USBxSour˚
);

1206 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
, 
USBxSour˚
);

1221 
__STATIC_INLINE
 
LL_RCC_SëADCClockSour˚
(
uöt32_t
 
ADCxSour˚
)

1223 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
, 
ADCxSour˚
);

1226 #i‡
deföed
(
RCC_CFGR2_I2S2SRC
)

1240 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëI2SClockSour˚
(uöt32_à
I2Sx
)

1242  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
I2Sx
) >> 16U | I2Sx);

1246 #i‡
deföed
(
USB_OTG_FS
Ë|| deföed(
USB
)

1261 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëUSBClockSour˚
(uöt32_à
USBx
)

1263  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
USBx
));

1278 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëADCClockSour˚
(uöt32_à
ADCx
)

1280  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
ADCx
));

1303 
__STATIC_INLINE
 
LL_RCC_SëRTCClockSour˚
(
uöt32_t
 
Sour˚
)

1305 
MODIFY_REG
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
, 
Sour˚
);

1317 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_GëRTCClockSour˚
()

1319  (
uöt32_t
)(
READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
));

1327 
__STATIC_INLINE
 
LL_RCC_E«bÀRTC
()

1329 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCEN
);

1337 
__STATIC_INLINE
 
LL_RCC_DißbÀRTC
()

1339 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCEN
);

1347 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdRTC
()

1349  (
READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCEN
) == (RCC_BDCR_RTCEN));

1357 
__STATIC_INLINE
 
LL_RCC_F‹˚BackupDomaöRe£t
()

1359 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_BDRST
);

1367 
__STATIC_INLINE
 
LL_RCC_Rñó£BackupDomaöRe£t
()

1369 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_BDRST
);

1385 
__STATIC_INLINE
 
LL_RCC_PLL_E«bÀ
()

1387 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

1396 
__STATIC_INLINE
 
LL_RCC_PLL_DißbÀ
()

1398 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

1406 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLL_IsRódy
()

1408  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLLRDY
) == (RCC_CR_PLLRDY));

1475 
__STATIC_INLINE
 
LL_RCC_PLL_C⁄figDomaö_SYS
(
uöt32_t
 
Sour˚
, uöt32_à
PLLMul
)

1477 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
,

1478 (
Sour˚
 & (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
)Ë| 
PLLMul
);

1479 #i‡
deföed
(
RCC_CFGR2_PREDIV1
)

1480 #i‡
deföed
(
RCC_CFGR2_PREDIV1SRC
)

1481 
MODIFY_REG
(
RCC
->
CFGR2
, (
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
),

1482 (
Sour˚
 & 
RCC_CFGR2_PREDIV1
Ë| ((Sour˚ & (
RCC_CFGR2_PREDIV1SRC
 << 4U)) >> 4U));

1484 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
, (
Sour˚
 & RCC_CFGR2_PREDIV1));

1499 
__STATIC_INLINE
 
LL_RCC_PLL_SëMaöSour˚
(
uöt32_t
 
PLLSour˚
)

1501 #i‡
deföed
(
RCC_CFGR2_PREDIV1SRC
)

1502 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
, ((
PLLSour˚
 & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));

1504 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
, 
PLLSour˚
);

1518 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLL_GëMaöSour˚
()

1520 #i‡
deföed
(
RCC_CFGR2_PREDIV1SRC
)

1521 
uöt32_t
 
∂l§c
 = 
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
);

1522 
uöt32_t
 
¥ediv§c
 = (uöt32_t)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
) << 4U);

1523  (
uöt32_t
)(
∂l§c
 | 
¥ediv§c
);

1525  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
));

1552 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLL_GëMu…ùliˇt‹
()

1554  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLMULL
));

1582 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLL_GëPªdiv
()

1584 #i‡
deföed
(
RCC_CFGR2_PREDIV1
)

1585  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
));

1587  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLXTPRE
Ë>> 
RCC_CFGR_PLLXTPRE_Pos
);

1595 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

1605 
__STATIC_INLINE
 
LL_RCC_PLLI2S_E«bÀ
()

1607 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

1615 
__STATIC_INLINE
 
LL_RCC_PLLI2S_DißbÀ
()

1617 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

1625 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLLI2S_IsRódy
()

1627  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3RDY
) == (RCC_CR_PLL3RDY));

1663 
__STATIC_INLINE
 
LL_RCC_PLL_C⁄figDomaö_PLLI2S
(
uöt32_t
 
Dividî
, uöt32_à
Mu…ùliˇt‹
)

1665 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL3MUL
, 
Dividî
 | 
Mu…ùliˇt‹
);

1682 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLLI2S_GëMu…ùliˇt‹
()

1684  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
));

1692 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

1702 
__STATIC_INLINE
 
LL_RCC_PLL2_E«bÀ
()

1704 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

1712 
__STATIC_INLINE
 
LL_RCC_PLL2_DißbÀ
()

1714 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

1722 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLL2_IsRódy
()

1724  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2RDY
) == (RCC_CR_PLL2RDY));

1760 
__STATIC_INLINE
 
LL_RCC_PLL_C⁄figDomaö_PLL2
(
uöt32_t
 
Dividî
, uöt32_à
Mu…ùliˇt‹
)

1762 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
, 
Dividî
 | 
Mu…ùliˇt‹
);

1779 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_PLL2_GëMu…ùliˇt‹
()

1781  (
uöt32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL2MUL
));

1798 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_LSIRDY
()

1800 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYC
);

1808 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_LSERDY
()

1810 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYC
);

1818 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_HSIRDY
()

1820 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYC
);

1828 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_HSERDY
()

1830 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYC
);

1838 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_PLLRDY
()

1840 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYC
);

1843 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

1849 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_PLLI2SRDY
()

1851 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYC
);

1855 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

1861 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_PLL2RDY
()

1863 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYC
);

1872 
__STATIC_INLINE
 
LL_RCC_CÀ¨Fœg_HSECSS
()

1874 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_CSSC
);

1882 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_LSIRDY
()

1884  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYF
) == (RCC_CIR_LSIRDYF));

1892 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_LSERDY
()

1894  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYF
) == (RCC_CIR_LSERDYF));

1902 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_HSIRDY
()

1904  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYF
) == (RCC_CIR_HSIRDYF));

1912 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_HSERDY
()

1914  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYF
) == (RCC_CIR_HSERDYF));

1922 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_PLLRDY
()

1924  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYF
) == (RCC_CIR_PLLRDYF));

1927 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

1933 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_PLLI2SRDY
()

1935  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYF
) == (RCC_CIR_PLL3RDYF));

1939 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

1945 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_PLL2RDY
()

1947  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYF
) == (RCC_CIR_PLL2RDYF));

1956 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_HSECSS
()

1958  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_CSSF
) == (RCC_CIR_CSSF));

1966 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_IWDGRST
()

1968  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_IWDGRSTF
) == (RCC_CSR_IWDGRSTF));

1976 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_LPWRRST
()

1978  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_LPWRRSTF
) == (RCC_CSR_LPWRRSTF));

1986 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_PINRST
()

1988  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_PINRSTF
) == (RCC_CSR_PINRSTF));

1996 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_PORRST
()

1998  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_PORRSTF
) == (RCC_CSR_PORRSTF));

2006 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_SFTRST
()

2008  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_SFTRSTF
) == (RCC_CSR_SFTRSTF));

2016 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsA˘iveFœg_WWDGRST
()

2018  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_WWDGRSTF
) == (RCC_CSR_WWDGRSTF));

2026 
__STATIC_INLINE
 
LL_RCC_CÀ¨Re£tFœgs
()

2028 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RMVF
);

2044 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_LSIRDY
()

2046 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYIE
);

2054 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_LSERDY
()

2056 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYIE
);

2064 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_HSIRDY
()

2066 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYIE
);

2074 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_HSERDY
()

2076 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYIE
);

2084 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_PLLRDY
()

2086 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYIE
);

2089 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

2095 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_PLLI2SRDY
()

2097 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYIE
);

2101 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

2107 
__STATIC_INLINE
 
LL_RCC_E«bÀIT_PLL2RDY
()

2109 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYIE
);

2118 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_LSIRDY
()

2120 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYIE
);

2128 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_LSERDY
()

2130 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYIE
);

2138 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_HSIRDY
()

2140 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYIE
);

2148 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_HSERDY
()

2150 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYIE
);

2158 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_PLLRDY
()

2160 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYIE
);

2163 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

2169 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_PLLI2SRDY
()

2171 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYIE
);

2175 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

2181 
__STATIC_INLINE
 
LL_RCC_DißbÀIT_PLL2RDY
()

2183 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYIE
);

2192 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_LSIRDY
()

2194  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYIE
) == (RCC_CIR_LSIRDYIE));

2202 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_LSERDY
()

2204  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYIE
) == (RCC_CIR_LSERDYIE));

2212 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_HSIRDY
()

2214  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYIE
) == (RCC_CIR_HSIRDYIE));

2222 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_HSERDY
()

2224  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYIE
) == (RCC_CIR_HSERDYIE));

2232 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_PLLRDY
()

2234  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYIE
) == (RCC_CIR_PLLRDYIE));

2237 #i‡
deföed
(
RCC_PLLI2S_SUPPORT
)

2243 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_PLLI2SRDY
()

2245  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYIE
) == (RCC_CIR_PLL3RDYIE));

2249 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

2255 
__STATIC_INLINE
 
uöt32_t
 
LL_RCC_IsE«bÀdIT_PLL2RDY
()

2257  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYIE
) == (RCC_CIR_PLL2RDYIE));

2265 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

2269 
Eº‹Sètus
 
LL_RCC_DeInô
();

2277 
LL_RCC_GëSy°emClocksFªq
(
LL_RCC_ClocksTy≥Def
 *
RCC_Clocks
);

2278 #i‡
deföed
(
RCC_CFGR2_I2S2SRC
)

2279 
uöt32_t
 
LL_RCC_GëI2SClockFªq
(uöt32_à
I2SxSour˚
);

2281 #i‡
deföed
(
USB_OTG_FS
Ë|| deföed(
USB
)

2282 
uöt32_t
 
LL_RCC_GëUSBClockFªq
(uöt32_à
USBxSour˚
);

2284 
uöt32_t
 
LL_RCC_GëADCClockFªq
(uöt32_à
ADCxSour˚
);

2304 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_spi.h

20 #i‚de‡
STM32F1xx_LL_SPI_H


21 
	#STM32F1xx_LL_SPI_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
 (
SPI1
Ë|| deföed (
SPI2
Ë|| deföed (
SPI3
)

45 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

55 
uöt32_t
 
Tøns„rDúe˘i⁄
;

61 
uöt32_t
 
Mode
;

67 
uöt32_t
 
D©aWidth
;

73 
uöt32_t
 
ClockPﬁ¨ôy
;

79 
uöt32_t
 
ClockPha£
;

85 
uöt32_t
 
NSS
;

92 
uöt32_t
 
BaudR©e
;

101 
uöt32_t
 
BôOrdî
;

107 
uöt32_t
 
CRCCÆcuœti⁄
;

113 
uöt32_t
 
CRCPﬁy
;

119 } 
	tLL_SPI_InôTy≥Def
;

135 
	#LL_SPI_SR_RXNE
 
SPI_SR_RXNE


	)

136 
	#LL_SPI_SR_TXE
 
SPI_SR_TXE


	)

137 
	#LL_SPI_SR_BSY
 
SPI_SR_BSY


	)

138 
	#LL_SPI_SR_CRCERR
 
SPI_SR_CRCERR


	)

139 
	#LL_SPI_SR_MODF
 
SPI_SR_MODF


	)

140 
	#LL_SPI_SR_OVR
 
SPI_SR_OVR


	)

141 
	#LL_SPI_SR_FRE
 
SPI_SR_FRE


	)

150 
	#LL_SPI_CR2_RXNEIE
 
SPI_CR2_RXNEIE


	)

151 
	#LL_SPI_CR2_TXEIE
 
SPI_CR2_TXEIE


	)

152 
	#LL_SPI_CR2_ERRIE
 
SPI_CR2_ERRIE


	)

160 
	#LL_SPI_MODE_MASTER
 (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
Ë

	)

161 
	#LL_SPI_MODE_SLAVE
 0x00000000U

	)

170 
	#LL_SPI_PHASE_1EDGE
 0x00000000U

	)

171 
	#LL_SPI_PHASE_2EDGE
 (
SPI_CR1_CPHA
Ë

	)

179 
	#LL_SPI_POLARITY_LOW
 0x00000000U

	)

180 
	#LL_SPI_POLARITY_HIGH
 (
SPI_CR1_CPOL
Ë

	)

188 
	#LL_SPI_BAUDRATEPRESCALER_DIV2
 0x00000000U

	)

189 
	#LL_SPI_BAUDRATEPRESCALER_DIV4
 (
SPI_CR1_BR_0
Ë

	)

190 
	#LL_SPI_BAUDRATEPRESCALER_DIV8
 (
SPI_CR1_BR_1
Ë

	)

191 
	#LL_SPI_BAUDRATEPRESCALER_DIV16
 (
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
Ë

	)

192 
	#LL_SPI_BAUDRATEPRESCALER_DIV32
 (
SPI_CR1_BR_2
Ë

	)

193 
	#LL_SPI_BAUDRATEPRESCALER_DIV64
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_0
Ë

	)

194 
	#LL_SPI_BAUDRATEPRESCALER_DIV128
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
Ë

	)

195 
	#LL_SPI_BAUDRATEPRESCALER_DIV256
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
Ë

	)

203 
	#LL_SPI_LSB_FIRST
 (
SPI_CR1_LSBFIRST
Ë

	)

204 
	#LL_SPI_MSB_FIRST
 0x00000000U

	)

212 
	#LL_SPI_FULL_DUPLEX
 0x00000000U

	)

213 
	#LL_SPI_SIMPLEX_RX
 (
SPI_CR1_RXONLY
Ë

	)

214 
	#LL_SPI_HALF_DUPLEX_RX
 (
SPI_CR1_BIDIMODE
Ë

	)

215 
	#LL_SPI_HALF_DUPLEX_TX
 (
SPI_CR1_BIDIMODE
 | 
SPI_CR1_BIDIOE
Ë

	)

223 
	#LL_SPI_NSS_SOFT
 (
SPI_CR1_SSM
Ë

	)

224 
	#LL_SPI_NSS_HARD_INPUT
 0x00000000U

	)

225 
	#LL_SPI_NSS_HARD_OUTPUT
 (((
uöt32_t
)
SPI_CR2_SSOE
 << 16U)Ë

	)

233 
	#LL_SPI_DATAWIDTH_8BIT
 0x00000000U

	)

234 
	#LL_SPI_DATAWIDTH_16BIT
 (
SPI_CR1_DFF
Ë

	)

238 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

243 
	#LL_SPI_CRCCALCULATION_DISABLE
 0x00000000U

	)

244 
	#LL_SPI_CRCCALCULATION_ENABLE
 (
SPI_CR1_CRCEN
Ë

	)

270 
	#LL_SPI_WrôeReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

278 
	#LL_SPI_RódReg
(
__INSTANCE__
, 
__REG__
Ë
	`READ_REG
(__INSTANCE__->__REG__)

	)

302 
__STATIC_INLINE
 
LL_SPI_E«bÀ
(
SPI_Ty≥Def
 *
SPIx
)

304 
SET_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
);

314 
__STATIC_INLINE
 
LL_SPI_DißbÀ
(
SPI_Ty≥Def
 *
SPIx
)

316 
CLEAR_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
);

325 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀd
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

327  ((
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
) == (SPI_CR1_SPE)) ? 1UL : 0UL);

341 
__STATIC_INLINE
 
LL_SPI_SëMode
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
Mode
)

343 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
, 
Mode
);

355 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëMode
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

357  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
));

372 
__STATIC_INLINE
 
LL_SPI_SëClockPha£
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
ClockPha£
)

374 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_CPHA
, 
ClockPha£
);

385 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëClockPha£
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

387  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CPHA
));

401 
__STATIC_INLINE
 
LL_SPI_SëClockPﬁ¨ôy
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
ClockPﬁ¨ôy
)

403 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_CPOL
, 
ClockPﬁ¨ôy
);

414 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëClockPﬁ¨ôy
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

416  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CPOL
));

435 
__STATIC_INLINE
 
LL_SPI_SëBaudR©ePªsˇÀr
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
BaudR©e
)

437 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_BR
, 
BaudR©e
);

454 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëBaudR©ePªsˇÀr
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

456  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_BR
));

469 
__STATIC_INLINE
 
LL_SPI_SëTøns„rBôOrdî
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
BôOrdî
)

471 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_LSBFIRST
, 
BôOrdî
);

482 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëTøns„rBôOrdî
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

484  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_LSBFIRST
));

502 
__STATIC_INLINE
 
LL_SPI_SëTøns„rDúe˘i⁄
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
Tøns„rDúe˘i⁄
)

504 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_RXONLY
 | 
SPI_CR1_BIDIMODE
 | 
SPI_CR1_BIDIOE
, 
Tøns„rDúe˘i⁄
);

519 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëTøns„rDúe˘i⁄
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

521  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_RXONLY
 | 
SPI_CR1_BIDIMODE
 | 
SPI_CR1_BIDIOE
));

533 
__STATIC_INLINE
 
LL_SPI_SëD©aWidth
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
D©aWidth
)

535 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_DFF
, 
D©aWidth
);

546 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëD©aWidth
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

548  (
uöt32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_DFF
));

566 
__STATIC_INLINE
 
LL_SPI_E«bÀCRC
(
SPI_Ty≥Def
 *
SPIx
)

568 
SET_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCEN
);

578 
__STATIC_INLINE
 
LL_SPI_DißbÀCRC
(
SPI_Ty≥Def
 *
SPIx
)

580 
CLEAR_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCEN
);

590 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀdCRC
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

592  ((
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCEN
) == (SPI_CR1_CRCEN)) ? 1UL : 0UL);

602 
__STATIC_INLINE
 
LL_SPI_SëCRCNext
(
SPI_Ty≥Def
 *
SPIx
)

604 
SET_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCNEXT
);

614 
__STATIC_INLINE
 
LL_SPI_SëCRCPﬁynomül
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
CRCPﬁy
)

616 
WRITE_REG
(
SPIx
->
CRCPR
, (
uöt16_t
)
CRCPﬁy
);

625 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëCRCPﬁynomül
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

627  (
uöt32_t
)(
READ_REG
(
SPIx
->
CRCPR
));

636 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëRxCRC
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

638  (
uöt32_t
)(
READ_REG
(
SPIx
->
RXCRCR
));

647 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëTxCRC
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

649  (
uöt32_t
)(
READ_REG
(
SPIx
->
TXCRCR
));

672 
__STATIC_INLINE
 
LL_SPI_SëNSSMode
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
NSS
)

674 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_SSM
, 
NSS
);

675 
MODIFY_REG
(
SPIx
->
CR2
, 
SPI_CR2_SSOE
, ((
uöt32_t
)(
NSS
 >> 16U)));

688 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_GëNSSMode
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

690 
uöt32_t
 
Ssm
 = (
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SSM
));

691 
uöt32_t
 
Ss€
 = (
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_SSOE
) << 16U);

692  (
Ssm
 | 
Ss€
);

709 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsA˘iveFœg_RXNE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

711  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_RXNE
) == (SPI_SR_RXNE)) ? 1UL : 0UL);

720 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsA˘iveFœg_TXE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

722  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_TXE
) == (SPI_SR_TXE)) ? 1UL : 0UL);

731 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsA˘iveFœg_CRCERR
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

733  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_CRCERR
) == (SPI_SR_CRCERR)) ? 1UL : 0UL);

742 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsA˘iveFœg_MODF
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

744  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_MODF
) == (SPI_SR_MODF)) ? 1UL : 0UL);

753 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsA˘iveFœg_OVR
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

755  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_OVR
) == (SPI_SR_OVR)) ? 1UL : 0UL);

771 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsA˘iveFœg_BSY
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

773  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_BSY
) == (SPI_SR_BSY)) ? 1UL : 0UL);

783 
__STATIC_INLINE
 
LL_SPI_CÀ¨Fœg_CRCERR
(
SPI_Ty≥Def
 *
SPIx
)

785 
CLEAR_BIT
(
SPIx
->
SR
, 
SPI_SR_CRCERR
);

796 
__STATIC_INLINE
 
LL_SPI_CÀ¨Fœg_MODF
(
SPI_Ty≥Def
 *
SPIx
)

798 
__IO
 
uöt32_t
 
tm¥eg_§
;

799 
tm¥eg_§
 = 
SPIx
->
SR
;

800 (Ë
tm¥eg_§
;

801 
CLEAR_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
);

812 
__STATIC_INLINE
 
LL_SPI_CÀ¨Fœg_OVR
(
SPI_Ty≥Def
 *
SPIx
)

814 
__IO
 
uöt32_t
 
tm¥eg
;

815 
tm¥eg
 = 
SPIx
->
DR
;

816 (Ë
tm¥eg
;

817 
tm¥eg
 = 
SPIx
->
SR
;

818 (Ë
tm¥eg
;

828 
__STATIC_INLINE
 
LL_SPI_CÀ¨Fœg_FRE
(
SPI_Ty≥Def
 *
SPIx
)

830 
__IO
 
uöt32_t
 
tm¥eg
;

831 
tm¥eg
 = 
SPIx
->
SR
;

832 (Ë
tm¥eg
;

851 
__STATIC_INLINE
 
LL_SPI_E«bÀIT_ERR
(
SPI_Ty≥Def
 *
SPIx
)

853 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_ERRIE
);

862 
__STATIC_INLINE
 
LL_SPI_E«bÀIT_RXNE
(
SPI_Ty≥Def
 *
SPIx
)

864 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXNEIE
);

873 
__STATIC_INLINE
 
LL_SPI_E«bÀIT_TXE
(
SPI_Ty≥Def
 *
SPIx
)

875 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXEIE
);

886 
__STATIC_INLINE
 
LL_SPI_DißbÀIT_ERR
(
SPI_Ty≥Def
 *
SPIx
)

888 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_ERRIE
);

897 
__STATIC_INLINE
 
LL_SPI_DißbÀIT_RXNE
(
SPI_Ty≥Def
 *
SPIx
)

899 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXNEIE
);

908 
__STATIC_INLINE
 
LL_SPI_DißbÀIT_TXE
(
SPI_Ty≥Def
 *
SPIx
)

910 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXEIE
);

919 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀdIT_ERR
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

921  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_ERRIE
) == (SPI_CR2_ERRIE)) ? 1UL : 0UL);

930 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀdIT_RXNE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

932  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXNEIE
) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);

941 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀdIT_TXE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

943  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXEIE
) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);

960 
__STATIC_INLINE
 
LL_SPI_E«bÀDMAReq_RX
(
SPI_Ty≥Def
 *
SPIx
)

962 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXDMAEN
);

971 
__STATIC_INLINE
 
LL_SPI_DißbÀDMAReq_RX
(
SPI_Ty≥Def
 *
SPIx
)

973 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXDMAEN
);

982 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀdDMAReq_RX
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

984  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXDMAEN
) == (SPI_CR2_RXDMAEN)) ? 1UL : 0UL);

993 
__STATIC_INLINE
 
LL_SPI_E«bÀDMAReq_TX
(
SPI_Ty≥Def
 *
SPIx
)

995 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXDMAEN
);

1004 
__STATIC_INLINE
 
LL_SPI_DißbÀDMAReq_TX
(
SPI_Ty≥Def
 *
SPIx
)

1006 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXDMAEN
);

1015 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_IsE«bÀdDMAReq_TX
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1017  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXDMAEN
) == (SPI_CR2_TXDMAEN)) ? 1UL : 0UL);

1026 
__STATIC_INLINE
 
uöt32_t
 
LL_SPI_DMA_GëRegAddr
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1028  (
uöt32_t
Ë&(
SPIx
->
DR
);

1045 
__STATIC_INLINE
 
uöt8_t
 
LL_SPI_Re˚iveD©a8
(
SPI_Ty≥Def
 *
SPIx
)

1047  (*((
__IO
 
uöt8_t
 *)&
SPIx
->
DR
));

1056 
__STATIC_INLINE
 
uöt16_t
 
LL_SPI_Re˚iveD©a16
(
SPI_Ty≥Def
 *
SPIx
)

1058  (
uöt16_t
)(
READ_REG
(
SPIx
->
DR
));

1068 
__STATIC_INLINE
 
LL_SPI_TønsmôD©a8
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 
TxD©a
)

1070 #i‡
deföed
 (
__GNUC__
)

1071 
__IO
 
uöt8_t
 *
•idr
 = ((__IO uöt8_à*)&
SPIx
->
DR
);

1072 *
•idr
 = 
TxD©a
;

1074 *((
__IO
 
uöt8_t
 *)&
SPIx
->
DR
Ë
TxD©a
;

1085 
__STATIC_INLINE
 
LL_SPI_TønsmôD©a16
(
SPI_Ty≥Def
 *
SPIx
, 
uöt16_t
 
TxD©a
)

1087 #i‡
deföed
 (
__GNUC__
)

1088 
__IO
 
uöt16_t
 *
•idr
 = ((__IO uöt16_à*)&
SPIx
->
DR
);

1089 *
•idr
 = 
TxD©a
;

1091 
SPIx
->
DR
 = 
TxD©a
;

1098 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

1103 
Eº‹Sètus
 
LL_SPI_DeInô
(c⁄° 
SPI_Ty≥Def
 *
SPIx
);

1104 
Eº‹Sètus
 
LL_SPI_Inô
(
SPI_Ty≥Def
 *
SPIx
, 
LL_SPI_InôTy≥Def
 *
SPI_InôSåu˘
);

1105 
LL_SPI_Såu˘Inô
(
LL_SPI_InôTy≥Def
 *
SPI_InôSåu˘
);

1119 #i‡
deföed
(
SPI_I2S_SUPPORT
)

1129 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

1140 
uöt32_t
 
Mode
;

1145 
uöt32_t
 
Sènd¨d
;

1151 
uöt32_t
 
D©aF‹m©
;

1157 
uöt32_t
 
MCLKOuçut
;

1163 
uöt32_t
 
AudioFªq
;

1170 
uöt32_t
 
ClockPﬁ¨ôy
;

1175 } 
	tLL_I2S_InôTy≥Def
;

1191 
	#LL_I2S_SR_RXNE
 
LL_SPI_SR_RXNE


	)

1192 
	#LL_I2S_SR_TXE
 
LL_SPI_SR_TXE


	)

1193 
	#LL_I2S_SR_BSY
 
LL_SPI_SR_BSY


	)

1194 
	#LL_I2S_SR_UDR
 
SPI_SR_UDR


	)

1195 
	#LL_I2S_SR_OVR
 
LL_SPI_SR_OVR


	)

1196 
	#LL_I2S_SR_FRE
 
LL_SPI_SR_FRE


	)

1205 
	#LL_I2S_CR2_RXNEIE
 
LL_SPI_CR2_RXNEIE


	)

1206 
	#LL_I2S_CR2_TXEIE
 
LL_SPI_CR2_TXEIE


	)

1207 
	#LL_I2S_CR2_ERRIE
 
LL_SPI_CR2_ERRIE


	)

1215 
	#LL_I2S_DATAFORMAT_16B
 0x00000000U

	)

1216 
	#LL_I2S_DATAFORMAT_16B_EXTENDED
 (
SPI_I2SCFGR_CHLEN
Ë

	)

1217 
	#LL_I2S_DATAFORMAT_24B
 (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_0
Ë

	)

1218 
	#LL_I2S_DATAFORMAT_32B
 (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_1
Ë

	)

1226 
	#LL_I2S_POLARITY_LOW
 0x00000000U

	)

1227 
	#LL_I2S_POLARITY_HIGH
 (
SPI_I2SCFGR_CKPOL
Ë

	)

1235 
	#LL_I2S_STANDARD_PHILIPS
 0x00000000U

	)

1236 
	#LL_I2S_STANDARD_MSB
 (
SPI_I2SCFGR_I2SSTD_0
Ë

	)

1237 
	#LL_I2S_STANDARD_LSB
 (
SPI_I2SCFGR_I2SSTD_1
Ë

	)

1238 
	#LL_I2S_STANDARD_PCM_SHORT
 (
SPI_I2SCFGR_I2SSTD_0
 | 
SPI_I2SCFGR_I2SSTD_1
Ë

	)

1239 
	#LL_I2S_STANDARD_PCM_LONG
 (
SPI_I2SCFGR_I2SSTD_0
 | 
SPI_I2SCFGR_I2SSTD_1
 | 
SPI_I2SCFGR_PCMSYNC
Ë

	)

1247 
	#LL_I2S_MODE_SLAVE_TX
 0x00000000U

	)

1248 
	#LL_I2S_MODE_SLAVE_RX
 (
SPI_I2SCFGR_I2SCFG_0
Ë

	)

1249 
	#LL_I2S_MODE_MASTER_TX
 (
SPI_I2SCFGR_I2SCFG_1
Ë

	)

1250 
	#LL_I2S_MODE_MASTER_RX
 (
SPI_I2SCFGR_I2SCFG_0
 | 
SPI_I2SCFGR_I2SCFG_1
Ë

	)

1258 
	#LL_I2S_PRESCALER_PARITY_EVEN
 0x00000000U

	)

1259 
	#LL_I2S_PRESCALER_PARITY_ODD
 (
SPI_I2SPR_ODD
 >> 8UË

	)

1264 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

1269 
	#LL_I2S_MCLK_OUTPUT_DISABLE
 0x00000000U

	)

1270 
	#LL_I2S_MCLK_OUTPUT_ENABLE
 (
SPI_I2SPR_MCKOE
Ë

	)

1279 
	#LL_I2S_AUDIOFREQ_192K
 192000U

	)

1280 
	#LL_I2S_AUDIOFREQ_96K
 96000U

	)

1281 
	#LL_I2S_AUDIOFREQ_48K
 48000U

	)

1282 
	#LL_I2S_AUDIOFREQ_44K
 44100U

	)

1283 
	#LL_I2S_AUDIOFREQ_32K
 32000U

	)

1284 
	#LL_I2S_AUDIOFREQ_22K
 22050U

	)

1285 
	#LL_I2S_AUDIOFREQ_16K
 16000U

	)

1286 
	#LL_I2S_AUDIOFREQ_11K
 11025U

	)

1287 
	#LL_I2S_AUDIOFREQ_8K
 8000U

	)

1288 
	#LL_I2S_AUDIOFREQ_DEFAULT
 2U

	)

1314 
	#LL_I2S_WrôeReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

1322 
	#LL_I2S_RódReg
(
__INSTANCE__
, 
__REG__
Ë
	`READ_REG
(__INSTANCE__->__REG__)

	)

1349 
__STATIC_INLINE
 
LL_I2S_E«bÀ
(
SPI_Ty≥Def
 *
SPIx
)

1351 
SET_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
 | 
SPI_I2SCFGR_I2SE
);

1360 
__STATIC_INLINE
 
LL_I2S_DißbÀ
(
SPI_Ty≥Def
 *
SPIx
)

1362 
CLEAR_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
 | 
SPI_I2SCFGR_I2SE
);

1371 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀd
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1373  ((
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
) == (SPI_I2SCFGR_I2SE)) ? 1UL : 0UL);

1388 
__STATIC_INLINE
 
LL_I2S_SëD©aF‹m©
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
D©aF‹m©
)

1390 
MODIFY_REG
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
, 
D©aF‹m©
);

1404 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_GëD©aF‹m©
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1406  (
uöt32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
));

1418 
__STATIC_INLINE
 
LL_I2S_SëClockPﬁ¨ôy
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
ClockPﬁ¨ôy
)

1420 
SET_BIT
(
SPIx
->
I2SCFGR
, 
ClockPﬁ¨ôy
);

1431 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_GëClockPﬁ¨ôy
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1433  (
uöt32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_CKPOL
));

1449 
__STATIC_INLINE
 
LL_I2S_SëSènd¨d
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
Sènd¨d
)

1451 
MODIFY_REG
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
, 
Sènd¨d
);

1466 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_GëSènd¨d
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1468  (
uöt32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
));

1482 
__STATIC_INLINE
 
LL_I2S_SëTøns„rMode
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
Mode
)

1484 
MODIFY_REG
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SCFG
, 
Mode
);

1497 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_GëTøns„rMode
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1499  (
uöt32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SCFG
));

1509 
__STATIC_INLINE
 
LL_I2S_SëPªsˇÀrLöór
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 
PªsˇÀrLöór
)

1511 
MODIFY_REG
(
SPIx
->
I2SPR
, 
SPI_I2SPR_I2SDIV
, 
PªsˇÀrLöór
);

1520 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_GëPªsˇÀrLöór
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1522  (
uöt32_t
)(
READ_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_I2SDIV
));

1534 
__STATIC_INLINE
 
LL_I2S_SëPªsˇÀrP¨ôy
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
PªsˇÀrP¨ôy
)

1536 
MODIFY_REG
(
SPIx
->
I2SPR
, 
SPI_I2SPR_ODD
, 
PªsˇÀrP¨ôy
 << 8U);

1547 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_GëPªsˇÀrP¨ôy
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1549  (
uöt32_t
)(
READ_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_ODD
) >> 8U);

1558 
__STATIC_INLINE
 
LL_I2S_E«bÀMa°îClock
(
SPI_Ty≥Def
 *
SPIx
)

1560 
SET_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_MCKOE
);

1569 
__STATIC_INLINE
 
LL_I2S_DißbÀMa°îClock
(
SPI_Ty≥Def
 *
SPIx
)

1571 
CLEAR_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_MCKOE
);

1580 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀdMa°îClock
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1582  ((
READ_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_MCKOE
) == (SPI_I2SPR_MCKOE)) ? 1UL : 0UL);

1599 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsA˘iveFœg_RXNE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1601  
LL_SPI_IsA˘iveFœg_RXNE
(
SPIx
);

1610 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsA˘iveFœg_TXE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1612  
LL_SPI_IsA˘iveFœg_TXE
(
SPIx
);

1621 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsA˘iveFœg_BSY
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1623  
LL_SPI_IsA˘iveFœg_BSY
(
SPIx
);

1632 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsA˘iveFœg_OVR
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1634  
LL_SPI_IsA˘iveFœg_OVR
(
SPIx
);

1643 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsA˘iveFœg_UDR
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1645  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_UDR
) == (SPI_SR_UDR)) ? 1UL : 0UL);

1658 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsA˘iveFœg_CHSIDE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1660  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_CHSIDE
) == (SPI_SR_CHSIDE)) ? 1UL : 0UL);

1669 
__STATIC_INLINE
 
LL_I2S_CÀ¨Fœg_OVR
(
SPI_Ty≥Def
 *
SPIx
)

1671 
LL_SPI_CÀ¨Fœg_OVR
(
SPIx
);

1680 
__STATIC_INLINE
 
LL_I2S_CÀ¨Fœg_UDR
(
SPI_Ty≥Def
 *
SPIx
)

1682 
__IO
 
uöt32_t
 
tm¥eg
;

1683 
tm¥eg
 = 
SPIx
->
SR
;

1684 ()
tm¥eg
;

1693 
__STATIC_INLINE
 
LL_I2S_CÀ¨Fœg_FRE
(
SPI_Ty≥Def
 *
SPIx
)

1695 
LL_SPI_CÀ¨Fœg_FRE
(
SPIx
);

1713 
__STATIC_INLINE
 
LL_I2S_E«bÀIT_ERR
(
SPI_Ty≥Def
 *
SPIx
)

1715 
LL_SPI_E«bÀIT_ERR
(
SPIx
);

1724 
__STATIC_INLINE
 
LL_I2S_E«bÀIT_RXNE
(
SPI_Ty≥Def
 *
SPIx
)

1726 
LL_SPI_E«bÀIT_RXNE
(
SPIx
);

1735 
__STATIC_INLINE
 
LL_I2S_E«bÀIT_TXE
(
SPI_Ty≥Def
 *
SPIx
)

1737 
LL_SPI_E«bÀIT_TXE
(
SPIx
);

1747 
__STATIC_INLINE
 
LL_I2S_DißbÀIT_ERR
(
SPI_Ty≥Def
 *
SPIx
)

1749 
LL_SPI_DißbÀIT_ERR
(
SPIx
);

1758 
__STATIC_INLINE
 
LL_I2S_DißbÀIT_RXNE
(
SPI_Ty≥Def
 *
SPIx
)

1760 
LL_SPI_DißbÀIT_RXNE
(
SPIx
);

1769 
__STATIC_INLINE
 
LL_I2S_DißbÀIT_TXE
(
SPI_Ty≥Def
 *
SPIx
)

1771 
LL_SPI_DißbÀIT_TXE
(
SPIx
);

1780 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀdIT_ERR
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1782  
LL_SPI_IsE«bÀdIT_ERR
(
SPIx
);

1791 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀdIT_RXNE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1793  
LL_SPI_IsE«bÀdIT_RXNE
(
SPIx
);

1802 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀdIT_TXE
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1804  
LL_SPI_IsE«bÀdIT_TXE
(
SPIx
);

1821 
__STATIC_INLINE
 
LL_I2S_E«bÀDMAReq_RX
(
SPI_Ty≥Def
 *
SPIx
)

1823 
LL_SPI_E«bÀDMAReq_RX
(
SPIx
);

1832 
__STATIC_INLINE
 
LL_I2S_DißbÀDMAReq_RX
(
SPI_Ty≥Def
 *
SPIx
)

1834 
LL_SPI_DißbÀDMAReq_RX
(
SPIx
);

1843 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀdDMAReq_RX
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1845  
LL_SPI_IsE«bÀdDMAReq_RX
(
SPIx
);

1854 
__STATIC_INLINE
 
LL_I2S_E«bÀDMAReq_TX
(
SPI_Ty≥Def
 *
SPIx
)

1856 
LL_SPI_E«bÀDMAReq_TX
(
SPIx
);

1865 
__STATIC_INLINE
 
LL_I2S_DißbÀDMAReq_TX
(
SPI_Ty≥Def
 *
SPIx
)

1867 
LL_SPI_DißbÀDMAReq_TX
(
SPIx
);

1876 
__STATIC_INLINE
 
uöt32_t
 
LL_I2S_IsE«bÀdDMAReq_TX
(c⁄° 
SPI_Ty≥Def
 *
SPIx
)

1878  
LL_SPI_IsE«bÀdDMAReq_TX
(
SPIx
);

1895 
__STATIC_INLINE
 
uöt16_t
 
LL_I2S_Re˚iveD©a16
(
SPI_Ty≥Def
 *
SPIx
)

1897  
LL_SPI_Re˚iveD©a16
(
SPIx
);

1907 
__STATIC_INLINE
 
LL_I2S_TønsmôD©a16
(
SPI_Ty≥Def
 *
SPIx
, 
uöt16_t
 
TxD©a
)

1909 
LL_SPI_TønsmôD©a16
(
SPIx
, 
TxD©a
);

1916 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

1921 
Eº‹Sètus
 
LL_I2S_DeInô
(c⁄° 
SPI_Ty≥Def
 *
SPIx
);

1922 
Eº‹Sètus
 
LL_I2S_Inô
(
SPI_Ty≥Def
 *
SPIx
, 
LL_I2S_InôTy≥Def
 *
I2S_InôSåu˘
);

1923 
LL_I2S_Såu˘Inô
(
LL_I2S_InôTy≥Def
 *
I2S_InôSåu˘
);

1924 
LL_I2S_C⁄figPªsˇÀr
(
SPI_Ty≥Def
 *
SPIx
, 
uöt32_t
 
PªsˇÀrLöór
, uöt32_à
PªsˇÀrP¨ôy
);

1946 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h

34 #i‚de‡
__STM32F1xx_LL_SYSTEM_H


35 
	#__STM32F1xx_LL_SYSTEM_H


	)

37 #ifde‡
__˝lu•lus


42 
	~"°m32f1xx.h
"

48 #i‡
deföed
 (
FLASH
Ë|| deföed (
DBGMCU
)

79 
	#LL_DBGMCU_TRACE_NONE
 0x00000000U

	)

80 
	#LL_DBGMCU_TRACE_ASYNCH
 
DBGMCU_CR_TRACE_IOEN


	)

81 
	#LL_DBGMCU_TRACE_SYNCH_SIZE1
 (
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE_0
Ë

	)

82 
	#LL_DBGMCU_TRACE_SYNCH_SIZE2
 (
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE_1
Ë

	)

83 
	#LL_DBGMCU_TRACE_SYNCH_SIZE4
 (
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE
Ë

	)

91 
	#LL_DBGMCU_APB1_GRP1_TIM2_STOP
 
DBGMCU_CR_DBG_TIM2_STOP


	)

92 
	#LL_DBGMCU_APB1_GRP1_TIM3_STOP
 
DBGMCU_CR_DBG_TIM3_STOP


	)

93 
	#LL_DBGMCU_APB1_GRP1_TIM4_STOP
 
DBGMCU_CR_DBG_TIM4_STOP


	)

94 #i‡
deföed
(
DBGMCU_CR_DBG_TIM5_STOP
)

95 
	#LL_DBGMCU_APB1_GRP1_TIM5_STOP
 
DBGMCU_CR_DBG_TIM5_STOP


	)

97 #i‡
deföed
(
DBGMCU_CR_DBG_TIM6_STOP
)

98 
	#LL_DBGMCU_APB1_GRP1_TIM6_STOP
 
DBGMCU_CR_DBG_TIM6_STOP


	)

100 #i‡
deföed
(
DBGMCU_CR_DBG_TIM7_STOP
)

101 
	#LL_DBGMCU_APB1_GRP1_TIM7_STOP
 
DBGMCU_CR_DBG_TIM7_STOP


	)

103 #i‡
deföed
(
DBGMCU_CR_DBG_TIM12_STOP
)

104 
	#LL_DBGMCU_APB1_GRP1_TIM12_STOP
 
DBGMCU_CR_DBG_TIM12_STOP


	)

106 #i‡
deföed
(
DBGMCU_CR_DBG_TIM13_STOP
)

107 
	#LL_DBGMCU_APB1_GRP1_TIM13_STOP
 
DBGMCU_CR_DBG_TIM13_STOP


	)

109 #i‡
deföed
(
DBGMCU_CR_DBG_TIM14_STOP
)

110 
	#LL_DBGMCU_APB1_GRP1_TIM14_STOP
 
DBGMCU_CR_DBG_TIM14_STOP


	)

112 
	#LL_DBGMCU_APB1_GRP1_WWDG_STOP
 
DBGMCU_CR_DBG_WWDG_STOP


	)

113 
	#LL_DBGMCU_APB1_GRP1_IWDG_STOP
 
DBGMCU_CR_DBG_IWDG_STOP


	)

114 
	#LL_DBGMCU_APB1_GRP1_I2C1_STOP
 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT


	)

115 #i‡
deföed
(
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

116 
	#LL_DBGMCU_APB1_GRP1_I2C2_STOP
 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT


	)

118 #i‡
deföed
(
DBGMCU_CR_DBG_CAN1_STOP
)

119 
	#LL_DBGMCU_APB1_GRP1_CAN1_STOP
 
DBGMCU_CR_DBG_CAN1_STOP


	)

121 #i‡
deföed
(
DBGMCU_CR_DBG_CAN2_STOP
)

122 
	#LL_DBGMCU_APB1_GRP1_CAN2_STOP
 
DBGMCU_CR_DBG_CAN2_STOP


	)

131 
	#LL_DBGMCU_APB2_GRP1_TIM1_STOP
 
DBGMCU_CR_DBG_TIM1_STOP


	)

132 #i‡
deföed
(
DBGMCU_CR_DBG_TIM8_STOP
)

133 
	#LL_DBGMCU_APB2_GRP1_TIM8_STOP
 
DBGMCU_CR_DBG_TIM8_STOP


	)

135 #i‡
deföed
(
DBGMCU_CR_DBG_TIM9_STOP
)

136 
	#LL_DBGMCU_APB2_GRP1_TIM9_STOP
 
DBGMCU_CR_DBG_TIM9_STOP


	)

138 #i‡
deföed
(
DBGMCU_CR_DBG_TIM10_STOP
)

139 
	#LL_DBGMCU_APB2_GRP1_TIM10_STOP
 
DBGMCU_CR_DBG_TIM10_STOP


	)

141 #i‡
deföed
(
DBGMCU_CR_DBG_TIM11_STOP
)

142 
	#LL_DBGMCU_APB2_GRP1_TIM11_STOP
 
DBGMCU_CR_DBG_TIM11_STOP


	)

144 #i‡
deföed
(
DBGMCU_CR_DBG_TIM15_STOP
)

145 
	#LL_DBGMCU_APB2_GRP1_TIM15_STOP
 
DBGMCU_CR_DBG_TIM15_STOP


	)

147 #i‡
deföed
(
DBGMCU_CR_DBG_TIM16_STOP
)

148 
	#LL_DBGMCU_APB2_GRP1_TIM16_STOP
 
DBGMCU_CR_DBG_TIM16_STOP


	)

150 #i‡
deföed
(
DBGMCU_CR_DBG_TIM17_STOP
)

151 
	#LL_DBGMCU_APB2_GRP1_TIM17_STOP
 
DBGMCU_CR_DBG_TIM17_STOP


	)

160 #i‡
deföed
(
FLASH_ACR_LATENCY
)

161 
	#LL_FLASH_LATENCY_0
 0x00000000U

	)

162 
	#LL_FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_0


	)

163 
	#LL_FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_1


	)

197 
__STATIC_INLINE
 
uöt32_t
 
LL_DBGMCU_GëDevi˚ID
()

199  (
uöt32_t
)(
READ_BIT
(
DBGMCU
->
IDCODE
, 
DBGMCU_IDCODE_DEV_ID
));

213 
__STATIC_INLINE
 
uöt32_t
 
LL_DBGMCU_GëRevisi⁄ID
()

215  (
uöt32_t
)(
READ_BIT
(
DBGMCU
->
IDCODE
, 
DBGMCU_IDCODE_REV_ID
Ë>> 
DBGMCU_IDCODE_REV_ID_Pos
);

223 
__STATIC_INLINE
 
LL_DBGMCU_E«bÀDBGSÀïMode
()

225 
SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

233 
__STATIC_INLINE
 
LL_DBGMCU_DißbÀDBGSÀïMode
()

235 
CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

243 
__STATIC_INLINE
 
LL_DBGMCU_E«bÀDBGSt›Mode
()

245 
SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

253 
__STATIC_INLINE
 
LL_DBGMCU_DißbÀDBGSt›Mode
()

255 
CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

263 
__STATIC_INLINE
 
LL_DBGMCU_E«bÀDBGSèndbyMode
()

265 
SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

273 
__STATIC_INLINE
 
LL_DBGMCU_DißbÀDBGSèndbyMode
()

275 
CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

290 
__STATIC_INLINE
 
LL_DBGMCU_SëTø˚PöAssignmít
(
uöt32_t
 
PöAssignmít
)

292 
MODIFY_REG
(
DBGMCU
->
CR
, 
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE
, 
PöAssignmít
);

306 
__STATIC_INLINE
 
uöt32_t
 
LL_DBGMCU_GëTø˚PöAssignmít
()

308  (
uöt32_t
)(
READ_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE
));

349 
__STATIC_INLINE
 
LL_DBGMCU_APB1_GRP1_FªezePîùh
(
uöt32_t
 
Pîùhs
)

351 
SET_BIT
(
DBGMCU
->
CR
, 
Pîùhs
);

393 
__STATIC_INLINE
 
LL_DBGMCU_APB1_GRP1_UnFªezePîùh
(
uöt32_t
 
Pîùhs
)

395 
CLEAR_BIT
(
DBGMCU
->
CR
, 
Pîùhs
);

421 
__STATIC_INLINE
 
LL_DBGMCU_APB2_GRP1_FªezePîùh
(
uöt32_t
 
Pîùhs
)

423 
SET_BIT
(
DBGMCU
->
CR
, 
Pîùhs
);

449 
__STATIC_INLINE
 
LL_DBGMCU_APB2_GRP1_UnFªezePîùh
(
uöt32_t
 
Pîùhs
)

451 
CLEAR_BIT
(
DBGMCU
->
CR
, 
Pîùhs
);

457 #i‡
deföed
(
FLASH_ACR_LATENCY
)

471 
__STATIC_INLINE
 
LL_FLASH_SëL©ícy
(
uöt32_t
 
L©ícy
)

473 
MODIFY_REG
(
FLASH
->
ACR
, 
FLASH_ACR_LATENCY
, 
L©ícy
);

484 
__STATIC_INLINE
 
uöt32_t
 
LL_FLASH_GëL©ícy
()

486  (
uöt32_t
)(
READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_LATENCY
));

494 
__STATIC_INLINE
 
LL_FLASH_E«bÀPª„tch
()

496 
SET_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_PRFTBE
);

504 
__STATIC_INLINE
 
LL_FLASH_DißbÀPª„tch
()

506 
CLEAR_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_PRFTBE
);

514 
__STATIC_INLINE
 
uöt32_t
 
LL_FLASH_IsPª„tchE«bÀd
()

516  (
READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_PRFTBS
) == (FLASH_ACR_PRFTBS));

525 
__STATIC_INLINE
 
LL_FLASH_E«bÀHÆfCy˛eAc˚ss
()

527 
SET_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_HLFCYA
);

535 
__STATIC_INLINE
 
LL_FLASH_DißbÀHÆfCy˛eAc˚ss
()

537 
CLEAR_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_HLFCYA
);

545 
__STATIC_INLINE
 
uöt32_t
 
LL_FLASH_IsHÆfCy˛eAc˚ssE«bÀd
()

547  (
READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_HLFCYA
) == (FLASH_ACR_HLFCYA));

569 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h

20 #i‚de‡
__STM32F1xx_LL_USART_H


21 
	#__STM32F1xx_LL_USART_H


	)

23 #ifde‡
__˝lu•lus


28 
	~"°m32f1xx.h
"

34 #i‡
deföed
 (
USART1
Ë|| deföed (
USART2
Ë|| deföed (
USART3
Ë|| deföed (
UART4
Ë|| deföed (
UART5
)

49 
	#USART_POSITION_GTPR_GT
 
USART_GTPR_GT_Pos


	)

55 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

65 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

75 
uöt32_t
 
BaudR©e
;

79 
uöt32_t
 
D©aWidth
;

84 
uöt32_t
 
St›Bôs
;

89 
uöt32_t
 
P¨ôy
;

94 
uöt32_t
 
Tøns„rDúe˘i⁄
;

99 
uöt32_t
 
H¨dw¨eFlowC⁄åﬁ
;

104 
uöt32_t
 
OvîSam∂ög
;

109 } 
	tLL_USART_InôTy≥Def
;

116 
uöt32_t
 
ClockOuçut
;

123 
uöt32_t
 
ClockPﬁ¨ôy
;

129 
uöt32_t
 
ClockPha£
;

135 
uöt32_t
 
La°BôClockPul£
;

142 } 
	tLL_USART_ClockInôTy≥Def
;

158 
	#LL_USART_SR_PE
 
USART_SR_PE


	)

159 
	#LL_USART_SR_FE
 
USART_SR_FE


	)

160 
	#LL_USART_SR_NE
 
USART_SR_NE


	)

161 
	#LL_USART_SR_ORE
 
USART_SR_ORE


	)

162 
	#LL_USART_SR_IDLE
 
USART_SR_IDLE


	)

163 
	#LL_USART_SR_RXNE
 
USART_SR_RXNE


	)

164 
	#LL_USART_SR_TC
 
USART_SR_TC


	)

165 
	#LL_USART_SR_TXE
 
USART_SR_TXE


	)

166 
	#LL_USART_SR_LBD
 
USART_SR_LBD


	)

167 
	#LL_USART_SR_CTS
 
USART_SR_CTS


	)

176 
	#LL_USART_CR1_IDLEIE
 
USART_CR1_IDLEIE


	)

177 
	#LL_USART_CR1_RXNEIE
 
USART_CR1_RXNEIE


	)

178 
	#LL_USART_CR1_TCIE
 
USART_CR1_TCIE


	)

179 
	#LL_USART_CR1_TXEIE
 
USART_CR1_TXEIE


	)

180 
	#LL_USART_CR1_PEIE
 
USART_CR1_PEIE


	)

181 
	#LL_USART_CR2_LBDIE
 
USART_CR2_LBDIE


	)

182 
	#LL_USART_CR3_EIE
 
USART_CR3_EIE


	)

183 
	#LL_USART_CR3_CTSIE
 
USART_CR3_CTSIE


	)

191 
	#LL_USART_DIRECTION_NONE
 0x00000000U

	)

192 
	#LL_USART_DIRECTION_RX
 
USART_CR1_RE


	)

193 
	#LL_USART_DIRECTION_TX
 
USART_CR1_TE


	)

194 
	#LL_USART_DIRECTION_TX_RX
 (
USART_CR1_TE
 |
USART_CR1_RE
Ë

	)

202 
	#LL_USART_PARITY_NONE
 0x00000000U

	)

203 
	#LL_USART_PARITY_EVEN
 
USART_CR1_PCE


	)

204 
	#LL_USART_PARITY_ODD
 (
USART_CR1_PCE
 | 
USART_CR1_PS
Ë

	)

212 
	#LL_USART_WAKEUP_IDLELINE
 0x00000000U

	)

213 
	#LL_USART_WAKEUP_ADDRESSMARK
 
USART_CR1_WAKE


	)

221 
	#LL_USART_DATAWIDTH_8B
 0x00000000U

	)

222 
	#LL_USART_DATAWIDTH_9B
 
USART_CR1_M


	)

230 
	#LL_USART_OVERSAMPLING_16
 0x00000000U

	)

231 #i‡ 
deföed
(
USART_CR1_OVER8
)

232 
	#LL_USART_OVERSAMPLING_8
 
USART_CR1_OVER8


	)

238 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

243 
	#LL_USART_CLOCK_DISABLE
 0x00000000U

	)

244 
	#LL_USART_CLOCK_ENABLE
 
USART_CR2_CLKEN


	)

253 
	#LL_USART_LASTCLKPULSE_NO_OUTPUT
 0x00000000U

	)

254 
	#LL_USART_LASTCLKPULSE_OUTPUT
 
USART_CR2_LBCL


	)

262 
	#LL_USART_PHASE_1EDGE
 0x00000000U

	)

263 
	#LL_USART_PHASE_2EDGE
 
USART_CR2_CPHA


	)

271 
	#LL_USART_POLARITY_LOW
 0x00000000U

	)

272 
	#LL_USART_POLARITY_HIGH
 
USART_CR2_CPOL


	)

280 
	#LL_USART_STOPBITS_0_5
 
USART_CR2_STOP_0


	)

281 
	#LL_USART_STOPBITS_1
 0x00000000U

	)

282 
	#LL_USART_STOPBITS_1_5
 (
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
Ë

	)

283 
	#LL_USART_STOPBITS_2
 
USART_CR2_STOP_1


	)

291 
	#LL_USART_HWCONTROL_NONE
 0x00000000U

	)

292 
	#LL_USART_HWCONTROL_RTS
 
USART_CR3_RTSE


	)

293 
	#LL_USART_HWCONTROL_CTS
 
USART_CR3_CTSE


	)

294 
	#LL_USART_HWCONTROL_RTS_CTS
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
Ë

	)

302 
	#LL_USART_IRDA_POWER_NORMAL
 0x00000000U

	)

303 
	#LL_USART_IRDA_POWER_LOW
 
USART_CR3_IRLP


	)

311 
	#LL_USART_LINBREAK_DETECT_10B
 0x00000000U

	)

312 
	#LL_USART_LINBREAK_DETECT_11B
 
USART_CR2_LBDL


	)

337 
	#LL_USART_WrôeReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
Ë
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

345 
	#LL_USART_RódReg
(
__INSTANCE__
, 
__REG__
Ë
	`READ_REG
(__INSTANCE__->__REG__)

	)

361 
	#__LL_USART_DIV_SAMPLING8_100
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(((__PERIPHCLK__)*25)/(2*(__BAUDRATE__)))

	)

362 
	#__LL_USART_DIVMANT_SAMPLING8
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(
	`__LL_USART_DIV_SAMPLING8_100
((__PERIPHCLK__), (__BAUDRATE__))/100)

	)

363 
	#__LL_USART_DIVFRAQ_SAMPLING8
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(((
	`__LL_USART_DIV_SAMPLING8_100
((__PERIPHCLK__), (__BAUDRATE__)Ë- (
	`__LL_USART_DIVMANT_SAMPLING8
((__PERIPHCLK__), (__BAUDRATE__)) * 100)) * 8\

364 + 50Ë/ 100)

	)

367 
	#__LL_USART_DIV_SAMPLING8
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(((
	`__LL_USART_DIVMANT_SAMPLING8
((__PERIPHCLK__), (__BAUDRATE__)) << 4) + \

368 ((
	`__LL_USART_DIVFRAQ_SAMPLING8
((
__PERIPHCLK__
), (
__BAUDRATE__
)) & 0xF8) << 1)) + \

369 (
	`__LL_USART_DIVFRAQ_SAMPLING8
((
__PERIPHCLK__
), (
__BAUDRATE__
)Ë& 0x07))

	)

378 
	#__LL_USART_DIV_SAMPLING16_100
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(((__PERIPHCLK__)*25)/(4*(__BAUDRATE__)))

	)

379 
	#__LL_USART_DIVMANT_SAMPLING16
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(
	`__LL_USART_DIV_SAMPLING16_100
((__PERIPHCLK__), (__BAUDRATE__))/100)

	)

380 
	#__LL_USART_DIVFRAQ_SAMPLING16
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë((((
	`__LL_USART_DIV_SAMPLING16_100
((__PERIPHCLK__), (__BAUDRATE__)Ë- (
	`__LL_USART_DIVMANT_SAMPLING16
((__PERIPHCLK__), (__BAUDRATE__)) * 100)) * 16)\

381 + 50Ë/ 100)

	)

384 
	#__LL_USART_DIV_SAMPLING16
(
__PERIPHCLK__
, 
__BAUDRATE__
Ë(((
	`__LL_USART_DIVMANT_SAMPLING16
((__PERIPHCLK__), (__BAUDRATE__)) << 4) + \

385 (
	`__LL_USART_DIVFRAQ_SAMPLING16
((
__PERIPHCLK__
), (
__BAUDRATE__
)) & 0xF0)) + \

386 (
	`__LL_USART_DIVFRAQ_SAMPLING16
((
__PERIPHCLK__
), (
__BAUDRATE__
)Ë& 0x0F))

	)

412 
__STATIC_INLINE
 
LL_USART_E«bÀ
(
USART_Ty≥Def
 *
USARTx
)

414 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_UE
);

426 
__STATIC_INLINE
 
LL_USART_DißbÀ
(
USART_Ty≥Def
 *
USARTx
)

428 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_UE
);

437 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀd
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

439  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_UE
) == (USART_CR1_UE));

448 
__STATIC_INLINE
 
LL_USART_E«bÀDúe˘i⁄Rx
(
USART_Ty≥Def
 *
USARTx
)

450 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_RE
);

459 
__STATIC_INLINE
 
LL_USART_DißbÀDúe˘i⁄Rx
(
USART_Ty≥Def
 *
USARTx
)

461 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_RE
);

470 
__STATIC_INLINE
 
LL_USART_E«bÀDúe˘i⁄Tx
(
USART_Ty≥Def
 *
USARTx
)

472 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_TE
);

481 
__STATIC_INLINE
 
LL_USART_DißbÀDúe˘i⁄Tx
(
USART_Ty≥Def
 *
USARTx
)

483 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_TE
);

499 
__STATIC_INLINE
 
LL_USART_SëTøns„rDúe˘i⁄
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
Tøns„rDúe˘i⁄
)

501 
ATOMIC_MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_RE
 | 
USART_CR1_TE
, 
Tøns„rDúe˘i⁄
);

515 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëTøns„rDúe˘i⁄
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

517  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_RE
 | 
USART_CR1_TE
));

534 
__STATIC_INLINE
 
LL_USART_SëP¨ôy
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
P¨ôy
)

536 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_PS
 | 
USART_CR1_PCE
, 
P¨ôy
);

549 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëP¨ôy
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

551  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_PS
 | 
USART_CR1_PCE
));

563 
__STATIC_INLINE
 
LL_USART_SëWakeUpMëhod
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
Mëhod
)

565 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_WAKE
, 
Mëhod
);

576 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëWakeUpMëhod
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

578  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_WAKE
));

590 
__STATIC_INLINE
 
LL_USART_SëD©aWidth
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
D©aWidth
)

592 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_M
, 
D©aWidth
);

603 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëD©aWidth
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

605  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_M
));

608 #i‡
deföed
(
USART_CR1_OVER8
)

618 
__STATIC_INLINE
 
LL_USART_SëOvîSam∂ög
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
OvîSam∂ög
)

620 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_OVER8
, 
OvîSam∂ög
);

631 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëOvîSam∂ög
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

633  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_OVER8
));

648 
__STATIC_INLINE
 
LL_USART_SëLa°ClkPul£Ouçut
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
La°BôClockPul£
)

650 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_LBCL
, 
La°BôClockPul£
);

664 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëLa°ClkPul£Ouçut
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

666  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBCL
));

680 
__STATIC_INLINE
 
LL_USART_SëClockPha£
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
ClockPha£
)

682 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_CPHA
, 
ClockPha£
);

695 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëClockPha£
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

697  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_CPHA
));

711 
__STATIC_INLINE
 
LL_USART_SëClockPﬁ¨ôy
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
ClockPﬁ¨ôy
)

713 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_CPOL
, 
ClockPﬁ¨ôy
);

726 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëClockPﬁ¨ôy
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

728  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_CPOL
));

754 
__STATIC_INLINE
 
LL_USART_C⁄figClock
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
Pha£
, uöt32_à
Pﬁ¨ôy
, uöt32_à
LBCPOuçut
)

756 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_LBCL
, 
Pha£
 | 
Pﬁ¨ôy
 | 
LBCPOuçut
);

767 
__STATIC_INLINE
 
LL_USART_E«bÀSCLKOuçut
(
USART_Ty≥Def
 *
USARTx
)

769 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
);

780 
__STATIC_INLINE
 
LL_USART_DißbÀSCLKOuçut
(
USART_Ty≥Def
 *
USARTx
)

782 
CLEAR_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
);

793 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdSCLKOuçut
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

795  (
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
) == (USART_CR2_CLKEN));

809 
__STATIC_INLINE
 
LL_USART_SëSt›BôsLígth
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
St›Bôs
)

811 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_STOP
, 
St›Bôs
);

824 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëSt›BôsLígth
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

826  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_STOP
));

854 
__STATIC_INLINE
 
LL_USART_C⁄figCh¨a˘î
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
D©aWidth
, uöt32_à
P¨ôy
,

855 
uöt32_t
 
St›Bôs
)

857 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_PS
 | 
USART_CR1_PCE
 | 
USART_CR1_M
, 
P¨ôy
 | 
D©aWidth
);

858 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_STOP
, 
St›Bôs
);

870 
__STATIC_INLINE
 
LL_USART_SëNodeAddªss
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
NodeAddªss
)

872 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_ADD
, (
NodeAddªss
 & USART_CR2_ADD));

882 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëNodeAddªss
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

884  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_ADD
));

895 
__STATIC_INLINE
 
LL_USART_E«bÀRTSHWFlowCål
(
USART_Ty≥Def
 *
USARTx
)

897 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_RTSE
);

908 
__STATIC_INLINE
 
LL_USART_DißbÀRTSHWFlowCål
(
USART_Ty≥Def
 *
USARTx
)

910 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_RTSE
);

921 
__STATIC_INLINE
 
LL_USART_E«bÀCTSHWFlowCål
(
USART_Ty≥Def
 *
USARTx
)

923 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSE
);

934 
__STATIC_INLINE
 
LL_USART_DißbÀCTSHWFlowCål
(
USART_Ty≥Def
 *
USARTx
)

936 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSE
);

953 
__STATIC_INLINE
 
LL_USART_SëHWFlowCål
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
H¨dw¨eFlowC⁄åﬁ
)

955 
MODIFY_REG
(
USARTx
->
CR3
, 
USART_CR3_RTSE
 | 
USART_CR3_CTSE
, 
H¨dw¨eFlowC⁄åﬁ
);

971 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëHWFlowCål
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

973  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

976 #i‡
deföed
(
USART_CR3_ONEBIT
)

983 
__STATIC_INLINE
 
LL_USART_E«bÀO√BôSamp
(
USART_Ty≥Def
 *
USARTx
)

985 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_ONEBIT
);

994 
__STATIC_INLINE
 
LL_USART_DißbÀO√BôSamp
(
USART_Ty≥Def
 *
USARTx
)

996 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_ONEBIT
);

1005 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdO√BôSamp
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1007  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_ONEBIT
) == (USART_CR3_ONEBIT));

1011 #i‡
deföed
(
USART_CR1_OVER8
)

1027 
__STATIC_INLINE
 
LL_USART_SëBaudR©e
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
PîùhClk
, uöt32_à
OvîSam∂ög
,

1028 
uöt32_t
 
BaudR©e
)

1030 i‡(
OvîSam∂ög
 =
LL_USART_OVERSAMPLING_8
)

1032 
USARTx
->
BRR
 = (
uöt16_t
)(
__LL_USART_DIV_SAMPLING8
(
PîùhClk
, 
BaudR©e
));

1036 
USARTx
->
BRR
 = (
uöt16_t
)(
__LL_USART_DIV_SAMPLING16
(
PîùhClk
, 
BaudR©e
));

1052 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëBaudR©e
(c⁄° 
USART_Ty≥Def
 *
USARTx
, uöt32_à
PîùhClk
, uöt32_à
OvîSam∂ög
)

1054 
uöt32_t
 
ußπdiv
 = 0x0U;

1055 
uöt32_t
 
bºªsu…
 = 0x0U;

1057 
ußπdiv
 = 
USARTx
->
BRR
;

1059 i‡(
OvîSam∂ög
 =
LL_USART_OVERSAMPLING_8
)

1061 i‡((
ußπdiv
 & 0xFFF7U) != 0U)

1063 
ußπdiv
 = (
uöt16_t
)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;

1064 
bºªsu…
 = (
PîùhClk
 * 2UË/ 
ußπdiv
;

1069 i‡((
ußπdiv
 & 0xFFFFU) != 0U)

1071 
bºªsu…
 = 
PîùhClk
 / 
ußπdiv
;

1074  (
bºªsu…
);

1089 
__STATIC_INLINE
 
LL_USART_SëBaudR©e
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
PîùhClk
, uöt32_à
BaudR©e
)

1091 
USARTx
->
BRR
 = (
uöt16_t
)(
__LL_USART_DIV_SAMPLING16
(
PîùhClk
, 
BaudR©e
));

1103 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëBaudR©e
(c⁄° 
USART_Ty≥Def
 *
USARTx
, uöt32_à
PîùhClk
)

1105 
uöt32_t
 
ußπdiv
 = 0x0U;

1106 
uöt32_t
 
bºªsu…
 = 0x0U;

1108 
ußπdiv
 = 
USARTx
->
BRR
;

1110 i‡((
ußπdiv
 & 0xFFFFU) != 0U)

1112 
bºªsu…
 = 
PîùhClk
 / 
ußπdiv
;

1114  (
bºªsu…
);

1134 
__STATIC_INLINE
 
LL_USART_E«bÀIrda
(
USART_Ty≥Def
 *
USARTx
)

1136 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
);

1147 
__STATIC_INLINE
 
LL_USART_DißbÀIrda
(
USART_Ty≥Def
 *
USARTx
)

1149 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
);

1160 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIrda
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1162  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
) == (USART_CR3_IREN));

1176 
__STATIC_INLINE
 
LL_USART_SëIrdaPowîMode
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
PowîMode
)

1178 
MODIFY_REG
(
USARTx
->
CR3
, 
USART_CR3_IRLP
, 
PowîMode
);

1191 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëIrdaPowîMode
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1193  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_IRLP
));

1206 
__STATIC_INLINE
 
LL_USART_SëIrdaPªsˇÀr
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
PªsˇÀrVÆue
)

1208 
MODIFY_REG
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
, 
PªsˇÀrVÆue
);

1220 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëIrdaPªsˇÀr
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1222  (
uöt32_t
)(
READ_BIT
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
));

1241 
__STATIC_INLINE
 
LL_USART_E«bÀSm¨tˇrdNACK
(
USART_Ty≥Def
 *
USARTx
)

1243 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_NACK
);

1254 
__STATIC_INLINE
 
LL_USART_DißbÀSm¨tˇrdNACK
(
USART_Ty≥Def
 *
USARTx
)

1256 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_NACK
);

1267 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdSm¨tˇrdNACK
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1269  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_NACK
) == (USART_CR3_NACK));

1280 
__STATIC_INLINE
 
LL_USART_E«bÀSm¨tˇrd
(
USART_Ty≥Def
 *
USARTx
)

1282 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
);

1293 
__STATIC_INLINE
 
LL_USART_DißbÀSm¨tˇrd
(
USART_Ty≥Def
 *
USARTx
)

1295 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
);

1306 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdSm¨tˇrd
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1308  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
) == (USART_CR3_SCEN));

1321 
__STATIC_INLINE
 
LL_USART_SëSm¨tˇrdPªsˇÀr
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
PªsˇÀrVÆue
)

1323 
MODIFY_REG
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
, 
PªsˇÀrVÆue
);

1335 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëSm¨tˇrdPªsˇÀr
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1337  (
uöt32_t
)(
READ_BIT
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
));

1350 
__STATIC_INLINE
 
LL_USART_SëSm¨tˇrdGu¨dTime
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
Gu¨dTime
)

1352 
MODIFY_REG
(
USARTx
->
GTPR
, 
USART_GTPR_GT
, 
Gu¨dTime
 << 
USART_POSITION_GTPR_GT
);

1364 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëSm¨tˇrdGu¨dTime
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1366  (
uöt32_t
)(
READ_BIT
(
USARTx
->
GTPR
, 
USART_GTPR_GT
Ë>> 
USART_POSITION_GTPR_GT
);

1385 
__STATIC_INLINE
 
LL_USART_E«bÀHÆfDu∂ex
(
USART_Ty≥Def
 *
USARTx
)

1387 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
);

1398 
__STATIC_INLINE
 
LL_USART_DißbÀHÆfDu∂ex
(
USART_Ty≥Def
 *
USARTx
)

1400 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
);

1411 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdHÆfDu∂ex
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1413  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
) == (USART_CR3_HDSEL));

1435 
__STATIC_INLINE
 
LL_USART_SëLINBrkDëe˘i⁄Lí
(
USART_Ty≥Def
 *
USARTx
, 
uöt32_t
 
LINBDLígth
)

1437 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_LBDL
, 
LINBDLígth
);

1450 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_GëLINBrkDëe˘i⁄Lí
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1452  (
uöt32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDL
));

1463 
__STATIC_INLINE
 
LL_USART_E«bÀLIN
(
USART_Ty≥Def
 *
USARTx
)

1465 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
);

1476 
__STATIC_INLINE
 
LL_USART_DißbÀLIN
(
USART_Ty≥Def
 *
USARTx
)

1478 
CLEAR_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
);

1489 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdLIN
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1491  (
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
) == (USART_CR2_LINEN));

1527 
__STATIC_INLINE
 
LL_USART_C⁄figAsyncMode
(
USART_Ty≥Def
 *
USARTx
)

1532 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

1533 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

1563 
__STATIC_INLINE
 
LL_USART_C⁄figSyncMode
(
USART_Ty≥Def
 *
USARTx
)

1568 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
));

1569 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

1571 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
);

1603 
__STATIC_INLINE
 
LL_USART_C⁄figLINMode
(
USART_Ty≥Def
 *
USARTx
)

1608 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_CLKEN
 | 
USART_CR2_STOP
));

1609 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
));

1611 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
);

1641 
__STATIC_INLINE
 
LL_USART_C⁄figHÆfDu∂exMode
(
USART_Ty≥Def
 *
USARTx
)

1646 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

1647 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_IREN
));

1649 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
);

1681 
__STATIC_INLINE
 
LL_USART_C⁄figSm¨tˇrdMode
(
USART_Ty≥Def
 *
USARTx
)

1686 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
));

1687 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

1690 
SET_BIT
(
USARTx
->
CR2
, (
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
 | 
USART_CR2_CLKEN
));

1692 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
);

1724 
__STATIC_INLINE
 
LL_USART_C⁄figIrdaMode
(
USART_Ty≥Def
 *
USARTx
)

1729 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
 | 
USART_CR2_STOP
));

1730 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
));

1732 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
);

1762 
__STATIC_INLINE
 
LL_USART_C⁄figMu…iPro˚ssMode
(
USART_Ty≥Def
 *
USARTx
)

1767 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

1768 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

1785 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_PE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1787  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_PE
) == (USART_SR_PE));

1796 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_FE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1798  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_FE
) == (USART_SR_FE));

1807 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_NE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1809  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_NE
) == (USART_SR_NE));

1818 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_ORE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1820  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_ORE
) == (USART_SR_ORE));

1829 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_IDLE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1831  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_IDLE
) == (USART_SR_IDLE));

1840 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_RXNE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1842  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_RXNE
) == (USART_SR_RXNE));

1851 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_TC
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1853  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_TC
) == (USART_SR_TC));

1862 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_TXE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1864  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_TXE
) == (USART_SR_TXE));

1875 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_LBD
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1877  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_LBD
) == (USART_SR_LBD));

1888 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_nCTS
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1890  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_CTS
) == (USART_SR_CTS));

1899 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_SBK
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1901  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_SBK
) == (USART_CR1_SBK));

1910 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsA˘iveFœg_RWU
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

1912  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_RWU
) == (USART_CR1_RWU));

1925 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_PE
(
USART_Ty≥Def
 *
USARTx
)

1927 
__IO
 
uöt32_t
 
tm¥eg
;

1928 
tm¥eg
 = 
USARTx
->
SR
;

1929 (Ë
tm¥eg
;

1930 
tm¥eg
 = 
USARTx
->
DR
;

1931 (Ë
tm¥eg
;

1944 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_FE
(
USART_Ty≥Def
 *
USARTx
)

1946 
__IO
 
uöt32_t
 
tm¥eg
;

1947 
tm¥eg
 = 
USARTx
->
SR
;

1948 (Ë
tm¥eg
;

1949 
tm¥eg
 = 
USARTx
->
DR
;

1950 (Ë
tm¥eg
;

1963 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_NE
(
USART_Ty≥Def
 *
USARTx
)

1965 
__IO
 
uöt32_t
 
tm¥eg
;

1966 
tm¥eg
 = 
USARTx
->
SR
;

1967 (Ë
tm¥eg
;

1968 
tm¥eg
 = 
USARTx
->
DR
;

1969 (Ë
tm¥eg
;

1982 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_ORE
(
USART_Ty≥Def
 *
USARTx
)

1984 
__IO
 
uöt32_t
 
tm¥eg
;

1985 
tm¥eg
 = 
USARTx
->
SR
;

1986 (Ë
tm¥eg
;

1987 
tm¥eg
 = 
USARTx
->
DR
;

1988 (Ë
tm¥eg
;

2001 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_IDLE
(
USART_Ty≥Def
 *
USARTx
)

2003 
__IO
 
uöt32_t
 
tm¥eg
;

2004 
tm¥eg
 = 
USARTx
->
SR
;

2005 (Ë
tm¥eg
;

2006 
tm¥eg
 = 
USARTx
->
DR
;

2007 (Ë
tm¥eg
;

2016 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_TC
(
USART_Ty≥Def
 *
USARTx
)

2018 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_TC
));

2027 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_RXNE
(
USART_Ty≥Def
 *
USARTx
)

2029 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_RXNE
));

2040 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_LBD
(
USART_Ty≥Def
 *
USARTx
)

2042 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_LBD
));

2053 
__STATIC_INLINE
 
LL_USART_CÀ¨Fœg_nCTS
(
USART_Ty≥Def
 *
USARTx
)

2055 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_CTS
));

2072 
__STATIC_INLINE
 
LL_USART_E«bÀIT_IDLE
(
USART_Ty≥Def
 *
USARTx
)

2074 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_IDLEIE
);

2083 
__STATIC_INLINE
 
LL_USART_E«bÀIT_RXNE
(
USART_Ty≥Def
 *
USARTx
)

2085 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_RXNEIE
);

2094 
__STATIC_INLINE
 
LL_USART_E«bÀIT_TC
(
USART_Ty≥Def
 *
USARTx
)

2096 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_TCIE
);

2105 
__STATIC_INLINE
 
LL_USART_E«bÀIT_TXE
(
USART_Ty≥Def
 *
USARTx
)

2107 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_TXEIE
);

2116 
__STATIC_INLINE
 
LL_USART_E«bÀIT_PE
(
USART_Ty≥Def
 *
USARTx
)

2118 
ATOMIC_SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_PEIE
);

2129 
__STATIC_INLINE
 
LL_USART_E«bÀIT_LBD
(
USART_Ty≥Def
 *
USARTx
)

2131 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDIE
);

2144 
__STATIC_INLINE
 
LL_USART_E«bÀIT_ERROR
(
USART_Ty≥Def
 *
USARTx
)

2146 
ATOMIC_SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_EIE
);

2157 
__STATIC_INLINE
 
LL_USART_E«bÀIT_CTS
(
USART_Ty≥Def
 *
USARTx
)

2159 
ATOMIC_SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSIE
);

2168 
__STATIC_INLINE
 
LL_USART_DißbÀIT_IDLE
(
USART_Ty≥Def
 *
USARTx
)

2170 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_IDLEIE
);

2179 
__STATIC_INLINE
 
LL_USART_DißbÀIT_RXNE
(
USART_Ty≥Def
 *
USARTx
)

2181 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_RXNEIE
);

2190 
__STATIC_INLINE
 
LL_USART_DißbÀIT_TC
(
USART_Ty≥Def
 *
USARTx
)

2192 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_TCIE
);

2201 
__STATIC_INLINE
 
LL_USART_DißbÀIT_TXE
(
USART_Ty≥Def
 *
USARTx
)

2203 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_TXEIE
);

2212 
__STATIC_INLINE
 
LL_USART_DißbÀIT_PE
(
USART_Ty≥Def
 *
USARTx
)

2214 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_PEIE
);

2225 
__STATIC_INLINE
 
LL_USART_DißbÀIT_LBD
(
USART_Ty≥Def
 *
USARTx
)

2227 
CLEAR_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDIE
);

2240 
__STATIC_INLINE
 
LL_USART_DißbÀIT_ERROR
(
USART_Ty≥Def
 *
USARTx
)

2242 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_EIE
);

2253 
__STATIC_INLINE
 
LL_USART_DißbÀIT_CTS
(
USART_Ty≥Def
 *
USARTx
)

2255 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSIE
);

2264 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_IDLE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2266  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_IDLEIE
) == (USART_CR1_IDLEIE));

2275 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_RXNE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2277  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_RXNEIE
) == (USART_CR1_RXNEIE));

2286 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_TC
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2288  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_TCIE
) == (USART_CR1_TCIE));

2297 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_TXE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2299  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_TXEIE
) == (USART_CR1_TXEIE));

2308 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_PE
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2310  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_PEIE
) == (USART_CR1_PEIE));

2321 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_LBD
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2323  (
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDIE
) == (USART_CR2_LBDIE));

2332 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_ERROR
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2334  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_EIE
) == (USART_CR3_EIE));

2345 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdIT_CTS
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2347  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSIE
) == (USART_CR3_CTSIE));

2364 
__STATIC_INLINE
 
LL_USART_E«bÀDMAReq_RX
(
USART_Ty≥Def
 *
USARTx
)

2366 
ATOMIC_SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAR
);

2375 
__STATIC_INLINE
 
LL_USART_DißbÀDMAReq_RX
(
USART_Ty≥Def
 *
USARTx
)

2377 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAR
);

2386 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdDMAReq_RX
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2388  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAR
) == (USART_CR3_DMAR));

2397 
__STATIC_INLINE
 
LL_USART_E«bÀDMAReq_TX
(
USART_Ty≥Def
 *
USARTx
)

2399 
ATOMIC_SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAT
);

2408 
__STATIC_INLINE
 
LL_USART_DißbÀDMAReq_TX
(
USART_Ty≥Def
 *
USARTx
)

2410 
ATOMIC_CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAT
);

2419 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_IsE«bÀdDMAReq_TX
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2421  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAT
) == (USART_CR3_DMAT));

2431 
__STATIC_INLINE
 
uöt32_t
 
LL_USART_DMA_GëRegAddr
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2434  ((
uöt32_t
Ë&(
USARTx
->
DR
));

2451 
__STATIC_INLINE
 
uöt8_t
 
LL_USART_Re˚iveD©a8
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2453  (
uöt8_t
)(
READ_BIT
(
USARTx
->
DR
, 
USART_DR_DR
));

2462 
__STATIC_INLINE
 
uöt16_t
 
LL_USART_Re˚iveD©a9
(c⁄° 
USART_Ty≥Def
 *
USARTx
)

2464  (
uöt16_t
)(
READ_BIT
(
USARTx
->
DR
, 
USART_DR_DR
));

2474 
__STATIC_INLINE
 
LL_USART_TønsmôD©a8
(
USART_Ty≥Def
 *
USARTx
, 
uöt8_t
 
VÆue
)

2476 
USARTx
->
DR
 = 
VÆue
;

2486 
__STATIC_INLINE
 
LL_USART_TønsmôD©a9
(
USART_Ty≥Def
 *
USARTx
, 
uöt16_t
 
VÆue
)

2488 
USARTx
->
DR
 = 
VÆue
 & 0x1FFU;

2505 
__STATIC_INLINE
 
LL_USART_Reque°BªakSídög
(
USART_Ty≥Def
 *
USARTx
)

2507 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_SBK
);

2516 
__STATIC_INLINE
 
LL_USART_Reque°E¡îMuãMode
(
USART_Ty≥Def
 *
USARTx
)

2518 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_RWU
);

2527 
__STATIC_INLINE
 
LL_USART_Reque°ExôMuãMode
(
USART_Ty≥Def
 *
USARTx
)

2529 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_RWU
);

2536 #i‡
deföed
(
USE_FULL_LL_DRIVER
)

2540 
Eº‹Sètus
 
LL_USART_DeInô
(c⁄° 
USART_Ty≥Def
 *
USARTx
);

2541 
Eº‹Sètus
 
LL_USART_Inô
(
USART_Ty≥Def
 *
USARTx
, c⁄° 
LL_USART_InôTy≥Def
 *
USART_InôSåu˘
);

2542 
LL_USART_Såu˘Inô
(
LL_USART_InôTy≥Def
 *
USART_InôSåu˘
);

2543 
Eº‹Sètus
 
LL_USART_ClockInô
(
USART_Ty≥Def
 *
USARTx
, c⁄° 
LL_USART_ClockInôTy≥Def
 *
USART_ClockInôSåu˘
);

2544 
LL_USART_ClockSåu˘Inô
(
LL_USART_ClockInôTy≥Def
 *
USART_ClockInôSåu˘
);

2564 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_utils.h

33 #i‚de‡
__STM32F1xx_LL_UTILS_H


34 
	#__STM32F1xx_LL_UTILS_H


	)

36 #ifde‡
__˝lu•lus


41 
	~"°m32f1xx.h
"

60 
	#LL_MAX_DELAY
 0xFFFFFFFFU

	)

65 
	#UID_BASE_ADDRESS
 
UID_BASE


	)

70 
	#FLASHSIZE_BASE_ADDRESS
 
FLASHSIZE_BASE


	)

92 
uöt32_t
 
PLLMul
;

98 
uöt32_t
 
Pªdiv
;

103 } 
	tLL_UTILS_PLLInôTy≥Def
;

110 
uöt32_t
 
AHBCLKDividî
;

116 
uöt32_t
 
APB1CLKDividî
;

122 
uöt32_t
 
APB2CLKDividî
;

128 } 
	tLL_UTILS_ClkInôTy≥Def
;

142 
	#LL_UTILS_HSEBYPASS_OFF
 0x00000000U

	)

143 
	#LL_UTILS_HSEBYPASS_ON
 0x00000001U

	)

167 
__STATIC_INLINE
 
uöt32_t
 
LL_GëUID_W‹d0
()

169  (
uöt32_t
)(
READ_REG
(*((uöt32_à*)
UID_BASE_ADDRESS
)));

176 
__STATIC_INLINE
 
uöt32_t
 
LL_GëUID_W‹d1
()

178  (
uöt32_t
)(
READ_REG
(*((uöt32_à*)(
UID_BASE_ADDRESS
 + 4U))));

185 
__STATIC_INLINE
 
uöt32_t
 
LL_GëUID_W‹d2
()

187  (
uöt32_t
)(
READ_REG
(*((uöt32_à*)(
UID_BASE_ADDRESS
 + 8U))));

196 
__STATIC_INLINE
 
uöt32_t
 
LL_GëFœshSize
()

198  (
uöt16_t
)(
READ_REG
(*((
uöt32_t
 *)
FLASHSIZE_BASE_ADDRESS
)));

218 
__STATIC_INLINE
 
LL_InôTick
(
uöt32_t
 
HCLKFªquícy
, uöt32_à
Ticks
)

221 
SysTick
->
LOAD
 = (
uöt32_t
)((
HCLKFªquícy
 / 
Ticks
) - 1UL);

222 
SysTick
->
VAL
 = 0UL;

223 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

224 
SysTick_CTRL_ENABLE_Msk
;

227 
LL_Inô1msTick
(
uöt32_t
 
HCLKFªquícy
);

228 
LL_mDñay
(
uöt32_t
 
Dñay
);

238 
LL_SëSy°emC‹eClock
(
uöt32_t
 
HCLKFªquícy
);

239 #i‡
deföed
(
FLASH_ACR_LATENCY
)

240 
Eº‹Sètus
 
LL_SëFœshL©ícy
(
uöt32_t
 
Fªquícy
);

242 
Eº‹Sètus
 
LL_PLL_C⁄figSy°emClock_HSI
(
LL_UTILS_PLLInôTy≥Def
 *
UTILS_PLLInôSåu˘
,

243 
LL_UTILS_ClkInôTy≥Def
 *
UTILS_ClkInôSåu˘
);

244 
Eº‹Sètus
 
LL_PLL_C⁄figSy°emClock_HSE
(
uöt32_t
 
HSEFªquícy
, uöt32_à
HSEBy∑ss
,

245 
LL_UTILS_PLLInôTy≥Def
 *
UTILS_PLLInôSåu˘
, 
LL_UTILS_ClkInôTy≥Def
 *
UTILS_ClkInôSåu˘
);

246 #i‡
deföed
(
RCC_PLL2_SUPPORT
)

247 
Eº‹Sètus
 
LL_PLL_C⁄figSy°emClock_PLL2
(
uöt32_t
 
HSEFªquícy
, uöt32_à
HSEBy∑ss
, 
LL_UTILS_PLLInôTy≥Def
 *
UTILS_PLLInôSåu˘
,

248 
LL_UTILS_PLLInôTy≥Def
 *
UTILS_PLL2InôSåu˘
, 
LL_UTILS_ClkInôTy≥Def
 *
UTILS_ClkInôSåu˘
);

266 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c

36 
	~"°m32f1xx_hÆ.h
"

47 #ifde‡
HAL_MODULE_ENABLED


58 
	#__STM32F1xx_HAL_VERSION_MAIN
 (0x01UË

	)

59 
	#__STM32F1xx_HAL_VERSION_SUB1
 (0x01UË

	)

60 
	#__STM32F1xx_HAL_VERSION_SUB2
 (0x0AUË

	)

61 
	#__STM32F1xx_HAL_VERSION_RC
 (0x00UË

	)

62 
	#__STM32F1xx_HAL_VERSION
 ((
__STM32F1xx_HAL_VERSION_MAIN
 << 24)\

63 |(
__STM32F1xx_HAL_VERSION_SUB1
 << 16)\

64 |(
__STM32F1xx_HAL_VERSION_SUB2
 << 8 )\

65 |(
__STM32F1xx_HAL_VERSION_RC
))

	)

67 
	#IDCODE_DEVID_MASK
 0x00000FFFU

	)

79 
__IO
 
uöt32_t
 
	guwTick
;

80 
uöt32_t
 
	guwTickPrio
 = (1UL << 
__NVIC_PRIO_BITS
);

81 
HAL_TickFªqTy≥Def
 
	guwTickFªq
 = 
HAL_TICK_FREQ_DEFAULT
;

142 
HAL_SètusTy≥Def
 
	$HAL_Inô
()

145 #i‡(
PREFETCH_ENABLE
 != 0)

146 #i‡
	`deföed
(
STM32F101x6
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
) || \

147 
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

148 
	`deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

149 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

152 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

157 
	`HAL_NVIC_SëPri‹ôyGroupög
(
NVIC_PRIORITYGROUP_4
);

160 
	`HAL_InôTick
(
TICK_INT_PRIORITY
);

163 
	`HAL_M•Inô
();

166  
HAL_OK
;

167 
	}
}

175 
HAL_SètusTy≥Def
 
	$HAL_DeInô
()

178 
	`__HAL_RCC_APB1_FORCE_RESET
();

179 
	`__HAL_RCC_APB1_RELEASE_RESET
();

181 
	`__HAL_RCC_APB2_FORCE_RESET
();

182 
	`__HAL_RCC_APB2_RELEASE_RESET
();

184 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

185 
	`__HAL_RCC_AHB_FORCE_RESET
();

186 
	`__HAL_RCC_AHB_RELEASE_RESET
();

190 
	`HAL_M•DeInô
();

193  
HAL_OK
;

194 
	}
}

200 
__wók
 
	$HAL_M•Inô
()

205 
	}
}

211 
__wók
 
	$HAL_M•DeInô
()

216 
	}
}

234 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
)

237 i‡(
	`HAL_SYSTICK_C⁄fig
(
Sy°emC‹eClock
 / (1000U / 
uwTickFªq
)) > 0U)

239  
HAL_ERROR
;

243 i‡(
TickPri‹ôy
 < (1UL << 
__NVIC_PRIO_BITS
))

245 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
TickPri‹ôy
, 0U);

246 
uwTickPrio
 = 
TickPri‹ôy
;

250  
HAL_ERROR
;

254  
HAL_OK
;

255 
	}
}

293 
__wók
 
	$HAL_IncTick
()

295 
uwTick
 +
uwTickFªq
;

296 
	}
}

304 
__wók
 
uöt32_t
 
	$HAL_GëTick
()

306  
uwTick
;

307 
	}
}

313 
uöt32_t
 
	$HAL_GëTickPrio
()

315  
uwTickPrio
;

316 
	}
}

322 
HAL_SètusTy≥Def
 
	$HAL_SëTickFªq
(
HAL_TickFªqTy≥Def
 
Fªq
)

324 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

325 
HAL_TickFªqTy≥Def
 
¥evTickFªq
;

327 
	`as£π_∑øm
(
	`IS_TICKFREQ
(
Fªq
));

329 i‡(
uwTickFªq
 !
Fªq
)

332 
¥evTickFªq
 = 
uwTickFªq
;

335 
uwTickFªq
 = 
Fªq
;

338 
°©us
 = 
	`HAL_InôTick
(
uwTickPrio
);

340 i‡(
°©us
 !
HAL_OK
)

343 
uwTickFªq
 = 
¥evTickFªq
;

347  
°©us
;

348 
	}
}

355 
HAL_TickFªqTy≥Def
 
	$HAL_GëTickFªq
()

357  
uwTickFªq
;

358 
	}
}

371 
__wók
 
	$HAL_Dñay
(
uöt32_t
 
Dñay
)

373 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

374 
uöt32_t
 
waô
 = 
Dñay
;

377 i‡(
waô
 < 
HAL_MAX_DELAY
)

379 
waô
 +(
uöt32_t
)(
uwTickFªq
);

382 (
	`HAL_GëTick
(Ë- 
tick°¨t
Ë< 
waô
)

385 
	}
}

397 
__wók
 
	$HAL_Su•ídTick
()

400 
	`CLEAR_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

401 
	}
}

413 
__wók
 
	$HAL_ResumeTick
()

416 
	`SET_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

417 
	}
}

423 
uöt32_t
 
	$HAL_GëHÆVîsi⁄
()

425  
__STM32F1xx_HAL_VERSION
;

426 
	}
}

439 
uöt32_t
 
	$HAL_GëREVID
()

441  ((
DBGMCU
->
IDCODE
Ë>> 
DBGMCU_IDCODE_REV_ID_Pos
);

442 
	}
}

455 
uöt32_t
 
	$HAL_GëDEVID
()

457  ((
DBGMCU
->
IDCODE
Ë& 
IDCODE_DEVID_MASK
);

458 
	}
}

464 
uöt32_t
 
	$HAL_GëUIDw0
()

466 (
	`READ_REG
(*((
uöt32_t
 *)
UID_BASE
)));

467 
	}
}

473 
uöt32_t
 
	$HAL_GëUIDw1
()

475 (
	`READ_REG
(*((
uöt32_t
 *)(
UID_BASE
 + 4U))));

476 
	}
}

482 
uöt32_t
 
	$HAL_GëUIDw2
()

484 (
	`READ_REG
(*((
uöt32_t
 *)(
UID_BASE
 + 8U))));

485 
	}
}

491 
	$HAL_DBGMCU_E«bÀDBGSÀïMode
()

493 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

494 
	}
}

507 
	$HAL_DBGMCU_DißbÀDBGSÀïMode
()

509 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

510 
	}
}

537 
	$HAL_DBGMCU_E«bÀDBGSt›Mode
()

539 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

540 
	}
}

553 
	$HAL_DBGMCU_DißbÀDBGSt›Mode
()

555 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

556 
	}
}

569 
	$HAL_DBGMCU_E«bÀDBGSèndbyMode
()

571 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

572 
	}
}

585 
	$HAL_DBGMCU_DißbÀDBGSèndbyMode
()

587 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

588 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c

82 
	~"°m32f1xx_hÆ.h
"

93 #ifde‡
HAL_CORTEX_MODULE_ENABLED


142 
	$HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

145 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

148 
	`NVIC_SëPri‹ôyGroupög
(
Pri‹ôyGroup
);

149 
	}
}

164 
	$HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

166 
uöt32_t
 
¥i‹ôygroup
 = 0x00U;

169 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
SubPri‹ôy
));

170 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
Pªem±Pri‹ôy
));

172 
¥i‹ôygroup
 = 
	`NVIC_GëPri‹ôyGroupög
();

174 
	`NVIC_SëPri‹ôy
(
IRQn
, 
	`NVIC_EncodePri‹ôy
(
¥i‹ôygroup
, 
Pªem±Pri‹ôy
, 
SubPri‹ôy
));

175 
	}
}

186 
	$HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

189 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

192 
	`NVIC_E«bÀIRQ
(
IRQn
);

193 
	}
}

202 
	$HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

205 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

208 
	`NVIC_DißbÀIRQ
(
IRQn
);

209 
	}
}

215 
	$HAL_NVIC_Sy°emRe£t
()

218 
	`NVIC_Sy°emRe£t
();

219 
	}
}

228 
uöt32_t
 
	$HAL_SYSTICK_C⁄fig
(
uöt32_t
 
TicksNumb
)

230  
	`SysTick_C⁄fig
(
TicksNumb
);

231 
	}
}

252 #i‡(
__MPU_PRESENT
 == 1U)

257 
	$HAL_MPU_DißbÀ
()

260 
	`__DMB
();

263 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

266 
MPU
->
CTRL
 = 0U;

267 
	}
}

280 
	$HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

283 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

286 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

289 
	`__DSB
();

290 
	`__ISB
();

291 
	}
}

297 
	$HAL_MPU_E«bÀRegi⁄
(
uöt32_t
 
Regi⁄Numbî
)

300 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
Regi⁄Numbî
));

303 
MPU
->
RNR
 = 
Regi⁄Numbî
;

306 
	`SET_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

307 
	}
}

313 
	$HAL_MPU_DißbÀRegi⁄
(
uöt32_t
 
Regi⁄Numbî
)

316 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
Regi⁄Numbî
));

319 
MPU
->
RNR
 = 
Regi⁄Numbî
;

322 
	`CLEAR_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

323 
	}
}

331 
	$HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
)

334 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
MPU_Inô
->
Numbî
));

335 
	`as£π_∑øm
(
	`IS_MPU_REGION_ENABLE
(
MPU_Inô
->
E«bÀ
));

336 
	`as£π_∑øm
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_Inô
->
DißbÀExec
));

337 
	`as£π_∑øm
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_Inô
->
Ac˚ssPîmissi⁄
));

338 
	`as£π_∑øm
(
	`IS_MPU_TEX_LEVEL
(
MPU_Inô
->
Ty≥ExtFõld
));

339 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_Inô
->
IsSh¨óbÀ
));

340 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_Inô
->
IsCachóbÀ
));

341 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_Inô
->
IsBuf„øbÀ
));

342 
	`as£π_∑øm
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_Inô
->
SubRegi⁄DißbÀ
));

343 
	`as£π_∑øm
(
	`IS_MPU_REGION_SIZE
(
MPU_Inô
->
Size
));

346 
MPU
->
RNR
 = 
MPU_Inô
->
Numbî
;

349 
	`CLEAR_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

352 
MPU
->
RBAR
 = 
MPU_Inô
->
Ba£Addªss
;

353 
MPU
->
RASR
 = ((
uöt32_t
)
MPU_Inô
->
DißbÀExec
 << 
MPU_RASR_XN_Pos
) |

354 ((
uöt32_t
)
MPU_Inô
->
Ac˚ssPîmissi⁄
 << 
MPU_RASR_AP_Pos
) |

355 ((
uöt32_t
)
MPU_Inô
->
Ty≥ExtFõld
 << 
MPU_RASR_TEX_Pos
) |

356 ((
uöt32_t
)
MPU_Inô
->
IsSh¨óbÀ
 << 
MPU_RASR_S_Pos
) |

357 ((
uöt32_t
)
MPU_Inô
->
IsCachóbÀ
 << 
MPU_RASR_C_Pos
) |

358 ((
uöt32_t
)
MPU_Inô
->
IsBuf„øbÀ
 << 
MPU_RASR_B_Pos
) |

359 ((
uöt32_t
)
MPU_Inô
->
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
) |

360 ((
uöt32_t
)
MPU_Inô
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

361 ((
uöt32_t
)
MPU_Inô
->
E«bÀ
 << 
MPU_RASR_ENABLE_Pos
);

362 
	}
}

369 
uöt32_t
 
	$HAL_NVIC_GëPri‹ôyGroupög
()

372  
	`NVIC_GëPri‹ôyGroupög
();

373 
	}
}

396 
	$HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_à*
pPªem±Pri‹ôy
, uöt32_à*
pSubPri‹ôy
)

399 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

401 
	`NVIC_DecodePri‹ôy
(
	`NVIC_GëPri‹ôy
(
IRQn
), 
Pri‹ôyGroup
, 
pPªem±Pri‹ôy
, 
pSubPri‹ôy
);

402 
	}
}

411 
	$HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

414 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

417 
	`NVIC_SëPídögIRQ
(
IRQn
);

418 
	}
}

429 
uöt32_t
 
	$HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

432 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

435  
	`NVIC_GëPídögIRQ
(
IRQn
);

436 
	}
}

445 
	$HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

448 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

451 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

452 
	}
}

462 
uöt32_t
 
	$HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

465 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

468  
	`NVIC_GëA˘ive
(
IRQn
);

469 
	}
}

479 
	$HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
)

482 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSour˚
));

483 i‡(
CLKSour˚
 =
SYSTICK_CLKSOURCE_HCLK
)

485 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
;

489 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
;

491 
	}
}

497 
	$HAL_SYSTICK_IRQH™dÀr
()

499 
	`HAL_SYSTICK_CÆlback
();

500 
	}
}

506 
__wók
 
	$HAL_SYSTICK_CÆlback
()

511 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c

84 
	~"°m32f1xx_hÆ.h
"

95 #ifde‡
HAL_DMA_MODULE_ENABLED


105 
DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

142 
HAL_SètusTy≥Def
 
	$HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
)

144 
uöt32_t
 
tmp
 = 0U;

147 if(
hdma
 =
NULL
)

149  
HAL_ERROR
;

153 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

154 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
hdma
->
Inô
.
Dúe˘i⁄
));

155 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
hdma
->
Inô
.
PîùhInc
));

156 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
hdma
->
Inô
.
MemInc
));

157 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
hdma
->
Inô
.
PîùhD©aAlignmít
));

158 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
hdma
->
Inô
.
MemD©aAlignmít
));

159 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
hdma
->
Inô
.
Mode
));

160 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
hdma
->
Inô
.
Pri‹ôy
));

162 #i‡
	`deföed
 (
DMA2
)

164 i‡((
uöt32_t
)(
hdma
->
In°™˚
Ë< (uöt32_t)(
DMA2_Ch™√l1
))

167 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

168 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

173 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA2_Ch™√l1
Ë/ ((uöt32_t)
DMA2_Ch™√l2
 - (uint32_t)DMA2_Channel1)) << 2;

174 
hdma
->
DmaBa£Addªss
 = 
DMA2
;

178 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

179 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

183 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

186 
tmp
 = 
hdma
->
In°™˚
->
CCR
;

189 
tmp
 &((
uöt32_t
)~(
DMA_CCR_PL
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PSIZE
 | \

190 
DMA_CCR_MINC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_CIRC
 | \

191 
DMA_CCR_DIR
));

194 
tmp
 |
hdma
->
Inô
.
Dúe˘i⁄
 |

195 
hdma
->
Inô
.
PîùhInc
 | hdma->Inô.
MemInc
 |

196 
hdma
->
Inô
.
PîùhD©aAlignmít
 | hdma->Inô.
MemD©aAlignmít
 |

197 
hdma
->
Inô
.
Mode
 | hdma->Inô.
Pri‹ôy
;

200 
hdma
->
In°™˚
->
CCR
 = 
tmp
;

203 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

206 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

208 
hdma
->
Lock
 = 
HAL_UNLOCKED
;

210  
HAL_OK
;

211 
	}
}

219 
HAL_SètusTy≥Def
 
	$HAL_DMA_DeInô
(
DMA_H™dÀTy≥Def
 *
hdma
)

222 if(
hdma
 =
NULL
)

224  
HAL_ERROR
;

228 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

231 
	`__HAL_DMA_DISABLE
(
hdma
);

234 
hdma
->
In°™˚
->
CCR
 = 0U;

237 
hdma
->
In°™˚
->
CNDTR
 = 0U;

240 
hdma
->
In°™˚
->
CPAR
 = 0U;

243 
hdma
->
In°™˚
->
CMAR
 = 0U;

245 #i‡
	`deföed
 (
DMA2
)

247 i‡((
uöt32_t
)(
hdma
->
In°™˚
Ë< (uöt32_t)(
DMA2_Ch™√l1
))

250 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

251 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

256 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA2_Ch™√l1
Ë/ ((uöt32_t)
DMA2_Ch™√l2
 - (uint32_t)DMA2_Channel1)) << 2;

257 
hdma
->
DmaBa£Addªss
 = 
DMA2
;

261 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

262 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

266 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << (hdma->
Ch™√lIndex
));

269 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

270 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

271 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

272 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

275 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

278 
hdma
->
Sèã
 = 
HAL_DMA_STATE_RESET
;

281 
	`__HAL_UNLOCK
(
hdma
);

283  
HAL_OK
;

284 
	}
}

318 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

320 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

323 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

326 
	`__HAL_LOCK
(
hdma
);

328 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

331 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

332 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

335 
	`__HAL_DMA_DISABLE
(
hdma
);

338 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

341 
	`__HAL_DMA_ENABLE
(
hdma
);

346 
	`__HAL_UNLOCK
(
hdma
);

347 
°©us
 = 
HAL_BUSY
;

349  
°©us
;

350 
	}
}

361 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

363 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

366 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

369 
	`__HAL_LOCK
(
hdma
);

371 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

374 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

375 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

378 
	`__HAL_DMA_DISABLE
(
hdma
);

381 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

385 if(
NULL
 !
hdma
->
X„rHÆfC∂tCÆlback
)

388 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

392 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

393 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_TE
));

396 
	`__HAL_DMA_ENABLE
(
hdma
);

401 
	`__HAL_UNLOCK
(
hdma
);

404 
°©us
 = 
HAL_BUSY
;

406  
°©us
;

407 
	}
}

415 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

417 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

419 if(
hdma
->
Sèã
 !
HAL_DMA_STATE_BUSY
)

422 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

425 
	`__HAL_UNLOCK
(
hdma
);

427  
HAL_ERROR
;

433 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

436 
	`__HAL_DMA_DISABLE
(
hdma
);

439 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

442 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

445 
	`__HAL_UNLOCK
(
hdma
);

447  
°©us
;

448 
	}
}

456 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
)

458 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

460 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

463 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

465 
°©us
 = 
HAL_ERROR
;

470 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

473 
	`__HAL_DMA_DISABLE
(
hdma
);

476 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_GI_FLAG_INDEX
(hdma));

479 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

482 
	`__HAL_UNLOCK
(
hdma
);

485 if(
hdma
->
X„rAb‹tCÆlback
 !
NULL
)

487 
hdma
->
	`X„rAb‹tCÆlback
(hdma);

490  
°©us
;

491 
	}
}

501 
HAL_SètusTy≥Def
 
	$HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
)

503 
uöt32_t
 
ãmp
;

504 
uöt32_t
 
tick°¨t
 = 0U;

506 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

509 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

510 
	`__HAL_UNLOCK
(
hdma
);

511  
HAL_ERROR
;

515 i‡(
RESET
 !(
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
))

517 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NOT_SUPPORTED
;

518  
HAL_ERROR
;

522 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

525 
ãmp
 = 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(
hdma
);

530 
ãmp
 = 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(
hdma
);

534 
tick°¨t
 = 
	`HAL_GëTick
();

536 
	`__HAL_DMA_GET_FLAG
(
hdma
, 
ãmp
Ë=
RESET
)

538 if((
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma)Ë!
RESET
))

543 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

546 
	`SET_BIT
(
hdma
->
Eº‹Code
, 
HAL_DMA_ERROR_TE
);

549 
hdma
->
Sèã

HAL_DMA_STATE_READY
;

552 
	`__HAL_UNLOCK
(
hdma
);

554  
HAL_ERROR
;

557 if(
Timeout
 !
HAL_MAX_DELAY
)

559 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

562 
	`SET_BIT
(
hdma
->
Eº‹Code
, 
HAL_DMA_ERROR_TIMEOUT
);

565 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

568 
	`__HAL_UNLOCK
(
hdma
);

570  
HAL_ERROR
;

575 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

578 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

582 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

587 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

591 
	`__HAL_UNLOCK
(
hdma
);

593  
HAL_OK
;

594 
	}
}

602 
	$HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
)

604 
uöt32_t
 
Êag_ô
 = 
hdma
->
DmaBa£Addªss
->
ISR
;

605 
uöt32_t
 
sour˚_ô
 = 
hdma
->
In°™˚
->
CCR
;

608 i‡(((
Êag_ô
 & (
DMA_FLAG_HT1
 << 
hdma
->
Ch™√lIndex
)Ë!
RESET
Ë&& ((
sour˚_ô
 & 
DMA_IT_HT
) != RESET))

611 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

614 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

617 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

622 if(
hdma
->
X„rHÆfC∂tCÆlback
 !
NULL
)

625 
hdma
->
	`X„rHÆfC∂tCÆlback
(hdma);

630 i‡(((
Êag_ô
 & (
DMA_FLAG_TC1
 << 
hdma
->
Ch™√lIndex
)Ë!
RESET
Ë&& ((
sour˚_ô
 & 
DMA_IT_TC
) != RESET))

632 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

635 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TE
 | 
DMA_IT_TC
);

638 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

641 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

644 
	`__HAL_UNLOCK
(
hdma
);

646 if(
hdma
->
X„rC∂tCÆlback
 !
NULL
)

649 
hdma
->
	`X„rC∂tCÆlback
(hdma);

654 i‡(–
RESET
 !(
Êag_ô
 & (
DMA_FLAG_TE1
 << 
hdma
->
Ch™√lIndex
))Ë&& (RESET !(
sour˚_ô
 & 
DMA_IT_TE
)))

659 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

662 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

665 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_TE
;

668 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

671 
	`__HAL_UNLOCK
(
hdma
);

673 i‡(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

676 
hdma
->
	`X„rEº‹CÆlback
(hdma);

680 
	}
}

692 
HAL_SètusTy≥Def
 
HAL_DMA_Regi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
, (* 
pCÆlback
)–DMA_H™dÀTy≥De‡* 
_hdma
))

694 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

697 
	`__HAL_LOCK
(
hdma
);

699 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

701 
CÆlbackID
)

703 
HAL_DMA_XFER_CPLT_CB_ID
:

704 
hdma
->
X„rC∂tCÆlback
 = 
pCÆlback
;

707 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

708 
hdma
->
X„rHÆfC∂tCÆlback
 = 
pCÆlback
;

711 
HAL_DMA_XFER_ERROR_CB_ID
:

712 
hdma
->
X„rEº‹CÆlback
 = 
pCÆlback
;

715 
HAL_DMA_XFER_ABORT_CB_ID
:

716 
hdma
->
X„rAb‹tCÆlback
 = 
pCÆlback
;

720 
°©us
 = 
HAL_ERROR
;

726 
°©us
 = 
HAL_ERROR
;

730 
	`__HAL_UNLOCK
(
hdma
);

732  
°©us
;

733 
	}
}

743 
HAL_SètusTy≥Def
 
	$HAL_DMA_UnRegi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
)

745 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

748 
	`__HAL_LOCK
(
hdma
);

750 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

752 
CÆlbackID
)

754 
HAL_DMA_XFER_CPLT_CB_ID
:

755 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

758 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

759 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

762 
HAL_DMA_XFER_ERROR_CB_ID
:

763 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

766 
HAL_DMA_XFER_ABORT_CB_ID
:

767 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

770 
HAL_DMA_XFER_ALL_CB_ID
:

771 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

772 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

773 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

774 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

778 
°©us
 = 
HAL_ERROR
;

784 
°©us
 = 
HAL_ERROR
;

788 
	`__HAL_UNLOCK
(
hdma
);

790  
°©us
;

791 
	}
}

819 
HAL_DMA_SèãTy≥Def
 
	$HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
)

822  
hdma
->
Sèã
;

823 
	}
}

831 
uöt32_t
 
	$HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

833  
hdma
->
Eº‹Code
;

834 
	}
}

857 
	$DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

860 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

863 
hdma
->
In°™˚
->
CNDTR
 = 
D©aLígth
;

866 if((
hdma
->
Inô
.
Dúe˘i⁄
Ë=
DMA_MEMORY_TO_PERIPH
)

869 
hdma
->
In°™˚
->
CPAR
 = 
D°Addªss
;

872 
hdma
->
In°™˚
->
CMAR
 = 
SrcAddªss
;

878 
hdma
->
In°™˚
->
CPAR
 = 
SrcAddªss
;

881 
hdma
->
In°™˚
->
CMAR
 = 
D°Addªss
;

883 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c

86 
	~"°m32f1xx_hÆ.h
"

103 #ifde‡
HAL_EXTI_MODULE_ENABLED


142 
HAL_SètusTy≥Def
 
	$HAL_EXTI_SëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
)

144 
uöt32_t
 
ªgvÆ
;

145 
uöt32_t
 
löïos
;

146 
uöt32_t
 
masklöe
;

149 i‡((
hexti
 =
NULL
Ë|| (
pExtiC⁄fig
 == NULL))

151  
HAL_ERROR
;

155 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
pExtiC⁄fig
->
Löe
));

156 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
pExtiC⁄fig
->
Mode
));

159 
hexti
->
Löe
 = 
pExtiC⁄fig
->Line;

162 
löïos
 = (
pExtiC⁄fig
->
Löe
 & 
EXTI_PIN_MASK
);

163 
masklöe
 = (1uL << 
löïos
);

166 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_CONFIG
) != 0x00u)

168 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
pExtiC⁄fig
->
Triggî
));

172 i‡((
pExtiC⁄fig
->
Triggî
 & 
EXTI_TRIGGER_RISING
) != 0x00u)

174 
EXTI
->
RTSR
 |
masklöe
;

178 
EXTI
->
RTSR
 &~
masklöe
;

183 i‡((
pExtiC⁄fig
->
Triggî
 & 
EXTI_TRIGGER_FALLING
) != 0x00u)

185 
EXTI
->
FTSR
 |
masklöe
;

189 
EXTI
->
FTSR
 &~
masklöe
;

194 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_GPIO
) == EXTI_GPIO)

196 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PORT
(
pExtiC⁄fig
->
GPIOSñ
));

197 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PIN
(
löïos
));

199 
ªgvÆ
 = 
AFIO
->
EXTICR
[
löïos
 >> 2u];

200 
ªgvÆ
 &~(
AFIO_EXTICR1_EXTI0
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u)));

201 
ªgvÆ
 |(
pExtiC⁄fig
->
GPIOSñ
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u)));

202 
AFIO
->
EXTICR
[
löïos
 >> 2u] = 
ªgvÆ
;

208 i‡((
pExtiC⁄fig
->
Mode
 & 
EXTI_MODE_INTERRUPT
) != 0x00u)

210 
EXTI
->
IMR
 |
masklöe
;

214 
EXTI
->
IMR
 &~
masklöe
;

219 i‡((
pExtiC⁄fig
->
Mode
 & 
EXTI_MODE_EVENT
) != 0x00u)

221 
EXTI
->
EMR
 |
masklöe
;

225 
EXTI
->
EMR
 &~
masklöe
;

228  
HAL_OK
;

229 
	}
}

237 
HAL_SètusTy≥Def
 
	$HAL_EXTI_GëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
)

239 
uöt32_t
 
ªgvÆ
;

240 
uöt32_t
 
löïos
;

241 
uöt32_t
 
masklöe
;

244 i‡((
hexti
 =
NULL
Ë|| (
pExtiC⁄fig
 == NULL))

246  
HAL_ERROR
;

250 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

253 
pExtiC⁄fig
->
Löe
 = 
hexti
->Line;

256 
löïos
 = (
pExtiC⁄fig
->
Löe
 & 
EXTI_PIN_MASK
);

257 
masklöe
 = (1uL << 
löïos
);

262 i‡((
EXTI
->
IMR
 & 
masklöe
) != 0x00u)

264 
pExtiC⁄fig
->
Mode
 = 
EXTI_MODE_INTERRUPT
;

268 
pExtiC⁄fig
->
Mode
 = 
EXTI_MODE_NONE
;

273 i‡((
EXTI
->
EMR
 & 
masklöe
) != 0x00u)

275 
pExtiC⁄fig
->
Mode
 |
EXTI_MODE_EVENT
;

279 
pExtiC⁄fig
->
Triggî
 = 
EXTI_TRIGGER_NONE
;

280 
pExtiC⁄fig
->
GPIOSñ
 = 0x00u;

283 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_CONFIG
) != 0x00u)

286 i‡((
EXTI
->
RTSR
 & 
masklöe
) != 0x00u)

288 
pExtiC⁄fig
->
Triggî
 = 
EXTI_TRIGGER_RISING
;

293 i‡((
EXTI
->
FTSR
 & 
masklöe
) != 0x00u)

295 
pExtiC⁄fig
->
Triggî
 |
EXTI_TRIGGER_FALLING
;

299 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_GPIO
) == EXTI_GPIO)

301 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PIN
(
löïos
));

303 
ªgvÆ
 = 
AFIO
->
EXTICR
[
löïos
 >> 2u];

304 
pExtiC⁄fig
->
GPIOSñ
 = (
ªgvÆ
 >> (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u))Ë& 
AFIO_EXTICR1_EXTI0
;

308  
HAL_OK
;

309 
	}
}

316 
HAL_SètusTy≥Def
 
	$HAL_EXTI_CÀ¨C⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
)

318 
uöt32_t
 
ªgvÆ
;

319 
uöt32_t
 
löïos
;

320 
uöt32_t
 
masklöe
;

323 i‡(
hexti
 =
NULL
)

325  
HAL_ERROR
;

329 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

332 
löïos
 = (
hexti
->
Löe
 & 
EXTI_PIN_MASK
);

333 
masklöe
 = (1uL << 
löïos
);

336 
EXTI
->
IMR
 = (EXTI->IMR & ~
masklöe
);

339 
EXTI
->
EMR
 = (EXTI->EMR & ~
masklöe
);

342 i‡((
hexti
->
Löe
 & 
EXTI_CONFIG
) != 0x00u)

344 
EXTI
->
RTSR
 = (EXTI->RTSR & ~
masklöe
);

345 
EXTI
->
FTSR
 = (EXTI->FTSR & ~
masklöe
);

348 i‡((
hexti
->
Löe
 & 
EXTI_GPIO
) == EXTI_GPIO)

350 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PIN
(
löïos
));

352 
ªgvÆ
 = 
AFIO
->
EXTICR
[
löïos
 >> 2u];

353 
ªgvÆ
 &~(
AFIO_EXTICR1_EXTI0
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u)));

354 
AFIO
->
EXTICR
[
löïos
 >> 2u] = 
ªgvÆ
;

358  
HAL_OK
;

359 
	}
}

369 
HAL_SètusTy≥Def
 
HAL_EXTI_Regi°îCÆlback
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_CÆlbackIDTy≥Def
 
CÆlbackID
, (*
pPídögCb‚
)())

371 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

373 
CÆlbackID
)

375 
HAL_EXTI_COMMON_CB_ID
:

376 
hexti
->
PídögCÆlback
 = 
pPídögCb‚
;

380 
°©us
 = 
HAL_ERROR
;

384  
°©us
;

385 
	}
}

394 
HAL_SètusTy≥Def
 
	$HAL_EXTI_GëH™dÀ
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
ExtiLöe
)

397 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
ExtiLöe
));

400 i‡(
hexti
 =
NULL
)

402  
HAL_ERROR
;

407 
hexti
->
Löe
 = 
ExtiLöe
;

409  
HAL_OK
;

411 
	}
}

434 
	$HAL_EXTI_IRQH™dÀr
(
EXTI_H™dÀTy≥Def
 *
hexti
)

436 
uöt32_t
 
ªgvÆ
;

437 
uöt32_t
 
masklöe
;

440 
masklöe
 = (1uL << (
hexti
->
Löe
 & 
EXTI_PIN_MASK
));

443 
ªgvÆ
 = (
EXTI
->
PR
 & 
masklöe
);

444 i‡(
ªgvÆ
 != 0x00u)

447 
EXTI
->
PR
 = 
masklöe
;

450 i‡(
hexti
->
PídögCÆlback
 !
NULL
)

452 
hexti
->
	`PídögCÆlback
();

455 
	}
}

466 
uöt32_t
 
	$HAL_EXTI_GëPídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
Edge
)

468 
uöt32_t
 
ªgvÆ
;

469 
uöt32_t
 
masklöe
;

470 
uöt32_t
 
löïos
;

473 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

474 
	`as£π_∑øm
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
Löe
));

475 
	`as£π_∑øm
(
	`IS_EXTI_PENDING_EDGE
(
Edge
));

478 
	`UNUSED
(
Edge
);

481 
löïos
 = (
hexti
->
Löe
 & 
EXTI_PIN_MASK
);

482 
masklöe
 = (1uL << 
löïos
);

485 
ªgvÆ
 = ((
EXTI
->
PR
 & 
masklöe
Ë>> 
löïos
);

486  
ªgvÆ
;

487 
	}
}

498 
	$HAL_EXTI_CÀ¨Pídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
Edge
)

500 
uöt32_t
 
masklöe
;

503 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

504 
	`as£π_∑øm
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
Löe
));

505 
	`as£π_∑øm
(
	`IS_EXTI_PENDING_EDGE
(
Edge
));

508 
	`UNUSED
(
Edge
);

511 
masklöe
 = (1uL << (
hexti
->
Löe
 & 
EXTI_PIN_MASK
));

514 
EXTI
->
PR
 = 
masklöe
;

515 
	}
}

522 
	$HAL_EXTI_Gíî©eSWI
(
EXTI_H™dÀTy≥Def
 *
hexti
)

524 
uöt32_t
 
masklöe
;

527 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

528 
	`as£π_∑øm
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
Löe
));

531 
masklöe
 = (1uL << (
hexti
->
Löe
 & 
EXTI_PIN_MASK
));

534 
EXTI
->
SWIER
 = 
masklöe
;

535 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c

83 
	~"°m32f1xx_hÆ.h
"

89 #ifde‡
HAL_FLASH_MODULE_ENABLED


119 
FLASH_Pro˚ssTy≥Def
 
	gpFœsh
;

128 
FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

129 
FLASH_SëEº‹Code
();

130 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

166 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

168 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

169 
uöt8_t
 
ödex
 = 0;

170 
uöt8_t
 
nbôî©i⁄s
 = 0;

173 
	`__HAL_LOCK
(&
pFœsh
);

176 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

177 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

179 #i‡
	`deföed
(
FLASH_BANK2_END
)

180 if(
Addªss
 <
FLASH_BANK1_END
)

184 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

185 #i‡
	`deföed
(
FLASH_BANK2_END
)

190 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
(
FLASH_TIMEOUT_VALUE
);

194 if(
°©us
 =
HAL_OK
)

196 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

199 
nbôî©i⁄s
 = 1U;

201 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

204 
nbôî©i⁄s
 = 2U;

209 
nbôî©i⁄s
 = 4U;

212 
ödex
 = 0U; index < 
nbôî©i⁄s
; index++)

214 
	`FLASH_Progøm_HÆfW‹d
((
Addªss
 + (2U*
ödex
)), (
uöt16_t
)(
D©a
 >> (16U*index)));

216 #i‡
	`deföed
(
FLASH_BANK2_END
)

217 if(
Addªss
 <
FLASH_BANK1_END
)

221 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

224 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

225 #i‡
	`deföed
(
FLASH_BANK2_END
)

230 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
(
FLASH_TIMEOUT_VALUE
);

233 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

237 i‡(
°©us
 !
HAL_OK
)

245 
	`__HAL_UNLOCK
(&
pFœsh
);

247  
°©us
;

248 
	}
}

265 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

267 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

270 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

271 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

273 #i‡
	`deföed
(
FLASH_BANK2_END
)

275 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

277  
HAL_ERROR
;

280 if(
Addªss
 <
FLASH_BANK1_END
)

283 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
);

288 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

292 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

295 
pFœsh
.
Addªss
 = Address;

296 
pFœsh
.
D©a
 = Data;

298 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

300 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMHALFWORD
;

302 
pFœsh
.
D©aRemaöög
 = 1U;

304 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

306 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMWORD
;

308 
pFœsh
.
D©aRemaöög
 = 2U;

312 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMDOUBLEWORD
;

314 
pFœsh
.
D©aRemaöög
 = 4U;

318 
	`FLASH_Progøm_HÆfW‹d
(
Addªss
, (
uöt16_t
)
D©a
);

320  
°©us
;

321 
	}
}

327 
	$HAL_FLASH_IRQH™dÀr
()

329 
uöt32_t
 
addªs°mp
 = 0U;

332 #i‡
	`deföed
(
FLASH_BANK2_END
)

333 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK1
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK1
) || \

334 (
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
)))

336 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë||__HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR
))

340 
addªs°mp
 = 
pFœsh
.
Addªss
;

342 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

345 
	`FLASH_SëEº‹Code
();

348 
	`HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
addªs°mp
);

351 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

355 #i‡
	`deföed
(
FLASH_BANK2_END
)

356 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK1
))

359 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK1
);

361 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

364 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

368 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

370 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

373 
pFœsh
.
D©aRemaöög
--;

376 if(
pFœsh
.
D©aRemaöög
 != 0U)

378 
addªs°mp
 = 
pFœsh
.
Addªss
;

380 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

383 
addªs°mp
 = 
pFœsh
.
Addªss
 + 
FLASH_PAGE_SIZE
;

384 
pFœsh
.
Addªss
 = 
addªs°mp
;

387 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

389 
	`FLASH_PageEø£
(
addªs°mp
);

395 
pFœsh
.
Addªss
 = 
addªs°mp
 = 0xFFFFFFFFU;

396 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

398 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

401 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

404 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

406 #i‡
	`deföed
(
FLASH_BANK2_END
)

408 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR2
, 
FLASH_CR2_MER
))

413 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(0U);

416 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

418 #i‡
	`deföed
(
FLASH_BANK2_END
)

424 
pFœsh
.
D©aRemaöög
--;

427 if(
pFœsh
.
D©aRemaöög
 != 0U)

430 
pFœsh
.
Addªss
 += 2U;

431 
addªs°mp
 = 
pFœsh
.
Addªss
;

434 
pFœsh
.
D©a
 = (pFlash.Data >> 16U);

437 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

440 
	`FLASH_Progøm_HÆfW‹d
(
addªs°mp
, (
uöt16_t
)
pFœsh
.
D©a
);

446 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMHALFWORD
)

448 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

450 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMWORD
)

452 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
 - 2U);

456 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
 - 6U);

460 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

461 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

467 #i‡
	`deföed
(
FLASH_BANK2_END
)

469 if(
	`__HAL_FLASH_GET_FLAG
–
FLASH_FLAG_EOP_BANK2
))

472 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

475 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

477 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

480 
pFœsh
.
D©aRemaöög
--;

483 if(
pFœsh
.
D©aRemaöög
 != 0U)

486 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

489 
pFœsh
.
Addªss
 +
FLASH_PAGE_SIZE
;

490 
addªs°mp
 = 
pFœsh
.
Addªss
;

493 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

495 
	`FLASH_PageEø£
(
addªs°mp
);

502 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

503 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

506 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

509 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

512 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

514 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_MER
))

518 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(0U);

520 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

526 
pFœsh
.
D©aRemaöög
--;

529 if(
pFœsh
.
D©aRemaöög
 != 0U)

532 
pFœsh
.
Addªss
 += 2U;

533 
addªs°mp
 = 
pFœsh
.
Addªss
;

536 
pFœsh
.
D©a
 = (pFlash.Data >> 16U);

539 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

542 
	`FLASH_Progøm_HÆfW‹d
(
addªs°mp
, (
uöt16_t
)
pFœsh
.
D©a
);

548 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMHALFWORD
)

550 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

552 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMWORD
)

554 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
-2U);

558 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
-6U);

562 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

563 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

570 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_NONE
)

572 #i‡
	`deföed
(
FLASH_BANK2_END
)

574 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

575 
	`CLEAR_BIT
(
FLASH
->
CR2
, (
FLASH_CR2_PG
 | 
FLASH_CR2_PER
 | 
FLASH_CR2_MER
));

578 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
 | 
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

581 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

584 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

588 
	}
}

599 
__wók
 
	$HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

602 
	`UNUSED
(
Rëu∫VÆue
);

607 
	}
}

617 
__wók
 
	$HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

620 
	`UNUSED
(
Rëu∫VÆue
);

625 
	}
}

650 
HAL_SètusTy≥Def
 
	$HAL_FLASH_U∆ock
()

652 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

654 if(
	`READ_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
Ë!
RESET
)

657 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY1
);

658 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY2
);

661 if(
	`READ_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
Ë!
RESET
)

663 
°©us
 = 
HAL_ERROR
;

666 #i‡
	`deföed
(
FLASH_BANK2_END
)

667 if(
	`READ_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
Ë!
RESET
)

670 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY1
);

671 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY2
);

674 if(
	`READ_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
Ë!
RESET
)

676 
°©us
 = 
HAL_ERROR
;

681  
°©us
;

682 
	}
}

688 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Lock
()

691 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
);

693 #i‡
	`deföed
(
FLASH_BANK2_END
)

695 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
);

698  
HAL_OK
;

699 
	}
}

705 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_U∆ock
()

707 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
))

710 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY1
);

711 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY2
);

715  
HAL_ERROR
;

718  
HAL_OK
;

719 
	}
}

725 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Lock
()

728 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
);

730  
HAL_OK
;

731 
	}
}

738 
	$HAL_FLASH_OB_Launch
()

741 
	`HAL_NVIC_Sy°emRe£t
();

742 
	}
}

767 
uöt32_t
 
	$HAL_FLASH_GëEº‹
()

769  
pFœsh
.
Eº‹Code
;

770 
	}
}

790 
	$FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

793 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

795 #i‡
	`deföed
(
FLASH_BANK2_END
)

796 if(
Addªss
 <
FLASH_BANK1_END
)

800 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

801 #i‡
	`deföed
(
FLASH_BANK2_END
)

806 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

811 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

812 
	}
}

819 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

825 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

827 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
))

829 i‡(
Timeout
 !
HAL_MAX_DELAY
)

831 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

833  
HAL_TIMEOUT
;

839 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

842 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

845 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

846 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

847 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

850 
	`FLASH_SëEº‹Code
();

851  
HAL_ERROR
;

855  
HAL_OK
;

856 
	}
}

858 #i‡
deföed
(
FLASH_BANK2_END
)

864 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄B™k2
(
uöt32_t
 
Timeout
)

870 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

872 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY_BANK2
))

874 i‡(
Timeout
 !
HAL_MAX_DELAY
)

876 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

878  
HAL_TIMEOUT
;

884 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK2
))

887 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

890 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

893 
	`FLASH_SëEº‹Code
();

894  
HAL_ERROR
;

898  
HAL_OK
;

900 
	}
}

907 
	$FLASH_SëEº‹Code
()

909 
uöt32_t
 
Êags
 = 0U;

911 #i‡
	`deföed
(
FLASH_BANK2_END
)

912 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_WRPERR_BANK2
))

914 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
))

917 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_WRP
;

918 #i‡
	`deföed
(
FLASH_BANK2_END
)

919 
Êags
 |
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_WRPERR_BANK2
;

921 
Êags
 |
FLASH_FLAG_WRPERR
;

924 #i‡
	`deföed
(
FLASH_BANK2_END
)

925 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

927 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

930 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PROG
;

931 #i‡
	`deföed
(
FLASH_BANK2_END
)

932 
Êags
 |
FLASH_FLAG_PGERR
 | 
FLASH_FLAG_PGERR_BANK2
;

934 
Êags
 |
FLASH_FLAG_PGERR
;

937 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
))

939 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_OPTV
;

940 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_OPTVERR
);

944 
	`__HAL_FLASH_CLEAR_FLAG
(
Êags
);

945 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c

41 
	~"°m32f1xx_hÆ.h
"

46 #ifde‡
HAL_FLASH_MODULE_ENABLED


55 
FLASH_Pro˚ssTy≥Def
 
pFœsh
;

74 
	#FLASH_POSITION_IWDGSW_BIT
 
FLASH_OBR_IWDG_SW_Pos


	)

75 
	#FLASH_POSITION_OB_USERDATA0_BIT
 
FLASH_OBR_DATA0_Pos


	)

76 
	#FLASH_POSITION_OB_USERDATA1_BIT
 
FLASH_OBR_DATA1_Pos


	)

95 
FLASH_MassEø£
(
uöt32_t
 
B™ks
);

96 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

99 
HAL_SètusTy≥Def
 
FLASH_OB_E«bÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
);

100 
HAL_SètusTy≥Def
 
FLASH_OB_DißbÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
);

101 
HAL_SètusTy≥Def
 
FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
RódPrŸe˘Levñ
);

102 
HAL_SètusTy≥Def
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
U£rC⁄fig
);

103 
HAL_SètusTy≥Def
 
FLASH_OB_ProgømD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

104 
uöt32_t
 
FLASH_OB_GëWRP
();

105 
uöt32_t
 
FLASH_OB_GëRDP
();

106 
uöt8_t
 
FLASH_OB_GëU£r
();

157 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
)

159 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

160 
uöt32_t
 
addªss
 = 0U;

163 
	`__HAL_LOCK
(&
pFœsh
);

166 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

168 i‡(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

170 #i‡
	`deföed
(
FLASH_BANK2_END
)

171 i‡(
pEø£Inô
->
B™ks
 =
FLASH_BANK_BOTH
)

175 i‡((
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
) && \

176 (
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
))

179 
	`FLASH_MassEø£
(
FLASH_BANK_BOTH
);

182 i‡((
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
) && \

183 (
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
))

185 
°©us
 = 
HAL_OK
;

189 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

190 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

193 i‡(
pEø£Inô
->
B™ks
 =
FLASH_BANK_2
)

197 i‡(
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

200 
	`FLASH_MassEø£
(
FLASH_BANK_2
);

203 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

206 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

214 i‡(
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

217 
	`FLASH_MassEø£
(
FLASH_BANK_1
);

220 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

223 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

231 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

232 
	`as£π_∑øm
(
	`IS_FLASH_NB_PAGES
(
pEø£Inô
->
PageAddªss
,ÖEø£Inô->
NbPages
));

234 #i‡
	`deföed
(
FLASH_BANK2_END
)

236 if(
pEø£Inô
->
PageAddªss
 > 
FLASH_BANK1_END
)

239 i‡(
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

242 *
PageEº‹
 = 0xFFFFFFFFU;

245 
addªss
 = 
pEø£Inô
->
PageAddªss
;

246 
addªss
 < (
pEø£Inô
->
PageAddªss
 + (pEø£Inô->
NbPages
)*
FLASH_PAGE_SIZE
);

247 
addªss
 +
FLASH_PAGE_SIZE
)

249 
	`FLASH_PageEø£
(
addªss
);

252 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

255 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

257 i‡(
°©us
 !
HAL_OK
)

260 *
PageEº‹
 = 
addªss
;

271 i‡(
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

274 *
PageEº‹
 = 0xFFFFFFFFU;

277 
addªss
 = 
pEø£Inô
->
PageAddªss
;

278 
addªss
 < ((
pEø£Inô
->
NbPages
 * 
FLASH_PAGE_SIZE
Ë+ÖEø£Inô->
PageAddªss
);

279 
addªss
 +
FLASH_PAGE_SIZE
)

281 
	`FLASH_PageEø£
(
addªss
);

284 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

287 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

289 i‡(
°©us
 !
HAL_OK
)

292 *
PageEº‹
 = 
addªss
;

301 
	`__HAL_UNLOCK
(&
pFœsh
);

303  
°©us
;

304 
	}
}

317 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
)

319 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

322 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

324  
HAL_ERROR
;

328 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

331 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

333 #i‡
	`deföed
(
FLASH_BANK2_END
)

335 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

338 i‡(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

341 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_MASSERASE
;

342 
	`FLASH_MassEø£
(
pEø£Inô
->
B™ks
);

349 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

350 
	`as£π_∑øm
(
	`IS_FLASH_NB_PAGES
(
pEø£Inô
->
PageAddªss
,ÖEø£Inô->
NbPages
));

352 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PAGEERASE
;

353 
pFœsh
.
D©aRemaöög
 = 
pEø£Inô
->
NbPages
;

354 
pFœsh
.
Addªss
 = 
pEø£Inô
->
PageAddªss
;

357 
	`FLASH_PageEø£
(
pEø£Inô
->
PageAddªss
);

360  
°©us
;

361 
	}
}

392 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBEø£
()

394 
uöt8_t
 
rd±mp
 = 
OB_RDP_LEVEL_0
;

395 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

398 
rd±mp
 = 
	`FLASH_OB_GëRDP
();

401 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

403 if(
°©us
 =
HAL_OK
)

406 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

409 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

410 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

413 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

416 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

418 if(
°©us
 =
HAL_OK
)

421 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
rd±mp
);

426  
°©us
;

427 
	}
}

441 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

443 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

446 
	`__HAL_LOCK
(&
pFœsh
);

449 
	`as£π_∑øm
(
	`IS_OPTIONBYTE
(
pOBInô
->
O±i⁄Ty≥
));

452 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_WRP
) == OPTIONBYTE_WRP)

454 
	`as£π_∑øm
(
	`IS_WRPSTATE
(
pOBInô
->
WRPSèã
));

455 i‡(
pOBInô
->
WRPSèã
 =
OB_WRPSTATE_ENABLE
)

458 
°©us
 = 
	`FLASH_OB_E«bÀWRP
(
pOBInô
->
WRPPage
);

463 
°©us
 = 
	`FLASH_OB_DißbÀWRP
(
pOBInô
->
WRPPage
);

465 i‡(
°©us
 !
HAL_OK
)

468 
	`__HAL_UNLOCK
(&
pFœsh
);

469  
°©us
;

474 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_RDP
) == OPTIONBYTE_RDP)

476 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
pOBInô
->
RDPLevñ
);

477 i‡(
°©us
 !
HAL_OK
)

480 
	`__HAL_UNLOCK
(&
pFœsh
);

481  
°©us
;

486 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_USER
) == OPTIONBYTE_USER)

488 
°©us
 = 
	`FLASH_OB_U£rC⁄fig
(
pOBInô
->
USERC⁄fig
);

489 i‡(
°©us
 !
HAL_OK
)

492 
	`__HAL_UNLOCK
(&
pFœsh
);

493  
°©us
;

498 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_DATA
) == OPTIONBYTE_DATA)

500 
°©us
 = 
	`FLASH_OB_ProgømD©a
(
pOBInô
->
DATAAddªss
,ÖOBInô->
DATAD©a
);

501 i‡(
°©us
 !
HAL_OK
)

504 
	`__HAL_UNLOCK
(&
pFœsh
);

505  
°©us
;

510 
	`__HAL_UNLOCK
(&
pFœsh
);

512  
°©us
;

513 
	}
}

522 
	$HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

524 
pOBInô
->
O±i⁄Ty≥
 = 
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
;

527 
pOBInô
->
WRPPage
 = 
	`FLASH_OB_GëWRP
();

530 
pOBInô
->
RDPLevñ
 = 
	`FLASH_OB_GëRDP
();

533 
pOBInô
->
USERC⁄fig
 = 
	`FLASH_OB_GëU£r
();

534 
	}
}

544 
uöt32_t
 
	$HAL_FLASHEx_OBGëU£rD©a
(
uöt32_t
 
DATAAdªss
)

546 
uöt32_t
 
vÆue
 = 0;

548 i‡(
DATAAdªss
 =
OB_DATA_ADDRESS_DATA0
)

551 
vÆue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA0
Ë>> 
FLASH_POSITION_OB_USERDATA0_BIT
;

556 
vÆue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA1
Ë>> 
FLASH_POSITION_OB_USERDATA1_BIT
;

559  
vÆue
;

560 
	}
}

590 
	$FLASH_MassEø£
(
uöt32_t
 
B™ks
)

593 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

596 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

598 #i‡
	`deföed
(
FLASH_BANK2_END
)

599 if(
B™ks
 =
FLASH_BANK_BOTH
)

602 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

603 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

604 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

605 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

607 if(
B™ks
 =
FLASH_BANK_2
)

610 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

611 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

616 #i‡!
	`deföed
(
FLASH_BANK2_END
)

618 
	`UNUSED
(
B™ks
);

621 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

622 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

623 #i‡
	`deföed
(
FLASH_BANK2_END
)

626 
	}
}

639 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
)

641 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

642 
uöt16_t
 
WRP0_D©a
 = 0xFFFF;

643 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

644 
uöt16_t
 
WRP1_D©a
 = 0xFFFF;

646 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

647 
uöt16_t
 
WRP2_D©a
 = 0xFFFF;

649 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

650 
uöt16_t
 
WRP3_D©a
 = 0xFFFF;

654 
	`as£π_∑øm
(
	`IS_OB_WRP
(
WrôePrŸe˘Page
));

657 
WrôePrŸe˘Page
 = (
uöt32_t
)(~((~
	`FLASH_OB_GëWRP
()) | WriteProtectPage));

659 #i‡
	`deföed
(
OB_WRP_PAGES0TO15MASK
)

660 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO15MASK
);

661 #ñi‡
	`deföed
(
OB_WRP_PAGES0TO31MASK
)

662 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO31MASK
);

665 #i‡
	`deföed
(
OB_WRP_PAGES16TO31MASK
)

666 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES16TO31MASK
) >> 8U);

667 #ñi‡
	`deföed
(
OB_WRP_PAGES32TO63MASK
)

668 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO63MASK
) >> 8U);

671 #i‡
	`deföed
(
OB_WRP_PAGES64TO95MASK
)

672 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES64TO95MASK
) >> 16U);

674 #i‡
	`deföed
(
OB_WRP_PAGES32TO47MASK
)

675 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO47MASK
) >> 16U);

678 #i‡
	`deföed
(
OB_WRP_PAGES96TO127MASK
)

679 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES96TO127MASK
) >> 24U);

680 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO255MASK
)

681 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO255MASK
) >> 24U);

682 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO511MASK
)

683 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO511MASK
) >> 24U);

684 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO127MASK
)

685 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO127MASK
) >> 24U);

689 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

691 if(
°©us
 =
HAL_OK
)

694 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

697 
°©us
 = 
	`HAL_FLASHEx_OBEø£
();

698 i‡(
°©us
 =
HAL_OK
)

701 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

703 #i‡
	`deföed
(
FLASH_WRP0_WRP0
)

704 if(
WRP0_D©a
 != 0xFFU)

706 
OB
->
WRP0
 &
WRP0_D©a
;

709 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

713 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

714 if((
°©us
 =
HAL_OK
Ë&& (
WRP1_D©a
 != 0xFFU))

716 
OB
->
WRP1
 &
WRP1_D©a
;

719 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

723 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

724 if((
°©us
 =
HAL_OK
Ë&& (
WRP2_D©a
 != 0xFFU))

726 
OB
->
WRP2
 &
WRP2_D©a
;

729 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

733 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

734 if((
°©us
 =
HAL_OK
Ë&& (
WRP3_D©a
 != 0xFFU))

736 
OB
->
WRP3
 &
WRP3_D©a
;

739 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

744 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

748  
°©us
;

749 
	}
}

762 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
)

764 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

765 
uöt16_t
 
WRP0_D©a
 = 0xFFFF;

766 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

767 
uöt16_t
 
WRP1_D©a
 = 0xFFFF;

769 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

770 
uöt16_t
 
WRP2_D©a
 = 0xFFFF;

772 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

773 
uöt16_t
 
WRP3_D©a
 = 0xFFFF;

777 
	`as£π_∑øm
(
	`IS_OB_WRP
(
WrôePrŸe˘Page
));

780 
WrôePrŸe˘Page
 = (
	`FLASH_OB_GëWRP
() | WriteProtectPage);

782 #i‡
	`deföed
(
OB_WRP_PAGES0TO15MASK
)

783 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO15MASK
);

784 #ñi‡
	`deföed
(
OB_WRP_PAGES0TO31MASK
)

785 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO31MASK
);

788 #i‡
	`deföed
(
OB_WRP_PAGES16TO31MASK
)

789 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES16TO31MASK
) >> 8U);

790 #ñi‡
	`deföed
(
OB_WRP_PAGES32TO63MASK
)

791 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO63MASK
) >> 8U);

794 #i‡
	`deföed
(
OB_WRP_PAGES64TO95MASK
)

795 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES64TO95MASK
) >> 16U);

797 #i‡
	`deföed
(
OB_WRP_PAGES32TO47MASK
)

798 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO47MASK
) >> 16U);

801 #i‡
	`deföed
(
OB_WRP_PAGES96TO127MASK
)

802 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES96TO127MASK
) >> 24U);

803 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO255MASK
)

804 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO255MASK
) >> 24U);

805 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO511MASK
)

806 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO511MASK
) >> 24U);

807 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO127MASK
)

808 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO127MASK
) >> 24U);

813 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

815 if(
°©us
 =
HAL_OK
)

818 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

821 
°©us
 = 
	`HAL_FLASHEx_OBEø£
();

822 i‡(
°©us
 =
HAL_OK
)

824 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

826 #i‡
	`deföed
(
FLASH_WRP0_WRP0
)

827 if(
WRP0_D©a
 != 0xFFU)

829 
OB
->
WRP0
 |
WRP0_D©a
;

832 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

836 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

837 if((
°©us
 =
HAL_OK
Ë&& (
WRP1_D©a
 != 0xFFU))

839 
OB
->
WRP1
 |
WRP1_D©a
;

842 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

846 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

847 if((
°©us
 =
HAL_OK
Ë&& (
WRP2_D©a
 != 0xFFU))

849 
OB
->
WRP2
 |
WRP2_D©a
;

852 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

856 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

857 if((
°©us
 =
HAL_OK
Ë&& (
WRP3_D©a
 != 0xFFU))

859 
OB
->
WRP3
 |
WRP3_D©a
;

862 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

867 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

870  
°©us
;

871 
	}
}

881 
HAL_SètusTy≥Def
 
	$FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
RódPrŸe˘Levñ
)

883 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

886 
	`as£π_∑øm
(
	`IS_OB_RDP_LEVEL
(
RódPrŸe˘Levñ
));

889 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

891 if(
°©us
 =
HAL_OK
)

894 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

897 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

898 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

901 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

904 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

906 if(
°©us
 =
HAL_OK
)

909 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

911 
	`WRITE_REG
(
OB
->
RDP
, 
RódPrŸe˘Levñ
);

914 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

917 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

921  
°©us
;

922 
	}
}

932 
HAL_SètusTy≥Def
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
U£rC⁄fig
)

934 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

937 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
((
U£rC⁄fig
&
OB_IWDG_SW
)));

938 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
((
U£rC⁄fig
&
OB_STOP_NO_RST
)));

939 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
((
U£rC⁄fig
&
OB_STDBY_NO_RST
)));

940 #i‡
	`deföed
(
FLASH_BANK2_END
)

941 
	`as£π_∑øm
(
	`IS_OB_BOOT1
((
U£rC⁄fig
&
OB_BOOT1_SET
)));

945 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

947 if(
°©us
 =
HAL_OK
)

950 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

953 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

955 #i‡
	`deföed
(
FLASH_BANK2_END
)

956 
OB
->
USER
 = (
U£rC⁄fig
 | 0xF0U);

958 
OB
->
USER
 = (
U£rC⁄fig
 | 0x88U);

962 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

965 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

968  
°©us
;

969 
	}
}

983 
HAL_SètusTy≥Def
 
	$FLASH_OB_ProgømD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

985 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

988 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

991 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

993 if(
°©us
 =
HAL_OK
)

996 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

999 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1000 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

1003 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1006 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1009  
°©us
;

1010 
	}
}

1016 
uöt32_t
 
	$FLASH_OB_GëWRP
()

1019  (
uöt32_t
)(
	`READ_REG
(
FLASH
->
WRPR
));

1020 
	}
}

1029 
uöt32_t
 
	$FLASH_OB_GëRDP
()

1031 
uöt32_t
 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1032 
uöt32_t
 
tmp_ªg
 = 0U;

1035 
tmp_ªg
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_RDPRT
);

1037 i‡(
tmp_ªg
 =
FLASH_OBR_RDPRT
)

1039 
ªad°©us
 = 
OB_RDP_LEVEL_1
;

1043 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1046  
ªad°©us
;

1047 
	}
}

1055 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1058  (
uöt8_t
)((
	`READ_REG
(
FLASH
->
OBR
Ë& 
FLASH_OBR_USER
Ë>> 
FLASH_POSITION_IWDGSW_BIT
);

1059 
	}
}

1084 
	$FLASH_PageEø£
(
uöt32_t
 
PageAddªss
)

1087 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1089 #i‡
	`deföed
(
FLASH_BANK2_END
)

1090 if(
PageAddªss
 > 
FLASH_BANK1_END
)

1093 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

1094 
	`WRITE_REG
(
FLASH
->
AR2
, 
PageAddªss
);

1095 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

1101 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

1102 
	`WRITE_REG
(
FLASH
->
AR
, 
PageAddªss
);

1103 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

1104 #i‡
	`deföed
(
FLASH_BANK2_END
)

1107 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c

105 
	~"°m32f1xx_hÆ.h
"

116 #ifde‡
HAL_GPIO_MODULE_ENABLED


123 
	#GPIO_MODE
 0x00000003u

	)

124 
	#EXTI_MODE
 0x10000000u

	)

125 
	#GPIO_MODE_IT
 0x00010000u

	)

126 
	#GPIO_MODE_EVT
 0x00020000u

	)

127 
	#RISING_EDGE
 0x00100000u

	)

128 
	#FALLING_EDGE
 0x00200000u

	)

129 
	#GPIO_OUTPUT_TYPE
 0x00000010u

	)

131 
	#GPIO_NUMBER
 16u

	)

134 
	#GPIO_CR_MODE_INPUT
 0x00000000u

	)

135 
	#GPIO_CR_CNF_ANALOG
 0x00000000u

	)

136 
	#GPIO_CR_CNF_INPUT_FLOATING
 0x00000004u

	)

137 
	#GPIO_CR_CNF_INPUT_PU_PD
 0x00000008u

	)

138 
	#GPIO_CR_CNF_GP_OUTPUT_PP
 0x00000000u

	)

139 
	#GPIO_CR_CNF_GP_OUTPUT_OD
 0x00000004u

	)

140 
	#GPIO_CR_CNF_AF_OUTPUT_PP
 0x00000008u

	)

141 
	#GPIO_CR_CNF_AF_OUTPUT_OD
 0x0000000Cu

	)

178 
	$HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
)

180 
uöt32_t
 
posôi⁄
 = 0x00u;

181 
uöt32_t
 
i›osôi⁄
;

182 
uöt32_t
 
iocuºít
;

183 
uöt32_t
 
ãmp
;

184 
uöt32_t
 
c⁄fig
 = 0x00u;

185 
__IO
 
uöt32_t
 *
c⁄figªgi°î
;

186 
uöt32_t
 
ªgi°îoff£t
;

189 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

190 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Inô
->
Pö
));

191 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_Inô
->
Mode
));

194 ((
GPIO_Inô
->
Pö
Ë>> 
posôi⁄
) != 0x00u)

197 
i›osôi⁄
 = (0x01uL << 
posôi⁄
);

200 
iocuºít
 = (
uöt32_t
)(
GPIO_Inô
->
Pö
Ë& 
i›osôi⁄
;

202 i‡(
iocuºít
 =
i›osôi⁄
)

205 
	`as£π_∑øm
(
	`IS_GPIO_AF_INSTANCE
(
GPIOx
));

208 
GPIO_Inô
->
Mode
)

211 
GPIO_MODE_OUTPUT_PP
:

213 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

214 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_GP_OUTPUT_PP
;

218 
GPIO_MODE_OUTPUT_OD
:

220 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

221 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_GP_OUTPUT_OD
;

225 
GPIO_MODE_AF_PP
:

227 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

228 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_AF_OUTPUT_PP
;

232 
GPIO_MODE_AF_OD
:

234 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

235 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_AF_OUTPUT_OD
;

239 
GPIO_MODE_INPUT
:

240 
GPIO_MODE_IT_RISING
:

241 
GPIO_MODE_IT_FALLING
:

242 
GPIO_MODE_IT_RISING_FALLING
:

243 
GPIO_MODE_EVT_RISING
:

244 
GPIO_MODE_EVT_FALLING
:

245 
GPIO_MODE_EVT_RISING_FALLING
:

247 
	`as£π_∑øm
(
	`IS_GPIO_PULL
(
GPIO_Inô
->
PuŒ
));

248 i‡(
GPIO_Inô
->
PuŒ
 =
GPIO_NOPULL
)

250 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_FLOATING
;

252 i‡(
GPIO_Inô
->
PuŒ
 =
GPIO_PULLUP
)

254 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

257 
GPIOx
->
BSRR
 = 
i›osôi⁄
;

261 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

264 
GPIOx
->
BRR
 = 
i›osôi⁄
;

269 
GPIO_MODE_ANALOG
:

270 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_ANALOG
;

280 
c⁄figªgi°î
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

281 
ªgi°îoff£t
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? (
posôi⁄
 << 2u) : ((position - 8u) << 2u);

284 
	`MODIFY_REG
((*
c⁄figªgi°î
), ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
Ë<< 
ªgi°îoff£t
), (
c⁄fig
 <<Ñegisteroffset));

288 i‡((
GPIO_Inô
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

291 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

292 
ãmp
 = 
AFIO
->
EXTICR
[
posôi⁄
 >> 2u];

293 
	`CLEAR_BIT
(
ãmp
, (0x0FuË<< (4u * (
posôi⁄
 & 0x03u)));

294 
	`SET_BIT
(
ãmp
, (
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4u * (
posôi⁄
 & 0x03u)));

295 
AFIO
->
EXTICR
[
posôi⁄
 >> 2u] = 
ãmp
;

299 i‡((
GPIO_Inô
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

301 
	`SET_BIT
(
EXTI
->
RTSR
, 
iocuºít
);

305 
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
iocuºít
);

309 i‡((
GPIO_Inô
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

311 
	`SET_BIT
(
EXTI
->
FTSR
, 
iocuºít
);

315 
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
iocuºít
);

319 i‡((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

321 
	`SET_BIT
(
EXTI
->
EMR
, 
iocuºít
);

325 
	`CLEAR_BIT
(
EXTI
->
EMR
, 
iocuºít
);

329 i‡((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

331 
	`SET_BIT
(
EXTI
->
IMR
, 
iocuºít
);

335 
	`CLEAR_BIT
(
EXTI
->
IMR
, 
iocuºít
);

340 
posôi⁄
++;

342 
	}
}

351 
	$HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
)

353 
uöt32_t
 
posôi⁄
 = 0x00u;

354 
uöt32_t
 
iocuºít
;

355 
uöt32_t
 
tmp
;

356 
__IO
 
uöt32_t
 *
c⁄figªgi°î
;

357 
uöt32_t
 
ªgi°îoff£t
;

360 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

361 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

364 (
GPIO_Pö
 >> 
posôi⁄
) != 0u)

367 
iocuºít
 = (
GPIO_Pö
Ë& (1uL << 
posôi⁄
);

369 i‡(
iocuºít
)

374 
tmp
 = 
AFIO
->
EXTICR
[
posôi⁄
 >> 2u];

375 
tmp
 &0x0FuL << (4u * (
posôi⁄
 & 0x03u));

376 i‡(
tmp
 =(
	`GPIO_GET_INDEX
(
GPIOx
Ë<< (4u * (
posôi⁄
 & 0x03u))))

379 
	`CLEAR_BIT
(
EXTI
->
IMR
, (
uöt32_t
)
iocuºít
);

380 
	`CLEAR_BIT
(
EXTI
->
EMR
, (
uöt32_t
)
iocuºít
);

383 
	`CLEAR_BIT
(
EXTI
->
FTSR
, (
uöt32_t
)
iocuºít
);

384 
	`CLEAR_BIT
(
EXTI
->
RTSR
, (
uöt32_t
)
iocuºít
);

386 
tmp
 = 0x0FuL << (4u * (
posôi⁄
 & 0x03u));

387 
	`CLEAR_BIT
(
AFIO
->
EXTICR
[
posôi⁄
 >> 2u], 
tmp
);

392 
c⁄figªgi°î
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

393 
ªgi°îoff£t
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? (
posôi⁄
 << 2u) : ((position - 8u) << 2u);

396 
	`MODIFY_REG
(*
c⁄figªgi°î
, ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
Ë<< 
ªgi°îoff£t
), 
GPIO_CRL_CNF0_0
 <<Ñegisteroffset);

399 
	`CLEAR_BIT
(
GPIOx
->
ODR
, 
iocuºít
);

402 
posôi⁄
++;

404 
	}
}

431 
GPIO_PöSèã
 
	$HAL_GPIO_RódPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

433 
GPIO_PöSèã
 
bô°©us
;

436 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

438 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
GPIO_PIN_RESET
)

440 
bô°©us
 = 
GPIO_PIN_SET
;

444 
bô°©us
 = 
GPIO_PIN_RESET
;

446  
bô°©us
;

447 
	}
}

465 
	$HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
)

468 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

469 
	`as£π_∑øm
(
	`IS_GPIO_PIN_ACTION
(
PöSèã
));

471 i‡(
PöSèã
 !
GPIO_PIN_RESET
)

473 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

477 
GPIOx
->
BSRR
 = (
uöt32_t
)
GPIO_Pö
 << 16u;

479 
	}
}

487 
	$HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

489 
uöt32_t
 
odr
;

492 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

495 
odr
 = 
GPIOx
->
ODR
;

498 
GPIOx
->
BSRR
 = ((
odr
 & 
GPIO_Pö
Ë<< 
GPIO_NUMBER
) | (~odr & GPIO_Pin);

499 
	}
}

511 
HAL_SètusTy≥Def
 
	$HAL_GPIO_LockPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

513 
__IO
 
uöt32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

516 
	`as£π_∑øm
(
	`IS_GPIO_LOCK_INSTANCE
(
GPIOx
));

517 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

520 
	`SET_BIT
(
tmp
, 
GPIO_Pö
);

522 
GPIOx
->
LCKR
 = 
tmp
;

524 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

526 
GPIOx
->
LCKR
 = 
tmp
;

528 
tmp
 = 
GPIOx
->
LCKR
;

531 i‡((
uöt32_t
)(
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
))

533  
HAL_OK
;

537  
HAL_ERROR
;

539 
	}
}

546 
	$HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
)

549 i‡(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_Pö
) != 0x00u)

551 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_Pö
);

552 
	`HAL_GPIO_EXTI_CÆlback
(
GPIO_Pö
);

554 
	}
}

561 
__wók
 
	$HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
)

564 
	`UNUSED
(
GPIO_Pö
);

568 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c

40 
	~"°m32f1xx_hÆ.h
"

51 #ifde‡
HAL_GPIO_MODULE_ENABLED


81 
	$HAL_GPIOEx_C⁄figEvítout
(
uöt32_t
 
GPIO_P‹tSour˚
, uöt32_à
GPIO_PöSour˚
)

84 
	`as£π_∑øm
(
	`IS_AFIO_EVENTOUT_PORT
(
GPIO_P‹tSour˚
));

85 
	`as£π_∑øm
(
	`IS_AFIO_EVENTOUT_PIN
(
GPIO_PöSour˚
));

88 
	`MODIFY_REG
(
AFIO
->
EVCR
, (
AFIO_EVCR_PORT
Ë| (
AFIO_EVCR_PIN
), (
GPIO_P‹tSour˚
Ë| (
GPIO_PöSour˚
));

89 
	}
}

95 
	$HAL_GPIOEx_E«bÀEvítout
()

97 
	`SET_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

98 
	}
}

104 
	$HAL_GPIOEx_DißbÀEvítout
()

106 
	`CLEAR_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

107 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_i2c.c

319 
	~"°m32f1xx_hÆ.h
"

330 #ifde‡
HAL_I2C_MODULE_ENABLED


337 
	#I2C_TIMEOUT_FLAG
 35U

	)

338 
	#I2C_TIMEOUT_BUSY_FLAG
 25U

	)

339 
	#I2C_TIMEOUT_STOP_FLAG
 5U

	)

340 
	#I2C_NO_OPTION_FRAME
 0xFFFF0000U

	)

343 
	#I2C_STATE_MSK
 ((
uöt32_t
)((uöt32_t)((uöt32_t)
HAL_I2C_STATE_BUSY_TX
 | (uöt32_t)
HAL_I2C_STATE_BUSY_RX
Ë& (uöt32_t)(~((uöt32_t)
HAL_I2C_STATE_READY
)))Ë

	)

344 
	#I2C_STATE_NONE
 ((
uöt32_t
)(
HAL_I2C_MODE_NONE
)Ë

	)

345 
	#I2C_STATE_MASTER_BUSY_TX
 ((
uöt32_t
)(((uöt32_t)
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| (uöt32_t)
HAL_I2C_MODE_MASTER
)Ë

	)

346 
	#I2C_STATE_MASTER_BUSY_RX
 ((
uöt32_t
)(((uöt32_t)
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| (uöt32_t)
HAL_I2C_MODE_MASTER
)Ë

	)

347 
	#I2C_STATE_SLAVE_BUSY_TX
 ((
uöt32_t
)(((uöt32_t)
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| (uöt32_t)
HAL_I2C_MODE_SLAVE
)Ë

	)

348 
	#I2C_STATE_SLAVE_BUSY_RX
 ((
uöt32_t
)(((uöt32_t)
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| (uöt32_t)
HAL_I2C_MODE_SLAVE
)Ë

	)

359 
	#I2C_GET_DMA_REMAIN_DATA
(
__HANDLE__
Ë
	`__HAL_DMA_GET_COUNTER
(__HANDLE__)

	)

370 
I2C_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

371 
I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

372 
I2C_DMAAb‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

374 
I2C_ITEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
);

376 
HAL_SètusTy≥Def
 
I2C_Ma°îReque°Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

377 
HAL_SètusTy≥Def
 
I2C_Ma°îReque°Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

378 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

379 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

382 
HAL_SètusTy≥Def
 
I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
);

383 
HAL_SètusTy≥Def
 
I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
);

384 
HAL_SètusTy≥Def
 
I2C_WaôOnTXEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

385 
HAL_SètusTy≥Def
 
I2C_WaôOnBTFFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

386 
HAL_SètusTy≥Def
 
I2C_WaôOnRXNEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

387 
HAL_SètusTy≥Def
 
I2C_WaôOnSTOPFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

388 
HAL_SètusTy≥Def
 
I2C_WaôOnSTOPReque°ThroughIT
(
I2C_H™dÀTy≥Def
 *
hi2c
);

389 
HAL_SètusTy≥Def
 
I2C_IsAcknowÀdgeFaûed
(
I2C_H™dÀTy≥Def
 *
hi2c
);

392 
I2C_Ma°îTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

393 
I2C_Ma°îTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

394 
I2C_Ma°îRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

395 
I2C_Ma°îRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

396 
I2C_Ma°î_SB
(
I2C_H™dÀTy≥Def
 *
hi2c
);

397 
I2C_Ma°î_ADD10
(
I2C_H™dÀTy≥Def
 *
hi2c
);

398 
I2C_Ma°î_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
);

400 
I2C_SœveTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

401 
I2C_SœveTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

402 
I2C_SœveRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

403 
I2C_SœveRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

404 
I2C_Sœve_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
IT2Fœgs
);

405 
I2C_Sœve_STOPF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

406 
I2C_Sœve_AF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

408 
I2C_Mem‹yTønsmô_TXE_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

411 
I2C_C⁄vîtOthîX„rO±i⁄s
(
I2C_H™dÀTy≥Def
 *
hi2c
);

414 
I2C_Flush_DR
(
I2C_H™dÀTy≥Def
 *
hi2c
);

463 
HAL_SètusTy≥Def
 
	$HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

465 
uöt32_t
 
‰eqønge
;

466 
uöt32_t
 
p˛k1
;

469 i‡(
hi2c
 =
NULL
)

471  
HAL_ERROR
;

475 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

476 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
hi2c
->
Inô
.
ClockS≥ed
));

477 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
hi2c
->
Inô
.
DutyCy˛e
));

478 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
hi2c
->
Inô
.
OwnAddªss1
));

479 
	`as£π_∑øm
(
	`IS_I2C_ADDRESSING_MODE
(
hi2c
->
Inô
.
AddªssögMode
));

480 
	`as£π_∑øm
(
	`IS_I2C_DUAL_ADDRESS
(
hi2c
->
Inô
.
DuÆAddªssMode
));

481 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2
(
hi2c
->
Inô
.
OwnAddªss2
));

482 
	`as£π_∑øm
(
	`IS_I2C_GENERAL_CALL
(
hi2c
->
Inô
.
GíîÆCÆlMode
));

483 
	`as£π_∑øm
(
	`IS_I2C_NO_STRETCH
(
hi2c
->
Inô
.
NoSåëchMode
));

485 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_RESET
)

488 
hi2c
->
Lock
 = 
HAL_UNLOCKED
;

490 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

492 
hi2c
->
Ma°îTxC∂tCÆlback
 = 
HAL_I2C_Ma°îTxC∂tCÆlback
;

493 
hi2c
->
Ma°îRxC∂tCÆlback
 = 
HAL_I2C_Ma°îRxC∂tCÆlback
;

494 
hi2c
->
SœveTxC∂tCÆlback
 = 
HAL_I2C_SœveTxC∂tCÆlback
;

495 
hi2c
->
SœveRxC∂tCÆlback
 = 
HAL_I2C_SœveRxC∂tCÆlback
;

496 
hi2c
->
Li°íC∂tCÆlback
 = 
HAL_I2C_Li°íC∂tCÆlback
;

497 
hi2c
->
MemTxC∂tCÆlback
 = 
HAL_I2C_MemTxC∂tCÆlback
;

498 
hi2c
->
MemRxC∂tCÆlback
 = 
HAL_I2C_MemRxC∂tCÆlback
;

499 
hi2c
->
Eº‹CÆlback
 = 
HAL_I2C_Eº‹CÆlback
;

500 
hi2c
->
Ab‹tC∂tCÆlback
 = 
HAL_I2C_Ab‹tC∂tCÆlback
;

501 
hi2c
->
AddrCÆlback
 = 
HAL_I2C_AddrCÆlback
;

503 i‡(
hi2c
->
M•InôCÆlback
 =
NULL
)

505 
hi2c
->
M•InôCÆlback
 = 
HAL_I2C_M•Inô
;

509 
hi2c
->
	`M•InôCÆlback
(hi2c);

512 
	`HAL_I2C_M•Inô
(
hi2c
);

516 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

519 
	`__HAL_I2C_DISABLE
(
hi2c
);

522 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_SWRST
;

523 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_SWRST
;

526 
p˛k1
 = 
	`HAL_RCC_GëPCLK1Fªq
();

529 i‡(
	`I2C_MIN_PCLK_FREQ
(
p˛k1
, 
hi2c
->
Inô
.
ClockS≥ed
) == 1U)

531  
HAL_ERROR
;

535 
‰eqønge
 = 
	`I2C_FREQRANGE
(
p˛k1
);

539 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_FREQ
, 
‰eqønge
);

543 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
TRISE
, 
I2C_TRISE_TRISE
, 
	`I2C_RISE_TIME
(
‰eqønge
, hi2c->
Inô
.
ClockS≥ed
));

547 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CCR
, (
I2C_CCR_FS
 | 
I2C_CCR_DUTY
 | 
I2C_CCR_CCR
), 
	`I2C_SPEED
(
p˛k1
, hi2c->
Inô
.
ClockS≥ed
, hi2c->Inô.
DutyCy˛e
));

551 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CR1
, (
I2C_CR1_ENGC
 | 
I2C_CR1_NOSTRETCH
), (hi2c->
Inô
.
GíîÆCÆlMode
 | hi2c->Inô.
NoSåëchMode
));

555 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
OAR1
, (
I2C_OAR1_ADDMODE
 | 
I2C_OAR1_ADD8_9
 | 
I2C_OAR1_ADD1_7
 | 
I2C_OAR1_ADD0
), (hi2c->
Inô
.
AddªssögMode
 | hi2c->Inô.
OwnAddªss1
));

559 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
OAR2
, (
I2C_OAR2_ENDUAL
 | 
I2C_OAR2_ADD2
), (hi2c->
Inô
.
DuÆAddªssMode
 | hi2c->Inô.
OwnAddªss2
));

562 
	`__HAL_I2C_ENABLE
(
hi2c
);

564 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

565 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

566 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

567 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

569  
HAL_OK
;

570 
	}
}

578 
HAL_SètusTy≥Def
 
	$HAL_I2C_DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

581 i‡(
hi2c
 =
NULL
)

583  
HAL_ERROR
;

587 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

589 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

592 
	`__HAL_I2C_DISABLE
(
hi2c
);

594 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

595 i‡(
hi2c
->
M•DeInôCÆlback
 =
NULL
)

597 
hi2c
->
M•DeInôCÆlback
 = 
HAL_I2C_M•DeInô
;

601 
hi2c
->
	`M•DeInôCÆlback
(hi2c);

604 
	`HAL_I2C_M•DeInô
(
hi2c
);

607 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

608 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_RESET
;

609 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

610 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

613 
	`__HAL_UNLOCK
(
hi2c
);

615  
HAL_OK
;

616 
	}
}

624 
__wók
 
	$HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

627 
	`UNUSED
(
hi2c
);

632 
	}
}

640 
__wók
 
	$HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

643 
	`UNUSED
(
hi2c
);

648 
	}
}

650 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

672 
HAL_SètusTy≥Def
 
	$HAL_I2C_Regi°îCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
HAL_I2C_CÆlbackIDTy≥Def
 
CÆlbackID
, 
pI2C_CÆlbackTy≥Def
 
pCÆlback
)

674 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

676 i‡(
pCÆlback
 =
NULL
)

679 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

681  
HAL_ERROR
;

684 
	`__HAL_LOCK
(
hi2c
);

686 i‡(
HAL_I2C_STATE_READY
 =
hi2c
->
Sèã
)

688 
CÆlbackID
)

690 
HAL_I2C_MASTER_TX_COMPLETE_CB_ID
 :

691 
hi2c
->
Ma°îTxC∂tCÆlback
 = 
pCÆlback
;

694 
HAL_I2C_MASTER_RX_COMPLETE_CB_ID
 :

695 
hi2c
->
Ma°îRxC∂tCÆlback
 = 
pCÆlback
;

698 
HAL_I2C_SLAVE_TX_COMPLETE_CB_ID
 :

699 
hi2c
->
SœveTxC∂tCÆlback
 = 
pCÆlback
;

702 
HAL_I2C_SLAVE_RX_COMPLETE_CB_ID
 :

703 
hi2c
->
SœveRxC∂tCÆlback
 = 
pCÆlback
;

706 
HAL_I2C_LISTEN_COMPLETE_CB_ID
 :

707 
hi2c
->
Li°íC∂tCÆlback
 = 
pCÆlback
;

710 
HAL_I2C_MEM_TX_COMPLETE_CB_ID
 :

711 
hi2c
->
MemTxC∂tCÆlback
 = 
pCÆlback
;

714 
HAL_I2C_MEM_RX_COMPLETE_CB_ID
 :

715 
hi2c
->
MemRxC∂tCÆlback
 = 
pCÆlback
;

718 
HAL_I2C_ERROR_CB_ID
 :

719 
hi2c
->
Eº‹CÆlback
 = 
pCÆlback
;

722 
HAL_I2C_ABORT_CB_ID
 :

723 
hi2c
->
Ab‹tC∂tCÆlback
 = 
pCÆlback
;

726 
HAL_I2C_MSPINIT_CB_ID
 :

727 
hi2c
->
M•InôCÆlback
 = 
pCÆlback
;

730 
HAL_I2C_MSPDEINIT_CB_ID
 :

731 
hi2c
->
M•DeInôCÆlback
 = 
pCÆlback
;

736 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

739 
°©us
 = 
HAL_ERROR
;

743 i‡(
HAL_I2C_STATE_RESET
 =
hi2c
->
Sèã
)

745 
CÆlbackID
)

747 
HAL_I2C_MSPINIT_CB_ID
 :

748 
hi2c
->
M•InôCÆlback
 = 
pCÆlback
;

751 
HAL_I2C_MSPDEINIT_CB_ID
 :

752 
hi2c
->
M•DeInôCÆlback
 = 
pCÆlback
;

757 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

760 
°©us
 = 
HAL_ERROR
;

767 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

770 
°©us
 = 
HAL_ERROR
;

774 
	`__HAL_UNLOCK
(
hi2c
);

775  
°©us
;

776 
	}
}

799 
HAL_SètusTy≥Def
 
	$HAL_I2C_UnRegi°îCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
HAL_I2C_CÆlbackIDTy≥Def
 
CÆlbackID
)

801 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

804 
	`__HAL_LOCK
(
hi2c
);

806 i‡(
HAL_I2C_STATE_READY
 =
hi2c
->
Sèã
)

808 
CÆlbackID
)

810 
HAL_I2C_MASTER_TX_COMPLETE_CB_ID
 :

811 
hi2c
->
Ma°îTxC∂tCÆlback
 = 
HAL_I2C_Ma°îTxC∂tCÆlback
;

814 
HAL_I2C_MASTER_RX_COMPLETE_CB_ID
 :

815 
hi2c
->
Ma°îRxC∂tCÆlback
 = 
HAL_I2C_Ma°îRxC∂tCÆlback
;

818 
HAL_I2C_SLAVE_TX_COMPLETE_CB_ID
 :

819 
hi2c
->
SœveTxC∂tCÆlback
 = 
HAL_I2C_SœveTxC∂tCÆlback
;

822 
HAL_I2C_SLAVE_RX_COMPLETE_CB_ID
 :

823 
hi2c
->
SœveRxC∂tCÆlback
 = 
HAL_I2C_SœveRxC∂tCÆlback
;

826 
HAL_I2C_LISTEN_COMPLETE_CB_ID
 :

827 
hi2c
->
Li°íC∂tCÆlback
 = 
HAL_I2C_Li°íC∂tCÆlback
;

830 
HAL_I2C_MEM_TX_COMPLETE_CB_ID
 :

831 
hi2c
->
MemTxC∂tCÆlback
 = 
HAL_I2C_MemTxC∂tCÆlback
;

834 
HAL_I2C_MEM_RX_COMPLETE_CB_ID
 :

835 
hi2c
->
MemRxC∂tCÆlback
 = 
HAL_I2C_MemRxC∂tCÆlback
;

838 
HAL_I2C_ERROR_CB_ID
 :

839 
hi2c
->
Eº‹CÆlback
 = 
HAL_I2C_Eº‹CÆlback
;

842 
HAL_I2C_ABORT_CB_ID
 :

843 
hi2c
->
Ab‹tC∂tCÆlback
 = 
HAL_I2C_Ab‹tC∂tCÆlback
;

846 
HAL_I2C_MSPINIT_CB_ID
 :

847 
hi2c
->
M•InôCÆlback
 = 
HAL_I2C_M•Inô
;

850 
HAL_I2C_MSPDEINIT_CB_ID
 :

851 
hi2c
->
M•DeInôCÆlback
 = 
HAL_I2C_M•DeInô
;

856 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

859 
°©us
 = 
HAL_ERROR
;

863 i‡(
HAL_I2C_STATE_RESET
 =
hi2c
->
Sèã
)

865 
CÆlbackID
)

867 
HAL_I2C_MSPINIT_CB_ID
 :

868 
hi2c
->
M•InôCÆlback
 = 
HAL_I2C_M•Inô
;

871 
HAL_I2C_MSPDEINIT_CB_ID
 :

872 
hi2c
->
M•DeInôCÆlback
 = 
HAL_I2C_M•DeInô
;

877 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

880 
°©us
 = 
HAL_ERROR
;

887 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

890 
°©us
 = 
HAL_ERROR
;

894 
	`__HAL_UNLOCK
(
hi2c
);

895  
°©us
;

896 
	}
}

906 
HAL_SètusTy≥Def
 
	$HAL_I2C_Regi°îAddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
pI2C_AddrCÆlbackTy≥Def
 
pCÆlback
)

908 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

910 i‡(
pCÆlback
 =
NULL
)

913 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

915  
HAL_ERROR
;

918 
	`__HAL_LOCK
(
hi2c
);

920 i‡(
HAL_I2C_STATE_READY
 =
hi2c
->
Sèã
)

922 
hi2c
->
AddrCÆlback
 = 
pCÆlback
;

927 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

930 
°©us
 = 
HAL_ERROR
;

934 
	`__HAL_UNLOCK
(
hi2c
);

935  
°©us
;

936 
	}
}

945 
HAL_SètusTy≥Def
 
	$HAL_I2C_UnRegi°îAddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

947 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

950 
	`__HAL_LOCK
(
hi2c
);

952 i‡(
HAL_I2C_STATE_READY
 =
hi2c
->
Sèã
)

954 
hi2c
->
AddrCÆlback
 = 
HAL_I2C_AddrCÆlback
;

959 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_INVALID_CALLBACK
;

962 
°©us
 = 
HAL_ERROR
;

966 
	`__HAL_UNLOCK
(
hi2c
);

967  
°©us
;

968 
	}
}

977 
	$I2C_Flush_DR
(
I2C_H™dÀTy≥Def
 *
hi2c
)

980 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
Ë!
RESET
)

982 
hi2c
->
In°™˚
->
DR
 = 0x00U;

984 
	}
}

1074 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1077 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1079 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1082 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

1084  
HAL_BUSY
;

1088 
	`__HAL_LOCK
(
hi2c
);

1091 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1094 
	`__HAL_I2C_ENABLE
(
hi2c
);

1098 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1100 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1101 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1102 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1105 
hi2c
->
pBuffPå
 = 
pD©a
;

1106 
hi2c
->
X„rCou¡
 = 
Size
;

1107 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1108 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1111 i‡(
	`I2C_Ma°îReque°Wrôe
(
hi2c
, 
DevAddªss
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1113  
HAL_ERROR
;

1117 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1119 
hi2c
->
X„rSize
 > 0U)

1122 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1124 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1127 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1129  
HAL_ERROR
;

1133 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

1136 
hi2c
->
pBuffPå
++;

1139 
hi2c
->
X„rCou¡
--;

1140 
hi2c
->
X„rSize
--;

1142 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (hi2c->
X„rSize
 != 0U))

1145 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

1148 
hi2c
->
pBuffPå
++;

1151 
hi2c
->
X„rCou¡
--;

1152 
hi2c
->
X„rSize
--;

1156 i‡(
	`I2C_WaôOnBTFFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1158 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1161 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1163  
HAL_ERROR
;

1168 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1170 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1171 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1174 
	`__HAL_UNLOCK
(
hi2c
);

1176  
HAL_OK
;

1180  
HAL_BUSY
;

1182 
	}
}

1195 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1197 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1200 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1202 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1205 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

1207  
HAL_BUSY
;

1211 
	`__HAL_LOCK
(
hi2c
);

1214 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1217 
	`__HAL_I2C_ENABLE
(
hi2c
);

1221 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1223 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1224 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1225 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1228 
hi2c
->
pBuffPå
 = 
pD©a
;

1229 
hi2c
->
X„rCou¡
 = 
Size
;

1230 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1231 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1234 i‡(
	`I2C_Ma°îReque°Ród
(
hi2c
, 
DevAddªss
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1236  
HAL_ERROR
;

1239 i‡(
hi2c
->
X„rSize
 == 0U)

1242 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1245 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1247 i‡(
hi2c
->
X„rSize
 == 1U)

1250 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1254 
	`__dißbÀ_úq
();

1257 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1260 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1263 
	`__íabÀ_úq
();

1265 i‡(
hi2c
->
X„rSize
 == 2U)

1268 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1272 
	`__dißbÀ_úq
();

1275 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1278 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1281 
	`__íabÀ_úq
();

1286 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1289 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1292 
hi2c
->
X„rSize
 > 0U)

1294 i‡(
hi2c
->
X„rSize
 <= 3U)

1297 i‡(
hi2c
->
X„rSize
 == 1U)

1300 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1302  
HAL_ERROR
;

1306 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1309 
hi2c
->
pBuffPå
++;

1312 
hi2c
->
X„rSize
--;

1313 
hi2c
->
X„rCou¡
--;

1316 i‡(
hi2c
->
X„rSize
 == 2U)

1319 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1321  
HAL_ERROR
;

1326 
	`__dißbÀ_úq
();

1329 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1332 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1335 
hi2c
->
pBuffPå
++;

1338 
hi2c
->
X„rSize
--;

1339 
hi2c
->
X„rCou¡
--;

1342 
	`__íabÀ_úq
();

1345 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1348 
hi2c
->
pBuffPå
++;

1351 
hi2c
->
X„rSize
--;

1352 
hi2c
->
X„rCou¡
--;

1358 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1360  
HAL_ERROR
;

1364 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1368 
	`__dißbÀ_úq
();

1371 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1374 
hi2c
->
pBuffPå
++;

1377 
hi2c
->
X„rSize
--;

1378 
hi2c
->
X„rCou¡
--;

1381 
cou¡
 = 
I2C_TIMEOUT_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

1384 
cou¡
--;

1385 i‡(
cou¡
 == 0U)

1387 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1388 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1389 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1390 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

1393 
	`__íabÀ_úq
();

1396 
	`__HAL_UNLOCK
(
hi2c
);

1398  
HAL_ERROR
;

1401 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
RESET
);

1404 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

1407 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1410 
hi2c
->
pBuffPå
++;

1413 
hi2c
->
X„rSize
--;

1414 
hi2c
->
X„rCou¡
--;

1417 
	`__íabÀ_úq
();

1420 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1423 
hi2c
->
pBuffPå
++;

1426 
hi2c
->
X„rSize
--;

1427 
hi2c
->
X„rCou¡
--;

1433 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1435  
HAL_ERROR
;

1439 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1442 
hi2c
->
pBuffPå
++;

1445 
hi2c
->
X„rSize
--;

1446 
hi2c
->
X„rCou¡
--;

1448 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

1451 i‡(
hi2c
->
X„rSize
 == 3U)

1454 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1458 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1461 
hi2c
->
pBuffPå
++;

1464 
hi2c
->
X„rSize
--;

1465 
hi2c
->
X„rCou¡
--;

1470 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1471 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1474 
	`__HAL_UNLOCK
(
hi2c
);

1476  
HAL_OK
;

1480  
HAL_BUSY
;

1482 
	}
}

1493 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1496 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1498 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1500 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1502  
HAL_ERROR
;

1506 
	`__HAL_LOCK
(
hi2c
);

1509 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1512 
	`__HAL_I2C_ENABLE
(
hi2c
);

1516 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1518 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1519 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1520 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1523 
hi2c
->
pBuffPå
 = 
pD©a
;

1524 
hi2c
->
X„rCou¡
 = 
Size
;

1525 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1526 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1529 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1532 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1534  
HAL_ERROR
;

1538 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1541 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
)

1544 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1546  
HAL_ERROR
;

1550 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1553 
hi2c
->
X„rSize
 > 0U)

1556 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1559 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1561  
HAL_ERROR
;

1565 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

1568 
hi2c
->
pBuffPå
++;

1571 
hi2c
->
X„rCou¡
--;

1572 
hi2c
->
X„rSize
--;

1574 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (hi2c->
X„rSize
 != 0U))

1577 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

1580 
hi2c
->
pBuffPå
++;

1583 
hi2c
->
X„rCou¡
--;

1584 
hi2c
->
X„rSize
--;

1589 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_AF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1591  
HAL_ERROR
;

1595 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

1598 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1600 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1601 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1604 
	`__HAL_UNLOCK
(
hi2c
);

1606  
HAL_OK
;

1610  
HAL_BUSY
;

1612 
	}
}

1623 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1626 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1628 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1630 i‡((
pD©a
 =
NULL
Ë|| (
Size
 =(
uöt16_t
)0))

1632  
HAL_ERROR
;

1636 
	`__HAL_LOCK
(
hi2c
);

1639 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1642 
	`__HAL_I2C_ENABLE
(
hi2c
);

1646 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1648 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1649 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1650 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1653 
hi2c
->
pBuffPå
 = 
pD©a
;

1654 
hi2c
->
X„rCou¡
 = 
Size
;

1655 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1656 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1659 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1662 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1664  
HAL_ERROR
;

1668 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1670 
hi2c
->
X„rSize
 > 0U)

1673 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1676 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1678  
HAL_ERROR
;

1682 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1685 
hi2c
->
pBuffPå
++;

1688 
hi2c
->
X„rSize
--;

1689 
hi2c
->
X„rCou¡
--;

1691 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (hi2c->
X„rSize
 != 0U))

1694 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

1697 
hi2c
->
pBuffPå
++;

1700 
hi2c
->
X„rSize
--;

1701 
hi2c
->
X„rCou¡
--;

1706 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1709 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1711  
HAL_ERROR
;

1715 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

1718 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1720 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1721 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1724 
	`__HAL_UNLOCK
(
hi2c
);

1726  
HAL_OK
;

1730  
HAL_BUSY
;

1732 
	}
}

1744 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1746 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1748 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1751 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

1754 
cou¡
--;

1755 i‡(
cou¡
 == 0U)

1757 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1758 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1759 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1760 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

1762  
HAL_BUSY
;

1765 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1768 
	`__HAL_LOCK
(
hi2c
);

1771 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1774 
	`__HAL_I2C_ENABLE
(
hi2c
);

1778 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1780 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1781 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1782 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1785 
hi2c
->
pBuffPå
 = 
pD©a
;

1786 
hi2c
->
X„rCou¡
 = 
Size
;

1787 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1788 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1789 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1792 
	`__HAL_UNLOCK
(
hi2c
);

1798 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1801 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1803  
HAL_OK
;

1807  
HAL_BUSY
;

1809 
	}
}

1821 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1823 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1825 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1828 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

1831 
cou¡
--;

1832 i‡(
cou¡
 == 0U)

1834 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1835 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1836 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1837 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

1839  
HAL_BUSY
;

1842 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1845 
	`__HAL_LOCK
(
hi2c
);

1848 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1851 
	`__HAL_I2C_ENABLE
(
hi2c
);

1855 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1857 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1858 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1859 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1862 
hi2c
->
pBuffPå
 = 
pD©a
;

1863 
hi2c
->
X„rCou¡
 = 
Size
;

1864 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1865 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1866 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1870 
	`__HAL_UNLOCK
(
hi2c
);

1877 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1880 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1883 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1885  
HAL_OK
;

1889  
HAL_BUSY
;

1891 
	}
}

1901 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1904 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1906 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1908  
HAL_ERROR
;

1912 
	`__HAL_LOCK
(
hi2c
);

1915 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1918 
	`__HAL_I2C_ENABLE
(
hi2c
);

1922 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1924 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1925 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1926 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1929 
hi2c
->
pBuffPå
 = 
pD©a
;

1930 
hi2c
->
X„rCou¡
 = 
Size
;

1931 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1932 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1935 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1938 
	`__HAL_UNLOCK
(
hi2c
);

1945 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1947  
HAL_OK
;

1951  
HAL_BUSY
;

1953 
	}
}

1963 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1966 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1968 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1970  
HAL_ERROR
;

1974 
	`__HAL_LOCK
(
hi2c
);

1977 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1980 
	`__HAL_I2C_ENABLE
(
hi2c
);

1984 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1986 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1987 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1988 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1991 
hi2c
->
pBuffPå
 = 
pD©a
;

1992 
hi2c
->
X„rCou¡
 = 
Size
;

1993 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1994 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1997 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2000 
	`__HAL_UNLOCK
(
hi2c
);

2007 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2009  
HAL_OK
;

2013  
HAL_BUSY
;

2015 
	}
}

2027 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2029 
__IO
 
uöt32_t
 
cou¡
 = 0U;

2030 
HAL_SètusTy≥Def
 
dmax„r°©us
;

2032 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2035 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

2038 
cou¡
--;

2039 i‡(
cou¡
 == 0U)

2041 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

2042 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2043 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2044 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

2046  
HAL_BUSY
;

2049 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

2052 
	`__HAL_LOCK
(
hi2c
);

2055 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2058 
	`__HAL_I2C_ENABLE
(
hi2c
);

2062 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2064 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2065 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2066 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2069 
hi2c
->
pBuffPå
 = 
pD©a
;

2070 
hi2c
->
X„rCou¡
 = 
Size
;

2071 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2072 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2073 
hi2c
->
Devaddªss
 = 
DevAddªss
;

2075 i‡(
hi2c
->
X„rSize
 > 0U)

2077 i‡(
hi2c
->
hdm©x
 !
NULL
)

2080 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2083 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2086 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2087 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2090 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

2095 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2096 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2099 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

2102 
	`__HAL_UNLOCK
(
hi2c
);

2104  
HAL_ERROR
;

2107 i‡(
dmax„r°©us
 =
HAL_OK
)

2110 
	`__HAL_UNLOCK
(
hi2c
);

2117 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2120 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

2123 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2126 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

2131 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2132 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2135 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

2138 
	`__HAL_UNLOCK
(
hi2c
);

2140  
HAL_ERROR
;

2146 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2149 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

2152 
	`__HAL_UNLOCK
(
hi2c
);

2159 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2162  
HAL_OK
;

2166  
HAL_BUSY
;

2168 
	}
}

2180 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2182 
__IO
 
uöt32_t
 
cou¡
 = 0U;

2183 
HAL_SètusTy≥Def
 
dmax„r°©us
;

2185 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2188 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

2191 
cou¡
--;

2192 i‡(
cou¡
 == 0U)

2194 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

2195 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2196 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2197 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

2199  
HAL_BUSY
;

2202 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

2205 
	`__HAL_LOCK
(
hi2c
);

2208 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2211 
	`__HAL_I2C_ENABLE
(
hi2c
);

2215 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2217 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2218 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2219 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2222 
hi2c
->
pBuffPå
 = 
pD©a
;

2223 
hi2c
->
X„rCou¡
 = 
Size
;

2224 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2225 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2226 
hi2c
->
Devaddªss
 = 
DevAddªss
;

2228 i‡(
hi2c
->
X„rSize
 > 0U)

2230 i‡(
hi2c
->
hdm¨x
 !
NULL
)

2233 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2236 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2239 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2240 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2243 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

2248 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2249 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2252 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

2255 
	`__HAL_UNLOCK
(
hi2c
);

2257  
HAL_ERROR
;

2260 i‡(
dmax„r°©us
 =
HAL_OK
)

2263 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2266 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

2269 
	`__HAL_UNLOCK
(
hi2c
);

2276 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2279 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

2284 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2285 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2288 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

2291 
	`__HAL_UNLOCK
(
hi2c
);

2293  
HAL_ERROR
;

2299 
	`__HAL_UNLOCK
(
hi2c
);

2306 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2309 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2312 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

2315  
HAL_OK
;

2319  
HAL_BUSY
;

2321 
	}
}

2331 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

2333 
HAL_SètusTy≥Def
 
dmax„r°©us
;

2335 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2337 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2339  
HAL_ERROR
;

2343 
	`__HAL_LOCK
(
hi2c
);

2346 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2349 
	`__HAL_I2C_ENABLE
(
hi2c
);

2353 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2355 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2356 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2357 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2360 
hi2c
->
pBuffPå
 = 
pD©a
;

2361 
hi2c
->
X„rCou¡
 = 
Size
;

2362 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2363 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2365 i‡(
hi2c
->
hdm©x
 !
NULL
)

2368 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2371 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2374 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2375 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2378 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

2383 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

2384 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2387 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

2390 
	`__HAL_UNLOCK
(
hi2c
);

2392  
HAL_ERROR
;

2395 i‡(
dmax„r°©us
 =
HAL_OK
)

2398 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2401 
	`__HAL_UNLOCK
(
hi2c
);

2407 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2410 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

2412  
HAL_OK
;

2417 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2418 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2421 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

2424 
	`__HAL_UNLOCK
(
hi2c
);

2426  
HAL_ERROR
;

2431  
HAL_BUSY
;

2433 
	}
}

2443 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

2445 
HAL_SètusTy≥Def
 
dmax„r°©us
;

2447 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2449 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2451  
HAL_ERROR
;

2455 
	`__HAL_LOCK
(
hi2c
);

2458 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2461 
	`__HAL_I2C_ENABLE
(
hi2c
);

2465 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2467 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2468 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2469 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2472 
hi2c
->
pBuffPå
 = 
pD©a
;

2473 
hi2c
->
X„rCou¡
 = 
Size
;

2474 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2475 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2477 i‡(
hi2c
->
hdm¨x
 !
NULL
)

2480 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2483 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2486 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2487 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2490 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

2495 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

2496 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2499 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

2502 
	`__HAL_UNLOCK
(
hi2c
);

2504  
HAL_ERROR
;

2507 i‡(
dmax„r°©us
 =
HAL_OK
)

2510 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2513 
	`__HAL_UNLOCK
(
hi2c
);

2519 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2522 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

2524  
HAL_OK
;

2529 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2530 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2533 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

2536 
	`__HAL_UNLOCK
(
hi2c
);

2538  
HAL_ERROR
;

2543  
HAL_BUSY
;

2545 
	}
}

2560 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

2563 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

2566 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2568 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2571 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2573  
HAL_BUSY
;

2577 
	`__HAL_LOCK
(
hi2c
);

2580 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2583 
	`__HAL_I2C_ENABLE
(
hi2c
);

2587 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2589 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2590 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2591 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2594 
hi2c
->
pBuffPå
 = 
pD©a
;

2595 
hi2c
->
X„rCou¡
 = 
Size
;

2596 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2597 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2600 i‡(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2602  
HAL_ERROR
;

2605 
hi2c
->
X„rSize
 > 0U)

2608 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2610 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2613 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2615  
HAL_ERROR
;

2619 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

2622 
hi2c
->
pBuffPå
++;

2625 
hi2c
->
X„rSize
--;

2626 
hi2c
->
X„rCou¡
--;

2628 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (hi2c->
X„rSize
 != 0U))

2631 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

2634 
hi2c
->
pBuffPå
++;

2637 
hi2c
->
X„rSize
--;

2638 
hi2c
->
X„rCou¡
--;

2643 i‡(
	`I2C_WaôOnBTFFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2645 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2648 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2650  
HAL_ERROR
;

2654 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2656 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2657 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2660 
	`__HAL_UNLOCK
(
hi2c
);

2662  
HAL_OK
;

2666  
HAL_BUSY
;

2668 
	}
}

2683 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

2685 
__IO
 
uöt32_t
 
cou¡
 = 0U;

2688 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

2691 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2693 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2696 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2698  
HAL_BUSY
;

2702 
	`__HAL_LOCK
(
hi2c
);

2705 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2708 
	`__HAL_I2C_ENABLE
(
hi2c
);

2712 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2714 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2715 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2716 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2719 
hi2c
->
pBuffPå
 = 
pD©a
;

2720 
hi2c
->
X„rCou¡
 = 
Size
;

2721 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2722 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2725 i‡(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2727  
HAL_ERROR
;

2730 i‡(
hi2c
->
X„rSize
 == 0U)

2733 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2736 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2738 i‡(
hi2c
->
X„rSize
 == 1U)

2741 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2745 
	`__dißbÀ_úq
();

2748 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2751 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2754 
	`__íabÀ_úq
();

2756 i‡(
hi2c
->
X„rSize
 == 2U)

2759 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2763 
	`__dißbÀ_úq
();

2766 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2769 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2772 
	`__íabÀ_úq
();

2777 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2779 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2782 
hi2c
->
X„rSize
 > 0U)

2784 i‡(
hi2c
->
X„rSize
 <= 3U)

2787 i‡(
hi2c
->
X„rSize
 == 1U)

2790 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2792  
HAL_ERROR
;

2796 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2799 
hi2c
->
pBuffPå
++;

2802 
hi2c
->
X„rSize
--;

2803 
hi2c
->
X„rCou¡
--;

2806 i‡(
hi2c
->
X„rSize
 == 2U)

2809 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2811  
HAL_ERROR
;

2816 
	`__dißbÀ_úq
();

2819 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2822 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2825 
hi2c
->
pBuffPå
++;

2828 
hi2c
->
X„rSize
--;

2829 
hi2c
->
X„rCou¡
--;

2832 
	`__íabÀ_úq
();

2835 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2838 
hi2c
->
pBuffPå
++;

2841 
hi2c
->
X„rSize
--;

2842 
hi2c
->
X„rCou¡
--;

2848 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2850  
HAL_ERROR
;

2854 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2858 
	`__dißbÀ_úq
();

2861 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2864 
hi2c
->
pBuffPå
++;

2867 
hi2c
->
X„rSize
--;

2868 
hi2c
->
X„rCou¡
--;

2871 
cou¡
 = 
I2C_TIMEOUT_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

2874 
cou¡
--;

2875 i‡(
cou¡
 == 0U)

2877 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

2878 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2879 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2880 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

2883 
	`__íabÀ_úq
();

2886 
	`__HAL_UNLOCK
(
hi2c
);

2888  
HAL_ERROR
;

2891 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
RESET
);

2894 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2897 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2900 
hi2c
->
pBuffPå
++;

2903 
hi2c
->
X„rSize
--;

2904 
hi2c
->
X„rCou¡
--;

2907 
	`__íabÀ_úq
();

2910 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2913 
hi2c
->
pBuffPå
++;

2916 
hi2c
->
X„rSize
--;

2917 
hi2c
->
X„rCou¡
--;

2923 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2925  
HAL_ERROR
;

2929 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2932 
hi2c
->
pBuffPå
++;

2935 
hi2c
->
X„rSize
--;

2936 
hi2c
->
X„rCou¡
--;

2938 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

2940 i‡(
hi2c
->
X„rSize
 == 3U)

2943 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2946 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

2949 
hi2c
->
pBuffPå
++;

2952 
hi2c
->
X„rSize
--;

2953 
hi2c
->
X„rCou¡
--;

2958 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2959 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2962 
	`__HAL_UNLOCK
(
hi2c
);

2964  
HAL_OK
;

2968  
HAL_BUSY
;

2970 
	}
}

2984 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2986 
__IO
 
uöt32_t
 
cou¡
 = 0U;

2989 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2991 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2994 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

2997 
cou¡
--;

2998 i‡(
cou¡
 == 0U)

3000 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3001 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3002 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3003 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3005  
HAL_BUSY
;

3008 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3011 
	`__HAL_LOCK
(
hi2c
);

3014 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3017 
	`__HAL_I2C_ENABLE
(
hi2c
);

3021 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3023 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

3024 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3025 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3028 
hi2c
->
pBuffPå
 = 
pD©a
;

3029 
hi2c
->
X„rCou¡
 = 
Size
;

3030 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3031 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3032 
hi2c
->
Devaddªss
 = 
DevAddªss
;

3033 
hi2c
->
Memaddªss
 = 
MemAddªss
;

3034 
hi2c
->
MemaddSize
 = 
MemAddSize
;

3035 
hi2c
->
EvítCou¡
 = 0U;

3038 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3041 
	`__HAL_UNLOCK
(
hi2c
);

3048 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3050  
HAL_OK
;

3054  
HAL_BUSY
;

3056 
	}
}

3069 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

3071 
__IO
 
uöt32_t
 
cou¡
 = 0U;

3074 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

3076 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3079 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

3082 
cou¡
--;

3083 i‡(
cou¡
 == 0U)

3085 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3086 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3087 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3088 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3090  
HAL_BUSY
;

3093 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3096 
	`__HAL_LOCK
(
hi2c
);

3099 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3102 
	`__HAL_I2C_ENABLE
(
hi2c
);

3106 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3108 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

3109 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3110 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3113 
hi2c
->
pBuffPå
 = 
pD©a
;

3114 
hi2c
->
X„rCou¡
 = 
Size
;

3115 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3116 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3117 
hi2c
->
Devaddªss
 = 
DevAddªss
;

3118 
hi2c
->
Memaddªss
 = 
MemAddªss
;

3119 
hi2c
->
MemaddSize
 = 
MemAddSize
;

3120 
hi2c
->
EvítCou¡
 = 0U;

3123 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3126 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3129 
	`__HAL_UNLOCK
(
hi2c
);

3131 i‡(
hi2c
->
X„rSize
 > 0U)

3138 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3140  
HAL_OK
;

3144  
HAL_BUSY
;

3146 
	}
}

3160 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

3162 
__IO
 
uöt32_t
 
cou¡
 = 0U;

3163 
HAL_SètusTy≥Def
 
dmax„r°©us
;

3166 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

3169 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

3171 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3174 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

3177 
cou¡
--;

3178 i‡(
cou¡
 == 0U)

3180 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3181 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3182 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3183 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3185  
HAL_BUSY
;

3188 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3191 
	`__HAL_LOCK
(
hi2c
);

3194 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3197 
	`__HAL_I2C_ENABLE
(
hi2c
);

3201 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3203 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

3204 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3205 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3208 
hi2c
->
pBuffPå
 = 
pD©a
;

3209 
hi2c
->
X„rCou¡
 = 
Size
;

3210 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3211 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3212 
hi2c
->
Devaddªss
 = 
DevAddªss
;

3213 
hi2c
->
Memaddªss
 = 
MemAddªss
;

3214 
hi2c
->
MemaddSize
 = 
MemAddSize
;

3215 
hi2c
->
EvítCou¡
 = 0U;

3217 i‡(
hi2c
->
X„rSize
 > 0U)

3219 i‡(
hi2c
->
hdm©x
 !
NULL
)

3222 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

3225 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

3228 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

3229 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

3232 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

3237 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3238 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3241 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

3244 
	`__HAL_UNLOCK
(
hi2c
);

3246  
HAL_ERROR
;

3249 i‡(
dmax„r°©us
 =
HAL_OK
)

3252 i‡(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3255 
dmax„r°©us
 = 
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
);

3258 
	`UNUSED
(
dmax„r°©us
);

3261 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
NULL
;

3264 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3266 
hi2c
->
X„rSize
 = 0U;

3267 
hi2c
->
X„rCou¡
 = 0U;

3270 
	`__HAL_I2C_DISABLE
(
hi2c
);

3272  
HAL_ERROR
;

3276 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3279 
	`__HAL_UNLOCK
(
hi2c
);

3285 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_ERR
);

3288 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

3290  
HAL_OK
;

3295 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3296 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3299 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

3302 
	`__HAL_UNLOCK
(
hi2c
);

3304  
HAL_ERROR
;

3310 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3311 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3314 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_SIZE
;

3317 
	`__HAL_UNLOCK
(
hi2c
);

3319  
HAL_ERROR
;

3324  
HAL_BUSY
;

3326 
	}
}

3340 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

3343 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

3344 
__IO
 
uöt32_t
 
cou¡
 = 0U;

3345 
HAL_SètusTy≥Def
 
dmax„r°©us
;

3348 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

3350 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3353 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

3356 
cou¡
--;

3357 i‡(
cou¡
 == 0U)

3359 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3360 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3361 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3362 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3364  
HAL_BUSY
;

3367 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3370 
	`__HAL_LOCK
(
hi2c
);

3373 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3376 
	`__HAL_I2C_ENABLE
(
hi2c
);

3380 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3382 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

3383 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3384 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3387 
hi2c
->
pBuffPå
 = 
pD©a
;

3388 
hi2c
->
X„rCou¡
 = 
Size
;

3389 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3390 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3391 
hi2c
->
Devaddªss
 = 
DevAddªss
;

3392 
hi2c
->
Memaddªss
 = 
MemAddªss
;

3393 
hi2c
->
MemaddSize
 = 
MemAddSize
;

3394 
hi2c
->
EvítCou¡
 = 0U;

3396 i‡(
hi2c
->
X„rSize
 > 0U)

3398 i‡(
hi2c
->
hdm¨x
 !
NULL
)

3401 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

3404 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

3407 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

3408 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

3411 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

3416 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3417 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3420 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

3423 
	`__HAL_UNLOCK
(
hi2c
);

3425  
HAL_ERROR
;

3428 i‡(
dmax„r°©us
 =
HAL_OK
)

3431 i‡(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3434 
dmax„r°©us
 = 
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
);

3437 
	`UNUSED
(
dmax„r°©us
);

3440 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
NULL
;

3443 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3445 
hi2c
->
X„rSize
 = 0U;

3446 
hi2c
->
X„rCou¡
 = 0U;

3449 
	`__HAL_I2C_DISABLE
(
hi2c
);

3451  
HAL_ERROR
;

3454 i‡(
hi2c
->
X„rSize
 == 1U)

3457 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3462 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

3466 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3469 
	`__HAL_UNLOCK
(
hi2c
);

3475 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_ERR
);

3478 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

3483 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3484 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3487 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

3490 
	`__HAL_UNLOCK
(
hi2c
);

3492  
HAL_ERROR
;

3498 i‡(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3500  
HAL_ERROR
;

3504 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3507 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3509 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3512 
	`__HAL_UNLOCK
(
hi2c
);

3515  
HAL_OK
;

3519  
HAL_BUSY
;

3521 
	}
}

3534 
HAL_SètusTy≥Def
 
	$HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
)

3537 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

3538 
uöt32_t
 
I2C_Trüls
 = 0U;

3539 
FœgSètus
 
tmp1
;

3540 
FœgSètus
 
tmp2
;

3542 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3545 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3547  
HAL_BUSY
;

3551 
	`__HAL_LOCK
(
hi2c
);

3554 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3557 
	`__HAL_I2C_ENABLE
(
hi2c
);

3561 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3563 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

3564 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3565 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3570 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3573 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

3575 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

3577 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

3579  
HAL_TIMEOUT
;

3583 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

3587 
tick°¨t
 = 
	`HAL_GëTick
();

3589 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3590 
tmp2
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3591 (
hi2c
->
Sèã
 !
HAL_I2C_STATE_TIMEOUT
Ë&& (
tmp1
 =
RESET
Ë&& (
tmp2
 == RESET))

3593 i‡(((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

3595 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_TIMEOUT
;

3597 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3598 
tmp2
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3601 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3604 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
Ë=
SET
)

3607 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3610 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3613 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3615  
HAL_ERROR
;

3618 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3621 
	`__HAL_UNLOCK
(
hi2c
);

3623  
HAL_OK
;

3628 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3631 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3634 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3636  
HAL_ERROR
;

3641 
I2C_Trüls
++;

3643 
I2C_Trüls
 < 
Trüls
);

3645 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3648 
	`__HAL_UNLOCK
(
hi2c
);

3650  
HAL_ERROR
;

3654  
HAL_BUSY
;

3656 
	}
}

3670 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Seq_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

3672 
__IO
 
uöt32_t
 
Pªv_Sèã
 = 0x00U;

3673 
__IO
 
uöt32_t
 
cou¡
 = 0x00U;

3676 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

3678 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3681 i‡((
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
Ë=I2C_CR1_STOPË|| (
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

3684 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

3687 
cou¡
--;

3688 i‡(
cou¡
 == 0U)

3690 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3691 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3692 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3693 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3695  
HAL_BUSY
;

3698 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3702 
	`__HAL_LOCK
(
hi2c
);

3705 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3708 
	`__HAL_I2C_ENABLE
(
hi2c
);

3712 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3714 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

3715 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3716 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3719 
hi2c
->
pBuffPå
 = 
pD©a
;

3720 
hi2c
->
X„rCou¡
 = 
Size
;

3721 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3722 
hi2c
->
X„rO±i⁄s
 = XferOptions;

3723 
hi2c
->
Devaddªss
 = 
DevAddªss
;

3725 
Pªv_Sèã
 = 
hi2c
->
PªviousSèã
;

3729 i‡((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_TX
Ë|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X„rO±i⁄s
) == 1))

3732 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3736 
	`__HAL_UNLOCK
(
hi2c
);

3743 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3745  
HAL_OK
;

3749  
HAL_BUSY
;

3751 
	}
}

3765 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Seq_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

3767 
__IO
 
uöt32_t
 
Pªv_Sèã
 = 0x00U;

3768 
__IO
 
uöt32_t
 
cou¡
 = 0x00U;

3769 
HAL_SètusTy≥Def
 
dmax„r°©us
;

3772 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

3774 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3777 i‡((
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
Ë=I2C_CR1_STOPË|| (
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

3780 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

3783 
cou¡
--;

3784 i‡(
cou¡
 == 0U)

3786 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3787 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3788 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3789 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3791  
HAL_BUSY
;

3794 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3798 
	`__HAL_LOCK
(
hi2c
);

3801 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3804 
	`__HAL_I2C_ENABLE
(
hi2c
);

3808 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3810 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

3811 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3812 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3815 
hi2c
->
pBuffPå
 = 
pD©a
;

3816 
hi2c
->
X„rCou¡
 = 
Size
;

3817 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3818 
hi2c
->
X„rO±i⁄s
 = XferOptions;

3819 
hi2c
->
Devaddªss
 = 
DevAddªss
;

3821 
Pªv_Sèã
 = 
hi2c
->
PªviousSèã
;

3823 i‡(
hi2c
->
X„rSize
 > 0U)

3825 i‡(
hi2c
->
hdm©x
 !
NULL
)

3828 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

3831 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

3834 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

3835 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

3838 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

3843 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3844 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3847 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

3850 
	`__HAL_UNLOCK
(
hi2c
);

3852  
HAL_ERROR
;

3855 i‡(
dmax„r°©us
 =
HAL_OK
)

3858 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3862 i‡((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_TX
Ë|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X„rO±i⁄s
) == 1))

3865 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3869 
	`__HAL_UNLOCK
(
hi2c
);

3877 i‡((
X„rO±i⁄s
 =
I2C_NEXT_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
))

3880 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

3884 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

3889 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3890 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3893 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

3896 
	`__HAL_UNLOCK
(
hi2c
);

3898  
HAL_ERROR
;

3904 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3908 i‡((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_TX
Ë|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X„rO±i⁄s
) == 1))

3911 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3915 
	`__HAL_UNLOCK
(
hi2c
);

3922 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3925  
HAL_OK
;

3929  
HAL_BUSY
;

3931 
	}
}

3945 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Seq_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

3947 
__IO
 
uöt32_t
 
Pªv_Sèã
 = 0x00U;

3948 
__IO
 
uöt32_t
 
cou¡
 = 0U;

3949 
uöt32_t
 
íabÀIT
 = (
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3952 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

3954 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3957 i‡((
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
Ë=I2C_CR1_STOPË|| (
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

3960 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

3963 
cou¡
--;

3964 i‡(
cou¡
 == 0U)

3966 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3967 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3968 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3969 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3971  
HAL_BUSY
;

3974 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

3978 
	`__HAL_LOCK
(
hi2c
);

3981 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3984 
	`__HAL_I2C_ENABLE
(
hi2c
);

3988 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3990 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

3991 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3992 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3995 
hi2c
->
pBuffPå
 = 
pD©a
;

3996 
hi2c
->
X„rCou¡
 = 
Size
;

3997 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3998 
hi2c
->
X„rO±i⁄s
 = XferOptions;

3999 
hi2c
->
Devaddªss
 = 
DevAddªss
;

4001 
Pªv_Sèã
 = 
hi2c
->
PªviousSèã
;

4003 i‡((
hi2c
->
X„rCou¡
 =2UË&& ((
X„rO±i⁄s
 =
I2C_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
)))

4005 i‡(
Pªv_Sèã
 =
I2C_STATE_MASTER_BUSY_RX
)

4008 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4011 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4014 
íabÀIT
 &~
I2C_IT_BUF
;

4019 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4025 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4030 i‡((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_RX
Ë|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X„rO±i⁄s
) == 1))

4033 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4037 
	`__HAL_UNLOCK
(
hi2c
);

4044 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
íabÀIT
);

4046  
HAL_OK
;

4050  
HAL_BUSY
;

4052 
	}
}

4066 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Seq_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

4068 
__IO
 
uöt32_t
 
Pªv_Sèã
 = 0x00U;

4069 
__IO
 
uöt32_t
 
cou¡
 = 0U;

4070 
uöt32_t
 
íabÀIT
 = (
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4071 
HAL_SètusTy≥Def
 
dmax„r°©us
;

4074 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

4076 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

4079 i‡((
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
Ë=I2C_CR1_STOPË|| (
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

4082 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

4085 
cou¡
--;

4086 i‡(
cou¡
 == 0U)

4088 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4089 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4090 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4091 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

4093  
HAL_BUSY
;

4096 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

4100 
	`__HAL_LOCK
(
hi2c
);

4103 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4106 
	`__HAL_I2C_ENABLE
(
hi2c
);

4110 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4113 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

4115 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

4116 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

4117 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4120 
hi2c
->
pBuffPå
 = 
pD©a
;

4121 
hi2c
->
X„rCou¡
 = 
Size
;

4122 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4123 
hi2c
->
X„rO±i⁄s
 = XferOptions;

4124 
hi2c
->
Devaddªss
 = 
DevAddªss
;

4126 
Pªv_Sèã
 = 
hi2c
->
PªviousSèã
;

4128 i‡(
hi2c
->
X„rSize
 > 0U)

4130 i‡((
hi2c
->
X„rCou¡
 =2UË&& ((
X„rO±i⁄s
 =
I2C_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
)))

4132 i‡(
Pªv_Sèã
 =
I2C_STATE_MASTER_BUSY_RX
)

4135 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4138 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4141 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

4146 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4152 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4154 i‡((
X„rO±i⁄s
 =
I2C_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_OTHER_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
))

4157 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

4160 i‡(
hi2c
->
hdm¨x
 !
NULL
)

4163 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

4166 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

4169 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

4170 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

4173 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

4178 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4179 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4182 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

4185 
	`__HAL_UNLOCK
(
hi2c
);

4187  
HAL_ERROR
;

4189 i‡(
dmax„r°©us
 =
HAL_OK
)

4193 i‡((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_RX
Ë|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X„rO±i⁄s
) == 1))

4196 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4199 
íabÀIT
 = (
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4204 
íabÀIT
 = 
I2C_IT_ERR
;

4208 
	`__HAL_UNLOCK
(
hi2c
);

4216 i‡((
X„rO±i⁄s
 =
I2C_NEXT_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
))

4219 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4223 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
íabÀIT
);

4228 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4229 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4232 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

4235 
	`__HAL_UNLOCK
(
hi2c
);

4237  
HAL_ERROR
;

4243 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4247 i‡((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_RX
Ë|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X„rO±i⁄s
) == 1))

4250 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4254 
	`__HAL_UNLOCK
(
hi2c
);

4261 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
íabÀIT
);

4263  
HAL_OK
;

4267  
HAL_BUSY
;

4269 
	}
}

4281 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Seq_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

4284 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

4286 i‡(((
uöt32_t
)
hi2c
->
Sèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4288 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

4290  
HAL_ERROR
;

4294 
	`__HAL_LOCK
(
hi2c
);

4297 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4300 
	`__HAL_I2C_ENABLE
(
hi2c
);

4304 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4306 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX_LISTEN
;

4307 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4308 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4311 
hi2c
->
pBuffPå
 = 
pD©a
;

4312 
hi2c
->
X„rCou¡
 = 
Size
;

4313 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4314 
hi2c
->
X„rO±i⁄s
 = XferOptions;

4317 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4320 
	`__HAL_UNLOCK
(
hi2c
);

4327 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4329  
HAL_OK
;

4333  
HAL_BUSY
;

4335 
	}
}

4347 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Seq_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

4349 
HAL_SètusTy≥Def
 
dmax„r°©us
;

4352 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

4354 i‡(((
uöt32_t
)
hi2c
->
Sèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4356 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

4358  
HAL_ERROR
;

4362 
	`__HAL_LOCK
(
hi2c
);

4365 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4369 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
)

4371 i‡((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4374 i‡(
hi2c
->
hdm¨x
 !
NULL
)

4376 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4380 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4383 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
Ë!
HAL_OK
)

4386 
hi2c
->
hdm¨x
->
	`X„rAb‹tCÆlback
(hi2c->hdmarx);

4391 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
)

4393 i‡((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4395 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4398 i‡(
hi2c
->
hdm©x
 !
NULL
)

4402 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4405 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
Ë!
HAL_OK
)

4408 
hi2c
->
hdm©x
->
	`X„rAb‹tCÆlback
(hi2c->hdmatx);

4419 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4422 
	`__HAL_I2C_ENABLE
(
hi2c
);

4426 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4428 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX_LISTEN
;

4429 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4430 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4433 
hi2c
->
pBuffPå
 = 
pD©a
;

4434 
hi2c
->
X„rCou¡
 = 
Size
;

4435 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4436 
hi2c
->
X„rO±i⁄s
 = XferOptions;

4438 i‡(
hi2c
->
hdm©x
 !
NULL
)

4441 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

4444 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

4447 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

4448 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

4451 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

4456 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4457 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4460 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

4463 
	`__HAL_UNLOCK
(
hi2c
);

4465  
HAL_ERROR
;

4468 i‡(
dmax„r°©us
 =
HAL_OK
)

4471 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4474 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4477 
	`__HAL_UNLOCK
(
hi2c
);

4483 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4486 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

4488  
HAL_OK
;

4493 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4494 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4497 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

4500 
	`__HAL_UNLOCK
(
hi2c
);

4502  
HAL_ERROR
;

4507  
HAL_BUSY
;

4509 
	}
}

4521 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Seq_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

4524 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

4526 i‡(((
uöt32_t
)
hi2c
->
Sèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4528 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

4530  
HAL_ERROR
;

4534 
	`__HAL_LOCK
(
hi2c
);

4537 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4540 
	`__HAL_I2C_ENABLE
(
hi2c
);

4544 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4546 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX_LISTEN
;

4547 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4548 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4551 
hi2c
->
pBuffPå
 = 
pD©a
;

4552 
hi2c
->
X„rCou¡
 = 
Size
;

4553 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4554 
hi2c
->
X„rO±i⁄s
 = XferOptions;

4557 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4560 
	`__HAL_UNLOCK
(
hi2c
);

4567 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4569  
HAL_OK
;

4573  
HAL_BUSY
;

4575 
	}
}

4587 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Seq_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

4589 
HAL_SètusTy≥Def
 
dmax„r°©us
;

4592 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

4594 i‡(((
uöt32_t
)
hi2c
->
Sèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4596 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

4598  
HAL_ERROR
;

4602 
	`__HAL_LOCK
(
hi2c
);

4605 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4609 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
)

4611 i‡((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4614 i‡(
hi2c
->
hdm¨x
 !
NULL
)

4616 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4620 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4623 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
Ë!
HAL_OK
)

4626 
hi2c
->
hdm¨x
->
	`X„rAb‹tCÆlback
(hi2c->hdmarx);

4631 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
)

4633 i‡((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4635 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4638 i‡(
hi2c
->
hdm©x
 !
NULL
)

4642 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4645 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
Ë!
HAL_OK
)

4648 
hi2c
->
hdm©x
->
	`X„rAb‹tCÆlback
(hi2c->hdmatx);

4659 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4662 
	`__HAL_I2C_ENABLE
(
hi2c
);

4666 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4668 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX_LISTEN
;

4669 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4670 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4673 
hi2c
->
pBuffPå
 = 
pD©a
;

4674 
hi2c
->
X„rCou¡
 = 
Size
;

4675 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4676 
hi2c
->
X„rO±i⁄s
 = XferOptions;

4678 i‡(
hi2c
->
hdm¨x
 !
NULL
)

4681 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

4684 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

4687 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

4688 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

4691 
dmax„r°©us
 = 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

4696 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4697 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4700 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA_PARAM
;

4703 
	`__HAL_UNLOCK
(
hi2c
);

4705  
HAL_ERROR
;

4708 i‡(
dmax„r°©us
 =
HAL_OK
)

4711 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4714 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4717 
	`__HAL_UNLOCK
(
hi2c
);

4720 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4726 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4728  
HAL_OK
;

4733 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4734 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4737 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

4740 
	`__HAL_UNLOCK
(
hi2c
);

4742  
HAL_ERROR
;

4747  
HAL_BUSY
;

4749 
	}
}

4757 
HAL_SètusTy≥Def
 
	$HAL_I2C_E«bÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4759 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

4761 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4764 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4767 
	`__HAL_I2C_ENABLE
(
hi2c
);

4771 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4774 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4776  
HAL_OK
;

4780  
HAL_BUSY
;

4782 
	}
}

4790 
HAL_SètusTy≥Def
 
	$HAL_I2C_DißbÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4793 
uöt32_t
 
tmp
;

4796 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

4798 
tmp
 = (
uöt32_t
)(
hi2c
->
Sèã
Ë& 
I2C_STATE_MSK
;

4799 
hi2c
->
PªviousSèã
 = 
tmp
 | (
uöt32_t
)(hi2c->
Mode
);

4800 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4801 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4804 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4807 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4809  
HAL_OK
;

4813  
HAL_BUSY
;

4815 
	}
}

4825 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Ab‹t_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
)

4828 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

4831 
	`UNUSED
(
DevAddªss
);

4834 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
Ë&& ((
CuºítMode
 =
HAL_I2C_MODE_MASTER
) ||

4835 (
CuºítMode
 =
HAL_I2C_MODE_MEM
)))

4838 
	`__HAL_LOCK
(
hi2c
);

4840 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4841 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_ABORT
;

4844 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4847 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

4849 
hi2c
->
X„rCou¡
 = 0U;

4852 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4855 
	`__HAL_UNLOCK
(
hi2c
);

4858 
	`I2C_ITEº‹
(
hi2c
);

4860  
HAL_OK
;

4867  
HAL_ERROR
;

4869 
	}
}

4885 
	$HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4887 
uöt32_t
 
§1ôÊags
;

4888 
uöt32_t
 
§2ôÊags
 = 0U;

4889 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
CR2
);

4890 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

4891 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

4892 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

4895 i‡((
CuºítMode
 =
HAL_I2C_MODE_MASTER
Ë|| (CuºítModê=
HAL_I2C_MODE_MEM
))

4897 
§2ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR2
);

4898 
§1ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR1
);

4901 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_SB
Ë=
RESET
Ë&& (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
CuºítX„rO±i⁄s
) == 1U))

4907 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_SB
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

4910 
	`I2C_C⁄vîtOthîX„rO±i⁄s
(
hi2c
);

4912 
	`I2C_Ma°î_SB
(
hi2c
);

4915 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_ADD10
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

4917 
	`I2C_Ma°î_ADD10
(
hi2c
);

4920 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_ADDR
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

4922 
	`I2C_Ma°î_ADDR
(
hi2c
);

4925 i‡(
	`I2C_CHECK_FLAG
(
§2ôÊags
, 
I2C_FLAG_TRA
Ë!
RESET
)

4928 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
) != I2C_CR2_DMAEN)

4931 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_TXE
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_BUF
Ë!RESETË&& (I2C_CHECK_FLAG(§1ôÊags, 
I2C_FLAG_BTF
) == RESET))

4933 
	`I2C_Ma°îTønsmô_TXE
(
hi2c
);

4936 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_BTF
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

4938 i‡(
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
)

4940 
	`I2C_Ma°îTønsmô_BTF
(
hi2c
);

4944 i‡(
CuºítMode
 =
HAL_I2C_MODE_MEM
)

4946 
	`I2C_Mem‹yTønsmô_TXE_BTF
(
hi2c
);

4960 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
) != I2C_CR2_DMAEN)

4963 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_RXNE
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_BUF
Ë!RESETË&& (I2C_CHECK_FLAG(§1ôÊags, 
I2C_FLAG_BTF
) == RESET))

4965 
	`I2C_Ma°îRe˚ive_RXNE
(
hi2c
);

4968 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_BTF
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

4970 
	`I2C_Ma°îRe˚ive_BTF
(
hi2c
);

4984 i‡(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

4986 
§1ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR1
);

4990 
§2ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR2
);

4991 
§1ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR1
);

4995 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_ADDR
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

4998 i‡(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

5000 
§2ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR2
);

5002 
	`I2C_Sœve_ADDR
(
hi2c
, 
§2ôÊags
);

5005 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_STOPF
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

5007 
	`I2C_Sœve_STOPF
(
hi2c
);

5010 i‡((
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
Ë|| (CuºítSèã =
HAL_I2C_STATE_BUSY_TX_LISTEN
))

5013 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_TXE
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_BUF
Ë!RESETË&& (I2C_CHECK_FLAG(§1ôÊags, 
I2C_FLAG_BTF
) == RESET))

5015 
	`I2C_SœveTønsmô_TXE
(
hi2c
);

5018 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_BTF
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

5020 
	`I2C_SœveTønsmô_BTF
(
hi2c
);

5031 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_RXNE
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_BUF
Ë!RESETË&& (I2C_CHECK_FLAG(§1ôÊags, 
I2C_FLAG_BTF
) == RESET))

5033 
	`I2C_SœveRe˚ive_RXNE
(
hi2c
);

5036 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_BTF
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_EVT
) != RESET))

5038 
	`I2C_SœveRe˚ive_BTF
(
hi2c
);

5046 
	}
}

5054 
	$HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5056 
HAL_I2C_ModeTy≥Def
 
tmp1
;

5057 
uöt32_t
 
tmp2
;

5058 
HAL_I2C_SèãTy≥Def
 
tmp3
;

5059 
uöt32_t
 
tmp4
;

5060 
uöt32_t
 
§1ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR1
);

5061 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
CR2
);

5062 
uöt32_t
 
îr‹
 = 
HAL_I2C_ERROR_NONE
;

5063 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

5066 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_BERR
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_ERR
) != RESET))

5068 
îr‹
 |
HAL_I2C_ERROR_BERR
;

5071 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_BERR
);

5074 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_SWRST
);

5078 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_ARLO
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_ERR
) != RESET))

5080 
îr‹
 |
HAL_I2C_ERROR_ARLO
;

5083 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ARLO
);

5087 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_AF
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_ERR
) != RESET))

5089 
tmp1
 = 
CuºítMode
;

5090 
tmp2
 = 
hi2c
->
X„rCou¡
;

5091 
tmp3
 = 
hi2c
->
Sèã
;

5092 
tmp4
 = 
hi2c
->
PªviousSèã
;

5093 i‡((
tmp1
 =
HAL_I2C_MODE_SLAVE
Ë&& (
tmp2
 == 0U) && \

5094 ((
tmp3
 =
HAL_I2C_STATE_BUSY_TX
Ë|| (tmp3 =
HAL_I2C_STATE_BUSY_TX_LISTEN
) || \

5095 ((
tmp3
 =
HAL_I2C_STATE_LISTEN
Ë&& (
tmp4
 =
I2C_STATE_SLAVE_BUSY_TX
))))

5097 
	`I2C_Sœve_AF
(
hi2c
);

5102 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

5104 
îr‹
 |
HAL_I2C_ERROR_AF
;

5107 i‡((
CuºítMode
 =
HAL_I2C_MODE_MASTER
Ë|| (CuºítModê=
HAL_I2C_MODE_MEM
))

5110 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5116 i‡((
	`I2C_CHECK_FLAG
(
§1ôÊags
, 
I2C_FLAG_OVR
Ë!
RESET
Ë&& (
	`I2C_CHECK_IT_SOURCE
(
ôsour˚s
, 
I2C_IT_ERR
) != RESET))

5118 
îr‹
 |
HAL_I2C_ERROR_OVR
;

5120 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_OVR
);

5124 i‡(
îr‹
 !
HAL_I2C_ERROR_NONE
)

5126 
hi2c
->
Eº‹Code
 |
îr‹
;

5127 
	`I2C_ITEº‹
(
hi2c
);

5129 
	}
}

5137 
__wók
 
	$HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5140 
	`UNUSED
(
hi2c
);

5145 
	}
}

5153 
__wók
 
	$HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5156 
	`UNUSED
(
hi2c
);

5161 
	}
}

5168 
__wók
 
	$HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5171 
	`UNUSED
(
hi2c
);

5176 
	}
}

5184 
__wók
 
	$HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5187 
	`UNUSED
(
hi2c
);

5192 
	}
}

5202 
__wók
 
	$HAL_I2C_AddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 
Tøns„rDúe˘i⁄
, 
uöt16_t
 
AddrM©chCode
)

5205 
	`UNUSED
(
hi2c
);

5206 
	`UNUSED
(
Tøns„rDúe˘i⁄
);

5207 
	`UNUSED
(
AddrM©chCode
);

5212 
	}
}

5220 
__wók
 
	$HAL_I2C_Li°íC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5223 
	`UNUSED
(
hi2c
);

5228 
	}
}

5236 
__wók
 
	$HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5239 
	`UNUSED
(
hi2c
);

5244 
	}
}

5252 
__wók
 
	$HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5255 
	`UNUSED
(
hi2c
);

5260 
	}
}

5268 
__wók
 
	$HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5271 
	`UNUSED
(
hi2c
);

5276 
	}
}

5284 
__wók
 
	$HAL_I2C_Ab‹tC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5287 
	`UNUSED
(
hi2c
);

5292 
	}
}

5319 
HAL_I2C_SèãTy≥Def
 
	$HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5322  
hi2c
->
Sèã
;

5323 
	}
}

5331 
HAL_I2C_ModeTy≥Def
 
	$HAL_I2C_GëMode
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5333  
hi2c
->
Mode
;

5334 
	}
}

5342 
uöt32_t
 
	$HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5344  
hi2c
->
Eº‹Code
;

5345 
	}
}

5365 
	$I2C_Ma°îTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5368 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

5369 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

5370 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

5372 i‡((
hi2c
->
X„rSize
 =0UË&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
))

5375 i‡((
CuºítX„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_LAST_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_NO_OPTION_FRAME
))

5377 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5379 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_TX
;

5380 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5381 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5383 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5384 
hi2c
->
	`Ma°îTxC∂tCÆlback
(hi2c);

5386 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

5392 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5395 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5397 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5398 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5400 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

5402 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5403 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5404 
hi2c
->
	`MemTxC∂tCÆlback
(hi2c);

5406 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

5411 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5412 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5413 
hi2c
->
	`Ma°îTxC∂tCÆlback
(hi2c);

5415 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

5420 i‡((
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
) || \

5421 ((
CuºítMode
 =
HAL_I2C_MODE_MEM
Ë&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX
)))

5423 i‡(
hi2c
->
X„rCou¡
 == 0U)

5426 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5430 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

5432 
	`I2C_Mem‹yTønsmô_TXE_BTF
(
hi2c
);

5437 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

5440 
hi2c
->
pBuffPå
++;

5443 
hi2c
->
X„rCou¡
--;

5451 
	}
}

5459 
	$I2C_Ma°îTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5462 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

5464 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

5466 i‡(
hi2c
->
X„rCou¡
 != 0U)

5469 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

5472 
hi2c
->
pBuffPå
++;

5475 
hi2c
->
X„rCou¡
--;

5480 i‡((
CuºítX„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_LAST_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_NO_OPTION_FRAME
))

5482 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5484 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_TX
;

5485 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5486 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5488 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5489 
hi2c
->
	`Ma°îTxC∂tCÆlback
(hi2c);

5491 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

5497 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5500 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5502 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5503 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5504 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

5506 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5507 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5508 
hi2c
->
	`MemTxC∂tCÆlback
(hi2c);

5510 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

5515 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5517 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5518 
hi2c
->
	`Ma°îTxC∂tCÆlback
(hi2c);

5520 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

5530 
	}
}

5538 
	$I2C_Mem‹yTønsmô_TXE_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5541 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

5543 i‡(
hi2c
->
EvítCou¡
 == 0U)

5546 i‡(
hi2c
->
MemaddSize
 =
I2C_MEMADD_SIZE_8BIT
)

5549 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(hi2c->
Memaddªss
);

5551 
hi2c
->
EvítCou¡
 += 2U;

5557 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(hi2c->
Memaddªss
);

5559 
hi2c
->
EvítCou¡
++;

5562 i‡(
hi2c
->
EvítCou¡
 == 1U)

5565 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(hi2c->
Memaddªss
);

5567 
hi2c
->
EvítCou¡
++;

5569 i‡(
hi2c
->
EvítCou¡
 == 2U)

5571 i‡(
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX
)

5574 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

5576 
hi2c
->
EvítCou¡
++;

5578 i‡((
hi2c
->
X„rCou¡
 > 0UË&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
))

5581 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

5584 
hi2c
->
pBuffPå
++;

5587 
hi2c
->
X„rCou¡
--;

5589 i‡((
hi2c
->
X„rCou¡
 =0UË&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
))

5593 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5596 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5598 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5599 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5600 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5601 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5602 
hi2c
->
	`MemTxC∂tCÆlback
(hi2c);

5604 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

5615 
	`I2C_Flush_DR
(
hi2c
);

5617 
	}
}

5625 
	$I2C_Ma°îRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5627 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

5629 
uöt32_t
 
tmp
;

5630 
uöt32_t
 
CuºítX„rO±i⁄s
;

5632 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

5633 
tmp
 = 
hi2c
->
X„rCou¡
;

5634 i‡(
tmp
 > 3U)

5637 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5640 
hi2c
->
pBuffPå
++;

5643 
hi2c
->
X„rCou¡
--;

5645 i‡(
hi2c
->
X„rCou¡
 =(
uöt16_t
)3)

5650 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5653 i‡((
hi2c
->
X„rO±i⁄s
 !
I2C_FIRST_AND_NEXT_FRAME
Ë&& ((
tmp
 == 1U) || (tmp == 0U)))

5655 i‡(
	`I2C_WaôOnSTOPReque°ThroughIT
(
hi2c
Ë=
HAL_OK
)

5658 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5661 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5664 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5667 
hi2c
->
pBuffPå
++;

5670 
hi2c
->
X„rCou¡
--;

5672 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5674 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

5676 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5677 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5679 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5680 
hi2c
->
	`MemRxC∂tCÆlback
(hi2c);

5682 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

5687 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5688 i‡((
CuºítX„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
))

5690 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5694 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_RX
;

5697 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5698 
hi2c
->
	`Ma°îRxC∂tCÆlback
(hi2c);

5700 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

5707 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5710 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5713 
hi2c
->
pBuffPå
++;

5716 
hi2c
->
X„rCou¡
--;

5718 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5719 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5722 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5723 
hi2c
->
	`Eº‹CÆlback
(hi2c);

5725 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

5733 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5736 
	}
}

5744 
	$I2C_Ma°îRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5747 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

5749 i‡(
hi2c
->
X„rCou¡
 == 4U)

5753 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5756 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5759 
hi2c
->
pBuffPå
++;

5762 
hi2c
->
X„rCou¡
--;

5764 i‡(
hi2c
->
X„rCou¡
 == 3U)

5768 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5770 i‡((
CuºítX„rO±i⁄s
 !
I2C_NEXT_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_FIRST_AND_NEXT_FRAME
))

5773 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5777 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5780 
hi2c
->
pBuffPå
++;

5783 
hi2c
->
X„rCou¡
--;

5785 i‡(
hi2c
->
X„rCou¡
 == 2U)

5788 i‡((
CuºítX„rO±i⁄s
 =
I2C_FIRST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
))

5791 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5793 i‡((
CuºítX„rO±i⁄s
 =
I2C_NEXT_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_AND_NEXT_FRAME
))

5796 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5801 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5805 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5808 
hi2c
->
pBuffPå
++;

5811 
hi2c
->
X„rCou¡
--;

5814 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5817 
hi2c
->
pBuffPå
++;

5820 
hi2c
->
X„rCou¡
--;

5823 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

5825 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5826 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

5828 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5829 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5830 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5831 
hi2c
->
	`MemRxC∂tCÆlback
(hi2c);

5833 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

5838 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5839 i‡((
CuºítX„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
))

5841 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5845 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_RX
;

5847 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5848 
hi2c
->
	`Ma°îRxC∂tCÆlback
(hi2c);

5850 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

5857 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

5860 
hi2c
->
pBuffPå
++;

5863 
hi2c
->
X„rCou¡
--;

5865 
	}
}

5873 
	$I2C_Ma°î_SB
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5875 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

5877 i‡(
hi2c
->
EvítCou¡
 == 0U)

5880 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(hi2c->
Devaddªss
);

5884 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(hi2c->
Devaddªss
);

5889 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

5892 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

5894 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(hi2c->
Devaddªss
);

5898 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(hi2c->
Devaddªss
);

5901 i‡(((
hi2c
->
hdm©x
 !
NULL
Ë&& (hi2c->hdm©x->
X„rC∂tCÆlback
 != NULL))

5902 || ((
hi2c
->
hdm¨x
 !
NULL
Ë&& (hi2c->hdm¨x->
X„rC∂tCÆlback
 != NULL)))

5905 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

5910 i‡(
hi2c
->
EvítCou¡
 == 0U)

5913 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(hi2c->
Devaddªss
);

5915 i‡(
hi2c
->
EvítCou¡
 == 1U)

5918 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(hi2c->
Devaddªss
);

5926 
	}
}

5934 
	$I2C_Ma°î_ADD10
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5937 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(hi2c->
Devaddªss
);

5939 i‡(((
hi2c
->
hdm©x
 !
NULL
Ë&& (hi2c->hdm©x->
X„rC∂tCÆlback
 != NULL))

5940 || ((
hi2c
->
hdm¨x
 !
NULL
Ë&& (hi2c->hdm¨x->
X„rC∂tCÆlback
 != NULL)))

5943 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

5945 
	}
}

5953 
	$I2C_Ma°î_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5956 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

5957 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

5958 
uöt32_t
 
Pªv_Sèã
 = 
hi2c
->
PªviousSèã
;

5960 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

5962 i‡((
hi2c
->
EvítCou¡
 =0UË&& (
CuºítMode
 =
HAL_I2C_MODE_MEM
))

5965 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5967 i‡((
hi2c
->
EvítCou¡
 =0UË&& (hi2c->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
))

5970 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5973 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

5975 
hi2c
->
EvítCou¡
++;

5979 i‡(
hi2c
->
X„rCou¡
 == 0U)

5982 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5985 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5987 i‡(
hi2c
->
X„rCou¡
 == 1U)

5989 i‡(
CuºítX„rO±i⁄s
 =
I2C_NO_OPTION_FRAME
)

5992 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5994 i‡((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

5997 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6000 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6005 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6008 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

6012 i‡((
CuºítX„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_LAST_FRAME
) \

6013 && ((
Pªv_Sèã
 !
I2C_STATE_MASTER_BUSY_RX
Ë|| (
CuºítX„rO±i⁄s
 =
I2C_FIRST_FRAME
)))

6015 i‡((
CuºítX„rO±i⁄s
 !
I2C_NEXT_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_FIRST_AND_NEXT_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_LAST_FRAME_NO_STOP
))

6018 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6023 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6027 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6032 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6035 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6038 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

6041 i‡(
hi2c
->
X„rCou¡
 == 2U)

6043 i‡((
CuºítX„rO±i⁄s
 !
I2C_NEXT_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_FIRST_AND_NEXT_FRAME
Ë&& (CuºítX„rO±i⁄†!
I2C_LAST_FRAME_NO_STOP
))

6046 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

6049 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6052 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6057 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6060 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6063 i‡(((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
Ë=I2C_CR2_DMAENË&& ((
CuºítX„rO±i⁄s
 =
I2C_NO_OPTION_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
)))

6066 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

6072 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6074 i‡(((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
Ë=I2C_CR2_DMAENË&& ((
CuºítX„rO±i⁄s
 =
I2C_NO_OPTION_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME_NO_STOP
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
)))

6077 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

6081 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6085 
hi2c
->
EvítCou¡
 = 0U;

6091 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6093 
	}
}

6101 
	$I2C_SœveTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6104 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

6106 i‡(
hi2c
->
X„rCou¡
 != 0U)

6109 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

6112 
hi2c
->
pBuffPå
++;

6115 
hi2c
->
X„rCou¡
--;

6117 i‡((
hi2c
->
X„rCou¡
 =0UË&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
))

6120 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

6123 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_TX
;

6124 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

6127 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6128 
hi2c
->
	`SœveTxC∂tCÆlback
(hi2c);

6130 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

6134 
	}
}

6142 
	$I2C_SœveTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6144 i‡(
hi2c
->
X„rCou¡
 != 0U)

6147 
hi2c
->
In°™˚
->
DR
 = *hi2c->
pBuffPå
;

6150 
hi2c
->
pBuffPå
++;

6153 
hi2c
->
X„rCou¡
--;

6155 
	}
}

6163 
	$I2C_SœveRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6166 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

6168 i‡(
hi2c
->
X„rCou¡
 != 0U)

6171 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6174 
hi2c
->
pBuffPå
++;

6177 
hi2c
->
X„rCou¡
--;

6179 i‡((
hi2c
->
X„rCou¡
 =0UË&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
))

6182 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

6185 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_RX
;

6186 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

6189 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6190 
hi2c
->
	`SœveRxC∂tCÆlback
(hi2c);

6192 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

6196 
	}
}

6204 
	$I2C_SœveRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6206 i‡(
hi2c
->
X„rCou¡
 != 0U)

6209 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6212 
hi2c
->
pBuffPå
++;

6215 
hi2c
->
X„rCou¡
--;

6217 
	}
}

6226 
	$I2C_Sœve_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
IT2Fœgs
)

6228 
uöt8_t
 
Tøns„rDúe˘i⁄
 = 
I2C_DIRECTION_RECEIVE
;

6229 
uöt16_t
 
SœveAddrCode
;

6231 i‡(((
uöt32_t
)
hi2c
->
Sèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

6234 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, (
I2C_IT_BUF
));

6237 i‡(
	`I2C_CHECK_FLAG
(
IT2Fœgs
, 
I2C_FLAG_TRA
Ë=
RESET
)

6239 
Tøns„rDúe˘i⁄
 = 
I2C_DIRECTION_TRANSMIT
;

6242 i‡(
	`I2C_CHECK_FLAG
(
IT2Fœgs
, 
I2C_FLAG_DUALF
Ë=
RESET
)

6244 
SœveAddrCode
 = (
uöt16_t
)
hi2c
->
Inô
.
OwnAddªss1
;

6248 
SœveAddrCode
 = (
uöt16_t
)
hi2c
->
Inô
.
OwnAddªss2
;

6252 
	`__HAL_UNLOCK
(
hi2c
);

6255 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6256 
hi2c
->
	`AddrCÆlback
(hi2c, 
Tøns„rDúe˘i⁄
, 
SœveAddrCode
);

6258 
	`HAL_I2C_AddrCÆlback
(
hi2c
, 
Tøns„rDúe˘i⁄
, 
SœveAddrCode
);

6264 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6267 
	`__HAL_UNLOCK
(
hi2c
);

6269 
	}
}

6277 
	$I2C_Sœve_STOPF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6280 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

6283 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6286 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

6289 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6292 i‡((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

6294 i‡((
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX
Ë|| (CuºítSèã =
HAL_I2C_STATE_BUSY_RX_LISTEN
))

6296 
hi2c
->
X„rCou¡
 = (
uöt16_t
)(
	`I2C_GET_DMA_REMAIN_DATA
(hi2c->
hdm¨x
));

6298 i‡(
hi2c
->
X„rCou¡
 != 0U)

6301 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

6305 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

6308 i‡(
	`HAL_DMA_GëSèã
(
hi2c
->
hdm¨x
Ë!
HAL_DMA_STATE_READY
)

6312 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

6315 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
Ë!
HAL_OK
)

6318 
hi2c
->
hdm¨x
->
	`X„rAb‹tCÆlback
(hi2c->hdmarx);

6324 
hi2c
->
X„rCou¡
 = (
uöt16_t
)(
	`I2C_GET_DMA_REMAIN_DATA
(hi2c->
hdm©x
));

6326 i‡(
hi2c
->
X„rCou¡
 != 0U)

6329 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

6333 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

6336 i‡(
	`HAL_DMA_GëSèã
(
hi2c
->
hdm©x
Ë!
HAL_DMA_STATE_READY
)

6340 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

6343 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
Ë!
HAL_OK
)

6346 
hi2c
->
hdm©x
->
	`X„rAb‹tCÆlback
(hi2c->hdmatx);

6353 i‡(
hi2c
->
X„rCou¡
 != 0U)

6356 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

6359 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6362 
hi2c
->
pBuffPå
++;

6365 
hi2c
->
X„rCou¡
--;

6369 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

6372 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6375 
hi2c
->
pBuffPå
++;

6378 
hi2c
->
X„rCou¡
--;

6381 i‡(
hi2c
->
X„rCou¡
 != 0U)

6384 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

6388 i‡(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

6391 
	`I2C_ITEº‹
(
hi2c
);

6395 i‡(
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
)

6398 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6399 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

6402 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6403 
hi2c
->
	`SœveRxC∂tCÆlback
(hi2c);

6405 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

6409 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

6411 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

6412 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6413 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6414 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6417 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6418 
hi2c
->
	`Li°íC∂tCÆlback
(hi2c);

6420 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

6425 i‡((
hi2c
->
PªviousSèã
 =
I2C_STATE_SLAVE_BUSY_RX
Ë|| (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX
))

6427 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6428 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6429 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6431 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6432 
hi2c
->
	`SœveRxC∂tCÆlback
(hi2c);

6434 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

6439 
	}
}

6446 
	$I2C_Sœve_AF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6449 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

6450 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

6452 i‡(((
CuºítX„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
)) && \

6453 (
CuºítSèã
 =
HAL_I2C_STATE_LISTEN
))

6455 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

6458 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6461 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

6464 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6466 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6467 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6468 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6471 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6472 
hi2c
->
	`Li°íC∂tCÆlback
(hi2c);

6474 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

6477 i‡(
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX
)

6479 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

6480 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_TX
;

6481 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6482 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6485 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6488 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

6491 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6494 
	`I2C_Flush_DR
(
hi2c
);

6496 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6497 
hi2c
->
	`SœveTxC∂tCÆlback
(hi2c);

6499 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

6506 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

6508 
	}
}

6515 
	$I2C_ITEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
)

6518 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

6519 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

6520 
uöt32_t
 
CuºítEº‹
;

6522 i‡(((
CuºítMode
 =
HAL_I2C_MODE_MASTER
Ë|| (CuºítModê=
HAL_I2C_MODE_MEM
)Ë&& (
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX
))

6525 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

6528 i‡(((
uöt32_t
)
CuºítSèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

6531 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6532 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

6538 i‡((
	`READ_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
Ë!I2C_CR2_DMAENË&& (
CuºítSèã
 !
HAL_I2C_STATE_ABORT
))

6540 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6541 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6543 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6547 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

6549 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

6551 i‡(
hi2c
->
hdm©x
->
Sèã
 !
HAL_DMA_STATE_READY
)

6555 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

6557 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
Ë!
HAL_OK
)

6560 
	`__HAL_I2C_DISABLE
(
hi2c
);

6562 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6565 
hi2c
->
hdm©x
->
	`X„rAb‹tCÆlback
(hi2c->hdmatx);

6572 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

6574 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
Ë!
HAL_OK
)

6577 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

6580 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6583 
hi2c
->
pBuffPå
++;

6587 
	`__HAL_I2C_DISABLE
(
hi2c
);

6589 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6592 
hi2c
->
hdm¨x
->
	`X„rAb‹tCÆlback
(hi2c->hdmarx);

6596 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_ABORT
)

6598 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6599 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

6602 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

6605 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6608 
hi2c
->
pBuffPå
++;

6612 
	`__HAL_I2C_DISABLE
(
hi2c
);

6615 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6616 
hi2c
->
	`Ab‹tC∂tCÆlback
(hi2c);

6618 
	`HAL_I2C_Ab‹tC∂tCÆlback
(
hi2c
);

6624 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

6627 *
hi2c
->
pBuffPå
 = (
uöt8_t
)hi2c->
In°™˚
->
DR
;

6630 
hi2c
->
pBuffPå
++;

6634 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6635 
hi2c
->
	`Eº‹CÆlback
(hi2c);

6637 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

6642 
CuºítEº‹
 = 
hi2c
->
Eº‹Code
;

6644 i‡(((
CuºítEº‹
 & 
HAL_I2C_ERROR_BERR
) == HAL_I2C_ERROR_BERR) || \

6645 ((
CuºítEº‹
 & 
HAL_I2C_ERROR_ARLO
) == HAL_I2C_ERROR_ARLO) || \

6646 ((
CuºítEº‹
 & 
HAL_I2C_ERROR_AF
) == HAL_I2C_ERROR_AF) || \

6647 ((
CuºítEº‹
 & 
HAL_I2C_ERROR_OVR
) == HAL_I2C_ERROR_OVR))

6650 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6655 
CuºítSèã
 = 
hi2c
->
Sèã
;

6656 i‡(((
hi2c
->
Eº‹Code
 & 
HAL_I2C_ERROR_AF
Ë=HAL_I2C_ERROR_AFË&& (
CuºítSèã
 =
HAL_I2C_STATE_LISTEN
))

6658 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

6659 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

6660 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

6661 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6664 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6665 
hi2c
->
	`Li°íC∂tCÆlback
(hi2c);

6667 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

6670 
	}
}

6681 
HAL_SètusTy≥Def
 
	$I2C_Ma°îReque°Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

6684 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

6687 i‡((
CuºítX„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_NO_OPTION_FRAME
))

6690 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6692 i‡(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_RX
)

6695 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6703 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6705 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6707 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

6709  
HAL_TIMEOUT
;

6712 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

6715 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

6720 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAddªss
);

6723 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6725  
HAL_ERROR
;

6729 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAddªss
);

6733 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6735  
HAL_ERROR
;

6738  
HAL_OK
;

6739 
	}
}

6751 
HAL_SètusTy≥Def
 
	$I2C_Ma°îReque°Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

6754 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

6757 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6760 i‡((
CuºítX„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_NO_OPTION_FRAME
))

6763 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6765 i‡(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_TX
)

6768 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6776 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6778 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6780 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

6782  
HAL_TIMEOUT
;

6785 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

6788 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAddªss
);

6793 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAddªss
);

6796 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6798  
HAL_ERROR
;

6802 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAddªss
);

6805 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6807  
HAL_ERROR
;

6811 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6814 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6817 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6819 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6821 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

6823  
HAL_TIMEOUT
;

6827 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(
DevAddªss
);

6831 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6833  
HAL_ERROR
;

6836  
HAL_OK
;

6837 
	}
}

6851 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

6854 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6857 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6859 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6861 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

6863  
HAL_TIMEOUT
;

6867 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

6870 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6872  
HAL_ERROR
;

6876 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6879 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6881 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

6884 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

6886  
HAL_ERROR
;

6890 i‡(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

6893 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

6899 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

6902 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6904 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

6907 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

6909  
HAL_ERROR
;

6913 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

6916  
HAL_OK
;

6917 
	}
}

6931 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

6934 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

6937 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

6940 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6942 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6944 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

6946  
HAL_TIMEOUT
;

6950 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

6953 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6955  
HAL_ERROR
;

6959 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6962 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6964 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

6967 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

6969  
HAL_ERROR
;

6973 i‡(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

6976 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

6982 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

6985 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

6987 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

6990 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

6992  
HAL_ERROR
;

6996 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

7000 i‡(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

7002 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

7005 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

7007  
HAL_ERROR
;

7011 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

7014 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

7016 i‡(
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

7018 
hi2c
->
Eº‹Code
 = 
HAL_I2C_WRONG_START
;

7020  
HAL_TIMEOUT
;

7024 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAddªss
);

7027 i‡(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

7029  
HAL_ERROR
;

7032  
HAL_OK
;

7033 
	}
}

7040 
	$I2C_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

7042 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

7045 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

7046 
HAL_I2C_ModeTy≥Def
 
CuºítMode
 = 
hi2c
->
Mode
;

7047 
uöt32_t
 
CuºítX„rO±i⁄s
 = 
hi2c
->
X„rO±i⁄s
;

7050 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

7053 i‡(
hi2c
->
hdm©x
 !
NULL
)

7055 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
NULL
;

7057 i‡(
hi2c
->
hdm¨x
 !
NULL
)

7059 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
NULL
;

7062 i‡((((
uöt32_t
)
CuºítSèã
 & (uöt32_t)
HAL_I2C_STATE_BUSY_TX
Ë=(uöt32_t)HAL_I2C_STATE_BUSY_TXË|| ((((uöt32_t)CuºítSèã & (uöt32_t)
HAL_I2C_STATE_BUSY_RX
Ë=(uöt32_t)HAL_I2C_STATE_BUSY_RXË&& (
CuºítMode
 =
HAL_I2C_MODE_SLAVE
)))

7065 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

7067 
hi2c
->
X„rCou¡
 = 0U;

7069 i‡(
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
)

7072 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_TX
;

7073 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

7076 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7077 
hi2c
->
	`SœveTxC∂tCÆlback
(hi2c);

7079 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

7082 i‡(
CuºítSèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
)

7085 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_RX
;

7086 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

7089 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7090 
hi2c
->
	`SœveRxC∂tCÆlback
(hi2c);

7092 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

7101 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

7104 i‡(
hi2c
->
Mode
 !
HAL_I2C_MODE_NONE
)

7106 i‡(
hi2c
->
X„rCou¡
 =(
uöt16_t
)1)

7109 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

7113 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

7116 i‡((
CuºítX„rO±i⁄s
 =
I2C_NO_OPTION_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_OTHER_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
))

7119 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

7123 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

7126 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

7128 
hi2c
->
X„rCou¡
 = 0U;

7131 i‡(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

7133 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7134 
hi2c
->
	`Eº‹CÆlback
(hi2c);

7136 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

7141 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7143 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

7145 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7146 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7148 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7149 
hi2c
->
	`MemRxC∂tCÆlback
(hi2c);

7151 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

7156 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7157 i‡((
CuºítX„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (CuºítX„rO±i⁄†=
I2C_LAST_FRAME
))

7159 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7163 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_RX
;

7166 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7167 
hi2c
->
	`Ma°îRxC∂tCÆlback
(hi2c);

7169 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

7178 
	}
}

7185 
	$I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

7187 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

7190 i‡(
hi2c
->
hdm©x
 !
NULL
)

7192 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
NULL
;

7194 i‡(
hi2c
->
hdm¨x
 !
NULL
)

7196 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
NULL
;

7200 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

7202 
hi2c
->
X„rCou¡
 = 0U;

7203 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7204 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7205 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

7207 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7208 
hi2c
->
	`Eº‹CÆlback
(hi2c);

7210 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

7212 
	}
}

7220 
	$I2C_DMAAb‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

7222 
__IO
 
uöt32_t
 
cou¡
 = 0U;

7223 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

7226 
HAL_I2C_SèãTy≥Def
 
CuºítSèã
 = 
hi2c
->
Sèã
;

7230 
cou¡
 = 
I2C_TIMEOUT_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

7233 i‡(
cou¡
 == 0U)

7235 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7238 
cou¡
--;

7240 
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
) == I2C_CR1_STOP);

7243 i‡(
hi2c
->
hdm©x
 !
NULL
)

7245 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
NULL
;

7247 i‡(
hi2c
->
hdm¨x
 !
NULL
)

7249 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
NULL
;

7253 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

7255 
hi2c
->
X„rCou¡
 = 0U;

7258 i‡(
hi2c
->
hdm©x
 !
NULL
)

7260 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

7262 i‡(
hi2c
->
hdm¨x
 !
NULL
)

7264 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

7268 
	`__HAL_I2C_DISABLE
(
hi2c
);

7271 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_ABORT
)

7273 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7274 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7275 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

7278 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7279 
hi2c
->
	`Ab‹tC∂tCÆlback
(hi2c);

7281 
	`HAL_I2C_Ab‹tC∂tCÆlback
(
hi2c
);

7286 i‡(((
uöt32_t
)
CuºítSèã
 & (uöt32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

7289 
	`__HAL_I2C_ENABLE
(
hi2c
);

7292 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

7295 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7296 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

7300 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7301 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7305 #i‡(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7306 
hi2c
->
	`Eº‹CÆlback
(hi2c);

7308 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

7311 
	}
}

7323 
HAL_SètusTy≥Def
 
	$I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
)

7326 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
Sètus
)

7329 i‡(
Timeout
 !
HAL_MAX_DELAY
)

7331 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

7333 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
Sètus
))

7335 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7336 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7337 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7338 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7341 
	`__HAL_UNLOCK
(
hi2c
);

7343  
HAL_ERROR
;

7348  
HAL_OK
;

7349 
	}
}

7360 
HAL_SètusTy≥Def
 
	$I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
)

7362 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
RESET
)

7364 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
SET
)

7367 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

7370 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

7372 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7373 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7374 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7375 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

7378 
	`__HAL_UNLOCK
(
hi2c
);

7380  
HAL_ERROR
;

7384 i‡(
Timeout
 !
HAL_MAX_DELAY
)

7386 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

7388 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
RESET
))

7390 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7391 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7392 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7393 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7396 
	`__HAL_UNLOCK
(
hi2c
);

7398  
HAL_ERROR
;

7403  
HAL_OK
;

7404 
	}
}

7414 
HAL_SètusTy≥Def
 
	$I2C_WaôOnTXEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

7416 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
Ë=
RESET
)

7419 i‡(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
Ë!
HAL_OK
)

7421  
HAL_ERROR
;

7425 i‡(
Timeout
 !
HAL_MAX_DELAY
)

7427 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

7429 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
Ë=
RESET
))

7431 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7432 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7433 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7434 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7437 
	`__HAL_UNLOCK
(
hi2c
);

7439  
HAL_ERROR
;

7444  
HAL_OK
;

7445 
	}
}

7455 
HAL_SètusTy≥Def
 
	$I2C_WaôOnBTFFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

7457 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
RESET
)

7460 i‡(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
Ë!
HAL_OK
)

7462  
HAL_ERROR
;

7466 i‡(
Timeout
 !
HAL_MAX_DELAY
)

7468 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

7470 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
RESET
))

7472 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7473 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7474 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7475 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7478 
	`__HAL_UNLOCK
(
hi2c
);

7480  
HAL_ERROR
;

7485  
HAL_OK
;

7486 
	}
}

7496 
HAL_SètusTy≥Def
 
	$I2C_WaôOnSTOPFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

7498 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
RESET
)

7501 i‡(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
Ë!
HAL_OK
)

7503  
HAL_ERROR
;

7507 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

7509 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
RESET
))

7511 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7512 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7513 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7514 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7517 
	`__HAL_UNLOCK
(
hi2c
);

7519  
HAL_ERROR
;

7523  
HAL_OK
;

7524 
	}
}

7532 
HAL_SètusTy≥Def
 
	$I2C_WaôOnSTOPReque°ThroughIT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

7534 
__IO
 
uöt32_t
 
cou¡
 = 0U;

7537 
cou¡
 = 
I2C_TIMEOUT_STOP_FLAG
 * (
Sy°emC‹eClock
 / 25U / 1000U);

7540 
cou¡
--;

7541 i‡(
cou¡
 == 0U)

7543 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7545  
HAL_ERROR
;

7548 
	`READ_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
) == I2C_CR1_STOP);

7550  
HAL_OK
;

7551 
	}
}

7561 
HAL_SètusTy≥Def
 
	$I2C_WaôOnRXNEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

7564 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
RESET
)

7567 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
SET
)

7570 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

7572 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7573 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7574 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7575 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_NONE
;

7578 
	`__HAL_UNLOCK
(
hi2c
);

7580  
HAL_ERROR
;

7584 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

7586 i‡((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
RESET
))

7588 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7589 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7590 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7591 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

7594 
	`__HAL_UNLOCK
(
hi2c
);

7596  
HAL_ERROR
;

7600  
HAL_OK
;

7601 
	}
}

7609 
HAL_SètusTy≥Def
 
	$I2C_IsAcknowÀdgeFaûed
(
I2C_H™dÀTy≥Def
 *
hi2c
)

7611 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
SET
)

7614 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

7616 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

7617 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

7618 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7619 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

7622 
	`__HAL_UNLOCK
(
hi2c
);

7624  
HAL_ERROR
;

7626  
HAL_OK
;

7627 
	}
}

7634 
	$I2C_C⁄vîtOthîX„rO±i⁄s
(
I2C_H™dÀTy≥Def
 *
hi2c
)

7639 i‡(
hi2c
->
X„rO±i⁄s
 =
I2C_OTHER_FRAME
)

7641 
hi2c
->
X„rO±i⁄s
 = 
I2C_FIRST_FRAME
;

7647 i‡(
hi2c
->
X„rO±i⁄s
 =
I2C_OTHER_AND_LAST_FRAME
)

7649 
hi2c
->
X„rO±i⁄s
 = 
I2C_FIRST_AND_LAST_FRAME
;

7655 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c

26 
	~"°m32f1xx_hÆ.h
"

37 #ifde‡
HAL_PWR_MODULE_ENABLED


49 
	#PVD_MODE_IT
 0x00010000U

	)

50 
	#PVD_MODE_EVT
 0x00020000U

	)

51 
	#PVD_RISING_EDGE
 0x00000001U

	)

52 
	#PVD_FALLING_EDGE
 0x00000002U

	)

62 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

63 
	#PWR_CR_OFFSET
 0x00U

	)

64 
	#PWR_CSR_OFFSET
 0x04U

	)

65 
	#PWR_CR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CR_OFFSET
)

	)

66 
	#PWR_CSR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CSR_OFFSET
)

	)

76 
	#LPSDSR_BIT_NUMBER
 
PWR_CR_LPDS_Pos


	)

77 
	#CR_LPSDSR_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32UË+ (
LPSDSR_BIT_NUMBER
 * 4U)))

	)

80 
	#DBP_BIT_NUMBER
 
PWR_CR_DBP_Pos


	)

81 
	#CR_DBP_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32UË+ (
DBP_BIT_NUMBER
 * 4U)))

	)

84 
	#PVDE_BIT_NUMBER
 
PWR_CR_PVDE_Pos


	)

85 
	#CR_PVDE_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32UË+ (
PVDE_BIT_NUMBER
 * 4U)))

	)

97 
	#CSR_EWUP_BB
(
VAL
Ë((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32UË+ (
	`POSITION_VAL
(VALË* 4U)))

	)

112 
PWR_OvîlﬂdW„
();

115 
__NOINLINE


116 
	$PWR_OvîlﬂdW„
()

118 
__asm
 volatile( "wfe" );

119 
__asm
 volatile( "nop" );

120 
	}
}

155 
	$HAL_PWR_DeInô
()

157 
	`__HAL_RCC_PWR_FORCE_RESET
();

158 
	`__HAL_RCC_PWR_RELEASE_RESET
();

159 
	}
}

168 
	$HAL_PWR_E«bÀBkUpAc˚ss
()

171 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
ENABLE
;

172 
	}
}

181 
	$HAL_PWR_DißbÀBkUpAc˚ss
()

184 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
DISABLE
;

185 
	}
}

315 
	$HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
)

318 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
sC⁄figPVD
->
PVDLevñ
));

319 
	`as£π_∑øm
(
	`IS_PWR_PVD_MODE
(
sC⁄figPVD
->
Mode
));

322 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC⁄figPVD
->
PVDLevñ
);

325 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

326 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

327 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

328 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();

331 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

333 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

337 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

339 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

343 if((
sC⁄figPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

345 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

348 if((
sC⁄figPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

350 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

352 
	}
}

358 
	$HAL_PWR_E«bÀPVD
()

361 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
ENABLE
;

362 
	}
}

368 
	$HAL_PWR_DißbÀPVD
()

371 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
DISABLE
;

372 
	}
}

381 
	$HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

384 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

386 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
ENABLE
;

387 
	}
}

396 
	$HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

399 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

401 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
DISABLE
;

402 
	}
}

416 
	$HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
)

421 
	`UNUSED
(
Reguœt‹
);

423 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¡ry
));

426 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

429 if(
SLEEPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

432 
	`__WFI
();

437 
	`__SEV
();

438 
	`__WFE
();

439 
	`__WFE
();

441 
	}
}

462 
	$HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

465 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

466 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

469 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

472 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_LPDS
, 
Reguœt‹
);

475 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

478 if(
STOPE¡ry
 =
PWR_STOPENTRY_WFI
)

481 
	`__WFI
();

486 
	`__SEV
();

487 
	`PWR_OvîlﬂdW„
();

488 
	`PWR_OvîlﬂdW„
();

491 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

492 
	}
}

502 
	$HAL_PWR_E¡îSTANDBYMode
()

505 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

508 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

511 #i‡
	`deföed
 ( 
__CC_ARM
)

512 
	`__f‹˚_°‹es
();

515 
	`__WFI
();

516 
	}
}

527 
	$HAL_PWR_E«bÀSÀïOnExô
()

530 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

531 
	}
}

540 
	$HAL_PWR_DißbÀSÀïOnExô
()

543 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

544 
	}
}

553 
	$HAL_PWR_E«bÀSEVOnPíd
()

556 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

557 
	}
}

566 
	$HAL_PWR_DißbÀSEVOnPíd
()

569 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

570 
	}
}

579 
	$HAL_PWR_PVD_IRQH™dÀr
()

582 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë!
RESET
)

585 
	`HAL_PWR_PVDCÆlback
();

588 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

590 
	}
}

596 
__wók
 
	$HAL_PWR_PVDCÆlback
()

601 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c

61 
	~"°m32f1xx_hÆ.h
"

72 #ifde‡
HAL_RCC_MODULE_ENABLED


87 
	#MCO1_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

88 
	#MCO1_GPIO_PORT
 
GPIOA


	)

89 
	#MCO1_PIN
 
GPIO_PIN_8


	)

104 
RCC_Dñay
(
uöt32_t
 
mdñay
);

200 
HAL_SètusTy≥Def
 
	$HAL_RCC_DeInô
()

202 
uöt32_t
 
tick°¨t
;

205 
tick°¨t
 = 
	`HAL_GëTick
();

208 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

211 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSIRDY
Ë=
RESET
)

213 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI_TIMEOUT_VALUE
)

215  
HAL_TIMEOUT
;

220 
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (0x10U << 
RCC_CR_HSITRIM_Pos
));

223 
tick°¨t
 = 
	`HAL_GëTick
();

226 
	`CLEAR_REG
(
RCC
->
CFGR
);

229 
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SWS
Ë!
RESET
)

231 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
CLOCKSWITCH_TIMEOUT_VALUE
)

233  
HAL_TIMEOUT
;

238 
Sy°emC‹eClock
 = 
HSI_VALUE
;

241 i‡(
	`HAL_InôTick
(
uwTickPrio
Ë!
HAL_OK
)

243  
HAL_ERROR
;

247 
tick°¨t
 = 
	`HAL_GëTick
();

250 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

253 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLLRDY
Ë!
RESET
)

255 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

257  
HAL_TIMEOUT
;

262 
	`CLEAR_REG
(
RCC
->
CFGR
);

265 
tick°¨t
 = 
	`HAL_GëTick
();

268 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
);

271 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSERDY
Ë!
RESET
)

273 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSE_TIMEOUT_VALUE
)

275  
HAL_TIMEOUT
;

280 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

282 #i‡
	`deföed
(
RCC_PLL2_SUPPORT
)

284 
tick°¨t
 = 
	`HAL_GëTick
();

287 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

290 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2RDY
Ë!
RESET
)

292 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

294  
HAL_TIMEOUT
;

299 #i‡
	`deföed
(
RCC_PLLI2S_SUPPORT
)

301 
tick°¨t
 = 
	`HAL_GëTick
();

304 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

307 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3RDY
Ë!
RESET
)

309 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

311  
HAL_TIMEOUT
;

316 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

318 
	`CLEAR_REG
(
RCC
->
CFGR2
);

322 
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RMVF
);

325 
	`CLEAR_REG
(
RCC
->
CIR
);

327  
HAL_OK
;

328 
	}
}

345 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

347 
uöt32_t
 
tick°¨t
;

348 
uöt32_t
 
∂l_c⁄fig
;

351 i‡(
RCC_OscInôSåu˘
 =
NULL
)

353  
HAL_ERROR
;

357 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

360 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

363 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

366 i‡((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
)

367 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
)))

369 i‡((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

371  
HAL_ERROR
;

377 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

381 i‡(
RCC_OscInôSåu˘
->
HSESèã
 !
RCC_HSE_OFF
)

384 
tick°¨t
 = 
	`HAL_GëTick
();

387 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

389 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSE_TIMEOUT_VALUE
)

391  
HAL_TIMEOUT
;

398 
tick°¨t
 = 
	`HAL_GëTick
();

401 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

403 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSE_TIMEOUT_VALUE
)

405  
HAL_TIMEOUT
;

412 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

415 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

416 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

419 i‡((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
)

420 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSI_DIV2
)))

423 i‡((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

425  
HAL_ERROR
;

431 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

437 i‡(
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_OFF
)

440 
	`__HAL_RCC_HSI_ENABLE
();

443 
tick°¨t
 = 
	`HAL_GëTick
();

446 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

448 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI_TIMEOUT_VALUE
)

450  
HAL_TIMEOUT
;

455 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

460 
	`__HAL_RCC_HSI_DISABLE
();

463 
tick°¨t
 = 
	`HAL_GëTick
();

466 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

468 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI_TIMEOUT_VALUE
)

470  
HAL_TIMEOUT
;

477 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

480 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

483 i‡(
RCC_OscInôSåu˘
->
LSISèã
 !
RCC_LSI_OFF
)

486 
	`__HAL_RCC_LSI_ENABLE
();

489 
tick°¨t
 = 
	`HAL_GëTick
();

492 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

494 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
LSI_TIMEOUT_VALUE
)

496  
HAL_TIMEOUT
;

501 
	`RCC_Dñay
(1);

506 
	`__HAL_RCC_LSI_DISABLE
();

509 
tick°¨t
 = 
	`HAL_GëTick
();

512 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

514 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
LSI_TIMEOUT_VALUE
)

516  
HAL_TIMEOUT
;

522 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

524 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

527 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

531 i‡(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

533 
	`__HAL_RCC_PWR_CLK_ENABLE
();

534 
pwr˛kch™ged
 = 
SET
;

537 i‡(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

540 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

543 
tick°¨t
 = 
	`HAL_GëTick
();

545 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

547 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

549  
HAL_TIMEOUT
;

555 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

557 i‡(
RCC_OscInôSåu˘
->
LSESèã
 !
RCC_LSE_OFF
)

560 
tick°¨t
 = 
	`HAL_GëTick
();

563 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

565 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

567  
HAL_TIMEOUT
;

574 
tick°¨t
 = 
	`HAL_GëTick
();

577 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

579 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

581  
HAL_TIMEOUT
;

587 i‡(
pwr˛kch™ged
 =
SET
)

589 
	`__HAL_RCC_PWR_CLK_DISABLE
();

593 #i‡
	`deföed
(
RCC_CR_PLL2ON
)

596 
	`as£π_∑øm
(
	`IS_RCC_PLL2
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
));

597 i‡((
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
Ë!
RCC_PLL2_NONE
)

601 i‡((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

602 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

603 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

605  
HAL_ERROR
;

609 i‡((
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
Ë=
RCC_PLL2_ON
)

612 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
));

613 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
));

617 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
) && \

618 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
))

620  
HAL_ERROR
;

624 
	`__HAL_RCC_PLL2_DISABLE
();

627 
tick°¨t
 = 
	`HAL_GëTick
();

630 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

632 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

634  
HAL_TIMEOUT
;

639 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
);

642 
	`__HAL_RCC_PLL2_CONFIG
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
);

645 
	`__HAL_RCC_PLL2_ENABLE
();

648 
tick°¨t
 = 
	`HAL_GëTick
();

651 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë=
RESET
)

653 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

655  
HAL_TIMEOUT
;

662 
	`CLEAR_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

665 
	`__HAL_RCC_PLL2_DISABLE
();

668 
tick°¨t
 = 
	`HAL_GëTick
();

671 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

673 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

675  
HAL_TIMEOUT
;

685 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

686 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

689 i‡(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

691 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

694 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

695 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
));

698 
	`__HAL_RCC_PLL_DISABLE
();

701 
tick°¨t
 = 
	`HAL_GëTick
();

704 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

706 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

708  
HAL_TIMEOUT
;

714 i‡(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 =
RCC_PLLSOURCE_HSE
)

717 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV
(
RCC_OscInôSåu˘
->
HSEPªdivVÆue
));

718 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

719 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
));

722 
	`SET_BIT
(
RCC
->
CFGR2
, 
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
);

726 
	`__HAL_RCC_HSE_PREDIV_CONFIG
(
RCC_OscInôSåu˘
->
HSEPªdivVÆue
);

730 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
,

731 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
);

733 
	`__HAL_RCC_PLL_ENABLE
();

736 
tick°¨t
 = 
	`HAL_GëTick
();

739 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

741 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

743  
HAL_TIMEOUT
;

750 
	`__HAL_RCC_PLL_DISABLE
();

753 
tick°¨t
 = 
	`HAL_GëTick
();

756 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

758 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

760  
HAL_TIMEOUT
;

768 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_OFF
)

770  
HAL_ERROR
;

775 
∂l_c⁄fig
 = 
RCC
->
CFGR
;

776 i‡((
	`READ_BIT
(
∂l_c⁄fig
, 
RCC_CFGR_PLLSRC
Ë!
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
) ||

777 (
	`READ_BIT
(
∂l_c⁄fig
, 
RCC_CFGR_PLLMULL
Ë!
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
))

779  
HAL_ERROR
;

785  
HAL_OK
;

786 
	}
}

811 
HAL_SètusTy≥Def
 
	$HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
)

813 
uöt32_t
 
tick°¨t
;

816 i‡(
RCC_ClkInôSåu˘
 =
NULL
)

818  
HAL_ERROR
;

822 
	`as£π_∑øm
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkInôSåu˘
->
ClockTy≥
));

823 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FL©ícy
));

829 #i‡
	`deföed
(
FLASH_ACR_LATENCY
)

831 i‡(
FL©ícy
 > 
	`__HAL_FLASH_GET_LATENCY
())

834 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

838 i‡(
	`__HAL_FLASH_GET_LATENCY
(Ë!
FL©ícy
)

840  
HAL_ERROR
;

846 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

850 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

852 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_HCLK_DIV16
);

855 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

857 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, (
RCC_HCLK_DIV16
 << 3));

861 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

862 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

866 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

868 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

871 i‡(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

874 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

876  
HAL_ERROR
;

880 i‡(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

883 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

885  
HAL_ERROR
;

892 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

894  
HAL_ERROR
;

897 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

900 
tick°¨t
 = 
	`HAL_GëTick
();

902 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 << 
RCC_CFGR_SWS_Pos
))

904 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
CLOCKSWITCH_TIMEOUT_VALUE
)

906  
HAL_TIMEOUT
;

911 #i‡
	`deföed
(
FLASH_ACR_LATENCY
)

913 i‡(
FL©ícy
 < 
	`__HAL_FLASH_GET_LATENCY
())

916 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

920 i‡(
	`__HAL_FLASH_GET_LATENCY
(Ë!
FL©ícy
)

922  
HAL_ERROR
;

928 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

930 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB1CLKDividî
));

931 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkInôSåu˘
->
APB1CLKDividî
);

935 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

937 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB2CLKDividî
));

938 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkInôSåu˘
->
APB2CLKDividî
) << 3));

942 
Sy°emC‹eClock
 = 
	`HAL_RCC_GëSysClockFªq
(Ë>> 
AHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
Ë>> 
RCC_CFGR_HPRE_Pos
];

945 
	`HAL_InôTick
(
uwTickPrio
);

947  
HAL_OK
;

948 
	}
}

1000 
	$HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
)

1002 
GPIO_InôTy≥Def
 
gpio
 = {0U};

1005 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCOx
));

1006 
	`as£π_∑øm
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

1007 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSour˚
));

1010 
	`UNUSED
(
RCC_MCOx
);

1011 
	`UNUSED
(
RCC_MCODiv
);

1014 
gpio
.
Mode
 = 
GPIO_MODE_AF_PP
;

1015 
gpio
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

1016 
gpio
.
PuŒ
 = 
GPIO_NOPULL
;

1017 
gpio
.
Pö
 = 
MCO1_PIN
;

1020 
	`MCO1_CLK_ENABLE
();

1022 
	`HAL_GPIO_Inô
(
MCO1_GPIO_PORT
, &
gpio
);

1025 
	`__HAL_RCC_MCO1_CONFIG
(
RCC_MCOSour˚
, 
RCC_MCODiv
);

1026 
	}
}

1037 
	$HAL_RCC_E«bÀCSS
()

1039 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
ENABLE
;

1040 
	}
}

1046 
	$HAL_RCC_DißbÀCSS
()

1048 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
DISABLE
;

1049 
	}
}

1080 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

1082 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1083 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};

1084 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

1086 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

1087 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

1088 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

1090 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[2U] = {1, 2};

1094 
uöt32_t
 
tm¥eg
 = 0U, 
¥ediv
 = 0U, 
∂l˛k
 = 0U, 
∂lmul
 = 0U;

1095 
uöt32_t
 
sys˛ock‰eq
 = 0U;

1096 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1097 
uöt32_t
 
¥ediv2
 = 0U, 
∂l2mul
 = 0U;

1100 
tm¥eg
 = 
RCC
->
CFGR
;

1103 
tm¥eg
 & 
RCC_CFGR_SWS
)

1105 
RCC_SYSCLKSOURCE_STATUS_HSE
:

1107 
sys˛ock‰eq
 = 
HSE_VALUE
;

1110 
RCC_SYSCLKSOURCE_STATUS_PLLCLK
:

1112 
∂lmul
 = 
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLMULL
Ë>> 
RCC_CFGR_PLLMULL_Pos
];

1113 i‡((
tm¥eg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

1115 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

1116 
¥ediv
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
Ë>> 
RCC_CFGR2_PREDIV1_Pos
];

1118 
¥ediv
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë>> 
RCC_CFGR_PLLXTPRE_Pos
];

1120 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1122 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

1126 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

1127 
∂l2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
Ë>> 
RCC_CFGR2_PLL2MUL_Pos
) + 2;

1128 
∂l˛k
 = (
uöt32_t
)(((
uöt64_t
)
HSE_VALUE
 * (uöt64_t)
∂l2mul
 * (uöt64_t)
∂lmul
Ë/ ((uöt64_t)
¥ediv2
 * (uöt64_t)
¥ediv
));

1133 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 * 
∂lmul
Ë/ 
¥ediv
);

1138 i‡(
∂lmul
 =
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
RCC_CFGR_PLLMULL6_5
Ë>> 
RCC_CFGR_PLLMULL_Pos
])

1140 
∂l˛k
 =Öllclk / 2;

1144 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 * 
∂lmul
Ë/ 
¥ediv
);

1150 
∂l˛k
 = (
uöt32_t
)((
HSI_VALUE
 >> 1Ë* 
∂lmul
);

1152 
sys˛ock‰eq
 = 
∂l˛k
;

1155 
RCC_SYSCLKSOURCE_STATUS_HSI
:

1158 
sys˛ock‰eq
 = 
HSI_VALUE
;

1162  
sys˛ock‰eq
;

1163 
	}
}

1174 
uöt32_t
 
	$HAL_RCC_GëHCLKFªq
()

1176  
Sy°emC‹eClock
;

1177 
	}
}

1185 
uöt32_t
 
	$HAL_RCC_GëPCLK1Fªq
()

1188  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
Ë>> 
RCC_CFGR_PPRE1_Pos
]);

1189 
	}
}

1197 
uöt32_t
 
	$HAL_RCC_GëPCLK2Fªq
()

1200  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
Ë>> 
RCC_CFGR_PPRE2_Pos
]);

1201 
	}
}

1210 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1213 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

1216 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 \

1217 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
;

1219 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1221 
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
 = 
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

1225 i‡((
RCC
->
CR
 & 
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1227 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

1229 i‡((
RCC
->
CR
 & 
RCC_CR_HSEON
) == RCC_CR_HSEON)

1231 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

1235 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

1237 
RCC_OscInôSåu˘
->
HSEPªdivVÆue
 = 
	`__HAL_RCC_HSE_GET_PREDIV
();

1240 i‡((
RCC
->
CR
 & 
RCC_CR_HSION
) == RCC_CR_HSION)

1242 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

1246 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

1249 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
CR
 & 
RCC_CR_HSITRIM
Ë>> 
RCC_CR_HSITRIM_Pos
);

1252 i‡((
RCC
->
BDCR
 & 
RCC_BDCR_LSEBYP
) == RCC_BDCR_LSEBYP)

1254 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

1256 i‡((
RCC
->
BDCR
 & 
RCC_BDCR_LSEON
) == RCC_BDCR_LSEON)

1258 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

1262 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

1266 i‡((
RCC
->
CSR
 & 
RCC_CSR_LSION
) == RCC_CSR_LSION)

1268 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

1272 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

1277 i‡((
RCC
->
CR
 & 
RCC_CR_PLLON
) == RCC_CR_PLLON)

1279 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

1283 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

1285 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
);

1286 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
);

1287 #i‡
	`deföed
(
RCC_CR_PLL2ON
)

1289 i‡((
RCC
->
CR
 & 
RCC_CR_PLL2ON
) == RCC_CR_PLL2ON)

1291 
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
 = 
RCC_PLL2_ON
;

1295 
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
 = 
RCC_PLL2_OFF
;

1297 
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
 = 
	`__HAL_RCC_HSE_GET_PREDIV2
();

1298 
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
 = (
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
);

1300 
	}
}

1310 
	$HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
)

1313 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

1314 
	`as£π_∑øm
(
pFL©ícy
 !
NULL
);

1317 
RCC_ClkInôSåu˘
->
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1320 
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1323 
RCC_ClkInôSåu˘
->
AHBCLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1326 
RCC_ClkInôSåu˘
->
APB1CLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1329 
RCC_ClkInôSåu˘
->
APB2CLKDividî
 = (
uöt32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1331 #i‡ 
	`deföed
(
FLASH_ACR_LATENCY
)

1333 *
pFL©ícy
 = (
uöt32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1336 *
pFL©ícy
 = (
uöt32_t
)
FLASH_LATENCY_0
;

1338 
	}
}

1345 
	$HAL_RCC_NMI_IRQH™dÀr
()

1348 i‡(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1351 
	`HAL_RCC_CSSCÆlback
();

1354 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1356 
	}
}

1363 
	$RCC_Dñay
(
uöt32_t
 
mdñay
)

1365 
__IO
 
uöt32_t
 
Dñay
 = 
mdñay
 * (
Sy°emC‹eClock
 / 8U / 1000U);

1368 
	`__NOP
();

1370 
Dñay
 --);

1371 
	}
}

1377 
__wók
 
	$HAL_RCC_CSSCÆlback
()

1382 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c

23 
	~"°m32f1xx_hÆ.h
"

29 #ifde‡
HAL_RCC_MODULE_ENABLED


98 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

100 
uöt32_t
 
tick°¨t
 = 0U, 
ãmp_ªg
 = 0U;

101 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

102 
uöt32_t
 
∂œ˘ive
 = 0U;

106 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

109 i‡((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC))

111 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

114 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
RTCClockSñe˘i⁄
));

119 i‡(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

121 
	`__HAL_RCC_PWR_CLK_ENABLE
();

122 
pwr˛kch™ged
 = 
SET
;

125 i‡(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

128 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

131 
tick°¨t
 = 
	`HAL_GëTick
();

133 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

135 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

137  
HAL_TIMEOUT
;

143 
ãmp_ªg
 = (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
);

144 i‡((
ãmp_ªg
 !0x00000000UË&& (ãmp_ªg !(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_BDCR_RTCSEL
)))

147 
ãmp_ªg
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

149 
	`__HAL_RCC_BACKUPRESET_FORCE
();

150 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

152 
RCC
->
BDCR
 = 
ãmp_ªg
;

155 i‡(
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_BDCR_LSEON
))

158 
tick°¨t
 = 
	`HAL_GëTick
();

161 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

163 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

165  
HAL_TIMEOUT
;

170 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

173 i‡(
pwr˛kch™ged
 =
SET
)

175 
	`__HAL_RCC_PWR_CLK_DISABLE
();

180 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC)

183 
	`as£π_∑øm
(
	`IS_RCC_ADCPLLCLK_DIV
(
PîùhClkInô
->
AdcClockSñe˘i⁄
));

186 
	`__HAL_RCC_ADC_CONFIG
(
PîùhClkInô
->
AdcClockSñe˘i⁄
);

189 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

191 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2)

194 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLKSOURCE
(
PîùhClkInô
->
I2s2ClockSñe˘i⁄
));

197 
	`__HAL_RCC_I2S2_CONFIG
(
PîùhClkInô
->
I2s2ClockSñe˘i⁄
);

201 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3)

204 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLKSOURCE
(
PîùhClkInô
->
I2s3ClockSñe˘i⁄
));

207 
	`__HAL_RCC_I2S3_CONFIG
(
PîùhClkInô
->
I2s3ClockSñe˘i⁄
);

212 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë|| HAL_IS_BIT_SET(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

215 
∂œ˘ive
 = 1;

219 i‡(
∂œ˘ive
 == 1)

222 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

225 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_MUL
(
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
));

226 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
));

230 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL2ON
) && \

231 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
))

233  
HAL_ERROR
;

237 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
);

240 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
);

243 
	`__HAL_RCC_PLLI2S_ENABLE
();

246 
tick°¨t
 = 
	`HAL_GëTick
();

249 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

251 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

253  
HAL_TIMEOUT
;

260 i‡(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
Ë!
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
)

262  
HAL_ERROR
;

268 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

269 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

270 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

272 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_USB
) == RCC_PERIPHCLK_USB)

275 
	`as£π_∑øm
(
	`IS_RCC_USBPLLCLK_DIV
(
PîùhClkInô
->
UsbClockSñe˘i⁄
));

278 
	`__HAL_RCC_USB_CONFIG
(
PîùhClkInô
->
UsbClockSñe˘i⁄
);

282  
HAL_OK
;

283 
	}
}

292 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

294 
uöt32_t
 
§c˛k
 = 0U;

297 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_RTC
;

300 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

302 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
;

305 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_ADC
;

306 
PîùhClkInô
->
AdcClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_ADC_SOURCE
();

308 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

310 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S2
;

311 
PîùhClkInô
->
I2s2ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S2_SOURCE
();

314 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S3
;

315 
PîùhClkInô
->
I2s3ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S3_SOURCE
();

319 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

321 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S2
;

322 
PîùhClkInô
->
I2s2ClockSñe˘i⁄
 = 
RCC_I2S2CLKSOURCE_SYSCLK
;

325 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S3
;

326 
PîùhClkInô
->
I2s3ClockSñe˘i⁄
 = 
RCC_I2S3CLKSOURCE_SYSCLK
;

330 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

331 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

332 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

334 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_USB
;

335 
PîùhClkInô
->
UsbClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_USB_SOURCE
();

337 
	}
}

385 
uöt32_t
 
	$HAL_RCCEx_GëPîùhCLKFªq
(
uöt32_t
 
PîùhClk
)

387 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

388 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};

389 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

391 
uöt32_t
 
¥ediv1
 = 0U, 
∂l˛k
 = 0U, 
∂lmul
 = 0U;

392 
uöt32_t
 
∂l2mul
 = 0U, 
∂l3mul
 = 0U, 
¥ediv2
 = 0U;

394 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
) || \

395 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

396 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

397 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[2U] = {1, 2};

399 
uöt32_t
 
¥ediv1
 = 0U, 
∂l˛k
 = 0U, 
∂lmul
 = 0U;

401 
uöt32_t
 
ãmp_ªg
 = 0U, 
‰equícy
 = 0U;

404 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClk
));

406 
PîùhClk
)

408 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

409 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

410 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

411 
RCC_PERIPHCLK_USB
:

414 
ãmp_ªg
 = 
RCC
->
CFGR
;

417 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLLON
))

419 
∂lmul
 = 
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
ãmp_ªg
 & 
RCC_CFGR_PLLMULL
Ë>> 
RCC_CFGR_PLLMULL_Pos
];

420 i‡((
ãmp_ªg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

422 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

423 || 
	`deföed
(
STM32F100xE
)

424 
¥ediv1
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
Ë>> 
RCC_CFGR2_PREDIV1_Pos
];

426 
¥ediv1
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë>> 
RCC_CFGR_PLLXTPRE_Pos
];

429 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

430 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

434 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

435 
∂l2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
Ë>> 
RCC_CFGR2_PLL2MUL_Pos
) + 2;

436 
∂l˛k
 = (
uöt32_t
)((((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l2mul
Ë/ 
¥ediv1
Ë* 
∂lmul
);

441 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv1
Ë* 
∂lmul
);

446 i‡(
∂lmul
 =
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
RCC_CFGR_PLLMULL6_5
Ë>> 
RCC_CFGR_PLLMULL_Pos
])

448 
∂l˛k
 =Öllclk / 2;

451 i‡((
ãmp_ªg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

454 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv1
Ë* 
∂lmul
);

461 
∂l˛k
 = (
uöt32_t
)((
HSI_VALUE
 >> 1Ë* 
∂lmul
);

465 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

467 i‡(
	`__HAL_RCC_GET_USB_SOURCE
(Ë=
RCC_USBCLKSOURCE_PLL_DIV2
)

470 
‰equícy
 = 
∂l˛k
;

475 
‰equícy
 = (2 * 
∂l˛k
) / 3;

479 i‡(
	`__HAL_RCC_GET_USB_SOURCE
(Ë=
RCC_USBCLKSOURCE_PLL
)

482 
‰equícy
 = 
∂l˛k
;

487 
‰equícy
 = (
∂l˛k
 * 2) / 3;

494 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

495 
RCC_PERIPHCLK_I2S2
:

497 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

499 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

501 i‡(
	`__HAL_RCC_GET_I2S2_SOURCE
(Ë=
RCC_I2S2CLKSOURCE_SYSCLK
)

504 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

509 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

512 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

513 
∂l3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
Ë>> 
RCC_CFGR2_PLL3MUL_Pos
) + 2;

514 
‰equícy
 = (
uöt32_t
)(2 * ((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l3mul
));

520 
RCC_PERIPHCLK_I2S3
:

522 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

524 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

526 i‡(
	`__HAL_RCC_GET_I2S3_SOURCE
(Ë=
RCC_I2S3CLKSOURCE_SYSCLK
)

529 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

534 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

537 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

538 
∂l3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
Ë>> 
RCC_CFGR2_PLL3MUL_Pos
) + 2;

539 
‰equícy
 = (
uöt32_t
)(2 * ((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l3mul
));

546 
RCC_PERIPHCLK_RTC
:

549 
ãmp_ªg
 = 
RCC
->
BDCR
;

552 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
—emp_ªg, 
RCC_BDCR_LSERDY
)))

554 
‰equícy
 = 
LSE_VALUE
;

557 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_LSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSIRDY
)))

559 
‰equícy
 = 
LSI_VALUE
;

561 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_HSE_DIV128
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
)))

563 
‰equícy
 = 
HSE_VALUE
 / 128U;

572 
RCC_PERIPHCLK_ADC
:

574 
‰equícy
 = 
	`HAL_RCC_GëPCLK2Fªq
(Ë/ (((
	`__HAL_RCC_GET_ADC_SOURCE
(Ë>> 
RCC_CFGR_ADCPRE_Pos
) + 1) * 2);

582  (
‰equícy
);

583 
	}
}

589 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

611 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_E«bÀPLLI2S
(
RCC_PLLI2SInôTy≥Def
 *
PLLI2SInô
)

613 
uöt32_t
 
tick°¨t
 = 0U;

616 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

619 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_MUL
(
PLLI2SInô
->
PLLI2SMUL
));

620 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PLLI2SInô
->
HSEPªdiv2VÆue
));

624 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL2ON
) && \

625 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PLLI2SInô
->
HSEPªdiv2VÆue
))

627  
HAL_ERROR
;

631 
	`__HAL_RCC_PLLI2S_DISABLE
();

634 
tick°¨t
 = 
	`HAL_GëTick
();

637 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

639 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

641  
HAL_TIMEOUT
;

646 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLLI2SInô
->
HSEPªdiv2VÆue
);

650 
	`__HAL_RCC_PLLI2S_CONFIG
(
PLLI2SInô
->
PLLI2SMUL
);

653 
	`__HAL_RCC_PLLI2S_ENABLE
();

656 
tick°¨t
 = 
	`HAL_GëTick
();

659 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

661 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

663  
HAL_TIMEOUT
;

670  
HAL_ERROR
;

673  
HAL_OK
;

674 
	}
}

681 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_DißbÀPLLI2S
()

683 
uöt32_t
 
tick°¨t
 = 0U;

686 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

689 
	`__HAL_RCC_PLLI2S_DISABLE
();

692 
tick°¨t
 = 
	`HAL_GëTick
();

695 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

697 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

699  
HAL_TIMEOUT
;

706  
HAL_ERROR
;

709  
HAL_OK
;

710 
	}
}

737 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_E«bÀPLL2
(
RCC_PLL2InôTy≥Def
 *
PLL2Inô
)

739 
uöt32_t
 
tick°¨t
 = 0U;

743 i‡((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

744 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

745 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

747  
HAL_ERROR
;

752 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
PLL2Inô
->
PLL2MUL
));

753 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PLL2Inô
->
HSEPªdiv2VÆue
));

757 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
) && \

758 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PLL2Inô
->
HSEPªdiv2VÆue
))

760  
HAL_ERROR
;

764 
	`__HAL_RCC_PLL2_DISABLE
();

767 
tick°¨t
 = 
	`HAL_GëTick
();

770 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

772 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

774  
HAL_TIMEOUT
;

779 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLL2Inô
->
HSEPªdiv2VÆue
);

782 
	`__HAL_RCC_PLL2_CONFIG
(
PLL2Inô
->
PLL2MUL
);

785 
	`__HAL_RCC_PLL2_ENABLE
();

788 
tick°¨t
 = 
	`HAL_GëTick
();

791 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë=
RESET
)

793 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

795  
HAL_TIMEOUT
;

800  
HAL_OK
;

801 
	}
}

808 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_DißbÀPLL2
()

810 
uöt32_t
 
tick°¨t
 = 0U;

814 i‡((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

815 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

816 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

818  
HAL_ERROR
;

823 
	`__HAL_RCC_PLL2_DISABLE
();

826 
tick°¨t
 = 
	`HAL_GëTick
();

829 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

831 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

833  
HAL_TIMEOUT
;

838  
HAL_OK
;

839 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi.c

202 
	~"°m32f1xx_hÆ.h
"

212 #ifde‡
HAL_SPI_MODULE_ENABLED


216 #i‡(
USE_SPI_CRC
 !0UË&& 
deföed
(
SPI_CRC_ERROR_WORKAROUND_FEATURE
)

237 
	#USE_SPI_CRC_ERROR_WORKAROUND
 0U

	)

242 
	#SPI_DEFAULT_TIMEOUT
 100U

	)

253 
SPI_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

254 
SPI_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

255 
SPI_DMATønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

256 
SPI_DMAHÆfTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

257 
SPI_DMAHÆfRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

258 
SPI_DMAHÆfTønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

259 
SPI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

260 
SPI_DMAAb‹tOnEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

261 
SPI_DMATxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

262 
SPI_DMARxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

263 
HAL_SètusTy≥Def
 
SPI_WaôFœgSèãU¡ûTimeout
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sèã
,

264 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

265 
SPI_TxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

266 
SPI_TxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

267 
SPI_RxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

268 
SPI_RxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

269 
SPI_2löesRxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

270 
SPI_2löesTxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

271 
SPI_2löesTxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

272 
SPI_2löesRxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
);

273 #i‡(
USE_SPI_CRC
 != 0U)

274 
SPI_RxISR_8BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
);

275 
SPI_RxISR_16BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
);

276 
SPI_2löesRxISR_8BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
);

277 
SPI_2löesRxISR_16BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
);

279 
SPI_Ab‹tRx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

280 
SPI_Ab‹tTx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

281 
SPI_Clo£RxTx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

282 
SPI_Clo£Rx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

283 
SPI_Clo£Tx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

284 
HAL_SètusTy≥Def
 
SPI_EndRxTønß˘i⁄
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

285 
HAL_SètusTy≥Def
 
SPI_EndRxTxTønß˘i⁄
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

335 
HAL_SètusTy≥Def
 
	$HAL_SPI_Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

338 i‡(
h•i
 =
NULL
)

340  
HAL_ERROR
;

344 
	`as£π_∑øm
(
	`IS_SPI_ALL_INSTANCE
(
h•i
->
In°™˚
));

345 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
h•i
->
Inô
.
Mode
));

346 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
h•i
->
Inô
.
Dúe˘i⁄
));

347 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
h•i
->
Inô
.
D©aSize
));

348 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
h•i
->
Inô
.
NSS
));

349 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h•i
->
Inô
.
BaudR©ePªsˇÀr
));

350 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
h•i
->
Inô
.
Fú°Bô
));

353 
	`as£π_∑øm
(
	`IS_SPI_TIMODE
(
h•i
->
Inô
.
TIMode
));

354 i‡(
h•i
->
Inô
.
TIMode
 =
SPI_TIMODE_DISABLE
)

356 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
h•i
->
Inô
.
CLKPﬁ¨ôy
));

357 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
h•i
->
Inô
.
CLKPha£
));

359 i‡(
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)

361 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h•i
->
Inô
.
BaudR©ePªsˇÀr
));

366 
h•i
->
Inô
.
BaudR©ePªsˇÀr
 = 
SPI_BAUDRATEPRESCALER_2
;

371 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h•i
->
Inô
.
BaudR©ePªsˇÀr
));

374 
h•i
->
Inô
.
CLKPﬁ¨ôy
 = 
SPI_POLARITY_LOW
;

375 
h•i
->
Inô
.
CLKPha£
 = 
SPI_PHASE_1EDGE
;

377 #i‡(
USE_SPI_CRC
 != 0U)

378 
	`as£π_∑øm
(
	`IS_SPI_CRC_CALCULATION
(
h•i
->
Inô
.
CRCCÆcuœti⁄
));

379 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

381 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
h•i
->
Inô
.
CRCPﬁynomül
));

384 
h•i
->
Inô
.
CRCCÆcuœti⁄
 = 
SPI_CRCCALCULATION_DISABLE
;

387 i‡(
h•i
->
Sèã
 =
HAL_SPI_STATE_RESET
)

390 
h•i
->
Lock
 = 
HAL_UNLOCKED
;

392 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

394 
h•i
->
TxC∂tCÆlback
 = 
HAL_SPI_TxC∂tCÆlback
;

395 
h•i
->
RxC∂tCÆlback
 = 
HAL_SPI_RxC∂tCÆlback
;

396 
h•i
->
TxRxC∂tCÆlback
 = 
HAL_SPI_TxRxC∂tCÆlback
;

397 
h•i
->
TxHÆfC∂tCÆlback
 = 
HAL_SPI_TxHÆfC∂tCÆlback
;

398 
h•i
->
RxHÆfC∂tCÆlback
 = 
HAL_SPI_RxHÆfC∂tCÆlback
;

399 
h•i
->
TxRxHÆfC∂tCÆlback
 = 
HAL_SPI_TxRxHÆfC∂tCÆlback
;

400 
h•i
->
Eº‹CÆlback
 = 
HAL_SPI_Eº‹CÆlback
;

401 
h•i
->
Ab‹tC∂tCÆlback
 = 
HAL_SPI_Ab‹tC∂tCÆlback
;

403 i‡(
h•i
->
M•InôCÆlback
 =
NULL
)

405 
h•i
->
M•InôCÆlback
 = 
HAL_SPI_M•Inô
;

409 
h•i
->
	`M•InôCÆlback
(hspi);

412 
	`HAL_SPI_M•Inô
(
h•i
);

416 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY
;

419 
	`__HAL_SPI_DISABLE
(
h•i
);

424 
	`WRITE_REG
(
h•i
->
In°™˚
->
CR1
, ((h•i->
Inô
.
Mode
 & (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
)) |

425 (
h•i
->
Inô
.
Dúe˘i⁄
 & (
SPI_CR1_RXONLY
 | 
SPI_CR1_BIDIMODE
)) |

426 (
h•i
->
Inô
.
D©aSize
 & 
SPI_CR1_DFF
) |

427 (
h•i
->
Inô
.
CLKPﬁ¨ôy
 & 
SPI_CR1_CPOL
) |

428 (
h•i
->
Inô
.
CLKPha£
 & 
SPI_CR1_CPHA
) |

429 (
h•i
->
Inô
.
NSS
 & 
SPI_CR1_SSM
) |

430 (
h•i
->
Inô
.
BaudR©ePªsˇÀr
 & 
SPI_CR1_BR_Msk
) |

431 (
h•i
->
Inô
.
Fú°Bô
 & 
SPI_CR1_LSBFIRST
) |

432 (
h•i
->
Inô
.
CRCCÆcuœti⁄
 & 
SPI_CR1_CRCEN
)));

435 
	`WRITE_REG
(
h•i
->
In°™˚
->
CR2
, ((h•i->
Inô
.
NSS
 >> 16UË& 
SPI_CR2_SSOE
));

437 #i‡(
USE_SPI_CRC
 != 0U)

440 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

442 
	`WRITE_REG
(
h•i
->
In°™˚
->
CRCPR
, (h•i->
Inô
.
CRCPﬁynomül
 & 
SPI_CRCPR_CRCPOLY_Msk
));

446 #i‡
	`deföed
(
SPI_I2SCFGR_I2SMOD
)

448 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
);

451 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

452 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

454  
HAL_OK
;

455 
	}
}

463 
HAL_SètusTy≥Def
 
	$HAL_SPI_DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
)

466 i‡(
h•i
 =
NULL
)

468  
HAL_ERROR
;

472 
	`as£π_∑øm
(
	`IS_SPI_ALL_INSTANCE
(
h•i
->
In°™˚
));

474 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY
;

477 
	`__HAL_SPI_DISABLE
(
h•i
);

479 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

480 i‡(
h•i
->
M•DeInôCÆlback
 =
NULL
)

482 
h•i
->
M•DeInôCÆlback
 = 
HAL_SPI_M•DeInô
;

486 
h•i
->
	`M•DeInôCÆlback
(hspi);

489 
	`HAL_SPI_M•DeInô
(
h•i
);

492 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

493 
h•i
->
Sèã
 = 
HAL_SPI_STATE_RESET
;

496 
	`__HAL_UNLOCK
(
h•i
);

498  
HAL_OK
;

499 
	}
}

507 
__wók
 
	$HAL_SPI_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

510 
	`UNUSED
(
h•i
);

515 
	}
}

523 
__wók
 
	$HAL_SPI_M•DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
)

526 
	`UNUSED
(
h•i
);

531 
	}
}

533 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

543 
HAL_SètusTy≥Def
 
	$HAL_SPI_Regi°îCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
, 
HAL_SPI_CÆlbackIDTy≥Def
 
CÆlbackID
,

544 
pSPI_CÆlbackTy≥Def
 
pCÆlback
)

546 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

548 i‡(
pCÆlback
 =
NULL
)

551 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_INVALID_CALLBACK
;

553  
HAL_ERROR
;

556 
	`__HAL_LOCK
(
h•i
);

558 i‡(
HAL_SPI_STATE_READY
 =
h•i
->
Sèã
)

560 
CÆlbackID
)

562 
HAL_SPI_TX_COMPLETE_CB_ID
 :

563 
h•i
->
TxC∂tCÆlback
 = 
pCÆlback
;

566 
HAL_SPI_RX_COMPLETE_CB_ID
 :

567 
h•i
->
RxC∂tCÆlback
 = 
pCÆlback
;

570 
HAL_SPI_TX_RX_COMPLETE_CB_ID
 :

571 
h•i
->
TxRxC∂tCÆlback
 = 
pCÆlback
;

574 
HAL_SPI_TX_HALF_COMPLETE_CB_ID
 :

575 
h•i
->
TxHÆfC∂tCÆlback
 = 
pCÆlback
;

578 
HAL_SPI_RX_HALF_COMPLETE_CB_ID
 :

579 
h•i
->
RxHÆfC∂tCÆlback
 = 
pCÆlback
;

582 
HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID
 :

583 
h•i
->
TxRxHÆfC∂tCÆlback
 = 
pCÆlback
;

586 
HAL_SPI_ERROR_CB_ID
 :

587 
h•i
->
Eº‹CÆlback
 = 
pCÆlback
;

590 
HAL_SPI_ABORT_CB_ID
 :

591 
h•i
->
Ab‹tC∂tCÆlback
 = 
pCÆlback
;

594 
HAL_SPI_MSPINIT_CB_ID
 :

595 
h•i
->
M•InôCÆlback
 = 
pCÆlback
;

598 
HAL_SPI_MSPDEINIT_CB_ID
 :

599 
h•i
->
M•DeInôCÆlback
 = 
pCÆlback
;

604 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

607 
°©us
 = 
HAL_ERROR
;

611 i‡(
HAL_SPI_STATE_RESET
 =
h•i
->
Sèã
)

613 
CÆlbackID
)

615 
HAL_SPI_MSPINIT_CB_ID
 :

616 
h•i
->
M•InôCÆlback
 = 
pCÆlback
;

619 
HAL_SPI_MSPDEINIT_CB_ID
 :

620 
h•i
->
M•DeInôCÆlback
 = 
pCÆlback
;

625 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

628 
°©us
 = 
HAL_ERROR
;

635 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

638 
°©us
 = 
HAL_ERROR
;

642 
	`__HAL_UNLOCK
(
h•i
);

643  
°©us
;

644 
	}
}

654 
HAL_SètusTy≥Def
 
	$HAL_SPI_UnRegi°îCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
, 
HAL_SPI_CÆlbackIDTy≥Def
 
CÆlbackID
)

656 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

659 
	`__HAL_LOCK
(
h•i
);

661 i‡(
HAL_SPI_STATE_READY
 =
h•i
->
Sèã
)

663 
CÆlbackID
)

665 
HAL_SPI_TX_COMPLETE_CB_ID
 :

666 
h•i
->
TxC∂tCÆlback
 = 
HAL_SPI_TxC∂tCÆlback
;

669 
HAL_SPI_RX_COMPLETE_CB_ID
 :

670 
h•i
->
RxC∂tCÆlback
 = 
HAL_SPI_RxC∂tCÆlback
;

673 
HAL_SPI_TX_RX_COMPLETE_CB_ID
 :

674 
h•i
->
TxRxC∂tCÆlback
 = 
HAL_SPI_TxRxC∂tCÆlback
;

677 
HAL_SPI_TX_HALF_COMPLETE_CB_ID
 :

678 
h•i
->
TxHÆfC∂tCÆlback
 = 
HAL_SPI_TxHÆfC∂tCÆlback
;

681 
HAL_SPI_RX_HALF_COMPLETE_CB_ID
 :

682 
h•i
->
RxHÆfC∂tCÆlback
 = 
HAL_SPI_RxHÆfC∂tCÆlback
;

685 
HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID
 :

686 
h•i
->
TxRxHÆfC∂tCÆlback
 = 
HAL_SPI_TxRxHÆfC∂tCÆlback
;

689 
HAL_SPI_ERROR_CB_ID
 :

690 
h•i
->
Eº‹CÆlback
 = 
HAL_SPI_Eº‹CÆlback
;

693 
HAL_SPI_ABORT_CB_ID
 :

694 
h•i
->
Ab‹tC∂tCÆlback
 = 
HAL_SPI_Ab‹tC∂tCÆlback
;

697 
HAL_SPI_MSPINIT_CB_ID
 :

698 
h•i
->
M•InôCÆlback
 = 
HAL_SPI_M•Inô
;

701 
HAL_SPI_MSPDEINIT_CB_ID
 :

702 
h•i
->
M•DeInôCÆlback
 = 
HAL_SPI_M•DeInô
;

707 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

710 
°©us
 = 
HAL_ERROR
;

714 i‡(
HAL_SPI_STATE_RESET
 =
h•i
->
Sèã
)

716 
CÆlbackID
)

718 
HAL_SPI_MSPINIT_CB_ID
 :

719 
h•i
->
M•InôCÆlback
 = 
HAL_SPI_M•Inô
;

722 
HAL_SPI_MSPDEINIT_CB_ID
 :

723 
h•i
->
M•DeInôCÆlback
 = 
HAL_SPI_M•DeInô
;

728 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

731 
°©us
 = 
HAL_ERROR
;

738 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

741 
°©us
 = 
HAL_ERROR
;

745 
	`__HAL_UNLOCK
(
h•i
);

746  
°©us
;

747 
	}
}

795 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

797 
uöt32_t
 
tick°¨t
;

798 
uöt16_t
 
öôül_TxX„rCou¡
;

801 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

804 
tick°¨t
 = 
	`HAL_GëTick
();

805 
öôül_TxX„rCou¡
 = 
Size
;

807 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_READY
)

809  
HAL_BUSY
;

812 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

814  
HAL_ERROR
;

818 
	`__HAL_LOCK
(
h•i
);

821 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

822 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

823 
h•i
->
pTxBuffPå
 = (c⁄° 
uöt8_t
 *)
pD©a
;

824 
h•i
->
TxX„rSize
 = 
Size
;

825 
h•i
->
TxX„rCou¡
 = 
Size
;

828 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
NULL
;

829 
h•i
->
RxX„rSize
 = 0U;

830 
h•i
->
RxX„rCou¡
 = 0U;

831 
h•i
->
TxISR
 = 
NULL
;

832 
h•i
->
RxISR
 = 
NULL
;

835 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

838 
	`__HAL_SPI_DISABLE
(
h•i
);

839 
	`SPI_1LINE_TX
(
h•i
);

842 #i‡(
USE_SPI_CRC
 != 0U)

844 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

846 
	`SPI_RESET_CRC
(
h•i
);

851 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

854 
	`__HAL_SPI_ENABLE
(
h•i
);

858 i‡(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_16BIT
)

860 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| (
öôül_TxX„rCou¡
 == 0x01U))

862 
h•i
->
In°™˚
->
DR
 = *((c⁄° 
uöt16_t
 *)h•i->
pTxBuffPå
);

863 
h•i
->
pTxBuffPå
 +(
uöt16_t
);

864 
h•i
->
TxX„rCou¡
--;

867 
h•i
->
TxX„rCou¡
 > 0U)

870 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_TXE
))

872 
h•i
->
In°™˚
->
DR
 = *((c⁄° 
uöt16_t
 *)h•i->
pTxBuffPå
);

873 
h•i
->
pTxBuffPå
 +(
uöt16_t
);

874 
h•i
->
TxX„rCou¡
--;

879 i‡((((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë>
Timeout
Ë&& (Timeouà!
HAL_MAX_DELAY
)) || (Timeout == 0U))

881 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

882 
	`__HAL_UNLOCK
(
h•i
);

883  
HAL_TIMEOUT
;

891 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| (
öôül_TxX„rCou¡
 == 0x01U))

893 *((
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
Ë*((c⁄° uöt8_à*)h•i->
pTxBuffPå
);

894 
h•i
->
pTxBuffPå
 +(
uöt8_t
);

895 
h•i
->
TxX„rCou¡
--;

897 
h•i
->
TxX„rCou¡
 > 0U)

900 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_TXE
))

902 *((
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
Ë*((c⁄° uöt8_à*)h•i->
pTxBuffPå
);

903 
h•i
->
pTxBuffPå
 +(
uöt8_t
);

904 
h•i
->
TxX„rCou¡
--;

909 i‡((((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë>
Timeout
Ë&& (Timeouà!
HAL_MAX_DELAY
)) || (Timeout == 0U))

911 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

912 
	`__HAL_UNLOCK
(
h•i
);

913  
HAL_TIMEOUT
;

918 #i‡(
USE_SPI_CRC
 != 0U)

920 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

922 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

927 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

929 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_FLAG
;

933 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

935 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

938 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

940 
	`__HAL_UNLOCK
(
h•i
);

942 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

944  
HAL_ERROR
;

948  
HAL_OK
;

950 
	}
}

961 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

963 #i‡(
USE_SPI_CRC
 != 0U)

964 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

966 
uöt32_t
 
tick°¨t
;

968 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_READY
)

970  
HAL_BUSY
;

973 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
))

975 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

977  
	`HAL_SPI_TønsmôRe˚ive
(
h•i
, 
pD©a
,ÖD©a, 
Size
, 
Timeout
);

981 
tick°¨t
 = 
	`HAL_GëTick
();

983 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

985  
HAL_ERROR
;

989 
	`__HAL_LOCK
(
h•i
);

992 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

993 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

994 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
pD©a
;

995 
h•i
->
RxX„rSize
 = 
Size
;

996 
h•i
->
RxX„rCou¡
 = 
Size
;

999 
h•i
->
pTxBuffPå
 = (
uöt8_t
 *)
NULL
;

1000 
h•i
->
TxX„rSize
 = 0U;

1001 
h•i
->
TxX„rCou¡
 = 0U;

1002 
h•i
->
RxISR
 = 
NULL
;

1003 
h•i
->
TxISR
 = 
NULL
;

1005 #i‡(
USE_SPI_CRC
 != 0U)

1007 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1009 
	`SPI_RESET_CRC
(
h•i
);

1011 
h•i
->
RxX„rCou¡
--;

1016 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1019 
	`__HAL_SPI_DISABLE
(
h•i
);

1020 
	`SPI_1LINE_RX
(
h•i
);

1024 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1027 
	`__HAL_SPI_ENABLE
(
h•i
);

1031 i‡(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1034 
h•i
->
RxX„rCou¡
 > 0U)

1037 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_RXNE
))

1040 (* (
uöt8_t
 *)
h•i
->
pRxBuffPå
Ë*(
__IO
 uöt8_à*)&h•i->
In°™˚
->
DR
;

1041 
h•i
->
pRxBuffPå
 +(
uöt8_t
);

1042 
h•i
->
RxX„rCou¡
--;

1047 i‡((((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë>
Timeout
Ë&& (Timeouà!
HAL_MAX_DELAY
)) || (Timeout == 0U))

1049 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1050 
	`__HAL_UNLOCK
(
h•i
);

1051  
HAL_TIMEOUT
;

1059 
h•i
->
RxX„rCou¡
 > 0U)

1062 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_RXNE
))

1064 *((
uöt16_t
 *)
h•i
->
pRxBuffPå
Ë(uöt16_t)h•i->
In°™˚
->
DR
;

1065 
h•i
->
pRxBuffPå
 +(
uöt16_t
);

1066 
h•i
->
RxX„rCou¡
--;

1071 i‡((((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë>
Timeout
Ë&& (Timeouà!
HAL_MAX_DELAY
)) || (Timeout == 0U))

1073 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1074 
	`__HAL_UNLOCK
(
h•i
);

1075  
HAL_TIMEOUT
;

1081 #i‡(
USE_SPI_CRC
 != 0U)

1083 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1086 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1089 i‡(
	`READ_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
))

1092 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1095 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1098 
	`__HAL_UNLOCK
(
h•i
);

1099  
HAL_TIMEOUT
;

1103 i‡(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_16BIT
)

1105 *((
uöt16_t
 *)
h•i
->
pRxBuffPå
Ë(uöt16_t)h•i->
In°™˚
->
DR
;

1110 (*(
uöt8_t
 *)
h•i
->
pRxBuffPå
Ë*(
__IO
 uöt8_à*)&h•i->
In°™˚
->
DR
;

1114 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1116 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

1117 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1118 
	`__HAL_UNLOCK
(
h•i
);

1119  
HAL_TIMEOUT
;

1123 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

1125 
	`UNUSED
(
tm¥eg
);

1130 i‡(
	`SPI_EndRxTønß˘i⁄
(
h•i
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1132 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_FLAG
;

1135 #i‡(
USE_SPI_CRC
 != 0U)

1137 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

1140 i‡(
	`SPI_ISCRCEº‹VÆid
(
h•i
Ë=
SPI_VALID_CRC_ERROR
)

1142 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

1145 
	`SPI_RESET_CRC
(
h•i
);

1149 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

1154 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1156 
	`__HAL_UNLOCK
(
h•i
);

1157 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

1159  
HAL_ERROR
;

1163  
HAL_OK
;

1165 
	}
}

1177 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
,

1178 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1180 
uöt16_t
 
öôül_TxX„rCou¡
;

1181 
uöt32_t
 
tmp_mode
;

1182 
HAL_SPI_SèãTy≥Def
 
tmp_°©e
;

1183 
uöt32_t
 
tick°¨t
;

1184 #i‡(
USE_SPI_CRC
 != 0U)

1185 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

1189 
uöt32_t
 
txÆlowed
 = 1U;

1192 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1195 
tick°¨t
 = 
	`HAL_GëTick
();

1198 
tmp_°©e
 = 
h•i
->
Sèã
;

1199 
tmp_mode
 = 
h•i
->
Inô
.
Mode
;

1200 
öôül_TxX„rCou¡
 = 
Size
;

1202 i‡(!((
tmp_°©e
 =
HAL_SPI_STATE_READY
) || \

1203 ((
tmp_mode
 =
SPI_MODE_MASTER
Ë&& (
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
) &&

1204 (
tmp_°©e
 =
HAL_SPI_STATE_BUSY_RX
))))

1206  
HAL_BUSY
;

1209 i‡((
pTxD©a
 =
NULL
Ë|| (
pRxD©a
 =NULLË|| (
Size
 == 0U))

1211  
HAL_ERROR
;

1215 
	`__HAL_LOCK
(
h•i
);

1218 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1220 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1224 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1225 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
pRxD©a
;

1226 
h•i
->
RxX„rCou¡
 = 
Size
;

1227 
h•i
->
RxX„rSize
 = 
Size
;

1228 
h•i
->
pTxBuffPå
 = (c⁄° 
uöt8_t
 *)
pTxD©a
;

1229 
h•i
->
TxX„rCou¡
 = 
Size
;

1230 
h•i
->
TxX„rSize
 = 
Size
;

1233 
h•i
->
RxISR
 = 
NULL
;

1234 
h•i
->
TxISR
 = 
NULL
;

1236 #i‡(
USE_SPI_CRC
 != 0U)

1238 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1240 
	`SPI_RESET_CRC
(
h•i
);

1245 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1248 
	`__HAL_SPI_ENABLE
(
h•i
);

1252 i‡(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_16BIT
)

1254 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| (
öôül_TxX„rCou¡
 == 0x01U))

1256 
h•i
->
In°™˚
->
DR
 = *((c⁄° 
uöt16_t
 *)h•i->
pTxBuffPå
);

1257 
h•i
->
pTxBuffPå
 +(
uöt16_t
);

1258 
h•i
->
TxX„rCou¡
--;

1260 #i‡(
USE_SPI_CRC
 != 0U)

1262 i‡((
h•i
->
TxX„rCou¡
 =0UË&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

1264 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1269 (
h•i
->
TxX„rCou¡
 > 0UË|| (h•i->
RxX„rCou¡
 > 0U))

1272 i‡((
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_TXE
)Ë&& (h•i->
TxX„rCou¡
 > 0UË&& (
txÆlowed
 == 1U))

1274 
h•i
->
In°™˚
->
DR
 = *((c⁄° 
uöt16_t
 *)h•i->
pTxBuffPå
);

1275 
h•i
->
pTxBuffPå
 +(
uöt16_t
);

1276 
h•i
->
TxX„rCou¡
--;

1278 
txÆlowed
 = 0U;

1280 #i‡(
USE_SPI_CRC
 != 0U)

1282 i‡((
h•i
->
TxX„rCou¡
 =0UË&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

1284 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1290 i‡((
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_RXNE
)Ë&& (h•i->
RxX„rCou¡
 > 0U))

1292 *((
uöt16_t
 *)
h•i
->
pRxBuffPå
Ë(uöt16_t)h•i->
In°™˚
->
DR
;

1293 
h•i
->
pRxBuffPå
 +(
uöt16_t
);

1294 
h•i
->
RxX„rCou¡
--;

1296 
txÆlowed
 = 1U;

1298 i‡(((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë>
Timeout
Ë&& (Timeouà!
HAL_MAX_DELAY
))

1300 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1301 
	`__HAL_UNLOCK
(
h•i
);

1302  
HAL_TIMEOUT
;

1309 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| (
öôül_TxX„rCou¡
 == 0x01U))

1311 *((
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
Ë*((c⁄° uöt8_à*)h•i->
pTxBuffPå
);

1312 
h•i
->
pTxBuffPå
 +(
uöt8_t
);

1313 
h•i
->
TxX„rCou¡
--;

1315 #i‡(
USE_SPI_CRC
 != 0U)

1317 i‡((
h•i
->
TxX„rCou¡
 =0UË&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

1319 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1323 (
h•i
->
TxX„rCou¡
 > 0UË|| (h•i->
RxX„rCou¡
 > 0U))

1326 i‡((
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_TXE
)Ë&& (h•i->
TxX„rCou¡
 > 0UË&& (
txÆlowed
 == 1U))

1328 *(
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
 = *((c⁄° uöt8_à*)h•i->
pTxBuffPå
);

1329 
h•i
->
pTxBuffPå
++;

1330 
h•i
->
TxX„rCou¡
--;

1332 
txÆlowed
 = 0U;

1334 #i‡(
USE_SPI_CRC
 != 0U)

1336 i‡((
h•i
->
TxX„rCou¡
 =0UË&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

1338 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1344 i‡((
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_RXNE
)Ë&& (h•i->
RxX„rCou¡
 > 0U))

1346 (*(
uöt8_t
 *)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

1347 
h•i
->
pRxBuffPå
++;

1348 
h•i
->
RxX„rCou¡
--;

1350 
txÆlowed
 = 1U;

1352 i‡((((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë>
Timeout
Ë&& ((Timeouà!
HAL_MAX_DELAY
))) || (Timeout == 0U))

1354 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1355 
	`__HAL_UNLOCK
(
h•i
);

1356  
HAL_TIMEOUT
;

1361 #i‡(
USE_SPI_CRC
 != 0U)

1363 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1366 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1369 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

1370 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1371 
	`__HAL_UNLOCK
(
h•i
);

1372  
HAL_TIMEOUT
;

1375 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

1377 
	`UNUSED
(
tm¥eg
);

1381 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

1384 i‡(
	`SPI_ISCRCEº‹VÆid
(
h•i
Ë=
SPI_VALID_CRC_ERROR
)

1386 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

1389 
	`SPI_RESET_CRC
(
h•i
);

1390 
	`__HAL_UNLOCK
(
h•i
);

1391  
HAL_ERROR
;

1395 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

1401 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1403 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_FLAG
;

1404 
	`__HAL_UNLOCK
(
h•i
);

1405  
HAL_ERROR
;

1409 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

1411 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1415 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1417 
	`__HAL_UNLOCK
(
h•i
);

1419 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

1421  
HAL_ERROR
;

1425  
HAL_OK
;

1427 
	}
}

1437 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1441 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

1444 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1446  
HAL_ERROR
;

1449 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_READY
)

1451  
HAL_BUSY
;

1455 
	`__HAL_LOCK
(
h•i
);

1458 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

1459 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1460 
h•i
->
pTxBuffPå
 = (c⁄° 
uöt8_t
 *)
pD©a
;

1461 
h•i
->
TxX„rSize
 = 
Size
;

1462 
h•i
->
TxX„rCou¡
 = 
Size
;

1465 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
NULL
;

1466 
h•i
->
RxX„rSize
 = 0U;

1467 
h•i
->
RxX„rCou¡
 = 0U;

1468 
h•i
->
RxISR
 = 
NULL
;

1471 i‡(
h•i
->
Inô
.
D©aSize
 > 
SPI_DATASIZE_8BIT
)

1473 
h•i
->
TxISR
 = 
SPI_TxISR_16BIT
;

1477 
h•i
->
TxISR
 = 
SPI_TxISR_8BIT
;

1481 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1484 
	`__HAL_SPI_DISABLE
(
h•i
);

1485 
	`SPI_1LINE_TX
(
h•i
);

1488 #i‡(
USE_SPI_CRC
 != 0U)

1490 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1492 
	`SPI_RESET_CRC
(
h•i
);

1497 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1500 
	`__HAL_SPI_ENABLE
(
h•i
);

1504 
	`__HAL_UNLOCK
(
h•i
);

1506 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_ERR
));

1508  
HAL_OK
;

1509 
	}
}

1519 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1522 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_READY
)

1524  
HAL_BUSY
;

1527 i‡((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

1529 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

1531  
	`HAL_SPI_TønsmôRe˚ive_IT
(
h•i
, 
pD©a
,ÖD©a, 
Size
);

1535 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1537  
HAL_ERROR
;

1541 
	`__HAL_LOCK
(
h•i
);

1544 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

1545 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1546 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
pD©a
;

1547 
h•i
->
RxX„rSize
 = 
Size
;

1548 
h•i
->
RxX„rCou¡
 = 
Size
;

1551 
h•i
->
pTxBuffPå
 = (
uöt8_t
 *)
NULL
;

1552 
h•i
->
TxX„rSize
 = 0U;

1553 
h•i
->
TxX„rCou¡
 = 0U;

1554 
h•i
->
TxISR
 = 
NULL
;

1557 i‡(
h•i
->
Inô
.
D©aSize
 > 
SPI_DATASIZE_8BIT
)

1559 
h•i
->
RxISR
 = 
SPI_RxISR_16BIT
;

1563 
h•i
->
RxISR
 = 
SPI_RxISR_8BIT
;

1567 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1570 
	`__HAL_SPI_DISABLE
(
h•i
);

1571 
	`SPI_1LINE_RX
(
h•i
);

1574 #i‡(
USE_SPI_CRC
 != 0U)

1576 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1578 
	`SPI_RESET_CRC
(
h•i
);

1587 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1590 
	`__HAL_SPI_ENABLE
(
h•i
);

1594 
	`__HAL_UNLOCK
(
h•i
);

1596 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1598  
HAL_OK
;

1599 
	}
}

1610 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
,

1611 
uöt16_t
 
Size
)

1613 
uöt32_t
 
tmp_mode
;

1614 
HAL_SPI_SèãTy≥Def
 
tmp_°©e
;

1617 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1620 
tmp_°©e
 = 
h•i
->
Sèã
;

1621 
tmp_mode
 = 
h•i
->
Inô
.
Mode
;

1623 i‡(!((
tmp_°©e
 =
HAL_SPI_STATE_READY
) || \

1624 ((
tmp_mode
 =
SPI_MODE_MASTER
Ë&& (
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
) &&

1625 (
tmp_°©e
 =
HAL_SPI_STATE_BUSY_RX
))))

1627  
HAL_BUSY
;

1630 i‡((
pTxD©a
 =
NULL
Ë|| (
pRxD©a
 =NULLË|| (
Size
 == 0U))

1632  
HAL_ERROR
;

1636 
	`__HAL_LOCK
(
h•i
);

1639 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1641 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1645 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1646 
h•i
->
pTxBuffPå
 = (c⁄° 
uöt8_t
 *)
pTxD©a
;

1647 
h•i
->
TxX„rSize
 = 
Size
;

1648 
h•i
->
TxX„rCou¡
 = 
Size
;

1649 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
pRxD©a
;

1650 
h•i
->
RxX„rSize
 = 
Size
;

1651 
h•i
->
RxX„rCou¡
 = 
Size
;

1654 i‡(
h•i
->
Inô
.
D©aSize
 > 
SPI_DATASIZE_8BIT
)

1656 
h•i
->
RxISR
 = 
SPI_2löesRxISR_16BIT
;

1657 
h•i
->
TxISR
 = 
SPI_2löesTxISR_16BIT
;

1661 
h•i
->
RxISR
 = 
SPI_2löesRxISR_8BIT
;

1662 
h•i
->
TxISR
 = 
SPI_2löesTxISR_8BIT
;

1665 #i‡(
USE_SPI_CRC
 != 0U)

1667 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1669 
	`SPI_RESET_CRC
(
h•i
);

1675 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1678 
	`__HAL_SPI_ENABLE
(
h•i
);

1682 
	`__HAL_UNLOCK
(
h•i
);

1684 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1686  
HAL_OK
;

1687 
	}
}

1697 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1701 
	`as£π_∑øm
(
	`IS_SPI_DMA_HANDLE
(
h•i
->
hdm©x
));

1704 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

1706 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_READY
)

1708  
HAL_BUSY
;

1711 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1713  
HAL_ERROR
;

1717 
	`__HAL_LOCK
(
h•i
);

1720 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

1721 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1722 
h•i
->
pTxBuffPå
 = (c⁄° 
uöt8_t
 *)
pD©a
;

1723 
h•i
->
TxX„rSize
 = 
Size
;

1724 
h•i
->
TxX„rCou¡
 = 
Size
;

1727 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
NULL
;

1728 
h•i
->
TxISR
 = 
NULL
;

1729 
h•i
->
RxISR
 = 
NULL
;

1730 
h•i
->
RxX„rSize
 = 0U;

1731 
h•i
->
RxX„rCou¡
 = 0U;

1734 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1737 
	`__HAL_SPI_DISABLE
(
h•i
);

1738 
	`SPI_1LINE_TX
(
h•i
);

1741 #i‡(
USE_SPI_CRC
 != 0U)

1743 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1745 
	`SPI_RESET_CRC
(
h•i
);

1750 
h•i
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfTønsmôC∂t
;

1753 
h•i
->
hdm©x
->
X„rC∂tCÆlback
 = 
SPI_DMATønsmôC∂t
;

1756 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1759 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1762 i‡(
HAL_OK
 !
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm©x
, (
uöt32_t
)h•i->
pTxBuffPå
, (uöt32_t)&h•i->
In°™˚
->
DR
,

1763 
h•i
->
TxX„rCou¡
))

1766 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

1768 
	`__HAL_UNLOCK
(
h•i
);

1769  
HAL_ERROR
;

1773 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1776 
	`__HAL_SPI_ENABLE
(
h•i
);

1780 
	`__HAL_UNLOCK
(
h•i
);

1783 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_ERR
));

1786 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1788  
HAL_OK
;

1789 
	}
}

1801 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1804 
	`as£π_∑øm
(
	`IS_SPI_DMA_HANDLE
(
h•i
->
hdm¨x
));

1806 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_READY
)

1808  
HAL_BUSY
;

1811 i‡((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

1813 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

1816 
	`as£π_∑øm
(
	`IS_SPI_DMA_HANDLE
(
h•i
->
hdm©x
));

1819  
	`HAL_SPI_TønsmôRe˚ive_DMA
(
h•i
, 
pD©a
,ÖD©a, 
Size
);

1822 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1824  
HAL_ERROR
;

1828 
	`__HAL_LOCK
(
h•i
);

1831 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

1832 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1833 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
pD©a
;

1834 
h•i
->
RxX„rSize
 = 
Size
;

1835 
h•i
->
RxX„rCou¡
 = 
Size
;

1838 
h•i
->
RxISR
 = 
NULL
;

1839 
h•i
->
TxISR
 = 
NULL
;

1840 
h•i
->
TxX„rSize
 = 0U;

1841 
h•i
->
TxX„rCou¡
 = 0U;

1844 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1847 
	`__HAL_SPI_DISABLE
(
h•i
);

1848 
	`SPI_1LINE_RX
(
h•i
);

1851 #i‡(
USE_SPI_CRC
 != 0U)

1853 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1855 
	`SPI_RESET_CRC
(
h•i
);

1860 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfRe˚iveC∂t
;

1863 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMARe˚iveC∂t
;

1866 
h•i
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1869 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1872 i‡(
HAL_OK
 !
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm¨x
, (
uöt32_t
)&h•i->
In°™˚
->
DR
, (uöt32_t)h•i->
pRxBuffPå
,

1873 
h•i
->
RxX„rCou¡
))

1876 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

1878 
	`__HAL_UNLOCK
(
h•i
);

1879  
HAL_ERROR
;

1883 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1886 
	`__HAL_SPI_ENABLE
(
h•i
);

1890 
	`__HAL_UNLOCK
(
h•i
);

1893 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_ERR
));

1896 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1898  
HAL_OK
;

1899 
	}
}

1911 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, c⁄° 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
,

1912 
uöt16_t
 
Size
)

1914 
uöt32_t
 
tmp_mode
;

1915 
HAL_SPI_SèãTy≥Def
 
tmp_°©e
;

1918 
	`as£π_∑øm
(
	`IS_SPI_DMA_HANDLE
(
h•i
->
hdm¨x
));

1919 
	`as£π_∑øm
(
	`IS_SPI_DMA_HANDLE
(
h•i
->
hdm©x
));

1922 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1925 
tmp_°©e
 = 
h•i
->
Sèã
;

1926 
tmp_mode
 = 
h•i
->
Inô
.
Mode
;

1928 i‡(!((
tmp_°©e
 =
HAL_SPI_STATE_READY
) ||

1929 ((
tmp_mode
 =
SPI_MODE_MASTER
Ë&& (
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
) &&

1930 (
tmp_°©e
 =
HAL_SPI_STATE_BUSY_RX
))))

1932  
HAL_BUSY
;

1935 i‡((
pTxD©a
 =
NULL
Ë|| (
pRxD©a
 =NULLË|| (
Size
 == 0U))

1937  
HAL_ERROR
;

1941 
	`__HAL_LOCK
(
h•i
);

1944 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1946 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1950 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1951 
h•i
->
pTxBuffPå
 = (c⁄° 
uöt8_t
 *)
pTxD©a
;

1952 
h•i
->
TxX„rSize
 = 
Size
;

1953 
h•i
->
TxX„rCou¡
 = 
Size
;

1954 
h•i
->
pRxBuffPå
 = (
uöt8_t
 *)
pRxD©a
;

1955 
h•i
->
RxX„rSize
 = 
Size
;

1956 
h•i
->
RxX„rCou¡
 = 
Size
;

1959 
h•i
->
RxISR
 = 
NULL
;

1960 
h•i
->
TxISR
 = 
NULL
;

1962 #i‡(
USE_SPI_CRC
 != 0U)

1964 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1966 
	`SPI_RESET_CRC
(
h•i
);

1971 i‡(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_RX
)

1974 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfRe˚iveC∂t
;

1975 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMARe˚iveC∂t
;

1980 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfTønsmôRe˚iveC∂t
;

1981 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMATønsmôRe˚iveC∂t
;

1985 
h•i
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1988 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1991 i‡(
HAL_OK
 !
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm¨x
, (
uöt32_t
)&h•i->
In°™˚
->
DR
, (uöt32_t)h•i->
pRxBuffPå
,

1992 
h•i
->
RxX„rCou¡
))

1995 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

1997 
	`__HAL_UNLOCK
(
h•i
);

1998  
HAL_ERROR
;

2002 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

2006 
h•i
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2007 
h•i
->
hdm©x
->
X„rC∂tCÆlback
 = 
NULL
;

2008 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
NULL
;

2009 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2012 i‡(
HAL_OK
 !
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm©x
, (
uöt32_t
)h•i->
pTxBuffPå
, (uöt32_t)&h•i->
In°™˚
->
DR
,

2013 
h•i
->
TxX„rCou¡
))

2016 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

2018 
	`__HAL_UNLOCK
(
h•i
);

2019  
HAL_ERROR
;

2023 i‡((
h•i
->
In°™˚
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

2026 
	`__HAL_SPI_ENABLE
(
h•i
);

2030 
	`__HAL_UNLOCK
(
h•i
);

2033 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_ERR
));

2036 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

2038  
HAL_OK
;

2039 
	}
}

2054 
HAL_SètusTy≥Def
 
	$HAL_SPI_Ab‹t
(
SPI_H™dÀTy≥Def
 *
h•i
)

2056 
HAL_SètusTy≥Def
 
îr‹code
;

2057 
__IO
 
uöt32_t
 
cou¡
;

2058 
__IO
 
uöt32_t
 
ª£tcou¡
;

2061 
îr‹code
 = 
HAL_OK
;

2062 
ª£tcou¡
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy°emC‹eClock
 / 24U / 1000U);

2063 
cou¡
 = 
ª£tcou¡
;

2066 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_ERRIE
);

2069 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXEIE
))

2071 
h•i
->
TxISR
 = 
SPI_Ab‹tTx_ISR
;

2075 i‡(
cou¡
 == 0U)

2077 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2080 
cou¡
--;

2081 } 
h•i
->
Sèã
 !
HAL_SPI_STATE_ABORT
);

2083 
cou¡
 = 
ª£tcou¡
;

2086 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXNEIE
))

2088 
h•i
->
RxISR
 = 
SPI_Ab‹tRx_ISR
;

2092 i‡(
cou¡
 == 0U)

2094 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2097 
cou¡
--;

2098 } 
h•i
->
Sèã
 !
HAL_SPI_STATE_ABORT
);

2100 
cou¡
 = 
ª£tcou¡
;

2104 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
))

2107 i‡(
h•i
->
hdm©x
 !
NULL
)

2111 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2114 i‡(
	`HAL_DMA_Ab‹t
(
h•i
->
hdm©x
Ë!
HAL_OK
)

2116 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_ABORT
;

2120 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, (
SPI_CR2_TXDMAEN
));

2125 i‡(
cou¡
 == 0U)

2127 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2130 
cou¡
--;

2131 } (
h•i
->
In°™˚
->
SR
 & 
SPI_FLAG_TXE
Ë=
RESET
);

2136 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
))

2139 i‡(
h•i
->
hdm¨x
 !
NULL
)

2143 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2146 i‡(
	`HAL_DMA_Ab‹t
(
h•i
->
hdm¨x
Ë!
HAL_OK
)

2148 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_ABORT
;

2152 
	`__HAL_SPI_DISABLE
(
h•i
);

2155 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, (
SPI_CR2_RXDMAEN
));

2159 
h•i
->
RxX„rCou¡
 = 0U;

2160 
h•i
->
TxX„rCou¡
 = 0U;

2163 i‡(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_ABORT
)

2166 
îr‹code
 = 
HAL_ERROR
;

2171 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

2175 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

2178 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2180  
îr‹code
;

2181 
	}
}

2198 
HAL_SètusTy≥Def
 
	$HAL_SPI_Ab‹t_IT
(
SPI_H™dÀTy≥Def
 *
h•i
)

2200 
HAL_SètusTy≥Def
 
îr‹code
;

2201 
uöt32_t
 
ab‹t˝…
 ;

2202 
__IO
 
uöt32_t
 
cou¡
;

2203 
__IO
 
uöt32_t
 
ª£tcou¡
;

2206 
îr‹code
 = 
HAL_OK
;

2207 
ab‹t˝…
 = 1U;

2208 
ª£tcou¡
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy°emC‹eClock
 / 24U / 1000U);

2209 
cou¡
 = 
ª£tcou¡
;

2212 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_ERRIE
);

2215 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXEIE
))

2217 
h•i
->
TxISR
 = 
SPI_Ab‹tTx_ISR
;

2221 i‡(
cou¡
 == 0U)

2223 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2226 
cou¡
--;

2227 } 
h•i
->
Sèã
 !
HAL_SPI_STATE_ABORT
);

2229 
cou¡
 = 
ª£tcou¡
;

2232 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXNEIE
))

2234 
h•i
->
RxISR
 = 
SPI_Ab‹tRx_ISR
;

2238 i‡(
cou¡
 == 0U)

2240 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2243 
cou¡
--;

2244 } 
h•i
->
Sèã
 !
HAL_SPI_STATE_ABORT
);

2246 
cou¡
 = 
ª£tcou¡
;

2252 i‡(
h•i
->
hdm©x
 !
NULL
)

2256 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
))

2258 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
SPI_DMATxAb‹tCÆlback
;

2262 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2266 i‡(
h•i
->
hdm¨x
 !
NULL
)

2270 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
))

2272 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
SPI_DMARxAb‹tCÆlback
;

2276 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2281 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
))

2284 i‡(
h•i
->
hdm©x
 !
NULL
)

2287 i‡(
	`HAL_DMA_Ab‹t_IT
(
h•i
->
hdm©x
Ë!
HAL_OK
)

2289 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2290 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_ABORT
;

2294 
ab‹t˝…
 = 0U;

2299 i‡(
	`HAL_IS_BIT_SET
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
))

2302 i‡(
h•i
->
hdm¨x
 !
NULL
)

2305 i‡(
	`HAL_DMA_Ab‹t_IT
(
h•i
->
hdm¨x
Ë!
HAL_OK
)

2307 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2308 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_ABORT
;

2312 
ab‹t˝…
 = 0U;

2317 i‡(
ab‹t˝…
 == 1U)

2320 
h•i
->
RxX„rCou¡
 = 0U;

2321 
h•i
->
TxX„rCou¡
 = 0U;

2324 i‡(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_ABORT
)

2327 
îr‹code
 = 
HAL_ERROR
;

2332 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

2336 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

2339 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2342 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2343 
h•i
->
	`Ab‹tC∂tCÆlback
(hspi);

2345 
	`HAL_SPI_Ab‹tC∂tCÆlback
(
h•i
);

2349  
îr‹code
;

2350 
	}
}

2358 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMAPau£
(
SPI_H™dÀTy≥Def
 *
h•i
)

2361 
	`__HAL_LOCK
(
h•i
);

2364 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2367 
	`__HAL_UNLOCK
(
h•i
);

2369  
HAL_OK
;

2370 
	}
}

2378 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMAResume
(
SPI_H™dÀTy≥Def
 *
h•i
)

2381 
	`__HAL_LOCK
(
h•i
);

2384 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2387 
	`__HAL_UNLOCK
(
h•i
);

2389  
HAL_OK
;

2390 
	}
}

2398 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMASt›
(
SPI_H™dÀTy≥Def
 *
h•i
)

2400 
HAL_SètusTy≥Def
 
îr‹code
 = 
HAL_OK
;

2410 i‡(
h•i
->
hdm©x
 !
NULL
)

2412 i‡(
HAL_OK
 !
	`HAL_DMA_Ab‹t
(
h•i
->
hdm©x
))

2414 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

2415 
îr‹code
 = 
HAL_ERROR
;

2419 i‡(
h•i
->
hdm¨x
 !
NULL
)

2421 i‡(
HAL_OK
 !
	`HAL_DMA_Ab‹t
(
h•i
->
hdm¨x
))

2423 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

2424 
îr‹code
 = 
HAL_ERROR
;

2429 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2430 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2431  
îr‹code
;

2432 
	}
}

2440 
	$HAL_SPI_IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
)

2442 
uöt32_t
 
ôsour˚
 = 
h•i
->
In°™˚
->
CR2
;

2443 
uöt32_t
 
ôÊag
 = 
h•i
->
In°™˚
->
SR
;

2446 i‡((
	`SPI_CHECK_FLAG
(
ôÊag
, 
SPI_FLAG_OVR
Ë=
RESET
) &&

2447 (
	`SPI_CHECK_FLAG
(
ôÊag
, 
SPI_FLAG_RXNE
Ë!
RESET
Ë&& (
	`SPI_CHECK_IT_SOURCE
(
ôsour˚
, 
SPI_IT_RXNE
) != RESET))

2449 
h•i
->
	`RxISR
(hspi);

2454 i‡((
	`SPI_CHECK_FLAG
(
ôÊag
, 
SPI_FLAG_TXE
Ë!
RESET
Ë&& (
	`SPI_CHECK_IT_SOURCE
(
ôsour˚
, 
SPI_IT_TXE
) != RESET))

2456 
h•i
->
	`TxISR
(hspi);

2461 i‡(((
	`SPI_CHECK_FLAG
(
ôÊag
, 
SPI_FLAG_MODF
Ë!
RESET
Ë|| (SPI_CHECK_FLAG(ôÊag, 
SPI_FLAG_OVR
) != RESET))

2462 && (
	`SPI_CHECK_IT_SOURCE
(
ôsour˚
, 
SPI_IT_ERR
Ë!
RESET
))

2465 i‡(
	`SPI_CHECK_FLAG
(
ôÊag
, 
SPI_FLAG_OVR
Ë!
RESET
)

2467 i‡(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_TX
)

2469 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_OVR
);

2470 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

2474 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

2480 i‡(
	`SPI_CHECK_FLAG
(
ôÊag
, 
SPI_FLAG_MODF
Ë!
RESET
)

2482 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_MODF
);

2483 
	`__HAL_SPI_CLEAR_MODFFLAG
(
h•i
);

2488 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2491 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_RXNE
 | 
SPI_IT_TXE
 | 
SPI_IT_ERR
);

2493 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2495 i‡((
	`HAL_IS_BIT_SET
(
ôsour˚
, 
SPI_CR2_TXDMAEN
)Ë|| (HAL_IS_BIT_SET(ôsour˚, 
SPI_CR2_RXDMAEN
)))

2497 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, (
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
));

2500 i‡(
h•i
->
hdm¨x
 !
NULL
)

2504 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
SPI_DMAAb‹tOnEº‹
;

2505 i‡(
HAL_OK
 !
	`HAL_DMA_Ab‹t_IT
(
h•i
->
hdm¨x
))

2507 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2511 i‡(
h•i
->
hdm©x
 !
NULL
)

2515 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
SPI_DMAAb‹tOnEº‹
;

2516 i‡(
HAL_OK
 !
	`HAL_DMA_Ab‹t_IT
(
h•i
->
hdm©x
))

2518 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

2525 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2526 
h•i
->
	`Eº‹CÆlback
(hspi);

2528 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2534 
	}
}

2542 
__wók
 
	$HAL_SPI_TxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2545 
	`UNUSED
(
h•i
);

2550 
	}
}

2558 
__wók
 
	$HAL_SPI_RxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2561 
	`UNUSED
(
h•i
);

2566 
	}
}

2574 
__wók
 
	$HAL_SPI_TxRxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2577 
	`UNUSED
(
h•i
);

2582 
	}
}

2590 
__wók
 
	$HAL_SPI_TxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2593 
	`UNUSED
(
h•i
);

2598 
	}
}

2606 
__wók
 
	$HAL_SPI_RxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2609 
	`UNUSED
(
h•i
);

2614 
	}
}

2622 
__wók
 
	$HAL_SPI_TxRxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2625 
	`UNUSED
(
h•i
);

2630 
	}
}

2638 
__wók
 
	$HAL_SPI_Eº‹CÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2641 
	`UNUSED
(
h•i
);

2649 
	}
}

2656 
__wók
 
	$HAL_SPI_Ab‹tC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

2659 
	`UNUSED
(
h•i
);

2664 
	}
}

2691 
HAL_SPI_SèãTy≥Def
 
	$HAL_SPI_GëSèã
(c⁄° 
SPI_H™dÀTy≥Def
 *
h•i
)

2694  
h•i
->
Sèã
;

2695 
	}
}

2703 
uöt32_t
 
	$HAL_SPI_GëEº‹
(c⁄° 
SPI_H™dÀTy≥Def
 *
h•i
)

2706  
h•i
->
Eº‹Code
;

2707 
	}
}

2728 
	$SPI_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2730 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

2731 
uöt32_t
 
tick°¨t
;

2734 
tick°¨t
 = 
	`HAL_GëTick
();

2737 i‡((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) != DMA_CCR_CIRC)

2740 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_ERR
);

2743 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

2746 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

2748 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2752 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

2754 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

2757 
h•i
->
TxX„rCou¡
 = 0U;

2758 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2760 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2763 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2764 
h•i
->
	`Eº‹CÆlback
(hspi);

2766 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2772 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2773 
h•i
->
	`TxC∂tCÆlback
(hspi);

2775 
	`HAL_SPI_TxC∂tCÆlback
(
h•i
);

2777 
	}
}

2785 
	$SPI_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2787 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

2788 
uöt32_t
 
tick°¨t
;

2789 #i‡(
USE_SPI_CRC
 != 0U)

2790 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

2794 
tick°¨t
 = 
	`HAL_GëTick
();

2797 i‡((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) != DMA_CCR_CIRC)

2800 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_ERR
);

2802 #i‡(
USE_SPI_CRC
 != 0U)

2804 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2807 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

2810 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

2813 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

2815 
	`UNUSED
(
tm¥eg
);

2820 i‡((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

2823 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2828 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

2832 i‡(
	`SPI_EndRxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

2834 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_FLAG
;

2837 
h•i
->
RxX„rCou¡
 = 0U;

2838 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2840 #i‡(
USE_SPI_CRC
 != 0U)

2842 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

2845 i‡(
	`SPI_ISCRCEº‹VÆid
(
h•i
Ë=
SPI_VALID_CRC_ERROR
)

2847 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

2850 
	`SPI_RESET_CRC
(
h•i
);

2854 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

2859 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2862 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2863 
h•i
->
	`Eº‹CÆlback
(hspi);

2865 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2871 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2872 
h•i
->
	`RxC∂tCÆlback
(hspi);

2874 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

2876 
	}
}

2884 
	$SPI_DMATønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2886 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

2887 
uöt32_t
 
tick°¨t
;

2888 #i‡(
USE_SPI_CRC
 != 0U)

2889 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

2893 
tick°¨t
 = 
	`HAL_GëTick
();

2896 i‡((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) != DMA_CCR_CIRC)

2899 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_ERR
);

2901 #i‡(
USE_SPI_CRC
 != 0U)

2903 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2906 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

2908 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

2911 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

2913 
	`UNUSED
(
tm¥eg
);

2918 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

2920 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2924 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2926 
h•i
->
TxX„rCou¡
 = 0U;

2927 
h•i
->
RxX„rCou¡
 = 0U;

2928 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2930 #i‡(
USE_SPI_CRC
 != 0U)

2932 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

2935 i‡(
	`SPI_ISCRCEº‹VÆid
(
h•i
Ë=
SPI_VALID_CRC_ERROR
)

2937 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

2940 
	`SPI_RESET_CRC
(
h•i
);

2944 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

2949 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2952 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2953 
h•i
->
	`Eº‹CÆlback
(hspi);

2955 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2961 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2962 
h•i
->
	`TxRxC∂tCÆlback
(hspi);

2964 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

2966 
	}
}

2974 
	$SPI_DMAHÆfTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2976 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

2979 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2980 
h•i
->
	`TxHÆfC∂tCÆlback
(hspi);

2982 
	`HAL_SPI_TxHÆfC∂tCÆlback
(
h•i
);

2984 
	}
}

2992 
	$SPI_DMAHÆfRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2994 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

2997 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2998 
h•i
->
	`RxHÆfC∂tCÆlback
(hspi);

3000 
	`HAL_SPI_RxHÆfC∂tCÆlback
(
h•i
);

3002 
	}
}

3010 
	$SPI_DMAHÆfTønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3012 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

3015 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3016 
h•i
->
	`TxRxHÆfC∂tCÆlback
(hspi);

3018 
	`HAL_SPI_TxRxHÆfC∂tCÆlback
(
h•i
);

3020 
	}
}

3028 
	$SPI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

3030 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

3033 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

3035 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

3036 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3038 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3039 
h•i
->
	`Eº‹CÆlback
(hspi);

3041 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3043 
	}
}

3051 
	$SPI_DMAAb‹tOnEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

3053 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

3054 
h•i
->
RxX„rCou¡
 = 0U;

3055 
h•i
->
TxX„rCou¡
 = 0U;

3058 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3059 
h•i
->
	`Eº‹CÆlback
(hspi);

3061 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3063 
	}
}

3073 
	$SPI_DMATxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

3075 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

3076 
__IO
 
uöt32_t
 
cou¡
;

3078 
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

3079 
cou¡
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy°emC‹eClock
 / 24U / 1000U);

3082 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

3087 i‡(
cou¡
 == 0U)

3089 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

3092 
cou¡
--;

3093 } (
h•i
->
In°™˚
->
SR
 & 
SPI_FLAG_TXE
Ë=
RESET
);

3096 i‡(
h•i
->
hdm¨x
 !
NULL
)

3098 i‡(
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 !
NULL
)

3105 
h•i
->
RxX„rCou¡
 = 0U;

3106 
h•i
->
TxX„rCou¡
 = 0U;

3109 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_ABORT
)

3112 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

3116 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

3119 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3122 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3123 
h•i
->
	`Ab‹tC∂tCÆlback
(hspi);

3125 
	`HAL_SPI_Ab‹tC∂tCÆlback
(
h•i
);

3127 
	}
}

3137 
	$SPI_DMARxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

3139 
SPI_H™dÀTy≥Def
 *
h•i
 = (SPI_H™dÀTy≥De‡*)(((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
);

3142 
	`__HAL_SPI_DISABLE
(
h•i
);

3144 
h•i
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

3147 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

3150 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
	`HAL_GëTick
()Ë!
HAL_OK
)

3152 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

3156 i‡(
h•i
->
hdm©x
 !
NULL
)

3158 i‡(
h•i
->
hdm©x
->
X„rAb‹tCÆlback
 !
NULL
)

3165 
h•i
->
RxX„rCou¡
 = 0U;

3166 
h•i
->
TxX„rCou¡
 = 0U;

3169 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_ABORT
)

3172 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

3176 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

3179 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3182 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3183 
h•i
->
	`Ab‹tC∂tCÆlback
(hspi);

3185 
	`HAL_SPI_Ab‹tC∂tCÆlback
(
h•i
);

3187 
	}
}

3195 
	$SPI_2löesRxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3198 *
h•i
->
pRxBuffPå
 = *((
__IO
 
uöt8_t
 *)&h•i->
In°™˚
->
DR
);

3199 
h•i
->
pRxBuffPå
++;

3200 
h•i
->
RxX„rCou¡
--;

3203 i‡(
h•i
->
RxX„rCou¡
 == 0U)

3205 #i‡(
USE_SPI_CRC
 != 0U)

3206 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3208 
h•i
->
RxISR
 = 
SPI_2löesRxISR_8BITCRC
;

3214 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3216 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3218 
	`SPI_Clo£RxTx_ISR
(
h•i
);

3221 
	}
}

3223 #i‡(
USE_SPI_CRC
 != 0U)

3230 
	$SPI_2löesRxISR_8BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3232 
__IO
 
uöt8_t
 *
±m¥eg8
;

3233 
__IO
 
uöt8_t
 
tm¥eg8
 = 0;

3236 
±m¥eg8
 = (
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
;

3238 
tm¥eg8
 = *
±m¥eg8
;

3240 
	`UNUSED
(
tm¥eg8
);

3243 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3245 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3247 
	`SPI_Clo£RxTx_ISR
(
h•i
);

3249 
	}
}

3258 
	$SPI_2löesTxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3260 *(
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
 = *((c⁄° uöt8_à*)h•i->
pTxBuffPå
);

3261 
h•i
->
pTxBuffPå
++;

3262 
h•i
->
TxX„rCou¡
--;

3265 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3267 #i‡(
USE_SPI_CRC
 != 0U)

3268 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3271 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3273 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_TXE
);

3279 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_TXE
);

3281 i‡(
h•i
->
RxX„rCou¡
 == 0U)

3283 
	`SPI_Clo£RxTx_ISR
(
h•i
);

3286 
	}
}

3294 
	$SPI_2löesRxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3297 *((
uöt16_t
 *)
h•i
->
pRxBuffPå
Ë(uöt16_t)(h•i->
In°™˚
->
DR
);

3298 
h•i
->
pRxBuffPå
 +(
uöt16_t
);

3299 
h•i
->
RxX„rCou¡
--;

3301 i‡(
h•i
->
RxX„rCou¡
 == 0U)

3303 #i‡(
USE_SPI_CRC
 != 0U)

3304 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3306 
h•i
->
RxISR
 = 
SPI_2löesRxISR_16BITCRC
;

3312 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_RXNE
);

3314 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3316 
	`SPI_Clo£RxTx_ISR
(
h•i
);

3319 
	}
}

3321 #i‡(
USE_SPI_CRC
 != 0U)

3328 
	$SPI_2löesRxISR_16BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3330 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

3333 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

3335 
	`UNUSED
(
tm¥eg
);

3338 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_RXNE
);

3340 
	`SPI_Clo£RxTx_ISR
(
h•i
);

3341 
	}
}

3350 
	$SPI_2löesTxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3353 
h•i
->
In°™˚
->
DR
 = *((c⁄° 
uöt16_t
 *)h•i->
pTxBuffPå
);

3354 
h•i
->
pTxBuffPå
 +(
uöt16_t
);

3355 
h•i
->
TxX„rCou¡
--;

3358 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3360 #i‡(
USE_SPI_CRC
 != 0U)

3361 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3364 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3366 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_TXE
);

3372 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_TXE
);

3374 i‡(
h•i
->
RxX„rCou¡
 == 0U)

3376 
	`SPI_Clo£RxTx_ISR
(
h•i
);

3379 
	}
}

3381 #i‡(
USE_SPI_CRC
 != 0U)

3388 
	$SPI_RxISR_8BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3390 
__IO
 
uöt8_t
 *
±m¥eg8
;

3391 
__IO
 
uöt8_t
 
tm¥eg8
 = 0;

3394 
±m¥eg8
 = (
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
;

3396 
tm¥eg8
 = *
±m¥eg8
;

3398 
	`UNUSED
(
tm¥eg8
);

3400 
	`SPI_Clo£Rx_ISR
(
h•i
);

3401 
	}
}

3410 
	$SPI_RxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3412 *
h•i
->
pRxBuffPå
 = (*(
__IO
 
uöt8_t
 *)&h•i->
In°™˚
->
DR
);

3413 
h•i
->
pRxBuffPå
++;

3414 
h•i
->
RxX„rCou¡
--;

3416 #i‡(
USE_SPI_CRC
 != 0U)

3418 i‡((
h•i
->
RxX„rCou¡
 =1UË&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

3420 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3423 i‡(
	`READ_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
))

3426 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3431 i‡(
h•i
->
RxX„rCou¡
 == 0U)

3433 #i‡(
USE_SPI_CRC
 != 0U)

3434 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3436 
h•i
->
RxISR
 = 
SPI_RxISR_8BITCRC
;

3440 
	`SPI_Clo£Rx_ISR
(
h•i
);

3442 
	}
}

3444 #i‡(
USE_SPI_CRC
 != 0U)

3451 
	$SPI_RxISR_16BITCRC
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3453 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

3456 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

3458 
	`UNUSED
(
tm¥eg
);

3461 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3463 
	`SPI_Clo£Rx_ISR
(
h•i
);

3464 
	}
}

3473 
	$SPI_RxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3475 *((
uöt16_t
 *)
h•i
->
pRxBuffPå
Ë(uöt16_t)(h•i->
In°™˚
->
DR
);

3476 
h•i
->
pRxBuffPå
 +(
uöt16_t
);

3477 
h•i
->
RxX„rCou¡
--;

3479 #i‡(
USE_SPI_CRC
 != 0U)

3481 i‡((
h•i
->
RxX„rCou¡
 =1UË&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

3483 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3486 i‡(
	`READ_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
))

3489 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3494 i‡(
h•i
->
RxX„rCou¡
 == 0U)

3496 #i‡(
USE_SPI_CRC
 != 0U)

3497 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3499 
h•i
->
RxISR
 = 
SPI_RxISR_16BITCRC
;

3503 
	`SPI_Clo£Rx_ISR
(
h•i
);

3505 
	}
}

3513 
	$SPI_TxISR_8BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3515 *(
__IO
 
uöt8_t
 *)&
h•i
->
In°™˚
->
DR
 = *((c⁄° uöt8_à*)h•i->
pTxBuffPå
);

3516 
h•i
->
pTxBuffPå
++;

3517 
h•i
->
TxX„rCou¡
--;

3519 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3521 #i‡(
USE_SPI_CRC
 != 0U)

3522 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3525 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3528 
	`SPI_Clo£Tx_ISR
(
h•i
);

3530 
	}
}

3538 
	$SPI_TxISR_16BIT
(
__SPI_H™dÀTy≥Def
 *
h•i
)

3541 
h•i
->
In°™˚
->
DR
 = *((c⁄° 
uöt16_t
 *)h•i->
pTxBuffPå
);

3542 
h•i
->
pTxBuffPå
 +(
uöt16_t
);

3543 
h•i
->
TxX„rCou¡
--;

3545 i‡(
h•i
->
TxX„rCou¡
 == 0U)

3547 #i‡(
USE_SPI_CRC
 != 0U)

3548 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3551 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

3554 
	`SPI_Clo£Tx_ISR
(
h•i
);

3556 
	}
}

3568 
HAL_SètusTy≥Def
 
	$SPI_WaôFœgSèãU¡ûTimeout
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sèã
,

3569 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

3571 
__IO
 
uöt32_t
 
cou¡
;

3572 
uöt32_t
 
tmp_timeout
;

3573 
uöt32_t
 
tmp_tick°¨t
;

3576 
tmp_timeout
 = 
Timeout
 - (
	`HAL_GëTick
(Ë- 
Tick°¨t
);

3577 
tmp_tick°¨t
 = 
	`HAL_GëTick
();

3580 
cou¡
 = 
tmp_timeout
 * ((
Sy°emC‹eClock
 * 32U) >> 20U);

3582 (
	`__HAL_SPI_GET_FLAG
(
h•i
, 
Fœg
Ë? 
SET
 : 
RESET
Ë!
Sèã
)

3584 i‡(
Timeout
 !
HAL_MAX_DELAY
)

3586 i‡(((
	`HAL_GëTick
(Ë- 
tmp_tick°¨t
Ë>
tmp_timeout
) || (tmp_timeout == 0U))

3593 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3595 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& ((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

3596 || (
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES_RXONLY
)))

3599 
	`__HAL_SPI_DISABLE
(
h•i
);

3603 i‡(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

3605 
	`SPI_RESET_CRC
(
h•i
);

3608 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3611 
	`__HAL_UNLOCK
(
h•i
);

3613  
HAL_TIMEOUT
;

3616 i‡(
cou¡
 == 0U)

3618 
tmp_timeout
 = 0U;

3620 
cou¡
--;

3624  
HAL_OK
;

3625 
	}
}

3635 
HAL_SètusTy≥Def
 
	$SPI_EndRxTønß˘i⁄
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

3637 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& ((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

3638 || (
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES_RXONLY
)))

3641 
	`__HAL_SPI_DISABLE
(
h•i
);

3644 i‡((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES_RXONLY
))

3647 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3649 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3650  
HAL_TIMEOUT
;

3656 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3658 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3659  
HAL_TIMEOUT
;

3662  
HAL_OK
;

3663 
	}
}

3672 
HAL_SètusTy≥Def
 
	$SPI_EndRxTxTønß˘i⁄
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

3675 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
SET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3677 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3678  
HAL_TIMEOUT
;

3682 i‡(
	`SPI_WaôFœgSèãU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3684 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3685  
HAL_TIMEOUT
;

3687  
HAL_OK
;

3688 
	}
}

3696 
	$SPI_Clo£RxTx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

3698 
uöt32_t
 
tick°¨t
;

3699 
__IO
 
uöt32_t
 
cou¡
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy°emC‹eClock
 / 24U / 1000U);

3702 
tick°¨t
 = 
	`HAL_GëTick
();

3705 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_ERR
);

3710 i‡(
cou¡
 == 0U)

3712 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3715 
cou¡
--;

3716 } (
h•i
->
In°™˚
->
SR
 & 
SPI_FLAG_TXE
Ë=
RESET
);

3719 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

3721 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3725 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

3727 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

3730 #i‡(
USE_SPI_CRC
 != 0U)

3732 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

3735 i‡(
	`SPI_ISCRCEº‹VÆid
(
h•i
Ë=
SPI_VALID_CRC_ERROR
)

3737 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3738 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

3741 
	`SPI_RESET_CRC
(
h•i
);

3744 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3745 
h•i
->
	`Eº‹CÆlback
(hspi);

3747 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3752 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

3758 i‡(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_NONE
)

3760 i‡(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_RX
)

3762 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3764 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3765 
h•i
->
	`RxC∂tCÆlback
(hspi);

3767 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

3772 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3774 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3775 
h•i
->
	`TxRxC∂tCÆlback
(hspi);

3777 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

3783 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3785 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3786 
h•i
->
	`Eº‹CÆlback
(hspi);

3788 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3791 #i‡(
USE_SPI_CRC
 != 0U)

3794 
	}
}

3802 
	$SPI_Clo£Rx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

3805 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3808 i‡(
	`SPI_EndRxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
	`HAL_GëTick
()Ë!
HAL_OK
)

3810 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3814 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

3816 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

3818 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3820 #i‡(
USE_SPI_CRC
 != 0U)

3822 i‡(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

3825 i‡(
	`SPI_ISCRCEº‹VÆid
(
h•i
Ë=
SPI_VALID_CRC_ERROR
)

3827 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

3830 
	`SPI_RESET_CRC
(
h•i
);

3833 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3834 
h•i
->
	`Eº‹CÆlback
(hspi);

3836 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3841 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

3847 i‡(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_NONE
)

3850 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3851 
h•i
->
	`RxC∂tCÆlback
(hspi);

3853 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

3859 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3860 
h•i
->
	`Eº‹CÆlback
(hspi);

3862 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3865 #i‡(
USE_SPI_CRC
 != 0U)

3868 
	}
}

3876 
	$SPI_Clo£Tx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

3878 
uöt32_t
 
tick°¨t
;

3879 
__IO
 
uöt32_t
 
cou¡
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy°emC‹eClock
 / 24U / 1000U);

3882 
tick°¨t
 = 
	`HAL_GëTick
();

3887 i‡(
cou¡
 == 0U)

3889 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3892 
cou¡
--;

3893 } (
h•i
->
In°™˚
->
SR
 & 
SPI_FLAG_TXE
Ë=
RESET
);

3896 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_ERR
));

3899 i‡(
	`SPI_EndRxTxTønß˘i⁄
(
h•i
, 
SPI_DEFAULT_TIMEOUT
, 
tick°¨t
Ë!
HAL_OK
)

3901 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

3905 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

3907 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

3910 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

3911 i‡(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

3914 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3915 
h•i
->
	`Eº‹CÆlback
(hspi);

3917 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

3923 #i‡(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3924 
h•i
->
	`TxC∂tCÆlback
(hspi);

3926 
	`HAL_SPI_TxC∂tCÆlback
(
h•i
);

3929 
	}
}

3937 
	$SPI_Ab‹tRx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

3939 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

3940 
__IO
 
uöt32_t
 
cou¡
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy°emC‹eClock
 / 24U / 1000U);

3945 i‡(
cou¡
 == 0U)

3947 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_ABORT
);

3950 
cou¡
--;

3951 } (
h•i
->
In°™˚
->
SR
 & 
SPI_FLAG_TXE
Ë=
RESET
);

3954 
	`__HAL_SPI_DISABLE
(
h•i
);

3957 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, (
SPI_CR2_TXEIE
 | 
SPI_CR2_RXNEIE
 | 
SPI_CR2_ERRIE
));

3960 
tm¥eg
 = 
	`READ_REG
(
h•i
->
In°™˚
->
DR
);

3962 
	`UNUSED
(
tm¥eg
);

3964 
h•i
->
Sèã
 = 
HAL_SPI_STATE_ABORT
;

3965 
	}
}

3973 
	$SPI_Ab‹tTx_ISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

3976 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, (
SPI_CR2_TXEIE
));

3979 
	`__HAL_SPI_DISABLE
(
h•i
);

3981 
h•i
->
Sèã
 = 
HAL_SPI_STATE_ABORT
;

3982 
	}
}

3984 #i‡(
USE_SPI_CRC
 != 0U)

3992 
uöt8_t
 
	$SPI_ISCRCEº‹VÆid
(
SPI_H™dÀTy≥Def
 *
h•i
)

3994 #i‡
	`deföed
(
SPI_CRC_ERROR_WORKAROUND_FEATURE
Ë&& (
USE_SPI_CRC_ERROR_WORKAROUND
 != 0U)

3998 i‡(
h•i
->
In°™˚
 =
SPI2
)

4000 i‡(
h•i
->
In°™˚
->
RXCRCR
 == 0U)

4002  (
SPI_INVALID_CRC_ERROR
);

4007 
	`UNUSED
(
h•i
);

4009  (
SPI_VALID_CRC_ERROR
);

4010 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c

258 
	~"°m32f1xx_hÆ.h
"

268 #ifde‡
HAL_UART_MODULE_ENABLED


285 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

286 
UART_InôCÆlbacksToDeÁu…
(
UART_H™dÀTy≥Def
 *
hu¨t
);

288 
UART_EndTxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
);

289 
UART_EndRxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
);

290 
UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

291 
UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

292 
UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

293 
UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

294 
UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

295 
UART_DMAAb‹tOnEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

296 
UART_DMATxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

297 
UART_DMARxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

298 
UART_DMATxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

299 
UART_DMARxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

300 
HAL_SètusTy≥Def
 
UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

301 
HAL_SètusTy≥Def
 
UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

302 
HAL_SètusTy≥Def
 
UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

303 
HAL_SètusTy≥Def
 
UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
,

304 
uöt32_t
 
Tick°¨t
, uöt32_à
Timeout
);

305 
UART_SëC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
);

354 
HAL_SètusTy≥Def
 
	$HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

357 i‡(
hu¨t
 =
NULL
)

359  
HAL_ERROR
;

363 i‡(
hu¨t
->
Inô
.
HwFlowCé
 !
UART_HWCONTROL_NONE
)

366 
	`as£π_∑øm
(
	`IS_UART_HWFLOW_INSTANCE
(
hu¨t
->
In°™˚
));

367 
	`as£π_∑øm
(
	`IS_UART_HARDWARE_FLOW_CONTROL
(
hu¨t
->
Inô
.
HwFlowCé
));

371 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

373 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

374 #i‡
	`deföed
(
USART_CR1_OVER8
)

375 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

378 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

381 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

383 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

384 
	`UART_InôCÆlbacksToDeÁu…
(
hu¨t
);

386 i‡(
hu¨t
->
M•InôCÆlback
 =
NULL
)

388 
hu¨t
->
M•InôCÆlback
 = 
HAL_UART_M•Inô
;

392 
hu¨t
->
	`M•InôCÆlback
(huart);

395 
	`HAL_UART_M•Inô
(
hu¨t
);

399 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

402 
	`__HAL_UART_DISABLE
(
hu¨t
);

405 
	`UART_SëC⁄fig
(
hu¨t
);

410 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

411 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

414 
	`__HAL_UART_ENABLE
(
hu¨t
);

417 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

418 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

419 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

420 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

422  
HAL_OK
;

423 
	}
}

432 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

435 i‡(
hu¨t
 =
NULL
)

437  
HAL_ERROR
;

441 
	`as£π_∑øm
(
	`IS_UART_HALFDUPLEX_INSTANCE
(
hu¨t
->
In°™˚
));

442 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

443 #i‡
	`deföed
(
USART_CR1_OVER8
)

444 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

447 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

450 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

452 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

453 
	`UART_InôCÆlbacksToDeÁu…
(
hu¨t
);

455 i‡(
hu¨t
->
M•InôCÆlback
 =
NULL
)

457 
hu¨t
->
M•InôCÆlback
 = 
HAL_UART_M•Inô
;

461 
hu¨t
->
	`M•InôCÆlback
(huart);

464 
	`HAL_UART_M•Inô
(
hu¨t
);

468 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

471 
	`__HAL_UART_DISABLE
(
hu¨t
);

474 
	`UART_SëC⁄fig
(
hu¨t
);

479 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

480 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

483 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_HDSEL
);

486 
	`__HAL_UART_ENABLE
(
hu¨t
);

489 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

490 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

491 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

492 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

494  
HAL_OK
;

495 
	}
}

508 
HAL_SètusTy≥Def
 
	$HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
)

511 i‡(
hu¨t
 =
NULL
)

513  
HAL_ERROR
;

517 
	`as£π_∑øm
(
	`IS_UART_LIN_INSTANCE
(
hu¨t
->
In°™˚
));

520 
	`as£π_∑øm
(
	`IS_UART_LIN_BREAK_DETECT_LENGTH
(
BªakDëe˘Lígth
));

521 
	`as£π_∑øm
(
	`IS_UART_LIN_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

522 #i‡
	`deföed
(
USART_CR1_OVER8
)

523 
	`as£π_∑øm
(
	`IS_UART_LIN_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

526 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

529 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

531 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

532 
	`UART_InôCÆlbacksToDeÁu…
(
hu¨t
);

534 i‡(
hu¨t
->
M•InôCÆlback
 =
NULL
)

536 
hu¨t
->
M•InôCÆlback
 = 
HAL_UART_M•Inô
;

540 
hu¨t
->
	`M•InôCÆlback
(huart);

543 
	`HAL_UART_M•Inô
(
hu¨t
);

547 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

550 
	`__HAL_UART_DISABLE
(
hu¨t
);

553 
	`UART_SëC⁄fig
(
hu¨t
);

558 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_CLKEN
));

559 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_HDSEL
 | 
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

562 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_LINEN
);

565 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_LBDL
);

566 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
BªakDëe˘Lígth
);

569 
	`__HAL_UART_ENABLE
(
hu¨t
);

572 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

573 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

574 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

575 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

577  
HAL_OK
;

578 
	}
}

592 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
)

595 i‡(
hu¨t
 =
NULL
)

597  
HAL_ERROR
;

601 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

604 
	`as£π_∑øm
(
	`IS_UART_WAKEUPMETHOD
(
WakeUpMëhod
));

605 
	`as£π_∑øm
(
	`IS_UART_ADDRESS
(
Addªss
));

606 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

607 #i‡
	`deföed
(
USART_CR1_OVER8
)

608 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

611 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

614 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

616 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

617 
	`UART_InôCÆlbacksToDeÁu…
(
hu¨t
);

619 i‡(
hu¨t
->
M•InôCÆlback
 =
NULL
)

621 
hu¨t
->
M•InôCÆlback
 = 
HAL_UART_M•Inô
;

625 
hu¨t
->
	`M•InôCÆlback
(huart);

628 
	`HAL_UART_M•Inô
(
hu¨t
);

632 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

635 
	`__HAL_UART_DISABLE
(
hu¨t
);

638 
	`UART_SëC⁄fig
(
hu¨t
);

643 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

644 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

647 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ADD
);

648 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
Addªss
);

651 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_WAKE
);

652 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
WakeUpMëhod
);

655 
	`__HAL_UART_ENABLE
(
hu¨t
);

658 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

659 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

660 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

661 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

663  
HAL_OK
;

664 
	}
}

672 
HAL_SètusTy≥Def
 
	$HAL_UART_DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

675 i‡(
hu¨t
 =
NULL
)

677  
HAL_ERROR
;

681 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

683 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

686 
	`__HAL_UART_DISABLE
(
hu¨t
);

688 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

689 i‡(
hu¨t
->
M•DeInôCÆlback
 =
NULL
)

691 
hu¨t
->
M•DeInôCÆlback
 = 
HAL_UART_M•DeInô
;

694 
hu¨t
->
	`M•DeInôCÆlback
(huart);

697 
	`HAL_UART_M•DeInô
(
hu¨t
);

700 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

701 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_RESET
;

702 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_RESET
;

703 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

704 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

707 
	`__HAL_UNLOCK
(
hu¨t
);

709  
HAL_OK
;

710 
	}
}

718 
__wók
 
	$HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

721 
	`UNUSED
(
hu¨t
);

725 
	}
}

733 
__wók
 
	$HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

736 
	`UNUSED
(
hu¨t
);

740 
	}
}

742 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

764 
HAL_SètusTy≥Def
 
	$HAL_UART_Regi°îCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
HAL_UART_CÆlbackIDTy≥Def
 
CÆlbackID
,

765 
pUART_CÆlbackTy≥Def
 
pCÆlback
)

767 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

769 i‡(
pCÆlback
 =
NULL
)

772 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

774  
HAL_ERROR
;

777 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

779 
CÆlbackID
)

781 
HAL_UART_TX_HALFCOMPLETE_CB_ID
 :

782 
hu¨t
->
TxHÆfC∂tCÆlback
 = 
pCÆlback
;

785 
HAL_UART_TX_COMPLETE_CB_ID
 :

786 
hu¨t
->
TxC∂tCÆlback
 = 
pCÆlback
;

789 
HAL_UART_RX_HALFCOMPLETE_CB_ID
 :

790 
hu¨t
->
RxHÆfC∂tCÆlback
 = 
pCÆlback
;

793 
HAL_UART_RX_COMPLETE_CB_ID
 :

794 
hu¨t
->
RxC∂tCÆlback
 = 
pCÆlback
;

797 
HAL_UART_ERROR_CB_ID
 :

798 
hu¨t
->
Eº‹CÆlback
 = 
pCÆlback
;

801 
HAL_UART_ABORT_COMPLETE_CB_ID
 :

802 
hu¨t
->
Ab‹tC∂tCÆlback
 = 
pCÆlback
;

805 
HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

806 
hu¨t
->
Ab‹tTønsmôC∂tCÆlback
 = 
pCÆlback
;

809 
HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID
 :

810 
hu¨t
->
Ab‹tRe˚iveC∂tCÆlback
 = 
pCÆlback
;

813 
HAL_UART_MSPINIT_CB_ID
 :

814 
hu¨t
->
M•InôCÆlback
 = 
pCÆlback
;

817 
HAL_UART_MSPDEINIT_CB_ID
 :

818 
hu¨t
->
M•DeInôCÆlback
 = 
pCÆlback
;

823 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

826 
°©us
 = 
HAL_ERROR
;

830 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

832 
CÆlbackID
)

834 
HAL_UART_MSPINIT_CB_ID
 :

835 
hu¨t
->
M•InôCÆlback
 = 
pCÆlback
;

838 
HAL_UART_MSPDEINIT_CB_ID
 :

839 
hu¨t
->
M•DeInôCÆlback
 = 
pCÆlback
;

844 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

847 
°©us
 = 
HAL_ERROR
;

854 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

857 
°©us
 = 
HAL_ERROR
;

860  
°©us
;

861 
	}
}

884 
HAL_SètusTy≥Def
 
	$HAL_UART_UnRegi°îCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
HAL_UART_CÆlbackIDTy≥Def
 
CÆlbackID
)

886 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

888 i‡(
HAL_UART_STATE_READY
 =
hu¨t
->
gSèã
)

890 
CÆlbackID
)

892 
HAL_UART_TX_HALFCOMPLETE_CB_ID
 :

893 
hu¨t
->
TxHÆfC∂tCÆlback
 = 
HAL_UART_TxHÆfC∂tCÆlback
;

896 
HAL_UART_TX_COMPLETE_CB_ID
 :

897 
hu¨t
->
TxC∂tCÆlback
 = 
HAL_UART_TxC∂tCÆlback
;

900 
HAL_UART_RX_HALFCOMPLETE_CB_ID
 :

901 
hu¨t
->
RxHÆfC∂tCÆlback
 = 
HAL_UART_RxHÆfC∂tCÆlback
;

904 
HAL_UART_RX_COMPLETE_CB_ID
 :

905 
hu¨t
->
RxC∂tCÆlback
 = 
HAL_UART_RxC∂tCÆlback
;

908 
HAL_UART_ERROR_CB_ID
 :

909 
hu¨t
->
Eº‹CÆlback
 = 
HAL_UART_Eº‹CÆlback
;

912 
HAL_UART_ABORT_COMPLETE_CB_ID
 :

913 
hu¨t
->
Ab‹tC∂tCÆlback
 = 
HAL_UART_Ab‹tC∂tCÆlback
;

916 
HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

917 
hu¨t
->
Ab‹tTønsmôC∂tCÆlback
 = 
HAL_UART_Ab‹tTønsmôC∂tCÆlback
;

920 
HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID
 :

921 
hu¨t
->
Ab‹tRe˚iveC∂tCÆlback
 = 
HAL_UART_Ab‹tRe˚iveC∂tCÆlback
;

924 
HAL_UART_MSPINIT_CB_ID
 :

925 
hu¨t
->
M•InôCÆlback
 = 
HAL_UART_M•Inô
;

928 
HAL_UART_MSPDEINIT_CB_ID
 :

929 
hu¨t
->
M•DeInôCÆlback
 = 
HAL_UART_M•DeInô
;

934 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

937 
°©us
 = 
HAL_ERROR
;

941 i‡(
HAL_UART_STATE_RESET
 =
hu¨t
->
gSèã
)

943 
CÆlbackID
)

945 
HAL_UART_MSPINIT_CB_ID
 :

946 
hu¨t
->
M•InôCÆlback
 = 
HAL_UART_M•Inô
;

949 
HAL_UART_MSPDEINIT_CB_ID
 :

950 
hu¨t
->
M•DeInôCÆlback
 = 
HAL_UART_M•DeInô
;

955 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

958 
°©us
 = 
HAL_ERROR
;

965 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

968 
°©us
 = 
HAL_ERROR
;

971  
°©us
;

972 
	}
}

981 
HAL_SètusTy≥Def
 
	$HAL_UART_Regi°îRxEvítCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
pUART_RxEvítCÆlbackTy≥Def
 
pCÆlback
)

983 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

985 i‡(
pCÆlback
 =
NULL
)

987 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

989  
HAL_ERROR
;

993 
	`__HAL_LOCK
(
hu¨t
);

995 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

997 
hu¨t
->
RxEvítCÆlback
 = 
pCÆlback
;

1001 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

1003 
°©us
 = 
HAL_ERROR
;

1007 
	`__HAL_UNLOCK
(
hu¨t
);

1009  
°©us
;

1010 
	}
}

1018 
HAL_SètusTy≥Def
 
	$HAL_UART_UnRegi°îRxEvítCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1020 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1023 
	`__HAL_LOCK
(
hu¨t
);

1025 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

1027 
hu¨t
->
RxEvítCÆlback
 = 
HAL_UARTEx_RxEvítCÆlback
;

1031 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_INVALID_CALLBACK
;

1033 
°©us
 = 
HAL_ERROR
;

1037 
	`__HAL_UNLOCK
(
hu¨t
);

1038  
°©us
;

1039 
	}
}

1138 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1140 c⁄° 
uöt8_t
 *
pd©a8bôs
;

1141 c⁄° 
uöt16_t
 *
pd©a16bôs
;

1142 
uöt32_t
 
tick°¨t
 = 0U;

1145 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

1147 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1149  
HAL_ERROR
;

1152 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1153 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY_TX
;

1156 
tick°¨t
 = 
	`HAL_GëTick
();

1158 
hu¨t
->
TxX„rSize
 = 
Size
;

1159 
hu¨t
->
TxX„rCou¡
 = 
Size
;

1162 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

1164 
pd©a8bôs
 = 
NULL
;

1165 
pd©a16bôs
 = (c⁄° 
uöt16_t
 *Ë
pD©a
;

1169 
pd©a8bôs
 = 
pD©a
;

1170 
pd©a16bôs
 = 
NULL
;

1173 
hu¨t
->
TxX„rCou¡
 > 0U)

1175 i‡(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TXE
, 
RESET
, 
tick°¨t
, 
Timeout
Ë!
HAL_OK
)

1177 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1179  
HAL_TIMEOUT
;

1181 i‡(
pd©a8bôs
 =
NULL
)

1183 
hu¨t
->
In°™˚
->
DR
 = (
uöt16_t
)(*
pd©a16bôs
 & 0x01FFU);

1184 
pd©a16bôs
++;

1188 
hu¨t
->
In°™˚
->
DR
 = (
uöt8_t
)(*
pd©a8bôs
 & 0xFFU);

1189 
pd©a8bôs
++;

1191 
hu¨t
->
TxX„rCou¡
--;

1194 i‡(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TC
, 
RESET
, 
tick°¨t
, 
Timeout
Ë!
HAL_OK
)

1196 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1198  
HAL_TIMEOUT
;

1202 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1204  
HAL_OK
;

1208  
HAL_BUSY
;

1210 
	}
}

1224 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1226 
uöt8_t
 *
pd©a8bôs
;

1227 
uöt16_t
 *
pd©a16bôs
;

1228 
uöt32_t
 
tick°¨t
 = 0U;

1231 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1233 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1235  
HAL_ERROR
;

1238 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1239 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

1240 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

1243 
tick°¨t
 = 
	`HAL_GëTick
();

1245 
hu¨t
->
RxX„rSize
 = 
Size
;

1246 
hu¨t
->
RxX„rCou¡
 = 
Size
;

1249 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

1251 
pd©a8bôs
 = 
NULL
;

1252 
pd©a16bôs
 = (
uöt16_t
 *Ë
pD©a
;

1256 
pd©a8bôs
 = 
pD©a
;

1257 
pd©a16bôs
 = 
NULL
;

1261 
hu¨t
->
RxX„rCou¡
 > 0U)

1263 i‡(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_RXNE
, 
RESET
, 
tick°¨t
, 
Timeout
Ë!
HAL_OK
)

1265 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1267  
HAL_TIMEOUT
;

1269 i‡(
pd©a8bôs
 =
NULL
)

1271 *
pd©a16bôs
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & 0x01FF);

1272 
pd©a16bôs
++;

1276 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë|| ((hu¨t->Inô.W‹dLígth =
UART_WORDLENGTH_8B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
)))

1278 *
pd©a8bôs
 = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1282 *
pd©a8bôs
 = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x007F);

1284 
pd©a8bôs
++;

1286 
hu¨t
->
RxX„rCou¡
--;

1290 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1292  
HAL_OK
;

1296  
HAL_BUSY
;

1298 
	}
}

1311 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1314 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

1316 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1318  
HAL_ERROR
;

1321 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

1322 
hu¨t
->
TxX„rSize
 = 
Size
;

1323 
hu¨t
->
TxX„rCou¡
 = 
Size
;

1325 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1326 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY_TX
;

1329 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1331  
HAL_OK
;

1335  
HAL_BUSY
;

1337 
	}
}

1350 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1353 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1355 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1357  
HAL_ERROR
;

1361 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

1363  (
	`UART_Sèπ_Re˚ive_IT
(
hu¨t
, 
pD©a
, 
Size
));

1367  
HAL_BUSY
;

1369 
	}
}

1382 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, c⁄° 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1384 c⁄° 
uöt32_t
 *
tmp
;

1387 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

1389 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1391  
HAL_ERROR
;

1394 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

1395 
hu¨t
->
TxX„rSize
 = 
Size
;

1396 
hu¨t
->
TxX„rCou¡
 = 
Size
;

1398 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1399 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY_TX
;

1402 
hu¨t
->
hdm©x
->
X„rC∂tCÆlback
 = 
UART_DMATønsmôC∂t
;

1405 
hu¨t
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMATxHÆfC∂t
;

1408 
hu¨t
->
hdm©x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

1411 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1414 
tmp
 = (c⁄° 
uöt32_t
 *)&
pD©a
;

1415 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm©x
, *(c⁄° 
uöt32_t
 *)
tmp
, (uöt32_t)&hu¨t->
In°™˚
->
DR
, 
Size
);

1418 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_FLAG_TC
);

1422 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1424  
HAL_OK
;

1428  
HAL_BUSY
;

1430 
	}
}

1444 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1447 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1449 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1451  
HAL_ERROR
;

1455 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

1457  (
	`UART_Sèπ_Re˚ive_DMA
(
hu¨t
, 
pD©a
, 
Size
));

1461  
HAL_BUSY
;

1463 
	}
}

1471 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1473 
uöt32_t
 
dm¨eque°
 = 0x00U;

1475 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1476 i‡((
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
Ë&& 
dm¨eque°
)

1479 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1482 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1483 i‡((
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
Ë&& 
dm¨eque°
)

1486 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

1487 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1490 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1493  
HAL_OK
;

1494 
	}
}

1502 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1505 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
)

1508 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1511 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
)

1514 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

1517 i‡(
hu¨t
->
Inô
.
P¨ôy
 !
UART_PARITY_NONE
)

1519 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

1521 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1524 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1527  
HAL_OK
;

1528 
	}
}

1536 
HAL_SètusTy≥Def
 
	$HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1538 
uöt32_t
 
dm¨eque°
 = 0x00U;

1546 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1547 i‡((
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
Ë&& 
dm¨eque°
)

1549 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1552 i‡(
hu¨t
->
hdm©x
 !
NULL
)

1554 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
);

1556 
	`UART_EndTxTøns„r
(
hu¨t
);

1560 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1561 i‡((
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
Ë&& 
dm¨eque°
)

1563 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1566 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

1568 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

1570 
	`UART_EndRxTøns„r
(
hu¨t
);

1573  
HAL_OK
;

1574 
	}
}

1591 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_Re˚iveToIdÀ
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, uöt16_à*
RxLí
,

1592 
uöt32_t
 
Timeout
)

1594 
uöt8_t
 *
pd©a8bôs
;

1595 
uöt16_t
 *
pd©a16bôs
;

1596 
uöt32_t
 
tick°¨t
;

1599 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1601 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1603  
HAL_ERROR
;

1606 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1607 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

1608 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_TOIDLE
;

1609 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

1612 
tick°¨t
 = 
	`HAL_GëTick
();

1614 
hu¨t
->
RxX„rSize
 = 
Size
;

1615 
hu¨t
->
RxX„rCou¡
 = 
Size
;

1618 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

1620 
pd©a8bôs
 = 
NULL
;

1621 
pd©a16bôs
 = (
uöt16_t
 *Ë
pD©a
;

1625 
pd©a8bôs
 = 
pD©a
;

1626 
pd©a16bôs
 = 
NULL
;

1630 *
RxLí
 = 0U;

1633 
hu¨t
->
RxX„rCou¡
 > 0U)

1636 i‡(
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_IDLE
))

1639 
	`__HAL_UART_CLEAR_IDLEFLAG
(
hu¨t
);

1643 i‡(*
RxLí
 > 0U)

1645 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_IDLE
;

1646 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1648  
HAL_OK
;

1653 i‡(
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_RXNE
))

1655 i‡(
pd©a8bôs
 =
NULL
)

1657 *
pd©a16bôs
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

1658 
pd©a16bôs
++;

1662 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë|| ((hu¨t->Inô.W‹dLígth =
UART_WORDLENGTH_8B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
)))

1664 *
pd©a8bôs
 = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1668 *
pd©a8bôs
 = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x007F);

1671 
pd©a8bôs
++;

1674 *
RxLí
 += 1U;

1675 
hu¨t
->
RxX„rCou¡
--;

1679 i‡(
Timeout
 !
HAL_MAX_DELAY
)

1681 i‡(((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

1683 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1685  
HAL_TIMEOUT
;

1691 *
RxLí
 = 
hu¨t
->
RxX„rSize
 - hu¨t->
RxX„rCou¡
;

1693 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1695  
HAL_OK
;

1699  
HAL_BUSY
;

1701 
	}
}

1716 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_Re˚iveToIdÀ_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1718 
HAL_SètusTy≥Def
 
°©us
;

1721 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1723 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1725  
HAL_ERROR
;

1729 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_TOIDLE
;

1730 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

1732 
°©us
 = 
	`UART_Sèπ_Re˚ive_IT
(
hu¨t
, 
pD©a
, 
Size
);

1735 i‡(
°©us
 =
HAL_OK
)

1737 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

1739 
	`__HAL_UART_CLEAR_IDLEFLAG
(
hu¨t
);

1740 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

1748 
°©us
 = 
HAL_ERROR
;

1752  
°©us
;

1756  
HAL_BUSY
;

1758 
	}
}

1776 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_Re˚iveToIdÀ_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1778 
HAL_SètusTy≥Def
 
°©us
;

1781 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1783 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1785  
HAL_ERROR
;

1789 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_TOIDLE
;

1790 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

1792 
°©us
 = 
	`UART_Sèπ_Re˚ive_DMA
(
hu¨t
, 
pD©a
, 
Size
);

1795 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

1797 
	`__HAL_UART_CLEAR_IDLEFLAG
(
hu¨t
);

1798 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

1806 
°©us
 = 
HAL_ERROR
;

1809  
°©us
;

1813  
HAL_BUSY
;

1815 
	}
}

1841 
HAL_UART_RxEvítTy≥Ty≥Def
 
	$HAL_UARTEx_GëRxEvítTy≥
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1844 (
hu¨t
->
RxEvítTy≥
);

1845 
	}
}

1859 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹t
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1862 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1863 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1866 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

1868 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_IDLEIE
));

1872 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1874 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1877 i‡(
hu¨t
->
hdm©x
 !
NULL
)

1881 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1883 i‡(
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
Ë!
HAL_OK
)

1885 i‡(
	`HAL_DMA_GëEº‹
(
hu¨t
->
hdm©x
Ë=
HAL_DMA_ERROR_TIMEOUT
)

1888 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_DMA
;

1890  
HAL_TIMEOUT
;

1897 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1899 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1902 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

1906 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1908 i‡(
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

1910 i‡(
	`HAL_DMA_GëEº‹
(
hu¨t
->
hdm¨x
Ë=
HAL_DMA_ERROR_TIMEOUT
)

1913 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_DMA
;

1915  
HAL_TIMEOUT
;

1922 
hu¨t
->
TxX„rCou¡
 = 0x00U;

1923 
hu¨t
->
RxX„rCou¡
 = 0x00U;

1926 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1929 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1930 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1931 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

1933  
HAL_OK
;

1934 
	}
}

1948 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tTønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1951 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1954 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1956 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1959 i‡(
hu¨t
->
hdm©x
 !
NULL
)

1963 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1965 i‡(
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
Ë!
HAL_OK
)

1967 i‡(
	`HAL_DMA_GëEº‹
(
hu¨t
->
hdm©x
Ë=
HAL_DMA_ERROR_TIMEOUT
)

1970 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_DMA
;

1972  
HAL_TIMEOUT
;

1979 
hu¨t
->
TxX„rCou¡
 = 0x00U;

1982 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1984  
HAL_OK
;

1985 
	}
}

1999 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tRe˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2002 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2003 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2006 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

2008 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_IDLEIE
));

2012 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

2014 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2017 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

2021 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2023 i‡(
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

2025 i‡(
	`HAL_DMA_GëEº‹
(
hu¨t
->
hdm¨x
Ë=
HAL_DMA_ERROR_TIMEOUT
)

2028 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_DMA
;

2030  
HAL_TIMEOUT
;

2037 
hu¨t
->
RxX„rCou¡
 = 0x00U;

2040 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2041 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

2043  
HAL_OK
;

2044 
	}
}

2060 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹t_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2062 
uöt32_t
 
Ab‹tC∂t
 = 0x01U;

2065 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

2066 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2069 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

2071 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_IDLEIE
));

2077 i‡(
hu¨t
->
hdm©x
 !
NULL
)

2081 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

2083 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
UART_DMATxAb‹tCÆlback
;

2087 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2091 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

2095 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

2097 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
UART_DMARxAb‹tCÆlback
;

2101 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2106 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

2109 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

2112 i‡(
hu¨t
->
hdm©x
 !
NULL
)

2118 i‡(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm©x
Ë!
HAL_OK
)

2120 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2124 
Ab‹tC∂t
 = 0x00U;

2130 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

2132 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2135 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

2141 i‡(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

2143 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2144 
Ab‹tC∂t
 = 0x01U;

2148 
Ab‹tC∂t
 = 0x00U;

2154 i‡(
Ab‹tC∂t
 == 0x01U)

2157 
hu¨t
->
TxX„rCou¡
 = 0x00U;

2158 
hu¨t
->
RxX„rCou¡
 = 0x00U;

2161 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

2164 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2165 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2166 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

2169 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2171 
hu¨t
->
	`Ab‹tC∂tCÆlback
(huart);

2174 
	`HAL_UART_Ab‹tC∂tCÆlback
(
hu¨t
);

2178  
HAL_OK
;

2179 
	}
}

2195 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2198 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

2201 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

2203 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

2206 i‡(
hu¨t
->
hdm©x
 !
NULL
)

2210 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
UART_DMATxO∆yAb‹tCÆlback
;

2213 i‡(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm©x
Ë!
HAL_OK
)

2216 
hu¨t
->
hdm©x
->
	`X„rAb‹tCÆlback
(huart->hdmatx);

2222 
hu¨t
->
TxX„rCou¡
 = 0x00U;

2225 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2228 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2230 
hu¨t
->
	`Ab‹tTønsmôC∂tCÆlback
(huart);

2233 
	`HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
hu¨t
);

2240 
hu¨t
->
TxX„rCou¡
 = 0x00U;

2243 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2246 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2248 
hu¨t
->
	`Ab‹tTønsmôC∂tCÆlback
(huart);

2251 
	`HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
hu¨t
);

2255  
HAL_OK
;

2256 
	}
}

2272 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tRe˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2275 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2276 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2279 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

2281 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_IDLEIE
));

2285 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

2287 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2290 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

2294 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
UART_DMARxO∆yAb‹tCÆlback
;

2297 i‡(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

2300 
hu¨t
->
hdm¨x
->
	`X„rAb‹tCÆlback
(huart->hdmarx);

2306 
hu¨t
->
RxX„rCou¡
 = 0x00U;

2309 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2310 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

2313 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2315 
hu¨t
->
	`Ab‹tRe˚iveC∂tCÆlback
(huart);

2318 
	`HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
hu¨t
);

2325 
hu¨t
->
RxX„rCou¡
 = 0x00U;

2328 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2329 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

2332 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2334 
hu¨t
->
	`Ab‹tRe˚iveC∂tCÆlback
(huart);

2337 
	`HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
hu¨t
);

2341  
HAL_OK
;

2342 
	}
}

2350 
	$HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2352 
uöt32_t
 
i§Êags
 = 
	`READ_REG
(
hu¨t
->
In°™˚
->
SR
);

2353 
uöt32_t
 
¸1ôs
 = 
	`READ_REG
(
hu¨t
->
In°™˚
->
CR1
);

2354 
uöt32_t
 
¸3ôs
 = 
	`READ_REG
(
hu¨t
->
In°™˚
->
CR3
);

2355 
uöt32_t
 
îr‹Êags
 = 0x00U;

2356 
uöt32_t
 
dm¨eque°
 = 0x00U;

2359 
îr‹Êags
 = (
i§Êags
 & (
uöt32_t
)(
USART_SR_PE
 | 
USART_SR_FE
 | 
USART_SR_ORE
 | 
USART_SR_NE
));

2360 i‡(
îr‹Êags
 =
RESET
)

2363 i‡(((
i§Êags
 & 
USART_SR_RXNE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_RXNEIE
) != RESET))

2365 
	`UART_Re˚ive_IT
(
hu¨t
);

2371 i‡((
îr‹Êags
 !
RESET
Ë&& (((
¸3ôs
 & 
USART_CR3_EIE
) != RESET)

2372 || ((
¸1ôs
 & (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
)Ë!
RESET
)))

2375 i‡(((
i§Êags
 & 
USART_SR_PE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_PEIE
) != RESET))

2377 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_PE
;

2381 i‡(((
i§Êags
 & 
USART_SR_NE
Ë!
RESET
Ë&& ((
¸3ôs
 & 
USART_CR3_EIE
) != RESET))

2383 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_NE
;

2387 i‡(((
i§Êags
 & 
USART_SR_FE
Ë!
RESET
Ë&& ((
¸3ôs
 & 
USART_CR3_EIE
) != RESET))

2389 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_FE
;

2393 i‡(((
i§Êags
 & 
USART_SR_ORE
Ë!
RESET
Ë&& (((
¸1ôs
 & 
USART_CR1_RXNEIE
) != RESET)

2394 || ((
¸3ôs
 & 
USART_CR3_EIE
Ë!
RESET
)))

2396 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_ORE
;

2400 i‡(
hu¨t
->
Eº‹Code
 !
HAL_UART_ERROR_NONE
)

2403 i‡(((
i§Êags
 & 
USART_SR_RXNE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_RXNEIE
) != RESET))

2405 
	`UART_Re˚ive_IT
(
hu¨t
);

2410 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2411 i‡(((
hu¨t
->
Eº‹Code
 & 
HAL_UART_ERROR_ORE
Ë!
RESET
Ë|| 
dm¨eque°
)

2416 
	`UART_EndRxTøns„r
(
hu¨t
);

2419 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

2421 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2424 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

2428 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
UART_DMAAb‹tOnEº‹
;

2429 i‡(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

2432 
hu¨t
->
hdm¨x
->
	`X„rAb‹tCÆlback
(huart->hdmarx);

2438 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2440 
hu¨t
->
	`Eº‹CÆlback
(huart);

2443 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

2450 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2452 
hu¨t
->
	`Eº‹CÆlback
(huart);

2455 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

2463 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2465 
hu¨t
->
	`Eº‹CÆlback
(huart);

2468 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

2471 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

2479 i‡((
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

2480 && ((
i§Êags
 & 
USART_SR_IDLE
) != 0U)

2481 && ((
¸1ôs
 & 
USART_SR_IDLE
) != 0U))

2483 
	`__HAL_UART_CLEAR_IDLEFLAG
(
hu¨t
);

2486 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

2492 
uöt16_t
 
nb_ªmaöög_rx_d©a
 = (uöt16_tË
	`__HAL_DMA_GET_COUNTER
(
hu¨t
->
hdm¨x
);

2493 i‡((
nb_ªmaöög_rx_d©a
 > 0U)

2494 && (
nb_ªmaöög_rx_d©a
 < 
hu¨t
->
RxX„rSize
))

2497 
hu¨t
->
RxX„rCou¡
 = 
nb_ªmaöög_rx_d©a
;

2500 i‡(
hu¨t
->
hdm¨x
->
Inô
.
Mode
 !
DMA_CIRCULAR
)

2503 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

2504 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2508 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2511 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2512 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

2514 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

2517 ()
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

2522 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_IDLE
;

2524 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2526 
hu¨t
->
	`RxEvítCÆlback
(hu¨t, (hu¨t->
RxX„rSize
 - hu¨t->
RxX„rCou¡
));

2529 
	`HAL_UARTEx_RxEvítCÆlback
(
hu¨t
, (hu¨t->
RxX„rSize
 - hu¨t->
RxX„rCou¡
));

2539 
uöt16_t
 
nb_rx_d©a
 = 
hu¨t
->
RxX„rSize
 - hu¨t->
RxX„rCou¡
;

2540 i‡((
hu¨t
->
RxX„rCou¡
 > 0U)

2541 && (
nb_rx_d©a
 > 0U))

2544 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2547 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2550 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2551 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

2553 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

2557 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_IDLE
;

2559 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2561 
hu¨t
->
	`RxEvítCÆlback
(hu¨t, 
nb_rx_d©a
);

2564 
	`HAL_UARTEx_RxEvítCÆlback
(
hu¨t
, 
nb_rx_d©a
);

2572 i‡(((
i§Êags
 & 
USART_SR_TXE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_TXEIE
) != RESET))

2574 
	`UART_Tønsmô_IT
(
hu¨t
);

2579 i‡(((
i§Êags
 & 
USART_SR_TC
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_TCIE
) != RESET))

2581 
	`UART_EndTønsmô_IT
(
hu¨t
);

2584 
	}
}

2592 
__wók
 
	$HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2595 
	`UNUSED
(
hu¨t
);

2599 
	}
}

2607 
__wók
 
	$HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2610 
	`UNUSED
(
hu¨t
);

2614 
	}
}

2622 
__wók
 
	$HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2625 
	`UNUSED
(
hu¨t
);

2629 
	}
}

2637 
__wók
 
	$HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2640 
	`UNUSED
(
hu¨t
);

2644 
	}
}

2652 
__wók
 
	$HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2655 
	`UNUSED
(
hu¨t
);

2659 
	}
}

2666 
__wók
 
	$HAL_UART_Ab‹tC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2669 
	`UNUSED
(
hu¨t
);

2674 
	}
}

2681 
__wók
 
	$HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2684 
	`UNUSED
(
hu¨t
);

2689 
	}
}

2696 
__wók
 
	$HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2699 
	`UNUSED
(
hu¨t
);

2704 
	}
}

2713 
__wók
 
	$HAL_UARTEx_RxEvítCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt16_t
 
Size
)

2716 
	`UNUSED
(
hu¨t
);

2717 
	`UNUSED
(
Size
);

2722 
	}
}

2753 
HAL_SètusTy≥Def
 
	$HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2756 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

2759 
	`__HAL_LOCK
(
hu¨t
);

2761 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2764 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_SBK
);

2766 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2769 
	`__HAL_UNLOCK
(
hu¨t
);

2771  
HAL_OK
;

2772 
	}
}

2780 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2783 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

2786 
	`__HAL_LOCK
(
hu¨t
);

2788 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2791 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_RWU
);

2793 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2794 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

2797 
	`__HAL_UNLOCK
(
hu¨t
);

2799  
HAL_OK
;

2800 
	}
}

2808 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_ExôMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2811 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

2814 
	`__HAL_LOCK
(
hu¨t
);

2816 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2819 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_RWU
);

2821 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2822 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

2825 
	`__HAL_UNLOCK
(
hu¨t
);

2827  
HAL_OK
;

2828 
	}
}

2836 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2838 
uöt32_t
 
tm¥eg
 = 0x00U;

2841 
	`__HAL_LOCK
(
hu¨t
);

2843 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2846 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR1
;

2849 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

2852 
tm¥eg
 |(
uöt32_t
)
USART_CR1_TE
;

2855 
	`WRITE_REG
(
hu¨t
->
In°™˚
->
CR1
, (
uöt32_t
)
tm¥eg
);

2857 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2860 
	`__HAL_UNLOCK
(
hu¨t
);

2862  
HAL_OK
;

2863 
	}
}

2871 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2873 
uöt32_t
 
tm¥eg
 = 0x00U;

2876 
	`__HAL_LOCK
(
hu¨t
);

2878 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2881 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR1
;

2884 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

2887 
tm¥eg
 |(
uöt32_t
)
USART_CR1_RE
;

2890 
	`WRITE_REG
(
hu¨t
->
In°™˚
->
CR1
, (
uöt32_t
)
tm¥eg
);

2892 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2895 
	`__HAL_UNLOCK
(
hu¨t
);

2897  
HAL_OK
;

2898 
	}
}

2928 
HAL_UART_SèãTy≥Def
 
	$HAL_UART_GëSèã
(c⁄° 
UART_H™dÀTy≥Def
 *
hu¨t
)

2930 
uöt32_t
 
ãmp1
 = 0x00U, 
ãmp2
 = 0x00U;

2931 
ãmp1
 = 
hu¨t
->
gSèã
;

2932 
ãmp2
 = 
hu¨t
->
RxSèã
;

2934  (
HAL_UART_SèãTy≥Def
)(
ãmp1
 | 
ãmp2
);

2935 
	}
}

2943 
uöt32_t
 
	$HAL_UART_GëEº‹
(c⁄° 
UART_H™dÀTy≥Def
 *
hu¨t
)

2945  
hu¨t
->
Eº‹Code
;

2946 
	}
}

2965 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2966 
	$UART_InôCÆlbacksToDeÁu…
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2969 
hu¨t
->
TxHÆfC∂tCÆlback
 = 
HAL_UART_TxHÆfC∂tCÆlback
;

2970 
hu¨t
->
TxC∂tCÆlback
 = 
HAL_UART_TxC∂tCÆlback
;

2971 
hu¨t
->
RxHÆfC∂tCÆlback
 = 
HAL_UART_RxHÆfC∂tCÆlback
;

2972 
hu¨t
->
RxC∂tCÆlback
 = 
HAL_UART_RxC∂tCÆlback
;

2973 
hu¨t
->
Eº‹CÆlback
 = 
HAL_UART_Eº‹CÆlback
;

2974 
hu¨t
->
Ab‹tC∂tCÆlback
 = 
HAL_UART_Ab‹tC∂tCÆlback
;

2975 
hu¨t
->
Ab‹tTønsmôC∂tCÆlback
 = 
HAL_UART_Ab‹tTønsmôC∂tCÆlback
;

2976 
hu¨t
->
Ab‹tRe˚iveC∂tCÆlback
 = 
HAL_UART_Ab‹tRe˚iveC∂tCÆlback
;

2977 
hu¨t
->
RxEvítCÆlback
 = 
HAL_UARTEx_RxEvítCÆlback
;

2979 
	}
}

2988 
	$UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2990 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

2992 i‡((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2994 
hu¨t
->
TxX„rCou¡
 = 0x00U;

2998 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

3001 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TCIE
);

3007 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3009 
hu¨t
->
	`TxC∂tCÆlback
(huart);

3012 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

3015 
	}
}

3023 
	$UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3025 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3027 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3029 
hu¨t
->
	`TxHÆfC∂tCÆlback
(huart);

3032 
	`HAL_UART_TxHÆfC∂tCÆlback
(
hu¨t
);

3034 
	}
}

3042 
	$UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3044 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3047 i‡((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

3049 
hu¨t
->
RxX„rCou¡
 = 0U;

3052 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

3053 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

3057 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

3060 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

3063 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

3065 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

3071 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

3075 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

3077 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3079 
hu¨t
->
	`RxEvítCÆlback
(hu¨t, hu¨t->
RxX„rSize
);

3082 
	`HAL_UARTEx_RxEvítCÆlback
(
hu¨t
, hu¨t->
RxX„rSize
);

3088 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3090 
hu¨t
->
	`RxC∂tCÆlback
(huart);

3093 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

3096 
	}
}

3104 
	$UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3106 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3110 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_HT
;

3114 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

3116 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3118 
hu¨t
->
	`RxEvítCÆlback
(hu¨t, hu¨t->
RxX„rSize
 / 2U);

3121 
	`HAL_UARTEx_RxEvítCÆlback
(
hu¨t
, hu¨t->
RxX„rSize
 / 2U);

3127 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3129 
hu¨t
->
	`RxHÆfC∂tCÆlback
(huart);

3132 
	`HAL_UART_RxHÆfC∂tCÆlback
(
hu¨t
);

3135 
	}
}

3143 
	$UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

3145 
uöt32_t
 
dm¨eque°
 = 0x00U;

3146 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3149 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

3150 i‡((
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
Ë&& 
dm¨eque°
)

3152 
hu¨t
->
TxX„rCou¡
 = 0x00U;

3153 
	`UART_EndTxTøns„r
(
hu¨t
);

3157 
dm¨eque°
 = 
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

3158 i‡((
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
Ë&& 
dm¨eque°
)

3160 
hu¨t
->
RxX„rCou¡
 = 0x00U;

3161 
	`UART_EndRxTøns„r
(
hu¨t
);

3164 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_DMA
;

3165 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3167 
hu¨t
->
	`Eº‹CÆlback
(huart);

3170 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

3172 
	}
}

3185 
HAL_SètusTy≥Def
 
	$UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
,

3186 
uöt32_t
 
Tick°¨t
, uöt32_à
Timeout
)

3189 (
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
Fœg
Ë? 
SET
 : 
RESET
Ë=
Sètus
)

3192 i‡(
Timeout
 !
HAL_MAX_DELAY
)

3194 i‡(((
	`HAL_GëTick
(Ë- 
Tick°¨t
Ë> 
Timeout
) || (Timeout == 0U))

3197  
HAL_TIMEOUT
;

3200 i‡((
	`READ_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_RE
Ë!0UË&& (
Fœg
 !
UART_FLAG_TXE
Ë&& (Fœg !
UART_FLAG_TC
))

3202 i‡(
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_ORE
Ë=
SET
)

3205 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

3210 
	`UART_EndRxTøns„r
(
hu¨t
);

3212 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_ORE
;

3215 
	`__HAL_UNLOCK
(
hu¨t
);

3217  
HAL_ERROR
;

3222  
HAL_OK
;

3223 
	}
}

3236 
HAL_SètusTy≥Def
 
	$UART_Sèπ_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

3238 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

3239 
hu¨t
->
RxX„rSize
 = 
Size
;

3240 
hu¨t
->
RxX„rCou¡
 = 
Size
;

3242 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

3243 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

3245 i‡(
hu¨t
->
Inô
.
P¨ôy
 !
UART_PARITY_NONE
)

3248 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_PE
);

3252 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

3255 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

3257  
HAL_OK
;

3258 
	}
}

3271 
HAL_SètusTy≥Def
 
	$UART_Sèπ_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

3273 
uöt32_t
 *
tmp
;

3275 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

3276 
hu¨t
->
RxX„rSize
 = 
Size
;

3278 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

3279 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

3282 
hu¨t
->
hdm¨x
->
X„rC∂tCÆlback
 = 
UART_DMARe˚iveC∂t
;

3285 
hu¨t
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMARxHÆfC∂t
;

3288 
hu¨t
->
hdm¨x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

3291 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

3294 
tmp
 = (
uöt32_t
 *)&
pD©a
;

3295 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm¨x
, (
uöt32_t
)&hu¨t->
In°™˚
->
DR
, *(uöt32_à*)
tmp
, 
Size
);

3298 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

3300 i‡(
hu¨t
->
Inô
.
P¨ôy
 !
UART_PARITY_NONE
)

3303 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

3307 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

3311 
	`ATOMIC_SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

3313  
HAL_OK
;

3314 
	}
}

3321 
	$UART_EndTxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
)

3324 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

3327 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

3328 
	}
}

3335 
	$UART_EndRxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
)

3338 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

3339 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

3342 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

3344 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

3348 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

3349 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

3350 
	}
}

3359 
	$UART_DMAAb‹tOnEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

3361 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3362 
hu¨t
->
RxX„rCou¡
 = 0x00U;

3363 
hu¨t
->
TxX„rCou¡
 = 0x00U;

3365 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3367 
hu¨t
->
	`Eº‹CÆlback
(huart);

3370 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

3372 
	}
}

3383 
	$UART_DMATxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

3385 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3387 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

3390 i‡(
hu¨t
->
hdm¨x
 !
NULL
)

3392 i‡(
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 !
NULL
)

3399 
hu¨t
->
TxX„rCou¡
 = 0x00U;

3400 
hu¨t
->
RxX„rCou¡
 = 0x00U;

3403 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

3406 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

3407 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

3408 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

3411 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3413 
hu¨t
->
	`Ab‹tC∂tCÆlback
(huart);

3416 
	`HAL_UART_Ab‹tC∂tCÆlback
(
hu¨t
);

3418 
	}
}

3429 
	$UART_DMARxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

3431 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3433 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

3436 i‡(
hu¨t
->
hdm©x
 !
NULL
)

3438 i‡(
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 !
NULL
)

3445 
hu¨t
->
TxX„rCou¡
 = 0x00U;

3446 
hu¨t
->
RxX„rCou¡
 = 0x00U;

3449 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

3452 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

3453 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

3454 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

3457 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3459 
hu¨t
->
	`Ab‹tC∂tCÆlback
(huart);

3462 
	`HAL_UART_Ab‹tC∂tCÆlback
(
hu¨t
);

3464 
	}
}

3475 
	$UART_DMATxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

3477 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3479 
hu¨t
->
TxX„rCou¡
 = 0x00U;

3482 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

3485 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3487 
hu¨t
->
	`Ab‹tTønsmôC∂tCÆlback
(huart);

3490 
	`HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
hu¨t
);

3492 
	}
}

3503 
	$UART_DMARxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

3505 
UART_H™dÀTy≥Def
 *
hu¨t
 = (UART_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

3507 
hu¨t
->
RxX„rCou¡
 = 0x00U;

3510 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

3511 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

3514 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3516 
hu¨t
->
	`Ab‹tRe˚iveC∂tCÆlback
(huart);

3519 
	`HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
hu¨t
);

3521 
	}
}

3529 
HAL_SètusTy≥Def
 
	$UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

3531 c⁄° 
uöt16_t
 *
tmp
;

3534 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
)

3536 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

3538 
tmp
 = (c⁄° 
uöt16_t
 *Ë
hu¨t
->
pTxBuffPå
;

3539 
hu¨t
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

3540 
hu¨t
->
pTxBuffPå
 += 2U;

3544 
hu¨t
->
In°™˚
->
DR
 = (
uöt8_t
)(*hu¨t->
pTxBuffPå
++ & (uint8_t)0x00FF);

3547 i‡(--
hu¨t
->
TxX„rCou¡
 == 0U)

3550 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

3553 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TC
);

3555  
HAL_OK
;

3559  
HAL_BUSY
;

3561 
	}
}

3569 
HAL_SètusTy≥Def
 
	$UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

3572 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TC
);

3575 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

3577 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3579 
hu¨t
->
	`TxC∂tCÆlback
(huart);

3582 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

3585  
HAL_OK
;

3586 
	}
}

3594 
HAL_SètusTy≥Def
 
	$UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

3596 
uöt8_t
 *
pd©a8bôs
;

3597 
uöt16_t
 *
pd©a16bôs
;

3600 i‡(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
)

3602 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

3604 
pd©a8bôs
 = 
NULL
;

3605 
pd©a16bôs
 = (
uöt16_t
 *Ë
hu¨t
->
pRxBuffPå
;

3606 *
pd©a16bôs
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

3607 
hu¨t
->
pRxBuffPå
 += 2U;

3611 
pd©a8bôs
 = (
uöt8_t
 *Ë
hu¨t
->
pRxBuffPå
;

3612 
pd©a16bôs
 = 
NULL
;

3614 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë|| ((hu¨t->Inô.W‹dLígth =
UART_WORDLENGTH_8B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
)))

3616 *
pd©a8bôs
 = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

3620 *
pd©a8bôs
 = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x007F);

3622 
hu¨t
->
pRxBuffPå
 += 1U;

3625 i‡(--
hu¨t
->
RxX„rCou¡
 == 0U)

3628 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

3631 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

3634 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

3637 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

3640 
hu¨t
->
RxEvítTy≥
 = 
HAL_UART_RXEVENT_TC
;

3644 i‡(
hu¨t
->
Re˚±i⁄Ty≥
 =
HAL_UART_RECEPTION_TOIDLE
)

3647 
hu¨t
->
Re˚±i⁄Ty≥
 = 
HAL_UART_RECEPTION_STANDARD
;

3650 
	`ATOMIC_CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_IDLEIE
);

3653 i‡(
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_IDLE
))

3656 
	`__HAL_UART_CLEAR_IDLEFLAG
(
hu¨t
);

3659 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3661 
hu¨t
->
	`RxEvítCÆlback
(hu¨t, hu¨t->
RxX„rSize
);

3664 
	`HAL_UARTEx_RxEvítCÆlback
(
hu¨t
, hu¨t->
RxX„rSize
);

3670 #i‡(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3672 
hu¨t
->
	`RxC∂tCÆlback
(huart);

3675 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

3679  
HAL_OK
;

3681  
HAL_OK
;

3685  
HAL_BUSY
;

3687 
	}
}

3695 
	$UART_SëC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
)

3697 
uöt32_t
 
tm¥eg
;

3698 
uöt32_t
 
p˛k
;

3701 
	`as£π_∑øm
(
	`IS_UART_BAUDRATE
(
hu¨t
->
Inô
.
BaudR©e
));

3702 
	`as£π_∑øm
(
	`IS_UART_STOPBITS
(
hu¨t
->
Inô
.
St›Bôs
));

3703 
	`as£π_∑øm
(
	`IS_UART_PARITY
(
hu¨t
->
Inô
.
P¨ôy
));

3704 
	`as£π_∑øm
(
	`IS_UART_MODE
(
hu¨t
->
Inô
.
Mode
));

3709 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_STOP
, hu¨t->
Inô
.
St›Bôs
);

3718 #i‡
	`deföed
(
USART_CR1_OVER8
)

3719 
tm¥eg
 = (
uöt32_t
)
hu¨t
->
Inô
.
W‹dLígth
 | hu¨t->Inô.
P¨ôy
 | hu¨t->Inô.
Mode
 | hu¨t->Inô.
OvîSam∂ög
;

3720 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
,

3721 (
uöt32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
 | 
USART_CR1_OVER8
),

3722 
tm¥eg
);

3724 
tm¥eg
 = (
uöt32_t
)
hu¨t
->
Inô
.
W‹dLígth
 | hu¨t->Inô.
P¨ôy
 | hu¨t->Inô.
Mode
;

3725 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
,

3726 (
uöt32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
),

3727 
tm¥eg
);

3732 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
), hu¨t->
Inô
.
HwFlowCé
);

3735 if(
hu¨t
->
In°™˚
 =
USART1
)

3737 
p˛k
 = 
	`HAL_RCC_GëPCLK2Fªq
();

3741 
p˛k
 = 
	`HAL_RCC_GëPCLK1Fªq
();

3745 #i‡
	`deföed
(
USART_CR1_OVER8
)

3746 i‡(
hu¨t
->
Inô
.
OvîSam∂ög
 =
UART_OVERSAMPLING_8
)

3748 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING8
(
p˛k
, hu¨t->
Inô
.
BaudR©e
);

3752 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
p˛k
, hu¨t->
Inô
.
BaudR©e
);

3755 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
p˛k
, hu¨t->
Inô
.
BaudR©e
);

3757 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/I2C_BSP/myiic.c

1 
	~"myiic.h
"

4 
	$i2c_WrôeReg
(
uöt8_t
 
dev
,uöt8_à
ªg
,uöt8_à
vÆ
){

5 
uöt8_t
 
wrôevÆ
;

6 
wrôevÆ
 = 
vÆ
;

7 
	`HAL_I2C_Mem_Wrôe
(&
hi2c1
 ,
dev
, 
ªg
 ,
I2C_MEMADD_SIZE_8BIT
, &
wrôevÆ
 ,1,0xffff);

9 
	}
}

11 
uöt8_t
 
	$i2c_RódReg
(
uöt8_t
 
dev
,uöt8_à
vÆ
){

12 
uöt8_t
 
ªadvÆ
 ;

13 
	`HAL_I2C_Mem_Ród
(&
hi2c1
 ,
dev
, 
vÆ
, 
I2C_MEMADD_SIZE_8BIT
 , &
ªadvÆ
 , 1,0xffff);

14  
ªadvÆ
;

15 
	}
}

16 
	$i2c_RódMuti
(
uöt8_t
 
dev
 ,uöt8_à
Àn
 , uöt8_à
ªg
 ,uöt8_à* 
Buf„r
){

17 
	`HAL_I2C_Mem_Ród
(&
hi2c1
 ,
dev
, 
ªg
, 
I2C_MEMADD_SIZE_8BIT
 , 
Buf„r
 , 
Àn
,0xffff);

23 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/I2C_BSP/myiic.h

1 #i‚de‡
_MYIIC_H_


2 
	#_MYIIC_H_


	)

4 
	~<°döt.h
>

5 
	~"i2c.h
"

6 
	~"maö.h
"

7 
i2c_WrôeReg
(
uöt8_t
 
dev
,uöt8_à
ªg
,uöt8_à
vÆ
);

8 
uöt8_t
 
i2c_RódReg
(uöt8_à
dev
,uöt8_à
vÆ
);

9 
i2c_RódMuti
(
uöt8_t
 
dev
 ,uöt8_à
Àn
 , uöt8_à
ªg
 ,uöt8_à* 
Buf„r
);

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/NRF2401/NRF2401.c

1 
	~"NRF2401.h
"

2 
	~"•i.h
"

6 c⁄° 
uöt8_t
 
	gTX_ADDRESS
[
TX_ADR_WIDTH
]={0x34,0x43,0x10,0x10,0x01};

7 c⁄° 
uöt8_t
 
	gRX_ADDRESS
[
RX_ADR_WIDTH
]={0x34,0x43,0x10,0x10,0x01};

11 
	$NRF24L01_Inô
()

13 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_RESET
);

14 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_SET
);

15 
	}
}

18 
uöt8_t
 
	$NRF24L01_Wrôe_Buf
(
uöt8_t
 
ªg
, uöt8_à*
pBuf
, uöt8_à
Àn
)

20 
uöt8_t
 
°©us
,
ªg_ªad
 = 
ªg
,
˘r
;

21 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_RESET
);

22 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
ªg_ªad
,&
°©us
,1,100);

24 
	`HAL_SPI_Tønsmô
(&
h•i1
,
pBuf
,
Àn
,100);

25 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_SET
);

26  
°©us
;

27 
	}
}

28 
uöt8_t
 
	$NRF24L01_Ród_Buf
(
uöt8_t
 
ªg
,uöt8_à*
pBuf
,uöt8_à
Àn
)

30 
uöt8_t
 
°©us
,
ªg_ªad
 = 
ªg
,
˘r
 = 0, 
buf·mp
 = 0,
rw
 = 0xFF;

32 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_RESET
);

33 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
ªg_ªad
,&
°©us
,1,100);

34 
˘r
 = 0;˘∏< 
Àn
; ctr++)

35 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
rw
,&
pBuf
[
˘r
],1,100);

37 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_SET
);

38  
°©us
;

39 
	}
}

43 
uöt8_t
 
	$NRF24L01_Wrôe_Reg
(
uöt8_t
 
ªg
,uöt8_à
vÆue
)

45 
uöt8_t
 
°©us
,
ªg_ªad
 = 
ªg
,
vÆue_wrôe
 = 
vÆue
,
TMP
;

46 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_RESET
);

47 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
ªg_ªad
,&
°©us
,1,100);

48 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
vÆue_wrôe
,&
TMP
,1,100);

49 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_SET
);

50  
°©us
;

51 
	}
}

54 
uöt8_t
 
	$NRF24L01_Ród_Reg
(
uöt8_t
 
ªg
)

56 
uöt8_t
 
ªg_vÆ
,
ªg_ªad
 = 
ªg
,
vÆue_wrôe
 = 0xFF,
°©us
;

57 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_RESET
);

58 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
ªg_ªad
,&
°©us
,1,100);

59 
	`HAL_SPI_TønsmôRe˚ive
(&
h•i1
,&
vÆue_wrôe
,&
ªg_vÆ
,1,100);

60 
	`HAL_GPIO_WrôePö
(
CSN_GPIO_P‹t
, 
CSN_Pö
, 
GPIO_PIN_SET
);

61  
ªg_vÆ
;

62 
	}
}

65 
uöt8_t
 
	$NRF24L01_Check
()

67 
uöt8_t
 
buf
[5]={0XA5,0XA5,0XA5,0XA5,0XA5};

68 
uöt8_t
 
i
;

69 
	`NRF24L01_Wrôe_Buf
(
NRF_WRITE_REG
+
TX_ADDR
,
buf
,5);

70 
	`NRF24L01_Ród_Buf
(
TX_ADDR
,
buf
,5);

71 
i
=0;i<5;i++)if(
buf
[i]!=0XA5);

72 if(
i
!=5) 1;

74 
	}
}

80 
uöt8_t
 
	$NRF24L01_TxPackë
(
uöt8_t
 *
txbuf
)

82 
uöt8_t
 
°a
;

84 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_RESET
);

85 
	`NRF24L01_Wrôe_Buf
(
WR_TX_PLOAD
,
txbuf
,
TX_PLOAD_WIDTH
);

86 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_SET
);

87 
	`HAL_GPIO_RódPö
(
IRQ_GPIO_P‹t
, 
IRQ_Pö
Ë!
GPIO_PIN_RESET
);

88 
°a
=
	`NRF24L01_Ród_Reg
(
STATUS
);

89 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
STATUS
,
°a
);

90 if(
°a
&
MAX_TX
)

92 
	`NRF24L01_Wrôe_Reg
(
FLUSH_TX
,0xff);

93  
MAX_TX
;

95 if(
°a
&
TX_OK
)

97  
TX_OK
;

100 
	}
}

104 
uöt8_t
 
	$NRF24L01_RxPackë
(
uöt8_t
 *
rxbuf
)

106 
uöt8_t
 
°a
;

108 
°a
=
	`NRF24L01_Ród_Reg
(
STATUS
);

109 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
STATUS
,
°a
);

110 if(
°a
&
RX_OK
)

112 
	`NRF24L01_Ród_Buf
(
RD_RX_PLOAD
,
rxbuf
,
RX_PLOAD_WIDTH
);

113 
	`NRF24L01_Wrôe_Reg
(
FLUSH_RX
,0xff);

117 
	}
}

121 
	$NRF24L01_RX_Mode
()

123 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_RESET
);

124 
	`NRF24L01_Wrôe_Buf
(
NRF_WRITE_REG
+
RX_ADDR_P0
,(
uöt8_t
*)
RX_ADDRESS
,
RX_ADR_WIDTH
);

126 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
EN_AA
,0x01);

127 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
EN_RXADDR
,0x01);

128 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
RF_CH
,40);

129 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
RX_PW_P0
,
RX_PLOAD_WIDTH
);

130 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
RF_SETUP
,0x0f);

131 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
CONFIG
, 0x0f);

132 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_SET
);

133 
	}
}

139 
	$NRF24L01_TX_Mode
()

141 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_RESET
);

142 
	`NRF24L01_Wrôe_Buf
(
NRF_WRITE_REG
+
TX_ADDR
,(
uöt8_t
*)
TX_ADDRESS
,
TX_ADR_WIDTH
);

143 
	`NRF24L01_Wrôe_Buf
(
NRF_WRITE_REG
+
RX_ADDR_P0
,(
uöt8_t
*)
RX_ADDRESS
,
RX_ADR_WIDTH
);

145 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
EN_AA
,0x01);

146 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
EN_RXADDR
,0x01);

147 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
SETUP_RETR
,0x1a);

148 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
RF_CH
,40);

149 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
RF_SETUP
,0x0f);

150 
	`NRF24L01_Wrôe_Reg
(
NRF_WRITE_REG
+
CONFIG
,0x0e);

151 
	`HAL_GPIO_WrôePö
(
CE_GPIO_P‹t
, 
CE_Pö
, 
GPIO_PIN_SET
);

152 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/NRF2401/NRF2401.h

1 #i‚de‡
__24L01_H


2 
	#__24L01_H


	)

3 
	~<°döt.h
>

19 
	#NRF_READ_REG
 0x00

20 
	#NRF_WRITE_REG
 0x20

21 
	#RD_RX_PLOAD
 0x61

22 
	#WR_TX_PLOAD
 0xA0

23 
	#FLUSH_TX
 0xE1

24 
	#FLUSH_RX
 0xE2

25 
	#REUSE_TX_PL
 0xE3

26 
	#NOP
 0xFF

28 
	#CONFIG
 0x00

30 
	#EN_AA
 0x01

31 
	#EN_RXADDR
 0x02

32 
	#SETUP_AW
 0x03

33 
	#SETUP_RETR
 0x04

34 
	#RF_CH
 0x05

35 
	#RF_SETUP
 0x06

36 
	#STATUS
 0x07

38 
	#MAX_TX
 0x10

39 
	#TX_OK
 0x20

40 
	#RX_OK
 0x40

41 

	)

42 
	#OBSERVE_TX
 0x08

43 
	#CD
 0x09

44 
	#RX_ADDR_P0
 0x0A

45 
	#RX_ADDR_P1
 0x0B

46 
	#RX_ADDR_P2
 0x0C

47 
	#RX_ADDR_P3
 0x0D

48 
	#RX_ADDR_P4
 0x0E

49 
	#RX_ADDR_P5
 0x0F

50 
	#TX_ADDR
 0x10

51 
	#RX_PW_P0
 0x11

52 
	#RX_PW_P1
 0x12

53 
	#RX_PW_P2
 0x13

54 
	#RX_PW_P3
 0x14

55 
	#RX_PW_P4
 0x15

56 
	#RX_PW_P5
 0x16

57 
	#NRF_FIFO_STATUS
 0x17

61 
	#TX_ADR_WIDTH
 5

62 
	#RX_ADR_WIDTH
 5

63 
	#TX_PLOAD_WIDTH
 32

64 
	#RX_PLOAD_WIDTH
 32

65 

	)

70 
NRF24L01_Inô
();

72 
uöt8_t
 
NRF24L01_Wrôe_Buf
(uöt8_à
ªg
, uöt8_à*
pBuf
, uöt8_à
Àn
);

74 
uöt8_t
 
NRF24L01_Ród_Buf
(uöt8_à
ªg
,uöt8_à*
pBuf
,uöt8_à
Àn
);

79 
uöt8_t
 
NRF24L01_Wrôe_Reg
(uöt8_à
ªg
,uöt8_à
vÆue
);

83 
uöt8_t
 
NRF24L01_Ród_Reg
(uöt8_à
ªg
);

87 
uöt8_t
 
NRF24L01_Check
();

93 
uöt8_t
 
NRF24L01_TxPackë
(uöt8_à*
txbuf
);

98 
uöt8_t
 
NRF24L01_RxPackë
(uöt8_à*
rxbuf
);

103 
NRF24L01_RX_Mode
();

110 
NRF24L01_TX_Mode
();

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMC5883/qmc5883.c

2 
	~"qmc5883.h
"

3 
	~"myiic.h
"

4 
	~"ußπ.h
"

9 
	#QMC5883_DEV
 0x1A

	)

11 
	uQMC5883_D©a
{

12 
uöt8_t
 
	mbuf„r
[6];

14 
öt16_t
 
	mAX
;

15 
öt16_t
 
	mAY
;

16 
öt16_t
 
	mAZ
;

17 }
	m°D©a
;

18 } 
	guQMC5883_D©a
;

20 
	$QMC5883_Inô
()

22 
uöt8_t
 
uChùID
 = 0,
ªady
 =0;

27 
	`i2c_WrôeReg
(
QMC5883_DEV
,0x0B,0x01);

28 
	`i2c_WrôeReg
(
QMC5883_DEV
,0x20,0x40);

29 
	`i2c_WrôeReg
(
QMC5883_DEV
,0x21,0x01);

31 
	`i2c_WrôeReg
(
QMC5883_DEV
,0x09,0x89);

32 
	`HAL_Dñay
(200);

33  
uChùID
!= 0xFF)

35 
uChùID
 = 
	`i2c_RódReg
(
QMC5883_DEV
,0x0D);

36 
	`HAL_Dñay
(200);

38 
	`¥ötf
("QMC5883 check Pass!\r\n");

39 
	}
}

41 
	$QMC5883_d©aGë
()

43 
	`i2c_RódMuti
(
QMC5883_DEV
,6,0x0,&
uQMC5883_D©a
.
buf„r
);

44 #ifde‡
TEST_MODE


45 
	`¥ötf
("[QMI8658]:AX=%d AY=%d AZ=%d \r\n", \

46 (
öt16_t
)(
uQMC5883_D©a
.
°D©a
.
AX
), (öt16_t)(uQMC5883_D©a.°D©a.
AY
), (öt16_t)(uQMC5883_D©a.°D©a.
AZ
));

48 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMC5883/qmc5883.h

1 #i‚de‡
__QMC5883_H


2 
	#__QMC5883_H


	)

5 
QMC5883_Inô
();

6 
QMC5883_d©aGë
();

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMI8658/qmi8658.c

7 
	~"qmi8658.h
"

9 
	~"myiic.h
"

10 
	~"ußπ.h
"

12 
	~"£ns‹.h
"

14 
	#QMI8658_DEV
 0xD5

	)

15 
	#SPL06_DEV
 0xEC

	)

16 
	#QMC5883_DEV
 0x1A

	)

20 
	uQMI8658_D©a
{

21 
uöt8_t
 
	mbuf„r
[12];

23 
öt16_t
 
	mAX
;

24 
öt16_t
 
	mAY
;

25 
öt16_t
 
	mAZ
;

26 
öt16_t
 
	mGX
;

27 
öt16_t
 
	mGY
;

28 
öt16_t
 
	mGZ
;

29 }
	m°D©a
;

30 } 
	guQMI8658_D©a
;

34 
	$QMI8658_Inô
()

36 
uöt8_t
 
uChùID
 = 0;

39 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL9
,0xA2);

40 
	`HAL_Dñay
(200);

41 
uChùID
 != 0x5)

43 
	`HAL_Dñay
(200);

44 
uChùID
 = 
	`i2c_RódReg
(
QMI8658_DEV
,0x00);

47 
	`¥ötf
("QMI8658 check Pass!\r\n");

50 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL1
,0x40);

51 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL2
,0x33);

52 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL3
,0x53);

54 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL5
,0x77);

55 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL6
,0x0);

56 
	`i2c_WrôeReg
(
QMI8658_DEV
,
CTRL7
,0x03);

57 
	}
}

59 
	$QMI8658_d©aGë
()

61 
	`i2c_RódMuti
(
QMI8658_DEV
,12,
AX_L
,
uQMI8658_D©a
.
buf„r
);

62 
g°SíS‹Raw
.
AccRaw
.
ax
 = 
uQMI8658_D©a
.
°D©a
.
AX
;

63 
g°SíS‹Raw
.
AccRaw
.
ay
 = 
uQMI8658_D©a
.
°D©a
.
AY
;

64 
g°SíS‹Raw
.
AccRaw
.
az
 = 
uQMI8658_D©a
.
°D©a
.
AZ
;

65 
g°SíS‹Raw
.
GyroRaw
.
gx
 = 
uQMI8658_D©a
.
°D©a
.
GX
;

66 
g°SíS‹Raw
.
GyroRaw
.
gy
 = 
uQMI8658_D©a
.
°D©a
.
GY
;

67 
g°SíS‹Raw
.
GyroRaw
.
gz
 = 
uQMI8658_D©a
.
°D©a
.
GZ
;

100 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMI8658/qmi8658.h

1 #i‚de‡
__QMI8658_H


2 
	#__QMI8658_H


	)

9 
	#WHO_AM_I
 0x00

	)

10 
	#REVISION_ID
 0x01

	)

12 
	#CTRL1
 0x02

	)

13 
	#CTRL2
 0x03

	)

14 
	#CTRL3
 0x04

	)

15 
	#CTRL4
 0x05

	)

16 
	#CTRL5
 0x06

	)

17 
	#CTRL6
 0x07

	)

18 
	#CTRL7
 0x08

	)

19 
	#CTRL8
 0x09

	)

20 
	#CTRL9
 0x0A

	)

22 
	#CAL1_L
 0x0B

	)

23 
	#CAL1_H
 0x0C

	)

24 
	#CAL2_L
 0x0D

	)

25 
	#CAL2_H
 0x0E

	)

26 
	#CAL3_L
 0x0F

	)

27 
	#CAL3_H
 0x10

	)

28 
	#CAL4_L
 0x11

	)

29 
	#CAL4_H
 0x12

	)

31 
	#FIFO_WTM_TH
 0x13

	)

32 
	#FIFO_CTRL
 0x14

	)

33 
	#FIFO_SMPL_CNT
 0x15

	)

34 
	#FIFO_STATUS
 0x16

	)

35 
	#FIFO_DATA
 0x17

	)

37 
	#STATUSINT
 0x2D

	)

38 
	#STATUS0
 0x2E

	)

39 
	#STATUS1
 0x2F

	)

41 
	#TIMESTAMP_LOW
 0x30

	)

42 
	#TIMESTAMP_MID
 0x31

	)

43 
	#TIMESTAMP_HIGH
 0x32

	)

45 
	#TEMP_L
 0x33

	)

46 
	#TEMP_H
 0x34

	)

48 
	#AX_L
 0x35

	)

49 
	#AX_H
 0x36

	)

50 
	#AY_L
 0x37

	)

51 
	#AY_H
 0x38

	)

52 
	#AZ_L
 0x39

	)

53 
	#AZ_H
 0x3A

	)

54 
	#GX_L
 0x3B

	)

55 
	#GX_H
 0x3C

	)

56 
	#GY_L
 0x3D

	)

57 
	#GY_H
 0x3E

	)

58 
	#GZ_L
 0x3F

	)

59 
	#GZ_H
 0x40

	)

61 
	#dQW_L
 0x49

	)

62 
	#dQW_H
 0x4A

	)

63 
	#dQX_L
 0x4B

	)

64 
	#dQX_H
 0x4C

	)

65 
	#dQY_L
 0x4D

	)

66 
	#dQY_H
 0x4E

	)

67 
	#dQZ_L
 0x4F

	)

68 
	#dQZ_H
 0x50

	)

69 
	#dVX_L
 0x51

	)

70 
	#dVX_H
 0x52

	)

71 
	#dVY_L
 0x53

	)

72 
	#dVY_H
 0x54

	)

73 
	#dVZ_L
 0x55

	)

74 
	#dVZ_H
 0x56

	)

75 
	#AE_REG1
 0x57

	)

76 
	#AE_REG2
 0x58

	)

77 
	#RESET_REG
 0x60

	)

82 
QMI8658_Inô
();

83 
QMI8658_d©aGë
();

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/SPL06/spl06.c

1 
	~"•l06.h
"

2 
	~"myiic.h
"

3 
	~"ußπ.h
"

9 
	#SPL06_DEV
 0xEC

	)

11 
	$SPL06_Inô
()

13 
uöt8_t
 
uChùID
 = 0;

15 
	`i2c_WrôeReg
(
SPL06_DEV
,0xE0,0xB6);

16 
	`HAL_Dñay
(300);

18 
uChùID
!= 0x58){

20 
uChùID
 = 
	`i2c_RódReg
(
SPL06_DEV
,0xd0);

21 
	`HAL_Dñay
(200);

23 
	`¥ötf
("BMP280 check Pass!:devi˚ID = 0x%x \r\n",
uChùID
);

26 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/SPL06/spl06.h

1 #i‚de‡
__SPL06_H


2 
	#__SPL06_H


	)

4 
SPL06_Inô
();

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c

56 
	~<°rög.h
>

57 
	~"cmsis_os.h
"

62 #i‡ 
deföed
 ( 
__CC_ARM
 )

64 
	#__ASM
 
__asm


	)

65 
	#__INLINE
 
__ölöe


	)

66 
	#__STATIC_INLINE
 
__ölöe


	)

68 
	~"cmsis_¨mcc.h
"

73 #ñi‡
deföed
 ( 
__GNUC__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__INLINE
 
ölöe


	)

77 
	#__STATIC_INLINE
 
ölöe


	)

79 
	~"cmsis_gcc.h
"

85 #ñi‡
deföed
 ( 
__ICCARM__
 )

87 #i‚de‡ 
__ASM


88 
	#__ASM
 
__asm


	)

90 #i‚de‡ 
__INLINE


91 
	#__INLINE
 
ölöe


	)

93 #i‚de‡ 
__STATIC_INLINE


94 
	#__STATIC_INLINE
 
ölöe


	)

97 
	~<cmsis_ür.h
>

100 
xP‹tSysTickH™dÀr
();

103 
p‹tBASE_TYPE
 
	$makeFªeRtosPri‹ôy
 (
osPri‹ôy
 
¥i‹ôy
)

105 
p‹tBASE_TYPE
 
Âri‹ôy
 = 
tskIDLE_PRIORITY
;

107 i‡(
¥i‹ôy
 !
osPri‹ôyEº‹
) {

108 
Âri‹ôy
 +(
¥i‹ôy
 - 
osPri‹ôyIdÀ
);

111  
Âri‹ôy
;

112 
	}
}

114 #i‡(
INCLUDE_uxTaskPri‹ôyGë
 == 1)

116 
osPri‹ôy
 
	$makeCmsisPri‹ôy
 (
p‹tBASE_TYPE
 
Âri‹ôy
)

118 
osPri‹ôy
 
¥i‹ôy
 = 
osPri‹ôyEº‹
;

120 i‡((
Âri‹ôy
 - 
tskIDLE_PRIORITY
Ë<(
osPri‹ôyRó…ime
 - 
osPri‹ôyIdÀ
)) {

121 
¥i‹ôy
 = (
osPri‹ôy
)(()
osPri‹ôyIdÀ
 + ()(
Âri‹ôy
 - 
tskIDLE_PRIORITY
));

124  
¥i‹ôy
;

125 
	}
}

130 
	$öH™dÀrMode
 ()

132  
	`__gë_IPSR
() != 0;

133 
	}
}

141 
osSètus
 
osKî√lInôülize
 ();

150 
osSètus
 
	$osKî√lSèπ
 ()

152 
	`vTaskSèπScheduÀr
();

154  
osOK
;

155 
	}
}

165 
öt32_t
 
	$osKî√lRu¬ög
()

167 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

168 i‡(
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_NOT_STARTED
)

175 
	}
}

177 #i‡(
deföed
 (
osFótuª_SysTick
) && (osFeature_SysTick != 0))

184 
uöt32_t
 
	$osKî√lSysTick
()

186 i‡(
	`öH™dÀrMode
()) {

187  
	`xTaskGëTickCou¡FromISR
();

190  
	`xTaskGëTickCou¡
();

192 
	}
}

202 
osThªadId
 
	$osThªadCª©e
 (c⁄° 
osThªadDef_t
 *
thªad_def
, *
¨gumít
)

204 
TaskH™dÀ_t
 
h™dÀ
;

206 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

207 if((
thªad_def
->
buf„r
 !
NULL
Ë&& (thªad_def->
c⁄åﬁblock
 != NULL)) {

208 
h™dÀ
 = 
	`xTaskCª©eSètic
((
TaskFun˘i⁄_t
)
thªad_def
->
±hªad
,(c⁄° 
p‹tCHAR
 *Èhªad_def->
«me
,

209 
thªad_def
->
°acksize
, 
¨gumít
, 
	`makeFªeRtosPri‹ôy
—hªad_def->
çri‹ôy
),

210 
thªad_def
->
buf„r
,Åhªad_def->
c⁄åﬁblock
);

213 i‡(
	`xTaskCª©e
((
TaskFun˘i⁄_t
)
thªad_def
->
±hªad
,(c⁄° 
p‹tCHAR
 *Èhªad_def->
«me
,

214 
thªad_def
->
°acksize
, 
¨gumít
, 
	`makeFªeRtosPri‹ôy
—hªad_def->
çri‹ôy
),

215 &
h™dÀ
Ë!
pdPASS
) {

216  
NULL
;

219 #ñif–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

221 
h™dÀ
 = 
	`xTaskCª©eSètic
((
TaskFun˘i⁄_t
)
thªad_def
->
±hªad
,(c⁄° 
p‹tCHAR
 *Èhªad_def->
«me
,

222 
thªad_def
->
°acksize
, 
¨gumít
, 
	`makeFªeRtosPri‹ôy
—hªad_def->
çri‹ôy
),

223 
thªad_def
->
buf„r
,Åhªad_def->
c⁄åﬁblock
);

225 i‡(
	`xTaskCª©e
((
TaskFun˘i⁄_t
)
thªad_def
->
±hªad
,(c⁄° 
p‹tCHAR
 *Èhªad_def->
«me
,

226 
thªad_def
->
°acksize
, 
¨gumít
, 
	`makeFªeRtosPri‹ôy
—hªad_def->
çri‹ôy
),

227 &
h™dÀ
Ë!
pdPASS
) {

228  
NULL
;

232  
h™dÀ
;

233 
	}
}

240 
osThªadId
 
	$osThªadGëId
 ()

242 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

243  
	`xTaskGëCuºítTaskH™dÀ
();

245  
NULL
;

247 
	}
}

255 
osSètus
 
	$osThªadTîmö©e
 (
osThªadId
 
thªad_id
)

257 #i‡(
INCLUDE_vTaskDñëe
 == 1)

258 
	`vTaskDñëe
(
thªad_id
);

259  
osOK
;

261  
osEº‹OS
;

263 
	}
}

270 
osSètus
 
	$osThªadYõld
 ()

272 
	`èskYIELD
();

274  
osOK
;

275 
	}
}

284 
osSètus
 
	$osThªadSëPri‹ôy
 (
osThªadId
 
thªad_id
, 
osPri‹ôy
 
¥i‹ôy
)

286 #i‡(
INCLUDE_vTaskPri‹ôySë
 == 1)

287 
	`vTaskPri‹ôySë
(
thªad_id
, 
	`makeFªeRtosPri‹ôy
(
¥i‹ôy
));

288  
osOK
;

290  
osEº‹OS
;

292 
	}
}

300 
osPri‹ôy
 
	$osThªadGëPri‹ôy
 (
osThªadId
 
thªad_id
)

302 #i‡(
INCLUDE_uxTaskPri‹ôyGë
 == 1)

303 i‡(
	`öH™dÀrMode
())

305  
	`makeCmsisPri‹ôy
(
	`uxTaskPri‹ôyGëFromISR
(
thªad_id
));

309  
	`makeCmsisPri‹ôy
(
	`uxTaskPri‹ôyGë
(
thªad_id
));

312  
osPri‹ôyEº‹
;

314 
	}
}

322 
osSètus
 
	$osDñay
 (
uöt32_t
 
mûli£c
)

324 #i‡
INCLUDE_vTaskDñay


325 
TickTy≥_t
 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

327 
	`vTaskDñay
(
ticks
 ?Åicks : 1);

329  
osOK
;

331 (Ë
mûli£c
;

333  
osEº‹Resour˚
;

335 
	}
}

337 #i‡(
deföed
 (
osFótuª_Waô
) && (osFeature_Wait != 0))

344 
osEvít
 
osWaô
 (
uöt32_t
 
mûli£c
);

357 
osTimîId
 
	$osTimîCª©e
 (c⁄° 
osTimîDef_t
 *
timî_def
, 
os_timî_ty≥
 
ty≥
, *
¨gumít
)

359 #i‡(
c⁄figUSE_TIMERS
 == 1)

361 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

362 if(
timî_def
->
c⁄åﬁblock
 !
NULL
) {

363  
	`xTimîCª©eSètic
((const *)"",

365 (
ty≥
 =
osTimîPîiodic
Ë? 
pdTRUE
 : 
pdFALSE
,

366 (*Ë
¨gumít
,

367 (
TimîCÆlbackFun˘i⁄_t
)
timî_def
->
±imî
,

368 (
SèticTimî_t
 *)
timî_def
->
c⁄åﬁblock
);

371  
	`xTimîCª©e
((const *)"",

373 (
ty≥
 =
osTimîPîiodic
Ë? 
pdTRUE
 : 
pdFALSE
,

374 (*Ë
¨gumít
,

375 (
TimîCÆlbackFun˘i⁄_t
)
timî_def
->
±imî
);

377 #ñif–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

378  
	`xTimîCª©eSètic
((const *)"",

380 (
ty≥
 =
osTimîPîiodic
Ë? 
pdTRUE
 : 
pdFALSE
,

381 (*Ë
¨gumít
,

382 (
TimîCÆlbackFun˘i⁄_t
)
timî_def
->
±imî
,

383 (
SèticTimî_t
 *)
timî_def
->
c⁄åﬁblock
);

385  
	`xTimîCª©e
((const *)"",

387 (
ty≥
 =
osTimîPîiodic
Ë? 
pdTRUE
 : 
pdFALSE
,

388 (*Ë
¨gumít
,

389 (
TimîCÆlbackFun˘i⁄_t
)
timî_def
->
±imî
);

393  
NULL
;

395 
	}
}

404 
osSètus
 
	$osTimîSèπ
 (
osTimîId
 
timî_id
, 
uöt32_t
 
mûli£c
)

406 
osSètus
 
ªsu…
 = 
osOK
;

407 #i‡(
c⁄figUSE_TIMERS
 == 1)

408 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

409 
TickTy≥_t
 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

411 i‡(
ticks
 == 0)

412 
ticks
 = 1;

414 i‡(
	`öH™dÀrMode
())

416 i‡(
	`xTimîCh™gePîiodFromISR
(
timî_id
, 
ticks
, &
èskWokí
Ë!
pdPASS
)

418 
ªsu…
 = 
osEº‹OS
;

422 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

427 i‡(
	`xTimîCh™gePîiod
(
timî_id
, 
ticks
, 0Ë!
pdPASS
)

428 
ªsu…
 = 
osEº‹OS
;

432 
ªsu…
 = 
osEº‹OS
;

434  
ªsu…
;

435 
	}
}

443 
osSètus
 
	$osTimîSt›
 (
osTimîId
 
timî_id
)

445 
osSètus
 
ªsu…
 = 
osOK
;

446 #i‡(
c⁄figUSE_TIMERS
 == 1)

447 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

449 i‡(
	`öH™dÀrMode
()) {

450 i‡(
	`xTimîSt›FromISR
(
timî_id
, &
èskWokí
Ë!
pdPASS
) {

451  
osEº‹OS
;

453 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

456 i‡(
	`xTimîSt›
(
timî_id
, 0Ë!
pdPASS
) {

457 
ªsu…
 = 
osEº‹OS
;

461 
ªsu…
 = 
osEº‹OS
;

463  
ªsu…
;

464 
	}
}

472 
osSètus
 
	$osTimîDñëe
 (
osTimîId
 
timî_id
)

474 
osSètus
 
ªsu…
 = 
osOK
;

476 #i‡(
c⁄figUSE_TIMERS
 == 1)

478 i‡(
	`öH™dÀrMode
()) {

479  
osEº‹ISR
;

482 i‡((
	`xTimîDñëe
(
timî_id
, 
osWaôF‹evî
 )Ë!
pdPASS
) {

483 
ªsu…
 = 
osEº‹OS
;

488 
ªsu…
 = 
osEº‹OS
;

491  
ªsu…
;

492 
	}
}

502 
öt32_t
 
	$osSig«lSë
 (
osThªadId
 
thªad_id
, 
öt32_t
 
sig«l
)

504 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

505 
Ba£Ty≥_t
 
xHighîPri‹ôyTaskWokí
 = 
pdFALSE
;

506 
uöt32_t
 
ulPªviousNŸifiˇti⁄VÆue
 = 0;

508 i‡(
	`öH™dÀrMode
())

510 if(
	`xTaskGíîicNŸifyFromISR
–
thªad_id
 , (
uöt32_t
)
sig«l
, 
eSëBôs
, &
ulPªviousNŸifiˇti⁄VÆue
, &
xHighîPri‹ôyTaskWokí
 ) !
pdPASS
 )

513 
	`p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 );

515 if(
	`xTaskGíîicNŸify
–
thªad_id
 , (
uöt32_t
)
sig«l
, 
eSëBôs
, &
ulPªviousNŸifiˇti⁄VÆue
Ë!
pdPASS
 )

518  
ulPªviousNŸifiˇti⁄VÆue
;

520 (Ë
thªad_id
;

521 (Ë
sig«l
;

525 
	}
}

534 
öt32_t
 
osSig«lCÀ¨
 (
osThªadId
 
thªad_id
, i¡32_à
sig«l
);

543 
osEvít
 
	$osSig«lWaô
 (
öt32_t
 
sig«ls
, 
uöt32_t
 
mûli£c
)

545 
osEvít
 
ªt
;

547 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

549 
TickTy≥_t
 
ticks
;

551 
ªt
.
vÆue
.
sig«ls
 = 0;

552 
ticks
 = 0;

553 i‡(
mûli£c
 =
osWaôF‹evî
) {

554 
ticks
 = 
p‹tMAX_DELAY
;

556 i‡(
mûli£c
 != 0) {

557 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

558 i‡(
ticks
 == 0) {

559 
ticks
 = 1;

563 i‡(
	`öH™dÀrMode
())

565 
ªt
.
°©us
 = 
osEº‹ISR
;

569 if(
	`xTaskNŸifyWaô
–0,(
uöt32_t
Ë
sig«ls
, (uöt32_à*)&
ªt
.
vÆue
.sig«ls, 
ticks
Ë!
pdTRUE
)

571 if(
ticks
 =0Ë
ªt
.
°©us
 = 
osOK
;

572 
ªt
.
°©us
 = 
osEvítTimeout
;

574 if(
ªt
.
vÆue
.
sig«ls
 < 0)

576 
ªt
.
°©us
 = 
osEº‹VÆue
;

578 
ªt
.
°©us
 = 
osEvítSig«l
;

581 (Ë
sig«ls
;

582 (Ë
mûli£c
;

584 
ªt
.
°©us
 = 
osEº‹OS
;

587  
ªt
;

588 
	}
}

597 
osMuãxId
 
	$osMuãxCª©e
 (c⁄° 
osMuãxDef_t
 *
muãx_def
)

599 #i‡–
c⁄figUSE_MUTEXES
 == 1)

601 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

603 i‡(
muãx_def
->
c⁄åﬁblock
 !
NULL
) {

604  
	`xSem≠h‹eCª©eMuãxSètic
–
muãx_def
->
c⁄åﬁblock
 );

607  
	`xSem≠h‹eCª©eMuãx
();

609 #ñi‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

610  
	`xSem≠h‹eCª©eMuãxSètic
–
muãx_def
->
c⁄åﬁblock
 );

612  
	`xSem≠h‹eCª©eMuãx
();

615  
NULL
;

617 
	}
}

626 
osSètus
 
	$osMuãxWaô
 (
osMuãxId
 
muãx_id
, 
uöt32_t
 
mûli£c
)

628 
TickTy≥_t
 
ticks
;

629 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

632 i‡(
muãx_id
 =
NULL
) {

633  
osEº‹P¨amëî
;

636 
ticks
 = 0;

637 i‡(
mûli£c
 =
osWaôF‹evî
) {

638 
ticks
 = 
p‹tMAX_DELAY
;

640 i‡(
mûli£c
 != 0) {

641 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

642 i‡(
ticks
 == 0) {

643 
ticks
 = 1;

647 i‡(
	`öH™dÀrMode
()) {

648 i‡(
	`xSem≠h‹eTakeFromISR
(
muãx_id
, &
èskWokí
Ë!
pdTRUE
) {

649  
osEº‹OS
;

651 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

653 i‡(
	`xSem≠h‹eTake
(
muãx_id
, 
ticks
Ë!
pdTRUE
) {

654  
osEº‹OS
;

657  
osOK
;

658 
	}
}

666 
osSètus
 
	$osMuãxRñó£
 (
osMuãxId
 
muãx_id
)

668 
osSètus
 
ªsu…
 = 
osOK
;

669 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

671 i‡(
	`öH™dÀrMode
()) {

672 i‡(
	`xSem≠h‹eGiveFromISR
(
muãx_id
, &
èskWokí
Ë!
pdTRUE
) {

673  
osEº‹OS
;

675 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

677 i‡(
	`xSem≠h‹eGive
(
muãx_id
Ë!
pdTRUE
)

679 
ªsu…
 = 
osEº‹OS
;

681  
ªsu…
;

682 
	}
}

690 
osSètus
 
	$osMuãxDñëe
 (
osMuãxId
 
muãx_id
)

692 i‡(
	`öH™dÀrMode
()) {

693  
osEº‹ISR
;

696 
	`vQueueDñëe
(
muãx_id
);

698  
osOK
;

699 
	}
}

703 #i‡(
deföed
 (
osFótuª_Sem≠h‹e
) && (osFeature_Semaphore != 0))

712 
osSem≠h‹eId
 
	$osSem≠h‹eCª©e
 (c⁄° 
osSem≠h‹eDef_t
 *
£m≠h‹e_def
, 
öt32_t
 
cou¡
)

714 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

716 
osSem≠h‹eId
 
£ma
;

718 i‡(
£m≠h‹e_def
->
c⁄åﬁblock
 !
NULL
){

719 i‡(
cou¡
 == 1) {

720  
	`xSem≠h‹eCª©eBö¨ySètic
–
£m≠h‹e_def
->
c⁄åﬁblock
 );

723 #i‡(
c⁄figUSE_COUNTING_SEMAPHORES
 == 1 )

724  
	`xSem≠h‹eCª©eCou¡ögSètic
–
cou¡
, cou¡, 
£m≠h‹e_def
->
c⁄åﬁblock
 );

726  
NULL
;

731 i‡(
cou¡
 == 1) {

732 
	`vSem≠h‹eCª©eBö¨y
(
£ma
);

733  
£ma
;

736 #i‡(
c⁄figUSE_COUNTING_SEMAPHORES
 == 1 )

737  
	`xSem≠h‹eCª©eCou¡ög
(
cou¡
, count);

739  
NULL
;

743 #ñi‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

744 if(
cou¡
 == 1) {

745  
	`xSem≠h‹eCª©eBö¨ySètic
–
£m≠h‹e_def
->
c⁄åﬁblock
 );

746 
	}
}

749 #i‡(
c⁄figUSE_COUNTING_SEMAPHORES
 == 1 )

750  
xSem≠h‹eCª©eCou¡ögSètic
–
cou¡
, cou¡, 
£m≠h‹e_def
->
c⁄åﬁblock
 );

752  
	gNULL
;

756 
osSem≠h‹eId
 
	g£ma
;

758 i‡(
	gcou¡
 == 1) {

759 
vSem≠h‹eCª©eBö¨y
(
£ma
);

760  
	g£ma
;

763 #i‡(
c⁄figUSE_COUNTING_SEMAPHORES
 == 1 )

764  
xSem≠h‹eCª©eCou¡ög
(
cou¡
, count);

766  
	gNULL
;

779 
öt32_t
 
	$osSem≠h‹eWaô
 (
osSem≠h‹eId
 
£m≠h‹e_id
, 
uöt32_t
 
mûli£c
)

781 
TickTy≥_t
 
ticks
;

782 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

785 i‡(
£m≠h‹e_id
 =
NULL
) {

786  
osEº‹P¨amëî
;

789 
ticks
 = 0;

790 i‡(
mûli£c
 =
osWaôF‹evî
) {

791 
ticks
 = 
p‹tMAX_DELAY
;

793 i‡(
mûli£c
 != 0) {

794 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

795 i‡(
ticks
 == 0) {

796 
ticks
 = 1;

800 i‡(
	`öH™dÀrMode
()) {

801 i‡(
	`xSem≠h‹eTakeFromISR
(
£m≠h‹e_id
, &
èskWokí
Ë!
pdTRUE
) {

802  
osEº‹OS
;

804 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

806 i‡(
	`xSem≠h‹eTake
(
£m≠h‹e_id
, 
ticks
Ë!
pdTRUE
) {

807  
osEº‹OS
;

810  
osOK
;

811 
	}
}

819 
osSètus
 
	$osSem≠h‹eRñó£
 (
osSem≠h‹eId
 
£m≠h‹e_id
)

821 
osSètus
 
ªsu…
 = 
osOK
;

822 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

825 i‡(
	`öH™dÀrMode
()) {

826 i‡(
	`xSem≠h‹eGiveFromISR
(
£m≠h‹e_id
, &
èskWokí
Ë!
pdTRUE
) {

827  
osEº‹OS
;

829 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

832 i‡(
	`xSem≠h‹eGive
(
£m≠h‹e_id
Ë!
pdTRUE
) {

833 
ªsu…
 = 
osEº‹OS
;

837  
ªsu…
;

838 
	}
}

846 
osSètus
 
	$osSem≠h‹eDñëe
 (
osSem≠h‹eId
 
£m≠h‹e_id
)

848 i‡(
	`öH™dÀrMode
()) {

849  
osEº‹ISR
;

852 
	`vSem≠h‹eDñëe
(
£m≠h‹e_id
);

854  
osOK
;

855 
	}
}

861 #i‡(
deföed
 (
osFótuª_Poﬁ
) && (osFeature_Pool != 0))

868 
	sos_poﬁ_cb
 {

869 *
	mpoﬁ
;

870 
uöt8_t
 *
	mm¨kîs
;

871 
uöt32_t
 
	mpoﬁ_sz
;

872 
uöt32_t
 
	môem_sz
;

873 
uöt32_t
 
	mcuºítIndex
;

874 } 
	tos_poﬁ_cb_t
;

883 
osPoﬁId
 
	$osPoﬁCª©e
 (c⁄° 
osPoﬁDef_t
 *
poﬁ_def
)

885 #i‡(
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1)

886 
osPoﬁId
 
thePoﬁ
;

887 
ôemSize
 = 4 * ((
poﬁ_def
->
ôem_sz
 + 3) / 4);

888 
uöt32_t
 
i
;

891 
thePoﬁ
 = 
	`pvP‹tMÆloc
((
os_poﬁ_cb_t
));

894 i‡(
thePoﬁ
) {

895 
thePoﬁ
->
poﬁ_sz
 = 
poﬁ_def
->pool_sz;

896 
thePoﬁ
->
ôem_sz
 = 
ôemSize
;

897 
thePoﬁ
->
cuºítIndex
 = 0;

900 
thePoﬁ
->
m¨kîs
 = 
	`pvP‹tMÆloc
(
poﬁ_def
->
poﬁ_sz
);

902 i‡(
thePoﬁ
->
m¨kîs
) {

904 
thePoﬁ
->
poﬁ
 = 
	`pvP‹tMÆloc
(
poﬁ_def
->
poﬁ_sz
 * 
ôemSize
);

906 i‡(
thePoﬁ
->
poﬁ
) {

907 
i
 = 0; i < 
poﬁ_def
->
poﬁ_sz
; i++) {

908 
thePoﬁ
->
m¨kîs
[
i
] = 0;

912 
	`vP‹tFªe
(
thePoﬁ
->
m¨kîs
);

913 
	`vP‹tFªe
(
thePoﬁ
);

914 
thePoﬁ
 = 
NULL
;

918 
	`vP‹tFªe
(
thePoﬁ
);

919 
thePoﬁ
 = 
NULL
;

923  
thePoﬁ
;

926  
NULL
;

928 
	}
}

936 *
	$osPoﬁAŒoc
 (
osPoﬁId
 
poﬁ_id
)

938 
dummy
 = 0;

939 *
p
 = 
NULL
;

940 
uöt32_t
 
i
;

941 
uöt32_t
 
ödex
;

943 i‡(
	`öH™dÀrMode
()) {

944 
dummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

947 
	`vP‹tE¡îCrôiˇl
();

950 
i
 = 0; i < 
poﬁ_id
->
poﬁ_sz
; i++) {

951 
ödex
 = (
poﬁ_id
->
cuºítIndex
 + 
i
Ë%Öoﬁ_id->
poﬁ_sz
;

953 i‡(
poﬁ_id
->
m¨kîs
[
ödex
] == 0) {

954 
poﬁ_id
->
m¨kîs
[
ödex
] = 1;

955 
p
 = (*)((
uöt32_t
)(
poﬁ_id
->
poﬁ
Ë+ (
ödex
 *Öoﬁ_id->
ôem_sz
));

956 
poﬁ_id
->
cuºítIndex
 = 
ödex
;

961 i‡(
	`öH™dÀrMode
()) {

962 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
dummy
);

965 
	`vP‹tExôCrôiˇl
();

968  
p
;

969 
	}
}

977 *
	$osPoﬁCAŒoc
 (
osPoﬁId
 
poﬁ_id
)

979 *
p
 = 
	`osPoﬁAŒoc
(
poﬁ_id
);

981 i‡(
p
 !
NULL
)

983 
	`mem£t
(
p
, 0, (
poﬁ_id
->
poﬁ_sz
));

986  
p
;

987 
	}
}

996 
osSètus
 
	$osPoﬁFªe
 (
osPoﬁId
 
poﬁ_id
, *
block
)

998 
uöt32_t
 
ödex
;

1000 i‡(
poﬁ_id
 =
NULL
) {

1001  
osEº‹P¨amëî
;

1004 i‡(
block
 =
NULL
) {

1005  
osEº‹P¨amëî
;

1008 i‡(
block
 < 
poﬁ_id
->
poﬁ
) {

1009  
osEº‹P¨amëî
;

1012 
ödex
 = (
uöt32_t
)
block
 - (uöt32_t)(
poﬁ_id
->
poﬁ
);

1013 i‡(
ödex
 % 
poﬁ_id
->
ôem_sz
) {

1014  
osEº‹P¨amëî
;

1016 
ödex
 = index / 
poﬁ_id
->
ôem_sz
;

1017 i‡(
ödex
 >
poﬁ_id
->
poﬁ_sz
) {

1018  
osEº‹P¨amëî
;

1021 
poﬁ_id
->
m¨kîs
[
ödex
] = 0;

1023  
osOK
;

1024 
	}
}

1031 #i‡(
deföed
 (
osFótuª_MesßgeQ
) && (osFeature_MessageQ != 0))

1040 
osMesßgeQId
 
	$osMesßgeCª©e
 (c⁄° 
osMesßgeQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
)

1042 (Ë
thªad_id
;

1044 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1046 i‡((
queue_def
->
buf„r
 !
NULL
Ë&& (queue_def->
c⁄åﬁblock
 != NULL)) {

1047  
	`xQueueCª©eSètic
(
queue_def
->
queue_sz
, queue_def->
ôem_sz
, queue_def->
buf„r
, queue_def->
c⁄åﬁblock
);

1050  
	`xQueueCª©e
(
queue_def
->
queue_sz
, queue_def->
ôem_sz
);

1052 #ñi‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1053  
	`xQueueCª©eSètic
(
queue_def
->
queue_sz
, queue_def->
ôem_sz
, queue_def->
buf„r
, queue_def->
c⁄åﬁblock
);

1055  
	`xQueueCª©e
(
queue_def
->
queue_sz
, queue_def->
ôem_sz
);

1057 
	}
}

1067 
osSètus
 
	$osMesßgePut
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
öfo
, uöt32_à
mûli£c
)

1069 
p‹tBASE_TYPE
 
èskWokí
 = 
pdFALSE
;

1070 
TickTy≥_t
 
ticks
;

1072 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

1073 i‡(
ticks
 == 0) {

1074 
ticks
 = 1;

1077 i‡(
	`öH™dÀrMode
()) {

1078 i‡(
	`xQueueSídFromISR
(
queue_id
, &
öfo
, &
èskWokí
Ë!
pdTRUE
) {

1079  
osEº‹OS
;

1081 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

1084 i‡(
	`xQueueSíd
(
queue_id
, &
öfo
, 
ticks
Ë!
pdTRUE
) {

1085  
osEº‹OS
;

1089  
osOK
;

1090 
	}
}

1099 
osEvít
 
	$osMesßgeGë
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
mûli£c
)

1101 
p‹tBASE_TYPE
 
èskWokí
;

1102 
TickTy≥_t
 
ticks
;

1103 
osEvít
 
evít
;

1105 
evít
.
def
.
mesßge_id
 = 
queue_id
;

1106 
evít
.
vÆue
.
v
 = 0;

1108 i‡(
queue_id
 =
NULL
) {

1109 
evít
.
°©us
 = 
osEº‹P¨amëî
;

1110  
evít
;

1113 
èskWokí
 = 
pdFALSE
;

1115 
ticks
 = 0;

1116 i‡(
mûli£c
 =
osWaôF‹evî
) {

1117 
ticks
 = 
p‹tMAX_DELAY
;

1119 i‡(
mûli£c
 != 0) {

1120 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

1121 i‡(
ticks
 == 0) {

1122 
ticks
 = 1;

1126 i‡(
	`öH™dÀrMode
()) {

1127 i‡(
	`xQueueRe˚iveFromISR
(
queue_id
, &
evít
.
vÆue
.
v
, &
èskWokí
Ë=
pdTRUE
) {

1129 
evít
.
°©us
 = 
osEvítMesßge
;

1132 
evít
.
°©us
 = 
osOK
;

1134 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

1137 i‡(
	`xQueueRe˚ive
(
queue_id
, &
evít
.
vÆue
.
v
, 
ticks
Ë=
pdTRUE
) {

1139 
evít
.
°©us
 = 
osEvítMesßge
;

1142 
evít
.
°©us
 = (
ticks
 =0Ë? 
osOK
 : 
osEvítTimeout
;

1146  
evít
;

1147 
	}
}

1152 #i‡(
deföed
 (
osFótuª_MaûQ
) && (osFeature_MailQ != 0))

1155 
	sos_maûQ_cb
 {

1156 c⁄° 
osMaûQDef_t
 *
	mqueue_def
;

1157 
QueueH™dÀ_t
 
	mh™dÀ
;

1158 
osPoﬁId
 
	mpoﬁ
;

1159 } 
	tos_maûQ_cb_t
;

1168 
osMaûQId
 
	$osMaûCª©e
 (c⁄° 
osMaûQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
)

1170 #i‡(
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1)

1171 (Ë
thªad_id
;

1173 
osPoﬁDef_t
 
poﬁ_def
 = {
queue_def
->
queue_sz
, queue_def->
ôem_sz
, 
NULL
};

1177 *(
queue_def
->
cb
Ë
	`pvP‹tMÆloc
((
os_maûQ_cb
));

1179 i‡(*(
queue_def
->
cb
Ë=
NULL
) {

1180  
NULL
;

1182 (*(
queue_def
->
cb
))->queue_def = queue_def;

1185 (*(
queue_def
->
cb
))->
h™dÀ
 = 
	`xQueueCª©e
(queue_def->
queue_sz
, (*));

1188 i‡((*(
queue_def
->
cb
))->
h™dÀ
 =
NULL
) {

1189 
	`vP‹tFªe
(*(
queue_def
->
cb
));

1190  
NULL
;

1194 (*(
queue_def
->
cb
))->
poﬁ
 = 
	`osPoﬁCª©e
(&
poﬁ_def
);

1195 i‡((*(
queue_def
->
cb
))->
poﬁ
 =
NULL
) {

1197 
	`vP‹tFªe
(*(
queue_def
->
cb
));

1198  
NULL
;

1201  *(
queue_def
->
cb
);

1203  
NULL
;

1205 
	}
}

1214 *
	$osMaûAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
)

1216 (Ë
mûli£c
;

1217 *
p
;

1220 i‡(
queue_id
 =
NULL
) {

1221  
NULL
;

1224 
p
 = 
	`osPoﬁAŒoc
(
queue_id
->
poﬁ
);

1226  
p
;

1227 
	}
}

1236 *
	$osMaûCAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
)

1238 
uöt32_t
 
i
;

1239 *
p
 = 
	`osMaûAŒoc
(
queue_id
, 
mûli£c
);

1241 i‡(
p
) {

1242 
i
 = 0; i < 
queue_id
->
queue_def
->
ôem_sz
; i++) {

1243 ((
uöt8_t
 *)
p
)[
i
] = 0;

1247  
p
;

1248 
	}
}

1257 
osSètus
 
	$osMaûPut
 (
osMaûQId
 
queue_id
, *
maû
)

1259 
p‹tBASE_TYPE
 
èskWokí
;

1262 i‡(
queue_id
 =
NULL
) {

1263  
osEº‹P¨amëî
;

1266 
èskWokí
 = 
pdFALSE
;

1268 i‡(
	`öH™dÀrMode
()) {

1269 i‡(
	`xQueueSídFromISR
(
queue_id
->
h™dÀ
, &
maû
, &
èskWokí
Ë!
pdTRUE
) {

1270  
osEº‹OS
;

1272 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

1275 i‡(
	`xQueueSíd
(
queue_id
->
h™dÀ
, &
maû
, 0Ë!
pdTRUE
) {

1276  
osEº‹OS
;

1280  
osOK
;

1281 
	}
}

1290 
osEvít
 
	$osMaûGë
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
)

1292 
p‹tBASE_TYPE
 
èskWokí
;

1293 
TickTy≥_t
 
ticks
;

1294 
osEvít
 
evít
;

1296 
evít
.
def
.
maû_id
 = 
queue_id
;

1298 i‡(
queue_id
 =
NULL
) {

1299 
evít
.
°©us
 = 
osEº‹P¨amëî
;

1300  
evít
;

1303 
èskWokí
 = 
pdFALSE
;

1305 
ticks
 = 0;

1306 i‡(
mûli£c
 =
osWaôF‹evî
) {

1307 
ticks
 = 
p‹tMAX_DELAY
;

1309 i‡(
mûli£c
 != 0) {

1310 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

1311 i‡(
ticks
 == 0) {

1312 
ticks
 = 1;

1316 i‡(
	`öH™dÀrMode
()) {

1317 i‡(
	`xQueueRe˚iveFromISR
(
queue_id
->
h™dÀ
, &
evít
.
vÆue
.
p
, &
èskWokí
Ë=
pdTRUE
) {

1319 
evít
.
°©us
 = 
osEvítMaû
;

1322 
evít
.
°©us
 = 
osOK
;

1324 
	`p‹tEND_SWITCHING_ISR
(
èskWokí
);

1327 i‡(
	`xQueueRe˚ive
(
queue_id
->
h™dÀ
, &
evít
.
vÆue
.
p
, 
ticks
Ë=
pdTRUE
) {

1329 
evít
.
°©us
 = 
osEvítMaû
;

1332 
evít
.
°©us
 = (
ticks
 =0Ë? 
osOK
 : 
osEvítTimeout
;

1336  
evít
;

1337 
	}
}

1346 
osSètus
 
	$osMaûFªe
 (
osMaûQId
 
queue_id
, *
maû
)

1348 i‡(
queue_id
 =
NULL
) {

1349  
osEº‹P¨amëî
;

1352  
	`osPoﬁFªe
(
queue_id
->
poﬁ
, 
maû
);

1353 
	}
}

1362 
	$osSy°ickH™dÀr
()

1365 #i‡(
INCLUDE_xTaskGëScheduÀrSèã
 == 1 )

1366 i‡(
	`xTaskGëScheduÀrSèã
(Ë!
èskSCHEDULER_NOT_STARTED
)

1369 
	`xP‹tSysTickH™dÀr
();

1370 #i‡(
INCLUDE_xTaskGëScheduÀrSèã
 == 1 )

1373 
	}
}

1375 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

1381 
osThªadSèã
 
	$osThªadGëSèã
(
osThªadId
 
thªad_id
)

1383 
eTaskSèã
 
ThªadSèã
;

1384 
osThªadSèã
 
ªsu…
;

1386 
ThªadSèã
 = 
	`eTaskGëSèã
(
thªad_id
);

1388 
ThªadSèã
)

1390 
eRu¬ög
 :

1391 
ªsu…
 = 
osThªadRu¬ög
;

1393 
eRódy
 :

1394 
ªsu…
 = 
osThªadRódy
;

1396 
eBlocked
 :

1397 
ªsu…
 = 
osThªadBlocked
;

1399 
eSu•íded
 :

1400 
ªsu…
 = 
osThªadSu•íded
;

1402 
eDñëed
 :

1403 
ªsu…
 = 
osThªadDñëed
;

1406 
ªsu…
 = 
osThªadEº‹
;

1409  
ªsu…
;

1410 
	}
}

1413 #i‡(
INCLUDE_eTaskGëSèã
 == 1)

1419 
osSètus
 
	$osThªadIsSu•íded
(
osThªadId
 
thªad_id
)

1421 i‡(
	`eTaskGëSèã
(
thªad_id
Ë=
eSu•íded
)

1422  
osOK
;

1424  
osEº‹OS
;

1425 
	}
}

1432 
osSètus
 
	$osThªadSu•íd
 (
osThªadId
 
thªad_id
)

1434 #i‡(
INCLUDE_vTaskSu•íd
 == 1)

1435 
	`vTaskSu•íd
(
thªad_id
);

1437  
osOK
;

1439  
osEº‹Resour˚
;

1441 
	}
}

1448 
osSètus
 
	$osThªadResume
 (
osThªadId
 
thªad_id
)

1450 #i‡(
INCLUDE_vTaskSu•íd
 == 1)

1451 if(
	`öH™dÀrMode
())

1453 i‡(
	`xTaskResumeFromISR
(
thªad_id
Ë=
pdTRUE
)

1455 
	`p‹tYIELD_FROM_ISR
(
pdTRUE
);

1460 
	`vTaskResume
(
thªad_id
);

1462  
osOK
;

1464  
osEº‹Resour˚
;

1466 
	}
}

1472 
osSètus
 
	$osThªadSu•ídAŒ
 ()

1474 
	`vTaskSu•ídAŒ
();

1476  
osOK
;

1477 
	}
}

1483 
osSètus
 
	$osThªadResumeAŒ
 ()

1485 i‡(
	`xTaskResumeAŒ
(Ë=
pdTRUE
)

1486  
osOK
;

1488  
osEº‹OS
;

1490 
	}
}

1500 
osSètus
 
	$osDñayU¡û
 (
uöt32_t
 *
PªviousWakeTime
, uöt32_à
mûli£c
)

1502 #i‡
INCLUDE_vTaskDñayU¡û


1503 
TickTy≥_t
 
ticks
 = (
mûli£c
 / 
p‹tTICK_PERIOD_MS
);

1504 
	`vTaskDñayU¡û
((
TickTy≥_t
 *Ë
PªviousWakeTime
, 
ticks
 ?Åicks : 1);

1506  
osOK
;

1508 (Ë
mûli£c
;

1509 (Ë
PªviousWakeTime
;

1511  
osEº‹Resour˚
;

1513 
	}
}

1520 
osSètus
 
	$osAb‹tDñay
(
osThªadId
 
thªad_id
)

1522 #i‡
INCLUDE_xTaskAb‹tDñay


1524 
	`xTaskAb‹tDñay
(
thªad_id
);

1526  
osOK
;

1528 (Ë
thªad_id
;

1530  
osEº‹Resour˚
;

1532 
	}
}

1541 
osSètus
 
	$osThªadLi°
 (
uöt8_t
 *
buf„r
)

1543 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 ) )

1544 
	`vTaskLi°
((*)
buf„r
);

1546  
osOK
;

1547 
	}
}

1555 
osEvít
 
	$osMesßgePìk
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
mûli£c
)

1557 
TickTy≥_t
 
ticks
;

1558 
osEvít
 
evít
;

1560 
evít
.
def
.
mesßge_id
 = 
queue_id
;

1562 i‡(
queue_id
 =
NULL
) {

1563 
evít
.
°©us
 = 
osEº‹P¨amëî
;

1564  
evít
;

1567 
ticks
 = 0;

1568 i‡(
mûli£c
 =
osWaôF‹evî
) {

1569 
ticks
 = 
p‹tMAX_DELAY
;

1571 i‡(
mûli£c
 != 0) {

1572 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

1573 i‡(
ticks
 == 0) {

1574 
ticks
 = 1;

1578 i‡(
	`xQueuePìk
(
queue_id
, &
evít
.
vÆue
.
v
, 
ticks
Ë=
pdTRUE
)

1581 
evít
.
°©us
 = 
osEvítMesßge
;

1585 
evít
.
°©us
 = (
ticks
 =0Ë? 
osOK
 : 
osEvítTimeout
;

1588  
evít
;

1589 
	}
}

1596 
uöt32_t
 
	$osMesßgeWaôög
(
osMesßgeQId
 
queue_id
)

1598 i‡(
	`öH™dÀrMode
()) {

1599  
	`uxQueueMesßgesWaôögFromISR
(
queue_id
);

1603  
	`uxQueueMesßgesWaôög
(
queue_id
);

1605 
	}
}

1612 
uöt32_t
 
	$osMesßgeAvaûabÀS∑˚
(
osMesßgeQId
 
queue_id
)

1614  
	`uxQueueS∑˚sAvaûabÀ
(
queue_id
);

1615 
	}
}

1622 
osSètus
 
	$osMesßgeDñëe
 (
osMesßgeQId
 
queue_id
)

1624 i‡(
	`öH™dÀrMode
()) {

1625  
osEº‹ISR
;

1628 
	`vQueueDñëe
(
queue_id
);

1630  
osOK
;

1631 
	}
}

1638 
osMuãxId
 
	$osRecursiveMuãxCª©e
 (c⁄° 
osMuãxDef_t
 *
muãx_def
)

1640 #i‡(
c⁄figUSE_RECURSIVE_MUTEXES
 == 1)

1641 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1643 i‡(
muãx_def
->
c⁄åﬁblock
 !
NULL
){

1644  
	`xSem≠h‹eCª©eRecursiveMuãxSètic
–
muãx_def
->
c⁄åﬁblock
 );

1647  
	`xSem≠h‹eCª©eRecursiveMuãx
();

1649 #ñi‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1650  
	`xSem≠h‹eCª©eRecursiveMuãxSètic
–
muãx_def
->
c⁄åﬁblock
 );

1652  
	`xSem≠h‹eCª©eRecursiveMuãx
();

1655  
NULL
;

1657 
	}
}

1664 
osSètus
 
	$osRecursiveMuãxRñó£
 (
osMuãxId
 
muãx_id
)

1666 #i‡(
c⁄figUSE_RECURSIVE_MUTEXES
 == 1)

1667 
osSètus
 
ªsu…
 = 
osOK
;

1669 i‡(
	`xSem≠h‹eGiveRecursive
(
muãx_id
Ë!
pdTRUE
)

1671 
ªsu…
 = 
osEº‹OS
;

1673  
ªsu…
;

1675  
osEº‹Resour˚
;

1677 
	}
}

1685 
osSètus
 
	$osRecursiveMuãxWaô
 (
osMuãxId
 
muãx_id
, 
uöt32_t
 
mûli£c
)

1687 #i‡(
c⁄figUSE_RECURSIVE_MUTEXES
 == 1)

1688 
TickTy≥_t
 
ticks
;

1690 i‡(
muãx_id
 =
NULL
)

1692  
osEº‹P¨amëî
;

1695 
ticks
 = 0;

1696 i‡(
mûli£c
 =
osWaôF‹evî
)

1698 
ticks
 = 
p‹tMAX_DELAY
;

1700 i‡(
mûli£c
 != 0)

1702 
ticks
 = 
mûli£c
 / 
p‹tTICK_PERIOD_MS
;

1703 i‡(
ticks
 == 0)

1705 
ticks
 = 1;

1709 i‡(
	`xSem≠h‹eTakeRecursive
(
muãx_id
, 
ticks
Ë!
pdTRUE
)

1711  
osEº‹OS
;

1713  
osOK
;

1715  
osEº‹Resour˚
;

1717 
	}
}

1724 
uöt32_t
 
	$osSem≠h‹eGëCou¡
(
osSem≠h‹eId
 
£m≠h‹e_id
)

1726  
	`uxSem≠h‹eGëCou¡
(
£m≠h‹e_id
);

1727 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h

56 
	~"FªeRTOS.h
"

57 
	~"èsk.h
"

58 
	~"timîs.h
"

59 
	~"queue.h
"

60 
	~"£mphr.h
"

61 
	~"evít_groups.h
"

140 #i‚de‡
_CMSIS_OS_H


141 
	#_CMSIS_OS_H


	)

144 
	#osCMSIS
 0x10002

145 

	)

147 
	#osCMSIS_KERNEL
 0x10000

148 

	)

150 
	#osKî√lSy°emId
 "KERNEL V1.00"

151 

	)

153 
	#osFótuª_MaöThªad
 1

154 
	#osFótuª_Poﬁ
 1

155 
	#osFótuª_MaûQ
 1

156 
	#osFótuª_MesßgeQ
 1

157 
	#osFótuª_Sig«ls
 8

158 
	#osFótuª_Sem≠h‹e
 1

159 
	#osFótuª_Waô
 0

160 
	#osFótuª_SysTick
 1

161 

	)

162 #ifde‡ 
__˝lu•lus


173 
osPri‹ôyIdÀ
 = -3,

174 
osPri‹ôyLow
 = -2,

175 
osPri‹ôyBñowN‹mÆ
 = -1,

176 
osPri‹ôyN‹mÆ
 = 0,

177 
osPri‹ôyAboveN‹mÆ
 = +1,

178 
osPri‹ôyHigh
 = +2,

179 
osPri‹ôyRó…ime
 = +3,

180 
osPri‹ôyEº‹
 = 0x84

181 } 
	tosPri‹ôy
;

185 
	#osWaôF‹evî
 0xFFFFFFFF

186 

	)

190 
osOK
 = 0,

191 
osEvítSig«l
 = 0x08,

192 
osEvítMesßge
 = 0x10,

193 
osEvítMaû
 = 0x20,

194 
osEvítTimeout
 = 0x40,

195 
osEº‹P¨amëî
 = 0x80,

196 
osEº‹Resour˚
 = 0x81,

197 
osEº‹TimeoutResour˚
 = 0xC1,

198 
osEº‹ISR
 = 0x82,

199 
osEº‹ISRRecursive
 = 0x83,

200 
osEº‹Pri‹ôy
 = 0x84,

201 
osEº‹NoMem‹y
 = 0x85,

202 
osEº‹VÆue
 = 0x86,

203 
osEº‹OS
 = 0xFF,

204 
os_°©us_ª£rved
 = 0x7FFFFFFF

205 } 
	tosSètus
;

207 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

210 
osThªadRu¬ög
 = 0x0,

211 
osThªadRódy
 = 0x1 ,

212 
osThªadBlocked
 = 0x2,

213 
osThªadSu•íded
 = 0x3,

214 
osThªadDñëed
 = 0x4,

215 
osThªadEº‹
 = 0x7FFFFFFF

216 } 
	tosThªadSèã
;

222 
osTimîOn˚
 = 0,

223 
osTimîPîiodic
 = 1

224 } 
	tos_timî_ty≥
;

228 (*
os_±hªad
Ë(c⁄° *
	t¨gumít
);

232 (*
os_±imî
Ë(c⁄° *
	t¨gumít
);

238 
TaskH™dÀ_t
 
	tosThªadId
;

242 
TimîH™dÀ_t
 
	tosTimîId
;

246 
Sem≠h‹eH™dÀ_t
 
	tosMuãxId
;

250 
Sem≠h‹eH™dÀ_t
 
	tosSem≠h‹eId
;

254 
os_poﬁ_cb
 *
	tosPoﬁId
;

258 
QueueH™dÀ_t
 
	tosMesßgeQId
;

262 
os_maûQ_cb
 *
	tosMaûQId
;

265 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

267 
SèticTask_t
 
	tosSèticThªadDef_t
;

268 
SèticTimî_t
 
	tosSèticTimîDef_t
;

269 
SèticSem≠h‹e_t
 
	tosSèticMuãxDef_t
;

270 
SèticSem≠h‹e_t
 
	tosSèticSem≠h‹eDef_t
;

271 
SèticQueue_t
 
	tosSèticMesßgeQDef_t
;

280 
	sos_thªad_def
 {

281 *
«me
;

282 
os_±hªad
 
±hªad
;

283 
osPri‹ôy
 
çri‹ôy
;

284 
uöt32_t
 
ö°™˚s
;

285 
uöt32_t
 
°acksize
;

286 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

287 
uöt32_t
 *
buf„r
;

288 
osSèticThªadDef_t
 *
c⁄åﬁblock
;

290 } 
	tosThªadDef_t
;

294 
	sos_timî_def
 {

295 
os_±imî
 
±imî
;

296 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

297 
osSèticTimîDef_t
 *
c⁄åﬁblock
;

299 } 
	tosTimîDef_t
;

303 
	sos_muãx_def
 {

304 
uöt32_t
 
dummy
;

305 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

306 
osSèticMuãxDef_t
 *
c⁄åﬁblock
;

308 } 
	tosMuãxDef_t
;

312 
	sos_£m≠h‹e_def
 {

313 
uöt32_t
 
dummy
;

314 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

315 
osSèticSem≠h‹eDef_t
 *
c⁄åﬁblock
;

317 } 
	tosSem≠h‹eDef_t
;

321 
	sos_poﬁ_def
 {

322 
uöt32_t
 
poﬁ_sz
;

323 
uöt32_t
 
ôem_sz
;

324 *
poﬁ
;

325 } 
	tosPoﬁDef_t
;

329 
	sos_mesßgeQ_def
 {

330 
uöt32_t
 
queue_sz
;

331 
uöt32_t
 
ôem_sz
;

332 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

333 
uöt8_t
 *
buf„r
;

334 
osSèticMesßgeQDef_t
 *
c⁄åﬁblock
;

337 } 
	tosMesßgeQDef_t
;

341 
	sos_maûQ_def
 {

342 
uöt32_t
 
queue_sz
;

343 
uöt32_t
 
ôem_sz
;

344 
os_maûQ_cb
 **
cb
;

345 } 
	tosMaûQDef_t
;

351 
osSètus
 
°©us
;

353 
uöt32_t
 
v
;

354 *
p
;

355 
öt32_t
 
sig«ls
;

356 } 
vÆue
;

358 
osMaûQId
 
maû_id
;

359 
osMesßgeQId
 
mesßge_id
;

360 } 
def
;

361 } 
	tosEvít
;

369 
osSètus
 
osKî√lInôülize
 ();

374 
osSètus
 
osKî√lSèπ
 ();

379 
öt32_t
 
osKî√lRu¬ög
();

381 #i‡(
deföed
 (
osFótuª_SysTick
) && (osFeature_SysTick != 0))

386 
uöt32_t
 
osKî√lSysTick
 ();

390 
	#osKî√lSysTickFªquícy
 (
c⁄figTICK_RATE_HZ
)

	)

395 
	#osKî√lSysTickMi¸oSec
(
mi¸o£c
Ë(((
uöt64_t
)mi¸o£¯* (
osKî√lSysTickFªquícy
)Ë/ 1000000)

	)

408 #i‡
deföed
 (
osObje˘sExã∫Æ
)

409 
	#osThªadDef
(
«me
, 
thªad
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
) \

410 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me


	)

413 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

414 
	#osThªadDef
(
«me
, 
thªad
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
) \

415 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me
 = \

416 { #«me, (
thªad
), (
¥i‹ôy
), (
ö°™˚s
), (
°acksz
), 
NULL
, NULL }

	)

418 
	#osThªadSèticDef
(
«me
, 
thªad
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
, 
buf„r
, 
c⁄åﬁ
) \

419 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me
 = \

420 { #«me, (
thªad
), (
¥i‹ôy
), (
ö°™˚s
), (
°acksz
), (
buf„r
), (
c⁄åﬁ
Ë}

	)

423 
	#osThªadDef
(
«me
, 
thªad
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
) \

424 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me
 = \

425 { #«me, (
thªad
), (
¥i‹ôy
), (
ö°™˚s
), (
°acksz
)}

	)

433 
	#osThªad
(
«me
) \

434 &
os_thªad_def_
##
«me


	)

441 
osThªadId
 
osThªadCª©e
 (c⁄° 
osThªadDef_t
 *
thªad_def
, *
¨gumít
);

446 
osThªadId
 
osThªadGëId
 ();

452 
osSètus
 
osThªadTîmö©e
 (
osThªadId
 
thªad_id
);

457 
osSètus
 
osThªadYõld
 ();

464 
osSètus
 
osThªadSëPri‹ôy
 (
osThªadId
 
thªad_id
, 
osPri‹ôy
 
¥i‹ôy
);

470 
osPri‹ôy
 
osThªadGëPri‹ôy
 (
osThªadId
 
thªad_id
);

478 
osSètus
 
osDñay
 (
uöt32_t
 
mûli£c
);

480 #i‡(
deföed
 (
osFótuª_Waô
) && (osFeature_Wait != 0))

486 
osEvít
 
osWaô
 (
uöt32_t
 
mûli£c
);

497 #i‡
deföed
 (
osObje˘sExã∫Æ
)

498 
	#osTimîDef
(
«me
, 
fun˘i⁄
) \

499 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me


	)

502 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

503 
	#osTimîDef
(
«me
, 
fun˘i⁄
) \

504 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me
 = \

505 { (
fun˘i⁄
), 
NULL
 }

	)

507 
	#osTimîSèticDef
(
«me
, 
fun˘i⁄
, 
c⁄åﬁ
) \

508 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me
 = \

509 { (
fun˘i⁄
), (
c⁄åﬁ
Ë}

	)

511 
	#osTimîDef
(
«me
, 
fun˘i⁄
) \

512 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me
 = \

513 { (
fun˘i⁄
Ë}

	)

521 
	#osTimî
(
«me
) \

522 &
os_timî_def_
##
«me


	)

530 
osTimîId
 
osTimîCª©e
 (c⁄° 
osTimîDef_t
 *
timî_def
, 
os_timî_ty≥
 
ty≥
, *
¨gumít
);

537 
osSètus
 
osTimîSèπ
 (
osTimîId
 
timî_id
, 
uöt32_t
 
mûli£c
);

543 
osSètus
 
osTimîSt›
 (
osTimîId
 
timî_id
);

549 
osSètus
 
osTimîDñëe
 (
osTimîId
 
timî_id
);

559 
öt32_t
 
osSig«lSë
 (
osThªadId
 
thªad_id
, i¡32_à
sig«ls
);

566 
öt32_t
 
osSig«lCÀ¨
 (
osThªadId
 
thªad_id
, i¡32_à
sig«ls
);

573 
osEvít
 
osSig«lWaô
 (
öt32_t
 
sig«ls
, 
uöt32_t
 
mûli£c
);

582 #i‡
deföed
 (
osObje˘sExã∫Æ
)

583 
	#osMuãxDef
(
«me
) \

584 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me


	)

587 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

588 
	#osMuãxDef
(
«me
) \

589 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me
 = { 0, 
NULL
 }

	)

591 
	#osMuãxSèticDef
(
«me
, 
c⁄åﬁ
) \

592 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me
 = { 0, (
c⁄åﬁ
Ë}

	)

594 
	#osMuãxDef
(
«me
) \

595 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me
 = { 0 }

	)

605 
	#osMuãx
(
«me
) \

606 &
os_muãx_def_
##
«me


	)

612 
osMuãxId
 
osMuãxCª©e
 (c⁄° 
osMuãxDef_t
 *
muãx_def
);

619 
osSètus
 
osMuãxWaô
 (
osMuãxId
 
muãx_id
, 
uöt32_t
 
mûli£c
);

625 
osSètus
 
osMuãxRñó£
 (
osMuãxId
 
muãx_id
);

631 
osSètus
 
osMuãxDñëe
 (
osMuãxId
 
muãx_id
);

636 #i‡(
deföed
 (
osFótuª_Sem≠h‹e
) && (osFeature_Semaphore != 0))

642 #i‡
deföed
 (
osObje˘sExã∫Æ
)

643 
	#osSem≠h‹eDef
(
«me
) \

644 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me


	)

647 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

648 
	#osSem≠h‹eDef
(
«me
) \

649 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me
 = { 0, 
NULL
 }

	)

651 
	#osSem≠h‹eSèticDef
(
«me
, 
c⁄åﬁ
) \

652 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me
 = { 0, (
c⁄åﬁ
Ë}

	)

655 
	#osSem≠h‹eDef
(
«me
) \

656 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me
 = { 0 }

	)

664 
	#osSem≠h‹e
(
«me
) \

665 &
os_£m≠h‹e_def_
##
«me


	)

672 
osSem≠h‹eId
 
osSem≠h‹eCª©e
 (c⁄° 
osSem≠h‹eDef_t
 *
£m≠h‹e_def
, 
öt32_t
 
cou¡
);

679 
öt32_t
 
osSem≠h‹eWaô
 (
osSem≠h‹eId
 
£m≠h‹e_id
, 
uöt32_t
 
mûli£c
);

685 
osSètus
 
osSem≠h‹eRñó£
 (
osSem≠h‹eId
 
£m≠h‹e_id
);

691 
osSètus
 
osSem≠h‹eDñëe
 (
osSem≠h‹eId
 
£m≠h‹e_id
);

698 #i‡(
deföed
 (
osFótuª_Poﬁ
) && (osFeature_Pool != 0))

706 #i‡
deföed
 (
osObje˘sExã∫Æ
)

707 
	#osPoﬁDef
(
«me
, 
no
, 
ty≥
) \

708 c⁄° 
osPoﬁDef_t
 
os_poﬁ_def_
##
«me


	)

710 
	#osPoﬁDef
(
«me
, 
no
, 
ty≥
) \

711 c⁄° 
osPoﬁDef_t
 
os_poﬁ_def_
##
«me
 = \

712 { (
no
), (
ty≥
), 
NULL
 }

	)

719 
	#osPoﬁ
(
«me
) \

720 &
os_poﬁ_def_
##
«me


	)

726 
osPoﬁId
 
osPoﬁCª©e
 (c⁄° 
osPoﬁDef_t
 *
poﬁ_def
);

732 *
osPoﬁAŒoc
 (
osPoﬁId
 
poﬁ_id
);

738 *
osPoﬁCAŒoc
 (
osPoﬁId
 
poﬁ_id
);

745 
osSètus
 
osPoﬁFªe
 (
osPoﬁId
 
poﬁ_id
, *
block
);

752 #i‡(
deföed
 (
osFótuª_MesßgeQ
) && (osFeature_MessageQ != 0))

760 #i‡
deföed
 (
osObje˘sExã∫Æ
)

761 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
) \

762 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me


	)

764 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

765 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
) \

766 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me
 = \

767 { (
queue_sz
),  (
ty≥
), 
NULL
, NULL }

	)

769 
	#osMesßgeQSèticDef
(
«me
, 
queue_sz
, 
ty≥
, 
buf„r
, 
c⁄åﬁ
) \

770 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me
 = \

771 { (
queue_sz
),  (
ty≥
Ë, (
buf„r
), (
c⁄åﬁ
)}

	)

773 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
) \

774 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me
 = \

775 { (
queue_sz
),  (
ty≥
Ë}

	)

784 
	#osMesßgeQ
(
«me
) \

785 &
os_mesßgeQ_def_
##
«me


	)

792 
osMesßgeQId
 
osMesßgeCª©e
 (c⁄° 
osMesßgeQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
);

800 
osSètus
 
osMesßgePut
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
öfo
, uöt32_à
mûli£c
);

807 
osEvít
 
osMesßgeGë
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

814 #i‡(
deföed
 (
osFótuª_MaûQ
) && (osFeature_MailQ != 0))

822 #i‡
deföed
 (
osObje˘sExã∫Æ
)

823 
	#osMaûQDef
(
«me
, 
queue_sz
, 
ty≥
) \

824 
os_maûQ_cb
 *
os_maûQ_cb_
##
«me
 \

825 
osMaûQDef_t
 
os_maûQ_def_
##
«me


	)

827 
	#osMaûQDef
(
«me
, 
queue_sz
, 
ty≥
) \

828 
os_maûQ_cb
 *
os_maûQ_cb_
##
«me
; \

829 c⁄° 
osMaûQDef_t
 
os_maûQ_def_
##
«me
 = \

830 { (
queue_sz
),  (
ty≥
), (&
os_maûQ_cb_
##
«me
Ë}

	)

837 
	#osMaûQ
(
«me
) \

838 &
os_maûQ_def_
##
«me


	)

845 
osMaûQId
 
osMaûCª©e
 (c⁄° 
osMaûQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
);

852 *
osMaûAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

859 *
osMaûCAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

866 
osSètus
 
osMaûPut
 (
osMaûQId
 
queue_id
, *
maû
);

873 
osEvít
 
osMaûGë
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

880 
osSètus
 
osMaûFªe
 (
osMaûQId
 
queue_id
, *
maû
);

890 
osSy°ickH™dÀr
();

892 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

898 
osThªadSèã
 
osThªadGëSèã
(
osThªadId
 
thªad_id
);

901 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

908 
osSètus
 
osThªadIsSu•íded
(
osThªadId
 
thªad_id
);

917 
osSètus
 
osThªadSu•íd
 (
osThªadId
 
thªad_id
);

924 
osSètus
 
osThªadResume
 (
osThªadId
 
thªad_id
);

930 
osSètus
 
osThªadSu•ídAŒ
 ();

936 
osSètus
 
osThªadResumeAŒ
 ();

946 
osSètus
 
osDñayU¡û
 (
uöt32_t
 *
PªviousWakeTime
, uöt32_à
mûli£c
);

953 
osSètus
 
osAb‹tDñay
(
osThªadId
 
thªad_id
);

962 
osSètus
 
osThªadLi°
 (
uöt8_t
 *
buf„r
);

970 
osEvít
 
osMesßgePìk
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

977 
uöt32_t
 
osMesßgeWaôög
(
osMesßgeQId
 
queue_id
);

984 
uöt32_t
 
osMesßgeAvaûabÀS∑˚
(
osMesßgeQId
 
queue_id
);

991 
osSètus
 
osMesßgeDñëe
 (
osMesßgeQId
 
queue_id
);

998 
osMuãxId
 
osRecursiveMuãxCª©e
 (c⁄° 
osMuãxDef_t
 *
muãx_def
);

1005 
osSètus
 
osRecursiveMuãxRñó£
 (
osMuãxId
 
muãx_id
);

1013 
osSètus
 
osRecursiveMuãxWaô
 (
osMuãxId
 
muãx_id
, 
uöt32_t
 
mûli£c
);

1020 
uöt32_t
 
osSem≠h‹eGëCou¡
(
osSem≠h‹eId
 
£m≠h‹e_id
);

1022 #ifde‡ 
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/croutine.c

28 
	~"FªeRTOS.h
"

29 
	~"èsk.h
"

30 
	~"¸outöe.h
"

33 #if–
c⁄figUSE_CO_ROUTINES
 != 0 )

39 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


40 

	)

45 
Li°_t
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

46 
Li°_t
 
	gxDñayedCoRoutöeLi°1
;

47 
Li°_t
 
	gxDñayedCoRoutöeLi°2
;

48 
Li°_t
 * 
	gpxDñayedCoRoutöeLi°
;

49 
Li°_t
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
;

50 
Li°_t
 
	gxPídögRódyCoRoutöeLi°
;

53 
CRCB_t
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

54 
UBa£Ty≥_t
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

55 
TickTy≥_t
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

58 
	#c‹INITIAL_STATE
 ( 0 )

	)

67 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

69 if–
pxCRCB
->
uxPri‹ôy
 > 
uxT›CoRoutöeRódyPri‹ôy
 ) \

71 
uxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

73 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

74 }

	)

80 
¥vInôüli£CoRoutöeLi°s
( );

88 
¥vCheckPídögRódyLi°
( );

98 
¥vCheckDñayedLi°
( );

102 
Ba£Ty≥_t
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 )

104 
Ba£Ty≥_t
 
xRëu∫
;

105 
CRCB_t
 *
pxCoRoutöe
;

108 
pxCoRoutöe
 = ( 
CRCB_t
 * ) 
	`pvP‹tMÆloc
( ( CRCB_t ) );

109 if–
pxCoRoutöe
 )

113 if–
pxCuºítCoRoutöe
 =
NULL
 )

115 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

116 
	`¥vInôüli£CoRoutöeLi°s
();

120 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

122 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

126 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

127 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

128 
pxCoRoutöe
->
uxIndex
 = uxIndex;

129 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

132 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

133 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

138 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

139 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

142 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 ) );

146 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

148 
xRëu∫
 = 
pdPASS
;

152 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

155  
xRëu∫
;

156 
	}
}

159 
	$vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 )

161 
TickTy≥_t
 
xTimeToWake
;

165 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

170 –Ë
	`uxLi°Remove
––
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

173 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

175 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

179 
	`vLi°In£π
––
Li°_t
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

185 
	`vLi°In£π
––
Li°_t
 * ) 
pxDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

188 if–
pxEvítLi°
 )

192 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

194 
	}
}

197 
	$¥vCheckPídögRódyLi°
( )

202  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

204 
CRCB_t
 *
pxUnblockedCRCB
;

207 
	`p‹tDISABLE_INTERRUPTS
();

209 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–(&
xPídögRódyCoRoutöeLi°
) );

210 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

212 
	`p‹tENABLE_INTERRUPTS
();

214 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

215 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

217 
	}
}

220 
	$¥vCheckDñayedLi°
( )

222 
CRCB_t
 *
pxCRCB
;

224 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

225  
xPas£dTicks
 )

227 
xCoRoutöeTickCou¡
++;

228 
xPas£dTicks
--;

231 if–
xCoRoutöeTickCou¡
 == 0 )

233 
Li°_t
 * 
pxTemp
;

237 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

238 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

239 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

243  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

245 
pxCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

247 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

253 
	`p‹tDISABLE_INTERRUPTS
();

260 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

263 if–
pxCRCB
->
xEvítLi°Iãm
.
pxC⁄èöî
 )

265 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

268 
	`p‹tENABLE_INTERRUPTS
();

270 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

274 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

275 
	}
}

278 
	$vCoRoutöeScheduÀ
( )

281 
	`¥vCheckPídögRódyLi°
();

284 
	`¥vCheckDñayedLi°
();

287  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

289 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

294 --
uxT›CoRoutöeRódyPri‹ôy
;

299 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

302 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

305 
	}
}

308 
	$¥vInôüli£CoRoutöeLi°s
( )

310 
UBa£Ty≥_t
 
uxPri‹ôy
;

312  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

314 
	`vLi°Inôüli£
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

317 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°1
 );

318 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°2
 );

319 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xPídögRódyCoRoutöeLi°
 );

323 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

324 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

325 
	}
}

328 
Ba£Ty≥_t
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 )

330 
CRCB_t
 *
pxUnblockedCRCB
;

331 
Ba£Ty≥_t
 
xRëu∫
;

336 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

337 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

338 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

340 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

342 
xRëu∫
 = 
pdTRUE
;

346 
xRëu∫
 = 
pdFALSE
;

349  
xRëu∫
;

350 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c

29 
	~<°dlib.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"èsk.h
"

39 
	~"timîs.h
"

40 
	~"evít_groups.h
"

46 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


51 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

52 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x0100U

	)

53 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x0200U

	)

54 
	#evítWAIT_FOR_ALL_BITS
 0x0400U

	)

55 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff00U

	)

57 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x01000000UL

	)

58 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x02000000UL

	)

59 
	#evítWAIT_FOR_ALL_BITS
 0x04000000UL

	)

60 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff000000UL

	)

63 
	sEvítGroupDef_t


65 
EvítBôs_t
 
	muxEvítBôs
;

66 
Li°_t
 
	mxTasksWaôögF‹Bôs
;

68 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

69 
UBa£Ty≥_t
 
	muxEvítGroupNumbî
;

72 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

73 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

75 } 
	tEvítGroup_t
;

87 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 ) 
PRIVILEGED_FUNCTION
;

91 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

93 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 )

95 
EvítGroup_t
 *
pxEvítBôs
;

98 
	`c⁄figASSERT
–
pxEvítGroupBuf„r
 );

100 #if–
c⁄figASSERT_DEFINED
 == 1 )

105 vﬁ©ûê
size_t
 
xSize
 = –
SèticEvítGroup_t
 );

106 
	`c⁄figASSERT
–
xSize
 =–
EvítGroup_t
 ) );

111 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
pxEvítGroupBuf„r
;

113 if–
pxEvítBôs
 !
NULL
 )

115 
pxEvítBôs
->
uxEvítBôs
 = 0;

116 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

118 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

123 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

127 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

134 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

137  
pxEvítBôs
;

138 
	}
}

143 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

145 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©e
( )

147 
EvítGroup_t
 *
pxEvítBôs
;

162 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
	`pvP‹tMÆloc
( ( EventGroup_t ) );

164 if–
pxEvítBôs
 !
NULL
 )

166 
pxEvítBôs
->
uxEvítBôs
 = 0;

167 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

169 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

174 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

178 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

182 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

185  
pxEvítBôs
;

186 
	}
}

191 
EvítBôs_t
 
	$xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 )

193 
EvítBôs_t
 
uxOrigöÆBôVÆue
, 
uxRëu∫
;

194 
EvítGroup_t
 *
pxEvítBôs
 = 
xEvítGroup
;

195 
Ba£Ty≥_t
 
xAÃódyYõlded
;

196 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

198 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

199 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

200 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

202 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

206 
	`vTaskSu•ídAŒ
();

208 
uxOrigöÆBôVÆue
 = 
pxEvítBôs
->
uxEvítBôs
;

210 –Ë
	`xEvítGroupSëBôs
–
xEvítGroup
, 
uxBôsToSë
 );

212 if–––
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 ) & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

215 
uxRëu∫
 = ( 
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 );

219 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

221 
xTicksToWaô
 = 0;

225 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

227 
	`åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 );

232 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
evítCLEAR_EVENTS_ON_EXIT_BIT
 | 
evítWAIT_FOR_ALL_BITS
 ), 
xTicksToWaô
 );

238 
uxRëu∫
 = 0;

244 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

245 
xTimeoutOccuºed
 = 
pdTRUE
;

249 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

251 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

253 if–
xAÃódyYõlded
 =
pdFALSE
 )

255 
	`p‹tYIELD_WITHIN_API
();

259 
	`mtCOVERAGE_TEST_MARKER
();

266 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

268 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

271 
	`èskENTER_CRITICAL
();

273 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

279 if––
uxRëu∫
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

281 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

285 
	`mtCOVERAGE_TEST_MARKER
();

288 
	`èskEXIT_CRITICAL
();

290 
xTimeoutOccuºed
 = 
pdTRUE
;

299 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

302 
	`åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

305 –Ë
xTimeoutOccuºed
;

307  
uxRëu∫
;

308 
	}
}

311 
EvítBôs_t
 
	$xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 )

313 
EvítGroup_t
 *
pxEvítBôs
 = 
xEvítGroup
;

314 
EvítBôs_t
 
uxRëu∫
, 
uxC⁄åﬁBôs
 = 0;

315 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
, 
xAÃódyYõlded
;

316 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

320 
	`c⁄figASSERT
–
xEvítGroup
 );

321 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

322 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

323 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

325 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

329 
	`vTaskSu•ídAŒ
();

331 c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
 = 
pxEvítBôs
->
uxEvítBôs
;

334 
xWaôC⁄dôi⁄Më
 = 
	`¥vTe°WaôC⁄dôi⁄
–
uxCuºítEvítBôs
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 );

336 if–
xWaôC⁄dôi⁄Më
 !
pdFALSE
 )

340 
uxRëu∫
 = 
uxCuºítEvítBôs
;

341 
xTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

344 if–
xCÀ¨OnExô
 !
pdFALSE
 )

346 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

350 
	`mtCOVERAGE_TEST_MARKER
();

353 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

357 
uxRëu∫
 = 
uxCuºítEvítBôs
;

358 
xTimeoutOccuºed
 = 
pdTRUE
;

366 if–
xCÀ¨OnExô
 !
pdFALSE
 )

368 
uxC⁄åﬁBôs
 |
evítCLEAR_EVENTS_ON_EXIT_BIT
;

372 
	`mtCOVERAGE_TEST_MARKER
();

375 if–
xWaôF‹AŒBôs
 !
pdFALSE
 )

377 
uxC⁄åﬁBôs
 |
evítWAIT_FOR_ALL_BITS
;

381 
	`mtCOVERAGE_TEST_MARKER
();

387 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
uxC⁄åﬁBôs
 ), 
xTicksToWaô
 );

392 
uxRëu∫
 = 0;

394 
	`åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 );

397 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

399 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

401 if–
xAÃódyYõlded
 =
pdFALSE
 )

403 
	`p‹tYIELD_WITHIN_API
();

407 
	`mtCOVERAGE_TEST_MARKER
();

414 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

416 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

418 
	`èskENTER_CRITICAL
();

421 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

425 if–
	`¥vTe°WaôC⁄dôi⁄
–
uxRëu∫
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 ) !
pdFALSE
 )

427 if–
xCÀ¨OnExô
 !
pdFALSE
 )

429 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

433 
	`mtCOVERAGE_TEST_MARKER
();

438 
	`mtCOVERAGE_TEST_MARKER
();

440 
xTimeoutOccuºed
 = 
pdTRUE
;

442 
	`èskEXIT_CRITICAL
();

450 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

452 
	`åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

455 –Ë
xTimeoutOccuºed
;

457  
uxRëu∫
;

458 
	}
}

461 
EvítBôs_t
 
	$xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

463 
EvítGroup_t
 *
pxEvítBôs
 = 
xEvítGroup
;

464 
EvítBôs_t
 
uxRëu∫
;

468 
	`c⁄figASSERT
–
xEvítGroup
 );

469 
	`c⁄figASSERT
––
uxBôsToCÀ¨
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

471 
	`èskENTER_CRITICAL
();

473 
	`åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

477 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

480 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

482 
	`èskEXIT_CRITICAL
();

484  
uxRëu∫
;

485 
	}
}

488 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

490 
Ba£Ty≥_t
 
	$xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

492 
Ba£Ty≥_t
 
xRëu∫
;

494 
	`åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

495 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToCÀ¨
, 
NULL
 );

497  
xRëu∫
;

498 
	}
}

503 
EvítBôs_t
 
	$xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

505 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

506 
EvítGroup_t
 c⁄° * c⁄° 
pxEvítBôs
 = 
xEvítGroup
;

507 
EvítBôs_t
 
uxRëu∫
;

509 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

511 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

513 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

515  
uxRëu∫
;

516 
	}
}

519 
EvítBôs_t
 
	$xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 )

521 
Li°Iãm_t
 *
pxLi°Iãm
, *
pxNext
;

522 
Li°Iãm_t
 c⁄° *
pxLi°End
;

523 
Li°_t
 c⁄° * 
pxLi°
;

524 
EvítBôs_t
 
uxBôsToCÀ¨
 = 0, 
uxBôsWaôedF‹
, 
uxC⁄åﬁBôs
;

525 
EvítGroup_t
 *
pxEvítBôs
 = 
xEvítGroup
;

526 
Ba£Ty≥_t
 
xM©chFound
 = 
pdFALSE
;

530 
	`c⁄figASSERT
–
xEvítGroup
 );

531 
	`c⁄figASSERT
––
uxBôsToSë
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

533 
pxLi°
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

534 
pxLi°End
 = 
	`li°GET_END_MARKER
–
pxLi°
 );

535 
	`vTaskSu•ídAŒ
();

537 
	`åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 );

539 
pxLi°Iãm
 = 
	`li°GET_HEAD_ENTRY
–
pxLi°
 );

542 
pxEvítBôs
->
uxEvítBôs
 |
uxBôsToSë
;

545  
pxLi°Iãm
 !
pxLi°End
 )

547 
pxNext
 = 
	`li°GET_NEXT
–
pxLi°Iãm
 );

548 
uxBôsWaôedF‹
 = 
	`li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 );

549 
xM©chFound
 = 
pdFALSE
;

552 
uxC⁄åﬁBôs
 = 
uxBôsWaôedF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
;

553 
uxBôsWaôedF‹
 &~
evítEVENT_BITS_CONTROL_BYTES
;

555 if––
uxC⁄åﬁBôs
 & 
evítWAIT_FOR_ALL_BITS
 ) =–
EvítBôs_t
 ) 0 )

558 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) !–
EvítBôs_t
 ) 0 )

560 
xM©chFound
 = 
pdTRUE
;

564 
	`mtCOVERAGE_TEST_MARKER
();

567 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) == uxBitsWaitedFor )

570 
xM©chFound
 = 
pdTRUE
;

577 if–
xM©chFound
 !
pdFALSE
 )

580 if––
uxC⁄åﬁBôs
 & 
evítCLEAR_EVENTS_ON_EXIT_BIT
 ) !–
EvítBôs_t
 ) 0 )

582 
uxBôsToCÀ¨
 |
uxBôsWaôedF‹
;

586 
	`mtCOVERAGE_TEST_MARKER
();

594 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxLi°Iãm
, 
pxEvítBôs
->
uxEvítBôs
 | 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

600 
pxLi°Iãm
 = 
pxNext
;

605 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

607 –Ë
	`xTaskResumeAŒ
();

609  
pxEvítBôs
->
uxEvítBôs
;

610 
	}
}

613 
	$vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

615 
EvítGroup_t
 *
pxEvítBôs
 = 
xEvítGroup
;

616 c⁄° 
Li°_t
 *
pxTasksWaôögF‹Bôs
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

618 
	`vTaskSu•ídAŒ
();

620 
	`åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 );

622  
	`li°CURRENT_LIST_LENGTH
–
pxTasksWaôögF‹Bôs
 ) > ( 
UBa£Ty≥_t
 ) 0 )

626 
	`c⁄figASSERT
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
 !–c⁄° 
Li°Iãm_t
 * ) &(ÖxTasksWaitingForBits->xListEnd ) );

627 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
, 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

630 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

634 
	`vP‹tFªe
–
pxEvítBôs
 );

636 #ñif––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

640 if–
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

642 
	`vP‹tFªe
–
pxEvítBôs
 );

646 
	`mtCOVERAGE_TEST_MARKER
();

651 –Ë
	`xTaskResumeAŒ
();

652 
	}
}

657 
	$vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 )

659 –Ë
	`xEvítGroupSëBôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToSë
 );

660 
	}
}

665 
	$vEvítGroupCÀ¨BôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 )

667 –Ë
	`xEvítGroupCÀ¨Bôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToCÀ¨
 );

668 
	}
}

671 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 )

673 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
 = 
pdFALSE
;

675 if–
xWaôF‹AŒBôs
 =
pdFALSE
 )

679 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) !–
EvítBôs_t
 ) 0 )

681 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

685 
	`mtCOVERAGE_TEST_MARKER
();

692 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

694 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

698 
	`mtCOVERAGE_TEST_MARKER
();

702  
xWaôC⁄dôi⁄Më
;

703 
	}
}

706 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

708 
Ba£Ty≥_t
 
	$xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

710 
Ba£Ty≥_t
 
xRëu∫
;

712 
	`åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 );

713 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 );

715  
xRëu∫
;

716 
	}
}

721 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

723 
UBa£Ty≥_t
 
	$uxEvítGroupGëNumbî
–* 
xEvítGroup
 )

725 
UBa£Ty≥_t
 
xRëu∫
;

726 
EvítGroup_t
 c⁄° *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

728 if–
xEvítGroup
 =
NULL
 )

730 
xRëu∫
 = 0;

734 
xRëu∫
 = 
pxEvítBôs
->
uxEvítGroupNumbî
;

737  
xRëu∫
;

738 
	}
}

743 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

745 
	$vEvítGroupSëNumbî
–* 
xEvítGroup
, 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 )

747 ––
EvítGroup_t
 * ) 
xEvítGroup
 )->
uxEvítGroupNumbî
 = uxEventGroupNumber;

748 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h

28 #i‚de‡
INC_FREERTOS_H


29 
	#INC_FREERTOS_H


	)

34 
	~<°ddef.h
>

49 
	~<°döt.h
>

51 #ifde‡
__˝lu•lus


56 
	~"FªeRTOSC⁄fig.h
"

59 
	~"¥ojdefs.h
"

62 
	~"p‹èbÀ.h
"

65 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


66 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

70 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

71 
	~<ªít.h
>

79 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


80 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

83 #i‚de‡
c⁄figMAX_PRIORITIES


84 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

87 #i‡
c⁄figMAX_PRIORITIES
 < 1

88 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

91 #i‚de‡
c⁄figUSE_PREEMPTION


92 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

95 #i‚de‡
c⁄figUSE_IDLE_HOOK


96 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

99 #i‚de‡
c⁄figUSE_TICK_HOOK


100 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

103 #i‚de‡
c⁄figUSE_16_BIT_TICKS


104 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

107 #i‚de‡
c⁄figUSE_CO_ROUTINES


108 
	#c⁄figUSE_CO_ROUTINES
 0

	)

111 #i‚de‡
INCLUDE_vTaskPri‹ôySë


112 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

115 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


116 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

119 #i‚de‡
INCLUDE_vTaskDñëe


120 
	#INCLUDE_vTaskDñëe
 0

	)

123 #i‚de‡
INCLUDE_vTaskSu•íd


124 
	#INCLUDE_vTaskSu•íd
 0

	)

127 #i‚de‡
INCLUDE_vTaskDñayU¡û


128 
	#INCLUDE_vTaskDñayU¡û
 0

	)

131 #i‚de‡
INCLUDE_vTaskDñay


132 
	#INCLUDE_vTaskDñay
 0

	)

135 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


136 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

139 #i‚de‡
INCLUDE_xTaskAb‹tDñay


140 
	#INCLUDE_xTaskAb‹tDñay
 0

	)

143 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


144 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

147 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


148 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

151 #i‚de‡
INCLUDE_xTaskGëH™dÀ


152 
	#INCLUDE_xTaskGëH™dÀ
 0

	)

155 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


156 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

159 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k2


160 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k2
 0

	)

163 #i‚de‡
INCLUDE_eTaskGëSèã


164 
	#INCLUDE_eTaskGëSèã
 0

	)

167 #i‚de‡
INCLUDE_xTaskResumeFromISR


168 
	#INCLUDE_xTaskResumeFromISR
 1

	)

171 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


172 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

175 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


176 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

179 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


180 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

183 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

184 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


185 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

189 #i‚de‡
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK


190 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

193 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


194 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

197 #i‚de‡
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS


198 
	#c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 0

	)

201 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


202 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

205 #i‚de‡
c⁄figUSE_MUTEXES


206 
	#c⁄figUSE_MUTEXES
 0

	)

209 #i‚de‡
c⁄figUSE_TIMERS


210 
	#c⁄figUSE_TIMERS
 0

	)

213 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


214 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

217 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


218 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

221 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


222 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

225 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


226 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

229 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


230 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

233 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

234 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


237 #i‚de‡
c⁄figASSERT


238 
	#c⁄figASSERT
–
x
 )

	)

239 
	#c⁄figASSERT_DEFINED
 0

	)

241 
	#c⁄figASSERT_DEFINED
 1

	)

249 #i‚de‡
c⁄figPRECONDITION


250 
	#c⁄figPRECONDITION
–
X
 ) 
	`c⁄figASSERT
(X)

	)

251 
	#c⁄figPRECONDITION_DEFINED
 0

	)

253 
	#c⁄figPRECONDITION_DEFINED
 1

	)

256 #i‚de‡
p‹tMEMORY_BARRIER


257 
	#p‹tMEMORY_BARRIER
()

	)

260 #i‚de‡
p‹tSOFTWARE_BARRIER


261 
	#p‹tSOFTWARE_BARRIER
()

	)

265 #i‡
c⁄figUSE_TIMERS
 == 1

267 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


268 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

271 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


272 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

275 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


276 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

281 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


282 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

285 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


286 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

289 #i‚de‡
p‹tCLEAN_UP_TCB


290 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

293 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


294 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

297 #i‚de‡
p‹tSETUP_TCB


298 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

301 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


302 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

305 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

306 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

307 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

308 
	#pcQueueGëName
–
xQueue
 )

	)

311 #i‚de‡
p‹tPOINTER_SIZE_TYPE


312 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

316 #i‚de‡
åa˚START


319 
	#åa˚START
()

	)

322 #i‚de‡
åa˚END


325 
	#åa˚END
()

	)

328 #i‚de‡
åa˚TASK_SWITCHED_IN


331 
	#åa˚TASK_SWITCHED_IN
()

	)

334 #i‚de‡
åa˚INCREASE_TICK_COUNT


337 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

340 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


342 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

345 #i‚def 
åa˚LOW_POWER_IDLE_END


347 
	#åa˚LOW_POWER_IDLE_END
()

	)

350 #i‚de‡
åa˚TASK_SWITCHED_OUT


353 
	#åa˚TASK_SWITCHED_OUT
()

	)

356 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


362 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

365 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


370 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

373 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


378 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

381 #i‚de‡
åa˚BLOCKING_ON_QUEUE_PEEK


386 
	#åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 )

	)

389 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


394 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

397 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


398 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

401 #i‚de‡
c⁄figRECORD_STACK_HIGH_ADDRESS


402 
	#c⁄figRECORD_STACK_HIGH_ADDRESS
 0

	)

405 #i‚de‡
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H


406 
	#c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 0

	)

411 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


412 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

415 #i‚de‡
åa˚POST_MOVED_TASK_TO_READY_STATE


416 
	#åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

419 #i‚de‡
åa˚QUEUE_CREATE


420 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

423 #i‚de‡
åa˚QUEUE_CREATE_FAILED


424 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

427 #i‚de‡
åa˚CREATE_MUTEX


428 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

431 #i‚de‡
åa˚CREATE_MUTEX_FAILED


432 
	#åa˚CREATE_MUTEX_FAILED
()

	)

435 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


436 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

439 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


440 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

443 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


444 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

447 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


448 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

451 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


452 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

455 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


456 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

459 #i‚de‡
åa˚QUEUE_SEND


460 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

463 #i‚de‡
åa˚QUEUE_SEND_FAILED


464 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

467 #i‚de‡
åa˚QUEUE_RECEIVE


468 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

471 #i‚de‡
åa˚QUEUE_PEEK


472 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

475 #i‚de‡
åa˚QUEUE_PEEK_FAILED


476 
	#åa˚QUEUE_PEEK_FAILED
–
pxQueue
 )

	)

479 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


480 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

483 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


484 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

487 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


488 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

491 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


492 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

495 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


496 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

499 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


500 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

503 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


504 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

507 #i‚de‡
åa˚QUEUE_DELETE


508 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

511 #i‚de‡
åa˚TASK_CREATE


512 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

515 #i‚de‡
åa˚TASK_CREATE_FAILED


516 
	#åa˚TASK_CREATE_FAILED
()

	)

519 #i‚de‡
åa˚TASK_DELETE


520 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

523 #i‚de‡
åa˚TASK_DELAY_UNTIL


524 
	#åa˚TASK_DELAY_UNTIL
–
x
 )

	)

527 #i‚de‡
åa˚TASK_DELAY


528 
	#åa˚TASK_DELAY
()

	)

531 #i‚de‡
åa˚TASK_PRIORITY_SET


532 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

535 #i‚de‡
åa˚TASK_SUSPEND


536 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

539 #i‚de‡
åa˚TASK_RESUME


540 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

543 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


544 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

547 #i‚de‡
åa˚TASK_INCREMENT_TICK


548 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

551 #i‚de‡
åa˚TIMER_CREATE


552 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

555 #i‚de‡
åa˚TIMER_CREATE_FAILED


556 
	#åa˚TIMER_CREATE_FAILED
()

	)

559 #i‚de‡
åa˚TIMER_COMMAND_SEND


560 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

563 #i‚de‡
åa˚TIMER_EXPIRED


564 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

567 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


568 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

571 #i‚de‡
åa˚MALLOC


572 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

575 #i‚de‡
åa˚FREE


576 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

579 #i‚de‡
åa˚EVENT_GROUP_CREATE


580 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

583 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


584 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

587 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


588 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

591 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


592 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

595 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


596 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

599 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


600 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

603 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


604 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

607 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


608 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

611 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


612 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

615 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


616 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

619 #i‚de‡
åa˚EVENT_GROUP_DELETE


620 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

623 #i‚de‡
åa˚PEND_FUNC_CALL


624 
	#åa˚PEND_FUNC_CALL
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

627 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


628 
	#åa˚PEND_FUNC_CALL_FROM_ISR
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

631 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


632 
	#åa˚QUEUE_REGISTRY_ADD
(
xQueue
, 
pcQueueName
)

	)

635 #i‚de‡
åa˚TASK_NOTIFY_TAKE_BLOCK


636 
	#åa˚TASK_NOTIFY_TAKE_BLOCK
()

	)

639 #i‚de‡
åa˚TASK_NOTIFY_TAKE


640 
	#åa˚TASK_NOTIFY_TAKE
()

	)

643 #i‚de‡
åa˚TASK_NOTIFY_WAIT_BLOCK


644 
	#åa˚TASK_NOTIFY_WAIT_BLOCK
()

	)

647 #i‚de‡
åa˚TASK_NOTIFY_WAIT


648 
	#åa˚TASK_NOTIFY_WAIT
()

	)

651 #i‚de‡
åa˚TASK_NOTIFY


652 
	#åa˚TASK_NOTIFY
()

	)

655 #i‚de‡
åa˚TASK_NOTIFY_FROM_ISR


656 
	#åa˚TASK_NOTIFY_FROM_ISR
()

	)

659 #i‚de‡
åa˚TASK_NOTIFY_GIVE_FROM_ISR


660 
	#åa˚TASK_NOTIFY_GIVE_FROM_ISR
()

	)

663 #i‚de‡
åa˚STREAM_BUFFER_CREATE_FAILED


664 
	#åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 )

	)

667 #i‚de‡
åa˚STREAM_BUFFER_CREATE_STATIC_FAILED


668 
	#åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 )

	)

671 #i‚de‡
åa˚STREAM_BUFFER_CREATE


672 
	#åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 )

	)

675 #i‚de‡
åa˚STREAM_BUFFER_DELETE


676 
	#åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 )

	)

679 #i‚de‡
åa˚STREAM_BUFFER_RESET


680 
	#åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 )

	)

683 #i‚de‡
åa˚BLOCKING_ON_STREAM_BUFFER_SEND


684 
	#åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 )

	)

687 #i‚de‡
åa˚STREAM_BUFFER_SEND


688 
	#åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xByãsSít
 )

	)

691 #i‚de‡
åa˚STREAM_BUFFER_SEND_FAILED


692 
	#åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 )

	)

695 #i‚de‡
åa˚STREAM_BUFFER_SEND_FROM_ISR


696 
	#åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xByãsSít
 )

	)

699 #i‚de‡
åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE


700 
	#åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 )

	)

703 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE


704 
	#åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 )

	)

707 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE_FAILED


708 
	#åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 )

	)

711 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE_FROM_ISR


712 
	#åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 )

	)

715 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


716 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

719 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

721 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


722 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

725 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


726 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


727 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

733 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


734 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

737 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


738 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

741 #i‚de‡
p‹tPRIVILEGE_BIT


742 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

745 #i‚de‡
p‹tYIELD_WITHIN_API


746 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

749 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


750 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

	)

753 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


754 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

757 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

758 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

761 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


762 
	#c⁄figUSE_TICKLESS_IDLE
 0

	)

765 #i‚de‡
c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING


766 
	#c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
x
 )

	)

769 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


770 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

773 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


774 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

777 #i‚de‡
c⁄figUSE_QUEUE_SETS


778 
	#c⁄figUSE_QUEUE_SETS
 0

	)

781 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


782 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

785 #i‚de‡
p‹tALLOCATE_SECURE_CONTEXT


786 
	#p‹tALLOCATE_SECURE_CONTEXT
–
ulSecuªSèckSize
 )

	)

789 #i‚de‡
p‹tDONT_DISCARD


790 
	#p‹tDONT_DISCARD


	)

793 #i‚de‡
c⁄figUSE_TIME_SLICING


794 
	#c⁄figUSE_TIME_SLICING
 1

	)

797 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


798 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

801 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


802 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

805 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


806 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

809 #i‚de‡
c⁄figUSE_TRACE_FACILITY


810 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

813 #i‚de‡
mtCOVERAGE_TEST_MARKER


814 
	#mtCOVERAGE_TEST_MARKER
()

	)

817 #i‚de‡
mtCOVERAGE_TEST_DELAY


818 
	#mtCOVERAGE_TEST_DELAY
()

	)

821 #i‚de‡
p‹tASSERT_IF_IN_ISR


822 
	#p‹tASSERT_IF_IN_ISR
()

	)

825 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


826 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

829 #i‚de‡
c⁄figAPPLICATION_ALLOCATED_HEAP


830 
	#c⁄figAPPLICATION_ALLOCATED_HEAP
 0

	)

833 #i‚de‡
c⁄figUSE_TASK_NOTIFICATIONS


834 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

837 #i‚de‡
c⁄figUSE_POSIX_ERRNO


838 
	#c⁄figUSE_POSIX_ERRNO
 0

	)

841 #i‚de‡
p‹tTICK_TYPE_IS_ATOMIC


842 
	#p‹tTICK_TYPE_IS_ATOMIC
 0

	)

845 #i‚de‡
c⁄figSUPPORT_STATIC_ALLOCATION


847 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 0

	)

850 #i‚de‡
c⁄figSUPPORT_DYNAMIC_ALLOCATION


852 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

855 #i‚de‡
c⁄figSTACK_DEPTH_TYPE


858 
	#c⁄figSTACK_DEPTH_TYPE
 
uöt16_t


	)

861 #i‚de‡
c⁄figMESSAGE_BUFFER_LENGTH_TYPE


865 
	#c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
size_t


	)

869 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

870 #if–
INCLUDE_vTaskSu•íd
 != 1 )

871 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

875 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 ) )

876 #îr‹ 
c⁄figSUPPORT_STATIC_ALLOCATION
 
™d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
ˇ¬Ÿ
 
bŸh
 
be
 0, 
but
 
ˇn
 both be 1.

879 #if––
c⁄figUSE_RECURSIVE_MUTEXES
 =1 ) && ( 
c⁄figUSE_MUTEXES
 != 1 ) )

880 #îr‹ 
c⁄figUSE_MUTEXES
 
mu°
 
be
 
£t
 
to
 1Åÿ
u£
 
ªcursive
 
muãxes


883 #i‚de‡
c⁄figINITIAL_TICK_COUNT


884 
	#c⁄figINITIAL_TICK_COUNT
 0

	)

887 #if–
p‹tTICK_TYPE_IS_ATOMIC
 == 0 )

891 
	#p‹tTICK_TYPE_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

892 
	#p‹tTICK_TYPE_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

893 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

894 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
––x ) )

	)

898 
	#p‹tTICK_TYPE_ENTER_CRITICAL
()

	)

899 
	#p‹tTICK_TYPE_EXIT_CRITICAL
()

	)

900 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

901 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) ( Ë
	)
x

906 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


907 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

910 #i‚de‡
c⁄figPRINTF


921 
	#c⁄figPRINTF
–
X
 )

	)

924 #i‚de‡
c⁄figMAX


927 
	#c⁄figMAX
–
a
, 
b
 ) ( ( (á ) > ( b ) ) ? (á ) : ( b ) )

	)

930 #i‚de‡
c⁄figMIN


933 
	#c⁄figMIN
–
a
, 
b
 ) ( ( (á ) < ( b ) ) ? (á ) : ( b ) )

	)

936 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

937 
	#eTaskSèãGë
 
eTaskGëSèã


	)

938 
	#p‹tTickTy≥
 
TickTy≥_t


	)

939 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

940 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

941 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

942 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

943 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

944 
	#xTimeOutTy≥
 
TimeOut_t


	)

945 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

946 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

947 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

948 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

949 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

950 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

951 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

952 
	#pcTaskGëTaskName
 
pcTaskGëName


	)

953 
	#pcTimîGëTimîName
 
pcTimîGëName


	)

954 
	#pcQueueGëQueueName
 
pcQueueGëName


	)

955 
	#vTaskGëTaskInfo
 
vTaskGëInfo


	)

956 
	#xTaskGëIdÀRunTimeCou¡î
 
ulTaskGëIdÀRunTimeCou¡î


	)

960 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

961 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

962 
	#xLi°Iãm
 
Li°Iãm_t


	)

963 
	#xLi°
 
Li°_t


	)

967 
	#pxC⁄èöî
 
pvC⁄èöî


	)

970 #if–
c⁄figUSE_ALTERNATIVE_API
 != 0 )

971 #îr‹ 
The
 
Æã∫©ive
 
API
 
was
 
dïªˇãd
 
some
 
time
 
ago
, 
™d
 wa†
ªmoved
 
ö
 
FªeRTOS
 
V9
.0 0

978 #i‚de‡
c⁄figUSE_TASK_FPU_SUPPORT


979 
	#c⁄figUSE_TASK_FPU_SUPPORT
 1

	)

984 #i‚de‡
c⁄figENABLE_MPU


985 
	#c⁄figENABLE_MPU
 0

	)

990 #i‚de‡
c⁄figENABLE_FPU


991 
	#c⁄figENABLE_FPU
 1

	)

996 #i‚de‡
c⁄figENABLE_TRUSTZONE


997 
	#c⁄figENABLE_TRUSTZONE
 1

	)

1002 #i‚de‡
c⁄figRUN_FREERTOS_SECURE_ONLY


1003 
	#c⁄figRUN_FREERTOS_SECURE_ONLY
 0

	)

1048 
	#tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 ( ( ( 
p‹tUSING_MPU_WRAPPERS
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) ) || \

1049 ––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) ) )

	)

1061 
	sxSTATIC_LIST_ITEM


1063 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1064 
TickTy≥_t
 
xDummy1
;

1066 
TickTy≥_t
 
xDummy2
;

1067 *
pvDummy3
[ 4 ];

1068 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1069 
TickTy≥_t
 
xDummy4
;

1072 
xSTATIC_LIST_ITEM
 
	tSèticLi°Iãm_t
;

1075 
	sxSTATIC_MINI_LIST_ITEM


1077 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1078 
TickTy≥_t
 
xDummy1
;

1080 
TickTy≥_t
 
xDummy2
;

1081 *
pvDummy3
[ 2 ];

1083 
xSTATIC_MINI_LIST_ITEM
 
	tSèticMöiLi°Iãm_t
;

1086 
	sxSTATIC_LIST


1088 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1089 
TickTy≥_t
 
xDummy1
;

1091 
UBa£Ty≥_t
 
uxDummy2
;

1092 *
pvDummy3
;

1093 
SèticMöiLi°Iãm_t
 
xDummy4
;

1094 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1095 
TickTy≥_t
 
xDummy5
;

1097 } 
	tSèticLi°_t
;

1112 
	sxSTATIC_TCB


1114 *
pxDummy1
;

1115 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

1116 
xMPU_SETTINGS
 
xDummy2
;

1118 
SèticLi°Iãm_t
 
xDummy3
[ 2 ];

1119 
UBa£Ty≥_t
 
uxDummy5
;

1120 *
pxDummy6
;

1121 
uöt8_t
 
ucDummy7
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

1122 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

1123 *
pxDummy8
;

1125 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

1126 
UBa£Ty≥_t
 
uxDummy9
;

1128 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1129 
UBa£Ty≥_t
 
uxDummy10
[ 2 ];

1131 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1132 
UBa£Ty≥_t
 
uxDummy12
[ 2 ];

1134 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1135 *
pxDummy14
;

1137 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1138 *
pvDummy15
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

1140 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1141 
uöt32_t
 
ulDummy16
;

1143 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1144 
_ªít
 
xDummy17
;

1146 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1147 
uöt32_t
 
ulDummy18
;

1148 
uöt8_t
 
ucDummy19
;

1150 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

1151 
uöt8_t
 
uxDummy20
;

1154 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

1155 
uöt8_t
 
ucDummy21
;

1157 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

1158 
iDummy22
;

1160 } 
	tSèticTask_t
;

1176 
	sxSTATIC_QUEUE


1178 *
pvDummy1
[ 3 ];

1182 *
pvDummy2
;

1183 
UBa£Ty≥_t
 
uxDummy2
;

1184 } 
u
;

1186 
SèticLi°_t
 
xDummy3
[ 2 ];

1187 
UBa£Ty≥_t
 
uxDummy4
[ 3 ];

1188 
uöt8_t
 
ucDummy5
[ 2 ];

1190 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1191 
uöt8_t
 
ucDummy6
;

1194 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1195 *
pvDummy7
;

1198 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1199 
UBa£Ty≥_t
 
uxDummy8
;

1200 
uöt8_t
 
ucDummy9
;

1203 } 
	tSèticQueue_t
;

1204 
SèticQueue_t
 
	tSèticSem≠h‹e_t
;

1220 
	sxSTATIC_EVENT_GROUP


1222 
TickTy≥_t
 
xDummy1
;

1223 
SèticLi°_t
 
xDummy2
;

1225 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1226 
UBa£Ty≥_t
 
uxDummy3
;

1229 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1230 
uöt8_t
 
ucDummy4
;

1233 } 
	tSèticEvítGroup_t
;

1249 
	sxSTATIC_TIMER


1251 *
pvDummy1
;

1252 
SèticLi°Iãm_t
 
xDummy2
;

1253 
TickTy≥_t
 
xDummy3
;

1254 *
pvDummy5
;

1255 
TaskFun˘i⁄_t
 
pvDummy6
;

1256 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1257 
UBa£Ty≥_t
 
uxDummy7
;

1259 
uöt8_t
 
ucDummy8
;

1261 } 
	tSèticTimî_t
;

1277 
	sxSTATIC_STREAM_BUFFER


1279 
size_t
 
uxDummy1
[ 4 ];

1280 * 
pvDummy2
[ 3 ];

1281 
uöt8_t
 
ucDummy3
;

1282 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1283 
UBa£Ty≥_t
 
uxDummy4
;

1285 } 
	tSèticSåómBuf„r_t
;

1288 
SèticSåómBuf„r_t
 
	tSèticMesßgeBuf„r_t
;

1290 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/StackMacros.h

28 #i‚de‡
STACK_MACROS_H


29 
	#STACK_MACROS_H


	)

31 #i‚de‡
_MSC_VER


32 #w¨nög 
The
 
«me
 
of
 
this
 
fûe
 
has
 
ch™ged
 
to
 
°ack_ma¸os
.
h
. 
PÀa£
 
upd©e
 
your
 
code
 
acc‹dögly
. 
This
 
sour˚
 fûê(
which
 ha†
the
 
‹igöÆ
ÇameË
wûl
 
be
 
ªmoved
 
ö
 
futuª
 
ªÀa£d
.

51 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

54 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

57 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

59 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

61 }

	)

66 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

69 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

73 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

75 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

77 }

	)

82 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

84 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

86 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

87 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

89 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

90 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

91 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

92 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

94 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

96 }

	)

101 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

103 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

105 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

106 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

107 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

108 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

109 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

110 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

113 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

116 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

118 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

120 }

	)

126 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


127 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/croutine.h

28 #i‚de‡
CO_ROUTINE_H


29 
	#CO_ROUTINE_H


	)

31 #i‚de‡
INC_FREERTOS_H


35 
	~"li°.h
"

37 #ifde‡
__˝lu•lus


44 * 
	tCoRoutöeH™dÀ_t
;

47 (*
¸COROUTINE_CODE
)–
	tCoRoutöeH™dÀ_t
, 
	tUBa£Ty≥_t
 );

49 
	sc‹CoRoutöeC⁄åﬁBlock


51 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

52 
Li°Iãm_t
 
xGíîicLi°Iãm
;

53 
Li°Iãm_t
 
xEvítLi°Iãm
;

54 
UBa£Ty≥_t
 
uxPri‹ôy
;

55 
UBa£Ty≥_t
 
uxIndex
;

56 
uöt16_t
 
uxSèã
;

57 } 
	tCRCB_t
;

131 
Ba£Ty≥_t
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 );

173 
vCoRoutöeScheduÀ
( );

204 
	#¸START
–
pxCRCB
 )  ( ( 
CRCB_t
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

235 
	#¸END
(Ë}

	)

241 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

242 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

290 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

291 if––
xTicksToDñay
 ) > 0 ) \

293 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

295 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

380 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

382 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

383 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

385 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

386 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

388 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

390 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

391 *
pxResu…
 = 
pdPASS
; \

393 }

	)

472 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

474 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

475 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

477 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

478 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

480 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

482 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

483 *–
pxResu…
 ) = 
pdPASS
; \

485 }

	)

581 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

694 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

705 
vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 );

714 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 );

716 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/deprecated_definitions.h

28 #i‚de‡
DEPRECATED_DEFINITIONS_H


29 
	#DEPRECATED_DEFINITIONS_H


	)

41 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


42 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

43 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

46 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


47 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

48 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

51 #ifde‡
GCC_MEGA_AVR


52 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

55 #ifde‡
IAR_MEGA_AVR


56 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

59 #ifde‡
MPLAB_PIC24_PORT


60 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

63 #ifde‡
MPLAB_DSPIC_PORT


64 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

67 #ifde‡
MPLAB_PIC18F_PORT


68 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

71 #ifde‡
MPLAB_PIC32MX_PORT


72 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

75 #ifde‡
_FEDPICC


76 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

79 #ifde‡
SDCC_CYGNAL


80 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

83 #ifde‡
GCC_ARM7


84 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

87 #ifde‡
GCC_ARM7_ECLIPSE


88 
	~"p‹tma¸o.h
"

91 #ifde‡
ROWLEY_LPC23xx


92 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

95 #ifde‡
IAR_MSP430


96 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

99 #ifde‡
GCC_MSP430


100 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

103 #ifde‡
ROWLEY_MSP430


104 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

107 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


108 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

111 #ifde‡
SAM7_GCC


112 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

115 #ifde‡
SAM7_IAR


116 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

119 #ifde‡
SAM9XE_IAR


120 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

123 #ifde‡
LPC2000_IAR


124 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

127 #ifde‡
STR71X_IAR


128 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

131 #ifde‡
STR75X_IAR


132 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

135 #ifde‡
STR75X_GCC


136 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

139 #ifde‡
STR91X_IAR


140 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

143 #ifde‡
GCC_H8S


144 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

147 #ifde‡
GCC_AT91FR40008


148 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

151 #ifde‡
RVDS_ARMCM3_LM3S102


152 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

155 #ifde‡
GCC_ARMCM3_LM3S102


156 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

159 #ifde‡
GCC_ARMCM3


160 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

163 #ifde‡
IAR_ARM_CM3


164 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

167 #ifde‡
IAR_ARMCM3_LM


168 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

171 #ifde‡
HCS12_CODE_WARRIOR


172 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

175 #ifde‡
MICROBLAZE_GCC


176 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

179 #ifde‡
TERN_EE


180 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

183 #ifde‡
GCC_HCS12


184 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

187 #ifde‡
GCC_MCF5235


188 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

191 #ifde‡
COLDFIRE_V2_GCC


192 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

195 #ifde‡
COLDFIRE_V2_CODEWARRIOR


196 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

199 #ifde‡
GCC_PPC405


200 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

203 #ifde‡
GCC_PPC440


204 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

207 #ifde‡
_16FX_SOFTUNE


208 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

211 #ifde‡
BCC_INDUSTRIAL_PC_PORT


214 
	~"‰c⁄fig.h
"

215 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

216 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

219 #ifde‡
BCC_FLASH_LITE_186_PORT


222 
	~"‰c⁄fig.h
"

223 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

224 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

227 #ifde‡
__GNUC__


228 #ifde‡
__AVR32_AVR32A__


229 
	~"p‹tma¸o.h
"

233 #ifde‡
__ICCAVR32__


234 #ifde‡
__CORE__


235 #i‡
__CORE__
 =
__AVR32A__


236 
	~"p‹tma¸o.h
"

241 #ifde‡
__91467D


242 
	~"p‹tma¸o.h
"

245 #ifde‡
__96340


246 
	~"p‹tma¸o.h
"

250 #ifde‡
__IAR_V850ES_Fx3__


251 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

254 #ifde‡
__IAR_V850ES_Jx3__


255 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

258 #ifde‡
__IAR_V850ES_Jx3_L__


259 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

262 #ifde‡
__IAR_V850ES_Jx2__


263 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

266 #ifde‡
__IAR_V850ES_Hx2__


267 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

270 #ifde‡
__IAR_78K0R_Kx3__


271 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

274 #ifde‡
__IAR_78K0R_Kx3L__


275 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h

28 #i‚de‡
EVENT_GROUPS_H


29 
	#EVENT_GROUPS_H


	)

31 #i‚de‡
INC_FREERTOS_H


32 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

36 
	~"timîs.h
"

38 #ifde‡
__˝lu•lus


81 
EvítGroupDef_t
;

82 
EvítGroupDef_t
 * 
	tEvítGroupH™dÀ_t
;

92 
TickTy≥_t
 
	tEvítBôs_t
;

146 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

147 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
–Ë
PRIVILEGED_FUNCTION
;

199 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

200 
EvítGroupH™dÀ_t
 
xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 ) 
PRIVILEGED_FUNCTION
;

295 
EvítBôs_t
 
xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

352 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

407 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

408 
Ba£Ty≥_t
 
xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

410 
	#xEvítGroupCÀ¨BôsFromISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToCÀ¨, 
NULL
 )

	)

485 
EvítBôs_t
 
xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

559 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

560 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

562 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToSë,ÖxHighîPri‹ôyTaskWokí )

	)

689 
EvítBôs_t
 
xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

708 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

725 
EvítBôs_t
 
xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

739 
vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

742 
vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

743 
vEvítGroupCÀ¨BôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

746 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

747 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

748 
vEvítGroupSëNumbî
–* 
xEvítGroup
, 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 ) 
PRIVILEGED_FUNCTION
;

751 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/list.h

56 #i‚de‡
INC_FREERTOS_H


57 #îr‹ 
FªeRTOS
.
h
 
mu°
 
be
 
ö˛uded
 
bef‹e
 
li°
.h

60 #i‚de‡
LIST_H


61 
	#LIST_H


	)

91 #i‚de‡
c⁄figLIST_VOLATILE


92 
	#c⁄figLIST_VOLATILE


	)

95 #ifde‡
__˝lu•lus


104 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 0 )

106 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

107 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

108 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE


	)

109 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE


	)

110 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

111 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

112 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 )

	)

113 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 )

	)

114 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 )

	)

115 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 )

	)

118 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue1
;

	)

119 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue2
;

	)

120 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue1
;

	)

121 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue2
;

	)

124 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

125 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

126 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

127 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

131 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 ) 
	`c⁄figASSERT
–––pxIãm )->
xLi°IãmI¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

132 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 ) 
	`c⁄figASSERT
–––pxLi° )->
xLi°I¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxLi° )->
xLi°I¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

139 
	gxLIST
;

140 
	sxLIST_ITEM


142 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


143 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

144 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

145 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

146 * 
	gpvOw√r
;

147 
xLIST
 * 
c⁄figLIST_VOLATILE
 
	gpxC⁄èöî
;

148 
	gli°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


150 
xLIST_ITEM
 
	tLi°Iãm_t
;

152 
	sxMINI_LIST_ITEM


154 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


155 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

156 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

157 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

159 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

164 
	sxLIST


166 
li°FIRST_LIST_INTEGRITY_CHECK_VALUE


167 vﬁ©ûê
UBa£Ty≥_t
 
	guxNumbîOfIãms
;

168 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
	gpxIndex
;

169 
MöiLi°Iãm_t
 
	gxLi°End
;

170 
	gli°SECOND_LIST_INTEGRITY_CHECK_VALUE


171 } 
	tLi°_t
;

180 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

189 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

198 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

208 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

217 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

225 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

233 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

241 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

250 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) ? 
pdTRUE
 : 
pdFALSE
 )

	)

255 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

277 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

279 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

282 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

283 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

285 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

287 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

288 }

	)

307 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

318 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( (ÖxLi°Iãm )->
pxC⁄èöî
 =–pxLi° ) ) ? ( 
pdTRUE
 ) : ( 
pdFALSE
 ) )

	)

326 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxC⁄èöî
 )

	)

333 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

345 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 ) 
	gPRIVILEGED_FUNCTION
;

356 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 ) 
	gPRIVILEGED_FUNCTION
;

369 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

390 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

405 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 ) 
	gPRIVILEGED_FUNCTION
;

407 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/message_buffer.h

62 #i‚de‡
FREERTOS_MESSAGE_BUFFER_H


63 
	#FREERTOS_MESSAGE_BUFFER_H


	)

65 #i‚de‡
INC_FREERTOS_H


70 
	~"°ªam_buf„r.h
"

72 #i‡
deföed
–
__˝lu•lus
 )

82 * 
	tMesßgeBuf„rH™dÀ_t
;

142 
	#xMesßgeBuf„rCª©e
–
xBuf„rSizeByãs
 ) ( 
MesßgeBuf„rH™dÀ_t
 ) 
	`xSåómBuf„rGíîicCª©e
–xBuf„rSizeByãs, ( 
size_t
 ) 0, 
pdTRUE
 )

	)

208 
	#xMesßgeBuf„rCª©eSètic
–
xBuf„rSizeByãs
, 
pucMesßgeBuf„rSt‹ageAªa
, 
pxSèticMesßgeBuf„r
 ) ( 
MesßgeBuf„rH™dÀ_t
 ) 
	`xSåómBuf„rGíîicCª©eSètic
–xBuf„rSizeByãs, 0, 
pdTRUE
,ÖucMesßgeBuf„rSt‹ageAªa,ÖxSèticMesßgeBuf„∏)

	)

307 
	#xMesßgeBuf„rSíd
–
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xTicksToWaô
 ) 
	`xSåómBuf„rSíd
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvTxD©a, xD©aLígthByãs, xTicksToWaô )

	)

411 
	#xMesßgeBuf„rSídFromISR
–
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rSídFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvTxD©a, xD©aLígthByãs,ÖxHighîPri‹ôyTaskWokí )

	)

499 
	#xMesßgeBuf„rRe˚ive
–
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xTicksToWaô
 ) 
	`xSåómBuf„rRe˚ive
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvRxD©a, xBuf„rLígthByãs, xTicksToWaô )

	)

600 
	#xMesßgeBuf„rRe˚iveFromISR
–
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rRe˚iveFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖvRxD©a, xBuf„rLígthByãs,ÖxHighîPri‹ôyTaskWokí )

	)

620 
	#vMesßgeBuf„rDñëe
–
xMesßgeBuf„r
 ) 
	`vSåómBuf„rDñëe
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

637 
	#xMesßgeBuf„rIsFuŒ
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rIsFuŒ
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

653 
	#xMesßgeBuf„rIsEm±y
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rIsEm±y
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

676 
	#xMesßgeBuf„rRe£t
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rRe£t
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

698 
	#xMesßgeBuf„rS∑˚AvaûabÀ
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rS∑˚sAvaûabÀ
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏)

	)

699 
	#xMesßgeBuf„rS∑˚sAvaûabÀ
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rS∑˚sAvaûabÀ
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏Ë

	)

718 
	#xMesßgeBuf„rNextLígthByãs
–
xMesßgeBuf„r
 ) 
	`xSåómBuf„rNextMesßgeLígthByãs
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„∏Ë
PRIVILEGED_FUNCTION
;

	)

757 
	#xMesßgeBuf„rSídCom∂ëedFromISR
–
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rSídCom∂ëedFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖxHighîPri‹ôyTaskWokí )

	)

797 
	#xMesßgeBuf„rRe˚iveCom∂ëedFromISR
–
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xSåómBuf„rRe˚iveCom∂ëedFromISR
––
SåómBuf„rH™dÀ_t
 ) xMesßgeBuf„r,ÖxHighîPri‹ôyTaskWokí )

	)

799 #i‡
deföed
–
__˝lu•lus
 )

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/mpu_prototypes.h

37 #i‚de‡
MPU_PROTOTYPES_H


38 
	#MPU_PROTOTYPES_H


	)

41 
Ba£Ty≥_t
 
	$MPU_xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
FREERTOS_SYSTEM_CALL
;

42 
TaskH™dÀ_t
 
	$MPU_xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt32_t
 
ulSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

43 
Ba£Ty≥_t
 
	$MPU_xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
FREERTOS_SYSTEM_CALL
;

44 
Ba£Ty≥_t
 
	$MPU_xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
FREERTOS_SYSTEM_CALL
;

45 
	$MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
FREERTOS_SYSTEM_CALL
;

46 
	$MPU_vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
FREERTOS_SYSTEM_CALL
;

47 
	$MPU_vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
FREERTOS_SYSTEM_CALL
;

48 
	$MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 ) 
FREERTOS_SYSTEM_CALL
;

49 
Ba£Ty≥_t
 
	$MPU_xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

50 
UBa£Ty≥_t
 
	$MPU_uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

51 
eTaskSèã
 
	$MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

52 
	$MPU_vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 ) 
FREERTOS_SYSTEM_CALL
;

53 
	$MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
FREERTOS_SYSTEM_CALL
;

54 
	$MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
FREERTOS_SYSTEM_CALL
;

55 
	$MPU_vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
FREERTOS_SYSTEM_CALL
;

56 
	$MPU_vTaskSèπScheduÀr
–Ë
FREERTOS_SYSTEM_CALL
;

57 
	$MPU_vTaskSu•ídAŒ
–Ë
FREERTOS_SYSTEM_CALL
;

58 
Ba£Ty≥_t
 
	$MPU_xTaskResumeAŒ
–Ë
FREERTOS_SYSTEM_CALL
;

59 
TickTy≥_t
 
	$MPU_xTaskGëTickCou¡
–Ë
FREERTOS_SYSTEM_CALL
;

60 
UBa£Ty≥_t
 
	$MPU_uxTaskGëNumbîOfTasks
–Ë
FREERTOS_SYSTEM_CALL
;

61 * 
	$MPU_pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
FREERTOS_SYSTEM_CALL
;

62 
TaskH™dÀ_t
 
	$MPU_xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 ) 
FREERTOS_SYSTEM_CALL
;

63 
UBa£Ty≥_t
 
	$MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

64 
c⁄figSTACK_DEPTH_TYPE
 
	$MPU_uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

65 
	$MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
FREERTOS_SYSTEM_CALL
;

66 
TaskHookFun˘i⁄_t
 
	$MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

67 
	$MPU_vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 ) 
FREERTOS_SYSTEM_CALL
;

68 * 
	$MPU_pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 ) 
FREERTOS_SYSTEM_CALL
;

69 
Ba£Ty≥_t
 
	$MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 ) 
FREERTOS_SYSTEM_CALL
;

70 
TaskH™dÀ_t
 
	$MPU_xTaskGëIdÀTaskH™dÀ
–Ë
FREERTOS_SYSTEM_CALL
;

71 
UBa£Ty≥_t
 
	$MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
FREERTOS_SYSTEM_CALL
;

72 
uöt32_t
 
	$MPU_ulTaskGëIdÀRunTimeCou¡î
–Ë
FREERTOS_SYSTEM_CALL
;

73 
	$MPU_vTaskLi°
–* 
pcWrôeBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

74 
	$MPU_vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

75 
Ba£Ty≥_t
 
	$MPU_xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 ) 
FREERTOS_SYSTEM_CALL
;

76 
Ba£Ty≥_t
 
	$MPU_xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

77 
uöt32_t
 
	$MPU_ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

78 
Ba£Ty≥_t
 
	$MPU_xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

79 
uöt32_t
 
	$MPU_ulTaskNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
, 
uöt32_t
 
ulBôsToCÀ¨
 ) 
FREERTOS_SYSTEM_CALL
;

80 
Ba£Ty≥_t
 
	$MPU_xTaskIn¸emítTick
–Ë
FREERTOS_SYSTEM_CALL
;

81 
TaskH™dÀ_t
 
	$MPU_xTaskGëCuºítTaskH™dÀ
–Ë
FREERTOS_SYSTEM_CALL
;

82 
	$MPU_vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
FREERTOS_SYSTEM_CALL
;

83 
Ba£Ty≥_t
 
	$MPU_xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

84 
	$MPU_vTaskMis£dYõld
–Ë
FREERTOS_SYSTEM_CALL
;

85 
Ba£Ty≥_t
 
	$MPU_xTaskGëScheduÀrSèã
–Ë
FREERTOS_SYSTEM_CALL
;

86 
Ba£Ty≥_t
 
	$MPU_xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 ) 
FREERTOS_SYSTEM_CALL
;

89 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
FREERTOS_SYSTEM_CALL
;

90 
Ba£Ty≥_t
 
	$MPU_xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

91 
Ba£Ty≥_t
 
	$MPU_xQueuePìk
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

92 
Ba£Ty≥_t
 
	$MPU_xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

93 
UBa£Ty≥_t
 
	$MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

94 
UBa£Ty≥_t
 
	$MPU_uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

95 
	$MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

96 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
FREERTOS_SYSTEM_CALL
;

97 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
FREERTOS_SYSTEM_CALL
;

98 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 ) 
FREERTOS_SYSTEM_CALL
;

99 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
FREERTOS_SYSTEM_CALL
;

100 
TaskH™dÀ_t
 
	$MPU_xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
FREERTOS_SYSTEM_CALL
;

101 
Ba£Ty≥_t
 
	$MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

102 
Ba£Ty≥_t
 
	$MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 ) 
FREERTOS_SYSTEM_CALL
;

103 
	$MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 ) 
FREERTOS_SYSTEM_CALL
;

104 
	$MPU_vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

105 c⁄° * 
	$MPU_pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

106 
QueueH™dÀ_t
 
	$MPU_xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
FREERTOS_SYSTEM_CALL
;

107 
QueueH™dÀ_t
 
	$MPU_xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 ) 
FREERTOS_SYSTEM_CALL
;

108 
QueueSëH™dÀ_t
 
	$MPU_xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
FREERTOS_SYSTEM_CALL
;

109 
Ba£Ty≥_t
 
	$MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
FREERTOS_SYSTEM_CALL
;

110 
Ba£Ty≥_t
 
	$MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
FREERTOS_SYSTEM_CALL
;

111 
QueueSëMembîH™dÀ_t
 
	$MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

112 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 
xNewQueue
 ) 
FREERTOS_SYSTEM_CALL
;

113 
	$MPU_vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
FREERTOS_SYSTEM_CALL
;

114 
UBa£Ty≥_t
 
	$MPU_uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

115 
uöt8_t
 
	$MPU_ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

118 
TimîH™dÀ_t
 
	$MPU_xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
FREERTOS_SYSTEM_CALL
;

119 
TimîH™dÀ_t
 
	$MPU_xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
, 
SèticTimî_t
 *
pxTimîBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

120 * 
	$MPU_pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

121 
	$MPU_vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 ) 
FREERTOS_SYSTEM_CALL
;

122 
Ba£Ty≥_t
 
	$MPU_xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

123 
TaskH™dÀ_t
 
	$MPU_xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
FREERTOS_SYSTEM_CALL
;

124 
Ba£Ty≥_t
 
	$MPU_xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

125 c⁄° * 
	$MPU_pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

126 
	$MPU_vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
 ) 
FREERTOS_SYSTEM_CALL
;

127 
UBa£Ty≥_t
 
	$MPU_uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

128 
TickTy≥_t
 
	$MPU_xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

129 
TickTy≥_t
 
	$MPU_xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

130 
Ba£Ty≥_t
 
	$MPU_xTimîCª©eTimîTask
–Ë
FREERTOS_SYSTEM_CALL
;

131 
Ba£Ty≥_t
 
	$MPU_xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
Ba£Ty≥_t
 
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

134 
EvítGroupH™dÀ_t
 
	$MPU_xEvítGroupCª©e
–Ë
FREERTOS_SYSTEM_CALL
;

135 
EvítGroupH™dÀ_t
 
	$MPU_xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

136 
EvítBôs_t
 
	$MPU_xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

137 
EvítBôs_t
 
	$MPU_xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 ) 
FREERTOS_SYSTEM_CALL
;

138 
EvítBôs_t
 
	$MPU_xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 ) 
FREERTOS_SYSTEM_CALL
;

139 
EvítBôs_t
 
	$MPU_xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

140 
	$MPU_vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
FREERTOS_SYSTEM_CALL
;

141 
UBa£Ty≥_t
 
	$MPU_uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
FREERTOS_SYSTEM_CALL
;

144 
size_t
 
	$MPU_xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, c⁄° *
pvTxD©a
, 
size_t
 
xD©aLígthByãs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

145 
size_t
 
	$MPU_xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, *
pvRxD©a
, 
size_t
 
xBuf„rLígthByãs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

146 
size_t
 
	$MPU_xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

147 
	$MPU_vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

148 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

149 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

150 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

151 
size_t
 
	$MPU_xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

152 
size_t
 
	$MPU_xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

153 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
size_t
 
xTriggîLevñ
 ) 
FREERTOS_SYSTEM_CALL
;

154 
SåómBuf„rH™dÀ_t
 
	$MPU_xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
, size_à
xTriggîLevñByãs
, 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

155 
SåómBuf„rH™dÀ_t
 
	$MPU_xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
, size_à
xTriggîLevñByãs
, 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
, 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
, 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/mpu_wrappers.h

28 #i‚de‡
MPU_WRAPPERS_H


29 
	#MPU_WRAPPERS_H


	)

33 #ifde‡
p‹tUSING_MPU_WRAPPERS


38 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


49 
	#xTaskCª©e
 
MPU_xTaskCª©e


	)

50 
	#xTaskCª©eSètic
 
MPU_xTaskCª©eSètic


	)

51 
	#xTaskCª©eRe°ri˘ed
 
MPU_xTaskCª©eRe°ri˘ed


	)

52 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

53 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

54 
	#vTaskDñay
 
MPU_vTaskDñay


	)

55 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

56 
	#xTaskAb‹tDñay
 
MPU_xTaskAb‹tDñay


	)

57 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

58 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

59 
	#vTaskGëInfo
 
MPU_vTaskGëInfo


	)

60 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

61 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

62 
	#vTaskResume
 
MPU_vTaskResume


	)

63 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

64 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

65 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

66 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

67 
	#pcTaskGëName
 
MPU_pcTaskGëName


	)

68 
	#xTaskGëH™dÀ
 
MPU_xTaskGëH™dÀ


	)

69 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

70 
	#uxTaskGëSèckHighW©îM¨k2
 
MPU_uxTaskGëSèckHighW©îM¨k2


	)

71 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

72 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

73 
	#vTaskSëThªadLoˇlSt‹agePoöãr
 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr


	)

74 
	#pvTaskGëThªadLoˇlSt‹agePoöãr
 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr


	)

75 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

76 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

77 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

78 
	#vTaskLi°
 
MPU_vTaskLi°


	)

79 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

80 
	#ulTaskGëIdÀRunTimeCou¡î
 
MPU_ulTaskGëIdÀRunTimeCou¡î


	)

81 
	#xTaskGíîicNŸify
 
MPU_xTaskGíîicNŸify


	)

82 
	#xTaskNŸifyWaô
 
MPU_xTaskNŸifyWaô


	)

83 
	#ulTaskNŸifyTake
 
MPU_ulTaskNŸifyTake


	)

84 
	#xTaskNŸifySèãCÀ¨
 
MPU_xTaskNŸifySèãCÀ¨


	)

85 
	#ulTaskNŸifyVÆueCÀ¨
 
MPU_ulTaskNŸifyVÆueCÀ¨


	)

86 
	#xTaskC©chUpTicks
 
MPU_xTaskC©chUpTicks


	)

88 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

89 
	#vTaskSëTimeOutSèã
 
MPU_vTaskSëTimeOutSèã


	)

90 
	#xTaskCheckF‹TimeOut
 
MPU_xTaskCheckF‹TimeOut


	)

91 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

94 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

95 
	#xQueueRe˚ive
 
MPU_xQueueRe˚ive


	)

96 
	#xQueuePìk
 
MPU_xQueuePìk


	)

97 
	#xQueueSem≠h‹eTake
 
MPU_xQueueSem≠h‹eTake


	)

98 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

99 
	#uxQueueS∑˚sAvaûabÀ
 
MPU_uxQueueS∑˚sAvaûabÀ


	)

100 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

101 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

102 
	#xQueueCª©eMuãxSètic
 
MPU_xQueueCª©eMuãxSètic


	)

103 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

104 
	#xQueueCª©eCou¡ögSem≠h‹eSètic
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic


	)

105 
	#xQueueGëMuãxHﬁdî
 
MPU_xQueueGëMuãxHﬁdî


	)

106 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

107 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

108 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

109 
	#xQueueGíîicCª©eSètic
 
MPU_xQueueGíîicCª©eSètic


	)

110 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

111 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

112 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

113 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

114 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

116 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

117 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

118 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

119 
	#pcQueueGëName
 
MPU_pcQueueGëName


	)

123 
	#xTimîCª©e
 
MPU_xTimîCª©e


	)

124 
	#xTimîCª©eSètic
 
MPU_xTimîCª©eSètic


	)

125 
	#pvTimîGëTimîID
 
MPU_pvTimîGëTimîID


	)

126 
	#vTimîSëTimîID
 
MPU_vTimîSëTimîID


	)

127 
	#xTimîIsTimîA˘ive
 
MPU_xTimîIsTimîA˘ive


	)

128 
	#xTimîGëTimîD´m⁄TaskH™dÀ
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ


	)

129 
	#xTimîPídFun˘i⁄CÆl
 
MPU_xTimîPídFun˘i⁄CÆl


	)

130 
	#pcTimîGëName
 
MPU_pcTimîGëName


	)

131 
	#vTimîSëRñﬂdMode
 
MPU_vTimîSëRñﬂdMode


	)

132 
	#uxTimîGëRñﬂdMode
 
MPU_uxTimîGëRñﬂdMode


	)

133 
	#xTimîGëPîiod
 
MPU_xTimîGëPîiod


	)

134 
	#xTimîGëExpúyTime
 
MPU_xTimîGëExpúyTime


	)

135 
	#xTimîGíîicComm™d
 
MPU_xTimîGíîicComm™d


	)

138 
	#xEvítGroupCª©e
 
MPU_xEvítGroupCª©e


	)

139 
	#xEvítGroupCª©eSètic
 
MPU_xEvítGroupCª©eSètic


	)

140 
	#xEvítGroupWaôBôs
 
MPU_xEvítGroupWaôBôs


	)

141 
	#xEvítGroupCÀ¨Bôs
 
MPU_xEvítGroupCÀ¨Bôs


	)

142 
	#xEvítGroupSëBôs
 
MPU_xEvítGroupSëBôs


	)

143 
	#xEvítGroupSync
 
MPU_xEvítGroupSync


	)

144 
	#vEvítGroupDñëe
 
MPU_vEvítGroupDñëe


	)

148 
	#xSåómBuf„rSíd
 
MPU_xSåómBuf„rSíd


	)

149 
	#xSåómBuf„rRe˚ive
 
MPU_xSåómBuf„rRe˚ive


	)

150 
	#xSåómBuf„rNextMesßgeLígthByãs
 
MPU_xSåómBuf„rNextMesßgeLígthByãs


	)

151 
	#vSåómBuf„rDñëe
 
MPU_vSåómBuf„rDñëe


	)

152 
	#xSåómBuf„rIsFuŒ
 
MPU_xSåómBuf„rIsFuŒ


	)

153 
	#xSåómBuf„rIsEm±y
 
MPU_xSåómBuf„rIsEm±y


	)

154 
	#xSåómBuf„rRe£t
 
MPU_xSåómBuf„rRe£t


	)

155 
	#xSåómBuf„rS∑˚sAvaûabÀ
 
MPU_xSåómBuf„rS∑˚sAvaûabÀ


	)

156 
	#xSåómBuf„rByãsAvaûabÀ
 
MPU_xSåómBuf„rByãsAvaûabÀ


	)

157 
	#xSåómBuf„rSëTriggîLevñ
 
MPU_xSåómBuf„rSëTriggîLevñ


	)

158 
	#xSåómBuf„rGíîicCª©e
 
MPU_xSåómBuf„rGíîicCª©e


	)

159 
	#xSåómBuf„rGíîicCª©eSètic
 
MPU_xSåómBuf„rGíîicCª©eSètic


	)

165 
	#PRIVILEGED_FUNCTION


	)

166 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

167 
	#FREERTOS_SYSTEM_CALL


	)

172 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

173 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

174 
	#FREERTOS_SYSTEM_CALL
 
	`__©åibuã__
((
	`£˘i⁄
–"‰ìπos_sy°em_ˇŒs")))

	)

180 
	#PRIVILEGED_FUNCTION


	)

181 
	#PRIVILEGED_DATA


	)

182 
	#FREERTOS_SYSTEM_CALL


	)

183 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h

32 #i‚de‡
PORTABLE_H


33 
	#PORTABLE_H


	)

45 
	~"dïªˇãd_deföôi⁄s.h
"

51 #i‚de‡
p‹tENTER_CRITICAL


52 
	~"p‹tma¸o.h
"

55 #i‡
p‹tBYTE_ALIGNMENT
 == 32

56 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x001‡)

	)

59 #i‡
p‹tBYTE_ALIGNMENT
 == 16

60 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x000‡)

	)

63 #i‡
p‹tBYTE_ALIGNMENT
 == 8

64 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

67 #i‡
p‹tBYTE_ALIGNMENT
 == 4

68 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

71 #i‡
p‹tBYTE_ALIGNMENT
 == 2

72 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

75 #i‡
p‹tBYTE_ALIGNMENT
 == 1

76 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

79 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


83 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


84 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

87 #i‚de‡
p‹tHAS_STACK_OVERFLOW_CHECKING


88 
	#p‹tHAS_STACK_OVERFLOW_CHECKING
 0

	)

91 #i‚de‡
p‹tARCH_NAME


92 
	#p‹tARCH_NAME
 
NULL


	)

95 #ifde‡
__˝lu•lus


99 
	~"mpu_wøµîs.h
"

107 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

108 #if–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

109 
SèckTy≥_t
 *
pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, SèckTy≥_à*
pxEndOfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

111 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

114 #if–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

115 
SèckTy≥_t
 *
	`pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, SèckTy≥_à*
pxEndOfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

117 
SèckTy≥_t
 *
	`pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

123 
	sHópRegi⁄


125 
uöt8_t
 *
pucSèπAddªss
;

126 
size_t
 
xSizeInByãs
;

127 } 
	tHópRegi⁄_t
;

130 
	sxHópSèts


132 
size_t
 
xAvaûabÀHópS∑˚InByãs
;

133 
size_t
 
xSizeOfL¨ge°FªeBlockInByãs
;

134 
size_t
 
xSizeOfSmÆÀ°FªeBlockInByãs
;

135 
size_t
 
xNumbîOfFªeBlocks
;

136 
size_t
 
xMöimumEvîFªeByãsRemaöög
;

137 
size_t
 
xNumbîOfSuc˚ssfulAŒoˇti⁄s
;

138 
size_t
 
xNumbîOfSuc˚ssfulFªes
;

139 } 
	tHópSèts_t
;

152 
	`vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

158 
	`vP‹tGëHópSèts
–
HópSèts_t
 *
pxHópSèts
 );

163 *
	`pvP‹tMÆloc
–
size_t
 
xSize
 ) 
PRIVILEGED_FUNCTION
;

164 
	`vP‹tFªe
–*
pv
 ) 
PRIVILEGED_FUNCTION
;

165 
	`vP‹tInôüli£Blocks
–Ë
PRIVILEGED_FUNCTION
;

166 
size_t
 
	`xP‹tGëFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

167 
size_t
 
	`xP‹tGëMöimumEvîFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

173 
Ba£Ty≥_t
 
	`xP‹tSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

180 
	`vP‹tEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

189 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

190 
xMEMORY_REGION
;

191 
	`vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt32_t
 
ulSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

194 #ifde‡
__˝lu•lus


195 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h

28 #i‚de‡
PROJDEFS_H


29 
	#PROJDEFS_H


	)

35 (*
	tTaskFun˘i⁄_t
)( * );

40 #i‚de‡
pdMS_TO_TICKS


41 
	#pdMS_TO_TICKS
–
xTimeInMs
 ) ( ( 
TickTy≥_t
 ) ( ( ( TickTy≥_àË–xTimeInM†Ë* ( TickTy≥_àË
c⁄figTICK_RATE_HZ
 ) / ( TickTy≥_àË1000 ) )

	)

44 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

45 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

47 
	#pdPASS
 ( 
pdTRUE
 )

	)

48 
	#pdFAIL
 ( 
pdFALSE
 )

	)

49 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

50 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

53 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

54 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

55 
	#îrQUEUE_YIELD
 ( -5 )

	)

58 #i‚de‡
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES


59 
	#c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 0

	)

62 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

63 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a

	)

65 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a5a5aUL

	)

70 
	#pdFREERTOS_ERRNO_NONE
 0

	)

71 
	#pdFREERTOS_ERRNO_ENOENT
 2

	)

72 
	#pdFREERTOS_ERRNO_EINTR
 4

	)

73 
	#pdFREERTOS_ERRNO_EIO
 5

	)

74 
	#pdFREERTOS_ERRNO_ENXIO
 6

	)

75 
	#pdFREERTOS_ERRNO_EBADF
 9

	)

76 
	#pdFREERTOS_ERRNO_EAGAIN
 11

	)

77 
	#pdFREERTOS_ERRNO_EWOULDBLOCK
 11

	)

78 
	#pdFREERTOS_ERRNO_ENOMEM
 12

	)

79 
	#pdFREERTOS_ERRNO_EACCES
 13

	)

80 
	#pdFREERTOS_ERRNO_EFAULT
 14

	)

81 
	#pdFREERTOS_ERRNO_EBUSY
 16

	)

82 
	#pdFREERTOS_ERRNO_EEXIST
 17

	)

83 
	#pdFREERTOS_ERRNO_EXDEV
 18

	)

84 
	#pdFREERTOS_ERRNO_ENODEV
 19

	)

85 
	#pdFREERTOS_ERRNO_ENOTDIR
 20

	)

86 
	#pdFREERTOS_ERRNO_EISDIR
 21

	)

87 
	#pdFREERTOS_ERRNO_EINVAL
 22

	)

88 
	#pdFREERTOS_ERRNO_ENOSPC
 28

	)

89 
	#pdFREERTOS_ERRNO_ESPIPE
 29

	)

90 
	#pdFREERTOS_ERRNO_EROFS
 30

	)

91 
	#pdFREERTOS_ERRNO_EUNATCH
 42

	)

92 
	#pdFREERTOS_ERRNO_EBADE
 50

	)

93 
	#pdFREERTOS_ERRNO_EFTYPE
 79

	)

94 
	#pdFREERTOS_ERRNO_ENMFILE
 89

	)

95 
	#pdFREERTOS_ERRNO_ENOTEMPTY
 90

	)

96 
	#pdFREERTOS_ERRNO_ENAMETOOLONG
 91

	)

97 
	#pdFREERTOS_ERRNO_EOPNOTSUPP
 95

	)

98 
	#pdFREERTOS_ERRNO_ENOBUFS
 105

	)

99 
	#pdFREERTOS_ERRNO_ENOPROTOOPT
 109

	)

100 
	#pdFREERTOS_ERRNO_EADDRINUSE
 112

	)

101 
	#pdFREERTOS_ERRNO_ETIMEDOUT
 116

	)

102 
	#pdFREERTOS_ERRNO_EINPROGRESS
 119

	)

103 
	#pdFREERTOS_ERRNO_EALREADY
 120

	)

104 
	#pdFREERTOS_ERRNO_EADDRNOTAVAIL
 125

	)

105 
	#pdFREERTOS_ERRNO_EISCONN
 127

	)

106 
	#pdFREERTOS_ERRNO_ENOTCONN
 128

	)

107 
	#pdFREERTOS_ERRNO_ENOMEDIUM
 135

	)

108 
	#pdFREERTOS_ERRNO_EILSEQ
 138

	)

109 
	#pdFREERTOS_ERRNO_ECANCELED
 140

	)

113 
	#pdFREERTOS_LITTLE_ENDIAN
 0

	)

114 
	#pdFREERTOS_BIG_ENDIAN
 1

	)

117 
	#pdLITTLE_ENDIAN
 
pdFREERTOS_LITTLE_ENDIAN


	)

118 
	#pdBIG_ENDIAN
 
pdFREERTOS_BIG_ENDIAN


	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/queue.h

29 #i‚de‡
QUEUE_H


30 
	#QUEUE_H


	)

32 #i‚de‡
INC_FREERTOS_H


33 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

36 #ifde‡
__˝lu•lus


40 
	~"èsk.h
"

47 
QueueDeföôi⁄
;

48 
QueueDeföôi⁄
 * 
	tQueueH™dÀ_t
;

55 
QueueDeföôi⁄
 * 
	tQueueSëH™dÀ_t
;

62 
QueueDeföôi⁄
 * 
	tQueueSëMembîH™dÀ_t
;

65 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

66 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

67 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

70 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

71 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

72 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

73 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

74 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

75 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

145 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

146 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

231 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

232 
	#xQueueCª©eSètic
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
pxQueueBuf„r
 ) 
	`xQueueGíîicCª©eSètic
––uxQueueLígth ), ( uxIãmSizê), (ÖucQueueSt‹agê), (ÖxQueueBuf„∏), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

313 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

395 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

479 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

562 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), 0, 
queueOVERWRITE
 )

	)

650 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

744 
Ba£Ty≥_t
 
xQueuePìk
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

777 
Ba£Ty≥_t
 
xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

868 
Ba£Ty≥_t
 
xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

883 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

900 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

914 
vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

984 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

1055 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1142 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueOVERWRITE
 )

	)

1216 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1295 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

1296 
Ba£Ty≥_t
 
xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1385 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1391 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1392 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1393 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1404 
Ba£Ty≥_t
 
xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, Ba£Ty≥_à
xCoRoutöePªviou¶yWokí
 );

1405 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, Ba£Ty≥_à*
pxTaskWokí
 );

1406 
Ba£Ty≥_t
 
xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 );

1407 
Ba£Ty≥_t
 
xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

1414 
QueueH™dÀ_t
 
xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1415 
QueueH™dÀ_t
 
xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1416 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

1417 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1418 
Ba£Ty≥_t
 
xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1419 
TaskH™dÀ_t
 
xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1420 
TaskH™dÀ_t
 
xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1426 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1427 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 ) 
PRIVILEGED_FUNCTION
;

1433 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1457 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1458 
vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcQueueName
 ) 
PRIVILEGED_FUNCTION
;

1471 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1472 
vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1486 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1487 c⁄° *
pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1495 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1496 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1504 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1505 
QueueH™dÀ_t
 
xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1556 
QueueSëH™dÀ_t
 
xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
PRIVILEGED_FUNCTION
;

1580 
Ba£Ty≥_t
 
xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1599 
Ba£Ty≥_t
 
xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1635 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1640 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1643 
vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

1644 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

1645 
vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

1646 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1647 
uöt8_t
 
ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1650 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h

28 #i‚de‡
SEMAPHORE_H


29 
	#SEMAPHORE_H


	)

31 #i‚de‡
INC_FREERTOS_H


32 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

35 
	~"queue.h
"

37 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

39 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

40 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

41 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

93 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

94 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

96 –
xSem≠h‹e
 ) = 
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

97 if––
xSem≠h‹e
 ) !
NULL
 ) \

99 –Ë
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

101 }

	)

161 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

162 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

220 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

221 
	#xSem≠h‹eCª©eBö¨ySètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueGíîicCª©eSètic
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
,ÖxSèticSem≠h‹e, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

289 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueSem≠h‹eTake
––xSem≠h‹ê), ( xBlockTimêË)

	)

382 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

383 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

447 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

531 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

532 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

624 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGiveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

658 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

715 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

716 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

776 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

777 
	#xSem≠h‹eCª©eMuãxSètic
–
pxMuãxBuf„r
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_MUTEX
, (ÖxMuãxBuf„∏Ë)

	)

844 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

845 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

917 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

918 
	#xSem≠h‹eCª©eRecursiveMuãxSètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
,ÖxSèticSem≠h‹ê)

	)

997 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

998 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

1082 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1083 
	#xSem≠h‹eCª©eCou¡ögSètic
–
uxMaxCou¡
, 
uxInôülCou¡
, 
pxSem≠h‹eBuf„r
 ) 
	`xQueueCª©eCou¡ögSem≠h‹eSètic
––uxMaxCou¡ ), ( uxInôülCou¡ ), (ÖxSem≠h‹eBuf„∏Ë)

	)

1098 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1113 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

1124 
	#xSem≠h‹eGëMuãxHﬁdîFromISR
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdîFromISR
––xSem≠h‹êË)

	)

1136 
	#uxSem≠h‹eGëCou¡
–
xSem≠h‹e
 ) 
	`uxQueueMesßgesWaôög
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/stack_macros.h

28 #i‚de‡
STACK_MACROS_H


29 
	#STACK_MACROS_H


	)

47 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

50 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

53 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

55 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

57 }

	)

62 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

65 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

69 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

71 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

73 }

	)

78 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

80 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

82 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

83 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

85 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

86 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

87 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

88 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

90 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

92 }

	)

97 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

99 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

101 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

102 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

103 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

104 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

105 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

106 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

109 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

112 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

114 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

116 }

	)

122 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


123 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/stream_buffer.h

51 #i‚de‡
STREAM_BUFFER_H


52 
	#STREAM_BUFFER_H


	)

54 #i‚de‡
INC_FREERTOS_H


58 #i‡
deföed
–
__˝lu•lus
 )

68 
SåómBuf„rDef_t
;

69 
SåómBuf„rDef_t
 * 
	tSåómBuf„rH™dÀ_t
;

137 
	#xSåómBuf„rCª©e
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
 ) 
	`xSåómBuf„rGíîicCª©e
–xBuf„rSizeByãs, xTriggîLevñByãs, 
pdFALSE
 )

	)

218 
	#xSåómBuf„rCª©eSètic
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
, 
pucSåómBuf„rSt‹ageAªa
, 
pxSèticSåómBuf„r
 ) 
	`xSåómBuf„rGíîicCª©eSètic
–xBuf„rSizeByãs, xTriggîLevñByãs, 
pdFALSE
,ÖucSåómBuf„rSt‹ageAªa,ÖxSèticSåómBuf„∏)

	)

312 
size_t
 
xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

313 c⁄° *
pvTxD©a
,

314 
size_t
 
xD©aLígthByãs
,

315 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

413 
size_t
 
xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

414 c⁄° *
pvTxD©a
,

415 
size_t
 
xD©aLígthByãs
,

416 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

502 
size_t
 
xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

503 *
pvRxD©a
,

504 
size_t
 
xBuf„rLígthByãs
,

505 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

588 
size_t
 
xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

589 *
pvRxD©a
,

590 
size_t
 
xBuf„rLígthByãs
,

591 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

613 
vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

633 
Ba£Ty≥_t
 
xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

653 
Ba£Ty≥_t
 
xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

676 
Ba£Ty≥_t
 
xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

697 
size_t
 
xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

718 
size_t
 
xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

755 
Ba£Ty≥_t
 
xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
size_t
 
xTriggîLevñ
 ) 
PRIVILEGED_FUNCTION
;

794 
Ba£Ty≥_t
 
xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

834 
Ba£Ty≥_t
 
xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

837 
SåómBuf„rH™dÀ_t
 
xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
,

838 
size_t
 
xTriggîLevñByãs
,

839 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

841 
SåómBuf„rH™dÀ_t
 
xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

842 
size_t
 
xTriggîLevñByãs
,

843 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

844 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

845 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

847 
size_t
 
xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

849 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

850 
vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 ) 
PRIVILEGED_FUNCTION
;

851 
UBa£Ty≥_t
 
uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

852 
uöt8_t
 
ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

855 #i‡
deföed
–
__˝lu•lus
 )

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/task.h

29 #i‚de‡
INC_TASK_H


30 
	#INC_TASK_H


	)

32 #i‚de‡
INC_FREERTOS_H


36 
	~"li°.h
"

38 #ifde‡
__˝lu•lus


46 
	#tskKERNEL_VERSION_NUMBER
 "V10.3.1"

	)

47 
	#tskKERNEL_VERSION_MAJOR
 10

	)

48 
	#tskKERNEL_VERSION_MINOR
 3

	)

49 
	#tskKERNEL_VERSION_BUILD
 1

	)

53 
	#tskMPU_REGION_READ_ONLY
 ( 1UL << 0UL )

	)

54 
	#tskMPU_REGION_READ_WRITE
 ( 1UL << 1UL )

	)

55 
	#tskMPU_REGION_EXECUTE_NEVER
 ( 1UL << 2UL )

	)

56 
	#tskMPU_REGION_NORMAL_MEMORY
 ( 1UL << 3UL )

	)

57 
	#tskMPU_REGION_DEVICE_MEMORY
 ( 1UL << 4UL )

	)

69 
tskTaskC⁄åﬁBlock
;

70 
tskTaskC⁄åﬁBlock
* 
	tTaskH™dÀ_t
;

76 
Ba£Ty≥_t
 (*
	tTaskHookFun˘i⁄_t
)( * );

81 
eRu¬ög
 = 0,

82 
eRódy
,

83 
eBlocked
,

84 
eSu•íded
,

85 
eDñëed
,

86 
eInvÆid


87 } 
	teTaskSèã
;

92 
eNoA˘i⁄
 = 0,

93 
eSëBôs
,

94 
eIn¸emít
,

95 
eSëVÆueWôhOvîwrôe
,

96 
eSëVÆueWôhoutOvîwrôe


97 } 
	teNŸifyA˘i⁄
;

102 
	sxTIME_OUT


104 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

105 
TickTy≥_t
 
xTimeOnE¡îög
;

106 } 
	tTimeOut_t
;

111 
	sxMEMORY_REGION


113 *
pvBa£Addªss
;

114 
uöt32_t
 
ulLígthInByãs
;

115 
uöt32_t
 
ulP¨amëîs
;

116 } 
	tMem‹yRegi⁄_t
;

121 
	sxTASK_PARAMETERS


123 
TaskFun˘i⁄_t
 
pvTaskCode
;

124 c⁄° * c⁄° 
pcName
;

125 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
;

126 *
pvP¨amëîs
;

127 
UBa£Ty≥_t
 
uxPri‹ôy
;

128 
SèckTy≥_t
 *
puxSèckBuf„r
;

129 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

130 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

131 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
;

133 } 
	tTaskP¨amëîs_t
;

137 
	sxTASK_STATUS


139 
TaskH™dÀ_t
 
xH™dÀ
;

140 c⁄° *
pcTaskName
;

141 
UBa£Ty≥_t
 
xTaskNumbî
;

142 
eTaskSèã
 
eCuºítSèã
;

143 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

144 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

145 
uöt32_t
 
ulRunTimeCou¡î
;

146 
SèckTy≥_t
 *
pxSèckBa£
;

147 
c⁄figSTACK_DEPTH_TYPE
 
usSèckHighW©îM¨k
;

148 } 
	tTaskSètus_t
;

153 
eAb‹tSÀï
 = 0,

154 
eSènd¨dSÀï
,

155 
eNoTasksWaôögTimeout


156 } 
	teSÀïModeSètus
;

163 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

173 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

187 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

188 
	#èskENTER_CRITICAL_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

202 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

203 
	#èskEXIT_CRITICAL_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–x )

	)

212 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

222 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

227 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

228 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

229 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

329 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

330 
Ba£Ty≥_t
 
xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

331 c⁄° * c⁄° 
pcName
,

332 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

333 * c⁄° 
pvP¨amëîs
,

334 
UBa£Ty≥_t
 
uxPri‹ôy
,

335 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

445 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

446 
TaskH™dÀ_t
 
xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

447 c⁄° * c⁄° 
pcName
,

448 c⁄° 
uöt32_t
 
ulSèckDïth
,

449 * c⁄° 
pvP¨amëîs
,

450 
UBa£Ty≥_t
 
uxPri‹ôy
,

451 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

452 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
PRIVILEGED_FUNCTION
;

527 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

528 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

615 #if––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

616 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

665 
vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

706 
vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

758 
vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

817 
vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

847 
Ba£Ty≥_t
 
xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

894 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

902 
UBa£Ty≥_t
 
uxTaskPri‹ôyGëFromISR
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

920 
eTaskSèã
 
eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

976 
vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

1018 
vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

1069 
vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

1118 
vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1147 
Ba£Ty≥_t
 
xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1180 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1236 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1287 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

1341 
Ba£Ty≥_t
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

1356 
TickTy≥_t
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1372 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1386 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1399 *
pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1415 
TaskH™dÀ_t
 
xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1442 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1469 
c⁄figSTACK_DEPTH_TYPE
 
uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1477 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1478 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1487 
vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1497 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1506 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTagFromISR
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1510 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1517 
vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 ) 
PRIVILEGED_FUNCTION
;

1518 *
pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 ) 
PRIVILEGED_FUNCTION
;

1533 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1542 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1641 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

1688 
vTaskLi°
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1742 
vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1772 
uöt32_t
 
ulTaskGëIdÀRunTimeCou¡î
–Ë
PRIVILEGED_FUNCTION
;

1853 
Ba£Ty≥_t
 
xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 ) 
PRIVILEGED_FUNCTION
;

1854 
	#xTaskNŸify
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
 )

	)

1855 
	#xTaskNŸifyAndQuîy
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifyVÆuêË)

	)

1944 
Ba£Ty≥_t
 
xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1945 
	#xTaskNŸifyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

1946 
	#xTaskNŸifyAndQuîyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifiˇti⁄VÆuê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

2021 
Ba£Ty≥_t
 
xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2067 
	#xTaskNŸifyGive
–
xTaskToNŸify
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

2122 
vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

2191 
uöt32_t
 
ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2207 
Ba£Ty≥_t
 
xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

2225 
uöt32_t
 
ulTaskNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
, uöt32_à
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

2239 
vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2322 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2343 
Ba£Ty≥_t
 
xTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

2376 
vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2377 
vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2390 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

2416 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

2417 
vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 ) 
PRIVILEGED_FUNCTION
;

2427 
p‹tDONT_DISCARD
 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

2433 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
–Ë
PRIVILEGED_FUNCTION
;

2438 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

2444 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

2450 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

2456 
Ba£Ty≥_t
 
xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2462 
Ba£Ty≥_t
 
xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2472 
vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
, 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 ) 
PRIVILEGED_FUNCTION
;

2477 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

2483 
vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 ) 
PRIVILEGED_FUNCTION
;

2493 
vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 ) 
PRIVILEGED_FUNCTION
;

2506 
Ba£Ty≥_t
 
xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 ) 
PRIVILEGED_FUNCTION
;

2522 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
–Ë
PRIVILEGED_FUNCTION
;

2528 
TaskH™dÀ_t
 
pvTaskIn¸emítMuãxHñdCou¡
–Ë
PRIVILEGED_FUNCTION
;

2534 
vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2537 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/timers.h

29 #i‚de‡
TIMERS_H


30 
	#TIMERS_H


	)

32 #i‚de‡
INC_FREERTOS_H


38 
	~"èsk.h
"

41 #ifde‡
__˝lu•lus


54 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

55 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

56 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

57 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

58 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

59 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

60 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

61 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

63 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

64 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

65 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

66 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

67 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

76 
tmrTimîC⁄åﬁ
;

77 
tmrTimîC⁄åﬁ
 * 
	tTimîH™dÀ_t
;

82 (*
TimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

88 (*
PídedFun˘i⁄_t
)–*, 
	tuöt32_t
 );

227 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

228 
TimîH™dÀ_t
 
xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

229 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

230 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

231 * c⁄° 
pvTimîID
,

232 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

357 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

358 
TimîH™dÀ_t
 
xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

359 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

360 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

361 * c⁄° 
pvTimîID
,

362 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

363 
SèticTimî_t
 *
pxTimîBuf„r
 ) 
PRIVILEGED_FUNCTION
;

386 *
pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

407 
vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 ) 
PRIVILEGED_FUNCTION
;

444 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

452 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

504 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

546 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

626 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xTicksToWaô ) )

	)

664 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

788 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

874 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

937 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1010 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1096 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1187 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1221 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1232 c⁄° * 
pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1249 
vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
 ) 
PRIVILEGED_FUNCTION
;

1263 
UBa£Ty≥_t
 
uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1274 
TickTy≥_t
 
xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1289 
TickTy≥_t
 
xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1295 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

1296 
Ba£Ty≥_t
 
xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1298 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1299 
vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
, 
UBa£Ty≥_t
 
uxTimîNumbî
 ) 
PRIVILEGED_FUNCTION
;

1300 
UBa£Ty≥_t
 
uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1303 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/list.c

29 
	~<°dlib.h
>

30 
	~"FªeRTOS.h
"

31 
	~"li°.h
"

37 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

42 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

46 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

50 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

51 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

53 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

57 
	`li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 );

58 
	`li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 );

59 
	}
}

62 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

65 
pxIãm
->
pxC⁄èöî
 = 
NULL
;

69 
	`li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

70 
	`li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

71 
	}
}

74 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

76 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

81 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

82 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

87 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

88 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

91 
	`mtCOVERAGE_TEST_DELAY
();

93 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

94 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

97 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

99 –
pxLi°
->
uxNumbîOfIãms
 )++;

100 
	}
}

103 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

105 
Li°Iãm_t
 *
pxIãøt‹
;

106 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

111 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

112 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

122 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

124 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

150  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

157 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

158 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

159 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

160 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

164 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

166 –
pxLi°
->
uxNumbîOfIãms
 )++;

167 
	}
}

170 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

174 
Li°_t
 * c⁄° 
pxLi°
 = 
pxIãmToRemove
->
pxC⁄èöî
;

176 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

177 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

180 
	`mtCOVERAGE_TEST_DELAY
();

183 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

185 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

189 
	`mtCOVERAGE_TEST_MARKER
();

192 
pxIãmToRemove
->
pxC⁄èöî
 = 
NULL
;

193 –
pxLi°
->
uxNumbîOfIãms
 )--;

195  
pxLi°
->
uxNumbîOfIãms
;

196 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c

33 
	~"FªeRTOS.h
"

34 
	~"èsk.h
"

39 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


40 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

43 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


44 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

46 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

50 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

54 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

55 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

56 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

57 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

59 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

60 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

61 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

62 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

63 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

65 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

66 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

69 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

70 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

71 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

72 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

73 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

74 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

75 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

76 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

79 
	#p‹tVECTACTIVE_MASK
 ( 0xFFUL )

	)

82 
	#p‹tINITIAL_XPSR
 ( 0x01000000UL )

	)

85 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

90 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

94 
	#p‹tSTART_ADDRESS_MASK
 ( ( 
SèckTy≥_t
 ) 0xffffff„UL )

	)

99 #ifde‡
c⁄figTASK_RETURN_ADDRESS


100 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

102 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

110 
vP‹tSëupTimîI¡îru±
( );

115 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

116 
	`xP‹tSysTickH™dÀr
( );

117 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

122 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

127 
	`¥vTaskExôEº‹
( );

133 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
 = 0xaaaaaaaa;

138 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

139 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

146 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

147 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

154 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

155 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

163 #if–
c⁄figASSERT_DEFINED
 == 1 )

164 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

165 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

166 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

174 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( ( 
SèckTy≥_t
 ) 
pxCode
 ) & 
p‹tSTART_ADDRESS_MASK
;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

184 
pxT›OfSèck
 -= 5;

185 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

186 
pxT›OfSèck
 -= 8;

188  
pxT›OfSèck
;

189 
	}
}

192 
	$¥vTaskExôEº‹
( )

194 vﬁ©ûê
uöt32_t
 
ulDummy
 = 0UL;

202 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

203 
	`p‹tDISABLE_INTERRUPTS
();

204  
ulDummy
 == 0 )

214 
	}
}

217 
	$vP‹tSVCH™dÀr
( )

219 
__asm
 volatile (

234 
	}
}

237 
	$¥vP‹tSèπFú°Task
( )

239 
__asm
 volatile(

251 
	}
}

257 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

261 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

263 #if–
c⁄figASSERT_DEFINED
 == 1 )

265 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

266 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

267 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

275 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

279 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

282 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

285 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

289 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

290  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

292 
ulMaxPRIGROUPVÆue
--;

293 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

296 #ifde‡
__NVIC_PRIO_BITS


301 
	`c⁄figASSERT
––
p‹tMAX_PRIGROUP_BITS
 - 
ulMaxPRIGROUPVÆue
 ) =
__NVIC_PRIO_BITS
 );

305 #ifde‡
c⁄figPRIO_BITS


310 
	`c⁄figASSERT
––
p‹tMAX_PRIGROUP_BITS
 - 
ulMaxPRIGROUPVÆue
 ) =
c⁄figPRIO_BITS
 );

316 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

317 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

321 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

326 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

327 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

331 
	`vP‹tSëupTimîI¡îru±
();

334 
uxCrôiˇlNe°ög
 = 0;

337 
	`¥vP‹tSèπFú°Task
();

345 
	`vTaskSwôchC⁄ãxt
();

346 
	`¥vTaskExôEº‹
();

350 
	}
}

353 
	$vP‹tEndScheduÀr
( )

357 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

358 
	}
}

361 
	$vP‹tE¡îCrôiˇl
( )

363 
	`p‹tDISABLE_INTERRUPTS
();

364 
uxCrôiˇlNe°ög
++;

371 if–
uxCrôiˇlNe°ög
 == 1 )

373 
	`c⁄figASSERT
––
p‹tNVIC_INT_CTRL_REG
 & 
p‹tVECTACTIVE_MASK
 ) == 0 );

375 
	}
}

378 
	$vP‹tExôCrôiˇl
( )

380 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

381 
uxCrôiˇlNe°ög
--;

382 if–
uxCrôiˇlNe°ög
 == 0 )

384 
	`p‹tENABLE_INTERRUPTS
();

386 
	}
}

389 
	$xP‹tPídSVH™dÀr
( )

393 
__asm
 volatile

421 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

423 
	}
}

426 
	$xP‹tSysTickH™dÀr
( )

432 
	`p‹tDISABLE_INTERRUPTS
();

435 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

439 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

442 
	`p‹tENABLE_INTERRUPTS
();

443 
	}
}

446 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

448 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

450 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
;

451 
TickTy≥_t
 
xModifübÀIdÀTime
;

454 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

456 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

463 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

468 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

469 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

471 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

476 
__asm
 volatile( "cpsid i" ::: "memory" );

477 
__asm
 volatile( "dsb" );

478 
__asm
 volatile( "isb" );

482 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

486 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

489 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

493 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

497 
__asm
 volatile( "cpsie i" ::: "memory" );

502 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

506 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

509 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

516 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

517 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

518 if–
xModifübÀIdÀTime
 > 0 )

520 
__asm
 volatile( "dsb" ::: "memory" );

521 
__asm
 volatile( "wfi" );

522 
__asm
 volatile( "isb" );

524 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

529 
__asm
 volatile( "cpsie i" ::: "memory" );

530 
__asm
 volatile( "dsb" );

531 
__asm
 volatile( "isb" );

537 
__asm
 volatile( "cpsid i" ::: "memory" );

538 
__asm
 volatile( "dsb" );

539 
__asm
 volatile( "isb" );

548 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 );

555 if––
p‹tNVIC_SYSTICK_CTRL_REG
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

557 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

563 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

568 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

570 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

573 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

578 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

586 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

590 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

594 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1UL ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

600 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

601 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

602 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

603 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

606 
__asm
 volatile( "cpsie i" ::: "memory" );

608 
	}
}

617 
__©åibuã__
(–
wók
 )Ë
	$vP‹tSëupTimîI¡îru±
( )

620 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

622 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

623 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

624 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

629 
p‹tNVIC_SYSTICK_CTRL_REG
 = 0UL;

630 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

633 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

634 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

635 
	}
}

638 #if–
c⁄figASSERT_DEFINED
 == 1 )

640 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

642 
uöt32_t
 
ulCuºítI¡îru±
;

643 
uöt8_t
 
ucCuºítPri‹ôy
;

646 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) :: "memory" );

649 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

652 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

677 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

693 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

694 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h

29 #i‚de‡
PORTMACRO_H


30 
	#PORTMACRO_H


	)

32 #ifde‡
__˝lu•lus


47 
	#p‹tCHAR
 

	)

48 
	#p‹tFLOAT
 

	)

49 
	#p‹tDOUBLE
 

	)

50 
	#p‹tLONG
 

	)

51 
	#p‹tSHORT
 

	)

52 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

53 
	#p‹tBASE_TYPE
 

	)

55 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

56 
	tBa£Ty≥_t
;

57 
	tUBa£Ty≥_t
;

59 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

60 
uöt16_t
 
	tTickTy≥_t
;

61 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

63 
uöt32_t
 
	tTickTy≥_t
;

64 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

68 
	#p‹tTICK_TYPE_IS_ATOMIC
 1

	)

73 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

74 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

75 
	#p‹tBYTE_ALIGNMENT
 8

	)

79 
	#p‹tYIELD
() \

82 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
; \

86 
__asm
 volatile( "dsb" ::: "memory" ); \

87 
__asm
 volatile( "isb" ); \

88 }

	)

90 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

91 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

92 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

93 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

97 
vP‹tE¡îCrôiˇl
( );

98 
vP‹tExôCrôiˇl
( );

99 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tRai£BASEPRI
()

	)

100 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tSëBASEPRI
(x)

	)

101 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tRai£BASEPRI
()

	)

102 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tSëBASEPRI
(0)

	)

103 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

104 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

111 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

112 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

116 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


117 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

118 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

123 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


124 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

127 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

130 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

132 
uöt8_t
 
	gucRëu∫
;

134 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) : "memory" );

135  
	gucRëu∫
;

139 #if–
c⁄figMAX_PRIORITIES
 > 32 )

140 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

144 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

145 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

149 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31UL - ( 
uöt32_t
 ) 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

155 #ifde‡
c⁄figASSERT


156 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

157 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

161 
	#p‹tNOP
()

	)

163 
	#p‹tINLINE
 
__ölöe


	)

165 #i‚de‡
p‹tFORCE_INLINE


166 
	#p‹tFORCE_INLINE
 
ölöe
 
	`__©åibuã__
(–
Æways_ölöe
))

	)

171 
p‹tFORCE_INLINE
 
Ba£Ty≥_t
 
xP‹tIsInsideI¡îru±
( )

173 
uöt32_t
 
	gulCuºítI¡îru±
;

174 
Ba£Ty≥_t
 
	gxRëu∫
;

177 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) :: "memory" );

179 if–
	gulCuºítI¡îru±
 == 0 )

181 
xRëu∫
 = 
pdFALSE
;

185 
	gxRëu∫
 = 
pdTRUE
;

188  
	gxRëu∫
;

193 
p‹tFORCE_INLINE
 
vP‹tRai£BASEPRI
( )

195 
uöt32_t
 
	gulNewBASEPRI
;

197 
__asm
 volatile

203 :"Ù" (
ulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "memory"

209 
p‹tFORCE_INLINE
 
uöt32_t
 
ulP‹tRai£BASEPRI
( )

211 
uöt32_t
 
	gulOrigöÆBASEPRI
, 
	gulNewBASEPRI
;

213 
__asm
 volatile

220 :"Ù" (
ulOrigöÆBASEPRI
), "Ù" (
	gulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "memory"

225  
	gulOrigöÆBASEPRI
;

229 
p‹tFORCE_INLINE
 
vP‹tSëBASEPRI
–
uöt32_t
 
ulNewMaskVÆue
 )

231 
__asm
 volatile

233 " m§ ba£¥i, %0 " :: "r" ( 
ulNewMaskVÆue
 ) : "memory"

238 
	#p‹tMEMORY_BARRIER
(Ë
__asm
 vﬁ©ûe–"" ::: "mem‹y" )

	)

240 #ifde‡
__˝lu•lus


	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c

36 
	~<°dlib.h
>

41 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

43 
	~"FªeRTOS.h
"

44 
	~"èsk.h
"

46 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


48 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

49 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

53 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

56 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

59 #if–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

62 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

64 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

69 
	sA_BLOCK_LINK


71 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

72 
size_t
 
	mxBlockSize
;

73 } 
	tBlockLök_t
;

83 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 );

89 
¥vHópInô
( );

95 c⁄° 
size_t
 
	gxHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

98 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

102 
size_t
 
	gxFªeByãsRemaöög
 = 0U;

103 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = 0U;

104 
size_t
 
	gxNumbîOfSuc˚ssfulAŒoˇti⁄s
 = 0;

105 
size_t
 
	gxNumbîOfSuc˚ssfulFªes
 = 0;

111 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

115 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

117 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

118 *
pvRëu∫
 = 
NULL
;

120 
	`vTaskSu•ídAŒ
();

124 if–
pxEnd
 =
NULL
 )

126 
	`¥vHópInô
();

130 
	`mtCOVERAGE_TEST_MARKER
();

137 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

141 if–
xW™ãdSize
 > 0 )

143 
xW™ãdSize
 +
xHópSåu˘Size
;

147 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

150 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

151 
	`c⁄figASSERT
––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

155 
	`mtCOVERAGE_TEST_MARKER
();

160 
	`mtCOVERAGE_TEST_MARKER
();

163 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

167 
pxPªviousBlock
 = &
xSèπ
;

168 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

169  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

171 
pxPªviousBlock
 = 
pxBlock
;

172 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

177 if–
pxBlock
 !
pxEnd
 )

181 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

185 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

189 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

195 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

196 
	`c⁄figASSERT
––––
size_t
 ) 
pxNewBlockLök
 ) & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

200 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

201 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

204 
	`¥vIn£πBlockI¡oFªeLi°
–
pxNewBlockLök
 );

208 
	`mtCOVERAGE_TEST_MARKER
();

211 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

213 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

215 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

219 
	`mtCOVERAGE_TEST_MARKER
();

224 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

225 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

226 
xNumbîOfSuc˚ssfulAŒoˇti⁄s
++;

230 
	`mtCOVERAGE_TEST_MARKER
();

235 
	`mtCOVERAGE_TEST_MARKER
();

240 
	`mtCOVERAGE_TEST_MARKER
();

243 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

245 –Ë
	`xTaskResumeAŒ
();

247 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

249 if–
pvRëu∫
 =
NULL
 )

251 
	`vAµliˇti⁄MÆlocFaûedHook
( );

252 
	`vAµliˇti⁄MÆlocFaûedHook
();

256 
	`mtCOVERAGE_TEST_MARKER
();

261 
	`c⁄figASSERT
––––
size_t
 ) 
pvRëu∫
 ) & ( size_àË
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

262  
pvRëu∫
;

263 
	}
}

266 
	$vP‹tFªe
–*
pv
 )

268 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

269 
BlockLök_t
 *
pxLök
;

271 if–
pv
 !
NULL
 )

275 
puc
 -
xHópSåu˘Size
;

278 
pxLök
 = ( * ) 
puc
;

281 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

282 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

284 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

286 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

290 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

292 
	`vTaskSu•ídAŒ
();

295 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

296 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

297 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

298 
xNumbîOfSuc˚ssfulFªes
++;

300 –Ë
	`xTaskResumeAŒ
();

304 
	`mtCOVERAGE_TEST_MARKER
();

309 
	`mtCOVERAGE_TEST_MARKER
();

312 
	}
}

315 
size_t
 
	$xP‹tGëFªeHópSize
( )

317  
xFªeByãsRemaöög
;

318 
	}
}

321 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

323  
xMöimumEvîFªeByãsRemaöög
;

324 
	}
}

327 
	$vP‹tInôüli£Blocks
( )

330 
	}
}

333 
	$¥vHópInô
( )

335 
BlockLök_t
 *
pxFú°FªeBlock
;

336 
uöt8_t
 *
pucAlig√dHóp
;

337 
size_t
 
uxAddªss
;

338 
size_t
 
xTŸÆHópSize
 = 
c⁄figTOTAL_HEAP_SIZE
;

341 
uxAddªss
 = ( 
size_t
 ) 
ucHóp
;

343 if––
uxAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

345 
uxAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

346 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

347 
xTŸÆHópSize
 -
uxAddªss
 - ( 
size_t
 ) 
ucHóp
;

350 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) 
uxAddªss
;

354 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

355 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

359 
uxAddªss
 = ( ( 
size_t
 ) 
pucAlig√dHóp
 ) + 
xTŸÆHópSize
;

360 
uxAddªss
 -
xHópSåu˘Size
;

361 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

362 
pxEnd
 = ( * ) 
uxAddªss
;

363 
pxEnd
->
xBlockSize
 = 0;

364 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

368 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

369 
pxFú°FªeBlock
->
xBlockSize
 = 
uxAddªss
 - ( 
size_t
 )ÖxFirstFreeBlock;

370 
pxFú°FªeBlock
->
pxNextFªeBlock
 = 
pxEnd
;

373 
xMöimumEvîFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

374 
xFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

377 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

378 
	}
}

381 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 )

383 
BlockLök_t
 *
pxIãøt‹
;

384 
uöt8_t
 *
puc
;

388  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

395 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

396 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

398 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

399 
pxBlockToIn£π
 = 
pxIãøt‹
;

403 
	`mtCOVERAGE_TEST_MARKER
();

408 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

409 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

411 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

414 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

415 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

419 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

424 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

431 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

433 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

437 
	`mtCOVERAGE_TEST_MARKER
();

439 
	}
}

442 
	$vP‹tGëHópSèts
–
HópSèts_t
 *
pxHópSèts
 )

444 
BlockLök_t
 *
pxBlock
;

445 
size_t
 
xBlocks
 = 0, 
xMaxSize
 = 0, 
xMöSize
 = 
p‹tMAX_DELAY
;

447 
	`vTaskSu•ídAŒ
();

449 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

453 if–
pxBlock
 !
NULL
 )

459 
xBlocks
++;

461 if–
pxBlock
->
xBlockSize
 > 
xMaxSize
 )

463 
xMaxSize
 = 
pxBlock
->
xBlockSize
;

466 if–
pxBlock
->
xBlockSize
 < 
xMöSize
 )

468 
xMöSize
 = 
pxBlock
->
xBlockSize
;

473 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

474 }  
pxBlock
 !
pxEnd
 );

477 
	`xTaskResumeAŒ
();

479 
pxHópSèts
->
xSizeOfL¨ge°FªeBlockInByãs
 = 
xMaxSize
;

480 
pxHópSèts
->
xSizeOfSmÆÀ°FªeBlockInByãs
 = 
xMöSize
;

481 
pxHópSèts
->
xNumbîOfFªeBlocks
 = 
xBlocks
;

483 
	`èskENTER_CRITICAL
();

485 
pxHópSèts
->
xAvaûabÀHópS∑˚InByãs
 = 
xFªeByãsRemaöög
;

486 
pxHópSèts
->
xNumbîOfSuc˚ssfulAŒoˇti⁄s
 = xNumberOfSuccessfulAllocations;

487 
pxHópSèts
->
xNumbîOfSuc˚ssfulFªes
 = xNumberOfSuccessfulFrees;

488 
pxHópSèts
->
xMöimumEvîFªeByãsRemaöög
 = xMinimumEverFreeBytesRemaining;

490 
	`èskEXIT_CRITICAL
();

491 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/queue.c

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

36 
	~"FªeRTOS.h
"

37 
	~"èsk.h
"

38 
	~"queue.h
"

40 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

41 
	~"¸outöe.h
"

48 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


52 
	#queueUNLOCKED
 ( ( 
öt8_t
 ) -1 )

	)

53 
	#queueLOCKED_UNMODIFIED
 ( ( 
öt8_t
 ) 0 )

	)

64 
	#uxQueueTy≥
 
pcHód


	)

65 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

67 
	sQueuePoöãrs


69 
öt8_t
 *
	mpcTaû
;

70 
öt8_t
 *
	mpcRódFrom
;

71 } 
	tQueuePoöãrs_t
;

73 
	sSem≠h‹eD©a


75 
TaskH™dÀ_t
 
	mxMuãxHﬁdî
;

76 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

77 } 
	tSem≠h‹eD©a_t
;

81 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

82 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

84 #if–
c⁄figUSE_PREEMPTION
 == 0 )

87 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

89 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

97 
	sQueueDeföôi⁄


99 
öt8_t
 *
	mpcHód
;

100 
öt8_t
 *
	mpcWrôeTo
;

104 
QueuePoöãrs_t
 
	mxQueue
;

105 
Sem≠h‹eD©a_t
 
	mxSem≠h‹e
;

106 } 
	mu
;

108 
Li°_t
 
	mxTasksWaôögToSíd
;

109 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

111 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

112 
UBa£Ty≥_t
 
	muxLígth
;

113 
UBa£Ty≥_t
 
	muxIãmSize
;

115 vﬁ©ûê
öt8_t
 
	mcRxLock
;

116 vﬁ©ûê
öt8_t
 
	mcTxLock
;

118 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

119 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

122 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

123 
QueueDeföôi⁄
 *
	mpxQueueSëC⁄èöî
;

126 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

127 
UBa£Ty≥_t
 
	muxQueueNumbî
;

128 
uöt8_t
 
	mucQueueTy≥
;

131 } 
	txQUEUE
;

135 
xQUEUE
 
	tQueue_t
;

143 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

148 
	sQUEUE_REGISTRY_ITEM


150 c⁄° *
	mpcQueueName
;

151 
QueueH™dÀ_t
 
	mxH™dÀ
;

152 } 
	txQueueRegi°ryIãm
;

157 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

162 
PRIVILEGED_DATA
 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

174 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

181 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

188 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

194 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

199 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

201 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

206 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

213 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, c⁄° uöt8_à
ucQueueTy≥
, 
Queue_t
 *
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

220 #if–
c⁄figUSE_MUTEXES
 == 1 )

221 
	$¥vInôüli£Muãx
–
Queue_t
 *
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

224 #if–
c⁄figUSE_MUTEXES
 == 1 )

232 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

240 
	#¥vLockQueue
–
pxQueue
 ) \

241 
	`èskENTER_CRITICAL
(); \

243 if––
pxQueue
 )->
cRxLock
 =
queueUNLOCKED
 ) \

245 –
pxQueue
 )->
cRxLock
 = 
queueLOCKED_UNMODIFIED
; \

247 if––
pxQueue
 )->
cTxLock
 =
queueUNLOCKED
 ) \

249 –
pxQueue
 )->
cTxLock
 = 
queueLOCKED_UNMODIFIED
; \

251 
	}
} \

252 
	`èskEXIT_CRITICAL
()

	)

255 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 
xNewQueue
 )

257 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

259 
	`c⁄figASSERT
–
pxQueue
 );

261 
	`èskENTER_CRITICAL
();

263 
pxQueue
->
u
.
xQueue
.
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

264 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

265 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

266 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - 1U ) *ÖxQueue->
uxIãmSize
 );

267 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

268 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

270 if–
xNewQueue
 =
pdFALSE
 )

277 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

279 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

281 
	`queueYIELD_IF_USING_PREEMPTION
();

285 
	`mtCOVERAGE_TEST_MARKER
();

290 
	`mtCOVERAGE_TEST_MARKER
();

296 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

297 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

300 
	`èskEXIT_CRITICAL
();

304  
pdPASS
;

305 
	}
}

308 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

310 
QueueH™dÀ_t
 
	$xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 )

312 
Queue_t
 *
pxNewQueue
;

314 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

318 
	`c⁄figASSERT
–
pxSèticQueue
 !
NULL
 );

322 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 !
NULL
 ) && ( 
uxIãmSize
 == 0 ) ) );

323 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 =
NULL
 ) && ( 
uxIãmSize
 != 0 ) ) );

325 #if–
c⁄figASSERT_DEFINED
 == 1 )

330 vﬁ©ûê
size_t
 
xSize
 = –
SèticQueue_t
 );

331 
	`c⁄figASSERT
–
xSize
 =–
Queue_t
 ) );

332 –Ë
xSize
;

339 
pxNewQueue
 = ( 
Queue_t
 * ) 
pxSèticQueue
;

341 if–
pxNewQueue
 !
NULL
 )

343 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

348 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

352 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

356 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

357 
	`mtCOVERAGE_TEST_MARKER
();

360  
pxNewQueue
;

361 
	}
}

366 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

368 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 )

370 
Queue_t
 *
pxNewQueue
;

371 
size_t
 
xQueueSizeInByãs
;

372 
uöt8_t
 *
pucQueueSt‹age
;

374 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

379 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 );

390 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

392 if–
pxNewQueue
 !
NULL
 )

396 
pucQueueSt‹age
 = ( 
uöt8_t
 * ) 
pxNewQueue
;

397 
pucQueueSt‹age
 +–
Queue_t
 );

399 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

404 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

408 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

412 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

413 
	`mtCOVERAGE_TEST_MARKER
();

416  
pxNewQueue
;

417 
	}
}

422 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, c⁄° uöt8_à
ucQueueTy≥
, 
Queue_t
 *
pxNewQueue
 )

426 –Ë
ucQueueTy≥
;

428 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

434 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

439 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
pucQueueSt‹age
;

444 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

445 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

446 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

448 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

450 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

454 #if–
c⁄figUSE_QUEUE_SETS
 == 1 )

456 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

460 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

461 
	}
}

464 #if–
c⁄figUSE_MUTEXES
 == 1 )

466 
	$¥vInôüli£Muãx
–
Queue_t
 *
pxNewQueue
 )

468 if–
pxNewQueue
 !
NULL
 )

474 
pxNewQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

475 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

478 
pxNewQueue
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 = 0;

480 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

483 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

487 
	`åa˚CREATE_MUTEX_FAILED
();

489 
	}
}

494 #if––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

496 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

498 
QueueH™dÀ_t
 
xNewQueue
;

499 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

501 
xNewQueue
 = 
	`xQueueGíîicCª©e
–
uxMuãxLígth
, 
uxMuãxSize
, 
ucQueueTy≥
 );

502 
	`¥vInôüli£Muãx
––
Queue_t
 * ) 
xNewQueue
 );

504  
xNewQueue
;

505 
	}
}

510 #if––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

512 
QueueH™dÀ_t
 
	$xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 )

514 
QueueH™dÀ_t
 
xNewQueue
;

515 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

519 –Ë
ucQueueTy≥
;

521 
xNewQueue
 = 
	`xQueueGíîicCª©eSètic
–
uxMuãxLígth
, 
uxMuãxSize
, 
NULL
, 
pxSèticQueue
, 
ucQueueTy≥
 );

522 
	`¥vInôüli£Muãx
––
Queue_t
 * ) 
xNewQueue
 );

524  
xNewQueue
;

525 
	}
}

530 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

532 
TaskH™dÀ_t
 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

534 
TaskH™dÀ_t
 
pxRëu∫
;

535 
Queue_t
 * c⁄° 
pxSem≠h‹e
 = ( Queue_à* ) 
xSem≠h‹e
;

542 
	`èskENTER_CRITICAL
();

544 if–
pxSem≠h‹e
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

546 
pxRëu∫
 = 
pxSem≠h‹e
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
;

550 
pxRëu∫
 = 
NULL
;

553 
	`èskEXIT_CRITICAL
();

555  
pxRëu∫
;

556 
	}
}

561 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

563 
TaskH™dÀ_t
 
	$xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

565 
TaskH™dÀ_t
 
pxRëu∫
;

567 
	`c⁄figASSERT
–
xSem≠h‹e
 );

572 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

574 
pxRëu∫
 = ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
u
.xSem≠h‹e.
xMuãxHﬁdî
;

578 
pxRëu∫
 = 
NULL
;

581  
pxRëu∫
;

582 
	}
}

587 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

589 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

591 
Ba£Ty≥_t
 
xRëu∫
;

592 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

594 
	`c⁄figASSERT
–
pxMuãx
 );

602 if–
pxMuãx
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

604 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

611 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )--;

614 if–
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

618 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

622 
	`mtCOVERAGE_TEST_MARKER
();

625 
xRëu∫
 = 
pdPASS
;

631 
xRëu∫
 = 
pdFAIL
;

633 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

636  
xRëu∫
;

637 
	}
}

642 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

644 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 )

646 
Ba£Ty≥_t
 
xRëu∫
;

647 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

649 
	`c⁄figASSERT
–
pxMuãx
 );

654 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

656 if–
pxMuãx
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

658 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )++;

659 
xRëu∫
 = 
pdPASS
;

663 
xRëu∫
 = 
	`xQueueSem≠h‹eTake
–
pxMuãx
, 
xTicksToWaô
 );

668 if–
xRëu∫
 !
pdFAIL
 )

670 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )++;

674 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

678  
xRëu∫
;

679 
	}
}

684 #if––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

686 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 )

688 
QueueH™dÀ_t
 
xH™dÀ
;

690 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

691 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

693 
xH™dÀ
 = 
	`xQueueGíîicCª©eSètic
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
, 
pxSèticQueue
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

695 if–
xH™dÀ
 !
NULL
 )

697 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

699 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

703 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

706  
xH™dÀ
;

707 
	}
}

712 #if––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

714 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 )

716 
QueueH™dÀ_t
 
xH™dÀ
;

718 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

719 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

721 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

723 if–
xH™dÀ
 !
NULL
 )

725 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

727 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

731 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

734  
xH™dÀ
;

735 
	}
}

740 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

742 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

743 
TimeOut_t
 
xTimeOut
;

744 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

746 
	`c⁄figASSERT
–
pxQueue
 );

747 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

748 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

749 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

751 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

761 
	`èskENTER_CRITICAL
();

767 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

769 
	`åa˚QUEUE_SEND
–
pxQueue
 );

771 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

773 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

775 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

777 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

779 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

784 
	`mtCOVERAGE_TEST_MARKER
();

786 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

791 
	`queueYIELD_IF_USING_PREEMPTION
();

795 
	`mtCOVERAGE_TEST_MARKER
();

802 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

804 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

810 
	`queueYIELD_IF_USING_PREEMPTION
();

814 
	`mtCOVERAGE_TEST_MARKER
();

817 if–
xYõldRequúed
 !
pdFALSE
 )

823 
	`queueYIELD_IF_USING_PREEMPTION
();

827 
	`mtCOVERAGE_TEST_MARKER
();

833 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

837 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

839 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

845 
	`queueYIELD_IF_USING_PREEMPTION
();

849 
	`mtCOVERAGE_TEST_MARKER
();

852 if–
xYõldRequúed
 !
pdFALSE
 )

858 
	`queueYIELD_IF_USING_PREEMPTION
();

862 
	`mtCOVERAGE_TEST_MARKER
();

867 
	`èskEXIT_CRITICAL
();

868  
pdPASS
;

872 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

876 
	`èskEXIT_CRITICAL
();

880 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

881  
îrQUEUE_FULL
;

883 if–
xE¡ryTimeSë
 =
pdFALSE
 )

887 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

888 
xE¡ryTimeSë
 = 
pdTRUE
;

893 
	`mtCOVERAGE_TEST_MARKER
();

897 
	`èskEXIT_CRITICAL
();

902 
	`vTaskSu•ídAŒ
();

903 
	`¥vLockQueue
–
pxQueue
 );

906 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

908 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

910 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

911 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

918 
	`¥vU∆ockQueue
–
pxQueue
 );

925 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

927 
	`p‹tYIELD_WITHIN_API
();

933 
	`¥vU∆ockQueue
–
pxQueue
 );

934 –Ë
	`xTaskResumeAŒ
();

940 
	`¥vU∆ockQueue
–
pxQueue
 );

941 –Ë
	`xTaskResumeAŒ
();

943 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

944  
îrQUEUE_FULL
;

947 
	}
}

950 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 )

952 
Ba£Ty≥_t
 
xRëu∫
;

953 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

954 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

956 
	`c⁄figASSERT
–
pxQueue
 );

957 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

958 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

974 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

981 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

983 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

985 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

986 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

988 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

995 –Ë
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

999 if–
cTxLock
 =
queueUNLOCKED
 )

1001 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1003 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1005 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

1010 
	`mtCOVERAGE_TEST_MARKER
();

1012 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

1017 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1019 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1023 
	`mtCOVERAGE_TEST_MARKER
();

1028 
	`mtCOVERAGE_TEST_MARKER
();

1033 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1035 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1039 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1041 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1045 
	`mtCOVERAGE_TEST_MARKER
();

1050 
	`mtCOVERAGE_TEST_MARKER
();

1055 
	`mtCOVERAGE_TEST_MARKER
();

1061 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1063 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1067 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1069 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1073 
	`mtCOVERAGE_TEST_MARKER
();

1078 
	`mtCOVERAGE_TEST_MARKER
();

1083 
	`mtCOVERAGE_TEST_MARKER
();

1087 –Ë
uxPªviousMesßgesWaôög
;

1095 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1098 
xRëu∫
 = 
pdPASS
;

1102 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1103 
xRëu∫
 = 
îrQUEUE_FULL
;

1106 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1108  
xRëu∫
;

1109 
	}
}

1112 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1114 
Ba£Ty≥_t
 
xRëu∫
;

1115 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1116 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1124 
	`c⁄figASSERT
–
pxQueue
 );

1128 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1133 
	`c⁄figASSERT
–!––
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 ) && (ÖxQueue->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 !
NULL
 ) ) );

1149 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1151 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1153 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1158 if–
uxMesßgesWaôög
 < 
pxQueue
->
uxLígth
 )

1160 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1162 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1170 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

1174 if–
cTxLock
 =
queueUNLOCKED
 )

1176 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1178 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1180 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

1185 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1187 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1191 
	`mtCOVERAGE_TEST_MARKER
();

1196 
	`mtCOVERAGE_TEST_MARKER
();

1201 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1203 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1207 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1209 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1213 
	`mtCOVERAGE_TEST_MARKER
();

1218 
	`mtCOVERAGE_TEST_MARKER
();

1223 
	`mtCOVERAGE_TEST_MARKER
();

1229 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1231 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1235 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1237 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1241 
	`mtCOVERAGE_TEST_MARKER
();

1246 
	`mtCOVERAGE_TEST_MARKER
();

1251 
	`mtCOVERAGE_TEST_MARKER
();

1260 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1263 
xRëu∫
 = 
pdPASS
;

1267 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1268 
xRëu∫
 = 
îrQUEUE_FULL
;

1271 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1273  
xRëu∫
;

1274 
	}
}

1277 
Ba£Ty≥_t
 
	$xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

1279 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1280 
TimeOut_t
 
xTimeOut
;

1281 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1284 
	`c⁄figASSERT
––
pxQueue
 ) );

1288 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1291 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1293 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1303 
	`èskENTER_CRITICAL
();

1305 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1309 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1312 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1313 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1314 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1319 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1321 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1323 
	`queueYIELD_IF_USING_PREEMPTION
();

1327 
	`mtCOVERAGE_TEST_MARKER
();

1332 
	`mtCOVERAGE_TEST_MARKER
();

1335 
	`èskEXIT_CRITICAL
();

1336  
pdPASS
;

1340 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1344 
	`èskEXIT_CRITICAL
();

1345 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1346  
îrQUEUE_EMPTY
;

1348 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1352 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1353 
xE¡ryTimeSë
 = 
pdTRUE
;

1358 
	`mtCOVERAGE_TEST_MARKER
();

1362 
	`èskEXIT_CRITICAL
();

1367 
	`vTaskSu•ídAŒ
();

1368 
	`¥vLockQueue
–
pxQueue
 );

1371 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1375 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1377 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1378 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1379 
	`¥vU∆ockQueue
–
pxQueue
 );

1380 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1382 
	`p‹tYIELD_WITHIN_API
();

1386 
	`mtCOVERAGE_TEST_MARKER
();

1393 
	`¥vU∆ockQueue
–
pxQueue
 );

1394 –Ë
	`xTaskResumeAŒ
();

1401 
	`¥vU∆ockQueue
–
pxQueue
 );

1402 –Ë
	`xTaskResumeAŒ
();

1404 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1406 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1407  
îrQUEUE_EMPTY
;

1411 
	`mtCOVERAGE_TEST_MARKER
();

1415 
	}
}

1418 
Ba£Ty≥_t
 
	$xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

1420 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1421 
TimeOut_t
 
xTimeOut
;

1422 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1424 #if–
c⁄figUSE_MUTEXES
 == 1 )

1425 
Ba£Ty≥_t
 
xInhîô™˚Occuºed
 = 
pdFALSE
;

1429 
	`c⁄figASSERT
––
pxQueue
 ) );

1433 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1436 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1438 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1448 
	`èskENTER_CRITICAL
();

1452 c⁄° 
UBa£Ty≥_t
 
uxSem≠h‹eCou¡
 = 
pxQueue
->
uxMesßgesWaôög
;

1456 if–
uxSem≠h‹eCou¡
 > ( 
UBa£Ty≥_t
 ) 0 )

1458 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1462 
pxQueue
->
uxMesßgesWaôög
 = 
uxSem≠h‹eCou¡
 - ( 
UBa£Ty≥_t
 ) 1;

1464 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1466 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1470 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
	`pvTaskIn¸emítMuãxHñdCou¡
();

1474 
	`mtCOVERAGE_TEST_MARKER
();

1481 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1483 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1485 
	`queueYIELD_IF_USING_PREEMPTION
();

1489 
	`mtCOVERAGE_TEST_MARKER
();

1494 
	`mtCOVERAGE_TEST_MARKER
();

1497 
	`èskEXIT_CRITICAL
();

1498  
pdPASS
;

1502 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1507 #if–
c⁄figUSE_MUTEXES
 == 1 )

1509 
	`c⁄figASSERT
–
xInhîô™˚Occuºed
 =
pdFALSE
 );

1515 
	`èskEXIT_CRITICAL
();

1516 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1517  
îrQUEUE_EMPTY
;

1519 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1523 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1524 
xE¡ryTimeSë
 = 
pdTRUE
;

1529 
	`mtCOVERAGE_TEST_MARKER
();

1533 
	`èskEXIT_CRITICAL
();

1538 
	`vTaskSu•ídAŒ
();

1539 
	`¥vLockQueue
–
pxQueue
 );

1542 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1548 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1550 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1552 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1554 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1556 
	`èskENTER_CRITICAL
();

1558 
xInhîô™˚Occuºed
 = 
	`xTaskPri‹ôyInhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

1560 
	`èskEXIT_CRITICAL
();

1564 
	`mtCOVERAGE_TEST_MARKER
();

1569 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1570 
	`¥vU∆ockQueue
–
pxQueue
 );

1571 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1573 
	`p‹tYIELD_WITHIN_API
();

1577 
	`mtCOVERAGE_TEST_MARKER
();

1584 
	`¥vU∆ockQueue
–
pxQueue
 );

1585 –Ë
	`xTaskResumeAŒ
();

1591 
	`¥vU∆ockQueue
–
pxQueue
 );

1592 –Ë
	`xTaskResumeAŒ
();

1598 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1600 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1605 if–
xInhîô™˚Occuºed
 !
pdFALSE
 )

1607 
	`èskENTER_CRITICAL
();

1609 
UBa£Ty≥_t
 
uxHighe°WaôögPri‹ôy
;

1616 
uxHighe°WaôögPri‹ôy
 = 
	`¥vGëDisöhîôPri‹ôyA·îTimeout
–
pxQueue
 );

1617 
	`vTaskPri‹ôyDisöhîôA·îTimeout
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
, 
uxHighe°WaôögPri‹ôy
 );

1619 
	`èskEXIT_CRITICAL
();

1624 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1625  
îrQUEUE_EMPTY
;

1629 
	`mtCOVERAGE_TEST_MARKER
();

1633 
	}
}

1636 
Ba£Ty≥_t
 
	$xQueuePìk
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

1638 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1639 
TimeOut_t
 
xTimeOut
;

1640 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1641 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1644 
	`c⁄figASSERT
––
pxQueue
 ) );

1648 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1651 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1653 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1663 
	`èskENTER_CRITICAL
();

1665 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1669 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1674 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
xQueue
.
pcRódFrom
;

1676 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1677 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1680 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1684 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1686 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1689 
	`queueYIELD_IF_USING_PREEMPTION
();

1693 
	`mtCOVERAGE_TEST_MARKER
();

1698 
	`mtCOVERAGE_TEST_MARKER
();

1701 
	`èskEXIT_CRITICAL
();

1702  
pdPASS
;

1706 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1710 
	`èskEXIT_CRITICAL
();

1711 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1712  
îrQUEUE_EMPTY
;

1714 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1719 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1720 
xE¡ryTimeSë
 = 
pdTRUE
;

1725 
	`mtCOVERAGE_TEST_MARKER
();

1729 
	`èskEXIT_CRITICAL
();

1734 
	`vTaskSu•ídAŒ
();

1735 
	`¥vLockQueue
–
pxQueue
 );

1738 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1742 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1744 
	`åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 );

1745 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1746 
	`¥vU∆ockQueue
–
pxQueue
 );

1747 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1749 
	`p‹tYIELD_WITHIN_API
();

1753 
	`mtCOVERAGE_TEST_MARKER
();

1760 
	`¥vU∆ockQueue
–
pxQueue
 );

1761 –Ë
	`xTaskResumeAŒ
();

1768 
	`¥vU∆ockQueue
–
pxQueue
 );

1769 –Ë
	`xTaskResumeAŒ
();

1771 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1773 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1774  
îrQUEUE_EMPTY
;

1778 
	`mtCOVERAGE_TEST_MARKER
();

1782 
	}
}

1785 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1787 
Ba£Ty≥_t
 
xRëu∫
;

1788 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1789 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1791 
	`c⁄figASSERT
–
pxQueue
 );

1792 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1808 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1810 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1812 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1815 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1817 c⁄° 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

1819 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1821 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1822 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1828 if–
cRxLock
 =
queueUNLOCKED
 )

1830 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1832 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1836 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1838 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1842 
	`mtCOVERAGE_TEST_MARKER
();

1847 
	`mtCOVERAGE_TEST_MARKER
();

1852 
	`mtCOVERAGE_TEST_MARKER
();

1859 
pxQueue
->
cRxLock
 = ( 
öt8_t
 ) ( cRxLock + 1 );

1862 
xRëu∫
 = 
pdPASS
;

1866 
xRëu∫
 = 
pdFAIL
;

1867 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1870 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1872  
xRëu∫
;

1873 
	}
}

1876 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 )

1878 
Ba£Ty≥_t
 
xRëu∫
;

1879 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1880 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1881 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1883 
	`c⁄figASSERT
–
pxQueue
 );

1884 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1885 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 != 0 );

1901 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1903 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1906 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1908 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

1912 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
xQueue
.
pcRódFrom
;

1913 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1914 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1916 
xRëu∫
 = 
pdPASS
;

1920 
xRëu∫
 = 
pdFAIL
;

1921 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

1924 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1926  
xRëu∫
;

1927 
	}
}

1930 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1932 
UBa£Ty≥_t
 
uxRëu∫
;

1934 
	`c⁄figASSERT
–
xQueue
 );

1936 
	`èskENTER_CRITICAL
();

1938 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1940 
	`èskEXIT_CRITICAL
();

1942  
uxRëu∫
;

1943 
	}
}

1946 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1948 
UBa£Ty≥_t
 
uxRëu∫
;

1949 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1951 
	`c⁄figASSERT
–
pxQueue
 );

1953 
	`èskENTER_CRITICAL
();

1955 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

1957 
	`èskEXIT_CRITICAL
();

1959  
uxRëu∫
;

1960 
	}
}

1963 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1965 
UBa£Ty≥_t
 
uxRëu∫
;

1966 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1968 
	`c⁄figASSERT
–
pxQueue
 );

1969 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1971  
uxRëu∫
;

1972 
	}
}

1975 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

1977 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1979 
	`c⁄figASSERT
–
pxQueue
 );

1980 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1982 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1984 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1988 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

1992 
	`vP‹tFªe
–
pxQueue
 );

1994 #ñif––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

1998 if–
pxQueue
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

2000 
	`vP‹tFªe
–
pxQueue
 );

2004 
	`mtCOVERAGE_TEST_MARKER
();

2011 –Ë
pxQueue
;

2014 
	}
}

2017 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2019 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

2021  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

2022 
	}
}

2027 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2029 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 )

2031 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

2032 
	}
}

2037 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2039 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

2041  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

2042 
	}
}

2047 #if–
c⁄figUSE_MUTEXES
 == 1 )

2049 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

2051 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyOfWaôögTasks
;

2059 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) > 0U )

2061 
uxHighe°Pri‹ôyOfWaôögTasks
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBa£Ty≥_àË
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2065 
uxHighe°Pri‹ôyOfWaôögTasks
 = 
tskIDLE_PRIORITY
;

2068  
uxHighe°Pri‹ôyOfWaôögTasks
;

2069 
	}
}

2074 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

2076 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2077 
UBa£Ty≥_t
 
uxMesßgesWaôög
;

2081 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

2083 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

2085 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2087 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

2090 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

2091 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

2095 
	`mtCOVERAGE_TEST_MARKER
();

2100 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

2102 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2103 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

2104 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
u
.
xQueue
.
pcTaû
 )

2106 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

2110 
	`mtCOVERAGE_TEST_MARKER
();

2115 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2116 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

2117 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

2119 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = (ÖxQueue->u.xQueue.
pcTaû
 -ÖxQueue->
uxIãmSize
 );

2123 
	`mtCOVERAGE_TEST_MARKER
();

2126 if–
xPosôi⁄
 =
queueOVERWRITE
 )

2128 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2134 --
uxMesßgesWaôög
;

2138 
	`mtCOVERAGE_TEST_MARKER
();

2143 
	`mtCOVERAGE_TEST_MARKER
();

2147 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

2149  
xRëu∫
;

2150 
	}
}

2153 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 )

2155 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

2157 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2158 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2160 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2164 
	`mtCOVERAGE_TEST_MARKER
();

2166 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2168 
	}
}

2171 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

2179 
	`èskENTER_CRITICAL
();

2181 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

2184  
cTxLock
 > 
queueLOCKED_UNMODIFIED
 )

2188 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2190 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

2192 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

2197 
	`vTaskMis£dYõld
();

2201 
	`mtCOVERAGE_TEST_MARKER
();

2209 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2211 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2215 
	`vTaskMis£dYõld
();

2219 
	`mtCOVERAGE_TEST_MARKER
();

2232 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2234 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2238 
	`vTaskMis£dYõld
();

2242 
	`mtCOVERAGE_TEST_MARKER
();

2252 --
cTxLock
;

2255 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

2257 
	`èskEXIT_CRITICAL
();

2260 
	`èskENTER_CRITICAL
();

2262 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

2264  
cRxLock
 > 
queueLOCKED_UNMODIFIED
 )

2266 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2268 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2270 
	`vTaskMis£dYõld
();

2274 
	`mtCOVERAGE_TEST_MARKER
();

2277 --
cRxLock
;

2285 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

2287 
	`èskEXIT_CRITICAL
();

2288 
	}
}

2291 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 )

2293 
Ba£Ty≥_t
 
xRëu∫
;

2295 
	`èskENTER_CRITICAL
();

2297 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2299 
xRëu∫
 = 
pdTRUE
;

2303 
xRëu∫
 = 
pdFALSE
;

2306 
	`èskEXIT_CRITICAL
();

2308  
xRëu∫
;

2309 
	}
}

2312 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2314 
Ba£Ty≥_t
 
xRëu∫
;

2315 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2317 
	`c⁄figASSERT
–
pxQueue
 );

2318 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2320 
xRëu∫
 = 
pdTRUE
;

2324 
xRëu∫
 = 
pdFALSE
;

2327  
xRëu∫
;

2328 
	}
}

2331 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 )

2333 
Ba£Ty≥_t
 
xRëu∫
;

2335 
	`èskENTER_CRITICAL
();

2337 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2339 
xRëu∫
 = 
pdTRUE
;

2343 
xRëu∫
 = 
pdFALSE
;

2346 
	`èskEXIT_CRITICAL
();

2348  
xRëu∫
;

2349 
	}
}

2352 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2354 
Ba£Ty≥_t
 
xRëu∫
;

2355 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2357 
	`c⁄figASSERT
–
pxQueue
 );

2358 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2360 
xRëu∫
 = 
pdTRUE
;

2364 
xRëu∫
 = 
pdFALSE
;

2367  
xRëu∫
;

2368 
	}
}

2371 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2373 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

2375 
Ba£Ty≥_t
 
xRëu∫
;

2376 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2381 
	`p‹tDISABLE_INTERRUPTS
();

2383 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

2387 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2391 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

2392 
	`p‹tENABLE_INTERRUPTS
();

2393  
îrQUEUE_BLOCKED
;

2397 
	`p‹tENABLE_INTERRUPTS
();

2398  
îrQUEUE_FULL
;

2402 
	`p‹tENABLE_INTERRUPTS
();

2404 
	`p‹tDISABLE_INTERRUPTS
();

2406 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2409 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2410 
xRëu∫
 = 
pdPASS
;

2413 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2419 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2423 
xRëu∫
 = 
îrQUEUE_YIELD
;

2427 
	`mtCOVERAGE_TEST_MARKER
();

2432 
	`mtCOVERAGE_TEST_MARKER
();

2437 
xRëu∫
 = 
îrQUEUE_FULL
;

2440 
	`p‹tENABLE_INTERRUPTS
();

2442  
xRëu∫
;

2443 
	}
}

2448 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2450 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

2452 
Ba£Ty≥_t
 
xRëu∫
;

2453 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2458 
	`p‹tDISABLE_INTERRUPTS
();

2460 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2464 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2468 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2469 
	`p‹tENABLE_INTERRUPTS
();

2470  
îrQUEUE_BLOCKED
;

2474 
	`p‹tENABLE_INTERRUPTS
();

2475  
îrQUEUE_FULL
;

2480 
	`mtCOVERAGE_TEST_MARKER
();

2483 
	`p‹tENABLE_INTERRUPTS
();

2485 
	`p‹tDISABLE_INTERRUPTS
();

2487 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2490 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2491 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2493 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2497 
	`mtCOVERAGE_TEST_MARKER
();

2499 --–
pxQueue
->
uxMesßgesWaôög
 );

2500 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2502 
xRëu∫
 = 
pdPASS
;

2505 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2511 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2513 
xRëu∫
 = 
îrQUEUE_YIELD
;

2517 
	`mtCOVERAGE_TEST_MARKER
();

2522 
	`mtCOVERAGE_TEST_MARKER
();

2527 
xRëu∫
 = 
pdFAIL
;

2530 
	`p‹tENABLE_INTERRUPTS
();

2532  
xRëu∫
;

2533 
	}
}

2538 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2540 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2542 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2546 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2548 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2552 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2554 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2556 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2558  
pdTRUE
;

2562 
	`mtCOVERAGE_TEST_MARKER
();

2567 
	`mtCOVERAGE_TEST_MARKER
();

2572 
	`mtCOVERAGE_TEST_MARKER
();

2577 
	`mtCOVERAGE_TEST_MARKER
();

2580  
xCoRoutöePªviou¶yWokí
;

2581 
	}
}

2586 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2588 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
Ba£Ty≥_t
 *
pxCoRoutöeWokí
 )

2590 
Ba£Ty≥_t
 
xRëu∫
;

2591 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2595 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2598 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2599 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2601 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2605 
	`mtCOVERAGE_TEST_MARKER
();

2607 --–
pxQueue
->
uxMesßgesWaôög
 );

2608 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2610 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2612 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2614 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2616 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2620 
	`mtCOVERAGE_TEST_MARKER
();

2625 
	`mtCOVERAGE_TEST_MARKER
();

2630 
	`mtCOVERAGE_TEST_MARKER
();

2633 
xRëu∫
 = 
pdPASS
;

2637 
xRëu∫
 = 
pdFAIL
;

2640  
xRëu∫
;

2641 
	}
}

2646 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2648 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcQueueName
 )

2650 
UBa£Ty≥_t
 
ux
;

2654  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2656 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

2659 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

2660 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

2662 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2667 
	`mtCOVERAGE_TEST_MARKER
();

2670 
	}
}

2675 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2677 c⁄° *
	$pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 )

2679 
UBa£Ty≥_t
 
ux
;

2680 c⁄° *
pcRëu∫
 = 
NULL
;

2684  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2686 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2688 
pcRëu∫
 = 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
;

2693 
	`mtCOVERAGE_TEST_MARKER
();

2697  
pcRëu∫
;

2698 
	}
}

2703 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2705 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2707 
UBa£Ty≥_t
 
ux
;

2711  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2713 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2716 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2721 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = ( 
QueueH™dÀ_t
 ) 0;

2726 
	`mtCOVERAGE_TEST_MARKER
();

2730 
	}
}

2735 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2737 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2739 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2755 
	`¥vLockQueue
–
pxQueue
 );

2756 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2759 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
, 
xWaôIndeföôñy
 );

2763 
	`mtCOVERAGE_TEST_MARKER
();

2765 
	`¥vU∆ockQueue
–
pxQueue
 );

2766 
	}
}

2771 #if––
c⁄figUSE_QUEUE_SETS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

2773 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2775 
QueueSëH™dÀ_t
 
pxQueue
;

2777 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, ( 
UBa£Ty≥_t
 ) –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2779  
pxQueue
;

2780 
	}
}

2785 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2787 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2789 
Ba£Ty≥_t
 
xRëu∫
;

2791 
	`èskENTER_CRITICAL
();

2793 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2796 
xRëu∫
 = 
pdFAIL
;

2798 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2802 
xRëu∫
 = 
pdFAIL
;

2806 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2807 
xRëu∫
 = 
pdPASS
;

2810 
	`èskEXIT_CRITICAL
();

2812  
xRëu∫
;

2813 
	}
}

2818 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2820 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2822 
Ba£Ty≥_t
 
xRëu∫
;

2823 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2825 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2828 
xRëu∫
 = 
pdFAIL
;

2830 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2835 
xRëu∫
 = 
pdFAIL
;

2839 
	`èskENTER_CRITICAL
();

2842 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

2844 
	`èskEXIT_CRITICAL
();

2845 
xRëu∫
 = 
pdPASS
;

2848  
xRëu∫
;

2849 
	}
}

2854 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2856 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

2858 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2860 –Ë
	`xQueueRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
 );

2861  
xRëu∫
;

2862 
	}
}

2867 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2869 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

2871 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2873 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

2874  
xRëu∫
;

2875 
	}
}

2880 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2882 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

2884 
Queue_t
 *
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

2885 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2889 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

2890 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

2892 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

2894 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueueSëC⁄èöî
->cTxLock;

2896 
	`åa˚QUEUE_SEND
–
pxQueueSëC⁄èöî
 );

2899 
xRëu∫
 = 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
queueSEND_TO_BACK
 );

2901 if–
cTxLock
 =
queueUNLOCKED
 )

2903 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2905 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2908 
xRëu∫
 = 
pdTRUE
;

2912 
	`mtCOVERAGE_TEST_MARKER
();

2917 
	`mtCOVERAGE_TEST_MARKER
();

2922 
pxQueueSëC⁄èöî
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

2927 
	`mtCOVERAGE_TEST_MARKER
();

2930  
xRëu∫
;

2931 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c

29 
	~<°döt.h
>

30 
	~<°rög.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

38 
	~"FªeRTOS.h
"

39 
	~"èsk.h
"

40 
	~"°ªam_buf„r.h
"

42 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 != 1 )

43 #îr‹ 
c⁄figUSE_TASK_NOTIFICATIONS
 
mu°
 
be
 
£t
 
to
 1Åÿ
buûd
 
°ªam_buf„r
.
c


50 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


56 #i‚de‡
sbRECEIVE_COMPLETED


57 
	#sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 ) \

58 
	`vTaskSu•ídAŒ
(); \

60 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 ) \

62 –Ë
	`xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

63 –
uöt32_t
 ) 0, \

64 
eNoA˘i⁄
 ); \

65 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
; \

68 –Ë
	`xTaskResumeAŒ
();

	)

71 #i‚de‡
sbRECEIVE_COMPLETED_FROM_ISR


72 
	#sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, \

73 
pxHighîPri‹ôyTaskWokí
 ) \

75 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
; \

77 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

79 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 ) \

81 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

82 –
uöt32_t
 ) 0, \

83 
eNoA˘i⁄
, \

84 
pxHighîPri‹ôyTaskWokí
 ); \

85 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
; \

88 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

89 }

	)

95 #i‚de‡
sbSEND_COMPLETED


96 
	#sbSEND_COMPLETED
–
pxSåómBuf„r
 ) \

97 
	`vTaskSu•ídAŒ
(); \

99 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 ) \

101 –Ë
	`xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

102 –
uöt32_t
 ) 0, \

103 
eNoA˘i⁄
 ); \

104 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
; \

107 –Ë
	`xTaskResumeAŒ
();

	)

110 #i‚de‡
sbSEND_COMPLETE_FROM_ISR


111 
	#sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) \

113 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
; \

115 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

117 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 ) \

119 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

120 –
uöt32_t
 ) 0, \

121 
eNoA˘i⁄
, \

122 
pxHighîPri‹ôyTaskWokí
 ); \

123 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
; \

126 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

127 }

	)

132 
	#sbBYTES_TO_STORE_MESSAGE_LENGTH
 ( –
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 ) )

	)

135 
	#sbFLAGS_IS_MESSAGE_BUFFER
 ( ( 
uöt8_t
 ) 1 )

	)

136 
	#sbFLAGS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 2 )

	)

141 
	sSåómBuf„rDef_t


143 vﬁ©ûê
size_t
 
	mxTaû
;

144 vﬁ©ûê
size_t
 
	mxHód
;

145 
size_t
 
	mxLígth
;

146 
size_t
 
	mxTriggîLevñByãs
;

147 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToRe˚ive
;

148 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToSíd
;

149 
uöt8_t
 *
	mpucBuf„r
;

150 
uöt8_t
 
	mucFœgs
;

152 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

153 
UBa£Ty≥_t
 
	muxSåómBuf„rNumbî
;

155 } 
	tSåómBuf„r_t
;

160 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

168 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
, c⁄° 
uöt8_t
 *
pucD©a
, 
size_t
 
xCou¡
 ) 
PRIVILEGED_FUNCTION
;

177 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
,

178 *
pvRxD©a
,

179 
size_t
 
xBuf„rLígthByãs
,

180 
size_t
 
xByãsAvaûabÀ
,

181 
size_t
 
xByãsToSt‹eMesßgeLígth
 ) 
PRIVILEGED_FUNCTION
;

190 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

191 c⁄° * 
pvTxD©a
,

192 
size_t
 
xD©aLígthByãs
,

193 
size_t
 
xS∑˚
,

194 
size_t
 
xRequúedS∑˚
 ) 
PRIVILEGED_FUNCTION
;

200 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
,

201 
uöt8_t
 *
pucD©a
,

202 
size_t
 
xMaxCou¡
,

203 
size_t
 
xByãsAvaûabÀ
 ) 
PRIVILEGED_FUNCTION
;

209 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

210 
uöt8_t
 * c⁄° 
pucBuf„r
,

211 
size_t
 
xBuf„rSizeByãs
,

212 
size_t
 
xTriggîLevñByãs
,

213 
uöt8_t
 
ucFœgs
 ) 
PRIVILEGED_FUNCTION
;

217 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

219 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
, size_à
xTriggîLevñByãs
, 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 )

221 
uöt8_t
 *
pucAŒoˇãdMem‹y
;

222 
uöt8_t
 
ucFœgs
;

228 if–
xIsMesßgeBuf„r
 =
pdTRUE
 )

231 
ucFœgs
 = 
sbFLAGS_IS_MESSAGE_BUFFER
;

232 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

237 
ucFœgs
 = 0;

238 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 0 );

240 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

244 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

246 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

257 
xBuf„rSizeByãs
++;

258 
pucAŒoˇãdMem‹y
 = ( 
uöt8_t
 * ) 
	`pvP‹tMÆloc
–
xBuf„rSizeByãs
 + –
SåómBuf„r_t
 ) );

260 if–
pucAŒoˇãdMem‹y
 !
NULL
 )

262 
	`¥vInôüli£NewSåómBuf„r
––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
,

263 
pucAŒoˇãdMem‹y
 + –
SåómBuf„r_t
 ),

264 
xBuf„rSizeByãs
,

265 
xTriggîLevñByãs
,

266 
ucFœgs
 );

268 
	`åa˚STREAM_BUFFER_CREATE
–––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
 ), 
xIsMesßgeBuf„r
 );

272 
	`åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 );

275  ( 
SåómBuf„rH™dÀ_t
 ) 
pucAŒoˇãdMem‹y
;

276 
	}
}

281 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

283 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

284 
size_t
 
xTriggîLevñByãs
,

285 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

286 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

287 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 )

289 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
pxSèticSåómBuf„r
;

290 
SåómBuf„rH™dÀ_t
 
xRëu∫
;

291 
uöt8_t
 
ucFœgs
;

293 
	`c⁄figASSERT
–
pucSåómBuf„rSt‹ageAªa
 );

294 
	`c⁄figASSERT
–
pxSèticSåómBuf„r
 );

295 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

299 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

301 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

304 if–
xIsMesßgeBuf„r
 !
pdFALSE
 )

307 
ucFœgs
 = 
sbFLAGS_IS_MESSAGE_BUFFER
 | 
sbFLAGS_IS_STATICALLY_ALLOCATED
;

312 
ucFœgs
 = 
sbFLAGS_IS_STATICALLY_ALLOCATED
;

319 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

321 #if–
c⁄figASSERT_DEFINED
 == 1 )

326 vﬁ©ûê
size_t
 
xSize
 = –
SèticSåómBuf„r_t
 );

327 
	`c⁄figASSERT
–
xSize
 =–
SåómBuf„r_t
 ) );

331 if––
pucSåómBuf„rSt‹ageAªa
 !
NULL
 ) && ( 
pxSèticSåómBuf„r
 != NULL ) )

333 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

334 
pucSåómBuf„rSt‹ageAªa
,

335 
xBuf„rSizeByãs
,

336 
xTriggîLevñByãs
,

337 
ucFœgs
 );

341 
pxSåómBuf„r
->
ucFœgs
 |
sbFLAGS_IS_STATICALLY_ALLOCATED
;

343 
	`åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 );

345 
xRëu∫
 = ( 
SåómBuf„rH™dÀ_t
 ) 
pxSèticSåómBuf„r
;

349 
xRëu∫
 = 
NULL
;

350 
	`åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 );

353  
xRëu∫
;

354 
	}
}

359 
	$vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

361 
SåómBuf„r_t
 * 
pxSåómBuf„r
 = 
xSåómBuf„r
;

363 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

365 
	`åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 );

367 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 
pdFALSE
 )

369 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

373 
	`vP‹tFªe
––* ) 
pxSåómBuf„r
 );

379 
	`c⁄figASSERT
–
xSåómBuf„r
 =–
SåómBuf„rH™dÀ_t
 ) ~0 );

387 –Ë
	`mem£t
–
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

389 
	}
}

392 
Ba£Ty≥_t
 
	$xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

394 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

395 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

397 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

398 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
;

401 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

403 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

407 
uxSåómBuf„rNumbî
 = 
pxSåómBuf„r
->uxStreamBufferNumber;

412 
	`èskENTER_CRITICAL
();

414 if–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 )

416 if–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 )

418 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

419 
pxSåómBuf„r
->
pucBuf„r
,

420 
pxSåómBuf„r
->
xLígth
,

421 
pxSåómBuf„r
->
xTriggîLevñByãs
,

422 
pxSåómBuf„r
->
ucFœgs
 );

423 
xRëu∫
 = 
pdPASS
;

425 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

427 
pxSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

431 
	`åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 );

435 
	`èskEXIT_CRITICAL
();

437  
xRëu∫
;

438 
	}
}

441 
Ba£Ty≥_t
 
	$xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
size_t
 
xTriggîLevñ
 )

443 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

444 
Ba£Ty≥_t
 
xRëu∫
;

446 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

449 if–
xTriggîLevñ
 =–
size_t
 ) 0 )

451 
xTriggîLevñ
 = ( 
size_t
 ) 1;

456 if–
xTriggîLevñ
 <
pxSåómBuf„r
->
xLígth
 )

458 
pxSåómBuf„r
->
xTriggîLevñByãs
 = 
xTriggîLevñ
;

459 
xRëu∫
 = 
pdPASS
;

463 
xRëu∫
 = 
pdFALSE
;

466  
xRëu∫
;

467 
	}
}

470 
size_t
 
	$xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

472 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

473 
size_t
 
xS∑˚
;

475 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

477 
xS∑˚
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xTaû
;

478 
xS∑˚
 -
pxSåómBuf„r
->
xHód
;

479 
xS∑˚
 -–
size_t
 ) 1;

481 if–
xS∑˚
 >
pxSåómBuf„r
->
xLígth
 )

483 
xS∑˚
 -
pxSåómBuf„r
->
xLígth
;

487 
	`mtCOVERAGE_TEST_MARKER
();

490  
xS∑˚
;

491 
	}
}

494 
size_t
 
	$xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

496 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

497 
size_t
 
xRëu∫
;

499 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

501 
xRëu∫
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

502  
xRëu∫
;

503 
	}
}

506 
size_t
 
	$xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

507 c⁄° *
pvTxD©a
,

508 
size_t
 
xD©aLígthByãs
,

509 
TickTy≥_t
 
xTicksToWaô
 )

511 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

512 
size_t
 
xRëu∫
, 
xS∑˚
 = 0;

513 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

514 
TimeOut_t
 
xTimeOut
;

516 
	`c⁄figASSERT
–
pvTxD©a
 );

517 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

523 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

525 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

528 
	`c⁄figASSERT
–
xRequúedS∑˚
 > 
xD©aLígthByãs
 );

532 
	`mtCOVERAGE_TEST_MARKER
();

535 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

537 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

543 
	`èskENTER_CRITICAL
();

545 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

547 if–
xS∑˚
 < 
xRequúedS∑˚
 )

550 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

553 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 );

554 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
	`xTaskGëCuºítTaskH™dÀ
();

558 
	`èskEXIT_CRITICAL
();

562 
	`èskEXIT_CRITICAL
();

564 
	`åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 );

565 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, ( uöt32_àË0, 
NULL
, 
xTicksToWaô
 );

566 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
NULL
;

568 }  
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 );

572 
	`mtCOVERAGE_TEST_MARKER
();

575 if–
xS∑˚
 =–
size_t
 ) 0 )

577 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

581 
	`mtCOVERAGE_TEST_MARKER
();

584 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

586 if–
xRëu∫
 > ( 
size_t
 ) 0 )

588 
	`åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xRëu∫
 );

591 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

593 
	`sbSEND_COMPLETED
–
pxSåómBuf„r
 );

597 
	`mtCOVERAGE_TEST_MARKER
();

602 
	`mtCOVERAGE_TEST_MARKER
();

603 
	`åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 );

606  
xRëu∫
;

607 
	}
}

610 
size_t
 
	$xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

611 c⁄° *
pvTxD©a
,

612 
size_t
 
xD©aLígthByãs
,

613 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

615 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

616 
size_t
 
xRëu∫
, 
xS∑˚
;

617 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

619 
	`c⁄figASSERT
–
pvTxD©a
 );

620 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

626 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

628 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

632 
	`mtCOVERAGE_TEST_MARKER
();

635 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

636 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

638 if–
xRëu∫
 > ( 
size_t
 ) 0 )

641 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

643 
	`sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

647 
	`mtCOVERAGE_TEST_MARKER
();

652 
	`mtCOVERAGE_TEST_MARKER
();

655 
	`åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xRëu∫
 );

657  
xRëu∫
;

658 
	}
}

661 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

662 c⁄° * 
pvTxD©a
,

663 
size_t
 
xD©aLígthByãs
,

664 
size_t
 
xS∑˚
,

665 
size_t
 
xRequúedS∑˚
 )

667 
Ba£Ty≥_t
 
xShouldWrôe
;

668 
size_t
 
xRëu∫
;

670 if–
xS∑˚
 =–
size_t
 ) 0 )

674 
xShouldWrôe
 = 
pdFALSE
;

676 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) =–
uöt8_t
 ) 0 )

681 
xShouldWrôe
 = 
pdTRUE
;

682 
xD©aLígthByãs
 = 
	`c⁄figMIN
–xD©aLígthByãs, 
xS∑˚
 );

684 if–
xS∑˚
 >
xRequúedS∑˚
 )

690 
xShouldWrôe
 = 
pdTRUE
;

691 –Ë
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) &–
xD©aLígthByãs
 ), 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

696 
xShouldWrôe
 = 
pdFALSE
;

699 if–
xShouldWrôe
 !
pdFALSE
 )

702 
xRëu∫
 = 
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) 
pvTxD©a
, 
xD©aLígthByãs
 );

706 
xRëu∫
 = 0;

709  
xRëu∫
;

710 
	}
}

713 
size_t
 
	$xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

714 *
pvRxD©a
,

715 
size_t
 
xBuf„rLígthByãs
,

716 
TickTy≥_t
 
xTicksToWaô
 )

718 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

719 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

721 
	`c⁄figASSERT
–
pvRxD©a
 );

722 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

729 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

731 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

735 
xByãsToSt‹eMesßgeLígth
 = 0;

738 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

742 
	`èskENTER_CRITICAL
();

744 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

751 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

754 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

757 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 );

758 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
	`xTaskGëCuºítTaskH™dÀ
();

762 
	`mtCOVERAGE_TEST_MARKER
();

765 
	`èskEXIT_CRITICAL
();

767 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

770 
	`åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 );

771 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, ( uöt32_àË0, 
NULL
, 
xTicksToWaô
 );

772 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
NULL
;

775 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

779 
	`mtCOVERAGE_TEST_MARKER
();

784 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

792 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

794 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
 );

797 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

799 
	`åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

800 
	`sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 );

804 
	`mtCOVERAGE_TEST_MARKER
();

809 
	`åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 );

810 
	`mtCOVERAGE_TEST_MARKER
();

813  
xRe˚ivedLígth
;

814 
	}
}

817 
size_t
 
	$xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

819 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

820 
size_t
 
xRëu∫
, 
xByãsAvaûabÀ
, 
xOrigöÆTaû
;

821 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xTempRëu∫
;

823 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

826 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

828 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

829 if–
xByãsAvaûabÀ
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 )

837 
xOrigöÆTaû
 = 
pxSåómBuf„r
->
xTaû
;

838 –Ë
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xTempRëu∫
, 
sbBYTES_TO_STORE_MESSAGE_LENGTH
, 
xByãsAvaûabÀ
 );

839 
xRëu∫
 = ( 
size_t
 ) 
xTempRëu∫
;

840 
pxSåómBuf„r
->
xTaû
 = 
xOrigöÆTaû
;

848 
	`c⁄figASSERT
–
xByãsAvaûabÀ
 == 0 );

849 
xRëu∫
 = 0;

854 
xRëu∫
 = 0;

857  
xRëu∫
;

858 
	}
}

861 
size_t
 
	$xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

862 *
pvRxD©a
,

863 
size_t
 
xBuf„rLígthByãs
,

864 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

866 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

867 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

869 
	`c⁄figASSERT
–
pvRxD©a
 );

870 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

877 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

879 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

883 
xByãsToSt‹eMesßgeLígth
 = 0;

886 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

893 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

895 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
 );

898 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

900 
	`sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

904 
	`mtCOVERAGE_TEST_MARKER
();

909 
	`mtCOVERAGE_TEST_MARKER
();

912 
	`åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

914  
xRe˚ivedLígth
;

915 
	}
}

918 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
,

919 *
pvRxD©a
,

920 
size_t
 
xBuf„rLígthByãs
,

921 
size_t
 
xByãsAvaûabÀ
,

922 
size_t
 
xByãsToSt‹eMesßgeLígth
 )

924 
size_t
 
xOrigöÆTaû
, 
xRe˚ivedLígth
, 
xNextMesßgeLígth
;

925 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xTempNextMesßgeLígth
;

927 if–
xByãsToSt‹eMesßgeLígth
 !–
size_t
 ) 0 )

933 
xOrigöÆTaû
 = 
pxSåómBuf„r
->
xTaû
;

934 –Ë
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xTempNextMesßgeLígth
, 
xByãsToSt‹eMesßgeLígth
, 
xByãsAvaûabÀ
 );

935 
xNextMesßgeLígth
 = ( 
size_t
 ) 
xTempNextMesßgeLígth
;

939 
xByãsAvaûabÀ
 -
xByãsToSt‹eMesßgeLígth
;

943 if–
xNextMesßgeLígth
 > 
xBuf„rLígthByãs
 )

948 
pxSåómBuf„r
->
xTaû
 = 
xOrigöÆTaû
;

949 
xNextMesßgeLígth
 = 0;

953 
	`mtCOVERAGE_TEST_MARKER
();

960 
xNextMesßgeLígth
 = 
xBuf„rLígthByãs
;

964 
xRe˚ivedLígth
 = 
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) 
pvRxD©a
, 
xNextMesßgeLígth
, 
xByãsAvaûabÀ
 );

966  
xRe˚ivedLígth
;

967 
	}
}

970 
Ba£Ty≥_t
 
	$xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

972 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

973 
Ba£Ty≥_t
 
xRëu∫
;

974 
size_t
 
xTaû
;

976 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

979 
xTaû
 = 
pxSåómBuf„r
->xTail;

980 if–
pxSåómBuf„r
->
xHód
 =
xTaû
 )

982 
xRëu∫
 = 
pdTRUE
;

986 
xRëu∫
 = 
pdFALSE
;

989  
xRëu∫
;

990 
	}
}

993 
Ba£Ty≥_t
 
	$xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

995 
Ba£Ty≥_t
 
xRëu∫
;

996 
size_t
 
xByãsToSt‹eMesßgeLígth
;

997 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

999 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1005 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

1007 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

1011 
xByãsToSt‹eMesßgeLígth
 = 0;

1015 if–
	`xSåómBuf„rS∑˚sAvaûabÀ
–
xSåómBuf„r
 ) <
xByãsToSt‹eMesßgeLígth
 )

1017 
xRëu∫
 = 
pdTRUE
;

1021 
xRëu∫
 = 
pdFALSE
;

1024  
xRëu∫
;

1025 
	}
}

1028 
Ba£Ty≥_t
 
	$xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

1030 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1031 
Ba£Ty≥_t
 
xRëu∫
;

1032 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1034 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1036 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1038 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 )

1040 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
,

1041 –
uöt32_t
 ) 0,

1042 
eNoA˘i⁄
,

1043 
pxHighîPri‹ôyTaskWokí
 );

1044 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
;

1045 
xRëu∫
 = 
pdTRUE
;

1049 
xRëu∫
 = 
pdFALSE
;

1052 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1054  
xRëu∫
;

1055 
	}
}

1058 
Ba£Ty≥_t
 
	$xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

1060 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1061 
Ba£Ty≥_t
 
xRëu∫
;

1062 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1064 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1066 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1068 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 )

1070 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
,

1071 –
uöt32_t
 ) 0,

1072 
eNoA˘i⁄
,

1073 
pxHighîPri‹ôyTaskWokí
 );

1074 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
;

1075 
xRëu∫
 = 
pdTRUE
;

1079 
xRëu∫
 = 
pdFALSE
;

1082 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1084  
xRëu∫
;

1085 
	}
}

1088 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
, c⁄° 
uöt8_t
 *
pucD©a
, 
size_t
 
xCou¡
 )

1090 
size_t
 
xNextHód
, 
xFú°Lígth
;

1092 
	`c⁄figASSERT
–
xCou¡
 > ( 
size_t
 ) 0 );

1094 
xNextHód
 = 
pxSåómBuf„r
->
xHód
;

1099 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xNextHód
, 
xCou¡
 );

1102 
	`c⁄figASSERT
––
xNextHód
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1103 –Ë
	`mem˝y
––* ) ( &–
pxSåómBuf„r
->
pucBuf„r
[ 
xNextHód
 ] ) ), ( c⁄° * ) 
pucD©a
, 
xFú°Lígth
 );

1107 if–
xCou¡
 > 
xFú°Lígth
 )

1110 
	`c⁄figASSERT
––
xCou¡
 - 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1111 –Ë
	`mem˝y
––* ) 
pxSåómBuf„r
->
pucBuf„r
, ( c⁄° * ) &–
pucD©a
[ 
xFú°Lígth
 ] ), 
xCou¡
 - xFirstLength );

1115 
	`mtCOVERAGE_TEST_MARKER
();

1118 
xNextHód
 +
xCou¡
;

1119 if–
xNextHód
 >
pxSåómBuf„r
->
xLígth
 )

1121 
xNextHód
 -
pxSåómBuf„r
->
xLígth
;

1125 
	`mtCOVERAGE_TEST_MARKER
();

1128 
pxSåómBuf„r
->
xHód
 = 
xNextHód
;

1130  
xCou¡
;

1131 
	}
}

1134 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 *
pxSåómBuf„r
, 
uöt8_t
 *
pucD©a
, 
size_t
 
xMaxCou¡
, size_à
xByãsAvaûabÀ
 )

1136 
size_t
 
xCou¡
, 
xFú°Lígth
, 
xNextTaû
;

1139 
xCou¡
 = 
	`c⁄figMIN
–
xByãsAvaûabÀ
, 
xMaxCou¡
 );

1141 if–
xCou¡
 > ( 
size_t
 ) 0 )

1143 
xNextTaû
 = 
pxSåómBuf„r
->
xTaû
;

1148 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xNextTaû
, 
xCou¡
 );

1152 
	`c⁄figASSERT
–
xFú°Lígth
 <
xMaxCou¡
 );

1153 
	`c⁄figASSERT
––
xNextTaû
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1154 –Ë
	`mem˝y
––* ) 
pucD©a
, ( c⁄° * ) &–
pxSåómBuf„r
->
pucBuf„r
[ 
xNextTaû
 ] ), 
xFú°Lígth
 );

1158 if–
xCou¡
 > 
xFú°Lígth
 )

1161 
	`c⁄figASSERT
–
xCou¡
 <
xMaxCou¡
 );

1162 –Ë
	`mem˝y
––* ) &–
pucD©a
[ 
xFú°Lígth
 ] ), ( * ) ( 
pxSåómBuf„r
->
pucBuf„r
 ), 
xCou¡
 - xFirstLength );

1166 
	`mtCOVERAGE_TEST_MARKER
();

1171 
xNextTaû
 +
xCou¡
;

1173 if–
xNextTaû
 >
pxSåómBuf„r
->
xLígth
 )

1175 
xNextTaû
 -
pxSåómBuf„r
->
xLígth
;

1178 
pxSåómBuf„r
->
xTaû
 = 
xNextTaû
;

1182 
	`mtCOVERAGE_TEST_MARKER
();

1185  
xCou¡
;

1186 
	}
}

1189 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 )

1192 
size_t
 
xCou¡
;

1194 
xCou¡
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xHód
;

1195 
xCou¡
 -
pxSåómBuf„r
->
xTaû
;

1196 i‡–
xCou¡
 >
pxSåómBuf„r
->
xLígth
 )

1198 
xCou¡
 -
pxSåómBuf„r
->
xLígth
;

1202 
	`mtCOVERAGE_TEST_MARKER
();

1205  
xCou¡
;

1206 
	}
}

1209 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

1210 
uöt8_t
 * c⁄° 
pucBuf„r
,

1211 
size_t
 
xBuf„rSizeByãs
,

1212 
size_t
 
xTriggîLevñByãs
,

1213 
uöt8_t
 
ucFœgs
 )

1218 #if–
c⁄figASSERT_DEFINED
 == 1 )

1223 c⁄° 
Ba£Ty≥_t
 
xWrôeVÆue
 = 0x55;

1224 
	`c⁄figASSERT
–
	`mem£t
–
pucBuf„r
, ( Ë
xWrôeVÆue
, 
xBuf„rSizeByãs
 ) ==ÖucBuffer );

1228 –Ë
	`mem£t
––* ) 
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

1229 
pxSåómBuf„r
->
pucBuf„r
 =ÖucBuffer;

1230 
pxSåómBuf„r
->
xLígth
 = 
xBuf„rSizeByãs
;

1231 
pxSåómBuf„r
->
xTriggîLevñByãs
 = xTriggerLevelBytes;

1232 
pxSåómBuf„r
->
ucFœgs
 = ucFlags;

1233 
	}
}

1235 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1237 
UBa£Ty≥_t
 
	$uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1239  
xSåómBuf„r
->
uxSåómBuf„rNumbî
;

1240 
	}
}

1245 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1247 
	$vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
, 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 )

1249 
xSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

1250 
	}
}

1255 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1257 
uöt8_t
 
	$ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1259  ( 
xSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 );

1260 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/tasks.c

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

38 
	~"FªeRTOS.h
"

39 
	~"èsk.h
"

40 
	~"timîs.h
"

41 
	~"°ack_ma¸os.h
"

47 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


51 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

56 
	~<°dio.h
>

59 #if–
c⁄figUSE_PREEMPTION
 == 0 )

62 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

64 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

68 
	#èskNOT_WAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 0 )

	)

69 
	#èskWAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 1 )

	)

70 
	#èskNOTIFICATION_RECEIVED
 ( ( 
uöt8_t
 ) 2 )

	)

76 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

79 
	#tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 0 )

	)

80 
	#tskSTATICALLY_ALLOCATED_STACK_ONLY
 ( ( 
uöt8_t
 ) 1 )

	)

81 
	#tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 2 )

	)

86 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

87 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 1

	)

89 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 0

	)

95 
	#tskRUNNING_CHAR
 ( 'X' )

	)

96 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

97 
	#tskREADY_CHAR
 ( 'R' )

	)

98 
	#tskDELETED_CHAR
 ( 'D' )

	)

99 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

105 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


106 

	)

111 #i‚de‡
c⁄figIDLE_TASK_NAME


112 
	#c⁄figIDLE_TASK_NAME
 "IDLE"

	)

115 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

123 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

125 if––
uxPri‹ôy
 ) > 
uxT›RódyPri‹ôy
 ) \

127 
uxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

129 }

	)

133 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

135 
UBa£Ty≥_t
 
uxT›Pri‹ôy
 = 
uxT›RódyPri‹ôy
; \

138  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) ) \

140 
	`c⁄figASSERT
–
uxT›Pri‹ôy
 ); \

141 --
uxT›Pri‹ôy
; \

146 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

147 
uxT›RódyPri‹ôy
 = 
uxT›Pri‹ôy
; \

148 }

	)

155 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

156 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

165 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

169 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

171 
UBa£Ty≥_t
 
uxT›Pri‹ôy
; \

174 
	`p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

175 
	`c⁄figASSERT
–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

176 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

177 }

	)

184 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

186 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) =–
UBa£Ty≥_t
 ) 0 ) \

188 
	`p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

190 }

	)

198 
	#èskSWITCH_DELAYED_LISTS
() \

200 
Li°_t
 *
pxTemp
; \

203 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

205 
pxTemp
 = 
pxDñayedTaskLi°
; \

206 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

207 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

208 
xNumOfOvîÊows
++; \

209 
	`¥vRe£tNextTaskUnblockTime
(); \

210 }

	)

218 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

219 
	`åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ); \

220 
	`èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

221 
	`vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xSèãLi°Iãm
 ) ); \

222 
	`åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

231 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? 
pxCuºítTCB
 : (ÖxH™dÀ ) )

	)

241 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

242 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

244 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

252 
	stskTaskC⁄åﬁBlock


254 vﬁ©ûê
SèckTy≥_t
 *
	mpxT›OfSèck
;

256 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

257 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

260 
Li°Iãm_t
 
	mxSèãLi°Iãm
;

261 
Li°Iãm_t
 
	mxEvítLi°Iãm
;

262 
UBa£Ty≥_t
 
	muxPri‹ôy
;

263 
SèckTy≥_t
 *
	mpxSèck
;

264 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

266 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

267 
SèckTy≥_t
 *
	mpxEndOfSèck
;

270 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

271 
UBa£Ty≥_t
 
	muxCrôiˇlNe°ög
;

274 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

275 
UBa£Ty≥_t
 
	muxTCBNumbî
;

276 
UBa£Ty≥_t
 
	muxTaskNumbî
;

279 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

280 
UBa£Ty≥_t
 
	muxBa£Pri‹ôy
;

281 
UBa£Ty≥_t
 
	muxMuãxesHñd
;

284 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

285 
TaskHookFun˘i⁄_t
 
	mpxTaskTag
;

288 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

289 *
	mpvThªadLoˇlSt‹agePoöãrs
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

292 #if–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

293 
uöt32_t
 
	mulRunTimeCou¡î
;

296 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

307 
_ªít
 
	mxNewLib_ªít
;

310 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

311 vﬁ©ûê
uöt32_t
 
	mulNŸifõdVÆue
;

312 vﬁ©ûê
uöt8_t
 
	mucNŸifySèã
;

317 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

318 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

321 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

322 
uöt8_t
 
	mucDñayAb‹ãd
;

325 #if–
c⁄figUSE_POSIX_ERRNO
 == 1 )

326 
	miTaskEºno
;

329 } 
	ttskTCB
;

333 
tskTCB
 
	tTCB_t
;

337 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

343 
PRIVILEGED_DATA
 
Li°_t
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

344 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°1
;

345 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°2
;

346 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxDñayedTaskLi°
;

347 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

348 
PRIVILEGED_DATA
 
Li°_t
 
	gxPídögRódyLi°
;

350 #if–
INCLUDE_vTaskDñëe
 == 1 )

352 
PRIVILEGED_DATA
 
Li°_t
 
	gxTasksWaôögTîmö©i⁄
;

353 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxDñëedTasksWaôögCÀ™Up
 = ( UBaseType_t ) 0U;

357 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

359 
PRIVILEGED_DATA
 
Li°_t
 
	gxSu•ídedTaskLi°
;

365 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

366 
	gFªeRTOS_î∫o
 = 0;

370 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

371 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxTickCou¡
 = ( TickTy≥_àË
c⁄figINITIAL_TICK_COUNT
;

372 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

373 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

374 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxPídedTicks
 = ( TickType_t ) 0U;

375 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxYõldPídög
 = 
pdFALSE
;

376 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxNumOfOvîÊows
 = ( BaseType_t ) 0;

377 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
	guxTaskNumbî
 = ( UBaseType_t ) 0U;

378 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxNextTaskUnblockTime
 = ( TickType_t ) 0U;

379 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

389 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

391 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

395 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTaskSwôchedInTime
 = 0UL;

396 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTŸÆRunTime
 = 0UL;

405 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 )

407 
vAµliˇti⁄SèckOvîÊowHook
–
TaskH™dÀ_t
 
xTask
, *
pcTaskName
 );

411 #if–
c⁄figUSE_TICK_HOOK
 > 0 )

413 
vAµliˇti⁄TickHook
( );

417 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

419 
vAµliˇti⁄GëIdÀTaskMem‹y
–
SèticTask_t
 **
µxIdÀTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxIdÀTaskSèckBuf„r
, 
uöt32_t
 *
pulIdÀTaskSèckSize
 );

430 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

432 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

440 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

453 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

462 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

464 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

473 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

479 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

489 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

491 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

499 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

501 
TCB_t
 *
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 *
pxLi°
, c⁄° 
pcNameToQuîy
[] ) 
PRIVILEGED_FUNCTION
;

510 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

512 
c⁄figSTACK_DEPTH_TYPE
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

525 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

527 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

535 
	`¥vRe£tNextTaskUnblockTime
( );

537 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

543 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 ) 
PRIVILEGED_FUNCTION
;

551 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

552 c⁄° * c⁄° 
pcName
,

553 c⁄° 
uöt32_t
 
ulSèckDïth
,

554 * c⁄° 
pvP¨amëîs
,

555 
UBa£Ty≥_t
 
uxPri‹ôy
,

556 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

557 
TCB_t
 *
pxNewTCB
,

558 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

564 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 *
pxNewTCB
 ) 
PRIVILEGED_FUNCTION
;

571 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


573 
	$‰ìπos_èsks_c_addôi⁄s_öô
–Ë
PRIVILEGED_FUNCTION
;

579 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

581 
TaskH™dÀ_t
 
	$xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

582 c⁄° * c⁄° 
pcName
,

583 c⁄° 
uöt32_t
 
ulSèckDïth
,

584 * c⁄° 
pvP¨amëîs
,

585 
UBa£Ty≥_t
 
uxPri‹ôy
,

586 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

587 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 )

589 
TCB_t
 *
pxNewTCB
;

590 
TaskH™dÀ_t
 
xRëu∫
;

592 
	`c⁄figASSERT
–
puxSèckBuf„r
 !
NULL
 );

593 
	`c⁄figASSERT
–
pxTaskBuf„r
 !
NULL
 );

595 #if–
c⁄figASSERT_DEFINED
 == 1 )

600 vﬁ©ûê
size_t
 
xSize
 = –
SèticTask_t
 );

601 
	`c⁄figASSERT
–
xSize
 =–
TCB_t
 ) );

602 –Ë
xSize
;

607 if––
pxTaskBuf„r
 !
NULL
 ) && ( 
puxSèckBuf„r
 != NULL ) )

611 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskBuf„r
;

612 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
puxSèckBuf„r
;

614 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

618 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

622 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, 
ulSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, &
xRëu∫
, 
pxNewTCB
, 
NULL
 );

623 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

627 
xRëu∫
 = 
NULL
;

630  
xRëu∫
;

631 
	}
}

636 #if––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

638 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 )

640 
TCB_t
 *
pxNewTCB
;

641 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

643 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 );

644 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
pxTaskBuf„r
 !
NULL
 );

646 if––
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 ) && (ÖxTaskDeföôi⁄->
pxTaskBuf„r
 != NULL ) )

651 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskDeföôi⁄
->
pxTaskBuf„r
;

654 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

656 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

660 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

664 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

665 
pxTaskDeföôi⁄
->
pcName
,

666 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

667 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

668 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

669 
pxCª©edTask
, 
pxNewTCB
,

670 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

672 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

673 
xRëu∫
 = 
pdPASS
;

676  
xRëu∫
;

677 
	}
}

682 #if––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

684 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 )

686 
TCB_t
 *
pxNewTCB
;

687 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

689 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 );

691 if–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 )

696 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

698 if–
pxNewTCB
 !
NULL
 )

701 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

703 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

708 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_ONLY
;

712 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

713 
pxTaskDeföôi⁄
->
pcName
,

714 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

715 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

716 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

717 
pxCª©edTask
, 
pxNewTCB
,

718 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

720 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

721 
xRëu∫
 = 
pdPASS
;

725  
xRëu∫
;

726 
	}
}

731 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

733 
Ba£Ty≥_t
 
	$xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

734 c⁄° * c⁄° 
pcName
,

735 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

736 * c⁄° 
pvP¨amëîs
,

737 
UBa£Ty≥_t
 
uxPri‹ôy
,

738 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 )

740 
TCB_t
 *
pxNewTCB
;

741 
Ba£Ty≥_t
 
xRëu∫
;

746 #if–
p‹tSTACK_GROWTH
 > 0 )

751 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

753 if–
pxNewTCB
 !
NULL
 )

758 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

760 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

763 
	`vP‹tFªe
–
pxNewTCB
 );

764 
pxNewTCB
 = 
NULL
;

770 
SèckTy≥_t
 *
pxSèck
;

773 
pxSèck
 = 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * –
SèckTy≥_t
 ) ) );

775 if–
pxSèck
 !
NULL
 )

778 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

780 if–
pxNewTCB
 !
NULL
 )

783 
pxNewTCB
->
pxSèck
 =ÖxStack;

789 
	`vP‹tFªe
–
pxSèck
 );

794 
pxNewTCB
 = 
NULL
;

799 if–
pxNewTCB
 !
NULL
 )

801 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

805 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
;

809 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, ( 
uöt32_t
 ) 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
pxNewTCB
, 
NULL
 );

810 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

811 
xRëu∫
 = 
pdPASS
;

815 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

818  
xRëu∫
;

819 
	}
}

824 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

825 c⁄° * c⁄° 
pcName
,

826 c⁄° 
uöt32_t
 
ulSèckDïth
,

827 * c⁄° 
pvP¨amëîs
,

828 
UBa£Ty≥_t
 
uxPri‹ôy
,

829 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

830 
TCB_t
 *
pxNewTCB
,

831 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

833 
SèckTy≥_t
 *
pxT›OfSèck
;

834 
UBa£Ty≥_t
 
x
;

836 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

838 
Ba£Ty≥_t
 
xRunPrivûeged
;

839 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

841 
xRunPrivûeged
 = 
pdTRUE
;

845 
xRunPrivûeged
 = 
pdFALSE
;

847 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

851 #if–
tskSET_NEW_STACKS_TO_KNOWN_VALUE
 == 1 )

854 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
ulSèckDïth
 * –
SèckTy≥_t
 ) );

862 #if–
p‹tSTACK_GROWTH
 < 0 )

864 
pxT›OfSèck
 = &–
pxNewTCB
->
pxSèck
[ 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 ] );

865 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

868 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxT›OfSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

870 #if–
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 )

874 
pxNewTCB
->
pxEndOfSèck
 = 
pxT›OfSèck
;

880 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

883 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxNewTCB
->
pxSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

887 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

892 if–
pcName
 !
NULL
 )

894  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

896 
pxNewTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

901 if–
pcName
[ 
x
 ] == ( ) 0x00 )

907 
	`mtCOVERAGE_TEST_MARKER
();

913 
pxNewTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

919 
pxNewTCB
->
pcTaskName
[ 0 ] = 0x00;

924 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

926 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

930 
	`mtCOVERAGE_TEST_MARKER
();

933 
pxNewTCB
->
uxPri‹ôy
 = uxPriority;

934 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

936 
pxNewTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

937 
pxNewTCB
->
uxMuãxesHñd
 = 0;

941 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xSèãLi°Iãm
 ) );

942 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xEvítLi°Iãm
 ) );

946 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xSèãLi°Iãm
 ),ÖxNewTCB );

949 
	`li°SET_LIST_ITEM_VALUE
–&–
pxNewTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

950 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xEvítLi°Iãm
 ),ÖxNewTCB );

952 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

954 
pxNewTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

958 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

960 
pxNewTCB
->
pxTaskTag
 = 
NULL
;

964 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

966 
pxNewTCB
->
ulRunTimeCou¡î
 = 0UL;

970 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

972 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxNewTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxNewTCB->
pxSèck
, 
ulSèckDïth
 );

977 –Ë
xRegi⁄s
;

981 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

983  
x
 = 0; x < ( 
UBa£Ty≥_t
 ) 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
; x++ )

985 
pxNewTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
x
 ] = 
NULL
;

990 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

992 
pxNewTCB
->
ulNŸifõdVÆue
 = 0;

993 
pxNewTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

997 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1002 
	`_REENT_INIT_PTR
––&–
pxNewTCB
->
xNewLib_ªít
 ) ) );

1006 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

1008 
pxNewTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

1016 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

1021 #if–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

1023 #if–
p‹tSTACK_GROWTH
 < 0 )

1025 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1029 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1035 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1044 #if–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

1046 #if–
p‹tSTACK_GROWTH
 < 0 )

1048 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

1052 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

1058 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

1064 if–
pxCª©edTask
 !
NULL
 )

1068 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

1072 
	`mtCOVERAGE_TEST_MARKER
();

1074 
	}
}

1077 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 *
pxNewTCB
 )

1081 
	`èskENTER_CRITICAL
();

1083 
uxCuºítNumbîOfTasks
++;

1084 if–
pxCuºítTCB
 =
NULL
 )

1088 
pxCuºítTCB
 = 
pxNewTCB
;

1090 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

1095 
	`¥vInôüli£TaskLi°s
();

1099 
	`mtCOVERAGE_TEST_MARKER
();

1107 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

1109 if–
pxCuºítTCB
->
uxPri‹ôy
 <
pxNewTCB
->uxPriority )

1111 
pxCuºítTCB
 = 
pxNewTCB
;

1115 
	`mtCOVERAGE_TEST_MARKER
();

1120 
	`mtCOVERAGE_TEST_MARKER
();

1124 
uxTaskNumbî
++;

1126 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1129 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

1132 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

1134 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

1136 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

1138 
	`èskEXIT_CRITICAL
();

1140 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1144 if–
pxCuºítTCB
->
uxPri‹ôy
 < 
pxNewTCB
->uxPriority )

1146 
	`èskYIELD_IF_USING_PREEMPTION
();

1150 
	`mtCOVERAGE_TEST_MARKER
();

1155 
	`mtCOVERAGE_TEST_MARKER
();

1157 
	}
}

1160 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1162 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

1164 
TCB_t
 *
pxTCB
;

1166 
	`èskENTER_CRITICAL
();

1170 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

1173 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1175 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1179 
	`mtCOVERAGE_TEST_MARKER
();

1183 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1185 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1189 
	`mtCOVERAGE_TEST_MARKER
();

1196 
uxTaskNumbî
++;

1198 if–
pxTCB
 =
pxCuºítTCB
 )

1205 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1210 ++
uxDñëedTasksWaôögCÀ™Up
;

1214 
	`åa˚TASK_DELETE
–
pxTCB
 );

1221 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

1225 --
uxCuºítNumbîOfTasks
;

1226 
	`åa˚TASK_DELETE
–
pxTCB
 );

1227 
	`¥vDñëeTCB
–
pxTCB
 );

1231 
	`¥vRe£tNextTaskUnblockTime
();

1234 
	`èskEXIT_CRITICAL
();

1238 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1240 if–
pxTCB
 =
pxCuºítTCB
 )

1242 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1243 
	`p‹tYIELD_WITHIN_API
();

1247 
	`mtCOVERAGE_TEST_MARKER
();

1250 
	}
}

1255 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

1257 
	$vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 )

1259 
TickTy≥_t
 
xTimeToWake
;

1260 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

1262 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

1263 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

1264 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1266 
	`vTaskSu•ídAŒ
();

1270 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1273 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

1275 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

1282 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1284 
xShouldDñay
 = 
pdTRUE
;

1288 
	`mtCOVERAGE_TEST_MARKER
();

1296 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1298 
xShouldDñay
 = 
pdTRUE
;

1302 
	`mtCOVERAGE_TEST_MARKER
();

1307 *
pxPªviousWakeTime
 = 
xTimeToWake
;

1309 if–
xShouldDñay
 !
pdFALSE
 )

1311 
	`åa˚TASK_DELAY_UNTIL
–
xTimeToWake
 );

1315 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 - 
xC⁄°TickCou¡
, 
pdFALSE
 );

1319 
	`mtCOVERAGE_TEST_MARKER
();

1322 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1326 if–
xAÃódyYõlded
 =
pdFALSE
 )

1328 
	`p‹tYIELD_WITHIN_API
();

1332 
	`mtCOVERAGE_TEST_MARKER
();

1334 
	}
}

1339 #i‡–
INCLUDE_vTaskDñay
 == 1 )

1341 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

1343 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1346 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

1348 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1349 
	`vTaskSu•ídAŒ
();

1351 
	`åa˚TASK_DELAY
();

1360 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToDñay
, 
pdFALSE
 );

1362 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1366 
	`mtCOVERAGE_TEST_MARKER
();

1371 if–
xAÃódyYõlded
 =
pdFALSE
 )

1373 
	`p‹tYIELD_WITHIN_API
();

1377 
	`mtCOVERAGE_TEST_MARKER
();

1379 
	}
}

1384 #if––
INCLUDE_eTaskGëSèã
 =1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_xTaskAb‹tDñay
 == 1 ) )

1386 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

1388 
eTaskSèã
 
eRëu∫
;

1389 
Li°_t
 c⁄° * 
pxSèãLi°
, *
pxDñayedLi°
, *
pxOvîÊowedDñayedLi°
;

1390 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = 
xTask
;

1392 
	`c⁄figASSERT
–
pxTCB
 );

1394 if–
pxTCB
 =
pxCuºítTCB
 )

1397 
eRëu∫
 = 
eRu¬ög
;

1401 
	`èskENTER_CRITICAL
();

1403 
pxSèãLi°
 = 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1404 
pxDñayedLi°
 = 
pxDñayedTaskLi°
;

1405 
pxOvîÊowedDñayedLi°
 = 
pxOvîÊowDñayedTaskLi°
;

1407 
	`èskEXIT_CRITICAL
();

1409 if––
pxSèãLi°
 =
pxDñayedLi°
 ) || (ÖxSèãLi° =
pxOvîÊowedDñayedLi°
 ) )

1413 
eRëu∫
 = 
eBlocked
;

1416 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1417 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

1422 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

1424 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1430 if–
pxTCB
->
ucNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

1432 
eRëu∫
 = 
eBlocked
;

1436 
eRëu∫
 = 
eSu•íded
;

1441 
eRëu∫
 = 
eSu•íded
;

1447 
eRëu∫
 = 
eBlocked
;

1452 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1453 if––
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 ) || (ÖxSèãLi° =
NULL
 ) )

1458 
eRëu∫
 = 
eDñëed
;

1466 
eRëu∫
 = 
eRódy
;

1470  
eRëu∫
;

1471 
	}
}

1476 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1478 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1480 
TCB_t
 c⁄° *
pxTCB
;

1481 
UBa£Ty≥_t
 
uxRëu∫
;

1483 
	`èskENTER_CRITICAL
();

1487 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1488 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1490 
	`èskEXIT_CRITICAL
();

1492  
uxRëu∫
;

1493 
	}
}

1498 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1500 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGëFromISR
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1502 
TCB_t
 c⁄° *
pxTCB
;

1503 
UBa£Ty≥_t
 
uxRëu∫
, 
uxSavedI¡îru±Sèã
;

1521 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1523 
uxSavedI¡îru±Sèã
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1527 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1528 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1530 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sèã
 );

1532  
uxRëu∫
;

1533 
	}
}

1538 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1540 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1542 
TCB_t
 *
pxTCB
;

1543 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1544 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1546 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

1549 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1551 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1555 
	`mtCOVERAGE_TEST_MARKER
();

1558 
	`èskENTER_CRITICAL
();

1562 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1564 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1566 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1568 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1572 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1576 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1580 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1582 if–
pxTCB
 !
pxCuºítTCB
 )

1587 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1589 
xYõldRequúed
 = 
pdTRUE
;

1593 
	`mtCOVERAGE_TEST_MARKER
();

1603 if–
pxTCB
 =
pxCuºítTCB
 )

1608 
xYõldRequúed
 = 
pdTRUE
;

1620 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1622 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1626 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1628 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1632 
	`mtCOVERAGE_TEST_MARKER
();

1636 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1640 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1646 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1648 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1652 
	`mtCOVERAGE_TEST_MARKER
();

1659 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1664 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1669 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1673 
	`mtCOVERAGE_TEST_MARKER
();

1675 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1679 
	`mtCOVERAGE_TEST_MARKER
();

1682 if–
xYõldRequúed
 !
pdFALSE
 )

1684 
	`èskYIELD_IF_USING_PREEMPTION
();

1688 
	`mtCOVERAGE_TEST_MARKER
();

1693 –Ë
uxPri‹ôyU£dOnE¡ry
;

1696 
	`èskEXIT_CRITICAL
();

1697 
	}
}

1702 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1704 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1706 
TCB_t
 *
pxTCB
;

1708 
	`èskENTER_CRITICAL
();

1712 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1714 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1718 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1720 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1724 
	`mtCOVERAGE_TEST_MARKER
();

1728 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1730 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1734 
	`mtCOVERAGE_TEST_MARKER
();

1737 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1739 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1741 if–
pxTCB
->
ucNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

1745 
pxTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

1750 
	`èskEXIT_CRITICAL
();

1752 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1756 
	`èskENTER_CRITICAL
();

1758 
	`¥vRe£tNextTaskUnblockTime
();

1760 
	`èskEXIT_CRITICAL
();

1764 
	`mtCOVERAGE_TEST_MARKER
();

1767 if–
pxTCB
 =
pxCuºítTCB
 )

1769 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1772 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1773 
	`p‹tYIELD_WITHIN_API
();

1780 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1786 
pxCuºítTCB
 = 
NULL
;

1790 
	`vTaskSwôchC⁄ãxt
();

1796 
	`mtCOVERAGE_TEST_MARKER
();

1798 
	}
}

1803 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1805 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1807 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1808 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = 
xTask
;

1814 
	`c⁄figASSERT
–
xTask
 );

1817 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1820 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1824 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1826 
xRëu∫
 = 
pdTRUE
;

1830 
	`mtCOVERAGE_TEST_MARKER
();

1835 
	`mtCOVERAGE_TEST_MARKER
();

1840 
	`mtCOVERAGE_TEST_MARKER
();

1843  
xRëu∫
;

1844 
	}
}

1849 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1851 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1853 
TCB_t
 * c⁄° 
pxTCB
 = 
xTaskToResume
;

1856 
	`c⁄figASSERT
–
xTaskToResume
 );

1860 if––
pxTCB
 !
pxCuºítTCB
 ) && (ÖxTCB !
NULL
 ) )

1862 
	`èskENTER_CRITICAL
();

1864 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1866 
	`åa˚TASK_RESUME
–
pxTCB
 );

1870 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1871 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1874 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1879 
	`èskYIELD_IF_USING_PREEMPTION
();

1883 
	`mtCOVERAGE_TEST_MARKER
();

1888 
	`mtCOVERAGE_TEST_MARKER
();

1891 
	`èskEXIT_CRITICAL
();

1895 
	`mtCOVERAGE_TEST_MARKER
();

1897 
	}
}

1903 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1905 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1907 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1908 
TCB_t
 * c⁄° 
pxTCB
 = 
xTaskToResume
;

1909 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1911 
	`c⁄figASSERT
–
xTaskToResume
 );

1929 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1931 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1933 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1935 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1938 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1942 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1944 
xYõldRequúed
 = 
pdTRUE
;

1948 
	`mtCOVERAGE_TEST_MARKER
();

1951 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1952 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1959 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1964 
	`mtCOVERAGE_TEST_MARKER
();

1967 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1969  
xYõldRequúed
;

1970 
	}
}

1975 
	$vTaskSèπScheduÀr
( )

1977 
Ba£Ty≥_t
 
xRëu∫
;

1980 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1982 
SèticTask_t
 *
pxIdÀTaskTCBBuf„r
 = 
NULL
;

1983 
SèckTy≥_t
 *
pxIdÀTaskSèckBuf„r
 = 
NULL
;

1984 
uöt32_t
 
ulIdÀTaskSèckSize
;

1988 
	`vAµliˇti⁄GëIdÀTaskMem‹y
–&
pxIdÀTaskTCBBuf„r
, &
pxIdÀTaskSèckBuf„r
, &
ulIdÀTaskSèckSize
 );

1989 
xIdÀTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vIdÀTask
,

1990 
c⁄figIDLE_TASK_NAME
,

1991 
ulIdÀTaskSèckSize
,

1992 –* ) 
NULL
,

1993 
p‹tPRIVILEGE_BIT
,

1994 
pxIdÀTaskSèckBuf„r
,

1995 
pxIdÀTaskTCBBuf„r
 );

1997 if–
xIdÀTaskH™dÀ
 !
NULL
 )

1999 
xRëu∫
 = 
pdPASS
;

2003 
xRëu∫
 = 
pdFAIL
;

2009 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
,

2010 
c⁄figIDLE_TASK_NAME
,

2011 
c⁄figMINIMAL_STACK_SIZE
,

2012 –* ) 
NULL
,

2013 
p‹tPRIVILEGE_BIT
,

2014 &
xIdÀTaskH™dÀ
 );

2018 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2020 if–
xRëu∫
 =
pdPASS
 )

2022 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

2026 
	`mtCOVERAGE_TEST_MARKER
();

2031 if–
xRëu∫
 =
pdPASS
 )

2036 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


2038 
	`‰ìπos_èsks_c_addôi⁄s_öô
();

2047 
	`p‹tDISABLE_INTERRUPTS
();

2049 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2055 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2059 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2060 
xScheduÀrRu¬ög
 = 
pdTRUE
;

2061 
xTickCou¡
 = ( 
TickTy≥_t
 ) 
c⁄figINITIAL_TICK_COUNT
;

2069 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

2071 
	`åa˚TASK_SWITCHED_IN
();

2075 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

2090 
	`c⁄figASSERT
–
xRëu∫
 !
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 );

2095 –Ë
xIdÀTaskH™dÀ
;

2096 
	}
}

2099 
	$vTaskEndScheduÀr
( )

2104 
	`p‹tDISABLE_INTERRUPTS
();

2105 
xScheduÀrRu¬ög
 = 
pdFALSE
;

2106 
	`vP‹tEndScheduÀr
();

2107 
	}
}

2110 
	$vTaskSu•ídAŒ
( )

2119 
	`p‹tSOFTWARE_BARRIER
();

2123 ++
uxScheduÀrSu•íded
;

2127 
	`p‹tMEMORY_BARRIER
();

2128 
	}
}

2131 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2133 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

2135 
TickTy≥_t
 
xRëu∫
;

2136 
UBa£Ty≥_t
 
uxHighîPri‹ôyRódyTasks
 = 
pdFALSE
;

2142 #if–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

2144 if–
uxT›RódyPri‹ôy
 > 
tskIDLE_PRIORITY
 )

2146 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2151 c⁄° 
UBa£Ty≥_t
 
uxLó°Signifiˇ¡Bô
 = ( UBaseType_t ) 0x01;

2158 if–
uxT›RódyPri‹ôy
 > 
uxLó°Signifiˇ¡Bô
 )

2160 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2162 
	}
}

2165 if–
	gpxCuºítTCB
->
	guxPri‹ôy
 > 
	gtskIDLE_PRIORITY
 )

2167 
	gxRëu∫
 = 0;

2169 if–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

2174 
	gxRëu∫
 = 0;

2176 if–
	guxHighîPri‹ôyRódyTasks
 !
pdFALSE
 )

2181 
xRëu∫
 = 0;

2185 
	gxRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

2188  
	gxRëu∫
;

2194 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

2196 
TCB_t
 *
pxTCB
 = 
NULL
;

2197 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

2201 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

2208 
	`èskENTER_CRITICAL
();

2210 --
uxScheduÀrSu•íded
;

2212 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2214 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

2218  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

2220 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

2221 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2222 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2223 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2227 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2229 
xYõldPídög
 = 
pdTRUE
;

2233 
	`mtCOVERAGE_TEST_MARKER
();

2237 if–
pxTCB
 !
NULL
 )

2245 
	`¥vRe£tNextTaskUnblockTime
();

2253 
TickTy≥_t
 
xPídedCou¡s
 = 
xPídedTicks
;

2255 if–
xPídedCou¡s
 > ( 
TickTy≥_t
 ) 0U )

2259 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

2261 
xYõldPídög
 = 
pdTRUE
;

2265 
	`mtCOVERAGE_TEST_MARKER
();

2267 --
xPídedCou¡s
;

2268 }  
xPídedCou¡s
 > ( 
TickTy≥_t
 ) 0U );

2270 
xPídedTicks
 = 0;

2274 
	`mtCOVERAGE_TEST_MARKER
();

2278 if–
xYõldPídög
 !
pdFALSE
 )

2280 #if–
c⁄figUSE_PREEMPTION
 != 0 )

2282 
xAÃódyYõlded
 = 
pdTRUE
;

2285 
	`èskYIELD_IF_USING_PREEMPTION
();

2289 
	`mtCOVERAGE_TEST_MARKER
();

2295 
	`mtCOVERAGE_TEST_MARKER
();

2298 
	`èskEXIT_CRITICAL
();

2300  
xAÃódyYõlded
;

2301 
	}
}

2304 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

2306 
TickTy≥_t
 
xTicks
;

2309 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

2311 
xTicks
 = 
xTickCou¡
;

2313 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

2315  
xTicks
;

2316 
	}
}

2319 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

2321 
TickTy≥_t
 
xRëu∫
;

2322 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2338 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

2340 
uxSavedI¡îru±Sètus
 = 
	`p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
();

2342 
xRëu∫
 = 
xTickCou¡
;

2344 
	`p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2346  
xRëu∫
;

2347 
	}
}

2350 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

2354  
uxCuºítNumbîOfTasks
;

2355 
	}
}

2358 *
	$pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

2360 
TCB_t
 *
pxTCB
;

2364 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

2365 
	`c⁄figASSERT
–
pxTCB
 );

2366  &–
pxTCB
->
pcTaskName
[ 0 ] );

2367 
	}
}

2370 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2372 
TCB_t
 *
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 *
pxLi°
, c⁄° 
pcNameToQuîy
[] )

2374 
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
, *
pxRëu∫
 = 
NULL
;

2375 
UBa£Ty≥_t
 
x
;

2376 
cNextCh¨
;

2377 
Ba£Ty≥_t
 
xBªakLo›
;

2381 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

2383 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2387 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2391 
xBªakLo›
 = 
pdFALSE
;

2392  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2394 
cNextCh¨
 = 
pxNextTCB
->
pcTaskName
[ 
x
 ];

2396 if–
cNextCh¨
 !
pcNameToQuîy
[ 
x
 ] )

2399 
xBªakLo›
 = 
pdTRUE
;

2401 if–
cNextCh¨
 == ( ) 0x00 )

2405 
pxRëu∫
 = 
pxNextTCB
;

2406 
xBªakLo›
 = 
pdTRUE
;

2410 
	`mtCOVERAGE_TEST_MARKER
();

2413 if–
xBªakLo›
 !
pdFALSE
 )

2419 if–
pxRëu∫
 !
NULL
 )

2425 }  
pxNextTCB
 !
pxFú°TCB
 );

2429 
	`mtCOVERAGE_TEST_MARKER
();

2432  
pxRëu∫
;

2433 
	}
}

2438 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2440 
TaskH™dÀ_t
 
	$xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 )

2442 
UBa£Ty≥_t
 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2443 
TCB_t
* 
pxTCB
;

2446 
	`c⁄figASSERT
–
	`°æí
–
pcNameToQuîy
 ) < 
c⁄figMAX_TASK_NAME_LEN
 );

2448 
	`vTaskSu•ídAŒ
();

2453 
uxQueue
--;

2454 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
pcNameToQuîy
 );

2456 if–
pxTCB
 !
NULL
 )

2462 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2465 if–
pxTCB
 =
NULL
 )

2467 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxDñayedTaskLi°
, 
pcNameToQuîy
 );

2470 if–
pxTCB
 =
NULL
 )

2472 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
pcNameToQuîy
 );

2475 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2477 if–
pxTCB
 =
NULL
 )

2480 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xSu•ídedTaskLi°
, 
pcNameToQuîy
 );

2485 #if–
INCLUDE_vTaskDñëe
 == 1 )

2487 if–
pxTCB
 =
NULL
 )

2490 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xTasksWaôögTîmö©i⁄
, 
pcNameToQuîy
 );

2495 –Ë
	`xTaskResumeAŒ
();

2497  
pxTCB
;

2498 
	}
}

2503 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2505 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 )

2507 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2509 
	`vTaskSu•ídAŒ
();

2512 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

2518 
uxQueue
--;

2519 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

2521 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2525 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

2526 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

2528 #if–
INCLUDE_vTaskDñëe
 == 1 )

2532 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

2536 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2540 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

2544 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1)

2546 if–
pulTŸÆRunTime
 !
NULL
 )

2548 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2549 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

2551 *
pulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2557 if–
pulTŸÆRunTime
 !
NULL
 )

2559 *
pulTŸÆRunTime
 = 0;

2566 
	`mtCOVERAGE_TEST_MARKER
();

2569 –Ë
	`xTaskResumeAŒ
();

2571  
uxTask
;

2572 
	}
}

2577 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

2579 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

2583 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

2584  
xIdÀTaskH™dÀ
;

2585 
	}
}

2594 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2596 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

2601 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

2602 
xTickCou¡
 +
xTicksToJump
;

2603 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

2604 
	}
}

2609 
Ba£Ty≥_t
 
	$xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 )

2611 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

2615 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

2619 
	`vTaskSu•ídAŒ
();

2620 
xPídedTicks
 +
xTicksToC©chUp
;

2621 
xYõldRequúed
 = 
	`xTaskResumeAŒ
();

2623  
xYõldRequúed
;

2624 
	}
}

2627 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

2629 
Ba£Ty≥_t
 
	$xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 )

2631 
TCB_t
 *
pxTCB
 = 
xTask
;

2632 
Ba£Ty≥_t
 
xRëu∫
;

2634 
	`c⁄figASSERT
–
pxTCB
 );

2636 
	`vTaskSu•ídAŒ
();

2640 if–
	`eTaskGëSèã
–
xTask
 ) =
eBlocked
 )

2642 
xRëu∫
 = 
pdPASS
;

2647 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2653 
	`èskENTER_CRITICAL
();

2655 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2657 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2662 
pxTCB
->
ucDñayAb‹ãd
 = 
pdTRUE
;

2666 
	`mtCOVERAGE_TEST_MARKER
();

2669 
	`èskEXIT_CRITICAL
();

2672 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2676 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2681 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2685 
xYõldPídög
 = 
pdTRUE
;

2689 
	`mtCOVERAGE_TEST_MARKER
();

2696 
xRëu∫
 = 
pdFAIL
;

2699 –Ë
	`xTaskResumeAŒ
();

2701  
xRëu∫
;

2702 
	}
}

2707 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

2709 
TCB_t
 * 
pxTCB
;

2710 
TickTy≥_t
 
xIãmVÆue
;

2711 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

2716 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

2717 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2721 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
 + ( TickType_t ) 1;

2725 
xTickCou¡
 = 
xC⁄°TickCou¡
;

2727 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

2729 
	`èskSWITCH_DELAYED_LISTS
();

2733 
	`mtCOVERAGE_TEST_MARKER
();

2740 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

2744 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

2751 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2760 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

2761 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2763 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

2770 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

2775 
	`mtCOVERAGE_TEST_MARKER
();

2779 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2783 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2785 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2789 
	`mtCOVERAGE_TEST_MARKER
();

2794 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2798 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2804 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2806 
xSwôchRequúed
 = 
pdTRUE
;

2810 
	`mtCOVERAGE_TEST_MARKER
();

2821 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

2823 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2825 
xSwôchRequúed
 = 
pdTRUE
;

2829 
	`mtCOVERAGE_TEST_MARKER
();

2834 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2838 if–
xPídedTicks
 =–
TickTy≥_t
 ) 0 )

2840 
	`vAµliˇti⁄TickHook
();

2844 
	`mtCOVERAGE_TEST_MARKER
();

2849 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2851 if–
xYõldPídög
 !
pdFALSE
 )

2853 
xSwôchRequúed
 = 
pdTRUE
;

2857 
	`mtCOVERAGE_TEST_MARKER
();

2864 ++
xPídedTicks
;

2868 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2870 
	`vAµliˇti⁄TickHook
();

2875  
xSwôchRequúed
;

2876 
	}
}

2879 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2881 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2883 
TCB_t
 *
xTCB
;

2887 if–
xTask
 =
NULL
 )

2889 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2893 
xTCB
 = 
xTask
;

2898 
	`èskENTER_CRITICAL
();

2900 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2902 
	`èskEXIT_CRITICAL
();

2903 
	}
}

2908 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2910 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2912 
TCB_t
 *
pxTCB
;

2913 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2916 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2920 
	`èskENTER_CRITICAL
();

2922 
xRëu∫
 = 
pxTCB
->
pxTaskTag
;

2924 
	`èskEXIT_CRITICAL
();

2926  
xRëu∫
;

2927 
	}
}

2932 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2934 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTagFromISR
–
TaskH™dÀ_t
 
xTask
 )

2936 
TCB_t
 *
pxTCB
;

2937 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2938 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2941 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2945 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

2947 
xRëu∫
 = 
pxTCB
->
pxTaskTag
;

2949 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2951  
xRëu∫
;

2952 
	}
}

2957 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2959 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 )

2961 
TCB_t
 *
xTCB
;

2962 
Ba£Ty≥_t
 
xRëu∫
;

2965 if–
xTask
 =
NULL
 )

2967 
xTCB
 = 
pxCuºítTCB
;

2971 
xTCB
 = 
xTask
;

2974 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2976 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2980 
xRëu∫
 = 
pdFAIL
;

2983  
xRëu∫
;

2984 
	}
}

2989 
	$vTaskSwôchC⁄ãxt
( )

2991 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2995 
xYõldPídög
 = 
pdTRUE
;

2999 
xYõldPídög
 = 
pdFALSE
;

3000 
	`åa˚TASK_SWITCHED_OUT
();

3002 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3004 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


3005 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

3007 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

3017 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

3019 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

3023 
	`mtCOVERAGE_TEST_MARKER
();

3025 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

3030 
	`èskCHECK_FOR_STACK_OVERFLOW
();

3033 #if–
c⁄figUSE_POSIX_ERRNO
 == 1 )

3035 
pxCuºítTCB
->
iTaskEºno
 = 
FªeRTOS_î∫o
;

3041 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

3042 
	`åa˚TASK_SWITCHED_IN
();

3045 #if–
c⁄figUSE_POSIX_ERRNO
 == 1 )

3047 
FªeRTOS_î∫o
 = 
pxCuºítTCB
->
iTaskEºno
;

3051 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3057 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

3061 
	}
}

3064 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

3066 
	`c⁄figASSERT
–
pxEvítLi°
 );

3075 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3077 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

3078 
	}
}

3081 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 )

3083 
	`c⁄figASSERT
–
pxEvítLi°
 );

3087 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

3092 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3099 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3101 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

3102 
	}
}

3105 #if–
c⁄figUSE_TIMERS
 == 1 )

3107 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

3109 
	`c⁄figASSERT
–
pxEvítLi°
 );

3121 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3126 if–
xWaôIndeföôñy
 !
pdFALSE
 )

3128 
xTicksToWaô
 = 
p‹tMAX_DELAY
;

3131 
	`åa˚TASK_DELAY_UNTIL
––
xTickCou¡
 + 
xTicksToWaô
 ) );

3132 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
xWaôIndeföôñy
 );

3133 
	}
}

3138 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

3140 
TCB_t
 *
pxUnblockedTCB
;

3141 
Ba£Ty≥_t
 
xRëu∫
;

3156 
pxUnblockedTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

3157 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3158 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3160 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3162 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3163 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3165 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3175 
	`¥vRe£tNextTaskUnblockTime
();

3183 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3186 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3191 
xRëu∫
 = 
pdTRUE
;

3195 
xYõldPídög
 = 
pdTRUE
;

3199 
xRëu∫
 = 
pdFALSE
;

3202  
xRëu∫
;

3203 
	}
}

3206 
	$vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

3208 
TCB_t
 *
pxUnblockedTCB
;

3212 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

3215 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3219 
pxUnblockedTCB
 = 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

3220 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3221 –Ë
	`uxLi°Remove
–
pxEvítLi°Iãm
 );

3223 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3233 
	`¥vRe£tNextTaskUnblockTime
();

3240 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3241 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3243 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3249 
xYõldPídög
 = 
pdTRUE
;

3251 
	}
}

3254 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3256 
	`c⁄figASSERT
–
pxTimeOut
 );

3257 
	`èskENTER_CRITICAL
();

3259 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3260 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3262 
	`èskEXIT_CRITICAL
();

3263 
	}
}

3266 
	$vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3269 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3270 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3271 
	}
}

3274 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

3276 
Ba£Ty≥_t
 
xRëu∫
;

3278 
	`c⁄figASSERT
–
pxTimeOut
 );

3279 
	`c⁄figASSERT
–
pxTicksToWaô
 );

3281 
	`èskENTER_CRITICAL
();

3284 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

3285 c⁄° 
TickTy≥_t
 
xEœp£dTime
 = 
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
;

3287 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

3288 if–
pxCuºítTCB
->
ucDñayAb‹ãd
 !–
uöt8_t
 ) 
pdFALSE
 )

3292 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

3293 
xRëu∫
 = 
pdTRUE
;

3298 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3299 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

3304 
xRëu∫
 = 
pdFALSE
;

3309 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

3316 
xRëu∫
 = 
pdTRUE
;

3318 if–
xEœp£dTime
 < *
pxTicksToWaô
 )

3321 *
pxTicksToWaô
 -
xEœp£dTime
;

3322 
	`vTaskI¡î«lSëTimeOutSèã
–
pxTimeOut
 );

3323 
xRëu∫
 = 
pdFALSE
;

3327 *
pxTicksToWaô
 = 0;

3328 
xRëu∫
 = 
pdTRUE
;

3331 
	`èskEXIT_CRITICAL
();

3333  
xRëu∫
;

3334 
	}
}

3337 
	$vTaskMis£dYõld
( )

3339 
xYõldPídög
 = 
pdTRUE
;

3340 
	}
}

3343 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3345 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

3347 
UBa£Ty≥_t
 
uxRëu∫
;

3348 
TCB_t
 c⁄° *
pxTCB
;

3350 if–
xTask
 !
NULL
 )

3352 
pxTCB
 = 
xTask
;

3353 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

3357 
uxRëu∫
 = 0U;

3360  
uxRëu∫
;

3361 
	}
}

3366 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3368 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

3370 
TCB_t
 * 
pxTCB
;

3372 if–
xTask
 !
NULL
 )

3374 
pxTCB
 = 
xTask
;

3375 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

3377 
	}
}

3392 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

3395 –Ë
pvP¨amëîs
;

3403 
	`p‹tALLOCATE_SECURE_CONTEXT
–
c⁄figMINIMAL_SECURE_STACK_SIZE
 );

3409 
	`¥vCheckTasksWaôögTîmö©i⁄
();

3411 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

3417 
	`èskYIELD
();

3421 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

3432 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

3434 
	`èskYIELD
();

3438 
	`mtCOVERAGE_TEST_MARKER
();

3443 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

3445 
	`vAµliˇti⁄IdÀHook
( );

3452 
	`vAµliˇti⁄IdÀHook
();

3460 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3462 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

3469 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3471 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3473 
	`vTaskSu•ídAŒ
();

3478 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

3479 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3484 
	`c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

3486 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3488 
	`åa˚LOW_POWER_IDLE_BEGIN
();

3489 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

3490 
	`åa˚LOW_POWER_IDLE_END
();

3494 
	`mtCOVERAGE_TEST_MARKER
();

3497 –Ë
	`xTaskResumeAŒ
();

3501 
	`mtCOVERAGE_TEST_MARKER
();

3506 
	}
}

3509 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3511 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

3514 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

3515 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

3519 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

3522 
eRëu∫
 = 
eAb‹tSÀï
;

3524 if–
xYõldPídög
 !
pdFALSE
 )

3527 
eRëu∫
 = 
eAb‹tSÀï
;

3535 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

3537 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

3541 
	`mtCOVERAGE_TEST_MARKER
();

3545  
eRëu∫
;

3546 
	}
}

3551 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3553 
	$vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 )

3555 
TCB_t
 *
pxTCB
;

3557 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3559 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSë
 );

3560 
	`c⁄figASSERT
–
pxTCB
 !
NULL
 );

3561 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ] = 
pvVÆue
;

3563 
	}
}

3568 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3570 *
	$pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 )

3572 *
pvRëu∫
 = 
NULL
;

3573 
TCB_t
 *
pxTCB
;

3575 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3577 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

3578 
pvRëu∫
 = 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ];

3582 
pvRëu∫
 = 
NULL
;

3585  
pvRëu∫
;

3586 
	}
}

3591 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

3593 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

3595 
TCB_t
 *
pxTCB
;

3599 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

3601 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

3602 
	}
}

3607 
	$¥vInôüli£TaskLi°s
( )

3609 
UBa£Ty≥_t
 
uxPri‹ôy
;

3611  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

3613 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

3616 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

3617 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

3618 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

3620 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3622 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

3626 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3628 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

3634 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

3635 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

3636 
	}
}

3639 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

3644 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3646 
TCB_t
 *
pxTCB
;

3650  
uxDñëedTasksWaôögCÀ™Up
 > ( 
UBa£Ty≥_t
 ) 0U )

3652 
	`èskENTER_CRITICAL
();

3654 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

3655 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

3656 --
uxCuºítNumbîOfTasks
;

3657 --
uxDñëedTasksWaôögCÀ™Up
;

3659 
	`èskEXIT_CRITICAL
();

3661 
	`¥vDñëeTCB
–
pxTCB
 );

3665 
	}
}

3668 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3670 
	$vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 )

3672 
TCB_t
 *
pxTCB
;

3675 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3677 
pxTaskSètus
->
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxTCB
;

3678 
pxTaskSètus
->
pcTaskName
 = ( c⁄° * ) &–
pxTCB
->pcTaskName [ 0 ] );

3679 
pxTaskSètus
->
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

3680 
pxTaskSètus
->
pxSèckBa£
 = 
pxTCB
->
pxSèck
;

3681 
pxTaskSètus
->
xTaskNumbî
 = 
pxTCB
->
uxTCBNumbî
;

3683 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3685 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 
pxTCB
->uxBasePriority;

3689 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 0;

3693 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3695 
pxTaskSètus
->
ulRunTimeCou¡î
 = 
pxTCB
->ulRunTimeCounter;

3699 
pxTaskSètus
->
ulRunTimeCou¡î
 = 0;

3706 if–
eSèã
 !
eInvÆid
 )

3708 if–
pxTCB
 =
pxCuºítTCB
 )

3710 
pxTaskSètus
->
eCuºítSèã
 = 
eRu¬ög
;

3714 
pxTaskSètus
->
eCuºítSèã
 = 
eSèã
;

3716 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3721 if–
eSèã
 =
eSu•íded
 )

3723 
	`vTaskSu•ídAŒ
();

3725 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

3727 
pxTaskSètus
->
eCuºítSèã
 = 
eBlocked
;

3730 –Ë
	`xTaskResumeAŒ
();

3738 
pxTaskSètus
->
eCuºítSèã
 = 
	`eTaskGëSèã
–
pxTCB
 );

3743 if–
xGëFªeSèckS∑˚
 !
pdFALSE
 )

3745 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3747 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
 );

3751 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxSèck
 );

3757 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 0;

3759 
	}
}

3764 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3766 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 )

3768 
c⁄figLIST_VOLATILE
 
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
;

3769 
UBa£Ty≥_t
 
uxTask
 = 0;

3771 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

3773 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

3781 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

3782 
	`vTaskGëInfo
––
TaskH™dÀ_t
 ) 
pxNextTCB
, &–
pxTaskSètusAºay
[ 
uxTask
 ] ), 
pdTRUE
, 
eSèã
 );

3783 
uxTask
++;

3784 }  
pxNextTCB
 !
pxFú°TCB
 );

3788 
	`mtCOVERAGE_TEST_MARKER
();

3791  
uxTask
;

3792 
	}
}

3797 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

3799 
c⁄figSTACK_DEPTH_TYPE
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3801 
uöt32_t
 
ulCou¡
 = 0U;

3803  *
pucSèckByã
 =–
uöt8_t
 ) 
tskSTACK_FILL_BYTE
 )

3805 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3806 
ulCou¡
++;

3809 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3811  ( 
c⁄figSTACK_DEPTH_TYPE
 ) 
ulCou¡
;

3812 
	}
}

3817 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 )

3824 
c⁄figSTACK_DEPTH_TYPE
 
	$uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 )

3826 
TCB_t
 *
pxTCB
;

3827 
uöt8_t
 *
pucEndOfSèck
;

3828 
c⁄figSTACK_DEPTH_TYPE
 
uxRëu∫
;

3837 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3839 #i‡
p‹tSTACK_GROWTH
 < 0

3841 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3845 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3849 
uxRëu∫
 = 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3851  
uxRëu∫
;

3852 
	}
}

3857 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3859 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3861 
TCB_t
 *
pxTCB
;

3862 
uöt8_t
 *
pucEndOfSèck
;

3863 
UBa£Ty≥_t
 
uxRëu∫
;

3865 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3867 #i‡
p‹tSTACK_GROWTH
 < 0

3869 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3873 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3877 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3879  
uxRëu∫
;

3880 
	}
}

3885 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3887 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 )

3892 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3898 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3900 
	`_ª˛aim_ªít
–&–
pxTCB
->
xNewLib_ªít
 ) );

3904 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
p‹tUSING_MPU_WRAPPERS
 == 0 ) )

3908 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3909 
	`vP‹tFªe
–
pxTCB
 );

3911 #ñif–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

3916 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 )

3920 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3921 
	`vP‹tFªe
–
pxTCB
 );

3923 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_ONLY
 )

3927 
	`vP‹tFªe
–
pxTCB
 );

3933 
	`c⁄figASSERT
–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 );

3934 
	`mtCOVERAGE_TEST_MARKER
();

3938 
	}
}

3943 
	$¥vRe£tNextTaskUnblockTime
( )

3945 
TCB_t
 *
pxTCB
;

3947 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3953 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3961 –
pxTCB
 ) = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

3962 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&––
pxTCB
 )->
xSèãLi°Iãm
 ) );

3964 
	}
}

3967 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

3969 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

3971 
TaskH™dÀ_t
 
xRëu∫
;

3976 
xRëu∫
 = 
pxCuºítTCB
;

3978  
xRëu∫
;

3979 
	}
}

3984 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

3986 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

3988 
Ba£Ty≥_t
 
xRëu∫
;

3990 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

3992 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

3996 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3998 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

4002 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

4006  
xRëu∫
;

4007 
	}
}

4012 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4014 
Ba£Ty≥_t
 
	$xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

4016 
TCB_t
 * c⁄° 
pxMuãxHﬁdîTCB
 = 
pxMuãxHﬁdî
;

4017 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

4022 if–
pxMuãxHﬁdî
 !
NULL
 )

4027 if–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

4032 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4034 
	`li°SET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

4038 
	`mtCOVERAGE_TEST_MARKER
();

4043 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 ] ), &–pxMuãxHﬁdîTCB->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4045 if–
	`uxLi°Remove
–&–
pxMuãxHﬁdîTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4050 
	`p‹tRESET_READY_PRIORITY
–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4054 
	`mtCOVERAGE_TEST_MARKER
();

4058 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

4059 
	`¥vAddTaskToRódyLi°
–
pxMuãxHﬁdîTCB
 );

4064 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

4067 
	`åa˚TASK_PRIORITY_INHERIT
–
pxMuãxHﬁdîTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

4070 
xRëu∫
 = 
pdTRUE
;

4074 if–
pxMuãxHﬁdîTCB
->
uxBa£Pri‹ôy
 < 
pxCuºítTCB
->
uxPri‹ôy
 )

4083 
xRëu∫
 = 
pdTRUE
;

4087 
	`mtCOVERAGE_TEST_MARKER
();

4093 
	`mtCOVERAGE_TEST_MARKER
();

4096  
xRëu∫
;

4097 
	}
}

4102 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4104 
Ba£Ty≥_t
 
	$xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

4106 
TCB_t
 * c⁄° 
pxTCB
 = 
pxMuãxHﬁdî
;

4107 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

4109 if–
pxMuãxHﬁdî
 !
NULL
 )

4115 
	`c⁄figASSERT
–
pxTCB
 =
pxCuºítTCB
 );

4116 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

4117 –
pxTCB
->
uxMuãxesHñd
 )--;

4121 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

4124 if–
pxTCB
->
uxMuãxesHñd
 =–
UBa£Ty≥_t
 ) 0 )

4131 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4133 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

4137 
	`mtCOVERAGE_TEST_MARKER
();

4142 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

4143 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

4148 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

4149 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4159 
xRëu∫
 = 
pdTRUE
;

4163 
	`mtCOVERAGE_TEST_MARKER
();

4168 
	`mtCOVERAGE_TEST_MARKER
();

4173 
	`mtCOVERAGE_TEST_MARKER
();

4176  
xRëu∫
;

4177 
	}
}

4182 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4184 
	$vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
, 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 )

4186 
TCB_t
 * c⁄° 
pxTCB
 = 
pxMuãxHﬁdî
;

4187 
UBa£Ty≥_t
 
uxPri‹ôyU£dOnE¡ry
, 
uxPri‹ôyToU£
;

4188 c⁄° 
UBa£Ty≥_t
 
uxO∆yO√MuãxHñd
 = ( UBaseType_t ) 1;

4190 if–
pxMuãxHﬁdî
 !
NULL
 )

4194 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

4200 if–
pxTCB
->
uxBa£Pri‹ôy
 < 
uxHighe°Pri‹ôyWaôögTask
 )

4202 
uxPri‹ôyToU£
 = 
uxHighe°Pri‹ôyWaôögTask
;

4206 
uxPri‹ôyToU£
 = 
pxTCB
->
uxBa£Pri‹ôy
;

4210 if–
pxTCB
->
uxPri‹ôy
 !
uxPri‹ôyToU£
 )

4216 if–
pxTCB
->
uxMuãxesHñd
 =
uxO∆yO√MuãxHñd
 )

4221 
	`c⁄figASSERT
–
pxTCB
 !
pxCuºítTCB
 );

4226 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

4227 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

4228 
pxTCB
->
uxPri‹ôy
 = 
uxPri‹ôyToU£
;

4232 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4234 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôyToU£
 );

4238 
	`mtCOVERAGE_TEST_MARKER
();

4247 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4249 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4254 
	`p‹tRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4258 
	`mtCOVERAGE_TEST_MARKER
();

4261 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4265 
	`mtCOVERAGE_TEST_MARKER
();

4270 
	`mtCOVERAGE_TEST_MARKER
();

4275 
	`mtCOVERAGE_TEST_MARKER
();

4280 
	`mtCOVERAGE_TEST_MARKER
();

4282 
	}
}

4287 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4289 
	$vTaskE¡îCrôiˇl
( )

4291 
	`p‹tDISABLE_INTERRUPTS
();

4293 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4295 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

4303 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 1 )

4305 
	`p‹tASSERT_IF_IN_ISR
();

4310 
	`mtCOVERAGE_TEST_MARKER
();

4312 
	}
}

4317 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4319 
	$vTaskExôCrôiˇl
( )

4321 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4323 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

4325 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

4327 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

4329 
	`p‹tENABLE_INTERRUPTS
();

4333 
	`mtCOVERAGE_TEST_MARKER
();

4338 
	`mtCOVERAGE_TEST_MARKER
();

4343 
	`mtCOVERAGE_TEST_MARKER
();

4345 
	}
}

4350 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

4352 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 )

4354 
size_t
 
x
;

4357 
	`°r˝y
–
pcBuf„r
, 
pcTaskName
 );

4361  
x
 = 
	`°æí
–
pcBuf„r
 ); x < ( 
size_t
 ) ( 
c⁄figMAX_TASK_NAME_LEN
 - 1 ); x++ )

4363 
pcBuf„r
[ 
x
 ] = ' ';

4367 
pcBuf„r
[ 
x
 ] = ( ) 0x00;

4370  &–
pcBuf„r
[ 
x
 ] );

4371 
	}
}

4376 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4378 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

4380 
TaskSètus_t
 *
pxTaskSètusAºay
;

4381 
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4382 
cSètus
;

4410 *
pcWrôeBuf„r
 = ( ) 0x00;

4414 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4419 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4421 if–
pxTaskSètusAºay
 !
NULL
 )

4424 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

4427  
x
 = 0; x < 
uxAºaySize
; x++ )

4429  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

4431 
eRu¬ög
: 
cSètus
 = 
tskRUNNING_CHAR
;

4434 
eRódy
: 
cSètus
 = 
tskREADY_CHAR
;

4437 
eBlocked
: 
cSètus
 = 
tskBLOCKED_CHAR
;

4440 
eSu•íded
: 
cSètus
 = 
tskSUSPENDED_CHAR
;

4443 
eDñëed
: 
cSètus
 = 
tskDELETED_CHAR
;

4446 
eInvÆid
:

4449 
cSètus
 = ( ) 0x00;

4455 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4458 
	`•rötf
–
pcWrôeBuf„r
, "\t%c\t%u\t%u\t%u\r\n", 
cSètus
, ( Ë
pxTaskSètusAºay
[ 
x
 ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

4459 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4464 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4468 
	`mtCOVERAGE_TEST_MARKER
();

4470 
	}
}

4475 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4477 
	$vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 )

4479 
TaskSètus_t
 *
pxTaskSètusAºay
;

4480 
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4481 
uöt32_t
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

4483 #if–
c⁄figUSE_TRACE_FACILITY
 != 1 )

4485 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

4515 *
pcWrôeBuf„r
 = ( ) 0x00;

4519 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4524 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4526 if–
pxTaskSètusAºay
 !
NULL
 )

4529 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

4532 
ulTŸÆTime
 /= 100UL;

4535 if–
ulTŸÆTime
 > 0UL )

4538  
x
 = 0; x < 
uxAºaySize
; x++ )

4543 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

4548 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4550 if–
ulSètsAsPî˚¡age
 > 0UL )

4552 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4554 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

4560 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t%u%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

4568 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4570 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4576 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t<1%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4581 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4586 
	`mtCOVERAGE_TEST_MARKER
();

4591 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4595 
	`mtCOVERAGE_TEST_MARKER
();

4597 
	}
}

4602 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

4604 
TickTy≥_t
 
uxRëu∫
;

4606 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

4610 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

4612  
uxRëu∫
;

4613 
	}
}

4616 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4618 
TaskH™dÀ_t
 
	$pvTaskIn¸emítMuãxHñdCou¡
( )

4622 if–
pxCuºítTCB
 !
NULL
 )

4624 –
pxCuºítTCB
->
uxMuãxesHñd
 )++;

4627  
pxCuºítTCB
;

4628 
	}
}

4633 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4635 
uöt32_t
 
	$ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 )

4637 
uöt32_t
 
ulRëu∫
;

4639 
	`èskENTER_CRITICAL
();

4642 if–
pxCuºítTCB
->
ulNŸifõdVÆue
 == 0UL )

4645 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskWAITING_NOTIFICATION
;

4647 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4649 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4650 
	`åa˚TASK_NOTIFY_TAKE_BLOCK
();

4656 
	`p‹tYIELD_WITHIN_API
();

4660 
	`mtCOVERAGE_TEST_MARKER
();

4665 
	`mtCOVERAGE_TEST_MARKER
();

4668 
	`èskEXIT_CRITICAL
();

4670 
	`èskENTER_CRITICAL
();

4672 
	`åa˚TASK_NOTIFY_TAKE
();

4673 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4675 if–
ulRëu∫
 != 0UL )

4677 if–
xCÀ¨Cou¡OnExô
 !
pdFALSE
 )

4679 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 0UL;

4683 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 
ulRëu∫
 - ( 
uöt32_t
 ) 1;

4688 
	`mtCOVERAGE_TEST_MARKER
();

4691 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4693 
	`èskEXIT_CRITICAL
();

4695  
ulRëu∫
;

4696 
	}
}

4701 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4703 
Ba£Ty≥_t
 
	$xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 )

4705 
Ba£Ty≥_t
 
xRëu∫
;

4707 
	`èskENTER_CRITICAL
();

4710 if–
pxCuºítTCB
->
ucNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4715 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnE¡ry
;

4718 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskWAITING_NOTIFICATION
;

4720 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4722 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4723 
	`åa˚TASK_NOTIFY_WAIT_BLOCK
();

4729 
	`p‹tYIELD_WITHIN_API
();

4733 
	`mtCOVERAGE_TEST_MARKER
();

4738 
	`mtCOVERAGE_TEST_MARKER
();

4741 
	`èskEXIT_CRITICAL
();

4743 
	`èskENTER_CRITICAL
();

4745 
	`åa˚TASK_NOTIFY_WAIT
();

4747 if–
pulNŸifiˇti⁄VÆue
 !
NULL
 )

4751 *
pulNŸifiˇti⁄VÆue
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4758 if–
pxCuºítTCB
->
ucNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4761 
xRëu∫
 = 
pdFALSE
;

4767 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnExô
;

4768 
xRëu∫
 = 
pdTRUE
;

4771 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4773 
	`èskEXIT_CRITICAL
();

4775  
xRëu∫
;

4776 
	}
}

4781 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4783 
Ba£Ty≥_t
 
	$xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 )

4785 
TCB_t
 * 
pxTCB
;

4786 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4787 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4789 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4790 
pxTCB
 = 
xTaskToNŸify
;

4792 
	`èskENTER_CRITICAL
();

4794 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4796 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4799 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4801 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4803  
eA˘i⁄
 )

4805 
eSëBôs
 :

4806 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4809 
eIn¸emít
 :

4810 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4813 
eSëVÆueWôhOvîwrôe
 :

4814 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4817 
eSëVÆueWôhoutOvîwrôe
 :

4818 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4820 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4825 
xRëu∫
 = 
pdFAIL
;

4829 
eNoA˘i⁄
:

4838 
	`c⁄figASSERT
–
pxTCB
->
ulNŸifõdVÆue
 == ~0UL );

4843 
	`åa˚TASK_NOTIFY
();

4847 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4849 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4850 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4853 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4855 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

4867 
	`¥vRe£tNextTaskUnblockTime
();

4871 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4875 
	`èskYIELD_IF_USING_PREEMPTION
();

4879 
	`mtCOVERAGE_TEST_MARKER
();

4884 
	`mtCOVERAGE_TEST_MARKER
();

4887 
	`èskEXIT_CRITICAL
();

4889  
xRëu∫
;

4890 
	}
}

4895 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4897 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4899 
TCB_t
 * 
pxTCB
;

4900 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4901 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4902 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4904 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4922 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4924 
pxTCB
 = 
xTaskToNŸify
;

4926 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4928 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4930 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4933 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4934 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4936  
eA˘i⁄
 )

4938 
eSëBôs
 :

4939 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4942 
eIn¸emít
 :

4943 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4946 
eSëVÆueWôhOvîwrôe
 :

4947 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4950 
eSëVÆueWôhoutOvîwrôe
 :

4951 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4953 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4958 
xRëu∫
 = 
pdFAIL
;

4962 
eNoA˘i⁄
 :

4971 
	`c⁄figASSERT
–
pxTCB
->
ulNŸifõdVÆue
 == ~0UL );

4975 
	`åa˚TASK_NOTIFY_FROM_ISR
();

4979 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4982 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4984 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4986 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4987 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4993 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4996 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

5000 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

5002 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

5008 
xYõldPídög
 = 
pdTRUE
;

5012 
	`mtCOVERAGE_TEST_MARKER
();

5016 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

5018  
xRëu∫
;

5019 
	}
}

5024 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5026 
	$vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

5028 
TCB_t
 * 
pxTCB
;

5029 
uöt8_t
 
ucOrigöÆNŸifySèã
;

5030 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

5032 
	`c⁄figASSERT
–
xTaskToNŸify
 );

5050 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

5052 
pxTCB
 = 
xTaskToNŸify
;

5054 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

5056 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

5057 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

5061 –
pxTCB
->
ulNŸifõdVÆue
 )++;

5063 
	`åa˚TASK_NOTIFY_GIVE_FROM_ISR
();

5067 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

5070 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

5072 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

5074 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

5075 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

5081 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

5084 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

5088 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

5090 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

5096 
xYõldPídög
 = 
pdTRUE
;

5100 
	`mtCOVERAGE_TEST_MARKER
();

5104 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

5105 
	}
}

5110 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5112 
Ba£Ty≥_t
 
	$xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 )

5114 
TCB_t
 *
pxTCB
;

5115 
Ba£Ty≥_t
 
xRëu∫
;

5119 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

5121 
	`èskENTER_CRITICAL
();

5123 if–
pxTCB
->
ucNŸifySèã
 =
èskNOTIFICATION_RECEIVED
 )

5125 
pxTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

5126 
xRëu∫
 = 
pdPASS
;

5130 
xRëu∫
 = 
pdFAIL
;

5133 
	`èskEXIT_CRITICAL
();

5135  
xRëu∫
;

5136 
	}
}

5141 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5143 
uöt32_t
 
	$ulTaskNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
, 
uöt32_t
 
ulBôsToCÀ¨
 )

5145 
TCB_t
 *
pxTCB
;

5146 
uöt32_t
 
ulRëu∫
;

5150 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

5152 
	`èskENTER_CRITICAL
();

5156 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

5157 
pxTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨
;

5159 
	`èskEXIT_CRITICAL
();

5161  
ulRëu∫
;

5162 
	}
}

5167 #if––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 ) )

5169 
uöt32_t
 
	$ulTaskGëIdÀRunTimeCou¡î
( )

5171  
xIdÀTaskH™dÀ
->
ulRunTimeCou¡î
;

5172 
	}
}

5177 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 )

5179 
TickTy≥_t
 
xTimeToWake
;

5180 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

5182 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

5187 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

5193 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

5197 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

5201 
	`mtCOVERAGE_TEST_MARKER
();

5204 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

5206 if––
xTicksToWaô
 =
p‹tMAX_DELAY
 ) && ( 
xC™BlockIndeföôñy
 !
pdFALSE
 ) )

5211 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5218 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

5221 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

5223 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

5227 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5233 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5238 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5240 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5244 
	`mtCOVERAGE_TEST_MARKER
();

5254 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

5257 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

5259 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

5262 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5267 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5272 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5274 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5278 
	`mtCOVERAGE_TEST_MARKER
();

5283 –Ë
xC™BlockIndeföôñy
;

5286 
	}
}

5292 #ifde‡
FREERTOS_MODULE_TEST


5293 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

5297 #if–
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 == 1 )

5299 
	~"‰ìπos_èsks_c_addôi⁄s.h
"

5301 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


5302 
	$‰ìπos_èsks_c_addôi⁄s_öô
( )

5304 
	`FREERTOS_TASKS_C_ADDITIONS_INIT
();

5305 
	}
}

	@C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/timers.c

29 
	~<°dlib.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

36 
	~"FªeRTOS.h
"

37 
	~"èsk.h
"

38 
	~"queue.h
"

39 
	~"timîs.h
"

41 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 0 )

42 #îr‹ 
c⁄figUSE_TIMERS
 
mu°
 
be
 
£t
 
to
 1Åÿ
make
 
the
 
xTimîPídFun˘i⁄CÆl
(Ë
fun˘i⁄
 
avaûabÀ
.

49 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


56 #i‡–
c⁄figUSE_TIMERS
 == 1 )

59 
	#tmrNO_DELAY
 ( 
TickTy≥_t
 ) 0U

	)

63 #i‚de‡
c⁄figTIMER_SERVICE_TASK_NAME


64 
	#c⁄figTIMER_SERVICE_TASK_NAME
 "Tm∏Svc"

	)

68 
	#tmrSTATUS_IS_ACTIVE
 ( ( 
uöt8_t
 ) 0x01 )

	)

69 
	#tmrSTATUS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 0x02 )

	)

70 
	#tmrSTATUS_IS_AUTORELOAD
 ( ( 
uöt8_t
 ) 0x04 )

	)

73 
	stmrTimîC⁄åﬁ


75 c⁄° *
	mpcTimîName
;

76 
Li°Iãm_t
 
	mxTimîLi°Iãm
;

77 
TickTy≥_t
 
	mxTimîPîiodInTicks
;

78 *
	mpvTimîID
;

79 
TimîCÆlbackFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

80 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

81 
UBa£Ty≥_t
 
	muxTimîNumbî
;

83 
uöt8_t
 
	mucSètus
;

84 } 
	txTIMER
;

88 
xTIMER
 
	tTimî_t
;

95 
	stmrTimîP¨amëîs


97 
TickTy≥_t
 
	mxMesßgeVÆue
;

98 
Timî_t
 * 
	mpxTimî
;

99 } 
	tTimîP¨amëî_t
;

102 
	stmrCÆlbackP¨amëîs


104 
PídedFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

105 *
	mpvP¨amëî1
;

106 
uöt32_t
 
	mulP¨amëî2
;

107 } 
	tCÆlbackP¨amëîs_t
;

111 
	stmrTimîQueueMesßge


113 
Ba£Ty≥_t
 
	mxMesßgeID
;

116 
TimîP¨amëî_t
 
	mxTimîP¨amëîs
;

120 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

121 
CÆlbackP¨amëîs_t
 
	mxCÆlbackP¨amëîs
;

123 } 
	mu
;

124 } 
	tD´m⁄TaskMesßge_t
;

135 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°1
;

136 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°2
;

137 
PRIVILEGED_DATA
 
Li°_t
 *
	gpxCuºítTimîLi°
;

138 
PRIVILEGED_DATA
 
Li°_t
 *
	gpxOvîÊowTimîLi°
;

141 
PRIVILEGED_DATA
 
QueueH™dÀ_t
 
	gxTimîQueue
 = 
NULL
;

142 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxTimîTaskH™dÀ
 = 
NULL
;

148 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

154 
vAµliˇti⁄GëTimîTaskMem‹y
–
SèticTask_t
 **
µxTimîTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxTimîTaskSèckBuf„r
, 
uöt32_t
 *
pulTimîTaskSèckSize
 );

162 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

169 
	$p‹tTASK_FUNCTION_PROTO
–
¥vTimîTask
, 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

175 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

181 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
, c⁄° 
TickTy≥_t
 
xNextExpúyTime
, c⁄° TickTy≥_à
xTimeNow
, c⁄° TickTy≥_à
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

187 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° TickTy≥_à
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

193 
	$¥vSwôchTimîLi°s
–Ë
PRIVILEGED_FUNCTION
;

199 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

207 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

213 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, 
Ba£Ty≥_t
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

219 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

220 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

221 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

222 * c⁄° 
pvTimîID
,

223 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

224 
Timî_t
 *
pxNewTimî
 ) 
PRIVILEGED_FUNCTION
;

227 
Ba£Ty≥_t
 
	$xTimîCª©eTimîTask
( )

229 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

235 
	`¥vCheckF‹VÆidLi°AndQueue
();

237 if–
xTimîQueue
 !
NULL
 )

239 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

241 
SèticTask_t
 *
pxTimîTaskTCBBuf„r
 = 
NULL
;

242 
SèckTy≥_t
 *
pxTimîTaskSèckBuf„r
 = 
NULL
;

243 
uöt32_t
 
ulTimîTaskSèckSize
;

245 
	`vAµliˇti⁄GëTimîTaskMem‹y
–&
pxTimîTaskTCBBuf„r
, &
pxTimîTaskSèckBuf„r
, &
ulTimîTaskSèckSize
 );

246 
xTimîTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vTimîTask
,

247 
c⁄figTIMER_SERVICE_TASK_NAME
,

248 
ulTimîTaskSèckSize
,

249 
NULL
,

250 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

251 
pxTimîTaskSèckBuf„r
,

252 
pxTimîTaskTCBBuf„r
 );

254 if–
xTimîTaskH™dÀ
 !
NULL
 )

256 
xRëu∫
 = 
pdPASS
;

261 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
,

262 
c⁄figTIMER_SERVICE_TASK_NAME
,

263 
c⁄figTIMER_TASK_STACK_DEPTH
,

264 
NULL
,

265 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

266 &
xTimîTaskH™dÀ
 );

272 
	`mtCOVERAGE_TEST_MARKER
();

275 
	`c⁄figASSERT
–
xRëu∫
 );

276  
xRëu∫
;

277 
	}
}

280 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

282 
TimîH™dÀ_t
 
	$xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

283 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

284 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

285 * c⁄° 
pvTimîID
,

286 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 )

288 
Timî_t
 *
pxNewTimî
;

290 
pxNewTimî
 = ( 
Timî_t
 * ) 
	`pvP‹tMÆloc
( ( Timer_t ) );

292 if–
pxNewTimî
 !
NULL
 )

297 
pxNewTimî
->
ucSètus
 = 0x00;

298 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

301  
pxNewTimî
;

302 
	}
}

307 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

309 
TimîH™dÀ_t
 
	$xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

310 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

311 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

312 * c⁄° 
pvTimîID
,

313 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

314 
SèticTimî_t
 *
pxTimîBuf„r
 )

316 
Timî_t
 *
pxNewTimî
;

318 #if–
c⁄figASSERT_DEFINED
 == 1 )

323 vﬁ©ûê
size_t
 
xSize
 = –
SèticTimî_t
 );

324 
	`c⁄figASSERT
–
xSize
 =–
Timî_t
 ) );

325 –Ë
xSize
;

330 
	`c⁄figASSERT
–
pxTimîBuf„r
 );

331 
pxNewTimî
 = ( 
Timî_t
 * ) 
pxTimîBuf„r
;

333 if–
pxNewTimî
 !
NULL
 )

338 
pxNewTimî
->
ucSètus
 = 
tmrSTATUS_IS_STATICALLY_ALLOCATED
;

340 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

343  
pxNewTimî
;

344 
	}
}

349 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

350 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

351 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

352 * c⁄° 
pvTimîID
,

353 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

354 
Timî_t
 *
pxNewTimî
 )

357 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

359 if–
pxNewTimî
 !
NULL
 )

363 
	`¥vCheckF‹VÆidLi°AndQueue
();

367 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

368 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

369 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

370 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

371 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

372 if–
uxAutoRñﬂd
 !
pdFALSE
 )

374 
pxNewTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

376 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

378 
	}
}

381 
Ba£Ty≥_t
 
	$xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
Ba£Ty≥_t
 
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 )

383 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

384 
D´m⁄TaskMesßge_t
 
xMesßge
;

386 
	`c⁄figASSERT
–
xTimî
 );

390 if–
xTimîQueue
 !
NULL
 )

393 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

394 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

395 
xMesßge
.
u
.
xTimîP¨amëîs
.
pxTimî
 = 
xTimî
;

397 if–
xComm™dID
 < 
tmrFIRST_FROM_ISR_COMMAND
 )

399 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

401 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

405 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

410 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

413 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

417 
	`mtCOVERAGE_TEST_MARKER
();

420  
xRëu∫
;

421 
	}
}

424 
TaskH™dÀ_t
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

428 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

429  
xTimîTaskH™dÀ
;

430 
	}
}

433 
TickTy≥_t
 
	$xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 )

435 
Timî_t
 *
pxTimî
 = 
xTimî
;

437 
	`c⁄figASSERT
–
xTimî
 );

438  
pxTimî
->
xTimîPîiodInTicks
;

439 
	}
}

442 
	$vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
 )

444 
Timî_t
 * 
pxTimî
 = 
xTimî
;

446 
	`c⁄figASSERT
–
xTimî
 );

447 
	`èskENTER_CRITICAL
();

449 if–
uxAutoRñﬂd
 !
pdFALSE
 )

451 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

455 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_AUTORELOAD
;

458 
	`èskEXIT_CRITICAL
();

459 
	}
}

462 
UBa£Ty≥_t
 
	$uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 )

464 
Timî_t
 * 
pxTimî
 = 
xTimî
;

465 
UBa£Ty≥_t
 
uxRëu∫
;

467 
	`c⁄figASSERT
–
xTimî
 );

468 
	`èskENTER_CRITICAL
();

470 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) == 0 )

473 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
pdFALSE
;

478 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
pdTRUE
;

481 
	`èskEXIT_CRITICAL
();

483  
uxRëu∫
;

484 
	}
}

487 
TickTy≥_t
 
	$xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 )

489 
Timî_t
 * 
pxTimî
 = 
xTimî
;

490 
TickTy≥_t
 
xRëu∫
;

492 
	`c⁄figASSERT
–
xTimî
 );

493 
xRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

494  
xRëu∫
;

495 
	}
}

498 c⁄° * 
	$pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 )

500 
Timî_t
 *
pxTimî
 = 
xTimî
;

502 
	`c⁄figASSERT
–
xTimî
 );

503  
pxTimî
->
pcTimîName
;

504 
	}
}

507 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° TickTy≥_à
xTimeNow
 )

509 
Ba£Ty≥_t
 
xResu…
;

510 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

514 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

515 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

519 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

524 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË!
pdFALSE
 )

528 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

529 
	`c⁄figASSERT
–
xResu…
 );

530 –Ë
xResu…
;

534 
	`mtCOVERAGE_TEST_MARKER
();

539 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

540 
	`mtCOVERAGE_TEST_MARKER
();

544 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

545 
	}
}

548 
	$p‹tTASK_FUNCTION
–
¥vTimîTask
, 
pvP¨amëîs
 )

550 
TickTy≥_t
 
xNextExpúeTime
;

551 
Ba£Ty≥_t
 
xLi°WasEm±y
;

554 –Ë
pvP¨amëîs
;

556 #if–
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 == 1 )

558 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
( );

564 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
();

572 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

576 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

579 
	`¥vPro˚ssRe˚ivedComm™ds
();

581 
	}
}

584 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, 
Ba£Ty≥_t
 
xLi°WasEm±y
 )

586 
TickTy≥_t
 
xTimeNow
;

587 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

589 
	`vTaskSu•ídAŒ
();

596 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

597 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

600 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

602 –Ë
	`xTaskResumeAŒ
();

603 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

613 if–
xLi°WasEm±y
 !
pdFALSE
 )

617 
xLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxOvîÊowTimîLi°
 );

620 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ), 
xLi°WasEm±y
 );

622 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

628 
	`p‹tYIELD_WITHIN_API
();

632 
	`mtCOVERAGE_TEST_MARKER
();

638 –Ë
	`xTaskResumeAŒ
();

641 
	}
}

644 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 )

646 
TickTy≥_t
 
xNextExpúeTime
;

655 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

656 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

658 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

663 
xNextExpúeTime
 = ( 
TickTy≥_t
 ) 0U;

666  
xNextExpúeTime
;

667 
	}
}

670 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 )

672 
TickTy≥_t
 
xTimeNow
;

673 
PRIVILEGED_DATA
 
TickTy≥_t
 
xLa°Time
 = ( TickType_t ) 0U;

675 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

677 if–
xTimeNow
 < 
xLa°Time
 )

679 
	`¥vSwôchTimîLi°s
();

680 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

684 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

687 
xLa°Time
 = 
xTimeNow
;

689  
xTimeNow
;

690 
	}
}

693 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
, c⁄° 
TickTy≥_t
 
xNextExpúyTime
, c⁄° TickTy≥_à
xTimeNow
, c⁄° TickTy≥_à
xComm™dTime
 )

695 
Ba£Ty≥_t
 
xPro˚ssTimîNow
 = 
pdFALSE
;

697 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

698 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

700 if–
xNextExpúyTime
 <
xTimeNow
 )

704 if–––
TickTy≥_t
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

708 
xPro˚ssTimîNow
 = 
pdTRUE
;

712 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

717 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

722 
xPro˚ssTimîNow
 = 
pdTRUE
;

726 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

730  
xPro˚ssTimîNow
;

731 
	}
}

734 
	$¥vPro˚ssRe˚ivedComm™ds
( )

736 
D´m⁄TaskMesßge_t
 
xMesßge
;

737 
Timî_t
 *
pxTimî
;

738 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
, 
xResu…
;

739 
TickTy≥_t
 
xTimeNow
;

741  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

743 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

747 if–
xMesßge
.
xMesßgeID
 < ( 
Ba£Ty≥_t
 ) 0 )

749 c⁄° 
CÆlbackP¨amëîs_t
 * c⁄° 
pxCÆlback
 = &–
xMesßge
.
u
.
xCÆlbackP¨amëîs
 );

753 
	`c⁄figASSERT
–
pxCÆlback
 );

756 
pxCÆlback
->
	`pxCÆlbackFun˘i⁄
–pxCÆlback->
pvP¨amëî1
,ÖxCÆlback->
ulP¨amëî2
 );

760 
	`mtCOVERAGE_TEST_MARKER
();

767 if–
xMesßge
.
xMesßgeID
 >–
Ba£Ty≥_t
 ) 0 )

771 
pxTimî
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.pxTimer;

773 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

776 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

780 
	`mtCOVERAGE_TEST_MARKER
();

783 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 );

791 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

793  
xMesßge
.
xMesßgeID
 )

795 
tmrCOMMAND_START
 :

796 
tmrCOMMAND_START_FROM_ISR
 :

797 
tmrCOMMAND_RESET
 :

798 
tmrCOMMAND_RESET_FROM_ISR
 :

799 
tmrCOMMAND_START_DONT_TRACE
 :

801 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

802 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.u.xTimîP¨amëîs.xMesßgeVÆuêË!
pdFALSE
 )

806 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

807 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

809 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

811 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

812 
	`c⁄figASSERT
–
xResu…
 );

813 –Ë
xResu…
;

817 
	`mtCOVERAGE_TEST_MARKER
();

822 
	`mtCOVERAGE_TEST_MARKER
();

826 
tmrCOMMAND_STOP
 :

827 
tmrCOMMAND_STOP_FROM_ISR
 :

829 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

832 
tmrCOMMAND_CHANGE_PERIOD
 :

833 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 :

834 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

835 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
;

836 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

844 –Ë
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

847 
tmrCOMMAND_DELETE
 :

848 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

853 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 0 )

855 
	`vP‹tFªe
–
pxTimî
 );

859 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

868 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

879 
	}
}

882 
	$¥vSwôchTimîLi°s
( )

884 
TickTy≥_t
 
xNextExpúeTime
, 
xRñﬂdTime
;

885 
Li°_t
 *
pxTemp
;

886 
Timî_t
 *
pxTimî
;

887 
Ba£Ty≥_t
 
xResu…
;

893  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

895 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

898 
pxTimî
 = ( 
Timî_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

899 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

900 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

905 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

907 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

915 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

916 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

918 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

919 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

920 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

924 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

925 
	`c⁄figASSERT
–
xResu…
 );

926 –Ë
xResu…
;

931 
	`mtCOVERAGE_TEST_MARKER
();

935 
pxTemp
 = 
pxCuºítTimîLi°
;

936 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

937 
pxOvîÊowTimîLi°
 = 
pxTemp
;

938 
	}
}

941 
	$¥vCheckF‹VÆidLi°AndQueue
( )

946 
	`èskENTER_CRITICAL
();

948 if–
xTimîQueue
 =
NULL
 )

950 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

951 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

952 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

953 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

955 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

959 
SèticQueue_t
 
xSèticTimîQueue
;

960 
uöt8_t
 
ucSèticTimîQueueSt‹age
[ ( 
size_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
 * –
D´m⁄TaskMesßge_t
 ) ];

962 
xTimîQueue
 = 
	`xQueueCª©eSètic
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, ( UBa£Ty≥_àË–
D´m⁄TaskMesßge_t
 ), &–
ucSèticTimîQueueSt‹age
[ 0 ] ), &
xSèticTimîQueue
 );

966 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

970 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

972 if–
xTimîQueue
 !
NULL
 )

974 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

978 
	`mtCOVERAGE_TEST_MARKER
();

985 
	`mtCOVERAGE_TEST_MARKER
();

988 
	`èskEXIT_CRITICAL
();

989 
	}
}

992 
Ba£Ty≥_t
 
	$xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 )

994 
Ba£Ty≥_t
 
xRëu∫
;

995 
Timî_t
 *
pxTimî
 = 
xTimî
;

997 
	`c⁄figASSERT
–
xTimî
 );

1000 
	`èskENTER_CRITICAL
();

1002 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_ACTIVE
 ) == 0 )

1004 
xRëu∫
 = 
pdFALSE
;

1008 
xRëu∫
 = 
pdTRUE
;

1011 
	`èskEXIT_CRITICAL
();

1013  
xRëu∫
;

1014 
	}
}

1017 *
	$pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 )

1019 
Timî_t
 * c⁄° 
pxTimî
 = 
xTimî
;

1020 *
pvRëu∫
;

1022 
	`c⁄figASSERT
–
xTimî
 );

1024 
	`èskENTER_CRITICAL
();

1026 
pvRëu∫
 = 
pxTimî
->
pvTimîID
;

1028 
	`èskEXIT_CRITICAL
();

1030  
pvRëu∫
;

1031 
	}
}

1034 
	$vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 )

1036 
Timî_t
 * c⁄° 
pxTimî
 = 
xTimî
;

1038 
	`c⁄figASSERT
–
xTimî
 );

1040 
	`èskENTER_CRITICAL
();

1042 
pxTimî
->
pvTimîID
 = 
pvNewID
;

1044 
	`èskEXIT_CRITICAL
();

1045 
	}
}

1048 #if–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1050 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

1052 
D´m⁄TaskMesßge_t
 
xMesßge
;

1053 
Ba£Ty≥_t
 
xRëu∫
;

1057 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
;

1058 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1059 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1060 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1062 
xRëu∫
 = 
	`xQueueSídFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

1064 
	`åa˚PEND_FUNC_CALL_FROM_ISR
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1066  
xRëu∫
;

1067 
	}
}

1072 #if–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1074 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 )

1076 
D´m⁄TaskMesßge_t
 
xMesßge
;

1077 
Ba£Ty≥_t
 
xRëu∫
;

1082 
	`c⁄figASSERT
–
xTimîQueue
 );

1086 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK
;

1087 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1088 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1089 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1091 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

1093 
	`åa˚PEND_FUNC_CALL
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1095  
xRëu∫
;

1096 
	}
}

1101 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1103 
UBa£Ty≥_t
 
	$uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 )

1105  ( ( 
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
;

1106 
	}
}

1111 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1113 
	$vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
, 
UBa£Ty≥_t
 
uxTimîNumbî
 )

1115 ––
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
 = uxTimerNumber;

1116 
	}
}

	@
1
.
0
131
13303
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/inc/filter.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/inc/sensor.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/src/filter.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Aircraft/src/sensor.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/FreeRTOSConfig.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/dma.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/gpio.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/i2c.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/main.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/spi.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/stm32f1xx_hal_conf.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/stm32f1xx_it.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Inc/usart.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/dma.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/freertos.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/gpio.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/i2c.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/main.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/spi.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/stm32f1xx_hal_msp.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/stm32f1xx_it.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/syscalls.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/sysmem.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/system_stm32f1xx.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Core/Src/usart.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_armcc.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_armclang.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_compiler.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_gcc.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_iccarm.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/cmsis_version.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_armv8mbl.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_armv8mml.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm0.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm0plus.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm1.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm23.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm3.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm33.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm4.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_cm7.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_sc000.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/core_sc300.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/mpu_armv7.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/mpu_armv8.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/CMSIS/Include/tz_context.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma_ex.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_exti.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash_ex.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio_ex.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pwr.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_cortex.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_exti.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_i2c.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_pwr.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_rcc.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_spi.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_system.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_utils.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_i2c.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/I2C_BSP/myiic.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/I2C_BSP/myiic.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/NRF2401/NRF2401.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/NRF2401/NRF2401.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMC5883/qmc5883.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMC5883/qmc5883.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMI8658/qmi8658.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/QMI8658/qmi8658.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/SPL06/spl06.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/HARDWARE/SPL06/spl06.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/croutine.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/StackMacros.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/croutine.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/deprecated_definitions.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/list.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/message_buffer.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/mpu_prototypes.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/mpu_wrappers.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/queue.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/stack_macros.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/stream_buffer.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/task.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/include/timers.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/list.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/queue.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/tasks.c
C:\Users\23886\Desktop\Easton_Quator\2_firmware/workspace/Middlewares/Third_Party/FreeRTOS/Source/timers.c
